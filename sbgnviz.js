(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function () {
  var sbgnviz = function sbgnviz(_options) {
    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance

    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ "./src/utilities/option-utilities-factory.js")();

    var options = optionUtilities.extendOptions(_options);

    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ "./src/sbgn-extensions/sbgn-cy-instance-factory.js")(); // Utilities whose functions will be exposed seperately


    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ "./src/utilities/ui-utilities-factory.js")();

    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ "./src/utilities/file-utilities-factory.js")();

    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ "./src/utilities/graph-utilities-factory.js")();

    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ "./src/utilities/main-utilities-factory.js")();

    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ "./src/utilities/keyboard-input-utilities-factory.js")(); // require keybord input utilities


    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ "./src/utilities/experimental-data-overlay.js")(); // Utilities to be exposed as is


    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ "./src/utilities/element-utilities-factory.js")();

    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ "./src/utilities/undo-redo-action-functions-factory.js")(); // Other utilities


    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ "./src/utilities/json-to-sbgnml-converter-factory.js")();

    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ "./src/utilities/json-to-nwt-converter-factory.js")();

    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ "./src/utilities/sbgnml-to-json-converter-factory.js")();

    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ "./src/utilities/nwt-to-json-converter-factory.js")();

    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ "./src/utilities/tab-delimited-to-json-converter-factory.js")();

    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ "./src/utilities/sif-to-json-converter-factory.js")();

    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ "./src/utilities/json-to-sif-converter-factory.js")();

    var classes = __webpack_require__(/*! ./utilities/classes */ "./src/utilities/classes.js");

    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ "./src/utilities/tab-delimeted-parser.js");

    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ "./src/utilities/layout-loader-factory.js")();

    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ "./src/utilities/layout-to-text-factory.js")();

    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ "./src/utilities/cd-to-sbgnml-converter-factory.js")();

    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ "./src/utilities/sbgnml-to-cd-converter-factory.js")();

    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ "./src/utilities/sbgnml-to-sbml-converter-factory.js")();

    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ "./src/utilities/sbml-to-sbgnml-converter-factory.js")(); // Fill param object to use it utilities internally


    param.optionUtilities = optionUtilities;
    param.sbgnCyInstance = sbgnCyInstance;
    param.uiUtilities = uiUtilities;
    param.fileUtilities = fileUtilities;
    param.graphUtilities = graphUtilities;
    param.mainUtilities = mainUtilities;
    param.keyboardInputUtilities = keyboardInputUtilities;
    param.elementUtilities = elementUtilities;
    param.undoRedoActionFunctions = undoRedoActionFunctions;
    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;
    param.jsonToNwtConverter = jsonToNwtConverter;
    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;
    param.nwtToJsonConverter = nwtToJsonConverter;
    param.tdToJsonConverter = tdToJsonConverter;
    param.sifToJsonConverter = sifToJsonConverter;
    param.classes = classes;
    param.layoutLoader = layoutLoader;
    param.layoutToText = layoutToText;
    param.jsonToSifConverter = jsonToSifConverter;
    param.cdToSbgnmlConverter = cdToSbgnmlConverter;
    param.sbgnmlToCdConverter = sbgnmlToCdConverter;
    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;
    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;
    param.experimentalDataOverlay = experimentalDataOverlay; // call constructors of objects with param

    sbgnCyInstance(param);
    optionUtilities(param);
    uiUtilities(param);
    fileUtilities(param);
    graphUtilities(param);
    mainUtilities(param);
    keyboardInputUtilities(param);
    elementUtilities(param);
    undoRedoActionFunctions(param);
    jsonToSbgnmlConverter(param);
    jsonToNwtConverter(param);
    sbgnmlToJsonConverter(param);
    nwtToJsonConverter(param);
    tdToJsonConverter(param);
    sifToJsonConverter(param);
    layoutLoader(param);
    layoutToText(param);
    jsonToSifConverter(param);
    cdToSbgnmlConverter(param);
    sbgnmlToCdConverter(param);
    sbgnmlToSbmlConverter(param);
    sbmlToSbgnmlConverter(param);
    experimentalDataOverlay(param); // set scratch pad for sbgnviz and init sbgnvizParams inside it

    sbgnCyInstance.getCy().scratch('_sbgnviz', {});
    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param; // Expose the api

    var api = {}; // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these

    api.elementUtilities = elementUtilities;
    api.undoRedoActionFunctions = undoRedoActionFunctions; //api.experimentalDataOverlay = experimentalDataOverlay;
    //expose utility of experimental data-overlay

    for (var prop in experimentalDataOverlay) {
      api[prop] = experimentalDataOverlay[prop];
    } // Expose each main utility seperately


    for (var prop in mainUtilities) {
      api[prop] = mainUtilities[prop];
    } // Expose each file utility seperately


    for (var prop in fileUtilities) {
      api[prop] = fileUtilities[prop];
    } // Expose each file utility seperately


    for (var prop in uiUtilities) {
      api[prop] = uiUtilities[prop];
    } // Expose each sbgn graph utility seperately


    for (var prop in graphUtilities) {
      api[prop] = graphUtilities[prop];
    } // Expose get cy function to enable accessing related cy instance


    api.getCy = sbgnCyInstance.getCy; // Expose some utilities directly here

    api.classes = classes;
    api.tdParser = tdParser;
    return api;
  };

  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ "./src/utilities/validMapProperties.js");

  sbgnviz.register = function (_libs) {
    var libs = {};
    libs.jQuery = _libs.jQuery || jQuery;
    libs.cytoscape = _libs.cytoscape || cytoscape;
    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;
    libs.tippy = _libs.tippy || Tippy; // Set the libraries to access them from any file

    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ "./src/utilities/lib-utilities.js");

    libUtilities.setLibs(libs);

    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ "./src/sbgn-extensions/sbgn-cy-renderer.js");

    sbgnRenderer();
  };

  if ( true && module.exports) {
    module.exports = sbgnviz;
  }
})();

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classes = __webpack_require__(/*! ../utilities/classes */ "./src/utilities/classes.js");

var libs = __webpack_require__(/*! ../utilities/lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

var jQuery = $ = libs.jQuery;
var cytoscape = libs.cytoscape;
var Tippy = libs.tippy;

module.exports = function () {
  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;
  var refreshPaddings, options, cy;

  var sbgnCyInstance = function sbgnCyInstance(param) {
    elementUtilities = param.elementUtilities;
    graphUtilities = param.graphUtilities;
    experimentalDataOverlay = param.experimentalDataOverlay;
    mainUtilities = param.mainUtilities;
    undoRedoActionFunctions = param.undoRedoActionFunctions;
    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions(); // cy = param.sbgnCyInstance.getCy();

    /*
     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.
     */

    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {
      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian

      return {
        x: radius * Math.cos(angleInRadian) + centerX,
        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system

      };
    };
    /*
     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle
     */


    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {
      var circleStr = "";
      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration

      var currentAngle = angleFrom; // current angle will be updated in each iteration

      for (var i = 0; i < numOfPoints; i++) {
        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);
        currentAngle += stepSize;
        circleStr += point.x + " " + point.y + " ";
      }

      return circleStr;
    };
    /*
     *  Generates a string representing processes/logical operators with ports.
     *  lineHW: Half width of line through the circle to the intersection point
     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)
     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'
     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'
     */


    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {
      var polygonStr;
      var numOfPoints = 30; // Number of points that both halves of circle will have

      if (orientation === 'horizontal') {
        var abovePoints, belowPoints;

        if (type === 'circle') {
          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);
          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);
        } else if (type === 'rectangle') {
          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';
          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';
        }

        polygonStr = "-1 -" + lineHW + " -" + shapeHW + " -" + lineHW + " ";
        polygonStr += abovePoints;
        polygonStr += shapeHW + " -" + lineHW + " 1 -" + lineHW + " 1 " + lineHW + " " + shapeHW + " " + lineHW + " ";
        polygonStr += belowPoints;
        polygonStr += "-" + shapeHW + " " + lineHW + " -1 " + lineHW;
      } else {
        var leftPoints, rightPoints;

        if (type === 'circle') {
          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);
          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);
        } else if (type === 'rectangle') {
          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';
          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';
        }

        polygonStr = "-" + lineHW + " -" + 1 + " -" + lineHW + " -" + shapeHW + " ";
        polygonStr += leftPoints;
        polygonStr += "-" + lineHW + " " + shapeHW + " -" + lineHW + " 1 " + lineHW + " 1 " + lineHW + " " + shapeHW + " ";
        polygonStr += rightPoints;
        polygonStr += lineHW + " -" + shapeHW + " " + lineHW + " -1";
      }

      return polygonStr;
    }; // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file


    function registerUndoRedoActions() {
      // create or get the undo-redo instance
      var ur = cy.undoRedo(); // register general actions
      // register add remove actions

      ur.action("deleteElesSimple", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);
      ur.action("deleteNodesSmart", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);
      ur.action("setPortsOrdering", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering); //experimental data ovarlay

      ur.action("removeAll", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);
      ur.action("hideExperiment", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);
      ur.action("unhideExperiment", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);
      ur.action("hideFile", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);
      ur.action("unhideFile", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);
      ur.action("removeExperiment", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);
      ur.action("removeFile", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);
      ur.action("expButtonChange", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);
      ur.action("fileButtonChangeHide", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);
      ur.action("fileButtonChangeUnHide", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide); //ur.action("expButtonUnhide", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);
      //ur.action("parseData", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);
    }

    function showTooltip(event) {
      var node = event.target || event.cyTarget;

      var canHaveTooltip = function canHaveTooltip(node) {
        return elementUtilities.isSIFNode(node) || node.data("tooltip") !== null;
      };

      if (!canHaveTooltip(node)) {
        return;
      }

      var ref; // used only for positioning

      var pos = event.position || event.cyPosition;
      var pan = cy.pan();
      var zoom = cy.zoom();
      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);
      var tooltipContent;

      if (!infobox) {
        tooltipContent = node.data('tooltip');

        if (tooltipContent == undefined || tooltipContent == '') {
          return;
        }

        ref = node.popperRef();
      } else {
        tooltipContent = infobox['tooltip'];

        if (tooltipContent == undefined) {
          return;
        }

        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);
        var modelW = infobox.bbox.w;
        var modelH = infobox.bbox.h;
        var renderedW = modelW * zoom;
        var renderedH = modelH * zoom;
        modelPos.x -= modelW / 2;
        modelPos.y -= modelH / 2;
        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);
        var renderedDims = {
          w: renderedW,
          h: renderedH
        };
        ref = node.popperRef({
          renderedPosition: function renderedPosition() {
            return renderedPos;
          },
          renderedDimensions: function renderedDimensions() {
            return renderedDims;
          }
        });
      }

      var placement = infobox ? infobox.anchorSide : 'bottom';
      var destroyTippy;
      var tippy = Tippy.one(ref, {
        content: function () {
          var content = document.createElement('div');
          content.style['font-size'] = 12 * zoom + 'px';
          content.innerHTML = tooltipContent;
          return content;
        }(),
        trigger: 'manual',
        hideOnClick: true,
        arrow: true,
        placement: placement,
        onHidden: function onHidden() {
          cy.off('pan zoom', destroyTippy);
          node.off('position', destroyTippy);
          cy.off('tapdrag', destroyTippy);
        }
      });

      destroyTippy = function destroyTippy() {
        tippy.destroy();
      };

      cy.on('pan zoom', destroyTippy);
      node.on('position', destroyTippy);
      cy.on('tapdrag', destroyTippy);
      setTimeout(function () {
        return tippy.show();
      }, 250);
    }

    function bindCyEvents() {
      cy.on('tapdragover', 'node', function (event) {
        var waitDuration = 200;
        var nodeTapdragout;
        var currEvent = event;
        var node = currEvent.target || currEvent.cyTarget;
        var inQueue = true;

        var clearNodeEvent = function clearNodeEvent() {
          if (nodeTapdragout) {
            node.off('tapdragout', nodeTapdragout);
          }

          if (nodeTapdrag) {
            node.off('tapdrag', nodeTapdrag);
          }
        };

        var getShowTooltipAsycn = function getShowTooltipAsycn() {
          return setTimeout(function () {
            showTooltip(currEvent);
            inQueue = false;
          }, waitDuration);
        };

        var showTooltipAsycn = getShowTooltipAsycn();
        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {
          clearTimeout(showTooltipAsycn);
          clearNodeEvent();
        });
        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {
          currEvent = e;

          if (!inQueue) {
            showTooltipAsycn = getShowTooltipAsycn();
            inQueue = true;
          }
        });
      });
      cy.on('tapend', 'node', function (event) {
        cy.style().update();
      });
      cy.on("expandcollapse.beforecollapse", "node", function (event) {
        var node = this; //The children info of complex nodes should be shown when they are collapsed

        if (node._private.data["class"].startsWith("complex")) {
          //The node is being collapsed store infolabel to use it later
          var infoLabel = elementUtilities.getInfoLabel(node);
          node._private.data.infoLabel = infoLabel;
        }
      });
      cy.on("expandcollapse.aftercollapse", "node", function (event) {
        var node = this; // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we
        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).

        cy.startBatch();
        var bbox = node.data('bbox');
        bbox.w = 36;
        bbox.h = 36;
        node.data('bbox', bbox);
        cy.endBatch();
      });
      cy.on("expandcollapse.beforeexpand", "node", function (event) {
        var node = this;
        node.removeData("infoLabel");
      });
      cy.on("expandcollapse.afterexpand", "node", function (event) {
        var node = this;
        cy.nodes().updateCompoundBounds();

        if (!options.recalculateOnComplexityManagement) {
          cy.style().update();
        } //Don't show children info when the complex node is expanded


        if (node._private.data["class"].startsWith("complex")) {
          node.removeStyle('content');
        }
      });
      cy.on("beforeDo", function (e, name, args) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          var parents = cy.elements(":parent").jsons(); // parent nodes

          var simples = cy.elements().not(":parent").jsons(); // simple nodes and edges

          var allElements = parents.concat(simples); // all elements

          args.allElements = allElements;
          var ports = {};
          cy.nodes().forEach(function (node) {
            if (elementUtilities.canHavePorts(node)) {
              ports[node.id()] = JSON.parse(JSON.stringify(node.data("ports")));
            }
          });
          args.ports = ports;
          args.viewport = {
            pan: JSON.parse(JSON.stringify(cy.pan())),
            zoom: cy.zoom()
          };
          if (name == "layout") mainUtilities.beforePerformLayout();
        }
      });
      cy.on("beforeRedo", function (e, name, args) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          var parents = cy.elements(":parent").jsons(); // parent nodes

          var simples = cy.elements().not(":parent").jsons(); // simple nodes and edges

          var allElements = parents.concat(simples); // all elements

          args.allElements2 = allElements;
          var ports = {};
          cy.nodes().forEach(function (node) {
            if (elementUtilities.canHavePorts(node)) {
              ports[node.id()] = JSON.parse(JSON.stringify(node.data("ports")));
            }
          });
          args.ports2 = ports;
          args.viewport2 = {
            pan: JSON.parse(JSON.stringify(cy.pan())),
            zoom: cy.zoom()
          };
        }
      });
      cy.on("afterDo", function (e, name, args, res) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          res.allElements = args.allElements;
          res.ports = args.ports;
          res.viewport = args.viewport;
        }
      });
      cy.on("afterRedo", function (e, name, args, res) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          res.allElements = args.allElements2;
          res.ports = args.ports2;
          res.viewport = args.viewport2;
          cy.json({
            flatEles: true,
            elements: args.allElements
          });
          cy.batch(function () {
            cy.nodes().forEach(function (node) {
              if (elementUtilities.canHavePorts(node)) {
                node.data("ports", args.ports[node.id()]);
              }
            });
          });
          cy.pan(args.viewport["pan"]);
          cy.zoom(args.viewport["zoom"]);
        }
      });
      cy.on("beforeUndo", function (e, name, args) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          var parents = cy.elements(":parent").jsons(); // parent nodes

          var simples = cy.elements().not(":parent").jsons(); // simple nodes and edges

          var allElements = parents.concat(simples); // all elements

          args.allElements2 = allElements;
          var ports = {};
          cy.nodes().forEach(function (node) {
            if (elementUtilities.canHavePorts(node)) {
              ports[node.id()] = JSON.parse(JSON.stringify(node.data("ports")));
            }
          });
          args.ports2 = ports;
          args.viewport2 = {
            pan: JSON.parse(JSON.stringify(cy.pan())),
            zoom: cy.zoom()
          };
        }
      });
      cy.on("afterUndo", function (e, name, args, res) {
        if (name == "layout" || name == "collapse" || name == "expand" || name == "collapseRecursively" || name == "expandRecursively" || name == "batch" && (args[0]['name'] == "thinBorder" || args[0]['name'] == "thickenBorder")) {
          res.allElements = args.allElements2;
          res.ports = args.ports2;
          res.viewport = args.viewport2;
          cy.json({
            flatEles: true,
            elements: args.allElements
          });
          cy.batch(function () {
            cy.nodes().forEach(function (node) {
              if (elementUtilities.canHavePorts(node)) {
                node.data("ports", args.ports[node.id()]);
              }
            });
          });
          cy.pan(args.viewport["pan"]);
          cy.zoom(args.viewport["zoom"]);
        }
      });
      cy.on('layoutstop', function (event) {
        /*
        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.
        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.
        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')
        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'
        */
        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {
          if (graphUtilities.portsEnabled === true) {
            elementUtilities.changePortsOrientationAfterLayout();
          }
        }
      });
      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {
        // if the event is not triggered for this cy instance return directly
        if (_cy != cy) {
          return;
        }

        var setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {
          if (cyInstance == undefined) return;

          if (node.data().infoboxCalculated) {
            return;
          } else if (node.isParent()) {
            node.children().forEach(function (childNode) {
              setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);
            });
          }

          node.data("infoboxCalculated", true);
          node.data('auxunitlayouts', {}); // for each statesandinfos

          var correctInfoBoxCoord = true;

          for (var i = 0; i < node.data('statesandinfos').length; i++) {
            var statesandinfos = node.data('statesandinfos')[i];
            var bbox = statesandinfos.bbox;
            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);
            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;
          }

          var statesToAdd = [];

          for (var i = 0; i < node.data('statesandinfos').length; i++) {
            var statesandinfos = node.data('statesandinfos')[i];
            var bbox = statesandinfos.bbox;

            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {
              classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node); //var fileLoadParam = {extraPadding:  Number(node.data().originalPadding)};

              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);
              statesandinfos.bbox.x = cordResult.x;
              statesandinfos.bbox.y = cordResult.y;
              statesandinfos.isDisplayed = true;
              var location = statesandinfos.anchorSide; // top bottom right left

              var layouts = node.data('auxunitlayouts');

              if (!layouts[location]) {
                // layout doesn't exist yet for this location
                layouts[location] = classes.AuxUnitLayout.construct(node, location);
              } // populate the layout of this side


              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed
            } else {
              if (!node.data('auxunitlayouts')) {
                // ensure minimal initialization
                node.data('auxunitlayouts', {});
              }

              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);

              if (!node.data('auxunitlayouts')[location]) {
                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);
              }

              var layout = node.data('auxunitlayouts')[location];
              statesandinfos.anchorSide = location;

              switch (location) {
                case "top":
                  statesandinfos.bbox.y = 0;
                  break;

                case "bottom":
                  statesandinfos.bbox.y = 100;
                  break;

                case "left":
                  statesandinfos.bbox.x = 0;
                  break;

                case "right":
                  statesandinfos.bbox.x = 100;
                  break;
              }

              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);
            }
          }

          if (isLayoutRequired === true) {
            var locations = classes.AuxUnitLayout.checkFit(node, cy);

            if (locations !== undefined && locations.length > 0) {
              classes.AuxUnitLayout.fitUnits(node, cy, locations);
            }
          }
        }; // list all entitytypes andstore them in the global scratch
        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned
        // following is unapplied due to performance decreasing, adding something like 20% time on load

        /*cy.startBatch();
        var entityHash = {};
        cy.nodes("[class='complex'], [class='macromolecule'], [class='nucleic acid feature']").forEach(function(node) {
          // identify an entity by its label AND class
          var label = node.data('label');
          var _class = node.data('class');
          var id=label+'-'+_class;
          if(!entityHash.hasOwnProperty(id)) { // create entitytype if doesn't already exist
            entityHash[id] = new classes.EntityType(id);
          }
          var currentEntityType = entityHash[id];
          currentEntityType.EPNs.push(node); // assigne the current element to its corresponding entitytype
           // collect all stateVariables of the current element, we need to assign StateVariableDefinitions to them
          for(var i=0; i < node.data('statesandinfos').length; i++) {
            var statesandinfos = node.data('statesandinfos')[i];
            if(statesandinfos instanceof classes.StateVariable) { // stateVariable found
              var currentStateVariable = statesandinfos;
              currentEntityType.assignStateVariable(currentStateVariable);
            }
          }
        });
        cy.endBatch();
        cy.scratch('_sbgnviz', {SBGNEntityTypes: entityHash});*/
        // assign statesandinfos to their layout


        cy.style().update(); // cy.startBatch();

        cy.nodes().forEach(function (node) {
          setCompoundInfoboxes(node, isLayoutRequired, cy);
        });

        if (callback) {
          callback();
        } //cy.endBatch();

      });
    }

    var selectionColor = '#d67614';
    var sbgnStyleSheet = cytoscape.stylesheet().selector("node").css({
      'text-valign': 'center',
      'text-halign': 'center',
      'text-opacity': 1,
      'opacity': 1,
      'padding': 0
    }).selector("node[class]").css({
      'shape': function shape(ele) {
        return elementUtilities.getCyShape(ele);
      },
      'content': function content(ele) {
        return elementUtilities.getElementContent(ele);
      },
      'font-size': function fontSize(ele) {
        // If node labels are expected to be adjusted automatically or element cannot have label
        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()
        // else return ele.data('font-size')
        var opt = options.adjustNodeLabelFontSizeAutomatically;
        var adjust = typeof opt === 'function' ? opt() : opt;

        if (!adjust && ele.data('font-size') != undefined) {
          return ele.data('font-size');
        }

        return elementUtilities.getLabelTextSize(ele);
      }
    }).selector("node[class][font-family]").style({
      'font-family': function fontFamily(ele) {
        return ele.data('font-family');
      }
    }).selector("node[class][font-style]").style({
      'font-style': function fontStyle(ele) {
        return ele.data('font-style');
      }
    }).selector("node[class][font-weight]").style({
      'font-weight': function fontWeight(ele) {
        return ele.data('font-weight');
      }
    }).selector("node[class][color]").style({
      'color': function color(ele) {
        return ele.data('color');
      }
    }).selector("node[class][background-color]").style({
      'background-color': function backgroundColor(ele) {
        return ele.data('background-color');
      }
    }).selector("node[class][background-opacity]").style({
      'background-opacity': function backgroundOpacity(ele) {
        return ele.data('background-opacity');
      }
    }).selector("node[class][border-width]").style({
      'border-width': function borderWidth(ele) {
        return ele.data('border-width');
      }
    }).selector("node[class][border-color]").style({
      'border-color': function borderColor(ele) {
        return ele.data('border-color');
      }
    }).selector("node[class][text-wrap]").style({
      'text-wrap': function textWrap(ele) {
        var opt = options.fitLabelsToNodes;
        var isFit = typeof opt === 'function' ? opt() : opt;

        if (isFit) {
          return 'ellipsis';
        }

        return ele.data('text-wrap');
      }
    }).selector("node").style({
      'text-max-width': function textMaxWidth(ele) {
        var opt = options.fitLabelsToNodes;
        var isFit = typeof opt === 'function' ? opt() : opt;

        if (isFit) {
          return ele.width();
        }

        return '1000px';
      }
    }).selector("edge[class][line-color]").style({
      'line-color': function lineColor(ele) {
        return ele.data('line-color');
      },
      'source-arrow-color': function sourceArrowColor(ele) {
        return ele.data('line-color');
      },
      'target-arrow-color': function targetArrowColor(ele) {
        return ele.data('line-color');
      }
    }).selector("edge[class][width]").style({
      'width': function width(ele) {
        return ele.data('width');
      }
    }).selector("node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process']").css({
      'shape-polygon-points': function shapePolygonPoints(ele) {
        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {
          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us
          var port = ele.data('ports')[0]; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'

          var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // The half width of the actual shape discluding the ports

          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x); // Get the class of the node

          var _class = ele.data('class'); // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'


          var type = _class.endsWith('process') ? 'rectangle' : 'circle'; // Generate a polygon string with above parameters and return it

          return generateShapeWithPortString(0.01, shapeHW, type, orientation);
        } // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug


        return '-1 -1 1 1 1 0';
      }
    }).selector("node[class='perturbing agent']").css({
      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'
    }).selector("node[class='tag']").css({
      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'
    }).selector("node:parent[class^='complex']") // start with complex
    .css({
      'text-valign': 'bottom',
      'text-halign': 'center',
      'text-margin-y': elementUtilities.getComplexMargin,
      'padding': elementUtilities.getComplexPadding,
      'compound-sizing-wrt-labels': 'exclude'
    }).selector("node[class='compartment']").css({
      'text-valign': 'bottom',
      'text-halign': 'center',
      'text-margin-y': -1 * options.extraCompartmentPadding,
      'compound-sizing-wrt-labels': 'exclude'
    }).selector("node:parent[class='compartment']").css({
      'padding': function padding() {
        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;
      }
    }).selector("node[class='submap']").css({
      'text-valign': 'bottom',
      'text-halign': 'center',
      'text-margin-y': -1 * options.extraCompartmentPadding,
      'compound-sizing-wrt-labels': 'exclude'
    }).selector("node:parent[class='submap'],[class='topology group']").css({
      'padding': function padding() {
        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;
      }
    }).selector("node:childless[bbox]").css({
      'width': 'data(bbox.w)',
      'height': 'data(bbox.h)'
    }).selector("node:parent[minHeight]").css({
      'min-height': function minHeight(ele) {
        if (graphUtilities.compoundSizesConsidered) {
          return ele.data('minHeight');
        }

        return 0;
      }
    }).selector("node:parent[minHeightBiasTop]").css({
      'min-height-bias-top': function minHeightBiasTop(ele) {
        var min = parseFloat(ele.data('minHeightBiasTop'));
        return (min >= 0 ? min : 100) + '%';
      }
    }).selector("node:parent[minHeightBiasBottom]").css({
      'min-height-bias-bottom': function minHeightBiasBottom(ele) {
        var min = parseFloat(ele.data('minHeightBiasBottom'));
        return (min >= 0 ? min : 100) + '%';
      }
    }).selector("node:parent[minWidth]").css({
      'min-width': function minWidth(ele) {
        if (graphUtilities.compoundSizesConsidered) {
          return ele.data('minWidth');
        }

        return 0;
      }
    }).selector("node:parent[minWidthBiasLeft]").css({
      'min-width-bias-left': function minWidthBiasLeft(ele) {
        var min = parseFloat(ele.data('minWidthBiasLeft'));
        return (min >= 0 ? min : 100) + '%';
      }
    }).selector("node:parent[minWidthBiasRight]").css({
      'min-width-bias-right': function minWidthBiasRight(ele) {
        var min = parseFloat(ele.data('minWidthBiasRight'));
        return (min >= 0 ? min : 100) + '%';
      }
    }).selector("node.cy-expand-collapse-collapsed-node").css({
      'border-style': 'dashed'
    }).selector("node:selected").css({
      'border-color': selectionColor,
      'target-arrow-color': '#000',
      'text-outline-color': '#000',
      'border-width': function borderWidth(ele) {
        return Math.max(parseFloat(ele.data('border-width')) + 2, 3);
      }
    }).selector("node:active").css({
      'background-opacity': 0.7,
      'overlay-color': selectionColor,
      'overlay-padding': '14'
    }).selector("edge").css({
      'curve-style': 'bezier',
      'target-arrow-fill': function targetArrowFill(ele) {
        return elementUtilities.getCyTargetArrowFill(ele);
      },
      'source-arrow-fill': 'hollow',
      'text-border-color': function textBorderColor(ele) {
        if (ele.selected()) {
          return selectionColor;
        }

        return ele.css('line-color');
      },
      'color': function color(ele) {
        if (ele.selected()) {
          return selectionColor;
        }

        return ele.css('line-color');
      },
      'arrow-scale': 1.25
    }).selector("edge.cy-expand-collapse-meta-edge").css({
      'line-color': '#C4C4C4',
      'source-arrow-color': '#C4C4C4',
      'target-arrow-color': '#C4C4C4'
    }).selector("edge:selected").css({
      'line-color': selectionColor,
      'source-arrow-color': selectionColor,
      'target-arrow-color': selectionColor,
      'width': function width(ele) {
        return Math.max(parseFloat(ele.data('width')) + 2, 3);
      }
    }).selector("edge:active").css({
      'background-opacity': 0.7,
      'overlay-color': selectionColor,
      'overlay-padding': '8'
    }).selector("edge[cardinality > 0]").css({
      'text-rotation': 'autorotate',
      'text-background-shape': 'rectangle',
      'text-border-opacity': '1',
      'text-border-width': '1',
      'text-background-color': 'white',
      'text-background-opacity': '1'
    }).selector("edge[class='consumption'][cardinality > 0]").css({
      'source-label': function sourceLabel(ele) {
        return '' + ele.data('cardinality');
      },
      'source-text-margin-y': '-10',
      'source-text-offset': '18',
      'font-size': '13'
    }).selector("edge[class='production'][cardinality > 0]").css({
      'target-label': function targetLabel(ele) {
        return '' + ele.data('cardinality');
      },
      'target-text-margin-y': '-10',
      'target-text-offset': '18',
      'font-size': '13'
    }).selector("edge[class]").css({
      'target-arrow-shape': function targetArrowShape(ele) {
        return elementUtilities.getCyArrowShape(ele);
      },
      'source-arrow-shape': 'none',
      'source-endpoint': function sourceEndpoint(ele) {
        return elementUtilities.getEndPoint(ele, 'source');
      },
      'target-endpoint': function targetEndpoint(ele) {
        return elementUtilities.getEndPoint(ele, 'target');
      },
      'line-style': function lineStyle(ele) {
        return elementUtilities.getArrayLineStyle(ele);
      }
    }).selector("core").css({
      'selection-box-color': selectionColor,
      'selection-box-opacity': '0.2',
      'selection-box-border-color': selectionColor
    });
    var sbgnNetworkContainer = $(options.networkContainerSelector); // create and init cytoscape:

    cytoscape({
      container: sbgnNetworkContainer,
      style: sbgnStyleSheet,
      showOverlay: false,
      minZoom: 0.125,
      maxZoom: 16,
      boxSelectionEnabled: true,
      motionBlur: true,
      wheelSensitivity: 0.1,
      ready: function ready() {
        cy = this; // If undoable register undo/redo actions

        if (options.undoable) {
          registerUndoRedoActions();
        }

        bindCyEvents();
      }
    });
  };

  sbgnCyInstance.getCy = function () {
    return cy;
  };

  return sbgnCyInstance;
};

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * Render sbgn specific shapes which are not supported by cytoscape.js core
 */
var libs = __webpack_require__(/*! ../utilities/lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

var jQuery = $ = libs.jQuery;
var cytoscape = libs.cytoscape;
var cyMath = math = cytoscape.math;
var cyBaseNodeShapes = cytoscape.baseNodeShapes;
var cyStyleProperties = cytoscape.styleProperties;

var classes = __webpack_require__(/*! ../utilities/classes */ "./src/utilities/classes.js");

module.exports = function () {
  var $$ = cytoscape;
  /*
  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz
  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke
  * border more than once as they would have infoboxes, multimers etc.
  * Extends the style properties of node with the given ones then strokes the border.
  * Would needed to be slightly updated during cytoscape upgrades if related function in
  * Cytoscape.js is updated. Information about where is the related function is located
  * can be found in the file that list the changes done in ivis cytoscape fork.
  */

  $$.sbgn.drawBorder = function (_ref) {
    var context = _ref.context,
        node = _ref.node,
        borderWidth = _ref.borderWidth,
        borderColor = _ref.borderColor,
        borderStyle = _ref.borderStyle,
        borderOpacity = _ref.borderOpacity;
    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));

    if (borderWidth > 0) {
      var parentOpacity = node && node.effectiveOpacity() || 1;
      borderStyle = borderStyle || node && node.css('border-style');
      borderColor = borderColor || node && node.css('border-color');
      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;
      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];
      var initialProps = {};
      propsToRestore.forEach(function (propName) {
        initialProps[propName] = context[propName];
      });
      context.lineWidth = borderWidth;
      context.lineCap = 'butt';
      context.strokeStyle = borderColor;
      context.globalAlpha = borderOpacity;

      if (context.setLineDash) {
        // for very outofdate browsers
        switch (borderStyle) {
          case 'dotted':
            context.setLineDash([1, 1]);
            break;

          case 'dashed':
            context.setLineDash([4, 2]);
            break;

          case 'solid':
          case 'double':
            context.setLineDash([]);
            break;
        }
      }

      context.stroke();

      if (borderStyle === 'double') {
        context.lineWidth = borderWidth / 3;
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = 'destination-out';
        context.stroke();
        context.globalCompositeOperation = gco;
      } // reset in case we changed the border style


      if (context.setLineDash) {
        // for very outofdate browsers
        context.setLineDash([]);
      }

      propsToRestore.forEach(function (propName) {
        context[propName] = initialProps[propName];
      });
    }
  }; // Taken from cytoscape.js and modified


  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);

    if (context.beginPath) {
      context.beginPath();
    } // Start at top middle


    context.moveTo(x, y - halfHeight); // Arc from middle top to right side

    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

    context.lineTo(x, y - halfHeight);
    context.closePath();
  }; // Taken from cytoscape.js


  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {
    var halfW = width / 2;
    var halfH = height / 2;

    if (context.beginPath) {
      context.beginPath();
    }

    context.moveTo(x + halfW * points[0], y + halfH * points[1]);

    for (var i = 1; i < points.length / 2; i++) {
      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
    }

    context.closePath();
  };

  var sbgnShapes = $$.sbgn.sbgnShapes = {
    'empty set': true,
    'nucleic acid feature': true,
    'complex': true,
    'macromolecule': true,
    'simple chemical': true,
    'biological activity': true,
    'compartment': true
  };
  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {
    'macromolecule': true,
    'nucleic acid feature': true,
    'simple chemical': true,
    'complex': true,
    'biological activity': true,
    'compartment': true
  };
  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {
    'simple chemical': true,
    'macromolecule': true,
    'nucleic acid feature': true,
    'complex': true,
    'biological activity': true,
    'compartment': true
  };
  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {
    'macromolecule': true,
    'complex': true,
    'nucleic acid feature': true,
    'simple chemical': true
  };

  cyMath.calculateDistance = function (point1, point2) {
    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);
    return Math.sqrt(distance);
  };

  $$.sbgn.colors = {
    clone: "#838383"
  };

  $$.sbgn.getDefaultComplexCornerLength = function () {
    return 24;
  };

  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {
    var layouts = node.data('auxunitlayouts');

    for (var side in layouts) {
      var layout = layouts[side];
      classes.AuxUnitLayout.draw(layout, node.cy(), context);
    }

    context.beginPath();
    context.closePath();
  };

  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {
    switch (shapeName) {
      case 'roundrectangle':
        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);
        break;

      case 'bottomroundrectangle':
        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);
        break;

      case 'ellipse':
        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);
        break;

      case 'complex':
        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);
        break;

      case 'perturbing agent':
        var points = $$.sbgn.generatePerturbingAgentPoints();
        drawPolygonPath(context, x, y, width, height, points);
        break;

      case 'rectangle':
        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);
        break;

      case 'stadium':
        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));
        break;
    }
  }; // $$.sbgn.AfShapeArgsFn = function (self){
  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data("class")];
  // }


  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {
    //check rectangle at top
    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {
      return true;
    } //check rectangle at bottom


    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {
      return true;
    } //check ellipses


    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {
      x -= centerX;
      y -= centerY;
      x /= width / 2 + padding;
      y /= height / 2 + padding;
      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;
    }; // Check bottom right quarter circle


    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {
      return true;
    } // Check bottom left quarter circle


    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {
      return true;
    }

    return false;
  }; //we need to force opacity to 1 since we might have state and info boxes.
  //having opaque nodes which have state and info boxes gives unpleasent results.


  $$.sbgn.forceOpacityToOne = function (node, context) {
    var parentOpacity = node.effectiveOpacity();

    if (parentOpacity === 0) {
      return;
    }

    context.fillStyle = "rgba(" + node._private.style["background-color"].value[0] + "," + node._private.style["background-color"].value[1] + "," + node._private.style["background-color"].value[2] + "," + 1 * node.css('opacity') * parentOpacity + ")";
  };

  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {
    var halfWidth = width / 2;
    var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);

    var cornerRadius = Math.min(halfWidth, halfHeight);
    context.beginPath(); // Start at top middle

    context.moveTo(x, y - halfHeight); // Arc from middle top to right side

    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

    context.lineTo(x, y - halfHeight);
    context.closePath();
  };

  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {
    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);
    context.fill();
  };

  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = $$.sbgn.colors.clone;
      context.beginPath();
      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);
      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);
      var markerEndX = centerX;
      var markerEndY = markerBeginY;
      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);
      context.closePath();
      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  }

  ;

  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = $$.sbgn.colors.clone;
      context.beginPath();
      var markerBeginX = centerX;
      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);
      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);
      var markerEndY = markerBeginY;
      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);
      context.closePath();
      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  }

  ;

  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {
    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);
  };

  $$.sbgn.drawBarrel = function (context, x, y, width, height) {
    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);
    context.fill();
  };

  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {
    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);
    context.fill();
  }; // The old draw implementation for nucleic acid feature
  // now only used for clone marker drawing of nucleic acid feature
  // and macromolecule shapes because 'bottomroundrectangle' function
  // of cytoscape.js did not fit well for this purpose.
  // Did not change the name yet directly as drawNucAcidFeatureClone etc.
  // because it actually draws a nucleic acid feature in a different way.


  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {
    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var left = centerX - halfWidth,
        right = centerX + halfWidth;
    var bottom = centerY - halfHeight,
        top = centerY + halfHeight;
    context.beginPath();
    context.moveTo(left, bottom);
    context.lineTo(right, bottom);
    context.lineTo(right, centerY);
    context.arcTo(right, top, centerX, top, cornerRadius);
    context.arcTo(left, top, left, centerY, cornerRadius);
    context.lineTo(left, bottom);
    context.closePath();
    context.fill();
  };
  /*
   * Code taken from https://jsperf.com/string-prototype-endswith
   * Direct implementation seems to work better.
   * Using this improves isMultimer() performance.
   * Makes it take 0.1 or 0.2% less time from the whole
   * loading process, down from ~0.4% initially.
   */


  function endsWith(str, pattern) {
    for (var i = pattern.length, l = str.length; i--;) {
      if (str.charAt(--l) != pattern.charAt(i)) {
        return false;
      }
    }

    return true;
  }

  $$.sbgn.isMultimer = function (node) {
    var sbgnClass = node._private.data["class"];
    if (sbgnClass && endsWith(sbgnClass, "multimer")) return true;
    return false;
  }; //this function is created to have same corner length when
  //complex's width or height is changed


  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {
    //cp stands for corner proportion
    var cpX = Math.min(cornerLength, 0.5 * width) / width;
    var cpY = Math.min(cornerLength, 0.5 * height) / height;
    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];
    return complexPoints;
  };

  $$.sbgn.generatePerturbingAgentPoints = function () {
    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];
  };

  $$.sbgn.getDefaultMultimerPadding = function () {
    return 5;
  }; // draw background image of nodes


  $$.sbgn.drawImage = function (context, imgObj) {
    if (imgObj) {
      context.clip();
      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);
      context.restore();
    }
  };

  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment');

  $$.sbgn.registerSbgnNodeShapes = function () {
    function generateDrawFcn(_ref2) {
      var plainDrawFcn = _ref2.plainDrawFcn,
          extraDrawFcn = _ref2.extraDrawFcn,
          canBeMultimer = _ref2.canBeMultimer,
          cloneMarkerFcn = _ref2.cloneMarkerFcn,
          canHaveInfoBox = _ref2.canHaveInfoBox,
          multimerPadding = _ref2.multimerPadding;
      return function (context, node, imgObj) {
        var borderWidth = parseFloat(node.css('border-width'));
        var width = node.outerWidth() - borderWidth;
        var height = node.outerHeight() - borderWidth;
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var bgOpacity = node.css('background-opacity');
        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker;

        if (canBeMultimer && $$.sbgn.isMultimer(node)) {
          //add multimer shape
          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);
          $$.sbgn.drawBorder({
            context: context,
            node: node
          });

          if (extraDrawFcn) {
            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);
            $$.sbgn.drawBorder({
              context: context,
              node: node
            });
          }

          if (isCloned) {
            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);
          }
        }

        plainDrawFcn(context, centerX, centerY, width, height);
        $$.sbgn.drawBorder({
          context: context,
          node: node
        });
        $$.sbgn.drawImage(context, imgObj);

        if (extraDrawFcn) {
          extraDrawFcn(context, centerX, centerY, width, height);
          $$.sbgn.drawBorder({
            context: context,
            node: node
          });
        }

        if (isCloned) {
          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);
        }

        if (canHaveInfoBox) {
          var oldStyle = context.fillStyle;
          $$.sbgn.forceOpacityToOne(node, context);
          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);
          context.fillStyle = oldStyle;
        }
      };
    }

    function generateIntersectLineFcn(_ref3) {
      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,
          canBeMultimer = _ref3.canBeMultimer,
          cloneMarkerFcn = _ref3.cloneMarkerFcn,
          canHaveInfoBox = _ref3.canHaveInfoBox,
          multimerPadding = _ref3.multimerPadding;
      return function (node, x, y) {
        var borderWidth = parseFloat(node.css('border-width'));
        var padding = borderWidth / 2;
        var width = node.outerWidth() - borderWidth;
        var height = node.outerHeight() - borderWidth;
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var intersections = [];

        if (canHaveInfoBox) {
          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);
          intersections = intersections.concat(stateAndInfoIntersectLines);
        }

        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);
        intersections = intersections.concat(nodeIntersectLines);

        if (canBeMultimer && $$.sbgn.isMultimer(node)) {
          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);
          intersections = intersections.concat(multimerIntersectionLines);
        }

        return $$.sbgn.closestIntersectionPoint([x, y], intersections);
      };
    }

    function generateCheckPointFcn(_ref4) {
      var plainCheckPointFcn = _ref4.plainCheckPointFcn,
          canBeMultimer = _ref4.canBeMultimer,
          cloneMarkerFcn = _ref4.cloneMarkerFcn,
          canHaveInfoBox = _ref4.canHaveInfoBox,
          multimerPadding = _ref4.multimerPadding;
      return function (x, y, node, threshold) {
        threshold = threshold || 0;
        var borderWidth = parseFloat(node.css('border-width'));
        var width = node.outerWidth() - borderWidth + 2 * threshold;
        var height = node.outerHeight() - borderWidth + 2 * threshold;
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var padding = borderWidth / 2;

        var nodeCheck = function nodeCheck() {
          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);
        };

        var stateAndInfoCheck = function stateAndInfoCheck() {
          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);
        };

        var multimerCheck = function multimerCheck() {
          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);
        };

        return nodeCheck() || stateAndInfoCheck() || multimerCheck();
      };
    }

    var shapeNames = ["simple chemical", "macromolecule", "complex", "nucleic acid feature", "empty set", "biological activity", "compartment", "oldCompartment"];
    shapeNames.forEach(function (shapeName) {
      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];
      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];
      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];
      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];
      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];
      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];
      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();
      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];
      var draw = generateDrawFcn({
        plainDrawFcn: plainDrawFcn,
        canBeMultimer: canBeMultimer,
        cloneMarkerFcn: cloneMarkerFcn,
        canHaveInfoBox: canHaveInfoBox,
        multimerPadding: multimerPadding,
        extraDrawFcn: extraDrawFcn
      });
      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({
        plainIntersectLineFcn: plainIntersectLineFcn,
        canBeMultimer: canBeMultimer,
        cloneMarkerFcn: cloneMarkerFcn,
        canHaveInfoBox: canHaveInfoBox,
        multimerPadding: multimerPadding
      }) : plainIntersectLineFcn;
      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({
        plainCheckPointFcn: plainCheckPointFcn,
        canBeMultimer: canBeMultimer,
        cloneMarkerFcn: cloneMarkerFcn,
        canHaveInfoBox: canHaveInfoBox,
        multimerPadding: multimerPadding
      }) : plainCheckPointFcn;
      var shape = {
        draw: draw,
        intersectLine: intersectLine,
        checkPoint: checkPoint,
        multimerPadding: multimerPadding
      };
      cyBaseNodeShapes[shapeName] = shape;
    });
  };

  $$.sbgn.drawEllipse = function (context, x, y, width, height) {
    //$$.sbgn.drawEllipsePath(context, x, y, width, height);
    //context.fill();
    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);
  };

  $$.sbgn.drawComplex = function (context, x, y, width, height, cornerLength) {
    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();
    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);
    drawPolygonPath(context, x, y, width, height, points);
    context.fill();
  };

  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {
    var points = cyMath.generateUnitNgonPoints(4, 0);
    context.beginPath();
    var scaleX = width * Math.sqrt(2) / 2,
        scaleY = height * Math.sqrt(2) / 2;
    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);
    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);
    context.closePath();
  };

  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {
    var points = $$.sbgn.generateBiologicalActivityPoints();
    drawPolygonPath(context, x, y, width, height, points);
    context.fill();
  };

  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height) {
    drawRoundRectanglePath(context, x, y, width, height);
    context.fill();
  };

  $$.sbgn.generateNucleicAcidPoints = function () {
    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);
  };

  $$.sbgn.generateBiologicalActivityPoints = function () {
    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);
  };

  $$.sbgn.generateCompartmentPoints = function () {
    return math.generateUnitNgonPointsFitToSquare(4, 0);
  };

  $$.sbgn.plainDraw = {
    "simple chemical": $$.sbgn.drawSimpleChemical,
    "macromolecule": $$.sbgn.drawRoundRectangle,
    "complex": $$.sbgn.drawComplex,
    "nucleic acid feature": $$.sbgn.drawBottomRoundRectangle,
    "empty set": $$.sbgn.drawEllipse,
    "biological activity": $$.sbgn.drawBiologicalActivity,
    "compartment": $$.sbgn.drawBarrel,
    "oldCompartment": $$.sbgn.drawRoundRectangle
  }; // To define an extra drawing for the node that is rendered at the very end,
  // even after the node background image is drawn.
  // E.g. cross lines of "empty set" nodes.

  $$.sbgn.extraDraw = {
    "empty set": $$.sbgn.drawCrossLine
  };
  $$.sbgn.plainIntersectLine = {
    "simple chemical": function simpleChemical(centerX, centerY, width, height, x, y, padding) {
      return cyBaseNodeShapes["ellipse"].intersectLine(centerX, centerY, width, height, x, y, padding);
    },
    "macromolecule": function macromolecule(centerX, centerY, width, height, x, y, padding) {
      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);
    },
    "complex": function complex(centerX, centerY, width, height, x, y, padding) {
      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);
      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);
    },
    "nucleic acid feature": function nucleicAcidFeature(centerX, centerY, width, height, x, y, padding) {
      return cyBaseNodeShapes["bottomroundrectangle"].intersectLine(centerX, centerY, width, height, x, y, padding);
    },
    "empty set": function emptySet(centerX, centerY, width, height, x, y, padding) {
      return cyBaseNodeShapes["ellipse"].intersectLine(centerX, centerY, width, height, x, y, padding);
    },
    "biological activity": function biologicalActivity(centerX, centerY, width, height, x, y, padding) {
      var points = $$.sbgn.generateBiologicalActivityPoints();
      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);
    },
    "compartment": function compartment(centerX, centerY, width, height, x, y, padding) {
      return cyBaseNodeShapes["barrel"].intersectLine(centerX, centerY, width, height, x, y, padding);
    },
    "oldCompartment": function oldCompartment(centerX, centerY, width, height, x, y, padding) {
      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);
    }
  };
  $$.sbgn.plainCheckPoint = {
    "simple chemical": function simpleChemical(x, y, padding, width, height, centerX, centerY) {
      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);
      var halfWidth = width / 2;
      var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);

      var cornerRadius = Math.min(halfWidth, halfHeight); //var cornerRadius = math.getRoundRectangleRadius( width, height );

      var diam = cornerRadius * 2; // Check hBox

      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {
        return true;
      } // Check vBox


      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {
        return true;
      } // Check top left quarter circle


      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
        return true;
      } // Check top right quarter circle


      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
        return true;
      } // Check bottom right quarter circle


      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      } // Check bottom left quarter circle


      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      }

      return false; //return cyBaseNodeShapes["ellipse"].checkPoint( x, y, padding, width, height, centerX, centerY );
    },
    "macromolecule": function macromolecule(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["roundrectangle"].checkPoint(x, y, padding, width, height, centerX, centerY);
    },
    "complex": function complex(x, y, padding, width, height, centerX, centerY) {
      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);
      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);
    },
    "nucleic acid feature": function nucleicAcidFeature(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["bottomroundrectangle"].checkPoint(x, y, padding, width, height, centerX, centerY);
    },
    "empty set": function emptySet(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["ellipse"].checkPoint(x, y, padding, width, height, centerX, centerY);
    },
    "biological activity": function biologicalActivity(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["rectangle"].checkPoint(x, y, padding, width, height, centerX, centerY);
    },
    "compartment": function compartment(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["barrel"].checkPoint(x, y, padding, width, height, centerX, centerY);
    },
    "oldCompartment": function oldCompartment(x, y, padding, width, height, centerX, centerY) {
      return cyBaseNodeShapes["roundrectangle"].checkPoint(x, y, padding, width, height, centerX, centerY);
    }
  };
  $$.sbgn.cloneMarker = {
    "simple chemical": function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cornerRadius = Math.min(width / 2, height / 2);
        var firstCircleCenterX = centerX - width / 2 + cornerRadius;
        var firstCircleCenterY = centerY;
        var secondCircleCenterX = centerX + width / 2 - cornerRadius;
        var secondCircleCenterY = centerY;
        var bottomCircleCenterX = centerX;
        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;

        if (width < height) {
          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);
          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);
        } else {
          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);
          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);
        }

        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;
        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);
        var cloneX = centerX;
        var cloneY = centerY + 3 / 4 * cornerRadius;
        var cloneWidth = width - 2 * cornerRadius;
        var cloneHeight = cornerRadius / 2;
        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);
        context.fill();
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    "nucleic acid feature": function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cloneWidth = width;
        var cloneHeight = height / 4;
        var cloneX = centerX;
        var cloneY = centerY + 3 * height / 8;
        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);
        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    "macromolecule": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      $$.sbgn.cloneMarker["nucleic acid feature"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);
    },
    "complex": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();
        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;
        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;
        var cloneWidth = width;
        var cloneHeight = height * cpY / 2;
        var cloneX = centerX;
        var cloneY = centerY + height / 2 - cloneHeight / 2;
        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];
        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;
        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);
        context.fill();
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    }
  };

  $$.sbgn.closestIntersectionPoint = function (point, intersections) {
    if (intersections.length <= 0) return [];
    var closestIntersection = [];
    var minDistance = Number.MAX_VALUE;

    for (var i = 0; i < intersections.length; i = i + 2) {
      var checkPoint = [intersections[i], intersections[i + 1]];
      var distance = cyMath.calculateDistance(point, checkPoint);

      if (distance < minDistance) {
        minDistance = distance;
        closestIntersection = checkPoint;
      }
    }

    return closestIntersection;
  };

  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {
    // var nodeX = node._private.position.x;
    // var nodeY = node._private.position.y;
    // var width = node.width();
    // var height = node.height();
    // var padding = parseInt(node.css('border-width')) / 2;
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var straightLineIntersections; // Top segment, left to right

    {
      var topStartX = nodeX - halfWidth - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth + padding;
      var topEndY = topStartY;
      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Right segment, top to bottom

    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight - padding;
      var rightEndX = rightStartX;
      var rightEndY = nodeY + halfHeight - cornerRadius + padding;
      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Bottom segment, left to right

    {
      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
      var bottomStartY = nodeY + halfHeight + padding;
      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
      var bottomEndY = bottomStartY;
      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Left segment, top to bottom

    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight - padding;
      var leftEndX = leftStartX;
      var leftEndY = nodeY + halfHeight - cornerRadius + padding;
      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Check intersections with arc segments, we have only two arcs for
    //nucleic acid features

    var arcIntersections; // Bottom Right

    {
      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    } // Bottom Left

    {
      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    }
    return []; // if nothing
  }; //this function gives the intersections of any line with the upper half of perturbing agent


  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {
    var halfWidth = width / 2;
    var halfHeight = height / 2; // Check intersections with straight line segments

    var straightLineIntersections = []; // Top segment, left to right

    {
      var topStartX = nodeX - halfWidth - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth + padding;
      var topEndY = topStartY;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Right segment, top to bottom

    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight - padding;
      var rightEndX = rightStartX - halfWidth / 2;
      var rightEndY = nodeY + padding;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Left segment, top to bottom

    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight - padding;
      var leftEndX = leftStartX + halfWidth / 2;
      var leftEndY = nodeY + padding;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    }
    return straightLineIntersections;
  }; //this function gives the intersections of any line with a round rectangle


  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {
    var halfWidth = width / 2;
    var halfHeight = height / 2; // Check intersections with straight line segments

    var straightLineIntersections = []; // Top segment, left to right

    {
      var topStartX = nodeX - halfWidth + cornerRadius - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth - cornerRadius + padding;
      var topEndY = topStartY;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Right segment, top to bottom

    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight + cornerRadius - padding;
      var rightEndX = rightStartX;
      var rightEndY = nodeY + halfHeight - cornerRadius + padding;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Bottom segment, left to right

    {
      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
      var bottomStartY = nodeY + halfHeight + padding;
      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
      var bottomEndY = bottomStartY;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Left segment, top to bottom

    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight + cornerRadius - padding;
      var leftEndX = leftStartX;
      var leftEndY = nodeY + halfHeight - cornerRadius + padding;
      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    } // Check intersections with arc segments

    var arcIntersections; // Top Left

    {
      var topLeftCenterX = nodeX - halfWidth + cornerRadius;
      var topLeftCenterY = nodeY - halfHeight + cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    } // Top Right

    {
      var topRightCenterX = nodeX + halfWidth - cornerRadius;
      var topRightCenterY = nodeY - halfHeight + cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    } // Bottom Right

    {
      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    } // Bottom Left

    {
      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    }
    if (straightLineIntersections.length > 0) return straightLineIntersections;
    return []; // if nothing
  };

  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {
    var w = width / 2 + padding;
    var h = height / 2 + padding;
    var an = centerX;
    var bn = centerY;
    var d = [x2 - x1, y2 - y1];
    var m = d[1] / d[0];
    var n = -1 * m * x2 + y2;
    var a = h * h + w * w * m * m;
    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;
    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;
    var discriminant = b * b - 4 * a * c;

    if (discriminant < 0) {
      return [];
    }

    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
    var xMin = Math.min(t1, t2);
    var xMax = Math.max(t1, t2);
    var yMin = m * xMin - m * x2 + y2;
    var yMax = m * xMax - m * x2 + y2;
    return [xMin, yMin, xMax, yMax];
  };

  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {
    var centerX = node._private.position.x;
    var centerY = node._private.position.y;
    var padding = parseInt(node.css('border-width')) / 2;
    var stateAndInfos = node._private.data.statesandinfos;
    var intersections = [];

    for (var i = 0; i < stateAndInfos.length; i++) {
      var state = stateAndInfos[i];

      if (!state.isDisplayed) {
        continue;
      }

      var infoBoxWidth = state.bbox.w;
      var infoBoxHeight = state.bbox.h;
      var currIntersections = null;

      if (state.clazz == "state variable") {
        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());
        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);
      } else if (state.clazz == "unit of information") {
        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());

        if (node.data("class") == "BA macromolecule" || node.data("class") == "BA nucleic acid feature" || node.data("class") == "BA complex") {
          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);
        } else if (node.data("class") == "BA unspecified entity") {
          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);
        } else if (node.data("class") == "BA simple chemical") {
          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);
        } else if (node.data("class") == "BA perturbing agent") {
          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);
        } else {
          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);
        }
      }

      intersections = intersections.concat(currIntersections);
    }

    return intersections;
  };

  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {
    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);
  };

  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {
    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {
      return true;
    }

    return false;
  };
};

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = function () {
  var jsonToSbgnml, elementUtilities, cy;

  function cdToSbgnml(param) {
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  cdToSbgnml.convert = function (xml, callback) {
    $.ajax({
      type: 'post',
      url: "http://web.newteditor.org:8080/cd2sbgnml",
      data: xml,
      success: function success(data) {
        callback(data);
      },
      error: function error(_error) {
        callback(null);
      }
    });
  };

  return cdToSbgnml;
};

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var libs = __webpack_require__(/*! ../utilities/lib-utilities */ "./src/utilities/lib-utilities.js").getLibs();

var jQuery = $ = libs.jQuery;
var cytoscape = libs.cytoscape; // var optionUtilities = require('./option-utilities');
// var options = optionUtilities.getOptions();

var truncate = __webpack_require__(/*! ./text-utilities */ "./src/utilities/text-utilities.js").truncate; // only functions not depending on the instances can be used in this way
// e.g. elementUtilities.generateStateVarId()


var elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ "./src/utilities/element-utilities-factory.js")();

var ns = {}; // Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.
// It refers to the object that could be refered by 'this' while there was prototyping in these classes.
// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'
// parameter and in this case 'mainObj' can be considered as `the object to be copied`
// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.
// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.
// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.
// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation
// classes. While calling a method of AuxiliaryUnit class that method should be called from
// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the
// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'
// method for the auxilary unit object.

var getAuxUnitClass = function getAuxUnitClass(unit) {
  // Unit parameter may pass the unit itself or the type of the unit check it
  var unitType = typeof unit === 'string' ? unit : unit.clazz; // Retrieve and return unit class according to the unit type

  var className = unitType === 'state variable' ? 'StateVariable' : 'UnitOfInformation';
  return ns[className];
};

ns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method

var AuxiliaryUnit = {}; // -------------- AuxiliaryUnit -------------- //
// constructs a new auxiliary unit object and returns it

AuxiliaryUnit.construct = function (parent) {
  var obj = {};
  AuxiliaryUnit.setParentRef(obj, parent);
  obj.id = null;
  obj.bbox = null;
  obj.anchorSide = null;
  obj.isDisplayed = false;
  obj.style = null;
  return obj;
};

AuxiliaryUnit.getParent = function (mainObj, cy) {
  var parent = mainObj.parent; // If parent variable stores the id of parent instead of the actual parent get the actual parent by id

  if (typeof parent === 'string') {
    return cy.getElementById(parent);
  }

  return parent;
};

AuxiliaryUnit.setParentRef = function (mainObj, newParent) {
  if (mainObj && newParent) {
    // Reference to id instead of the node itself to avaoid circular reference
    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();
  }
};

AuxiliaryUnit.checkPoint = function (x, y, node, threshold) {
  var centerX = node._private.position.x;
  var centerY = node._private.position.y;
  var padding = parseInt(node.css('border-width')) / 2;
  var stateAndInfos = node._private.data.statesandinfos;
  var cyBaseNodeShapes = cytoscape.baseNodeShapes; //    threshold = parseFloat(threshold);

  for (var i = 0; i < stateAndInfos.length; i++) {
    var state = stateAndInfos[i];

    if (!state.isDisplayed) {
      continue;
    }

    var stateWidth = parseFloat(state.bbox.w) + threshold;
    var stateHeight = parseFloat(state.bbox.h) + threshold;
    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());
    var stateCenterX = coord.x;
    var stateCenterY = coord.y;
    var checkPoint;

    if (state.clazz == "state variable") {
      checkPoint = cyBaseNodeShapes["ellipse"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);
    } else if (state.clazz == "unit of information") {
      checkPoint = cyBaseNodeShapes["roundrectangle"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);
    }

    if (checkPoint == true) {
      return state;
    }
  }

  return null;
};
/*
 * Return a new AuxiliaryUnit object. A new parent reference and new id can
 * optionnally be passed.
 */


AuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {
  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();
  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);
  AuxiliaryUnit.setParentRef(newUnit, parentToSet);
  newUnit.id = newId ? newId : mainObj.id;
  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);
  newUnit.coordType = mainObj.coordType;
  newUnit.anchorSide = mainObj.anchorSide;
  newUnit.isDisplayed = mainObj.isDisplayed;
  newUnit.style = mainObj.style;
  return newUnit;
}; // draw the auxiliary unit at its position


AuxiliaryUnit.draw = function (mainObj, cy, context) {
  var unitClass = getAuxUnitClass(mainObj);
  var coords = unitClass.getAbsoluteCoord(mainObj, cy);
  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);

  if (unitClass.hasText(mainObj, cy)) {
    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);
  }

  mainObj.isDisplayed = true;
}; // to be implemented by children


AuxiliaryUnit.getText = function (mainObj, cy) {
  throw new Error("Abstract method!");
};

AuxiliaryUnit.hasText = function (mainObj, cy) {
  throw new Error("Abstract method!");
};

AuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {
  var style = mainObj.style;
  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);
  var tmp_ctxt = context.fillStyle;
  context.fillStyle = style['background-color'];
  context.fill();
  context.fillStyle = tmp_ctxt;
  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);
  var borderStyle = style.dashed ? 'dashed' : undefined;
  var borderWidth = style['border-width']; // Selected nodes have a specific border color so infobox should have the same
  // border color when the node is selected. May need to be updated if style of
  // selected nodes is updated in a different way.

  var borderColor = parent.selected() ? null : style['border-color'];
  cytoscape.sbgn.drawBorder({
    context: context,
    node: parent,
    borderStyle: borderStyle,
    borderColor: borderColor,
    borderWidth: borderWidth
  });
}; // draw the statesOrInfo's label at given position


AuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {
  // access the sbgnvizParams set for cy
  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();
  var unitClass = getAuxUnitClass(mainObj);
  var parent = unitClass.getParent(mainObj, cy);
  var style = mainObj.style; // part of : $$.sbgn.drawText(context, textProp);
  // save style before modification

  var oldFont = context.font;
  var oldStyle = context.fillStyle;
  var oldOpacity = context.globalAlpha;
  context.font = style['font-style'] + " " + style['font-weight'] + " " + style['font-size'] + "px " + style['font-family'];
  context.fillStyle = style['font-color'];
  context.textAlign = "center";
  context.textBaseline = "middle";
  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?

  var text;

  if (options.fitLabelsToInfoboxes()) {
    // here we memoize the truncated text into _textCache,
    // as it is not something that changes so much
    text = unitClass.getText(mainObj, cy);
    var key = text + context.font + mainObj.bbox.w;

    if (mainObj._textCache && mainObj._textCache[key]) {
      text = mainObj._textCache[key];
    } else {
      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);

      if (!mainObj._textCache) {
        mainObj._textCache = {};
      }

      mainObj._textCache[key] = text;
    }
  } else {
    text = unitClass.getText(mainObj, cy);
  }

  context.fillText(text, centerX, centerY); // restore saved style

  context.fillStyle = oldStyle;
  context.font = oldFont;
  context.globalAlpha = oldOpacity;
};

AuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {
  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);
  var position = parent.position();
  var padding = parent.padding();
  /* if(parent.data().complexCalculatedPadding){
    padding = Number(parent.data().complexCalculatedPadding);
    //delete parent._private.data.complexCalculatedPadding;
  }else{
    padding = parent.padding();
  } */

  var parentWidth = parent.width();
  var parentHeight = parent.height();
  var borderWidth = Number(parent.css("border-width").replace("px", "")); //parent.data()['border-width'];

  var position = parent.position();

  if (mainObj === undefined || parent === undefined || position === undefined) {
    return;
  }

  var borderWidth = parent.data()["border-width"];

  if (borderWidth === undefined) {
    return;
  }

  var absX, absY;

  if (mainObj.anchorSide == "top" || mainObj.anchorSide == "bottom") {
    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);
    absY = mainObj.anchorSide == "top" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;
  } else {
    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);
    absX = mainObj.anchorSide == "left" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;
  } // due to corner of barrel shaped compartment shift absX to right

  /*  if (parent.data("class") == "compartment"){
       absX += parent.outerWidth() * 0.1;
   } */


  return {
    x: absX,
    y: absY
  };
};

AuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {
  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);
  var position = parent.position();
  var padding = parent.padding();
  var parentWidth = parent.width();
  var parentHeight = parent.height();
  var borderWidth = Number(parent.css("border-width").replace("px", ""));
  var absX, absY;

  if (mainObj.anchorSide == "top" || mainObj.anchorSide == "bottom") {
    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);
    absY = mainObj.anchorSide == "top" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;
  } else {
    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);
    absX = mainObj.anchorSide == "left" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;
  }
  /*  if (parent.data("class") == "compartment"){
     absX += parent.outerWidth() * 0.1;
   }; */


  return {
    x: absX,
    y: absY
  };
};

AuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {
  if (mainObj === undefined) {
    return;
  }

  if (parentNode !== undefined) {
    var parent = parentNode;
  } else {
    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);
  }

  var position = parent.position();
  var parentWidth = parent.width();
  var parentHeight = parent.height();
  var padding = parent.padding();
  /*  if(parent.data().complexCalculatedPadding){
     padding = Number(parent.data().complexCalculatedPadding)
   }else{
     padding = parent.padding();
   } */

  var borderWidth = Number(parent.css("border-width").replace("px", ""));
  /* if (parent.data("class") == "compartment"){
    absX -= parent.outerWidth() * 0.1;
  } */

  var relX, relY;

  if (mainObj.anchorSide == "top" || mainObj.anchorSide == "bottom") {
    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);
    relY = mainObj.anchorSide == "top" ? 0 : 100;
  } else {
    relX = mainObj.anchorSide == "left" ? 0 : 100;
    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);
  }

  relX = relX < 0 ? 0 : relX;
  relX = relX > 100 ? 100 : relX;
  relY = relY < 0 ? 0 : relY;
  relY = relY > 100 ? 100 : relY;
  return {
    x: relX,
    y: relY
  };
};

AuxiliaryUnit.setAnchorSide = function (mainObj, node) {
  var thisX = mainObj.bbox.x;
  var thisY = mainObj.bbox.y;
  var thisH = mainObj.bbox.h;
  var thisW = mainObj.bbox.w;
  var width, height, padding;

  if (node.data("originalW")) {
    width = node.data("originalW");
    padding = 0;
  } else {
    width = node.width();
    padding = node.data('class') == "complex" ? Number(node.data().complexCalculatedPadding) : node.padding();
  }

  if (node.data("originalH")) {
    height = node.data("originalH");
    padding = 0;
  } else {
    height = node.height();
    padding = node.data('class') == "complex" ? Number(node.data().complexCalculatedPadding) : node.padding();
  }

  var parentX = node.data('class') == "compartment" || node.data('class') == "complex" ? node.data('bbox').x : node.position().x;
  var parentY = node.data('class') == "compartment" || node.data('class') == "complex" ? node.data('bbox').y : node.position().y;
  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));
  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));
  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));
  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));
  var centerX = Number((thisX + thisW / 2).toFixed(2));
  var centerY = Number((thisY + thisH / 2).toFixed(2));

  if (centerY == parentY1) {
    mainObj.anchorSide = "top";
  } else if (centerY == parentY2) {
    mainObj.anchorSide = "bottom";
  } else if (centerX == parentX1) {
    mainObj.anchorSide = "left";
  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {
    mainObj.anchorSide = "right";
  } else {
    return false;
  }

  return true;
};

AuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {
  // add state var to the parent's statesandinfos
  if (typeof index != "undefined") {
    // specific index provided (for undo/redo consistency)
    parentNode.data('statesandinfos').splice(index, 0, mainObj);
  } else {
    parentNode.data('statesandinfos').push(mainObj);
  }

  if (!parentNode.data('auxunitlayouts')) {
    // ensure minimal initialization
    parentNode.data('auxunitlayouts', {});
  }

  if (!location) {
    // location not provided, need to define it automatically
    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);
  } // here we are sure to have a location even if it was not provided as argument
  // get or create the necessary layout


  if (!parentNode.data('auxunitlayouts')[location]) {
    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);
  }

  var layout = parentNode.data('auxunitlayouts')[location];
  mainObj.anchorSide = location;

  switch (location) {
    case "top":
      mainObj.bbox.y = 0;
      break;

    case "bottom":
      mainObj.bbox.y = 100;
      break;

    case "left":
      mainObj.bbox.x = 0;
      break;

    case "right":
      mainObj.bbox.x = 100;
      break;
  } // add stateVar to layout, precomputing of relative coords will be triggered accordingly


  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);
  return insertedPosition;
};

AuxiliaryUnit.removeFromParent = function (mainObj, cy) {
  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);
  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];
  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);

  if (AuxUnitLayout.isEmpty(parentLayout)) {
    delete parent.data('auxunitlayouts')[mainObj.anchorSide];
  }

  var statesandinfos = parent.data('statesandinfos');
  var index = statesandinfos.indexOf(mainObj);
  statesandinfos.splice(index, 1);
};

AuxiliaryUnit.getPositionIndex = function (mainObj, cy) {
  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);
};

ns.AuxiliaryUnit = AuxiliaryUnit; // -------------- END AuxiliaryUnit -------------- //
// -------------- StateVariable -------------- //

/**
 * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)
 */

var StateVariable = {}; // StateVariable extends AuxiliaryUnit by inheriting each static property of it

for (var prop in AuxiliaryUnit) {
  StateVariable[prop] = AuxiliaryUnit[prop];
} // Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object


StateVariable.construct = function (value, stateVariableDefinition, parent, id) {
  var obj = AuxiliaryUnit.construct(parent);
  obj.id = id || elementUtilities.generateStateVarId();
  obj.state = {};
  obj.state.value = value;
  obj.state.variable = null;
  obj.stateVariableDefinition = stateVariableDefinition;
  obj.clazz = "state variable";
  return obj;
};

StateVariable.getText = function (mainObj) {
  var stateValue = mainObj.state.value || '';
  var stateVariable = mainObj.state.variable ? "@" + mainObj.state.variable : "";
  return stateValue + stateVariable;
};

StateVariable.hasText = function (mainObj) {
  return mainObj.state.value && mainObj.state.value != "" || mainObj.state.variable && mainObj.state.variable != "";
};
/*this function is called upon creation of state variable and it returns the location information of the added state variable
*/


StateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {
  // create the new state var of info
  var stateVar = StateVariable.construct();
  StateVariable.setParentRef(stateVar, parentNode);
  stateVar.value = value;
  stateVar.variable = variable;
  stateVar.state = {
    value: value,
    variable: variable
  };
  stateVar.bbox = bbox;
  stateVar.style = style;

  if (id) {
    stateVar.id = id;
  } // link to layout


  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);
  return {
    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),
    location: stateVar.anchorSide,
    position: position
  };
};

StateVariable.remove = function (mainObj, cy) {
  var position = StateVariable.getPositionIndex(mainObj, cy);
  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);
  StateVariable.removeFromParent(mainObj, cy); //console.log("after remove", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));

  return {
    clazz: "state variable",
    state: {
      value: mainObj.state.value,
      variable: mainObj.state.variable
    },
    bbox: {
      w: mainObj.bbox.w,
      h: mainObj.bbox.h
    },
    location: mainObj.anchorSide,
    position: position,
    index: index,
    style: mainObj.style
  };
};

StateVariable.copy = function (mainObj, cy, newParent, newId) {
  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);
  newStateVar.state = jQuery.extend(true, {}, mainObj.state);
  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;
  newStateVar.clazz = mainObj.clazz;
  return newStateVar;
};

ns.StateVariable = StateVariable; // -------------- END StateVariable -------------- //
// -------------- UnitOfInformation -------------- //

/**
 * parent can be an EPN, compartment or subunit
 */

var UnitOfInformation = {}; // UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it

for (var prop in AuxiliaryUnit) {
  UnitOfInformation[prop] = AuxiliaryUnit[prop];
} // Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object


UnitOfInformation.construct = function (value, parent, id) {
  var obj = AuxiliaryUnit.construct(parent);
  obj.id = id || elementUtilities.generateUnitOfInfoId();
  obj.label = {
    text: value
  }; // from legacy code, contains {text: }

  obj.clazz = "unit of information";
  return obj;
};

UnitOfInformation.getText = function (mainObj) {
  return mainObj.label.text;
};

UnitOfInformation.hasText = function (mainObj) {
  return mainObj.label.text && mainObj.label.text != "";
};
/**
 * Creates a unit of info and links everything accordingly
 * @param parentNode - the cytoscape element hosting the unit of information
 * @param value - its text
 * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)
 * @param [position] - its position in the order of elements placed on the same location
 * @param [index] - its index in the statesandinfos list
 */


UnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {
  // create the new unit of info
  var unit = UnitOfInformation.construct(value, parentNode);
  unit.bbox = bbox;
  unit.style = style;

  if (id) {
    unit.id = id;
  } //console.log("will insert on", location, position);


  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);
  return {
    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),
    location: unit.anchorSide,
    position: position
  };
};

UnitOfInformation.remove = function (mainObj, cy) {
  var position = UnitOfInformation.getPositionIndex(mainObj, cy);
  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);
  UnitOfInformation.removeFromParent(mainObj, cy); //console.log("after remove", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));

  return {
    clazz: "unit of information",
    label: {
      text: mainObj.label.text
    },
    bbox: {
      w: mainObj.bbox.w,
      h: mainObj.bbox.h
    },
    location: mainObj.anchorSide,
    position: position,
    index: index,
    style: mainObj.style
  };
};

UnitOfInformation.copy = function (mainObj, cy, newParent, newId) {
  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);
  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);
  newUnitOfInfo.clazz = mainObj.clazz;
  return newUnitOfInfo;
};

ns.UnitOfInformation = UnitOfInformation; // -------------- END UnitOfInformation -------------- //
// -------------- EntityType -------------- //

/**
 * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType
 * This class will hold the information regarding state variable, that are shared between all myosins
 */

var EntityType = {}; // Constructs an EntityType object and returns it

EntityType.construct = function (name, EPN) {
  var obj = {};
  obj.name = name; // normally the same as its EPNs

  obj.stateVariableDefinitions = []; // 0 or many shared state definitions

  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist

  return obj;
};

EntityType.createNewDefinitionFor = function (mainObj, stateVar) {
  var newDefinition = StateVariableDefinition.construct();
  newDefinition.entityType = mainObj;
  newDefinition.stateVariables.push(stateVar);
  stateVar.stateVariableDefinition = newDefinition;
  stateVar.parent.data('entityType', mainObj);
  mainObj.stateVariableDefinitions.push(newDefinition);
};

EntityType.assignStateVariable = function (mainObj, stateVar) {
  // first trivial case, no stateDefinition yet for this entityType, so this is a new one
  if (mainObj.stateVariableDefinitions.length == 0) {
    EntityType.createNewDefinitionFor(mainObj, stateVar);
  } else {
    // if definitions are already present, we need to match those to the current stateVariable
    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {
      var matchStateDef = mainObj.stateVariableDefinitions[i];

      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {
        matchStateDef.stateVariables.push(stateVar);
        stateVar.stateVariableDefinition = matchStateDef;
        stateVar.parent.data('entityType', mainObj);
        return;
      }
    } // if nothing was matched among the current stateVarDef of this entityType, create new one


    EntityType.createNewDefinitionFor(mainObj, stateVar);
  }
};

ns.EntityType = EntityType; // -------------- END EntityType -------------- //
// -------------- StateVariableDefinition -------------- //

/**
 * The state variable definition is something shared across different EPNs
 * The concerned EPNs are linked through the entitype reference
 */

var StateVariableDefinition = {}; // Constructs a new StateVariableDefinition object and returns it

StateVariableDefinition.construct = function (name, entityType) {
  var obj = {};
  obj.name = name;
  obj.entityType = entityType; // reference to owning entity type

  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist

  return obj;
};
/**
 * returns an array of elements that share this state definition
 */


StateVariableDefinition.getConcernedEPNs = function (mainObj) {
  return mainObj.entityType.EPNs;
};
/**
 * Guess if the provided stateVariable belongs to this stateVarDefinition
 * We consider it does, if either the statevar.value or statevar.variable are matching one
 * if the statevar in the set of the StateVarDef
 * This is because we normally compare only stateVariables from the same entityType
 */


StateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {
  for (var i = 0; i < mainObj.stateVariables.length; i++) {
    var matchStateVar = mainObj.stateVariables[i]; // Don't match a stateVar against another one from the same element.
    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions

    if (matchStateVar.parent === stateVar.parent) {
      continue;
    } //console.log("try", [matchStateVar.value, matchStateVar.variable], [stateVar.value, stateVar.variable]);
    // normal sure case. Example:
    // P T134 - undefined T134
    // P undef - P undef


    if ( //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||
    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {
      return true;
    } // more subtle case, with empty stateVar. Look only at value and discard variable
    // example: undef undef - P undef
    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {
        return true;
      }
  }

  return false;
};

ns.StateVariableDefinition = StateVariableDefinition; // -------------- END StateVariableDefinition -------------- //
// -------------- AuxUnitLayout -------------- //

/**
 * Responsible for laying out the auxiliary units contained on a same edge
 */

var AuxUnitLayout = {};

AuxUnitLayout.construct = function (parentNode, location, alignment) {
  var obj = {};
  obj.units = [];
  obj.location = location;
  obj.alignment = alignment || "left"; // this was intended to be used, but it isn't for now

  AuxUnitLayout.setParentNodeRef(obj, parentNode);
  obj.renderLengthCache = [];
  obj.lengthUsed = 0; // specific rules for the layout

  if (parentNode.data('class') == "simple chemical") {
    obj.outerMargin = 3;
  }

  return obj;
};

AuxUnitLayout.getParentNode = function (mainObj, cy) {
  //console.log(mainObj);
  var parentNode = mainObj.parentNode; // If parentNode is id of parent node rather than being itself get the parent node by that id

  if (typeof parentNode === 'string') {
    return cy.getElementById(parentNode);
  }

  return parentNode;
};

AuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {
  if (mainObj && parentNode) {
    // Keep id of parent node to avaoid circular references
    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();
  }
};
/**
 * outerMargin: the left and right space left between the side of the node, and the first (and last) box
 * unitGap: the space between the auxiliary units
 * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,
 * forcing a minimum size for the node
 * maxUnitDisplayed: show at most this amount of units, even when there is enough space
 *
 * These options can be defined at the instance level. If it is found in an instance, then it
 * takes precedence. If not found, the following class' values are used.
 */


AuxUnitLayout.outerMargin = 5;
AuxUnitLayout.unitGap = 5;
AuxUnitLayout.currentTopUnitGap = 5;
AuxUnitLayout.currentBottomUnitGap = 5;
AuxUnitLayout.currentLeftUnitGap = 5;
AuxUnitLayout.currentRightUnitGap = 5;
AuxUnitLayout.alwaysShowAuxUnits = true;
AuxUnitLayout.maxUnitDisplayed = -1;
AuxUnitLayout.lastPos = -1;

AuxUnitLayout.update = function (mainObj, cy) {//AuxUnitLayout.precomputeCoords(mainObj, cy);
};

AuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {
  if (typeof position != "undefined") {
    //console.log("add unit at positiion", position);
    mainObj.units.splice(position, 0, unit);
  } else {
    mainObj.units.push(unit);
    position = mainObj.units.length - 1;
  }

  if (preComputed === undefined || preComputed === false) {
    AuxUnitLayout.computeCoords(mainObj, cy, unit);
    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);
    var locations = AuxUnitLayout.checkFit(parentNode, cy);

    if (locations.filter(function (loc) {
      return loc == mainObj.location;
    }).length > 0) {
      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);
    }
  } //AuxUnitLayout.updateLengthCache(mainObj, cy);
  //AuxUnitLayout.update(mainObj, cy, true);

  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {
    // set a minimum size according to both sides on the same orientation
    AuxUnitLayout.setParentMinLength(mainObj, cy);
    // need to resize the parent in case the space was too small
    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);
  }*/
  //cy.style().update(); // <- was it really necessary ?


  return position;
};

AuxUnitLayout.computeCoords = function (mainObj, cy, unit) {
  AuxUnitLayout.setDisplayedUnits(mainObj, cy);
  var location = mainObj.location;
  var node = AuxUnitLayout.getParentNode(mainObj, cy);

  if (location === "top" || location === "bottom") {
    var position = node.position();
    var parentWidth = node.data('bbox').w;
    var padding = node.padding();
    var parentWidth = node.width();
    var parentHeight = node.height();
    var parentX1 = position.x - parentWidth / 2 - padding;
    var parentX2 = position.x + parentWidth / 2 + padding;
    var parentY1 = position.y - parentHeight / 2 - padding;
    var parentY2 = position.y + parentHeight / 2 + padding;

    if (mainObj.units.length === 1) {
      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);
      unit.bbox.x = relativeCoords.x;
      unit.bbox.y = relativeCoords.y;
    } else {
      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit

      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);
      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);
      unit.bbox.x = relativeCoords.x;
      unit.bbox.y = relativeCoords.y; // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);
    }

    unit.bbox.y = location === "top" ? 0 : 100;
  } //We don't have the right or left addition cases yet

};

AuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {
  var index = mainObj.units.indexOf(unit);
  mainObj.units.splice(index, 1); //AuxUnitLayout.updateLengthCache(mainObj, cy);

  /*AuxUnitLayout.update(mainObj, cy, true);
  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {
    // set a minimum size according to both sides on the same orientation
    AuxUnitLayout.setParentMinLength(mainObj, cy);
  }*/

  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy); //TODO find a way to elimate this redundancy to update info-box positions

  parentNode.data('border-width', parentNode.data('border-width'));
};
/**
 * reorder boxes using their defined positions. From left to right and top to bottom.
 * this ensures that their order in the layout's list corresponds to the reality of the map.
 */


AuxUnitLayout.reorderFromPositions = function (mainObj, cy) {
  mainObj.units.sort(function (a, b) {
    if (mainObj.location == "top" || mainObj.location == "bottom") {
      if (a.bbox.x < b.bbox.x) {
        return -1;
      }

      if (a.bbox.x > b.bbox.x) {
        return 1;
      }
    } else {
      if (a.bbox.y < b.bbox.y) {
        return -1;
      }

      if (a.bbox.y > b.bbox.y) {
        return 1;
      }
    }

    return 0;
  }); //console.log("units after reoarder", this.units);

  /*AuxUnitLayout.updateLengthCache(mainObj, cy);
  AuxUnitLayout.update(mainObj, cy, true);*/
};
/**
 * use a cached list to determine what is the length needed to draw x aux units.
 * can then be compared against the parent node's dimensions, to decide how many
 * aux units to draw.
 */


AuxUnitLayout.updateLengthCache = function (mainObj, cy) {
  mainObj.renderLengthCache = [0];
  var previous = AuxUnitLayout.getOuterMargin(mainObj);

  for (var i = 0; i < mainObj.units.length; i++) {
    var currentLength;

    if (AuxUnitLayout.isTorB(mainObj)) {
      currentLength = mainObj.units[i].bbox.w;
    } else {
      currentLength = mainObj.units[i].bbox.h;
    }

    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));
    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);
  }
};
/**
 * Use the cached precomputed lengths to decide how many units we are capable of drawing,
 * considering the size of the parent node.
 * The number returned says: we are able to draw the N first units of the lists.
 * Unused for now.
 */


AuxUnitLayout.getDrawableUnitAmount = function (mainObj) {
  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {
    // bypass all this
    return mainObj.units.length;
  } // get the length of the side on which we draw


  var availableSpace;

  if (AuxUnitLayout.isTorB(mainObj)) {
    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();
  } else {
    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();
  } // loop over the cached precomputed lengths


  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {
    if (mainObj.renderLengthCache[i] > availableSpace) {
      // stop if we overflow
      return i - 1;
    }
  }

  return mainObj.units.length;
};

AuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {
  // get the length of the side on which we draw
  var availableSpace;

  if (AuxUnitLayout.isTorB(mainObj)) {
    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth(); // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners

    if (AuxUnitLayout.getParentNode(mainObj, cy).data("class") == "compartment") availableSpace *= 0.8;
  } else {
    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();
  } // there is always n+1 elements in the cachedLength for n units


  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);
  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);

  for (var i = 0; i < mainObj.units.length; i++) {
    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?
    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) || // is there no limit? or are we under that limit?
    alwaysShowAuxUnits) {
      // do we always want to show everything regardless?
      mainObj.units[i].isDisplayed = true;
    } else {
      mainObj.units[i].isDisplayed = false;
    }
  }
};

AuxUnitLayout.getUsedWidth = function (node, tb) {
  var units = tb.units;
  var totalWidth = 0;

  for (var i = 0; i < units.length; i++) {
    totalWidth += units[i].bbox.w;
  }

  return totalWidth;
};

AuxUnitLayout.getUsedHeight = function (node, tb) {
  var units = tb.units;
  var totalHeight = 0;

  for (var i = 0; i < units.length; i++) {
    totalHeight += units[i].bbox.h;
  }

  return totalHeight;
};

AuxUnitLayout.getUsedLengthTB = function (node, tb) {
  var units = tb.units;
  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin
};

AuxUnitLayout.getUsedLengthLR = function (node, tb) {
  var units = tb.units;
  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin
};

AuxUnitLayout.setCurrentGap = function (location, value) {
  if (location === "top") {
    AuxUnitLayout.currentTopUnitGap = value;
  } else if (location === "bottom") {
    AuxUnitLayout.currentBottomUnitGap = value;
  } else if (location === "right") {
    AuxUnitLayout.currentRightUnitGap = value;
  } else {
    AuxUnitLayout.currentLeftUnitGap = value;
  }
};

AuxUnitLayout.getCurrentGap = function (location) {
  if (location === "top") {
    return AuxUnitLayout.currentTopUnitGap;
  } else if (location === "bottom") {
    return AuxUnitLayout.currentBottomUnitGap;
  } else if (location === "right") {
    return AuxUnitLayout.currentRightUnitGap;
  } else {
    return AuxUnitLayout.currentLeftUnitGap;
  }
};

AuxUnitLayout.checkFit = function (node, cy, forceCheck) {
  var fitLocations = [];

  for (var location in node.data('auxunitlayouts')) {
    if (forceCheck !== undefined && location !== forceCheck) {
      continue;
    }

    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {
      fitLocations.push(location);
      continue;
    }

    var unit = node.data('auxunitlayouts')[location];
    var units = unit.units;

    if (units.length === 0) {
      continue;
    }

    var firstUnit = units[0];
    var lastUnit = units[units.length - 1];
    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);
    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);
    var gap = AuxUnitLayout.getCurrentGap(location);
    var padding = node.padding();

    if (units.length > 0) {
      //For any case of removal
      if (location === "top" || location === "bottom") {
        var parentX1 = node.position().x - node.width() / 2 - padding;
        var parentX2 = node.position().x + node.width() / 2 + padding;
        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;
        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;

        if (parentX2 < lastX2 + gap) {
          fitLocations.push(location);
        }
        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {
            fitLocations.push(location);
        } */

      } else {
        var parentY1 = node.position().y - node.height() / 2 - padding;
        var parentY2 = node.position().y + node.height() / 2 + padding;
        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;
        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;

        if (parentY2 < lastY2 + gap) {
          fitLocations.push(location);
        }
        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {
            fitLocations.push(location);
        } */

      }
    }
  }

  return fitLocations;
};

AuxUnitLayout.setIdealGap = function (node, location) {
  var parentWidth = node.width();
  var parentHeight = node.height();
  var padding = node.padding();
  var position = node.position();
  var parentX1 = position.x - parentWidth / 2 - padding;
  var parentY1 = position.y - parentHeight / 2 - padding;
  var estimatedGap;
  var auxUnit = node.data('auxunitlayouts')[location];

  if (auxUnit === undefined) {
    return 0;
  }

  if (auxUnit.units.length <= 0 || !auxUnit.units) {
    return 0;
  }

  var units = auxUnit.units;

  if (location === "top" || location === "bottom") {
    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);
    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);
    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);

    if (estimatedGap > AuxUnitLayout.unitGap) {
      estimatedGap = AuxUnitLayout.unitGap;
    } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit


    var usedLength = estimatedGap;

    for (var i = 0; i < units.length; i++) {
      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);
      units[i].bbox.x = relativeCord.x;
      units[i].bbox.y = relativeCord.y;
      usedLength += units[i].bbox.w + estimatedGap;
    }

    AuxUnitLayout.setCurrentGap(location, estimatedGap);
  } else {
    //Find total left length
    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths

    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);
    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);

    if (estimatedGap > AuxUnitLayout.unitGap) {
      estimatedGap = AuxUnitLayout.unitGap;
    } //Else scale by using available space, reducing margins and gaps.
    //Check if new gap is enough to fit


    var usedLength = estimatedGap;

    for (var i = 0; i < units.length; i++) {
      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);
      units[i].bbox.x = relativeCord.x;
      units[i].bbox.y = relativeCord.y;
      usedLength += units[i].bbox.h + estimatedGap;
    } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;

  }

  AuxUnitLayout.setCurrentGap(location, estimatedGap);
};

AuxUnitLayout.fitUnits = function (node, cy, locations) {
  var parentWidth = node.width();
  var parentHeight = node.height();
  var padding = node.padding();
  var position = node.position();
  var parentX1 = position.x - parentWidth / 2 - padding;
  var parentX2 = position.x + parentWidth / 2 + padding;
  var parentY1 = position.y - parentHeight / 2 - padding;
  var parentY2 = position.y + parentHeight / 2 + padding; //Get Parent node and find parent width

  var estimatedGap;

  for (var index = 0; index < locations.length; index++) {
    var location = locations[index];
    var auxUnit = node.data('auxunitlayouts')[location];

    if (auxUnit === undefined) {
      continue;
    }

    if (auxUnit.units.length <= 0 || !auxUnit.units) {
      continue;
    }

    var units = auxUnit.units;

    if (location === "top" || location === "bottom") {
      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);
      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);
      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);

      if (estimatedGap > AuxUnitLayout.unitGap) {
        estimatedGap = AuxUnitLayout.unitGap;
      } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit


      var usedLength = estimatedGap;

      for (var i = 0; i < units.length; i++) {
        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);
        units[i].bbox.x = relativeCord.x;
        units[i].bbox.y = relativeCord.y;
        usedLength += units[i].bbox.w + estimatedGap;
      }

      AuxUnitLayout.setCurrentGap(location, estimatedGap);
    } else {
      //Find total left length
      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths

      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);
      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);

      if (estimatedGap > AuxUnitLayout.unitGap) {
        estimatedGap = AuxUnitLayout.unitGap;
      } //Else scale by using available space, reducing margins and gaps.
      //Check if new gap is enough to fit


      var usedLength = estimatedGap;

      for (var i = 0; i < units.length; i++) {
        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);
        units[i].bbox.x = relativeCord.x;
        units[i].bbox.y = relativeCord.y;
        usedLength += units[i].bbox.h + estimatedGap;
      } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;

    }

    AuxUnitLayout.setCurrentGap(location, estimatedGap);
  } //TODO find a way to elimate this redundancy to update info-box positions


  node.data('border-width', node.data('border-width'));
}; // Calculate total length used in a side
// TODO find a way to refactor, remove ugliness of top-bottom/left-right.


AuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {
  AuxUnitLayout.setDisplayedUnits(mainObj, cy);
  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);
  var finalLengthUsed = lengthUsed;
  var unitGap = AuxUnitLayout.getUnitGap(mainObj);
  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);

  for (var i = 0; i < mainObj.units.length; i++) {
    // change the coordinate system of the auxiliary unit according to the chosen layout
    var auxUnit = mainObj.units[i];

    if (auxUnit.coordType != "relativeToSide" || doForceUpdate) {
      if (auxUnit.coordType == "relativeToCenter" || doForceUpdate) {
        if (AuxUnitLayout.isTorB(mainObj)) {
          //auxUnit.bbox.y = 0;
          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;
        } else {
          //auxUnit.bbox.x = 0;
          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;
        }
      }

      auxUnit.coordType = "relativeToSide";
    }

    if (AuxUnitLayout.isTorB(mainObj)) {
      //auxUnit.bbox.y = 0;
      lengthUsed += auxUnit.bbox.w + unitGap;
    } else {
      //auxUnit.bbox.x = 0;
      lengthUsed += auxUnit.bbox.h + unitGap;
    }

    if (auxUnit.isDisplayed) {
      finalLengthUsed = lengthUsed;
    }
  } // adjust the length, should be composed of outerMargin on the end, not unitGap


  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);
  mainObj.lengthUsed = finalLengthUsed;
};

AuxUnitLayout.draw = function (mainObj, cy, context) {
  for (var i = 0; i < mainObj.units.length; i++) {
    var auxUnit = mainObj.units[i];
    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);
  }
};

AuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {
  var location = unit.anchorSide;
  var posX = unit.bbox.x;
  var posY = unit.bbox.y;

  if (!parentNode.data('auxunitlayouts')[oldLocation]) {
    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);
  }

  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];
  var deleteUnits = oldAuxUnit.units; //Delete from old location

  var deleteIndex;

  for (var i = 0; i < deleteUnits.length; i++) {
    if (deleteUnits[i] === unit) {
      deleteIndex = i;
      break;
    }
  }

  deleteUnits.splice(deleteIndex, 1); //If new is not constructed contruct interval

  if (!parentNode.data('auxunitlayouts')[location]) {
    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);
  }

  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];
  var insertUnits = insertAuxUnit.units;
  var index = 0; //Insert into new unit array

  if (location === "top" || location === "bottom") {
    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {
      index++;
    }
  } else {
    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {
      index++;
    }
  }

  insertUnits.splice(index, 0, unit);
};

AuxUnitLayout.isEmpty = function (mainObj) {
  return mainObj.units.length == 0;
};

AuxUnitLayout.unitCount = function (mainObj) {
  return mainObj.units.length;
};

AuxUnitLayout.unitLength = function (mainObj) {
  var units = mainObj.units;
  var rightMostPoint = 0;

  for (var i = 0; i < units.length; i++) {
    var box = units[i].bbox;

    if (box.x + box.w / 2 > rightMostPoint) {
      rightMostPoint = box.x + box.w / 2;
    }
  }

  return rightMostPoint;
}; //Get Unit Gaps


AuxUnitLayout.getCurrentTopGap = function () {
  return AuxUnitLayout.currentTopUnitGap;
};

AuxUnitLayout.getCurrentBottomGap = function () {
  return AuxUnitLayout.currentBottomUnitGap;
};

AuxUnitLayout.getCurrentLeftGap = function () {
  return AuxUnitLayout.currentLeftUnitGap;
};

AuxUnitLayout.getCurrentRightGap = function () {
  return AuxUnitLayout.currentRightUnitGap;
};
/**
 * Auto choose the next layout. To add a new aux unit, for example.
 */


AuxUnitLayout.selectNextAvailable = function (node) {
  var top = node.data('auxunitlayouts').top;
  var bottom = node.data('auxunitlayouts').bottom;
  var resultLocation = "top"; // start by adding on top if free

  if (!top || AuxUnitLayout.isEmpty(top)) {
    resultLocation = "top";
  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {
    resultLocation = "bottom";
  } else {
    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox
    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {
      resultLocation = "top";
    } else {
      resultLocation = "bottom";
    }
  }

  AuxUnitLayout.lastPos = resultLocation; //Set last used position

  return resultLocation;
};

AuxUnitLayout.resizeParent = function (mainObj, cy, length) {
  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);

  if (AuxUnitLayout.isTorB(mainObj)) {
    if (parentNode.data('bbox').w < length) {
      cy.trigger("nodeediting.resizestart", ["centerright", parentNode]);
      parentNode.data('bbox').w = length;
      cy.trigger("nodeediting.resizeend", ["centerright", parentNode]);
    }
  } else {
    if (parentNode.data('bbox').h < length) {
      cy.trigger("nodeediting.resizestart", ["bottomcenter", parentNode]);
      parentNode.data('bbox').h = length;
      cy.trigger("nodeediting.resizeend", ["bottomcenter", parentNode]);
    }
  }
};

AuxUnitLayout.isTorB = function (mainObj) {
  return mainObj.location == "top" || mainObj.location == "bottom";
};

AuxUnitLayout.isLorR = function (mainObj) {
  return mainObj.location == "left" || mainObj.location == "right";
};

AuxUnitLayout.setParentMinLength = function (mainObj, cy) {
  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);
  var parentLayouts = parentNode.data('auxunitlayouts');

  switch (mainObj.location) {
    case "top":
      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;
      break;

    case "bottom":
      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;
      break;

    case "left":
      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;
      break;

    case "right":
      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;
      break;
  }

  if (AuxUnitLayout.isTorB(mainObj)) {
    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));
  } else {
    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));
  }
};

AuxUnitLayout.getOuterMargin = function (mainObj) {
  if (typeof mainObj.outerMargin !== "undefined" && mainObj.outerMargin !== null) {
    return mainObj.outerMargin;
  } else {
    return AuxUnitLayout.outerMargin;
  }
};

AuxUnitLayout.getUnitGap = function (mainObj) {
  if (typeof mainObj.unitGap !== "undefined" && mainObj.unitGap !== null) {
    return mainObj.unitGap;
  } else {
    return AuxUnitLayout.unitGap;
  }
};

AuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {
  if (typeof mainObj.alwaysShowAuxUnits !== "undefined" && mainObj.alwaysShowAuxUnits !== null) {
    return mainObj.alwaysShowAuxUnits;
  } else {
    return AuxUnitLayout.alwaysShowAuxUnits;
  }
};

AuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {
  if (typeof mainObj.maxUnitDisplayed !== "undefined" && mainObj.maxUnitDisplayed !== null) {
    return mainObj.maxUnitDisplayed;
  } else {
    return AuxUnitLayout.maxUnitDisplayed;
  }
};
/*
 *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.
 */


AuxUnitLayout.copy = function (mainObj, cy, newParent) {
  var newLayout = AuxUnitLayout.construct(newParent); // Copying the same reference to units would be inconsistent.
  // Duplicating owned units goes beyonnd the scope, because we need to assign
  // ids that are tied to the global cound of units of a node.
  // So duplicating units is something that should be properly done outside of this function.
  // TODO that is a bit dirty, find a nice modular way to arrange that

  newLayout.units = [];
  newLayout.location = mainObj.location;
  newLayout.alignment = mainObj.alignment;
  AuxUnitLayout.setParentNodeRef(newLayout, newParent);
  newLayout.renderLengthCache = mainObj.renderLengthCache;
  newLayout.lengthUsed = mainObj.lengthUsed;

  if (typeof mainObj.outerMargin !== "undefined") {
    newLayout.outerMargin = mainObj.outerMargin;
  }

  if (typeof mainObj.unitGap !== "undefined") {
    newLayout.unitGap = mainObj.unitGap;
  }

  if (typeof mainObj.alwaysShowAuxUnits !== "undefined") {
    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;
  }

  if (typeof mainObj.maxUnitDisplayed !== "undefined") {
    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;
  }

  return newLayout;
};

ns.AuxUnitLayout = AuxUnitLayout; // -------------- END AuxUnitLayout -------------- //

module.exports = ns;

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Common utilities for elements includes both general utilities and sbgn specific utilities
 */
var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var textUtilities = __webpack_require__(/*! ./text-utilities */ "./src/utilities/text-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

var classes = __webpack_require__(/*! ./classes */ "./src/utilities/classes.js");

module.exports = function () {
  var optionUtilities, graphUtilities;
  var options;
  var cy;

  function elementUtilities(param) {
    // Init params to be accessed by elementUtilities
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions();
    graphUtilities = param.graphUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  var inArray = function inArray(value, arr) {
    return $.inArray(value, arr) !== -1;
  }; // initialize map type


  elementUtilities.mapType = 'PD';
  elementUtilities.fileFormat = undefined;
  elementUtilities.PD = {}; // namespace for all PD specific stuff

  elementUtilities.AF = {}; // namespace for all AF specific stuff

  elementUtilities.SIF = {}; // namespace for all SIF specific stuff

  elementUtilities.graphTopologyLocked = false; // see http://stackoverflow.com/a/8809472
  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)
  // don't comply with xsd:SID type that must not begin with a number

  elementUtilities.generateUUID = function () {
    // Public Domain/MIT
    var d = Date.now();

    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
      d += performance.now(); //use high-precision timer if available
    }

    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = (d + Math.random() * 16) % 16 | 0;
      d = Math.floor(d / 16);
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  elementUtilities.generateNodeId = function () {
    return 'nwtN_' + elementUtilities.generateUUID();
  };

  elementUtilities.generateEdgeId = function () {
    return 'nwtE_' + elementUtilities.generateUUID();
  };

  elementUtilities.generateStateVarId = function () {
    return 'nwtSV_' + elementUtilities.generateUUID();
  };

  elementUtilities.generateUnitOfInfoId = function () {
    return 'nwtUOI_' + elementUtilities.generateUUID();
  };
  /*
    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated
    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft
    only the following things have been changed from 2.0 (this version is not clear on connectivity):
     - empty set has no limit on its edge count
     - logic operators can be source and target
     - limit of 1 catalysis and 1 necessary stimulation on a process
     for each edge class and nodeclass define 2 cases:
     - node can be a source of this edge -> asSource
     - node can be a target of this edge -> asTarget
    for both cases, tells if it is allowed and what is the limit of edges allowed.
    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).
    Consider undefined things as false/unallowed -> whitelist behavior.
     the nodes/edges class listed below are those used in the program.
    For instance "compartment" isn't a node in SBGN specs.
  */


  elementUtilities.PD.connectivityConstraints = {
    "consumption": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {}
      },
      "association": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "dissociation": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        }
      },
      "and": {
        asSource: {},
        asTarget: {}
      },
      "or": {
        asSource: {},
        asTarget: {}
      },
      "not": {
        asSource: {},
        asTarget: {}
      }
    },
    "production": {
      "macromolecule": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "simple chemical": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "unspecified entity": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "complex": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "nucleic acid feature": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "perturbing agent": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "omitted process": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "uncertain process": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "phenotype": {
        asSource: {},
        asTarget: {}
      },
      "association": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "dissociation": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "and": {
        asSource: {},
        asTarget: {}
      },
      "or": {
        asSource: {},
        asTarget: {}
      },
      "not": {
        asSource: {},
        asTarget: {}
      }
    },
    "modulation": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      }
    },
    "stimulation": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      }
    },
    "catalysis": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {},
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      }
    },
    "inhibition": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      }
    },
    "necessary stimulation": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "omitted process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "uncertain process": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1
        }
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      }
    },
    "logic arc": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "empty set": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "process": {
        asSource: {},
        asTarget: {}
      },
      "omitted process": {
        asSource: {},
        asTarget: {}
      },
      "uncertain process": {
        asSource: {},
        asTarget: {}
      },
      "phenotype": {
        asSource: {},
        asTarget: {}
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {
          isAllowed: true
        }
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {
          isAllowed: true
        }
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        }
      }
    },
    "equivalence arc": {
      "macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "unspecified entity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "complex": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "nucleic acid feature": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "empty set": {
        asSource: {},
        asTarget: {}
      },
      "perturbing agent": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "process": {
        asSource: {},
        asTarget: {}
      },
      "omitted process": {
        asSource: {},
        asTarget: {}
      },
      "uncertain process": {
        asSource: {},
        asTarget: {}
      },
      "phenotype": {
        asSource: {},
        asTarget: {}
      },
      "association": {
        asSource: {},
        asTarget: {}
      },
      "dissociation": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {},
        asTarget: {}
      },
      "or": {
        asSource: {},
        asTarget: {}
      },
      "not": {
        asSource: {},
        asTarget: {}
      }
    }
  };
  /* AF node connectivity rules
   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015
   *   Section 3.3.1: Activity Nodes connectivity definition
   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265
   */

  elementUtilities.AF.connectivityConstraints = {
    "positive influence": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "delay": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    },
    "negative influence": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "delay": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    },
    "unknown influence": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "delay": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    },
    "necessary stimulation": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "phenotype": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "or": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "not": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "delay": {
        asSource: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        },
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    },
    "logic arc": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "phenotype": {
        asSource: {},
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {}
      },
      "submap": {
        asSource: {},
        asTarget: {}
      },
      "and": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "or": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "not": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        }
      },
      "delay": {
        asSource: {},
        asTarget: {
          isAllowed: true,
          maxEdge: 1,
          maxTotal: 1
        }
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    },
    "equivalence arc": {
      "biological activity": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "phenotype": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "tag": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "submap": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "and": {
        asSource: {},
        asTarget: {}
      },
      "or": {
        asSource: {},
        asTarget: {}
      },
      "not": {
        asSource: {},
        asTarget: {}
      },
      "delay": {
        asSource: {},
        asTarget: {}
      },
      "compartment": {
        asSource: {},
        asTarget: {}
      }
    }
  };
  elementUtilities.SIF.connectivityConstraints = {
    "controls-state-change-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "controls-transport-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "controls-phosphorylation-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "controls-expression-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "catalysis-precedes": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "in-complex-with": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "interacts-with": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "neighbor-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "consumption-controled-by": {
      "SIF macromolecule": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      }
    },
    "controls-production-of": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      }
    },
    "controls-transport-of-chemical": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      }
    },
    "chemical-affects": {
      "SIF macromolecule": {
        asSource: {},
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {}
      }
    },
    "reacts-with": {
      "SIF macromolecule": {
        asSource: {},
        asTarget: {}
      },
      "SIF simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      }
    },
    "used-to-produce": {
      "SIF macromolecule": {
        asSource: {},
        asTarget: {}
      },
      "SIF simple chemical": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      }
    },
    "activates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "inhibits": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "phosphorylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "dephosphorylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "upregulates-expression": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "downregulates-expression": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "activates-gtpase": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "inhibits-gtpase": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "acetylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "deacetylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "methylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    },
    "demethylates": {
      "SIF macromolecule": {
        asSource: {
          isAllowed: true
        },
        asTarget: {
          isAllowed: true
        }
      },
      "SIF simple chemical": {
        asSource: {},
        asTarget: {}
      }
    }
  };
  elementUtilities.logicalOperatorTypes = ['and', 'or', 'not', 'delay'];
  elementUtilities.processTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype'];
  elementUtilities.biologicalActivityTypes = ['biological activity', 'BA plain', 'BA unspecified entity', 'BA simple chemical', 'BA macromolecule', 'BA nucleic acid feature', 'BA perturbing agent', 'BA complex'];
  elementUtilities.epnTypes = ['macromolecule', 'nucleic acid feature', 'simple chemical', 'empty set', 'unspecified entity', 'perturbing agent', 'complex', 'nucleic acid feature multimer', 'macromolecule multimer', 'simple chemical multimer', 'complex multimer'];
  elementUtilities.sifTypes = ['SIF macromolecule', 'SIF simple chemical'];
  elementUtilities.otherNodeTypes = ['compartment', 'tag', 'submap', 'topology group'];
  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes);
  elementUtilities.compoundNodeTypes = ['complex', 'compartment', 'submap'];
  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();
  elementUtilities.sifEdgeTypes = ['neighbor-of', 'interacts-with', 'in-complex-with', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'catalysis-precedes', 'controls-expression-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates', 'inhibits', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];
  elementUtilities.edgeTypes = ['consumption', 'production', 'modulation', 'stimulation', 'catalysis', 'inhibition', 'necessary stimulation', 'logic arc', 'equivalence arc', 'unknown influence', 'positive influence', 'negative influence', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'controls-expression-of', 'catalysis-precedes', 'in-complex-with', 'interacts-with', 'neighbor-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'activates', 'inhibits', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];
  elementUtilities.undirectedEdgeTypes = ['in-complex-with', 'interacts-with', 'neighbor-of', 'logic arc', 'equivalence arc'];
  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);
  /*
  * Get sbgnclass of the given element. If the parameter is a string return it
  * by assuming that it is the sbgnclass itself.
  */

  elementUtilities.getSbgnClass = function (ele) {
    if (ele == null) {
      return null;
    }

    var sbgnclass = typeof ele === 'string' ? ele : ele.data('class');
    return sbgnclass;
  };
  /*
  * Get sbgn class omitting the multimer information
  */


  elementUtilities.getPureSbgnClass = function (ele) {
    if (ele == null) {
      return null;
    }

    return elementUtilities.getSbgnClass(ele).replace(' multimer', '');
  };
  /*
   * Returns if the elements with the given parent class can be parent of the elements with the given node class
   */


  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {
    // If nodeClass and parentClass params are elements itselves instead of their class names handle it
    var nodeClass = typeof _nodeClass !== 'string' ? _nodeClass.data('class') : _nodeClass;
    var parentClass = _parentClass != undefined && typeof _parentClass !== 'string' ? _parentClass.data('class') : _parentClass;

    if (parentClass == undefined || parentClass === 'compartment' || parentClass === 'submap') {
      // Compartments, submaps and the root can include any type of nodes
      return true;
    } else if (parentClass.startsWith('complex') && (!node || node.connectedEdges().length == 0 // Complexes can only include EPNs which do not have edges
    || elementUtilities.mapType == "HybridAny" || elementUtilities.mapType == "HybridSbgn")) {
      // When map type is unknown, allow complexes to include EPNs with edges
      return elementUtilities.isEPNClass(nodeClass);
    }

    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass
  }; // Get common properties of given elements. Returns null if the given element list is empty or the
  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.
  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the
  // property name then use what that function returns.


  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {
    if (elements.length == 0) {
      return null;
    }

    var isFunction; // If we are not comparing the properties directly users can specify a function as well

    if (typeof propertyName === 'function') {
      isFunction = true;
    } // Use data as default


    if (!isFunction && !dataOrCss) {
      dataOrCss = 'data';
    }

    var getVal = function getVal(index) {
      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);
      return val;
    };

    var value = getVal(0);

    for (var i = 1; i < elements.length; i++) {
      if (getVal(i) != value) {
        return null;
      }
    }

    return value;
  }; // Returns if the function returns a truthy value for all of the given elements.


  elementUtilities.trueForAllElements = function (elements, fcn) {
    for (var i = 0; i < elements.length; i++) {
      if (!fcn(elements[i])) {
        return false;
      }
    }

    return true;
  }; // Returns whether the give element can have sbgncardinality


  elementUtilities.canHaveSBGNCardinality = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass == 'consumption' || sbgnclass == 'production';
  }; // Returns whether the give element can have sbgnlabel


  elementUtilities.canHaveSBGNLabel = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass != 'and' && sbgnclass != 'or' && sbgnclass != 'not' && sbgnclass != 'delay' && sbgnclass != 'association' && sbgnclass != 'dissociation' && sbgnclass != 'empty set' && !sbgnclass.endsWith('process');
  }; // Returns whether the give element have unit of information


  elementUtilities.canHaveUnitOfInformation = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);

    if (sbgnclass == 'simple chemical' || sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'simple chemical multimer' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer' || sbgnclass.startsWith('BA') && sbgnclass != "BA plain" || sbgnclass == 'compartment' || sbgnclass == 'SIF macromolecule' || sbgnclass == 'SIF simple chemical') {
      return true;
    }

    return false;
  }; // Returns whether the given element can have more than one units of information


  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return !sbgnclass.startsWith('BA');
  }; // Returns whether the give element have state variable


  elementUtilities.canHaveStateVariable = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);

    if (sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer') {
      return true;
    }

    return false;
  }; // Returns whether the given ele should be square in shape


  elementUtilities.mustBeSquare = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass.indexOf('process') != -1 || sbgnclass == 'empty set' || sbgnclass == 'and' || sbgnclass == 'or' || sbgnclass == 'not' || sbgnclass == 'association' || sbgnclass == 'dissociation' || sbgnclass == 'delay';
  }; // Returns whether any of the given nodes must not be in square shape


  elementUtilities.someMustNotBeSquare = function (nodes) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];

      if (!elementUtilities.mustBeSquare(node.data('class'))) {
        return true;
      }
    }

    return false;
  }; // Returns whether the gives element can be cloned


  elementUtilities.canBeCloned = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    var list = {
      'unspecified entity': true,
      'macromolecule': true,
      'complex': true,
      'nucleic acid feature': true,
      'simple chemical': true,
      'perturbing agent': true
    };
    return list[sbgnclass] ? true : false;
  }; // Returns whether the gives element can be cloned


  elementUtilities.canBeMultimer = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    var list = {
      'macromolecule': true,
      'complex': true,
      'nucleic acid feature': true,
      'simple chemical': true
    };
    return list[sbgnclass] ? true : false;
  };

  elementUtilities.isBiologicalActivity = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);
  };

  elementUtilities.isSIFNode = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.sifTypes);
  };

  elementUtilities.isSIFEdge = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);
  };

  elementUtilities.isUndirectedEdge = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);
  };

  elementUtilities.isDirectedEdge = function (ele) {
    return !elementUtilities.isUndirectedEdge(ele);
  }; // Returns whether the given element is an EPN


  elementUtilities.isEPNClass = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.epnTypes);
  }; // Returns whether the given element is a PN


  elementUtilities.isPNClass = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.processTypes);
  }; // Returns wether the given element or string is of the special empty set/empty set class


  elementUtilities.isEmptySetClass = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass == 'empty set';
  }; // Returns whether the given element is a logical operator


  elementUtilities.isLogicalOperator = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);
  }; // Returns whether the class of given element is a equivalance class


  elementUtilities.convenientToEquivalence = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass == 'tag' || sbgnclass == 'terminal';
  }; // Returns whether the class of given element is a modulation arc as defined in PD specs


  elementUtilities.isModulationArcClass = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass == 'modulation' || sbgnclass == 'stimulation' || sbgnclass == 'catalysis' || sbgnclass == 'inhibition' || sbgnclass == 'necessary stimulation';
  }; // Returns whether the class of given element is an arc of AF specs except logical arc


  elementUtilities.isAFArcClass = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass == 'positive influence' || sbgnclass == 'negative influence' || sbgnclass == 'unknown influence' || sbgnclass == 'necessary stimulation';
  }; // Returns whether the given element or elements with the given class can have ports.


  elementUtilities.canHavePorts = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);
    return sbgnclass != 'phenotype' && sbgnclass != 'delay' && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));
  }; // Section Start
  // General Element Utilities
  //this method returns the nodes non of whose ancestors is not in given nodes


  elementUtilities.getTopMostNodes = function (nodes) {
    var nodesMap = {};

    for (var i = 0; i < nodes.length; i++) {
      nodesMap[nodes[i].id()] = true;
    }

    var roots = nodes.filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      var parent = ele.parent()[0];

      while (parent != null) {
        if (nodesMap[parent.id()]) {
          return false;
        }

        parent = parent.parent()[0];
      }

      return true;
    });
    return roots;
  }; //This method checks if all of the given nodes have the same parent assuming that the size
  //of  nodes is not 0


  elementUtilities.allHaveTheSameParent = function (nodes) {
    if (nodes.length == 0) {
      return true;
    }

    var parent = nodes[0].data("parent");

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];

      if (node.data("parent") != parent) {
        return false;
      }
    }

    return true;
  };

  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {
    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);

    for (var i = 0; i < topMostNodes.length; i++) {
      var node = topMostNodes[i];
      var oldX = node.position("x");
      var oldY = node.position("y");
      node.position({
        x: oldX + positionDiff.x,
        y: oldY + positionDiff.y
      });
      var children = node.children();
      this.moveNodes(positionDiff, children, true);
    }
  };

  elementUtilities.convertToModelPosition = function (renderedPosition) {
    var pan = cy.pan();
    var zoom = cy.zoom();
    var x = (renderedPosition.x - pan.x) / zoom;
    var y = (renderedPosition.y - pan.y) / zoom;
    return {
      x: x,
      y: y
    };
  };

  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {
    pan = pan || cy.pan();
    zoom = zoom || cy.zoom();
    var res = {};
    ['x', 'y'].forEach(function (dim) {
      res[dim] = modelPos[dim] * zoom + pan[dim];
    });
    return res;
  }; // Section End
  // General Element Utilities
  // Section Start
  // Element Filtering Utilities
  // SBGN specific utilities


  elementUtilities.getProcessesOfSelected = function () {
    var selectedEles = cy.elements(":selected");
    selectedEles = this.extendNodeList(selectedEles);
    return selectedEles;
  };

  elementUtilities.getNeighboursOfSelected = function () {
    var selectedEles = cy.elements(":selected");
    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);
    return elesToHighlight;
  };

  elementUtilities.getNeighboursOfNodes = function (_nodes) {
    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    nodes = nodes.add(nodes.parents("node[class^='complex']"));
    nodes = nodes.add(nodes.descendants());
    var neighborhoodEles = nodes.neighborhood();
    var elesToReturn = nodes.add(neighborhoodEles);
    elesToReturn = elesToReturn.add(elesToReturn.descendants());
    return elesToReturn;
  };

  elementUtilities.extendNodeList = function (nodesToShow) {
    var self = this; //add children

    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants()); //add parents

    nodesToShow = nodesToShow.add(nodesToShow.parents()); //add complex children

    nodesToShow = nodesToShow.add(nodesToShow.nodes("node[class^='complex']").descendants()); // var processes = nodesToShow.nodes("node[class='process']");
    // var nonProcesses = nodesToShow.nodes("node[class!='process']");
    // var neighborProcesses = nonProcesses.neighborhood("node[class='process']");

    extendNodeTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype', 'and', 'or', 'not', 'delay']; //Here, logical operators are also considered as processes, since they also get inputs and outputs

    var processes = nodesToShow.filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      return inArray(ele._private.data["class"], extendNodeTypes);
    });
    var nonProcesses = nodesToShow.filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      return !inArray(ele._private.data["class"], extendNodeTypes);
    });
    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      return inArray(ele._private.data["class"], extendNodeTypes);
    }); //For AF support, subject to change

    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(":hidden")).filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      return !inArray(ele._private.data["class"], extendNodeTypes);
    });
    nodesToShow = nodesToShow.add(processes.neighborhood());
    nodesToShow = nodesToShow.add(neighborProcesses);
    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());
    nodesToShow = nodesToShow.add(neighborNonProcesses);
    neighborProcesses.neighborhood().forEach(function (ele) {
      if (inArray(ele._private.data["class"], extendNodeTypes)) {
        nodesToShow = nodesToShow.add(ele.neighborhood());
      }
    }); //add parents

    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents()); //add children

    nodesToShow = nodesToShow.add(nodesToShow.nodes("node[class^='complex']").descendants());
    return nodesToShow;
  };

  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {
    nodesToFilter = this.extendNodeList(nodesToFilter);
    var nodesToShow = allNodes.not(nodesToFilter);
    nodesToShow = this.extendNodeList(nodesToShow);
    return nodesToShow;
  };

  elementUtilities.getProcessesOfNodes = function (nodes) {
    return this.extendNodeList(nodes);
  }; // general utilities


  elementUtilities.noneIsNotHighlighted = function () {
    var viewUtilities = cy.viewUtilities('get');
    var highlightClasses = viewUtilities.getAllHighlightClasses();

    for (var i = 0; i < highlightClasses.length; i++) {
      if (cy.$('.' + highlightClasses[i]).is(':visible')) {
        return false;
      }
    }

    return true;
  }; // Section End
  // Element Filtering Utilities
  // Section Start
  // Add remove utilities
  // SBGN specific utilities


  elementUtilities.deleteNodesSmart = function (_nodes) {
    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    var allNodes = cy.nodes();
    cy.elements().unselect();
    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);
    var nodesNotToKeep = allNodes.not(nodesToKeep);
    return nodesNotToKeep.remove();
  };

  elementUtilities.deleteElesSimple = function (eles) {
    cy.elements().unselect();
    return eles.remove();
  }; // general utilities


  elementUtilities.restoreEles = function (eles) {
    eles.restore();
    return eles;
  }; // Section End
  // Add remove utilities
  // Section Start
  // Stylesheet helpers
  // SBGN specific utilities


  elementUtilities.getArrayLineStyle = function (ele) {
    var sbgnclass = elementUtilities.getPureSbgnClass(ele);

    switch (sbgnclass) {
      case 'controls-expression-of':
      case 'upregulates-expression':
      case 'downregulates-expression':
        return 'dashed';

      default:
        return 'solid';
    }
  };

  elementUtilities.getCyShape = function (ele) {
    var _class = ele.data('class'); // Get rid of rectangle postfix to have the actual node class


    if (_class.endsWith(' multimer')) {
      _class = _class.replace(' multimer', '');
    }

    if (_class == 'compartment') {
      return 'compartment';
    }

    if (_class == 'phenotype') {
      return 'hexagon';
    }

    if (_class == 'perturbing agent' || _class == 'tag') {
      return 'polygon';
    }

    if (_class == 'SIF macromolecule') {
      return 'macromolecule';
    }

    if (_class == 'SIF simple chemical') {
      return 'simple chemical';
    }

    if (_class.startsWith('BA')) {
      return 'biological activity';
    }

    if (_class == 'submap' || _class == 'topology group') {
      return 'rectangle';
    } // We need to define new node shapes with their class names for these nodes


    if (_class == 'empty set' || _class == 'nucleic acid feature' || _class == 'macromolecule' || _class == 'simple chemical' || _class == 'complex' || _class == 'biological activity') {
      return _class;
    } // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles
    // conditionally.


    if (this.canHavePorts(_class)) {
      if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {
        return 'polygon'; // The node has ports represent it by polygon
      } else if (_class == 'process' || _class == 'omitted process' || _class == 'uncertain process') {
        return 'rectangle'; // If node has no port and has one of these classes it should be in a rectangle shape
      }

      return 'ellipse'; // Other nodes with no port should be in an ellipse shape
    } // The remaining nodes are supposed to be in ellipse shape


    return 'ellipse';
  };

  elementUtilities.getCyTargetArrowFill = function (ele) {
    var _class = ele.data('class');

    if (_class == 'inhibition' || _class == 'negative influence' || _class == 'production' || elementUtilities.isSIFEdge(_class)) {
      return 'filled';
    }

    return 'hollow';
  };

  elementUtilities.getCyArrowShape = function (ele) {
    var _class = ele.data('class');

    switch (_class) {
      case 'necessary stimulation':
        return 'triangle-cross';

      case 'inhibition':
      case 'negative influence':
      case 'inhibits':
      case 'downregulates-expression':
      case 'dephosphorylates':
      case 'inhibits-gtpase':
      case 'deacetylates':
      case 'demethylates':
        return 'tee';

      case 'catalysis':
        return 'circle';

      case 'stimulation':
      case 'production':
      case 'positive influence':
      case 'activates':
      case 'phosphorylates':
      case 'upregulates-expression':
      case 'controls-state-change-of':
      case 'chemical-affects':
      case 'controls-transport-of':
      case 'controls-phosphorylation-of':
      case 'controls-expression-of':
      case 'catalysis-precedes':
      case 'consumption-controled-by':
      case 'controls-production-of':
      case 'controls-transport-of-chemical':
      case 'used-to-produce':
      case 'activates-gtpase':
      case 'acetylates':
      case 'methylates':
        return 'triangle';

      case 'modulation':
      case 'unknown influence':
        return 'diamond';

      default:
        return 'none';
    }
  };

  elementUtilities.getElementContent = function (ele) {
    var _class = ele.data('class');

    if (_class.endsWith(' multimer')) {
      _class = _class.replace(' multimer', '');
    }

    var content = "";

    if (_class == 'macromolecule' || _class == 'simple chemical' || _class == 'phenotype' || _class == 'unspecified entity' || _class == 'nucleic acid feature' || _class == 'perturbing agent' || _class == 'tag' || _class == 'biological activity' || _class.startsWith('BA') || _class == 'submap' || _class == 'SIF macromolecule' || _class == 'SIF simple chemical') {
      content = ele.data('label') ? ele.data('label') : "";
    } else if (_class == 'compartment') {
      content = ele.data('label') ? ele.data('label') : "";
    } else if (_class == 'complex') {
      if (ele.children().length == 0 || options.showComplexName) {
        if (ele.data('label')) {
          content = ele.data('label');
        } else if (ele.data('infoLabel')) {
          content = ele.data('infoLabel');
        } else {
          content = '';
        }
      } else {
        content = '';
      }
    } else if (_class == 'and') {
      content = 'AND';
    } else if (_class == 'or') {
      content = 'OR';
    } else if (_class == 'not') {
      content = 'NOT';
    } else if (_class == 'omitted process') {
      content = '\\\\';
    } else if (_class == 'uncertain process') {
      content = '?';
    } else if (_class == 'dissociation') {
      content = 'o';
    } else if (_class == 'delay') {
      content = "\u03C4"; // tau
    }

    var textWidth = ele.outerWidth() || ele.data('bbox').w;
    var textProp = {
      label: content,
      width: _class == 'perturbing agent' ? textWidth / 2 : textWidth
    };
    return textProp.label;
  };

  elementUtilities.getLabelTextSize = function (ele) {
    var _class = ele.data('class'); // These types of nodes cannot have label but this is statement is needed as a workaround


    if (_class === 'association') {
      return 20;
    }

    if (this.canHavePorts(_class)) {
      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators
      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes

      if (_class === 'dissociation') {
        coeff = 2;
      } else if (_class.endsWith('process')) {
        coeff = 1.5;
      }

      var ports = ele.data('ports');

      if (graphUtilities.portsEnabled === true && ports.length === 2) {
        // We assume that the ports are symmetric to the node center so using just one of the ports is enough
        var port = ports[0];
        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports

        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;
        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)
      }

      return this.getDynamicLabelTextSize(ele, coeff);
    }

    if (_class === 'delay') {
      return this.getDynamicLabelTextSize(ele, 2);
    }

    return this.getDynamicLabelTextSize(ele);
  };

  elementUtilities.getStateVarShapeOptions = function (ele) {
    if (!elementUtilities.canHaveStateVariable(ele)) {
      return null;
    }

    return ['stadium'];
  };

  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {
    var type = elementUtilities.getPureSbgnClass(ele);

    if (!elementUtilities.canHaveUnitOfInformation(type)) {
      return null;
    }

    var opts = null;

    if (elementUtilities.isSIFNode(type)) {
      opts = ['rectangle', 'stadium'];
    } else if (elementUtilities.isBiologicalActivity(type)) {
      switch (type) {
        case 'BA macromolecule':
          opts = ['roundrectangle'];
          break;

        case 'BA nucleic acid feature':
          opts = ['bottomroundrectangle'];
          break;

        case 'BA unspecified entity':
          opts = ['ellipse'];
          break;

        case 'BA complex':
          opts = ['complex'];
          break;

        case 'BA perturbing agent':
          opts = ['perturbing agent'];
          break;

        case 'BA simple chemical':
          opts = ['stadium'];
          break;

        default:
          break;
      }
    } else {
      opts = ['rectangle'];
    }

    return opts;
  };

  elementUtilities.getCardinalityDistance = function (ele) {
    var srcPos = ele.source().position();
    var tgtPos = ele.target().position();
    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));
    return distance * 0.25;
  };

  elementUtilities.getInfoLabel = function (node) {
    /* Info label of a collapsed node cannot be changed if
    * the node is collapsed return the already existing info label of it
    */
    if (node._private.data.collapsedChildren != null) {
      return node._private.data.infoLabel;
    }
    /*
     * If the node is simple then it's infolabel is equal to it's label
     */


    if (node.children() == null || node.children().length == 0) {
      return node._private.data.label;
    }

    var children = node.children();
    var infoLabel = "";
    /*
     * Get the info label of the given node by it's children info recursively
     */

    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      var childInfo = this.getInfoLabel(child);

      if (childInfo == null || childInfo == "") {
        continue;
      }

      if (infoLabel != "") {
        infoLabel += ":";
      }

      infoLabel += childInfo;
    } //return info label


    return infoLabel;
  };

  elementUtilities.getQtipContent = function (node) {
    /* Check the label of the node if it is not valid
    * then check the infolabel if it is also not valid do not show qtip
    */
    var label = node.data('label');

    if (label == null || label == "") {
      label = this.getInfoLabel(node);
    }

    if (label == null || label == "") {
      return;
    }

    var contentHtml = "<b style='text-align:center;font-size:16px;'>" + label + "</b>";
    var statesandinfos = node._private.data.statesandinfos;

    for (var i = 0; i < statesandinfos.length; i++) {
      var sbgnstateandinfo = statesandinfos[i];

      if (sbgnstateandinfo.clazz == "state variable") {
        var value = sbgnstateandinfo.state.value;
        var variable = sbgnstateandinfo.state.variable;
        var stateLabel = variable == null
        /*|| typeof stateVariable === undefined */
        ? value : value + "@" + variable;

        if (stateLabel == null) {
          stateLabel = "";
        }

        contentHtml += "<div style='text-align:center;font-size:14px;'>" + stateLabel + "</div>";
      } else if (sbgnstateandinfo.clazz == "unit of information") {
        var stateLabel = sbgnstateandinfo.label.text;

        if (stateLabel == null) {
          stateLabel = "";
        }

        contentHtml += "<div style='text-align:center;font-size:14px;'>" + stateLabel + "</div>";
      }
    }

    return contentHtml;
  }; // general utilities


  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {
    var map = {
      'small': 0.75,
      'regular': 1,
      'large': 1.25
    };
    return map[dynamicLabelSize];
  };

  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {
    var sbgnclass, h; // ele can either be node itself or an object that has class and height fields

    if (ele.isNode && ele.isNode()) {
      sbgnclass = ele.data('class');
      h = ele.height();
    } else {
      sbgnclass = ele['class'];
      h = ele['height'];
    }

    var dynamicLabelSize = options.dynamicLabelSize;
    dynamicLabelSize = typeof dynamicLabelSize === 'function' ? dynamicLabelSize.call() : dynamicLabelSize;

    if (dynamicLabelSizeCoefficient === undefined) {
      if (dynamicLabelSize == 'small') {
        if (sbgnclass.startsWith("complex")) return 10;else if (sbgnclass == "compartment" || sbgnclass == "submap") return 12;
      } else if (dynamicLabelSize == 'regular') {
        if (sbgnclass.startsWith("complex")) return 11;else if (sbgnclass == "compartment" || sbgnclass == "submap") return 14;
      } else if (dynamicLabelSize == 'large') {
        if (sbgnclass.startsWith("complex")) return 12;else if (sbgnclass == "compartment" || sbgnclass == "submap") return 16;
      }

      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);
    }

    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;
    return textHeight;
  };
  /*
  * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.
  */


  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {
    var portId = sourceOrTarget === 'source' ? edge.data('portsource') : edge.data('porttarget');

    if (portId == null || !graphUtilities.portsEnabled) {
      return 'outside-to-node'; // If there is no portsource return the default value which is 'outside-to-node'
    }

    var endNode = sourceOrTarget === 'source' ? edge.source() : edge.target();
    var ports = endNode.data('ports');
    var port;

    for (var i = 0; i < ports.length; i++) {
      if (ports[i].id === portId) {
        port = ports[i];
      }
    }

    if (port === undefined) {
      return 'outside-to-node'; // If port is not found return the default value which is 'outside-to-node'
    }

    var x, y; // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center

    if (port.x != 0) {
      x = Math.sign(port.x) * 50;
      y = 0;
    } else {
      x = 0;
      y = Math.sign(port.y) * 50;
    }

    return '' + x + '% ' + y + '%';
  };
  /*
   * Return ordering of ports of a node.
   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'
   */


  elementUtilities.getPortsOrdering = function (node) {
    // Return the cached portsordering if exists
    if (node.data('portsordering')) {
      return node.data('portsordering');
    }

    var ports = node.data('ports');

    if (ports.length !== 2) {
      node.data('portsordering', 'none'); // Cache the ports ordering

      return 'none'; // Nodes are supposed to have 2 nodes or none
    }
    /*
     * Retursn if the given portId is porttarget of any of the given edges.
     * These edges are expected to be the edges connected to the node associated with that port.
     */


    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {
      for (var i = 0; i < edges.length; i++) {
        if (edges[i].data('porttarget') === portId) {
          return true;
        }
      }

      return false;
    }; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.


    var orientation = ports[0].x === 0 ? 'vertical' : 'horizontal'; // We need the connected edges of the node to find out if a port is an input port or an output port

    var connectedEdges = node.connectedEdges();
    var portsordering;

    if (orientation === 'horizontal') {
      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative
      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'

      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {
        portsordering = 'L-to-R';
      } else {
        portsordering = 'R-to-L';
      }
    } else {
      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative
      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'

      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {
        portsordering = 'T-to-B';
      } else {
        portsordering = 'B-to-T';
      }
    } // Cache the portsordering and return it.


    node.data('portsordering', portsordering);
    return portsordering;
  };
  /*
  * Sets the ordering of the given nodes.
  * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.
  * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is
  * used to set the distance between the node center and the ports. The default port distance is 60.
  */


  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {
    /*
    * Returns if the given portId is porttarget of any of the given edges.
    * These edges are expected to be the edges connected to the node associated with that port.
    */
    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {
      for (var i = 0; i < edges.length; i++) {
        if (edges[i].data('porttarget') === portId) {
          return true;
        }
      }

      return false;
    };
    /*
    * Returns if the given portId is portsource of any of the given edges.
    * These edges are expected to be the edges connected to the node associated with that port.
    */


    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {
      for (var i = 0; i < edges.length; i++) {
        if (edges[i].data('portsource') === portId) {
          return true;
        }
      }

      return false;
    };

    portDistance = portDistance ? portDistance : 70; // The default port distance is 60

    cy.startBatch();

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node
      // If the current ordering is already equal to the desired ordering pass this node directly

      if (ordering === currentOrdering) {
        continue;
      }

      if (ordering === 'none') {
        // If the ordering is 'none' remove the ports of the node
        elementUtilities.removePorts(node);
      } else if (currentOrdering === 'none') {
        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.
        elementUtilities.addPorts(node, ordering, portDistance);
      } else {
        // Else change the ordering by altering node 'ports'
        var ports = node.data('ports'); // Ports of the node
        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one

        var dist = currentOrdering === 'none' ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);
        var connectedEdges = node.connectedEdges(); // The edges connected to the node

        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges
        // Determine the portsource and porttarget

        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {
          porttarget = ports[0];
          portsource = ports[1];
        } else {
          porttarget = ports[1];
          portsource = ports[0];
        }

        if (ordering === 'L-to-R') {
          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port
          porttarget.x = -1 * dist;
          portsource.x = dist;
          porttarget.y = 0;
          portsource.y = 0;
        } else if (ordering === 'R-to-L') {
          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port
          porttarget.x = dist;
          portsource.x = -1 * dist;
          porttarget.y = 0;
          portsource.y = 0;
        } else if (ordering === 'T-to-B') {
          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port
          porttarget.x = 0;
          portsource.x = 0;
          porttarget.y = -1 * dist;
          portsource.y = dist;
        } else {
          //if ordering is 'B-to-T'
          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port
          porttarget.x = 0;
          portsource.x = 0;
          porttarget.y = dist;
          portsource.y = -1 * dist;
        }
      }

      node.data('ports', ports); // Reset the node ports
    }

    nodes.data('portsordering', ordering); // Update the cached orderings of the nodes

    cy.endBatch();
  };
  /*
  * Add ports to the given node, with given ordering and port distance.
  */


  elementUtilities.addPorts = function (node, ordering, portDistance) {
    var firstPortId = node.id() + ".1"; // Id of first port

    var secondPortId = node.id() + ".2"; // Id of seconf port
    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one

    var firstPort = {
      id: firstPortId
    }; // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one

    var secondPort = {
      id: secondPortId
    }; // Complete port objects according to ordering

    if (ordering === 'L-to-R' || ordering === 'R-to-L') {
      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one
      firstPort.x = -1 * portDistance;
      secondPort.x = portDistance;
      firstPort.y = 0;
      secondPort.y = 0;
    } else {
      // If ordering is 'T-to-B' or 'B-to-T'
      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one
      firstPort.y = -1 * portDistance;
      secondPort.y = portDistance;
      firstPort.x = 0;
      secondPort.x = 0;
    }

    var fromLorT = ordering === 'L-to-R' || ordering === 'T-to-B'; // Check if ordering starts from left or top

    var ports = [firstPort, secondPort]; // Ports array for the node

    var connectedEdges = node.connectedEdges(); // The edges connected to the node

    cy.startBatch();
    node.data('ports', ports); // Reset the portsource and porttarget for each edge connected to the node

    for (var i = 0; i < connectedEdges.length; i++) {
      var edge = connectedEdges[i];
      var edgeClass = edge.data('class');
      /*
       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)
       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.
       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,
       * else it is vice versa.
       *
       */

      if (edge.data('target') === node.id()) {
        if (edgeClass === 'production' || this.isModulationArcClass(edgeClass)) {
          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)
        }

        if (fromLorT) {
          edge.data('porttarget', firstPortId);
        } else {
          edge.data('porttarget', secondPortId);
        }
      } else {
        if (edgeClass === 'consumption') {
          continue; // consumpiton edge cannot be connected to any port of source node
        }

        if (fromLorT) {
          edge.data('portsource', secondPortId);
        } else {
          edge.data('portsource', firstPortId);
        }
      }
    }

    cy.endBatch();
  };
  /*
  * Remove the ports of the given node
  */


  elementUtilities.removePorts = function (node) {
    var connectedEdges = node.connectedEdges();
    var nodeId = node.id();
    cy.startBatch(); // Reset portsource or porttarget of the connected edges to the node id

    for (var i = 0; i < connectedEdges.length; i++) {
      var edge = connectedEdges[i];

      if (edge.data('source') === nodeId) {
        edge.data('portsource', nodeId);
      } else {
        edge.data('porttarget', nodeId);
      }
    }

    node.data('ports', []); // Clear ports data

    cy.endBatch();
  };

  elementUtilities.changePortsOrientationAfterLayout = function () {
    //Check all processes and logical operators with ports
    cy.nodes().forEach(function (ele) {
      if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation' || ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {
        if (ele.data('ports').length === 2) {
          var bestOrientation = elementUtilities.changePortsOrientation(ele);
          elementUtilities.setPortsOrdering(ele, bestOrientation); // If improve-flow is checked we do the swaping of simple nodes with each other

          var improveFlow = options.improveFlow;
          improveFlow = typeof improveFlow === 'function' ? improveFlow.call() : improveFlow;

          if (improveFlow) {
            elementUtilities.postChangePortsOrientation(ele, bestOrientation);
          }
        }
      }
    });
    cy.style().update();
  };
  /*
   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.
   */


  elementUtilities.changePortsOrientation = function (ele) {
    var processId = ele.id();
    var orientation = {
      'L-to-R': 0,
      'R-to-L': 0,
      'T-to-B': 0,
      'B-to-T': 0
    };
    var targetingEdges = cy.edges("[target='" + processId + "']"); // Holds edges who have the input port as a target

    var sourcingEdges = cy.edges("[source='" + processId + "']"); // Holds edges who have the output port as a source
    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports

    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {
      targetingEdges.forEach(function (edge) {
        if (edge.data('class') === 'consumption') {
          var source = cy.getElementById(edge.data('source')); //Holds the element from the other side of edge

          var simple = false; //Checks if it is a simple node - connected with only 1 edge

          if (source.connectedEdges().length === 1) simple = true;
          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);
          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);
        }
      });
      sourcingEdges.forEach(function (edge) {
        if (edge.data('class') === 'production') {
          var target = cy.getElementById(edge.data('target'));
          var simple = false;
          if (target.connectedEdges().length === 1) simple = true;
          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);
          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);
        }
      });
    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {
      targetingEdges.forEach(function (edge) {
        if (edge.data('class') === 'logic arc') {
          var source = cy.getElementById(edge.data('source'));
          var simple = false;
          if (source.connectedEdges().length === 1) simple = true;
          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);
          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);
        }
      });
      sourcingEdges.forEach(function (edge) {
        if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {
          var target = cy.getElementById(edge.data('target'));
          var simple = false;
          if (target.connectedEdges().length === 1) simple = true;
          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);
          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);
        }
      });
    } //Calculates the best orientation from all orientation scores


    var bestOrientation = "L-to-R";
    var bestScore = orientation['L-to-R']; //The score of the best orientation is always positive

    for (var property in orientation) {
      if (orientation[property] > bestScore) {
        bestScore = orientation[property];
        bestOrientation = property;
      }
    }

    return bestOrientation;
  };
  /*
   This function calculates the scores for each orientation
   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,
   uncertain process, association, dissociation, logical operator
   @param other - is the other node, and based on its position scores are given to orientations
   @param orientation - holds scores for each orientation
   @param firstOrientation - can be L-to-R or T-to-B
   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)
   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)
   @param simple - checks if 'other' node is simple node (with degree 1)
   */


  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {
    var coeff = 0.5;
    var score = 2;
    if (simple) score = 1; // If it is a simple node, its score should affect less

    var nodeWidthOrHeight = 0;
    if (pos === 'x') nodeWidthOrHeight = ele.width() / 2;else if (pos === 'y') nodeWidthOrHeight = ele.height() / 2;

    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {
      orientation[firstOrientation] += score;
      orientation[oppositeOrientation] -= score;
    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {
      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;
      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;
    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {
      orientation[firstOrientation] -= score;
      orientation[oppositeOrientation] += score;
    }
  };
  /*
  After a process is oriented, for each simple node that is on the wrong side of the port,
  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.
  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1
  */


  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {
    var processId = ele.id();
    var inputPort = []; // Holds all simple nodes connected with input port

    var outputPort = []; // Holds all simple nodes connected with output port

    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port

    var targetingEdges = cy.edges("[target='" + processId + "']");
    var sourcingEdges = cy.edges("[source='" + processId + "']"); // Checks simple nodes and add them to one of the arrays mentioned above

    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {
      targetingEdges.forEach(function (edge) {
        var source = cy.getElementById(edge.data('source'));

        if (!source.isParent()) {
          if (edge.data('class') === 'consumption') {
            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, "input");
          } else {
            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, "notConnected");
          }
        }
      });
      sourcingEdges.forEach(function (edge) {
        var target = cy.getElementById(edge.data('target'));

        if (!target.isParent()) {
          if (edge.data('class') === 'production') {
            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, "output");
          } else {
            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, "notConnected");
          }
        }
      });
    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {
      targetingEdges.forEach(function (edge) {
        var source = cy.getElementById(edge.data('source'));

        if (!source.isParent()) {
          if (edge.data('class') === 'logic arc') {
            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, "input");
          } else {
            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, "notConnected");
          }
        }
      });
      sourcingEdges.forEach(function (edge) {
        var target = cy.getElementById(edge.data('target'));

        if (!target.isParent()) {
          if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {
            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, "output");
          } else {
            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, "notConnected");
          }
        }
      });
    } //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side


    inputPort.sort(function (a, b) {
      return b.score - a.score;
    });
    outputPort.sort(function (a, b) {
      return b.score - a.score;
    });
    notConnectedToPort.sort(function (a, b) {
      return a.score - b.score;
    }); //First we check for direct swaping between nodes from different ports positioned to the wrong side

    var minLength = inputPort.length;
    if (outputPort.length < minLength) minLength = outputPort.length;

    for (i = 0; i < minLength; i++) {
      var inputPortEle = inputPort.pop();
      var outputPortEle = outputPort.pop(); //Checks if free nodes belong to the same compound

      var firstNode = cy.getElementById(inputPortEle.id);
      var secondNode = cy.getElementById(outputPortEle.id);

      if (firstNode.data('parent') !== secondNode.data('parent')) {
        continue;
      }

      elementUtilities.swapElements(inputPortEle, outputPortEle);
    }
    /*
     After that we iterate over each element of effector nodes and see the scores it produces by swaping
     with nodes connected to input or output ports
     */


    for (i = notConnectedToPort.length - 1; i >= 0; i--) {
      var effector = notConnectedToPort[i];

      if (outputPort.length > 0) {
        var firstOutput = outputPort[outputPort.length - 1]; //Checks if free nodes belong to the same compound

        var firstNode = cy.getElementById(effector.id);
        var secondNode = cy.getElementById(firstOutput.id);

        if (firstNode.data('parent') !== secondNode.data('parent')) {
          continue;
        }

        elementUtilities.swapElements(effector, firstOutput);
        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);

        if (firstOutputScore > firstOutput.score) {
          outputPort.pop();
        } else elementUtilities.swapElements(effector, firstOutput); //swap back

      } else if (inputPort.length > 0) {
        var firstInput = inputPort[inputPort.length - 1]; //Checks if free nodes belong to the same compound

        var firstNode = cy.getElementById(effector.id);
        var secondNode = cy.getElementById(firstInput.id);

        if (firstNode.data('parent') !== secondNode.data('parent')) {
          continue;
        }

        elementUtilities.swapElements(effector, firstInput);
        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);

        if (firstInputScore > firstInput.score) {
          inputPort.pop();
        } else elementUtilities.swapElements(effector, firstInput);
      }
    }
  };
  /*
  * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays
  * */


  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {
    if (other.connectedEdges().length === 1) {
      var nodeScore;
      var obj = {};

      if (connectedTo === "notConnected") {
        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));
        obj['id'] = other.id();
        obj['score'] = nodeScore;
        array.push(obj);
      } else {
        if (connectedTo === "input") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === "output") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);

        if (nodeScore < 0) //if it is in the wrong side we add it to the input array
          {
            obj['id'] = other.id();
            obj['score'] = nodeScore;
            array.push(obj);
          }
      }
    }
  };
  /*
  This function calculates the score of a node based on its position with respect to a process/logical operator
  @param ele - is the node with the ports. It can be process,omitted process,
  uncertain process, association, dissociation, logical operator
  @param other - is the other node, and based on its position score of a node is calculated
  @param orientation - A string which holds current best orientation
  */


  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {
    var coeff = 0.5;
    var score = 1;

    if (orientation === 'L-to-R' || orientation === 'R-to-L') {
      var nodeWidth = ele.width() / 2;

      if (other.position('x') < ele.position('x') - nodeWidth) {
        if (orientation === 'L-to-R') return score;else if (orientation === 'R-to-L') return -score;
      } else if (other.position('x') >= ele.position('x') - nodeWidth && other.position('x') <= ele.position('x') + nodeWidth) {
        if (orientation === 'L-to-R') return (ele.position('x') - other.position('x')) / nodeWidth * coeff;else if (orientation === 'R-to-L') return -(ele.position('x') - other.position('x')) / nodeWidth * coeff;
      } else if (other.position('x') > ele.position('x') + nodeWidth) {
        if (orientation === 'L-to-R') return -score;else if (orientation === 'R-to-L') return score;
      }
    }

    if (orientation === 'T-to-B' || orientation === 'B-to-T') {
      var nodeHeight = ele.height() / 2;

      if (other.position('y') < ele.position('y') - nodeHeight) {
        if (orientation === 'T-to-B') return score;else if (orientation === 'B-to-T') return -score;
      } else if (other.position('y') >= ele.position('y') - nodeHeight && other.position('y') <= ele.position('y') + nodeHeight) {
        if (orientation === 'T-to-B') return (ele.position('y') - other.position('y')) / nodeHeight * coeff;else if (orientation === 'B-to-T') return -(ele.position('y') - other.position('y')) / nodeHeight * coeff;
      } else if (other.position('y') > ele.position('y') + nodeHeight) {
        if (orientation === 'T-to-B') return -score;else if (orientation === 'B-to-T') return score;
      }
    }
  };
  /*
  Swaps the positions of 2 elements
  */


  elementUtilities.swapElements = function (firstEle, secondEle) {
    var firstNode = cy.getElementById(firstEle.id);
    var secondNode = cy.getElementById(secondEle.id);
    var tempx = firstNode.position('x');
    var tempy = firstNode.position('y');
    firstNode.position('x', secondNode.position('x'));
    firstNode.position('y', secondNode.position('y'));
    secondNode.position('x', tempx);
    secondNode.position('y', tempy);
  }; // used for handling the variable property of complexes


  elementUtilities.getComplexPadding = function (ele) {
    // this property needs to take into account:
    // - presence of a label
    // - option to display complex labels
    // - presence of states and info box on the bottom
    var padding = graphUtilities.getCompoundPaddings();
    padding = padding < 5 ? 5 : padding;

    if (options.showComplexName && elementUtilities.getElementContent(ele)) {
      padding += options.extraComplexPadding * 0.5; // if there is something on the bottom side

      if (ele.data('auxunitlayouts') && ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {
        padding += options.extraComplexPadding * 0.5;
      } else {
        for (var i = 0; i < ele.data('statesandinfos').length; i++) {
          var statesandinfos = ele.data('statesandinfos')[i];
          var thisY = statesandinfos.bbox.y;
          var thisH = statesandinfos.bbox.h;
          var parentY = ele.data('class') == "compartment" || ele.data('class') == "complex" ? ele.data('bbox').y : ele.position().y;
          var height = ele.data("originalH") ? ele.data("originalH") : ele.height();
          var parentY2 = Number((parentY + height / 2).toFixed(2));
          var centerY = Number((thisY + thisH / 2).toFixed(2));

          if (centerY == parentY2) {
            padding += options.extraComplexPadding * 0.5;
            break;
          }
        }
      }
    } // for the case where the padding is the tightest, we need a bit of extra space
    // to avoid touching the infoboxes of the complex
    else {
        if (ele.data('statesandinfos').length > 0) {
          padding += 2;
        }
      }

    return padding;
  }; // used for handling the variable property of complexes


  elementUtilities.getComplexMargin = function (ele) {
    // this property needs to take into account:
    // - presence of a label
    // - option to display complex labels
    // - presence of states and info box on the bottom
    var margin = -1 * options.extraComplexPadding;

    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data('auxunitlayouts') && // check if there is something on the bottom side
    ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {
      margin -= options.extraComplexPadding * 0.5;
    }

    if (ele.css("font-size") == "14px") margin -= 2;
    return margin;
  }; // Set clone marker status of given nodes to the given status.


  elementUtilities.setCloneMarkerStatus = function (node, status) {
    if (status) node.data('clonemarker', true);else node.removeData('clonemarker');
    if (node.data('class') !== "unspecified entity" && node.data('class') !== "perturbing agent") return;
    var bgObj = {
      'background-image': 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E',
      'background-position-x': '50%',
      'background-position-y': '100%',
      'background-width': '100%',
      'background-height': '25%',
      'background-fit': 'none',
      'background-image-opacity': '0'
    };
    var imgs = node.data('background-image') ? node.data('background-image').split(" ") : [];
    var xPos = node.data('background-position-x') ? node.data('background-position-x').split(" ") : [];
    var yPos = node.data('background-position-y') ? node.data('background-position-y').split(" ") : [];
    var widths = node.data('background-width') ? node.data('background-width').split(" ") : [];
    var heights = node.data('background-height') ? node.data('background-height').split(" ") : [];
    var fits = node.data('background-fit') ? node.data('background-fit').split(" ") : [];
    var opacities = node.data('background-image-opacity') ? ("" + node.data('background-image-opacity')).split(" ") : [];

    if (status) {
      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity non-zero

      if (index > -1) opacities[index] = node.css('background-opacity');else {
        imgs.push(bgObj['background-image']);
        xPos.push(bgObj['background-position-x']);
        yPos.push(bgObj['background-position-y']);
        widths.push(bgObj['background-width']);
        heights.push(bgObj['background-height']);
        fits.push(bgObj['background-fit']);
        opacities.push(node.css('background-opacity'));
      }
    } else {
      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity zero

      if (index > -1) opacities[index] = '0';
    }

    node.data('background-image', imgs.join(" "));
    node.data('background-position-x', xPos.join(" "));
    node.data('background-position-y', yPos.join(" "));
    node.data('background-width', widths.join(" "));
    node.data('background-height', heights.join(" "));
    node.data('background-fit', fits.join(" "));
    node.data('background-image-opacity', opacities.join(" "));
  }; // Section End
  // Stylesheet helpers


  var defaultProperties = {};

  var getDefaultNodeProperties = function getDefaultNodeProperties() {
    return {
      'border-width': 1.25,
      'border-color': '#555555',
      'background-color': '#ffffff',
      'background-opacity': 1,
      'background-image-opacity': 1,
      'text-wrap': 'wrap'
    };
  };

  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {
    return {
      'line-color': '#555555',
      'width': 1.25
    };
  };

  var getDefaultProcessSize = function getDefaultProcessSize() {
    return {
      width: 20,
      height: 20
    };
  };

  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {
    return {
      width: 30,
      height: 30
    };
  };

  var getDefaultBASize = function getDefaultBASize() {
    return {
      width: 60,
      height: 30
    };
  };

  var defaultSifEdgeColorMap = {
    'neighbor-of': '#FC002C',
    'interacts-with': '#B57261',
    'in-complex-with': '#B4987A',
    'controls-state-change-of': '#B4E1CD',
    'controls-transport-of': '#F0E7C8',
    'controls-phosphorylation-of': '#D970A1',
    'catalysis-precedes': '#8EC3ED',
    'controls-expression-of': '#6A0F30',
    'consumption-controled-by': '#A9A9F7',
    'controls-production-of': '#2D5207',
    'controls-transport-of-chemical': '#3F00FF',
    'chemical-affects': '#D95F23',
    'reacts-with': '#4E214B',
    'used-to-produce': '#FF2F07',
    'phosphorylates': '#43A93C',
    'dephosphorylates': '#CD4F32',
    'upregulates-expression': '#43A93C',
    'downregulates-expression': '#CD4F32',
    'activates': '#32D849',
    'inhibits': '#4886A5',
    'activates-gtpase': '#468DE3',
    'inhibits-gtpase': '#C364BF',
    'acetylates': '#55B1B6',
    'deacetylates': '#EE5F78',
    'methylates': '#B0B03D',
    'demethylates': '#DB6F21'
  };
  var defaultSizeMap = {
    'macromolecule': {
      width: 60,
      height: 30
    },
    'nucleic acid feature': {
      width: 60,
      height: 30
    },
    'simple chemical': {
      width: 30,
      height: 30
    },
    'empty set': {
      width: 22,
      height: 22
    },
    'phenotype': {
      width: 60,
      height: 30
    },
    'unspecified entity': {
      width: 60,
      height: 30
    },
    'perturbing agent': {
      width: 60,
      height: 30
    },
    'complex': {
      width: 44,
      height: 44
    },
    'compartment': {
      width: 80,
      height: 80
    },
    'submap': {
      width: 80,
      height: 80
    },
    'tag': {
      width: 35,
      height: 35
    },
    'SIF macromolecule': {
      width: 60,
      height: 30
    },
    'SIF simple chemical': {
      width: 30,
      height: 30
    },
    'topology group': {
      width: 44,
      height: 44
    }
  };
  elementUtilities.processTypes.forEach(function (type) {
    // phenotype has a different default size
    if (type == 'phenotype') {
      return;
    }

    defaultSizeMap[type] = getDefaultProcessSize();
  });
  elementUtilities.logicalOperatorTypes.forEach(function (type) {
    defaultSizeMap[type] = getDefaultLogicalOperatorSize();
  });
  elementUtilities.biologicalActivityTypes.forEach(function (type) {
    defaultSizeMap[type] = getDefaultBASize();
  });

  var getDefaultSize = function getDefaultSize(type) {
    return defaultSizeMap[type];
  };

  var getDefaultFontProperties = function getDefaultFontProperties() {
    return {
      'font-size': 11,
      'font-family': 'Helvetica',
      'font-style': 'normal',
      'font-weight': 'normal',
      'color': '#000'
    };
  };

  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {
    return {
      'font-size': getDefaultInfoboxFontSize(nodeClass, infoboxType),
      'font-family': 'Arial',
      'font-style': 'normal',
      'font-weight': 'normal',
      'font-color': '#0f0f0f',
      'border-width': 1,
      'border-color': '#555555',
      'background-color': '#ffffff',
      'shape-name': getDefaultInfoboxShapeName(nodeClass, infoboxType),
      'width': getDefaultInfoboxSize(nodeClass, infoboxType).w,
      'height': getDefaultInfoboxSize(nodeClass, infoboxType).h
    };
  };

  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {
    var fontsize = 9;

    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {
      fontsize = 11;
    }

    return fontsize;
  };

  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {
    var w = 12,
        h = 12;

    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {
      w = 15;
      h = 15;
    }

    return {
      w: w,
      h: h
    };
  };

  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {
    if (infoboxType === 'state variable') {
      return 'stadium';
    }

    if (elementUtilities.isSIFNode(nodeClass)) {
      if (infoboxType === 'unit of information') {
        if (nodeClass == 'SIF macromolecule') {
          return 'stadium';
        }

        return 'rectangle';
      }
    } else {
      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);
      return list[0];
    }
  };

  elementUtilities.nodeTypes.forEach(function (type) {
    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));

    if (elementUtilities.canHaveStateVariable(type)) {
      var props = getDefaultInfoboxProperties(type, 'state variable');
      defaultProperties[type]['state variable'] = props;
    }

    if (elementUtilities.canHaveUnitOfInformation(type)) {
      var props = getDefaultInfoboxProperties(type, 'unit of information');
      defaultProperties[type]['unit of information'] = props;
    }
  });
  elementUtilities.compoundNodeTypes.forEach(function (type) {
    defaultProperties[type] = $.extend(defaultProperties[type], {
      'background-opacity': 0.5
    });
  });
  $.extend(defaultProperties['association'], {
    'background-color': '#707070'
  });
  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat(['phenotype']).forEach(function (type) {
    $.extend(defaultProperties[type], getDefaultFontProperties());
  });
  $.extend(defaultProperties['submap'], {
    'font-size': 14,
    'border-width': 2.25
  });
  $.extend(defaultProperties['compartment'], {
    'font-size': 14,
    'border-width': 3.25
  });
  elementUtilities.edgeTypes.forEach(function (type) {
    defaultProperties[type] = getDefaultEdgeProperties();

    if (defaultSifEdgeColorMap[type]) {
      defaultProperties[type]['line-color'] = defaultSifEdgeColorMap[type];
    }
  });

  function getProp(props, name) {
    var prop = props[name];

    if (typeof prop !== null && _typeof(prop) === 'object') {
      return $.extend({}, prop);
    }

    return prop;
  }

  function extendDataWithClassDefaults(data, className, propsToSkip) {
    if (!className) {
      return;
    }

    var defaultProps = elementUtilities.getDefaultProperties(className);
    Object.keys(defaultProps).forEach(function (name) {
      if (!propsToSkip || !propsToSkip[name]) {
        data[name] = getProp(defaultProps, name);
      }
    });
  }

  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {
    // list of properties to skip
    var propsToSkip = {
      'width': true,
      'height': true,
      'state variable': true,
      'unit of information': true,
      'multimer': true,
      'clonemarker': true,
      'ports-ordering': true
    };
    extendDataWithClassDefaults(data, className, propsToSkip);
  };

  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {
    extendDataWithClassDefaults(data, className);
  }; // get infobox properties and filter the ones related to style only


  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {
    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);
    var infoboxStyle = $.extend({}, defaultProps[infoboxType]); // width and height are belonging to bbox object rather than style object

    var nonStyleProps = ['width', 'height'];
    nonStyleProps.forEach(function (propName) {
      delete infoboxStyle[propName];
    });
    return infoboxStyle;
  };

  elementUtilities.getDefaultProperties = function (sbgnclass) {
    if (sbgnclass == undefined) {
      return defaultProperties;
    }

    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass); // init default properties for the class if not initialized yet

    if (defaultProperties[pureClass] == null) {
      defaultProperties[pureClass] = {};
    }

    return defaultProperties[pureClass];
  };

  elementUtilities.setDefaultProperties = function (sbgnclass, props) {
    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);
  };

  elementUtilities.lockGraphTopology = function () {
    elementUtilities.graphTopologyLocked = true;

    if (cy.expandCollapse) {
      cy.expandCollapse('get').disableCue();
    }
  };

  elementUtilities.unlockGraphTopology = function () {
    elementUtilities.graphTopologyLocked = false;

    if (cy.expandCollapse) {
      cy.expandCollapse('get').enableCue();
    }
  };

  elementUtilities.isGraphTopologyLocked = function () {
    return elementUtilities.graphTopologyLocked;
  };

  elementUtilities.languageToMapType = function (lang) {
    switch (lang) {
      case 'process description':
        return 'PD';

      case 'activity flow':
        return 'AF';

      case 'sif':
        return 'SIF';

      case 'hybrid sbgn':
        return 'HybridSbgn';

      default:
        return 'HybridAny';
    }
  };

  elementUtilities.mapTypeToLanguage = function (mapType) {
    switch (mapType) {
      case 'PD':
        return 'process description';

      case 'AF':
        return 'activity flow';

      case 'SIF':
        return 'sif';

      case 'HybridSbgn':
        return 'hybrid sbgn';

      default:
        return 'hybrid any';
    }
  };

  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {
    var expandCollapse = cy.expandCollapse('get');
    var collapsedChildren = cy.collection();
    var collapsedNodes = nodes.filter(".cy-expand-collapse-collapsed-node");
    collapsedNodes.forEach(function (n) {
      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));
    });
    return collapsedChildren;
  };

  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {
    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);
  };

  return elementUtilities;
};

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

module.exports = function () {
  var cy;
  var parsedDataMap;
  var visibleDataMapByExp;
  var groupedDataMap;
  var visibleFiles;
  var colorMap;
  var allVis;
  var fileDescription;
  var fileTitle;

  function experimentalDataOverlay(param) {
    // Init
    cy = param.sbgnCyInstance.getCy();
    parsedDataMap = {};
    visibleDataMapByExp = {};
    visibleFiles = {};
    groupedDataMap = {};
    colorMap = {};
    allVis = true;
    fileDescription = {};
    fileTitle = {};
  }

  experimentalDataOverlay.getName = function () {
    return fname;
  };

  experimentalDataOverlay.getDesc = function () {
    return fdesc;
  };

  experimentalDataOverlay.getGroupedDataMap = function () {
    return groupedDataMap;
  };

  experimentalDataOverlay.getParsedDataMap = function () {
    return parsedDataMap;
  };

  experimentalDataOverlay.getVisibleData = function () {
    return visibleDataMapByExp;
  };

  experimentalDataOverlay.hideAll = function () {
    var invisibleExp = {};
    var invisibleFile = {};
    allVis = false;

    for (var i in groupedDataMap) {
      if (visibleFiles[i]) {
        visibleFiles[i] = false;
        invisibleFile[i] = false;
      }
    }

    for (var fileName in groupedDataMap) {
      for (var j = 0; j < groupedDataMap[fileName].length; j++) {
        var expName = groupedDataMap[fileName][j];
        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;

        if (visibleDataMapByExp[fileName + '?' + expName] == true) {
          invisibleExp[fileName + '?' + expName] = false;
          visibleDataMapByExp[fileName + '?' + expName] = false;
        }
      }
    }

    this.showData();
    params = {
      invisibleFile: invisibleFile,
      invisibleExp: invisibleExp
    };
    return params;
  };

  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {
    for (var j in invisibleFile) {
      visibleFiles[j] = true;
    }

    for (var _j in invisibleExp) {
      visibleDataMapByExp[_j] = true;
    }

    allVis = true;
    this.showData();
    return;
  };

  experimentalDataOverlay.unhideAll = function () {
    var visibleExp = {};
    var visibleFile = {};
    allVis = true;

    for (var i in visibleFiles) {
      if (!visibleFiles[i]) {
        visibleFiles[i] = true;
        visibleFile[i] = true;
      }
    }

    for (var fileName in groupedDataMap) {
      if (groupedDataMap[fileName] == undefined) {
        return;
      }

      for (var j = 0; j < groupedDataMap[fileName].length; j++) {
        var expName = groupedDataMap[fileName][j];
        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;

        if (visibleDataMapByExp[fileName + '?' + expName] == false) {
          visibleExp[fileName + '?' + expName] = true;
          visibleDataMapByExp[fileName + '?' + expName] = true;
        }
      }
    }

    this.showData();
    return {
      visibleExp: visibleExp,
      visibleFile: visibleFile
    };
  };

  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {
    for (var j in visibleFile) {
      visibleFiles[j] = false;
    }

    for (var _j2 in visibleExp) {
      visibleDataMapByExp[_j2] = false;
    }

    allVis = false;
    this.showData();
    return;
  };

  experimentalDataOverlay.removeAll = function () {
    var parsed = {};
    var visible = {};
    var grouped = {};
    var visiblef = {};

    for (var i in parsedDataMap) {
      if (!parsed[i]) {
        parsed[i] = {};
      }

      for (var j in parsedDataMap[i]) {
        parsed[i][j] = parsedDataMap[i][j];
      }
    }

    for (var _i in visibleDataMapByExp) {
      visible[_i] = visibleDataMapByExp[_i];
    }

    for (var _i2 in visibleFiles) {
      visiblef[_i2] = visibleFiles[_i2];
    }

    for (var _i3 in groupedDataMap) {
      if (!grouped[_i3]) {
        grouped[_i3] = [];
      }

      for (var _j3 in groupedDataMap[_i3]) {
        grouped[_i3].push(groupedDataMap[_i3][_j3]);
      }
    }

    parsedDataMap = {};
    visibleDataMapByExp = {};
    visibleFiles = {};
    groupedDataMap = {};
    this.showData();
    params = {
      parsed: parsed,
      visible: visible,
      grouped: grouped,
      visiblef: visiblef
    };
    return params;
  };

  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {
    parsedDataMap = parsed;
    visibleDataMapByExp = visible;
    groupedDataMap = grouped;
    visibleFiles = visiblef;
    this.showData();
    param = {};
    return param;
  };

  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {
    visibleDataMapByExp[fileName + '?' + expName] = isVisible;
    groupedDataMap[fileName] = groupArray;

    for (var i in values) {
      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];
    }

    var params = {
      fileName: fileName,
      expName: expName
    };
    this.showData();
    return params;
  };

  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {
    parsedDataMap = parsed;
    visibleDataMapByExp = visible;
    groupedDataMap = grouped;
    visibleFiles = visiblef;
    this.showData();
    param = {
      fileName: fileName
    };
    return param;
  };

  experimentalDataOverlay.removeExp = function (fileName, expName) {
    var isVisible = false;
    var values = {};
    var groupArray = [];

    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {
      isVisible = visibleDataMapByExp[fileName + '?' + expName];
      delete visibleDataMapByExp[fileName + '?' + expName];
    }

    if (groupedDataMap[fileName] != undefined) {
      for (var i in groupedDataMap[fileName]) {
        groupArray[i] = groupedDataMap[fileName][i];
      } //groupArray = groupedDataMap[fileName];


      var index = groupedDataMap[fileName].indexOf(expName);

      if (index != -1) {
        delete groupedDataMap[fileName][index];
      }
    }

    for (var _i4 in parsedDataMap) {
      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {
        if (!(_i4 in values)) {
          values[_i4] = {};
        }

        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];
        delete parsedDataMap[_i4][fileName + '?' + expName];
      }
    }

    if (groupedDataMap[fileName] != undefined) {
      var count = 0;

      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {
        if (!groupedDataMap[fileName][_i5]) count++;
      }

      if (count == groupedDataMap[fileName].length) {
        delete groupedDataMap[fileName];
      }
    }

    params = {
      fileName: fileName,
      expName: expName,
      isVisible: isVisible,
      values: values,
      groupArray: groupArray
    };
    this.showData();
    return params;
  };

  experimentalDataOverlay.removeFile = function (fileName) {
    if (groupedDataMap[fileName] == undefined) {
      return;
    }

    var parsed = {};
    var visible = {};
    var grouped = {};
    var visiblef = {};

    for (var i in parsedDataMap) {
      if (!parsed[i]) {
        parsed[i] = {};
      }

      for (var j in parsedDataMap[i]) {
        parsed[i][j] = parsedDataMap[i][j];
      }
    }

    for (var _i6 in visibleDataMapByExp) {
      visible[_i6] = visibleDataMapByExp[_i6];
    }

    for (var _i7 in visibleFiles) {
      visiblef[_i7] = visibleFiles[_i7];
    }

    for (var _i8 in groupedDataMap) {
      if (!grouped[_i8]) {
        grouped[_i8] = [];
      }

      for (var _j4 in groupedDataMap[_i8]) {
        grouped[_i8].push(groupedDataMap[_i8][_j4]);
      }
    }

    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {
      var expName = groupedDataMap[fileName][_j5];
      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];

      for (var _i9 in parsedDataMap) {
        delete parsedDataMap[_i9][fileName + '?' + expName];
      }
    }

    delete groupedDataMap[fileName];
    var params = {
      fileName: fileName,
      parsed: parsed,
      visible: visible,
      grouped: grouped,
      visiblef: visiblef
    };
    this.showData();
    var k = 0;

    for (var _i10 in groupedDataMap) {
      k++;
    }

    if (k == 0) {
      groupedDataMap = {};
    }

    return params;
  };

  experimentalDataOverlay.hideExp = function (fileName, expName) {
    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;
    visibleDataMapByExp[fileName + '?' + expName] = false;
    params = {
      fileName: fileName,
      expName: expName
    };
    this.showData();
    return params;
  };

  experimentalDataOverlay.hideFile = function (fileName) {
    visibleFiles[fileName] = false;
    var invisible = {};

    if (groupedDataMap[fileName] == undefined) {
      return;
    }

    for (var j = 0; j < groupedDataMap[fileName].length; j++) {
      var expName = groupedDataMap[fileName][j];
      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;

      if (visibleDataMapByExp[fileName + '?' + expName] == true) {
        invisible[fileName + '?' + expName] = false;
        visibleDataMapByExp[fileName + '?' + expName] = false;
      }
    }

    this.showData();
    params = {
      fileName: fileName,
      invisible: invisible
    };
    return params;
  };

  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {
    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;

    for (var j in invisible) {
      visibleDataMapByExp[j] = true;
    }

    this.showData();
    return {
      fileName: fileName
    };
  };

  experimentalDataOverlay.unhideExp = function (fileName, expName) {
    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;
    visibleDataMapByExp[fileName + '?' + expName] = true;
    params = {
      fileName: fileName,
      expName: expName
    };
    this.showData();
    return params;
  };

  experimentalDataOverlay.unhideFile = function (fileName) {
    var visible = {};
    visibleFiles[fileName] = true;

    if (groupedDataMap[fileName] == undefined) {
      return;
    }

    for (var j = 0; j < groupedDataMap[fileName].length; j++) {
      var expName = groupedDataMap[fileName][j];
      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;

      if (visibleDataMapByExp[fileName + '?' + expName] == false) {
        visibleDataMapByExp[fileName + '?' + expName] = true;
        visible[fileName + '?' + expName] = true;
      }
    }

    this.showData();
    params = {
      fileName: fileName,
      visible: visible
    };
    return params;
  };

  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {
    visibleFiles[fileName] = false;

    for (var j in visible) {
      visibleDataMapByExp[j] = false;
    }

    this.showData();
    return {
      fileName: fileName
    };
  };

  experimentalDataOverlay.countVisibleDataByExp = function () {
    // Count the genomic data that will be displayed on nodes' body
    var dataBoxCount = 0;

    for (var exp in visibleDataMapByExp) {
      if (visibleDataMapByExp[exp]) {
        dataBoxCount++;
      }
    }

    return dataBoxCount;
  };

  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {
    var dataBoxCount = this.countVisibleDataByExp();
    var values = []; // Experimental data overlay part !
    // const dataURI = 'data:image/svg+xml;utf8,'

    var svgNameSpace = 'http://www.w3.org/2000/svg';
    var nodeLabel = ele.data('label');
    var reqWidth = ele.outerWidth();
    var reqHeight = ele.outerHeight();
    var overlayRecBoxW = reqWidth;
    var overlayRecBoxH = reqHeight;
    var svg = document.createElementNS(svgNameSpace, 'svg'); // It seems this should be set according to the node size !

    svg.setAttribute('width', reqWidth);
    svg.setAttribute('height', reqHeight); // This is important you need to include this to succesfully render in cytoscape.js!

    svg.setAttribute('xmlns', svgNameSpace); // Overlay Data Rect

    var overLayRectBBox = {
      w: overlayRecBoxW,
      h: overlayRecBoxH,
      x: 0,
      y: 0
    };
    var frequencyData = parsedDataMap[nodeLabel];
    var maxDataBoxCount =
    /*(genomicDataBoxCount > 3) ? 3:*/
    dataBoxCount;
    var counter = 0;

    for (var i in groupedDataMap) {
      for (var j in groupedDataMap[i]) {
        var fileName = i;
        var expName = groupedDataMap[i][j];

        if (!visibleDataMapByExp[fileName + '?' + expName]) {
          continue;
        }

        if (frequencyData[fileName + '?' + expName] !== undefined) {
          values.push(frequencyData[fileName + '?' + expName]);
          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);
        } else {
          values.push("-");
          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);
        } //  draw separator line between data rectangles


        if (counter < maxDataBoxCount - 1) {
          var overlayRect = document.createElementNS(svgNameSpace, 'line');
          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);
          overlayRect.setAttribute('y1', overLayRectBBox.y);
          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);
          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);
          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');
          svg.appendChild(overlayRect);
        }

        counter++;
      }
    }

    tooltip.content = "(" + values.join(",") + ")";

    function interpolateColor(color1, color2, factor) {
      var result = color1.slice();

      for (var i = 0; i < 3; i++) {
        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));
      }

      return result;
    }

    ;

    function decideColor(percent, fileName) {
      var sorted = [];

      for (var _i11 in colorMap[fileName]) {
        sorted.push(_i11);
      }

      sorted.sort();
      var prev = sorted[0];
      var next = sorted[sorted.length - 1];

      if (percent < prev || percent > next) {
        return {
          r: 210,
          g: 210,
          b: 210
        };
      }

      for (var k in sorted) {
        var i = sorted[k];

        if (i == percent) {
          return {
            r: colorMap[fileName][i][0],
            g: colorMap[fileName][i][1],
            b: colorMap[fileName][i][2]
          };
        } else if (i > percent) {
          next = i;
          break;
        } else {
          prev = i;
        }
      }

      var steps = 1 / (next - prev);
      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));
      return {
        r: res[0],
        g: res[1],
        b: res[2]
      };
    }

    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {
      var colorString = '';

      if (percent) {
        var color = decideColor(parseInt(percent), fileName);
        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')'; // Rectangle Part

        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');

        _overlayRect.setAttribute('x', x);

        _overlayRect.setAttribute('y', y);

        _overlayRect.setAttribute('width', w);

        _overlayRect.setAttribute('height', h);

        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');

        parentSVG.appendChild(_overlayRect);
      } else {
        colorString = 'rgb(210,210,210)'; // Rectangle Part

        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');

        _overlayRect2.setAttribute('x', x);

        _overlayRect2.setAttribute('y', y);

        _overlayRect2.setAttribute('width', w);

        _overlayRect2.setAttribute('height', h);

        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');

        parentSVG.appendChild(_overlayRect2);
      }
    }

    return svg;
  };

  experimentalDataOverlay.showData = function () {
    var self = this;
    var nodeCollection = cy.collection();
    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter("node");
    var collapsedChildrenNotParent = cy.collection();
    var parentSet = new Set(); // parent ids of collapsed children

    collapsedChildren.forEach(function (node) {
      parentSet.add(node.parent().id());
    }); // filter parent nodes from collapsed children

    collapsedChildren.forEach(function (node) {
      if (!parentSet.has(node.id())) {
        // this means removed node is not parent
        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);
      }
    });
    var expandableNodes = cy.expandCollapse('get').expandableNodes();
    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);
    cy.batch(function () {
      nodeCollection.forEach(function (node) {
        var nodeLabel = node.data('label');
        var imageURI = 'data:image/svg+xml;utf8,';

        if (nodeLabel in parsedDataMap && !node.isParent()) {
          var tooltip = {
            content: ''
          };
          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);

          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {
            // var tooltip = "(" + Object.values(parsedDataMap[nodeLabel]).join(",") + ")";
            node.data("tooltip", tooltip.content);
          } else {
            node.data('tooltip', '');
          }

          node.data('background-image', imageURI), node.data('background-position-x', '100%');
          node.data('background-position-y', '100%');
          node.data('background-width', '100%');
          node.data('background-height', '100%');
          node.data('background-fit', 'contain');
          node.data('background-image-opacity', '1');
        } else {
          node.data('background-image', "");
          node.data('tooltip', '');
        }
      });
    });
  };

  experimentalDataOverlay.hexToRgb = function (hex) {
    if (hex[0] == '#') {
      hex = hex.substring(1);
    } else {
      return;
    }

    var bigint = parseInt(hex, 16);
    var r = bigint >> 16 & 255;
    var g = bigint >> 8 & 255;
    var b = bigint & 255;
    return [r, g, b];
  };

  experimentalDataOverlay.isHex = function (hex) {
    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';
  };

  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {
    parsedDataMap = parsedDataMap || {};
    visibleDataMapByExp = visibleDataMapByExp || {};
    groupedDataMap = groupedDataMap || {};
    colorMap = colorMap || {};
    var experiments = [];
    var colors = {};

    if (fileName in groupedDataMap && !sampleExperiment) {
      return;
    } else if (fileName in groupedDataMap && sampleExperiment) {
      this.removeAll();
    }

    var parsed = {};
    var visible = {};
    var grouped = {};
    var visiblef = {};
    var colorm = {};
    var fileD = {};
    var fileN = {};

    for (var i in parsedDataMap) {
      if (!parsed[i]) {
        parsed[i] = {};
      }

      for (var j in parsedDataMap[i]) {
        parsed[i][j] = parsedDataMap[i][j];
      }
    }

    for (var _i12 in visibleDataMapByExp) {
      visible[_i12] = visibleDataMapByExp[_i12];
    }

    for (var _i13 in visibleFiles) {
      visiblef[_i13] = visibleFiles[_i13];
    }

    for (var _i14 in groupedDataMap) {
      if (!grouped[_i14]) {
        grouped[_i14] = [];
      }

      for (var _j6 in groupedDataMap[_i14]) {
        grouped[_i14].push(groupedDataMap[_i14][_j6]);
      }
    }

    for (var _i15 in colorMap) {
      colorm[_i15] = colorMap[_i15];
    }

    for (var _i16 in visibleFiles) {
      fileD[_i16] = fileDescription[_i16];
    }

    for (var _i17 in visibleFiles) {
      fileN[_i17] = fileTitle[_i17];
    }

    var intregex = "^(-?)(0|([1-9][0-9]*))(\\.[0-9]+)?$";
    var version = '1.0';
    var clr = false; // By lines

    var lines = data.split('\n');

    if (lines.length < 2) {
      errorCallback();
      return "Error";
    }

    var k = 0;
    var upto = 4;

    if (lines.length < 4) {
      upto = lines.length;
    }

    for (var _i18 = 0; _i18 < upto; _i18++) {
      if (lines[_i18].substring(0, 7) == 'version') {
        k++;

        var metaLines = lines[_i18].split('\t');

        if (metaLines[1] && metaLines[1].length > 1) {
          version = metaLines[1];
        } else {
          fileDescription = fileD;
          fileTitle = fileN;
          version = "1.0";
          colorMap = colorm;
          errorCallback();
          return "Error";
        }
      }

      if (lines[_i18].substring(0, 4) == 'name') {
        k++;

        var _metaLines = lines[_i18].split('\t');

        if (_metaLines[1] && _metaLines[1].length > 1) {
          fileTitle[fileName] = _metaLines[1];
        } else {
          fileTitle = fileN;
          fileDescription = fileD;
          version = "1.0";
          colorMap = colorm;
          errorCallback();
          return "Error";
        }
      }

      if (lines[_i18].substring(0, 11) == 'description') {
        k++;

        var _metaLines2 = lines[_i18].split('\t');

        if (_metaLines2[1] && _metaLines2[1].length > 1) {
          fileDescription[fileName] = _metaLines2[1];
        } else {
          fileTitle = fileN;
          fileDescription = fileD;
          version = "1.0";
          colorMap = colorm;
          errorCallback();
          return "Error";
        }
      }

      if (lines[_i18].substring(0, 5) == 'color') {
        clr = true;
        k++;

        var _metaLines3 = lines[_i18].split('\t');

        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {
          errorCallback();
          return "Error";
        }

        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {
          var hex = _metaLines3[t + 1];

          if (t == _metaLines3.length - 2) {
            hex = hex.trim();
          }

          if (_metaLines3[t] == "min" || _metaLines3[t] == "max") {
            if (this.isHex(hex)) {
              colors[_metaLines3[t]] = this.hexToRgb(hex);
            }
          } else if (parseInt(_metaLines3[t]) != NaN) {
            if (this.isHex(hex)) {
              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);
            } else {
              fileTitle = fileN;
              fileDescription = fileD;
              colorMap = colorm;
              version = "1.0";
              errorCallback();
              return "Error";
            }
          } else {
            fileTitle = fileN;
            fileDescription = fileD;
            colorMap = colorm;
            version = "1.0";
            errorCallback();
            return "Error";
          }
        }
      }
    } //default colors


    if (!clr) {
      colors[-100] = this.hexToRgb('#0000ff');
      colors[100] = this.hexToRgb('#ff0000');
      colors[0] = this.hexToRgb('#ffffff');
    } // First line is meta data !


    var metaLineColumns = lines[k].split('\t'); // Parse experiment types

    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {
      if (_i19 == metaLineColumns.length - 1) {
        var trimmed = metaLineColumns[_i19].trim();

        experiments.push(trimmed);
      } else experiments.push(metaLineColumns[_i19]);

      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;

      if (groupedDataMap[fileName] === undefined) {
        groupedDataMap[fileName] = [];
      }

      groupedDataMap[fileName].push(experiments[_i19 - 1]);
    }

    visibleFiles[fileName] = true;
    var min = Number.MAX_VALUE;
    var max = Number.MIN_VALUE; // parse genomic data

    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {
      // EOF check
      if (lines[_i20].length === 0) {
        break;
      } // Split each line by tab and parse genomic data content


      var lineContent = lines[_i20].split('\t');

      var eleSymbol = lineContent[0]; // If current gene entry is not  in genomic data map create new map

      if (!(eleSymbol in parsedDataMap)) {
        parsedDataMap[eleSymbol] = {};
      } // Add each entry of genomic data


      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {
        if (_j7 == lineContent.length - 1) {
          lineContent[_j7] = lineContent[_j7].trim();
        }

        if (lineContent[_j7].match(intregex)) {
          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];
        } else {
          parsedDataMap = parsed;
          visibleDataMapByExp = visible;
          groupedDataMap = grouped;
          colorMap = colorm;
          visibleFiles = visiblef;
          fileTitle = fileN;
          fileDescription = fileD;
          version = "1.0";
          errorCallback();
          return "Error";
        }

        if (lineContent[_j7] > max) {
          max = lineContent[_j7];
        }

        if (lineContent[_j7] < min) {
          min = lineContent[_j7];
        }
      }
    }

    if (colors['min']) {
      var colorvalue = colors['min'];
      delete colors['min'];
      colors[min] = colorvalue;
    }

    if (colors['max']) {
      var colorvalue = colors['max'];
      delete colors['max'];
      colors[max] = colorvalue;
    }

    colorMap[fileName] = colors;
    var params = {
      fileName: fileName
    };
    this.showData();
    return params;
  };

  experimentalDataOverlay.getExperimentalData = function () {
    return {
      visibleDataMapByExp: visibleDataMapByExp,
      visibleFiles: visibleFiles,
      fileDescription: fileDescription,
      allVis: allVis,
      fileTitle: fileTitle,
      parsedDataMap: parsedDataMap
    };
  };

  return experimentalDataOverlay;
};

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "console-browserify");
/*
* File Utilities: To be used on read/write file operation
*/
var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;
var saveAs = libs.saveAs;

var textUtilities = __webpack_require__(/*! ./text-utilities */ "./src/utilities/text-utilities.js");

module.exports = function () {
  // Helper functions Start
  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript
  function b64toBlob(b64Data, contentType, sliceSize) {
    contentType = contentType || '';
    sliceSize = sliceSize || 512;
    var byteCharacters = atob(b64Data);
    var byteArrays = [];

    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      var slice = byteCharacters.slice(offset, offset + sliceSize);
      var byteNumbers = new Array(slice.length);

      for (var i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }

      var byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }

    var blob = new Blob(byteArrays, {
      type: contentType
    });
    return blob;
  }

  function loadTextDoc(fullFilePath) {
    if (window.XMLHttpRequest) {
      xhttp = new XMLHttpRequest();
    } else {
      xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }

    xhttp.overrideMimeType('application/text');
    xhttp.open("GET", fullFilePath, false);
    xhttp.send();
    return xhttp.responseText;
  }

  function loadXMLDoc(fullFilePath) {
    if (window.XMLHttpRequest) {
      xhttp = new XMLHttpRequest();
    } else {
      xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }

    xhttp.overrideMimeType('application/xml');
    xhttp.open("GET", fullFilePath, false);
    xhttp.send();
    return xhttp.responseXML;
  } // Should this be exposed or should this be moved to the helper functions section?


  function textToXmlObject(text) {
    if (window.ActiveXObject) {
      var doc = new ActiveXObject('Microsoft.XMLDOM');
      doc.async = 'false';
      doc.loadXML(text);
    } else {
      var parser = new DOMParser();
      var doc = parser.parseFromString(text, 'text/xml');
    }

    return doc;
  } // Helper functions End


  var sbgnmlToJson, jsonToSbgnml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml;
  var updateGraph;
  var options, cy;

  function fileUtilities(param) {
    sbgnmlToJson = param.sbgnmlToJsonConverter;
    nwtToJson = param.nwtToJsonConverter;
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    jsonToNwt = param.jsonToNwtConverter;
    jsonToSif = param.jsonToSifConverter;
    uiUtilities = param.uiUtilities;
    tdToJson = param.tdToJsonConverter;
    sifToJson = param.sifToJsonConverter;
    layoutToText = param.layoutToText;
    graphUtilities = param.graphUtilities;
    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);
    options = param.optionUtilities.getOptions();
    cy = param.sbgnCyInstance.getCy();
    sbgnmlToCd = param.sbgnmlToCdConverter;
    cdToSbgnml = param.cdToSbgnmlConverter;
    sbgnmlToSbml = param.sbgnmlToSbmlConverter;
    sbmlToSbgnml = param.sbmlToSbgnmlConverter;
  }

  fileUtilities.loadXMLDoc = loadXMLDoc;

  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {
    if (maxWidth || maxHeight) {
      var pngContent = cy.png({
        full: true,
        bg: bg,
        maxWidth: maxWidth,
        maxHeight: maxHeight
      });
    } else {
      var pngContent = cy.png({
        scale: scale || 3,
        full: true,
        bg: bg
      });
    } // this is to remove the beginning of the pngContent: data:img/png;base64,


    var b64data = pngContent.substr(pngContent.indexOf(",") + 1); // lower quality when response is empty

    if (!b64data || b64data === "") {
      pngContent = cy.png({
        maxWidth: 15000,
        maxHeight: 15000,
        full: true,
        bg: bg
      });
      b64data = pngContent.substr(pngContent.indexOf(",") + 1);
    }

    saveAs(b64toBlob(b64data, "image/png"), filename || "network.png");
  };

  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {
    if (maxWidth || maxHeight) {
      var jpgContent = cy.jpg({
        full: true,
        bg: bg,
        maxWidth: maxWidth,
        maxHeight: maxHeight,
        quality: quality
      });
    } else {
      var jpgContent = cy.jpg({
        scale: scale || 3,
        full: true,
        bg: bg,
        quality: quality
      });
    } // this is to remove the beginning of the pngContent: data:img/png;base64,


    var b64data = jpgContent.substr(jpgContent.indexOf(",") + 1); // lower quality when response is empty

    if (!b64data || b64data === "") {
      jpgContent = cy.jpg({
        maxWidth: 15000,
        maxHeight: 15000,
        full: true,
        bg: bg
      });
      b64data = jpgContent.substr(jpgContent.indexOf(",") + 1);
    }

    saveAs(b64toBlob(b64data, "image/jpg"), filename || "network.jpg");
  };

  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {
    if (maxWidth || maxHeight) {
      var svgContent = cy.svg({
        full: true,
        bg: bg,
        maxWidth: maxWidth,
        maxHeight: maxHeight
      });
    } else {
      var svgContent = cy.svg({
        scale: scale || 1,
        full: true,
        bg: bg
      });
    }

    saveAs(new Blob([svgContent], {
      type: "image/svg+xml;charset=utf-8"
    }), filename || "network.svg");
  };

  fileUtilities.loadSample = function (filename, folderpath, callback) {
    var file = (folderpath || 'sample-app/samples/') + filename;
    uiUtilities.startSpinner("load-spinner"); // Users may want to do customized things while a sample is being loaded
    // Trigger an event for this purpose and specify the 'filename' as an event parameter

    $(document).trigger("sbgnvizLoadSample", [filename, cy]); // Aliases for sbgnvizLoadSampleStart

    $(document).trigger("sbgnvizLoadSampleStart", [filename, cy]);
    var text = loadTextDoc(file);
    var matchResult = text.match("<renderInformation[^]*</renderInformation>");

    if (matchResult != null) {
      var renderInfoString = matchResult[0];
      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);
      var regex = /\s([\S]+)([\s]*)=/g;
      var result;
      var matches = [];

      while (result = regex.exec(renderInfoString)) {
        matches.push(result[0]);
      }

      ;
      matches.forEach(function (match) {
        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));
      });
      text = text.replace(renderInfoStringCopy, renderInfoString);
    }

    var xmlObject = textToXmlObject(text);
    setTimeout(function () {
      updateGraph(nwtToJson.convert(xmlObject));
      fileUtilities.collapseMarkedNodes();
      uiUtilities.endSpinner("load-spinner");
      $(document).trigger("sbgnvizLoadSampleEnd", [filename, cy]); // Trigger an event signaling that a sample is loaded

      if (typeof callback !== 'undefined') {
        callback();
      }
    }, 0);
  };

  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {
    var convert = function convert(text) {
      return sifToJson.convert(text);
    };

    var runLayout = function runLayout() {
      if (layoutBy) {
        if (typeof layoutBy === 'function') {
          layoutBy();
        } else {
          var layout = cy.layout(layoutBy); // for backward compatibility need to make this if check

          if (layout && layout.run) {
            layout.run();
          }
        }
      }

      cy.fit(cy.elements(":visible"), 20);
    };

    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);
  };

  fileUtilities.loadTDFile = function functionName(file, callback) {
    var convert = function convert(text) {
      return tdToJson.convert(text);
    };

    fileUtilities.loadFile(file, convert, undefined, callback);
  };

  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {
    var convert = function convert(text) {
      return sbgnmlToJson.convert(textToXmlObject(text));
    };

    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);
  };

  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {
    var convert = function convert(text) {
      return nwtToJson.convert(textToXmlObject(text), urlParams);
    };

    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);
  }; // collapse the nodes whose collapse data field is set


  fileUtilities.collapseMarkedNodes = function () {
    // collapse nodes
    var nodesToCollapse = cy.nodes("[collapse]");

    if (nodesToCollapse.length > 0) {
      cy.expandCollapse('get').collapse(nodesToCollapse, {
        layoutBy: null
      });
      nodesToCollapse.forEach(function (ele, i, eles) {
        ele.position(ele.data("positionBeforeSaving"));
      });
      nodesToCollapse.removeData("positionBeforeSaving");
    }
  };
  /*
    callback is a function remotely defined to add specific behavior that isn't implemented here.
    it is completely optional.
    signature: callback(textXml)
  */


  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4) {
    var self = this;
    uiUtilities.startSpinner("load-file-spinner");
    var textType = /text.*/;
    var reader = new FileReader();

    reader.onload = function (e) {
      var text = this.result;
      var matchResult = text.match("<renderInformation[^]*</renderInformation>");

      if (matchResult != null) {
        var imagesElementMatch = text.match("<listOfBackgroundImages[^]*</listOfBackgroundImages>");
        var imagesElement;

        if (imagesElementMatch != null) {
          imagesElement = imagesElementMatch[0];
        }

        var renderInfoString = matchResult[0];
        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);
        var regex = /\s([\S]+)([\s]*)=/g;
        var result;
        var matches = [];

        while (result = regex.exec(renderInfoString)) {
          matches.push(result[0]);
        }

        ;
        matches.forEach(function (match) {
          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));
        });
        text = text.replace(renderInfoStringCopy, renderInfoString);
        var imagesElementMatchDirty = text.match("<listOfBackgroundImages[^]*</listOfBackgroundImages>");

        if (imagesElementMatchDirty != null) {
          text = text.replace(imagesElementMatchDirty[0], imagesElement);
        }
      }

      setTimeout(function () {
        if (typeof callback1 !== 'undefined') callback1(text);
        var cyGraph;

        try {
          cyGraph = convertFcn(text); // Users may want to do customized things while an external file is being loaded
          // Trigger an event for this purpose and specify the 'filename' as an event parameter

          $(document).trigger("sbgnvizLoadFile", [file.name, cy]); // Aliases for sbgnvizLoadFileStart

          $(document).trigger("sbgnvizLoadFileStart", [file.name, cy]);
        } catch (err) {
          uiUtilities.endSpinner("load-file-spinner");
          console.log(err);
          if (typeof callback2 !== 'undefined') callback2();
          return;
        }

        updateGraph(cyGraph);

        if (typeof callback3 !== 'undefined') {
          callback3();
        }

        uiUtilities.endSpinner("load-file-spinner");
        $(document).trigger("sbgnvizLoadFileEnd", [file.name, cy]); // Trigger an event signaling that a file is loaded

        if (typeof callback4 !== 'undefined') {
          callback4();
        }
      }, 0);
    };

    reader.readAsText(file);
  };

  fileUtilities.loadSBGNMLText = function (textData, tileInfoBoxes, filename, cy, urlParams) {
    setTimeout(function () {
      updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);
      $(document).trigger("sbgnvizLoadFileEnd", [filename, cy]);
      uiUtilities.endSpinner("load-file-spinner");
    }, 0);
  }; // supported versions are either 0.2 or 0.3


  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);
    var blob = new Blob([sbgnmlText], {
      type: "text/plain;charset=utf-8;"
    });
    saveAs(blob, filename);
  }; // supported versions are either 0.2 or 0.3


  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);
    var blob = new Blob([sbgnmlText], {
      type: "text/plain;charset=utf-8;"
    });
    saveAs(blob, filename);
  };

  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {
    uiUtilities.startSpinner("load-spinner");
    var sbgnml = jsonToSbgnml.createSbgnml();
    this.convertSbgnmlToCD(sbgnml, function (data) {
      if (data == null) {
        errorCallback();
      } else {
        var blob = new Blob([data], {
          type: "text/plain;charset=utf-8;"
        });
        saveAs(blob, filename);
      }

      uiUtilities.endSpinner("load-spinner");
    });
  };

  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {
    var reader = new FileReader();

    reader.onload = function (e) {
      this.convertCDToSbgnml(e.target.result, function (data) {
        uiUtilities.endSpinner("load-spinner");

        if (data == null) {
          errorCallback();
        } else {
          successCallback(data);
        }
      });
    }.bind(this);

    uiUtilities.startSpinner("load-spinner");
    reader.readAsText(file);
  };

  fileUtilities.saveAsSbml = function (filename, errorCallback) {
    uiUtilities.startSpinner("load-spinner");
    var sbgnml = this.convertSbgn();
    this.convertSbgnmlToSbml(sbgnml, function (data) {
      if (!data.result) {
        errorCallback(sbgnml, data.error);
      } else if (data.message.indexOf("Internal server error") !== -1) {
        errorCallback(sbgnml, data.message);
      } else {
        var blob = new Blob([data.message], {
          type: "text/plain;charset=utf-8;"
        });
        saveAs(blob, filename);
      }

      uiUtilities.endSpinner("load-spinner");
    });
  };

  fileUtilities.loadSbml = function (file, successCallback, errorCallback) {
    var reader = new FileReader();

    reader.onload = function (e) {
      this.convertSbmlToSbgnml(e.target.result, function (data) {
        uiUtilities.endSpinner("load-spinner");

        if (data == null) {
          errorCallback();
        } else {
          successCallback(data);
        }
      });
    }.bind(this);

    uiUtilities.startSpinner("load-spinner");
    reader.readAsText(file);
  };

  fileUtilities.convertSbgn = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, "plain", renderInfo, mapProperties, nodes, edges);
    return sbgnmlText;
  };

  fileUtilities.exportLayoutData = function (filename, byName) {
    var layoutText = layoutToText.convert(byName);
    var blob = new Blob([layoutText], {
      type: "text/plain;charset=utf-8;"
    });
    saveAs(blob, filename);
  };

  fileUtilities.saveAsPlainSif = function (filename) {
    var text = jsonToSif.convert();
    var blob = new Blob([text], {
      type: "text/plain;charset=utf-8;"
    });
    saveAs(blob, filename);
  };

  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {
    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));
  };

  fileUtilities.convertSifTextToJson = function (sifText) {
    return sifToJson.convert(sifText);
  };

  fileUtilities.createJsonFromSBGN = function () {
    var sbgnmlText = jsonToSbgnml.createSbgnml();
    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));
  };

  fileUtilities.createJsonFromSif = function () {
    var sifText = jsonToSif.convert();
    return sifToJson.convert(sifText);
  };

  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {
    return sbgnmlToCd.convert(sbgnml, callback);
  };

  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {
    return sbgnmlToSbml.convert(sbgnml, callback);
  };

  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {
    return sbmlToSbgnml.convert(sbml, callback);
  };

  fileUtilities.convertCDToSbgnml = function (xml, callback) {
    return cdToSbgnml.convert(xml, callback);
  };

  return fileUtilities;
};

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * Common utilities for sbgnviz graphs
 */
var classes = __webpack_require__(/*! ./classes */ "./src/utilities/classes.js");

var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

module.exports = function () {
  var optionUtilities;
  var options, cy;

  function graphUtilities(param) {
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions();
    cy = param.sbgnCyInstance.getCy();
  } // TODO make these initial values user options instead of hardcoding them here


  graphUtilities.portsEnabled = true;
  graphUtilities.compoundSizesConsidered = true;

  graphUtilities.disablePorts = function () {
    graphUtilities.portsEnabled = false;
    cy.style().update();
  };

  graphUtilities.enablePorts = function () {
    graphUtilities.portsEnabled = true;
    cy.style().update();
  };

  graphUtilities.arePortsEnabled = function () {
    return graphUtilities.portsEnabled;
  };

  graphUtilities.considerCompoundSizes = function () {
    graphUtilities.compoundSizesConsidered = true;
    cy.style().update();
  };

  graphUtilities.omitCompoundSizes = function () {
    graphUtilities.compoundSizesConsidered = false;
    cy.style().update();
  };

  graphUtilities.areCompoundSizesConsidered = function () {
    return graphUtilities.compoundSizesConsidered == true;
  };

  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {
    var isLayoutRequired;

    if (layoutOptions === undefined) {
      isLayoutRequired = false;
    } else {
      isLayoutRequired = true;
    }

    $(document).trigger("updateGraphStart", cy); // Reset undo/redo stack and buttons when a new graph is loaded

    if (options.undoable) {
      cy.undoRedo().reset(); //    this.resetUndoRedoButtons();
    }

    cy.startBatch(); // clear data

    cy.remove('*');
    cy.add(cyGraph); //add position information to data for preset layout

    var positionMap = {};
    cy.nodes().forEach(function (node) {
      var xPos = node.data('bbox').x;
      var yPos = node.data('bbox').y;
      positionMap[node.data('id')] = {
        'x': xPos,
        'y': yPos
      }; // assign correct parents to info boxes

      var statesandinfos = node.data('statesandinfos');

      for (var j = 0; j < statesandinfos.length; j++) {
        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);
      }
    }); //this.refreshPaddings(); // Recalculates/refreshes the compound paddings

    cy.endBatch();

    if (isLayoutRequired) {
      var preferences = {};

      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {
        preferences.quality = "draft";
      }

      preferences.animate = false;
      preferences.randomize = true;
      preferences = $.extend({}, layoutOptions, preferences);
      var layout = cy.layout(preferences);
    } else {
      var layout = cy.layout({
        name: 'preset',
        positions: positionMap,
        fit: true,
        padding: 20
      });
    } // Check this for cytoscape.js backward compatibility


    if (layout && layout.run) {
      layout.run();
    }

    var performLayout = function performLayout() {
      cy.fit(cy.elements(":visible"), 20);
    }; // Update the style


    cy.style().update(); // Initilize the anchor points once the elements are created

    if (cy.edgeEditing && cy.edgeEditing('initialized')) {
      cy.edgeEditing('get').initAnchorPoints(cy.edges());
    }

    $(document).trigger("updateGraphEnd", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);
    if (callback) callback();
  };

  graphUtilities.calculatePaddings = function (paddingPercent) {
    //As default use the compound padding value
    if (!paddingPercent) {
      var compoundPadding = options.compoundPadding;
      paddingPercent = typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;
    }

    var nodes = cy.nodes();
    var total = 0;
    var numOfSimples = 0;

    for (var i = 0; i < nodes.length; i++) {
      var theNode = nodes[i];

      if (theNode.children() == null || theNode.children().length == 0) {
        total += Number(theNode.width());
        total += Number(theNode.height());
        numOfSimples++;
      }
    }

    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));

    if (calc_padding < 5) {
      calc_padding = 5;
    }

    return calc_padding;
  };

  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {
    // this.calculatedPaddings is not working here
    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out
    //graphUtilities.calculatedPaddings = this.calculatePaddings();
    var compoundPadding = options.compoundPadding;
    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings;
  };

  graphUtilities.getCompoundPaddings = function () {
    // Return calculated paddings in case of that data is invalid return 5
    var compoundPadding = options.compoundPadding;
    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings || 5;
  };

  return graphUtilities;
};

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "console-browserify");
module.exports = function () {
  var jsonToSbgnml, elementUtilities, cy;

  function jsonToNwt(param) {
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  function setToStr(set) {
    if (set) {
      return Object.keys(set).join(';');
    }

    return null;
  }

  var sifEdgePropHandlerMap = {
    'pcIDs': function pcIDs(edge) {
      return setToStr(edge.data('pcIDSet'));
    },
    'siteLocations': function siteLocations(edge) {
      return setToStr(edge.data('siteLocSet'));
    }
  };
  var sifNodePropHandlerMap = {
    'tooltip': function tooltip(node) {
      return node.data('tooltip');
    },
    'infoboxes': function infoboxes(node, obj) {
      var sifInfoboxPropHandlerMap = {
        'tooltip': function tooltip(infobox) {
          return infobox.tooltip;
        }
      };
      var infoboxes = node.data('statesandinfos');
      var glyphs = obj.glyph;
      infoboxes.forEach(function (infobox, i) {
        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {
          var val = sifInfoboxPropHandlerMap[propName](infobox);

          if (val) {
            glyphs[i][propName] = val;
          }
        });
      });
    }
  }; // objects consist of arcs or gylphs

  function extendObjectsData(objs, filterFcn, propHandlerMap) {
    if (!objs) {
      return;
    }

    objs.forEach(function (obj) {
      if (filterFcn(obj.$["class"])) {
        var ele = cy.getElementById(obj.$.id);
        Object.keys(propHandlerMap).forEach(function (propName) {
          // does not have to return a value, maybe a void function as well
          var val = propHandlerMap[propName](ele, obj);

          if (val) {
            obj[propName] = val;
          }
        });
      }
    });
  }

  function extendStylesData(toExtend, extendFrom) {
    if (!toExtend || !extendFrom) {
      return;
    }

    var styleNames = ['shapeName'];
    var styleMap = {};
    Object.keys(extendFrom).forEach(function (key) {
      styleNames.forEach(function (name) {
        var el = extendFrom[key];
        var props = el && el.properties;

        if (props && props[name]) {
          var val = props[name];
          var idList = el.idList;
          idList.forEach(function (id) {
            styleMap[id] = styleMap[id] || {};
            styleMap[id][name] = val;
          });
        }
      });
    });
    toExtend.forEach(function (style) {
      var idList = style.$.idList.split(' ');
      styleNames.forEach(function (name) {
        var val = null;
        idList.forEach(function (id) {
          var currVal = styleMap[id] && styleMap[id][name];

          if (currVal === undefined) {
            return;
          }

          if (val == null) {
            val = currVal;
          } else if (val !== currVal) {
            console.warn('Shape name of some glyphs defined multiple times in render information!');
          }
        });

        if (val !== null) {
          style.g.$[name] = val;
        }
      });
    });
  }

  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);

    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {
      var map = jsObj.map[0];
      var arcs = map.arc;
      var glyphs = map.glyph;
      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);
      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);
      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;
      var appStyles = renderInfo && renderInfo.styles;
      extendStylesData(jsObjStyles, appStyles);
    }

    return jsObj;
  };

  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);
    return jsonToSbgnml.buildString({
      sbgn: jsObj
    });
  };

  return jsonToNwt;
};

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "console-browserify");
var libsbgnjs = __webpack_require__(/*! libsbgn.js */ "libsbgn.js");

var renderExtension = libsbgnjs.render;
var annot = libsbgnjs.annot;

var pkgVersion = __webpack_require__(/*! ../../package.json */ "./package.json").version; // need info about sbgnviz to put in xml


var pkgName = __webpack_require__(/*! ../../package.json */ "./package.json").name;

var prettyprint = __webpack_require__(/*! pretty-data */ "pretty-data").pd;

var xml2js = __webpack_require__(/*! xml2js */ "xml2js");

var mapPropertiesBuilder = new xml2js.Builder({
  rootName: "mapProperties"
});
var compoundExtensionBuilder = new xml2js.Builder({
  rootName: "extraInfo"
});

var textUtilities = __webpack_require__(/*! ./text-utilities */ "./src/utilities/text-utilities.js");

module.exports = function () {
  var elementUtilities, graphUtilities, experimentalDataOverlay;
  var cy;
  /*
      takes renderInfo as an optional argument. It contains all the information needed to save
      the style and colors to the render extension. See newt/app-utilities getAllStyles()
      Structure: {
          background: the map background color,
          colors: {
            validXmlValue: color_id
            ...
          },
          styles: {
              styleKey1: {
                  idList: list of the nodes ids that have this style
                  properties: {
                      fontSize: ...
                      fill: ...
                      ...
                  }
              }
              styleKey2: ...
              ...
          }
      }
  */

  function jsonToSbgnml(param) {
    elementUtilities = param.elementUtilities;
    graphUtilities = param.graphUtilities;
    experimentalDataOverlay = param.experimentalDataOverlay;
    cy = param.sbgnCyInstance.getCy();
  }
  /*
   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.
   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.
   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.
   TODO implement 0.3 changes when submap support is fully there.
   */


  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var self = this;
    var mapID = textUtilities.getXMLValidId(filename);
    var hasExtension = false;
    var hasRenderExtension = false;
    var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;
    this.nodes = nodes || cy.nodes();
    this.edges = edges || cy.edges();
    var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(this.nodes);
    this.allCollapsedNodes = collapsedChildren.filter("node");
    this.allCollapsedEdges = collapsedChildren.filter("edge");

    if (typeof renderInfo !== 'undefined') {
      hasExtension = true;
      hasRenderExtension = true;
    }

    if (typeof version === 'undefined') {
      // default if not specified
      version = "0.3";
    } // check version validity


    if (version !== "0.2" && version !== "0.3" && version !== "plain" && version !== "plain3") {
      console.error("Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: " + version);
      return "Error";
    }

    var mapLanguage = elementUtilities.mapTypeToLanguage(mapType); //add headers

    xmlHeader = "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n";
    var versionNo;

    if (version === "plain") {
      versionNo = "0.2";
    } else if (version === "plain3") {
      versionNo = "0.3";
    } else {
      versionNo = version;
    } //var versionNo = (version === "plain") ? "0.2" : version;


    var sbgn = new libsbgnjs.Sbgn({
      xmlns: 'http://sbgn.org/libsbgn/' + versionNo
    });
    var map;

    if (version === "0.3" || version === "plain3") {
      var map = new libsbgnjs.Map({
        language: mapLanguage,
        id: mapID
      });
    } else if (version === "0.2" || version === "plain") {
      var map = new libsbgnjs.Map({
        language: mapLanguage
      });
    }

    if (hasExtension) {
      // extension is there
      var extension = new libsbgnjs.Extension();

      if (hasRenderExtension) {
        extension.add(self.getRenderExtensionSbgnml(renderInfo));
      }

      map.setExtension(extension);

      if (mapProperties) {
        delete mapProperties.experimentDescription;
        var xml = mapPropertiesBuilder.buildObject(mapProperties);
        map.extension.add(xml);
      }
    } else if (mapProperties) {
      map.setExtension(new libsbgnjs.Extension());
      map.extension.add(mapPropertiesBuilder.buildObject(mapProperties));
    } // get all glyphs


    var glyphList = []; // be careful that :visible is also used during recursive search of nodes
    // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.

    var self = this;
    this.nodes.each(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      if (jsonToSbgnml.childOfNone(ele, self.nodes)) glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version)); // returns potentially more than 1 glyph
    }); // add them to the map

    for (var i = 0; i < glyphList.length; i++) {
      if (version === "plain") glyphList[i].extension = null;
      map.addGlyph(glyphList[i]);
    } // get all arcs


    var edges = this.allCollapsedEdges.union(this.edges);
    edges.each(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      var arc = self.getArcSbgnml(ele, version);
      if (version === "plain") arc.extension = null;
      map.addArc(arc);
    });
    sbgn.addMap(map);
    return sbgn.buildJsObj();
  };

  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {
    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);
    return jsonToSbgnml.buildString({
      sbgn: jsObj
    });
  }; // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js


  jsonToSbgnml.buildString = function (obj) {
    var xmlString = new xml2js.Builder({
      headless: true,
      renderOpts: {
        pretty: false
      }
    }).buildObject(obj); // change naming convention from Camel Case (variableName) to Kebab case (variable-name)

    var matchResult = xmlString.match("<renderInformation[^]*</renderInformation>");

    if (matchResult != null) {
      var imagesElementMatch = xmlString.match("<listOfBackgroundImages[^]*</listOfBackgroundImages>");
      var imagesElement;

      if (imagesElementMatch != null) {
        imagesElement = imagesElementMatch[0];
      }

      var renderInfoString = matchResult[0];
      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);
      var regex = /\s([\S]+)([\s]*)=/g;
      var result;
      var matches = [];

      while (result = regex.exec(renderInfoString)) {
        matches.push(result[0]);
      }

      ;
      matches.forEach(function (match) {
        if (match != " idList=") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));
      });
      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);
      var imagesElementMatchDirty = xmlString.match("<listOfBackgroundImages[^]*</listOfBackgroundImages>");

      if (imagesElementMatchDirty != null) {
        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);
      }
    }
    /* 	dirty hack needed to solve the newline char encoding problem
    	xml2js doesn't encode \n as &#xA; we need to do it manually
    */


    var re = /<label text="((.|\n+)+?)"/gm;
    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {
      return '<label text="' + p1.replace(/\n/g, "&#xA;") + '"';
    });
    var xmlHeader = "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n";
    /*
      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.
      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.
      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported
      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.
    */

    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace("<sbgn \n  xmlns=\"http://sbgn.org/libsbgn", "<sbgn xmlns=\"http://sbgn.org/libsbgn");
    return xmlHeader + xmlbody;
  }; // see createSbgnml for info on the structure of renderInfo


  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {
    // initialize the main container
    var renderInformation = new renderExtension.RenderInformation({
      id: 'renderInformation',
      backgroundColor: renderInfo.background,
      programName: pkgName,
      programVersion: pkgVersion
    }); // populate list of colors

    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();

    for (var color in renderInfo.colors) {
      var colorDefinition = new renderExtension.ColorDefinition({
        id: renderInfo.colors[color],
        value: color
      });
      listOfColorDefinitions.addColorDefinition(colorDefinition);
    }

    renderInformation.setListOfColorDefinitions(listOfColorDefinitions); // populate list of background images

    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();

    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {
      for (var img in renderInfo.images) {
        var backgroundImage = new renderExtension.BackgroundImage({
          id: renderInfo.images[img],
          value: img
        });
        listOfBackgroundImages.addBackgroundImage(backgroundImage);
      }
    }

    renderInformation.setListOfBackgroundImages(listOfBackgroundImages); // populates styles

    var listOfStyles = new renderExtension.ListOfStyles();

    for (var key in renderInfo.styles) {
      var style = renderInfo.styles[key];
      var xmlStyle = new renderExtension.Style({
        id: textUtilities.getXMLValidId(key),
        idList: style.idList.join(' ')
      });
      var g = new renderExtension.RenderGroup({
        fontSize: style.properties.fontSize,
        fontFamily: style.properties.fontFamily,
        fontWeight: style.properties.fontWeight,
        fontStyle: style.properties.fontStyle,
        fontColor: style.properties.fontColor,
        fill: style.properties.fill,
        // fill color
        stroke: style.properties.stroke,
        // stroke color
        strokeWidth: style.properties.strokeWidth,
        backgroundImage: style.properties.backgroundImage,
        backgroundFit: style.properties.backgroundFit,
        backgroundPosX: style.properties.backgroundPosX,
        backgroundPosY: style.properties.backgroundPosY,
        backgroundWidth: style.properties.backgroundWidth,
        backgroundHeight: style.properties.backgroundHeight,
        backgroundImageOpacity: style.properties.backgroundImageOpacity,
        backgroundOpacity: style.properties.backgroundOpacity
      });
      xmlStyle.setRenderGroup(g);
      listOfStyles.addStyle(xmlStyle);
    }

    renderInformation.setListOfStyles(listOfStyles);
    return renderInformation;
  };

  jsonToSbgnml.getAnnotationExtension = function (cyElement) {
    var annotations = cyElement.data('annotations');
    var annotExt = new annot.Annotation();
    var rdfElement = new annot.RdfElement();

    for (var annotID in annotations) {
      var currentAnnot = annotations[annotID]; // check validity of annotation

      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {
        continue;
      } // check if uncontrolled vocabulary


      if (currentAnnot.selectedRelation == "sio:SIO_000223") {
        var obj = {};
        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;
        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);
      } else {
        var obj = {};
        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;
        rdfElement.addResource('#' + cyElement.data('id'), obj);
      }
    }

    annotExt.setRdfElement(rdfElement);
    return annotExt;
  };

  jsonToSbgnml.getGlyphSbgnml = function (node, version) {
    var self = this;
    var nodeClass = node._private.data["class"];
    var glyphList = [];

    if (nodeClass.startsWith('BA')) {
      nodeClass = "biological activity";
    }

    var glyph = new libsbgnjs.Glyph({
      id: node._private.data.id,
      class_: nodeClass
    }); // assign compartmentRef

    if (node.parent() && node.parent().length > 0) {
      if (nodeClass === "compartment") {
        var parent = node.parent();
        glyph.compartmentRef = node._private.data.parent;
      } else {
        var parent = node.parent()[0];
        if (parent._private.data["class"] == "compartment") glyph.compartmentRef = parent._private.data.id;
      }
    } // misc information


    var label = node._private.data.label;
    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({
      text: label
    })); //add clone information

    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType()); //add bbox information

    glyph.setBbox(this.addGlyphBbox(node));

    if (node.isParent() || node.data()["class"] == 'topology group' || node.data()["class"] == 'submap' || node.data()["class"] == 'complex' || node.data()["class"] == 'compartment') {
      var extraInfo = {};
      extraInfo.w = node.width();
      extraInfo.h = node.height();
      extraInfo.minW = Number(node.css("min-width").replace("px", ""));
      extraInfo.minH = Number(node.css("min-height").replace("px", ""));
      extraInfo.WLBias = Number(node.css("min-width-bias-left").replace("px", ""));
      extraInfo.WRBias = Number(node.css("min-width-bias-right").replace("px", ""));
      extraInfo.HTBias = Number(node.css("min-height-bias-top").replace("px", ""));
      extraInfo.HBBias = Number(node.css("min-height-bias-bottom").replace("px", ""));
      glyph.setExtension(new libsbgnjs.Extension());
      glyph.extension.add(compoundExtensionBuilder.buildObject(extraInfo));
    } //add port information


    var ports = node._private.data.ports;

    for (var i = 0; i < ports.length; i++) {
      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied for ports over the whole shape

      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50; // Divide the node sizes by the ratio because that sizes includes ports as well

      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;
      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;
      glyph.addPort(new libsbgnjs.Port({
        id: ports[i].id,
        x: x,
        y: y
      }));
    } //add state and info box information


    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {
      var boxGlyph = node._private.data.statesandinfos[i];
      var statesandinfosId = boxGlyph.id;

      if (boxGlyph.clazz === "state variable") {
        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));
      } else if (boxGlyph.clazz === "unit of information") {
        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));
      }
    } // check for annotations


    if (version !== "plain" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {
      var extension = self.getOrCreateExtension(glyph);
      var annotExt = self.getAnnotationExtension(node);
      extension.add(annotExt);
    } // add glyph members that are not state variables or unit of info: subunits


    if (nodeClass === "complex" || nodeClass === "complex multimer" || nodeClass === "submap" || nodeClass === "topology group") {
      var children = node.children();
      children = children.union(this.allCollapsedNodes);

      if (node.data('collapsedChildren')) {
        var collapsedChildren = node.data('collapsedChildren');
        children = children.union(collapsedChildren);
      }

      children = children.filter("[parent = '" + node.id() + "']");
      children.each(function (ele, i) {
        if (typeof ele === "number") {
          ele = i;
        }

        var glyphMemberList = self.getGlyphSbgnml(ele, version);

        for (var i = 0; i < glyphMemberList.length; i++) {
          glyph.addGlyphMember(glyphMemberList[i]);
        }
      });
    }

    var sbgnvizExtString = "";
    var hasNewtExt = false; // add info for collapsed nodes

    if (node.data('collapsedChildren')) {
      sbgnvizExtString += "<collapsed/>";
      sbgnvizExtString += "<positionBeforeSaving x='" + node.position().x + "' y='" + node.position().y + "'/>";
      hasNewtExt = true;
    } // add info for hidden nodes


    if (node.hidden()) {
      sbgnvizExtString += "<hidden/>";
      hasNewtExt = true;
    } // add info for nodes which has hidden neighbour


    if (node.data("thickBorder")) {
      sbgnvizExtString += "<hasHiddenNeighbour/>";
      hasNewtExt = true;
    } // add string to a new extension for this glyph


    if (hasNewtExt) {
      var extension = self.getOrCreateExtension(glyph);
      extension.add("<sbgnviz>" + sbgnvizExtString + "</sbgnviz>");
    } // current glyph is done


    glyphList.push(glyph); // keep going with all the included glyphs

    if (nodeClass === "compartment") {
      var children = node.children();
      children = children.union(this.allCollapsedNodes);
      children = children.filter("[parent = '" + node.id() + "']");
      children.each(function (ele, i) {
        if (typeof ele === "number") {
          ele = i;
        }

        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version));
      });
    }

    return glyphList;
  }; // element: a libsbgn.js glyph or edge object


  jsonToSbgnml.getOrCreateExtension = function (element) {
    var extension;

    if (element.extension) {
      // an extension is already there for this element
      extension = element.extension;
    } else {
      extension = new libsbgnjs.Extension();
      element.setExtension(extension);
    }

    return extension;
  };

  jsonToSbgnml.getArcSbgnml = function (edge, version) {
    var self = this; //Temporary hack to resolve "undefined" arc source and targets

    var arcTarget = edge._private.data.porttarget;
    var arcSource = edge._private.data.portsource;
    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;
    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;
    var arcId = edge._private.data.id;
    var arc = new libsbgnjs.Arc({
      id: arcId,
      source: arcSource,
      target: arcTarget,
      class_: edge._private.data["class"]
    });
    arc.setStart(new libsbgnjs.StartType({
      x: edge._private.rscratch.startX,
      y: edge._private.rscratch.startY
    })); // Export anchor points if edgeEditingExtension is registered

    if (cy.edgeEditing && cy.edgeEditing('initialized')) {
      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);

      if (typeof segpts !== 'undefined') {
        if (segpts.length > 0) {
          for (var i = 0; segpts && i < segpts.length; i = i + 2) {
            var anchorX = segpts[i];
            var anchorY = segpts[i + 1];
            arc.addNext(new libsbgnjs.NextType({
              x: anchorX,
              y: anchorY
            }));
          }
        }
      }
    }

    arc.setEnd(new libsbgnjs.EndType({
      x: edge._private.rscratch.endX,
      y: edge._private.rscratch.endY
    }));
    var cardinality = edge._private.data.cardinality;

    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {
      var edgebBox = edge.boundingBox({
        includeLabels: true,
        includeNodes: false,
        includeEdges: false,
        includeOverlays: false
      });
      arc.addGlyph(new libsbgnjs.Glyph({
        id: arc.id + '_card',
        class_: 'stoichiometry',
        label: new libsbgnjs.Label({
          text: cardinality
        }),
        bbox: new libsbgnjs.Bbox({
          x: edgebBox.x1,
          y: edgebBox.y1,
          w: edgebBox.w,
          h: edgebBox.h
        }) // dummy bbox, needed for format compliance

      }));
    } // check for annotations


    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {
      var extension = self.getOrCreateExtension(arc);
      var annotExt = this.getAnnotationExtension(edge);
      extension.add(annotExt);
    } // add info for hidden edges


    if (edge.hidden()) {
      var extension = self.getOrCreateExtension(arc);
      extension.add("<sbgnviz><hidden/></sbgnviz>");
    } // add info about edge type
    // since curve style is not standard we shouldn't have it for either version


    if (edge.css('curve-style') && version !== "plain" && version !== "plain3") {
      var extension = self.getOrCreateExtension(arc);
      extension.add("<curveStyle>" + edge.css('curve-style') + "</curveStyle>");
    }

    if (edge.data('sif-meta') && version !== "plain" && version !== "plain3") {
      var extension = self.getOrCreateExtension(arc);
      extension.add("<sifMetaEdge>true</sifMetaEdge>");
    }

    return arc;
  };

  jsonToSbgnml.addGlyphBbox = function (node) {
    var padding = node.padding();
    var borderWidth = Number(node.css("border-width").replace("px", ""));

    var _class = node.data('class');

    var width = node.outerWidth() - borderWidth;
    var height = node.outerHeight() - borderWidth; // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.
    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.

    if (elementUtilities.canHavePorts(_class)) {
      if (node.data('ports').length === 2) {
        // We assume that the ports are symmetric to the node center so using just one of the ports is enough
        var port = node.data('ports')[0];
        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports

        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports

        width /= ratio;
        height /= ratio;
      }
    }

    var x = node.position().x - width / 2;
    var y = node.position().y - height / 2; //var x =node._private.position.x - width/2 - padding;    
    //var y = node._private.position.y - height/2 - padding;
    //var x = node._private.position.x - width/2;
    //var y = node._private.position.y - height/2;

    return new libsbgnjs.Bbox({
      x: x,
      y: y,
      w: width,
      h: height
    });
  };

  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {
    boxBbox = boxGlyph.bbox;
    var borderWidth = node.data()['border-width'];
    var padding = node.padding();
    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);
    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2); //var x = boxBbox.x / 100 * node.width();
    //var y = boxBbox.y / 100 * node.height();
    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);
    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);

    return new libsbgnjs.Bbox({
      x: x,
      y: y,
      w: boxBbox.w,
      h: boxBbox.h
    });
  };

  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {
    var glyph = new libsbgnjs.Glyph({
      id: id,
      class_: 'state variable'
    });
    var state = new libsbgnjs.StateType();
    if (typeof node.state.value != 'undefined') state.value = node.state.value;
    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;
    glyph.setState(state);
    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));
    return glyph;
  };

  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {
    var glyph = new libsbgnjs.Glyph({
      id: id,
      class_: 'unit of information'
    });
    var label = new libsbgnjs.Label();
    if (typeof node.label.text != 'undefined') label.text = node.label.text;
    glyph.setLabel(label);
    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node)); // assign correct entity tag for AF case

    var entityName = null;

    switch (mainGlyph._private.data["class"]) {
      case 'BA unspecified entity':
        entityName = "unspecified entity";
        break;

      case 'BA simple chemical':
        entityName = "simple chemical";
        break;

      case 'BA macromolecule':
        entityName = "macromolecule";
        break;

      case 'BA nucleic acid feature':
        entityName = "nucleic acid feature";
        break;

      case 'BA perturbing agent':
        entityName = "perturbation";
        break;

      case 'BA complex':
        entityName = "complex";
        break;
    } // entity tag aren't always there, only for AF
    // but we still need to keep this information for unknown map type


    if (entityName) {
      glyph.setEntity(new libsbgnjs.EntityType({
        name: entityName
      }));
    }

    return glyph;
  };

  jsonToSbgnml.childOfNone = function (ele, nodes) {
    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;
  };

  return jsonToSbgnml;
};

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

module.exports = function () {
  var elementUtilities, cy;

  function jsonToSif(param) {
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  function isValidEnd(node) {
    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';
  }

  jsonToSif.convert = function () {
    var lines = [];
    var edges = cy.edges().filter(function (edge) {
      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());
    });
    var nodes = cy.nodes().filter(function (node) {
      return elementUtilities.isSIFNode(node);
    });
    nodes = nodes.not(edges.connectedNodes());

    var setToStr = function setToStr(set) {
      if (!set) {
        return '';
      }

      return Object.keys(set).join(';');
    };

    var getLabel = function getLabel(node) {
      return node.data('label');
    };

    var isValidLabel = function isValidLabel(label) {
      return !!label;
    };

    edges.forEach(function (edge) {
      var srcNames, tgtNames;

      var getNames = function getNames(node) {
        var names;

        if (node.isParent()) {
          names = node.children().map(getLabel);
        } else {
          names = [getLabel(node)];
        }

        return names && names.filter(isValidLabel);
      };

      var srcNames = getNames(edge.source());
      var tgtNames = getNames(edge.target());

      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {
        return;
      }

      var type = edge.data('class');
      var pcIDSet = edge.data('pcIDSet');
      var siteLocSet = edge.data('siteLocSet');
      var pcIDs = setToStr(pcIDSet);
      var siteLocations = setToStr(siteLocSet);
      srcNames.forEach(function (srcName) {
        tgtNames.forEach(function (tgtName) {
          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\t');
          lines.push(line);
        });
      });
    });
    nodes.forEach(function (node) {
      var label = getLabel(node);

      if (label) {
        lines.push(label);
      }
    });
    var text = lines.join('\n');
    return text;
  };

  return jsonToSif;
};

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * Listen document for keyboard inputs and exports the utilities that it makes use of
 */
var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

module.exports = function () {
  function keyboardInputUtilities(param) {
    // Listen to events on network container
    $(document).on('keydown', '.integer-input', function (e) {
      var value = $(this).attr('value');
      return keyboardInputUtilities.isIntegerFieldInput(value, e);
    });
    $(document).on('keydown', '.float-input', function (e) {
      var value = $(this).attr('value');
      return keyboardInputUtilities.isFloatFieldInput(value, e);
    });
    $(document).on('change', '.integer-input,.float-input', function (e) {
      var min = $(this).attr('min');
      var max = $(this).attr('max');
      var value = parseFloat($(this).val());

      if (min != null) {
        min = parseFloat(min);
      }

      if (max != null) {
        max = parseFloat(max);
      }

      if (min != null && value < min) {
        value = min;
      } else if (max != null && value > max) {
        value = max;
      }

      if (isNaN(value)) {
        if (min != null) {
          value = min;
        } else if (max != null) {
          value = max;
        } else {
          value = 0;
        }
      }

      $(this).val("" + value);
    });
  }

  keyboardInputUtilities.isNumberKey = function (e) {
    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;
  };

  keyboardInputUtilities.isDotKey = function (e) {
    return e.keyCode === 190;
  };

  keyboardInputUtilities.isMinusSignKey = function (e) {
    return e.keyCode === 109 || e.keyCode === 189;
  };

  keyboardInputUtilities.isLeftKey = function (e) {
    return e.keyCode === 37;
  };

  keyboardInputUtilities.isRightKey = function (e) {
    return e.keyCode === 39;
  };

  keyboardInputUtilities.isBackspaceKey = function (e) {
    return e.keyCode === 8;
  };

  keyboardInputUtilities.isTabKey = function (e) {
    return e.keyCode === 9;
  };

  keyboardInputUtilities.isEnterKey = function (e) {
    return e.keyCode === 13;
  };

  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {
    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);
  };

  keyboardInputUtilities.isFloatFieldInput = function (value, e) {
    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);
  };

  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {
    return e.ctrlKey || e.metaKey;
  };

  return keyboardInputUtilities;
};

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ "./src/utilities/tab-delimeted-parser.js");

module.exports = function () {
  var cy, mainUtilities;

  function layoutLoader(param) {
    cy = param.sbgnCyInstance.getCy();
    mainUtilities = param.mainUtilities;
  }

  layoutLoader.load = function (layoutText, byName) {
    var lines = tdParser.getLinesArray(layoutText);
    var posMap = {};
    lines.forEach(function (line) {
      var tabs = tdParser.getTabsArray(line);
      var nodeId;

      if (byName) {
        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);

        if (matchingNodes.length === 0) {
          return;
        } // ideally there is only one matching node
        // use the first one in any case


        nodeId = matchingNodes.id();
      } else {
        nodeId = tabs[0];
      }

      var posX = parseFloat(tabs[1]);
      var posY = parseFloat(tabs[2]);
      posMap[nodeId] = {
        x: posX,
        y: posY
      };
    });
    var options = {
      name: 'preset',
      positions: posMap,
      fit: false
    };
    mainUtilities.performLayout(options);
  };

  layoutLoader.getNodesByName = function (name) {
    return cy.nodes().filter('[label="' + name + '"]');
  };

  return layoutLoader;
};

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

module.exports = function () {
  var cy;

  function layoutToText(param) {
    cy = param.sbgnCyInstance.getCy();
  }

  layoutToText.convert = function (byName) {
    var nodes = cy.nodes();
    var lines = [];
    nodes.map(function (node) {
      var idOrName = byName ? node.data('label') : node.id();
      var posX = node.position('x');
      var posY = node.position('y');
      var line = [idOrName, posX, posY].join('\t');
      lines.push(line);
    });
    var text = lines.join('\n');
    return text;
  };

  return layoutToText;
};

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

/* 
 * Utility file to get and set the libraries to which sbgnviz is dependent from any file.
 */
var libUtilities = function libUtilities() {};

libUtilities.setLibs = function (libs) {
  this.libs = libs;
};

libUtilities.getLibs = function () {
  return this.libs;
};

module.exports = libUtilities;

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "console-browserify");
/*
 * These are the main utilities to be directly utilized by the user interactions.
 * Idealy, this file is just required by index.js
 */
var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

module.exports = function () {
  var elementUtilities, jsonToSbgnml, sbgnmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;
  var cy, options;

  function mainUtilities(param) {
    elementUtilities = param.elementUtilities;
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    jsonToNwt = param.jsonToNwtConverter;
    sbgnmlToJson = param.sbgnmlToJsonConverter;
    nwtToJson = param.nwtToJsonConverter;
    tdToJson = param.tdToJsonConverter;
    sifToJson = param.sifToJsonConverter;
    optionUtilities = param.optionUtilities;
    graphUtilities = param.graphUtilities;
    cy = param.sbgnCyInstance.getCy();
    layoutLoader = param.layoutLoader;
    layoutToText = param.layoutToText;
    options = optionUtilities.getOptions();
  }

  mainUtilities.beforePerformLayout = function () {
    var parents = cy.nodes(':parent');
    var edges = cy.edges();
    cy.startBatch(); // graphUtilities.disablePorts();
    // TODO do this by using extension API
    // removes all bendpoints for all edges in cytoscape instance

    for (var i = 0; i < edges.length; i++) {
      var edge = edges[i];
      edge.removeClass('edgebendediting-hasbendpoints');
      edge.removeClass('edgecontrolediting-hascontrolpoints');
      edge.removeClass('edgebendediting-hasmultiplebendpoints');
      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');
      edge.data('cyedgebendeditingDistances', []);
      edge.data('cyedgebendeditingWeights', []);
      edge.data('cyedgecontroleditingDistances', []);
      edge.data('cyedgecontroleditingWeights', []);
    }

    parents.removeData('minWidth');
    parents.removeData('minHeight');
    parents.removeData('minWidthBiasLeft');
    parents.removeData('minWidthBiasRight');
    parents.removeData('minHeightBiasTop');
    parents.removeData('minHeightBiasBottom');
    cy.endBatch();
    if (parents.length > 0) cy.style().update();
  }; // Expand given nodes. Requires expandCollapse extension and considers undoable option.


  mainUtilities.expandNodes = function (nodes) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');
    var nodesToExpand = expandCollapse.expandableNodes(nodes);

    if (nodesToExpand.length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("expand", {
        nodes: nodesToExpand
      });
    } else {
      expandCollapse.expand(nodes);
    }
  }; // Collapse given nodes. Requires expandCollapse extension and considers undoable option.


  mainUtilities.collapseNodes = function (nodes) {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');

    if (expandCollapse.collapsibleNodes(nodes).length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("collapse", {
        nodes: nodes
      });
    } else {
      expandCollapse.collapse(nodes);
    }
  }; // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.


  mainUtilities.collapseComplexes = function () {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');
    var complexes = cy.nodes("[class^='complex']");

    if (expandCollapse.collapsibleNodes(complexes).length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("collapseRecursively", {
        nodes: complexes
      });
    } else {
      expandCollapse.collapseRecursively(complexes);
    }
  }; // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.


  mainUtilities.expandComplexes = function () {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');
    var nodes = expandCollapse.expandableNodes(cy.nodes().filter("[class^='complex']"));

    if (nodes.length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("expandRecursively", {
        nodes: nodes
      });
    } else {
      expandCollapse.expandRecursively(nodes);
    }
  }; // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.


  mainUtilities.collapseAll = function () {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');
    var nodes = cy.nodes(':visible');

    if (expandCollapse.collapsibleNodes(nodes).length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("collapseRecursively", {
        nodes: nodes
      });
    } else {
      expandCollapse.collapseRecursively(nodes);
    }
  }; // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.


  mainUtilities.expandAll = function () {
    if (elementUtilities.isGraphTopologyLocked()) {
      return;
    } // Get expandCollapse api


    var expandCollapse = cy.expandCollapse('get');
    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));

    if (nodes.length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("expandRecursively", {
        nodes: nodes
      });
    } else {
      expandCollapse.expandRecursively(nodes);
    }
  }; // Increase border width to show nodes with hidden neighbors


  mainUtilities.thickenBorder = function (eles) {
    eles.forEach(function (ele) {
      var defaultBorderWidth = Number(ele.data("border-width"));
      ele.data("border-width", defaultBorderWidth + 2);
    });
    eles.data("thickBorder", true);
    return eles;
  }; // Decrease border width when hidden neighbors of the nodes become visible


  mainUtilities.thinBorder = function (eles) {
    eles.forEach(function (ele) {
      var defaultBorderWidth = Number(ele.data("border-width"));
      ele.data("border-width", defaultBorderWidth - 2);
    });
    eles.removeData("thickBorder");
    return eles;
  };

  mainUtilities.hideElesSimple = function (eles) {
    var viewUtilities = cy.viewUtilities('get');

    if (eles.length === 0) {
      return;
    }

    if (options.undoable) {
      var ur = cy.undoRedo();
      ur.action("thickenBorder", mainUtilities.thickenBorder, mainUtilities.thinBorder);
      ur.action("thinBorder", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching

      var actions = [];
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes().intersection(eles);
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "hide",
        param: eles
      });
      nodesWithHiddenNeighbor = eles.neighborhood(":visible").nodes().difference(eles).difference(cy.nodes("[thickBorder]"));
      actions.push({
        name: "thickenBorder",
        param: nodesWithHiddenNeighbor
      });
      cy.undoRedo()["do"]("batch", actions);
    } else {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thinBorder(nodesWithHiddenNeighbor);
      viewUtilities.hide(eles);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);
    }
  }; // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.
  // Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.hideNodesSmart = function (_nodes) {
    // If this function is being called we can assume that view utilities extension is on use
    var viewUtilities = cy.viewUtilities('get');

    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    var allNodes = cy.nodes(":visible");
    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);
    var nodesToHide = allNodes.not(nodesToShow);

    if (nodesToHide.length === 0) {
      return;
    }

    if (options.undoable) {
      var ur = cy.undoRedo();
      ur.action("thickenBorder", mainUtilities.thickenBorder, mainUtilities.thinBorder);
      ur.action("thinBorder", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching

      var actions = [];
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes().intersection(nodesToHide);
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "hide",
        param: nodesToHide
      });
      nodesWithHiddenNeighbor = nodesToHide.neighborhood(":visible").nodes().difference(nodesToHide).difference(cy.nodes("[thickBorder]"));
      actions.push({
        name: "thickenBorder",
        param: nodesWithHiddenNeighbor
      });
      cy.undoRedo()["do"]("batch", actions);
    } else {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thinBorder(nodesWithHiddenNeighbor);
      viewUtilities.hide(nodesToHide);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);
    }
  }; // Extends the given nodes list in a smart way to leave the map intact.
  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.showNodesSmart = function (_nodes) {
    // If this function is being called we can assume that view utilities extension is on use
    var viewUtilities = cy.viewUtilities('get');

    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    var allNodes = cy.elements();
    var nodesToShow = elementUtilities.extendNodeList(nodes);
    var nodesToHide = allNodes.not(nodesToShow);

    if (nodesToHide.length === 0) {
      return;
    }

    if (options.undoable) {
      var ur = cy.undoRedo();
      ur.action("thickenBorder", mainUtilities.thickenBorder, mainUtilities.thinBorder);
      ur.action("thinBorder", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching

      var actions = [];
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "hide",
        param: nodesToHide
      });
      nodesWithHiddenNeighbor = nodesToHide.neighborhood(":visible").nodes().difference(nodesToHide);
      actions.push({
        name: "thickenBorder",
        param: nodesWithHiddenNeighbor
      });
      cy.undoRedo()["do"]("batch", actions);
    } else {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thinBorder(nodesWithHiddenNeighbor);
      viewUtilities.hide(nodesToHide);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);
    }
  }; // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.showEles = function (eles) {
    // If this function is being called we can assume that view utilities extension is on use
    var viewUtilities = cy.viewUtilities('get');
    var hiddenEles = eles.filter(':hidden');

    if (hiddenEles.length === 0) {
      return;
    }

    if (options.undoable) {
      var ur = cy.undoRedo();
      ur.action("thickenBorder", mainUtilities.thickenBorder, mainUtilities.thinBorder);
      ur.action("thinBorder", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching

      var actions = [];
      var nodesToThinBorder = hiddenEles.neighborhood(":visible").nodes("[thickBorder]").difference(cy.edges(":hidden").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());
      actions.push({
        name: "thinBorder",
        param: nodesToThinBorder
      });
      actions.push({
        name: "show",
        param: hiddenEles
      });
      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(":hidden").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());
      actions.push({
        name: "thickenBorder",
        param: nodesToThickenBorder
      });
      cy.undoRedo()["do"]("batch", actions);
    } else {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thinBorder(nodesWithHiddenNeighbor);
      viewUtilities.show(eles);
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);
    }
  }; // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.showAll = function () {
    // If this function is being called we can assume that view utilities extension is on use
    var viewUtilities = cy.viewUtilities('get');

    if (cy.elements().length === cy.elements(':visible').length) {
      return;
    }

    if (options.undoable) {
      var ur = cy.undoRedo();
      ur.action("thickenBorder", mainUtilities.thickenBorder, mainUtilities.thinBorder);
      ur.action("thinBorder", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching

      var actions = [];
      var nodesWithHiddenNeighbor = cy.nodes("[thickBorder]");
      actions.push({
        name: "thinBorder",
        param: nodesWithHiddenNeighbor
      });
      actions.push({
        name: "show",
        param: cy.elements()
      });
      cy.undoRedo()["do"]("batch", actions);
    } else {
      var nodesWithHiddenNeighbor = cy.edges(":hidden").connectedNodes(':visible');
      mainUtilities.thinBorder(nodesWithHiddenNeighbor);
      viewUtilities.show(cy.elements());
    }
  }; // Removes the given elements in a simple way. Considers 'undoable' option.


  mainUtilities.deleteElesSimple = function (eles) {
    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("deleteElesSimple", {
        eles: eles
      });
    } else {
      eles.remove();
    }
  }; // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.
  // Considers 'undoable' option.


  mainUtilities.deleteNodesSmart = function (_nodes) {
    var nodes = _nodes.nodes();

    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]("deleteNodesSmart", {
        firstTime: true,
        eles: nodes
      });
    } else {
      elementUtilities.deleteNodesSmart(nodes);
    }
  };

  function isNeed2Highligth(eles2highligth) {
    if (eles2highligth.length === 0) {
      return false;
    }

    var viewUtilities = cy.viewUtilities('get');
    var highlightClass = viewUtilities.getAllHighlightClasses()[0];
    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');

    if (highlightedEles.contains(eles2highligth)) {
      return false;
    }

    return true;
  } // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.highlightSelected = function (_eles) {
    var elesToHighlight = _eles;

    if (!isNeed2Highligth(elesToHighlight)) {
      return;
    } // If this function is being called we can assume that view utilities extension is on use


    var viewUtilities = cy.viewUtilities('get');

    if (options.undoable) {
      cy.undoRedo()["do"]('highlight', {
        eles: elesToHighlight,
        idx: 0
      });
    } else {
      viewUtilities.highlight(elesToHighlight);
    }

    cy.elements().unselect();
  }; // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.highlightNeighbours = function (_nodes) {
    // If this function is being called we can assume that view utilities extension is on use
    var viewUtilities = cy.viewUtilities('get');

    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);

    if (!isNeed2Highligth(elesToHighlight)) {
      return;
    }

    if (options.undoable) {
      cy.undoRedo()["do"]('highlight', {
        eles: elesToHighlight,
        idx: 0
      });
    } else {
      viewUtilities.highlight(elesToHighlight);
    }

    cy.elements().unselect();
  }; // Finds the elements whose label includes the given label and highlights processes of those elements.
  // Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.searchByLabel = function (label) {
    if (label.length == 0) {
      return;
    }

    var nodesToHighlight = cy.nodes(":visible").filter(function (ele, i) {
      if (typeof ele === "number") {
        ele = i;
      }

      if (ele.data("label") && ele.data("label").toLowerCase().indexOf(label) >= 0) {
        return true;
      }

      return false;
    });

    if (nodesToHighlight.length == 0) {
      return;
    } // If this function is being called we can assume that view utilities extension is on use


    var viewUtilities = cy.viewUtilities('get'); // Use this line for smart search
    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);

    if (options.undoable) {
      cy.undoRedo()["do"]('highlight', {
        eles: nodesToHighlight,
        idx: 0
      });
    } else {
      viewUtilities.highlight(nodesToHighlight);
    }

    cy.elements().unselect();
  }; // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.highlightProcesses = function (_nodes) {
    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes


    var elesToHighlight = elementUtilities.extendNodeList(nodes);

    if (!isNeed2Highligth(elesToHighlight)) {
      return;
    } // If this function is being called we can assume that view utilities extension is on use


    var viewUtilities = cy.viewUtilities('get');

    if (options.undoable) {
      cy.undoRedo()["do"]('highlight', {
        eles: elesToHighlight,
        idx: 0
      });
    } else {
      viewUtilities.highlight(elesToHighlight);
    }

    cy.elements().unselect();
  }; // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.


  mainUtilities.removeHighlights = function () {
    if (elementUtilities.noneIsNotHighlighted()) {
      return;
    } // If this function is being called we can assume that view utilities extension is on use


    var viewUtilities = cy.viewUtilities('get');

    if (options.undoable) {
      cy.undoRedo()["do"]("removeHighlights");
    } else {
      viewUtilities.removeHighlights();
    }

    cy.style().update();
  };

  mainUtilities.loadLayoutData = function (layoutText, byName) {
    layoutLoader.load(layoutText, byName);
  };

  mainUtilities.getLayoutText = function (byName) {
    layoutToText.convert(byName);
  }; // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter
  // to a truthy value you can force an undable layout operation independant of 'undoable' option.


  mainUtilities.performLayout = function (layoutOptions, notUndoable) {
    if (!options.undoable || notUndoable) {
      // 'notUndoable' flag can be used to have composite actions in undo/redo stack
      // Things to do before performing layout
      mainUtilities.beforePerformLayout();
      var layout = cy.elements().filter(':visible').layout(layoutOptions); // Check this for cytoscape.js backward compatibility

      if (layout && layout.run) {
        layout.run();
      }
    } else {
      cy.undoRedo()["do"]("layout", {
        options: layoutOptions,
        eles: cy.elements().filter(':visible')
      });
    }
  }; // Creates an sbgnml file content from the exising graph and returns it.


  mainUtilities.createSbgnml = function () {
    return jsonToSbgnml.createSbgnml();
  };

  mainUtilities.createNwt = function () {
    return jsonToNwt.createSbgnml();
  }; // Converts given sbgnml data to a json object in a special format
  // (http://js.cytoscape.org/#notation/elements-json) and returns it.


  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {
    return sbgnmlToJson.convert(data, urlParams);
  };

  mainUtilities.convertNwtToJson = function (data) {
    return nwtToJson.convert(data);
  }; // Create the qtip contents of the given node and returns it.


  mainUtilities.getQtipContent = function (node) {
    return elementUtilities.getQtipContent(node);
  }; // Change option


  mainUtilities.setShowComplexName = function (showComplexName) {
    options.showComplexName = showComplexName; // make change active by triggering data which will trigger style update

    cy.nodes('[class^="complex"]').forEach(function (ele) {
      ele.trigger("data");
    });
  };
  /*
   * Sets the ordering of the given nodes.
   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.
   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is
   * used to set the distance between the node center and the ports. The default port distance is 60.
   * Considers undoable option.
   */


  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {
    if (nodes.length === 0) {
      return;
    }

    if (!options.undoable) {
      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);
    } else {
      var param = {
        nodes: nodes,
        ordering: ordering,
        portDistance: portDistance
      };
      cy.undoRedo()["do"]("setPortsOrdering", param);
    }

    cy.style().update();
  };
  /**
   * Get map properties from SBGNML file
   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event
   * return: map properties as object
   */


  mainUtilities.getMapProperties = function () {
    if (elementUtilities.fileFormat !== undefined) {
      if (elementUtilities.fileFormat == 'sbgnml') return sbgnmlToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else {
        console.log("File format mismatched!");
        return;
      }
    } else {
      console.log("File format is not defined!");
      return;
    }
  };

  mainUtilities.doValidation = function (file) {
    return sbgnmlToJson.doValidation(file);
  };

  mainUtilities.setCompoundPadding = function (newPaddingValue) {
    options.compoundPadding = newPaddingValue;
    optionUtilities.extendOptions(options);
  };

  mainUtilities.getCompoundPadding = function () {
    return options.compoundPadding;
  };

  return mainUtilities;
};

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

module.exports = function () {
  var sbgnmlToJson, elementUtilities;

  function nwtToJson(param) {
    sbgnmlToJson = param.sbgnmlToJsonConverter;
    elementUtilities = param.elementUtilities;
  }

  function strToSet(str, splitBy) {
    var set = {};
    var list = str ? str.split(splitBy) : [];
    list.forEach(function (member) {
      set[member] = true;
    });
    return set;
  }

  function getFirstByTagName(arc, tagName) {
    var els = arc.getElementsByTagName(tagName);
    var val = els.length > 0 ? els[0].innerHTML : null;
    return val;
  }

  var sifEdgePropHandlerMap = {
    'pcIDSet': function pcIDSet(arc) {
      var val = getFirstByTagName(arc, 'pcIDs');
      return strToSet(val, /;| /);
    },
    'siteLocSet': function siteLocSet(arc) {
      var val = getFirstByTagName(arc, 'siteLocations');
      return strToSet(val, ';');
    }
  };
  var sifNodePropHandlerMap = {
    'tooltip': function tooltip(glyph) {
      var val = getFirstByTagName(glyph, 'tooltip');
      return val;
    },
    'infoboxes': function infoboxes(glyph, data) {
      var sifInfoboxPropHandlerMap = {
        'tooltip': function tooltip(glyph) {
          var val = getFirstByTagName(glyph, 'tooltip');
          return val;
        }
      };
      var infoboxGlyphs = glyph.getElementsByTagName('glyph');

      for (var i = 0; i < infoboxGlyphs.length; i++) {
        var infoboxGlyph = infoboxGlyphs[i];
        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {
          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);

          if (val) {
            data.statesandinfos[i][propName] = val;
          }
        });
      }
    }
  };

  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {
    elesData.forEach(function (obj) {
      var data = obj.data;

      if (filterFcn(data["class"])) {
        var xmlEle = getXMLEleById(xmlObject, data.id);
        Object.keys(propHandlerMap).forEach(function (propName) {
          // does not have to return a value, maybe a void function as well
          var val = propHandlerMap[propName](xmlEle, data);

          if (val) {
            data[propName] = val;
          }
        });
      }
    });
  }

  function getElMap(graphData) {
    var map = {
      nodes: {},
      edges: {},
      infoboxes: {}
    };
    graphData.edges.forEach(function (edge) {
      map.edges[edge.data.id] = edge;
    });
    graphData.nodes.forEach(function (node) {
      map.nodes[node.data.id] = node;
      var infoboxes = node.data.statesandinfos;
      infoboxes.forEach(function (infobox) {
        map.infoboxes[infobox.id] = infobox;
      });
    });
    return map;
  }

  function applyExtraStylesData(graphData, xmlObject) {
    var listOfStyles = xmlObject.querySelector('listOfStyles');
    var styles = listOfStyles && listOfStyles.querySelectorAll('style');

    if (!styles || styles.length === 0) {
      return;
    }

    var attrToProp = {
      'shapeName': 'shape-name'
    };
    var elMap = getElMap(graphData);
    styles.forEach(function (style) {
      var idList = style.getAttribute('idList').split(' ');
      Object.keys(attrToProp).forEach(function (attrName) {
        var g = style.querySelector('g');
        var val = g.getAttribute(attrName);

        if (val) {
          var propName = attrToProp[attrName];
          idList.forEach(function (id) {
            if (elMap.nodes[id] || elMap.edges[id]) {
              var el = elMap.nodes[id] || elMap.edges[id];
              el.data[propName] = val;
            } else if (elMap.infoboxes[id]) {
              var el = elMap.infoboxes[id];
              el.style[propName] = val;
            }
          });
        }
      });
    });
  }

  nwtToJson.convert = function (xmlObject, urlParams) {
    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);
    var mapType = elementUtilities.mapType;

    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {
      elementUtilities.fileFormat = 'nwt'; // extend edges data with sif specific features

      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);
      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);
    } // apply the style data that is not applied because of restrictions of libsbgn


    applyExtraStylesData(graphData, xmlObject);
    return graphData;
  };

  nwtToJson.mapPropertiesToObj = function () {
    return sbgnmlToJson.mapPropertiesToObj();
  };

  return nwtToJson;
};

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

/*
 *  Extend default options and get current options by using this file
 */
module.exports = function () {
  // default options
  var defaults = {
    // The path of core library images when sbgnviz is required from npm and the index html
    // file and node_modules are under the same folder then using the default value is fine
    imgPath: 'node_modules/sbgnviz/src/img',
    // Whether to fit labels to nodes
    fitLabelsToNodes: function fitLabelsToNodes() {
      return false;
    },
    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {
      return false;
    },
    // dynamic label size it may be 'small', 'regular', 'large'
    dynamicLabelSize: function dynamicLabelSize() {
      return 'regular';
    },
    // Whether to infer parent node on load 
    inferNestingOnLoad: function inferNestingOnLoad() {
      return false;
    },
    // intial compound padding for all compound nodes 
    compoundPadding: function compoundPadding() {
      return 0;
    },
    improveFlow: function improveFlow() {
      return true;
    },
    // Whether to adjust node label font size automatically.
    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')
    // instead of doing it.
    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {
      return true;
    },
    // extra padding for compound nodes except for complexes
    extraCompartmentPadding: 14,
    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details
    extraComplexPadding: 10,
    // Wether to display the complex's labels, like compartments.
    // Will also increase the paddings by extraCompoundPadding to make room for the name.
    showComplexName: true,
    // The selector of the component containing the sbgn network
    networkContainerSelector: '#sbgn-network-container',
    // Whether the actions are undoable, requires cytoscape-undo-redo extension
    undoable: true
  };

  var optionUtilities = function optionUtilities(param) {}; // Extend the defaults options with the user options


  optionUtilities.extendOptions = function (options) {
    var result = {};

    for (var prop in defaults) {
      result[prop] = defaults[prop];
    }

    for (var prop in options) {
      result[prop] = options[prop];
    }

    optionUtilities.options = result;
    return options;
  };

  optionUtilities.getOptions = function () {
    return optionUtilities.options;
  };

  return optionUtilities;
};

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = function () {
  var jsonToSbgnml, elementUtilities, cy;

  function sbgnmlToCd(param) {
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  sbgnmlToCd.convert = function (xml, callback) {
    $.ajax({
      type: 'post',
      url: "http://web.newteditor.org:8080/sbgnml2cd",
      data: xml,
      success: function success(data) {
        callback(data);
      },
      error: function error(XMLHttpRequest) {
        callback(null);
      }
    });
  };

  return sbgnmlToCd;
};

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var libsbgnjs = __webpack_require__(/*! libsbgn.js */ "libsbgn.js");

var parseString = __webpack_require__(/*! xml2js */ "xml2js").parseString;

var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

var classes = __webpack_require__(/*! ./classes */ "./src/utilities/classes.js");

module.exports = function () {
  var elementUtilities, graphUtilities, handledElements, mainUtilities;

  function sbgnmlToJson(param) {
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions();
    elementUtilities = param.elementUtilities;
    graphUtilities = param.graphUtilities;
    mainUtilities = param.mainUtilities;
    handledElements = {};
    elementUtilities.elementTypes.forEach(function (type) {
      handledElements[type] = true;
    });
  }

  sbgnmlToJson.insertedNodes = {};
  sbgnmlToJson.map = undefined;
  sbgnmlToJson.calculatedCompoundPadding = undefined;

  sbgnmlToJson.getAllCompartments = function (glyphList) {
    var compartments = [];

    for (var i = 0; i < glyphList.length; i++) {
      if (glyphList[i].class_ == 'compartment') {
        var compartment = glyphList[i];
        var bbox = compartment.bbox;
        compartments.push({
          'x': parseFloat(bbox.x),
          'y': parseFloat(bbox.y),
          'w': parseFloat(bbox.w),
          'h': parseFloat(bbox.h),
          'id': compartment.id
        });
      }
    }

    compartments.sort(function (c1, c2) {
      if (c1.h * c1.w < c2.h * c2.w) {
        return -1;
      }

      if (c1.h * c1.w > c2.h * c2.w) {
        return 1;
      }

      return 0;
    });
    return compartments;
  };

  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {
    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {
      return true;
    }

    return false;
  };

  sbgnmlToJson.bboxProp = function (ele) {
    if (ele.bboxCalculated) {
      return ele.bbox;
    }

    ele.bboxCalculated = true;
    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members

    childNodes = childNodes.filter(function (child) {
      return child.class_ != "state variable" && child.class_ != "unit of information";
    });
    var bbox = {};
    bbox.x = ele.bbox.x;
    bbox.y = ele.bbox.y;
    bbox.w = ele.bbox.w;
    bbox.h = ele.bbox.h; //if it is simple node return bbox

    if (childNodes.length <= 0) {
      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;
      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;
      return bbox;
    } else if (ele.extension && ele.extension.has('extraInfo')) {
      // if newt file then extrainfo on the compound node exists
      var xml = ele.extension.get('extraInfo');
      var extraInfo;
      parseString(xml, function (err, result) {
        extraInfo = result.extraInfo;
      });
      ele.originalW = bbox.w;
      ele.originalH = bbox.h;
      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;
      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;
      bbox.w = parseFloat(extraInfo.w);
      bbox.h = parseFloat(extraInfo.h);
      ele.minWidth = parseFloat(extraInfo.minW);
      ele.minHeight = parseFloat(extraInfo.minH);
      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);
      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);
      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);
      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);
      return bbox;
    } else {
      /*  var styles;
       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found
         styles = this.map.extension.get('renderInformation').listOfStyles;
         if(styles  !== undefined){
           styles = styles.styles;
         }
       }
      */

      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);
       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */
      var padding = this.calculateElementPadding(ele);

      if (ele.class_ == "complex") {
        ele.complexCalculatedPadding = padding;
      }

      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;
      var fromInfoBox = false; // Traverse the other children and update the extreme values

      for (var i = 0; i < childNodes.length; i++) {
        var childNode = childNodes[i];
        var childNodeBbox = this.bboxProp(childNode);
        childNode.bbox = childNodeBbox;
        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)["border-width"];
        var childPadding = this.calculateElementPadding(childNode); //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});

        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){
           borderWidth = childStyle[0].renderGroup.strokeWidth;
         } */

        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;
        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;
        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;
        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;
        var stateAndInfos = childNode.glyphMembers.filter(function (child) {
          return child.class_ == "state variable" || child.class_ == "unit of information";
        });

        if (stateAndInfos.length > 0) {
          for (var k = 0; k < stateAndInfos.length; k++) {
            var stateBbox = stateAndInfos[k].bbox;

            if (minLeft === undefined || stateBbox.x < minLeft) {
              minLeft = stateBbox.x;
              fromInfoBox = true;
              minLeftBorder = 0;
            }

            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {
              maxRight = stateBbox.x + stateBbox.w;
              fromInfoBox = true;
              maxRightBorder = 0;
            }

            if (minTop === undefined || stateBbox.y < minTop) {
              minTop = stateBbox.y;
              fromInfoBox = true;
              minTopBorder = 0;
            }

            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {
              maxBottom = stateBbox.y + stateBbox.h;
              fromInfoBox = true;
              maxBottomBorder = 0;
            }
          }
        }

        if (minLeft === undefined || left < minLeft) {
          minLeft = left;
          fromInfoBox = false;
          minLeftBorder = borderWidth;
        }

        if (maxRight === undefined || right > maxRight) {
          maxRight = right;
          fromInfoBox = false;
          maxRightBorder = borderWidth;
        }

        if (minTop === undefined || top < minTop) {
          minTop = top;
          fromInfoBox = false;
          minTopBorder = borderWidth;
        }

        if (maxBottom === undefined || bottom > maxBottom) {
          maxBottom = bottom;
          fromInfoBox = false;
          maxBottomBorder = borderWidth;
        }
      }

      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;
      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2; // The sizes of children bbox are determined by the difference between the extreme coordinates

      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes

      childrenBboxH = maxBottom - minTop + 2; // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases

      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {
        //ele.minWidth = bbox.w - 2 padding  calculate badding first
        ele.minWidth = bbox.w - 2 * padding;
        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));
        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));
        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;
        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;
      } // If children bbox height is bigger than node bbox height set minHeight, and vertical biases


      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {
        ele.minHeight = bbox.h - 2 * padding;
        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));
        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));
        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;
        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;
      } // set positions as center


      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;
      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2; //bbox.x = (minLeft + maxRight) /2;
      // bbox.y = (minTop + maxBottom) / 2;

      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;
      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;
      bbox.w = bbox.w < 0 ? 0 : bbox.w;
      bbox.h = bbox.h < 0 ? 0 : bbox.h;
      return bbox;
    }
  };

  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {
    // don't copy directly ele.box because it contains other things than x y w h
    var bbox = {};

    if (ele.bbox != null) {
      bbox.x = ele.bbox.x;
      bbox.y = ele.bbox.y;
      bbox.w = ele.bbox.w;
      bbox.h = ele.bbox.h;
    } else {
      bbox.x = 0;
      bbox.y = 0;
      bbox.w = 12;
      bbox.h = 12;
    }

    return bbox;
  };

  sbgnmlToJson.calculateElementPadding = function (ele) {
    var padding = 0;
    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members

    childNodes = childNodes.filter(function (child) {
      return child.class_ != "state variable" && child.class_ != "unit of information";
    });
    if (childNodes.length <= 0) return 0;
    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding; // } 

    if (ele.class_ == "complex") {
      var complexPadding = 0;
      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;
      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;
      var stateAndInfos = ele.glyphMembers.filter(function (child) {
        return child.class_ == "state variable" || child.class_ == "unit of information";
      });

      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {
        complexPadding = complexPadding + 0.5 * extraComplexPadding;
        var hasTopBottomInfo = false;
        stateAndInfos.forEach(function (stateAndInfo) {
          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {
            hasTopBottomInfo = true;
          }
        });

        if (hasTopBottomInfo) {
          complexPadding = complexPadding + 0.5 * extraComplexPadding;
        }
      } else if (stateAndInfos.length > 0) {
        complexPadding += 2;
      }

      padding = complexPadding;
    } else {
      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;
      padding = extraCompartmentPadding + compoundPadding;
    }

    return padding;
  };

  sbgnmlToJson.findChildNodes = function (ele, childTagName) {
    // find child nodes at depth level of 1 relative to the element
    var children = [];

    for (var i = 0; i < ele.childNodes.length; i++) {
      var child = ele.childNodes[i];

      if (child.nodeType === 1 && child.tagName === childTagName) {
        children.push(child);
      }
    }

    return children;
  };

  sbgnmlToJson.findChildNode = function (ele, childTagName) {
    var nodes = this.findChildNodes(ele, childTagName);
    return nodes.length > 0 ? nodes[0] : undefined;
  };

  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {
    var self = this;
    var parentBbox = parent.bbox;
    var stateAndInfoArray = [];
    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');
    // if a biological activity node has no unit of info, it must be a BA plain

    if (parent["class"] == "biological activity" && childGlyphs.length == 0) {
      parent["class"] = "BA plain";
    }

    for (var i = 0; i < childGlyphs.length; i++) {
      var glyph = childGlyphs[i];

      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable') {
        continue;
      }

      var info = {};
      var infobox;
      var infoboxId = glyph.id;

      if (glyph.class_ === 'unit of information') {
        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);

        if (glyph.entity) {
          // change the parent class according to its true class of biological activity
          switch (glyph.entity.name) {
            case 'unspecified entity':
              parent["class"] = "BA unspecified entity";
              break;

            case 'simple chemical':
              parent["class"] = "BA simple chemical";
              break;

            case 'macromolecule':
              parent["class"] = "BA macromolecule";
              break;

            case 'nucleic acid feature':
              parent["class"] = "BA nucleic acid feature";
              break;

            case 'perturbation':
              parent["class"] = "BA perturbing agent";
              break;

            case 'complex':
              parent["class"] = "BA complex";
              break;
          }
        }

        infobox.label = {
          'text': glyph.label && glyph.label.text || undefined
        };
      } else if (glyph.class_ === 'state variable') {
        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);
        var state = glyph.state;
        infobox.state.value = state && state.value || undefined;
        infobox.state.variable = state && state.variable || undefined;
      } //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();


      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);
      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent["class"]); //classes.StateVariable.setAnchorSide(infobox);

      stateAndInfoArray.push(infobox);
    }

    return stateAndInfoArray;
  };

  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {
    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);
  };

  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {
    var self = this;
    var compartmentRef = ele.compartmentRef;
    var inferNestingOnLoad = options.inferNestingOnLoad;
    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;

    if (parent) {
      nodeObj.parent = parent;
    } else if (compartmentRef) {
      nodeObj.parent = compartmentRef;
    } else if (inferNestingOnLoad) {
      nodeObj.parent = ''; // add compartment according to geometry

      for (var i = 0; i < compartments.length; i++) {
        var bbox = {
          'x': parseFloat(ele.bbox.x),
          'y': parseFloat(ele.bbox.y),
          'w': parseFloat(ele.bbox.w),
          'h': parseFloat(ele.bbox.h),
          'id': ele.id
        };

        if (self.isInBoundingBox(bbox, compartments[i])) {
          nodeObj.parent = compartments[i].id;
          break;
        }
      }
    }
  };

  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {
    var self = this;
    var nodeObj = {};
    var styleObj = {}; // add id information

    nodeObj.id = ele.id; // add node bounding box information

    nodeObj.bbox = self.bboxProp(ele);

    if (ele.minWidth) {
      nodeObj.minWidth = ele.minWidth;
      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;
      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;
    }

    if (ele.minHeight) {
      nodeObj.minHeight = ele.minHeight;
      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;
      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;
    }

    if (ele.originalW) {
      nodeObj.originalW = ele.originalW;
    }

    if (ele.originalH) {
      nodeObj.originalH = ele.originalH;
    }

    if (ele.complexCalculatedPadding) {
      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;
    } // add class information


    nodeObj["class"] = ele.class_; // add label information

    nodeObj.label = ele.label && ele.label.text || undefined;

    if (nodeObj.label != undefined) {
      nodeObj.label = "" + nodeObj.label;
    } // add state and info box information


    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj); // adding parent information

    self.addParentInfoToNode(ele, nodeObj, parent, compartments); // add language info, this will always be the mapType if not hybrid

    var mapType = elementUtilities.mapType;

    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {
      nodeObj.language = elementUtilities.mapType;
    } else if (mapType == 'HybridSbgn') {
      if (nodeObj["class"] == 'delay' || nodeObj["class"].startsWith("BA")) {
        nodeObj.language = 'AF';
      } else {
        nodeObj.language = 'PD';
      }
    } else {
      //maptype == HybridAny
      if (nodeObj["class"].startsWith("SIF")) {
        nodeObj.language = 'SIF';
      } else if (nodeObj["class"] == 'delay' || nodeObj["class"].startsWith("BA")) {
        nodeObj.language = 'AF';
      } else {
        nodeObj.language = 'PD';
      }
    } // add default properties of the node type to element data
    // these props would be overriden by style properties of element
    // stored in the file


    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj["class"]); // add clone information

    if (ele.clone) {
      nodeObj.clonemarker = true;
    } else {
      nodeObj.clonemarker = undefined;
    } // add port information


    var ports = [];
    var portElements = ele.ports;

    for (var i = 0; i < portElements.length; i++) {
      var portEl = portElements[i];
      var id = portEl.id;
      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;
      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;
      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;
      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100; // In case port position is not vertically/horizontally aligned with the node center, decide a direction

      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {
        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;
      } // We assume that ports are not inside the node shape.
      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.


      if (Math.abs(relativeXPos) < 50) {
        relativeXPos = 0;
      }

      if (Math.abs(relativeYPos) < 50) {
        relativeYPos = 0;
      }

      if (relativeXPos === 0 && relativeYPos === 0) {
        continue;
      } // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),
      // set the port length to 70 which is default in sbgnviz


      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {
        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;
      }

      ports.push({
        id: id,
        x: relativeXPos,
        y: relativeYPos
      });
    }

    nodeObj.ports = ports;
    var _class = nodeObj["class"]; // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.
    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.

    if (elementUtilities.canHavePorts(_class)) {
      if (graphUtilities.portsEnabled && ports.length === 2) {
        // We assume that the ports are symmetric to the node center so using just one of the ports is enough
        var port = ports[0];
        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports

        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Multiply the bbox with the calculated ratio

        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;
        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;
      }
    }

    if (ele.extension && ele.extension.has('annotation')) {
      // annotation extension was found
      var rdfElement = ele.extension.get('annotation').rdfElement;
      nodeObj = self.handleAnnotations(nodeObj, rdfElement);
    }

    if (ele.extension && ele.extension.has("sbgnviz")) {
      parseString(ele.extension.get("sbgnviz"), function (err, result) {
        if (result.sbgnviz.hidden) {
          styleObj.display = "none";
        }

        if (result.sbgnviz.hasHiddenNeighbour) {
          nodeObj.thickBorder = true;
        }

        if (result.sbgnviz.collapsed) {
          nodeObj.positionBeforeSaving = {
            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),
            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)
          };
          nodeObj.collapse = true;
        }
      });
    }

    var cytoscapeJsNode = {
      data: nodeObj,
      style: styleObj
    };
    jsonArray.push(cytoscapeJsNode);
  };
  /**
  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field
  */


  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {
    // local utility function
    function dbFromUrl(url) {
      var regexp = /^http:\/\/identifiers.org\/(.+?)\/.+$/;
      return url.replace(regexp, '$1');
    }

    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {
      if (!cyObject.annotations) {
        cyObject.annotations = {};
      }

      var annotId = cyObject.id + "-annot-" + annotationIndex;
      cyObject.annotations[annotId] = {
        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.
        // This would lead to the user losing annotations without knowing it.
        status: status,
        // <-- we trust that what's been loaded is valid.
        selectedDB: selectedDB,
        selectedRelation: selectedRelation,
        annotationValue: annotationValue
      };
      return cyObject;
    } // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description


    var id = rdfElement.getAllIds()[0];
    var resources = rdfElement.getResourcesOfId(id);
    var customProperties = rdfElement.getCustomPropertiesOfId(id);
    var globalAnnotIndex = 0; // handle controlled properties

    for (var fullQualifier in resources) {
      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);

      for (var i = 0; i < resources[fullQualifier].length; i++) {
        var value = resources[fullQualifier][i];
        var selectedDB = dbFromUrl(value);
        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, "validated", selectedDB, relation, value);
        globalAnnotIndex++;
      }
    } // handle custom properties


    for (var key in customProperties) {
      var value = customProperties[key];
      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, "validated", key, "sio:SIO_000223", value);
      globalAnnotIndex++;
    }

    return cyObject;
  };

  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {
    var elId = ele.id;

    if (!handledElements[ele.class_]) {
      return;
    }

    this.insertedNodes[elId] = true;
    var self = this; // add complex nodes here

    var eleClass = ele.class_;

    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);
      var childGlyphs = ele.glyphMembers;

      for (var i = 0; i < childGlyphs.length; i++) {
        var glyph = childGlyphs[i];
        var glyphClass = glyph.class_;

        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information') {
          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {
            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);
          } else {
            self.traverseNodes(glyph, jsonArray, elId, compartments);
          }
        }
      }
    } else {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);
    }
  };

  sbgnmlToJson.getPorts = function (xmlObject) {
    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');
  };

  sbgnmlToJson.getGlyphs = function (xmlObject) {
    var glyphs = xmlObject._cachedGlyphs;

    if (!glyphs) {
      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');
      var id2glyph = xmlObject._id2glyph = {};

      for (var i = 0; i < glyphs.length; i++) {
        var g = glyphs[i];
        var id = g.getAttribute('id');
        id2glyph[id] = g;
      }
    }

    return glyphs;
  };

  sbgnmlToJson.getArcs = function (xmlObject) {
    var arcs = xmlObject._cachedArcs;

    if (!arcs) {
      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');
      var id2arc = xmlObject._id2arc = {};

      for (var i = 0; i < arcs.length; i++) {
        var arc = arcs[i];
        var id = arc.getAttribute('id');
        id2arc[id] = arc;
      }
    }

    return arcs;
  };

  sbgnmlToJson.getGlyphById = function (xmlObject, id) {
    this.getGlyphs(xmlObject); // make sure cache is built

    return xmlObject._id2glyph[id];
  };

  sbgnmlToJson.getArcById = function (xmlObject, id) {
    this.getArcs(xmlObject); // make sure cache is built

    return xmlObject._id2arc[id];
  };

  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {
    // source and target can be inside of a port
    var source = arc.source;
    var target = arc.target;
    var sourceNodeId;
    var targetNodeId;
    var sourceExists = this.getGlyphById(xmlObject, source);
    var targetExists = this.getGlyphById(xmlObject, target);

    if (sourceExists) {
      sourceNodeId = source;
    }

    if (targetExists) {
      targetNodeId = target;
    }

    var i;
    var portEls = this.getPorts(xmlObject);
    var port;

    if (sourceNodeId === undefined) {
      for (i = 0; i < portEls.length; i++) {
        port = portEls[i];

        if (port.getAttribute('id') === source) {
          sourceNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    if (targetNodeId === undefined) {
      for (i = 0; i < portEls.length; i++) {
        port = portEls[i];

        if (port.getAttribute('id') === target) {
          targetNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    return {
      'source': sourceNodeId,
      'target': targetNodeId
    };
  };

  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {
    var anchorPointPositions = [];
    var children = ele.nexts;

    for (var i = 0; i < children.length; i++) {
      var posX = children[i].x;
      var posY = children[i].y;
      anchorPointPositions.push({
        x: posX,
        y: posY
      });
    }

    return anchorPointPositions;
  };

  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {
    if (!handledElements[ele.class_]) {
      return;
    }

    var self = this;
    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);

    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {
      return;
    }

    var edgeObj = {};
    var styleObj = {};
    var anchorPointPositions = [];

    if (sourceAndTarget.source !== sourceAndTarget.target) {
      anchorPointPositions = self.getArcAnchorPointPositions(ele);
    }

    edgeObj.id = ele.id || undefined;
    edgeObj["class"] = ele.class_; // bezier edge is the default edge style
    // change if the file being loaded has curveStyle field

    var curveStyle = "bezier";

    if (ele.extension && ele.extension.has("curveStyle")) {
      parseString(ele.extension.get("curveStyle"), function (err, result) {
        curveStyle = result.curveStyle;
      });
    }

    if (curveStyle == "unbundled-bezier") {
      edgeObj.controlPointPositions = anchorPointPositions;
    } else {
      edgeObj.bendPointPositions = anchorPointPositions;
    }

    var isSifMetaEdge;

    if (ele.extension && ele.extension.has("sifMetaEdge")) {
      parseString(ele.extension.get("sifMetaEdge"), function (err, result) {
        isSifMetaEdge = result.sifMetaEdge;
      });
    }

    if (isSifMetaEdge) {
      edgeObj["sif-meta"] = true;
    } // add language info, this will always be the mapType if not hybrid


    var PdEdges = ["consumption", "production", "modulation", "stimulation", "catalysis", "inhibition", "necessary stimulation", "logic arc", "equivalence arc"];
    var AfEdges = ["positive influence", "negative influence", "unknown influence"];
    var mapType = elementUtilities.mapType;

    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {
      edgeObj.language = elementUtilities.mapType;
    } else if (mapType == 'HybridSbgn') {
      if (PdEdges.indexOf(edgeObj["class"]) > -1) {
        edgeObj.language = 'PD';
      } else {
        edgeObj.language = 'AF';
      }
    } else {
      //maptype == HybridAny
      if (PdEdges.indexOf(edgeObj["class"]) > -1) {
        edgeObj.language = 'PD';
      } else if (AfEdges.indexOf(edgeObj["class"]) > -1) {
        edgeObj.language = 'AF';
      } else {
        edgeObj.language = 'SIF';
      }
    }

    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj["class"]);
    edgeObj.cardinality = 0;

    if (ele.glyphs.length > 0) {
      for (var i = 0; i < ele.glyphs.length; i++) {
        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {
          var label = ele.glyphs[i].label;
          edgeObj.cardinality = label.text || undefined;
        }
      }
    }

    edgeObj.source = sourceAndTarget.source;
    edgeObj.target = sourceAndTarget.target;
    edgeObj.portsource = ele.source;
    edgeObj.porttarget = ele.target;

    if (ele.extension && ele.extension.has('annotation')) {
      // annotation extension was found
      var rdfElement = ele.extension.get('annotation').rdfElement;
      edgeObj = self.handleAnnotations(edgeObj, rdfElement);
    }

    if (ele.extension && ele.extension.has("sbgnviz")) {
      parseString(ele.extension.get("sbgnviz"), function (err, result) {
        if (result.sbgnviz.hidden) {
          styleObj.display = "none";
        }
      });
    }

    var cytoscapeJsEdge = {
      data: edgeObj,
      style: styleObj
    };
    jsonArray.push(cytoscapeJsEdge);
  };

  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {
    // get all color id references to their value
    if (renderInformation.listOfColorDefinitions) {
      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;
      var colorIDToValue = {};

      for (var i = 0; i < colorList.length; i++) {
        colorIDToValue[colorList[i].id] = colorList[i].value;
      }
    } // get all background image id references to their value


    if (renderInformation.listOfBackgroundImages) {
      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;
      var imageIDToValue = {};

      for (var i = 0; i < imageList.length; i++) {
        imageIDToValue[imageList[i].id] = imageList[i].value;
      }
    } // convert style list to elementId-indexed object pointing to style
    // also convert color references to color values


    var styleList = renderInformation.listOfStyles.styles;
    var memberIDToStyle = {};

    for (var i = 0; i < styleList.length; i++) {
      var style = styleList[i];
      var renderGroup = style.renderGroup; // convert color references

      if (renderGroup.stroke != null && colorIDToValue) {
        renderGroup.stroke = colorIDToValue[renderGroup.stroke];
      }

      if (renderGroup.fill != null && colorIDToValue) {
        renderGroup.fill = colorIDToValue[renderGroup.fill];
      } // convert background image references


      if (renderGroup.backgroundImage != null && imageIDToValue) {
        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];
      }

      var idList = style.idList.split(' ');

      for (var j = 0; j < idList.length; j++) {
        var id = idList[j];
        memberIDToStyle[id] = renderGroup;
      }
    }

    function hexToDecimal(hex) {
      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;
    }

    function convertHexColor(hex) {
      if (hex.length == 7) {
        // no opacity provided
        return {
          opacity: null,
          color: hex
        };
      } else {
        // length of 9
        var color = hex.slice(0, 7);
        var opacity = hexToDecimal(hex.slice(-2));
        return {
          opacity: opacity,
          color: color
        };
      }
    }

    var nodePropMap = {
      'background-color': 'fill',
      'background-opacity': 'backgroundOpacity',
      'border-color': 'stroke',
      'border-width': 'strokeWidth',
      'font-size': 'fontSize',
      'font-family': 'fontFamily',
      'font-style': 'fontStyle',
      'font-weight': 'fontWeight',
      'color': 'fontColor',
      'text-halign': 'textAnchor',
      'text-valign': 'vtextAnchor',
      'background-image': 'backgroundImage',
      'background-fit': 'backgroundFit',
      'background-position-x': 'backgroundPosX',
      'background-position-y': 'backgroundPosY',
      'background-width': 'backgroundWidth',
      'background-height': 'backgroundHeight',
      'background-image-opacity': 'backgroundImageOpacity'
    };
    var edgePropMap = {
      'line-color': 'stroke',
      'width': 'strokeWidth'
    };
    var infoboxPropMap = {
      'background-color': 'fill',
      'border-color': 'stroke',
      'border-width': 'strokeWidth',
      'font-size': 'fontSize',
      'font-weight': 'fontWeight',
      'font-style': 'fontStyle',
      'font-family': 'fontFamily',
      'font-color': 'fontColor'
    };
    var nodePropDetails = {
      'background-color': {
        'converter': convertHexColor,
        'extra-field': 'color'
      },

      /*  'background-opacity': {
         'converter': convertHexColor,
         'extra-field': 'opacity'
       }, */
      'border-color': {
        'converter': convertHexColor,
        'extra-field': 'color'
      }
    };
    var edgePropDetails = {
      'line-color': {
        'converter': convertHexColor,
        'extra-field': 'color'
      }
    };
    var infoboxPropDetails = {
      'font-color': {
        'converter': convertHexColor,
        'extra-field': 'color'
      },
      'border-color': {
        'converter': convertHexColor,
        'extra-field': 'color'
      }
    };

    function getElementId(ele) {
      return ele.data.id;
    }

    function getInfoboxId(infobox) {
      return infobox.id;
    }

    function setElementStyleProp(ele, name, value) {
      ele.data[name] = value;
    }

    function setInfoboxStyleProp(infobox, name, value) {
      infobox.style[name] = value;
    } // apply the style to list and overwrite the default style


    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {
      for (var i = 0; i < list.length; i++) {
        var member = list[i];
        var memberStyle = memberIDToStyle[getId(member)];

        if (!memberStyle) {
          return;
        }

        Object.keys(propMap).forEach(function (propName) {
          var fieldName = propMap[propName];
          var fieldVal = memberStyle[fieldName];

          if (fieldVal) {
            var details = propDetails && propDetails[propName];

            if (details) {
              if (details['converter']) {
                fieldVal = details['converter'](fieldVal);
              }

              if (details['extra-field']) {
                fieldVal = fieldVal[details['extra-field']];
              }
            }

            setStyleProp(member, propName, fieldVal);
          }
        }); // if the member is a node

        if (member.data && member.data.statesandinfos) {
          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);
        }
      }
    }

    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);
    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);
  };

  sbgnmlToJson.mapPropertiesToObj = function () {
    if (this.map.extension && this.map.extension.has('mapProperties')) {
      // render extension was found
      var xml = this.map.extension.get('mapProperties');
      var obj;
      parseString(xml, function (err, result) {
        obj = result;
      });
      return obj;
    } else {
      return {
        mapProperties: {
          compoundPadding: mainUtilities.getCompoundPadding()
        }
      };
    }
  };

  sbgnmlToJson.convert = function (xmlObject, urlParams) {
    var self = this;
    var cytoscapeJsNodes = [];
    var cytoscapeJsEdges = [];
    var compartmentChildrenMap = {}; // Map compartments children temporarily

    elementUtilities.fileFormat = 'sbgnml';
    var sbgn;

    try {
      var xmlString = new XMLSerializer().serializeToString(xmlObject);
      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);
    } catch (err) {
      throw new Error("Could not parse sbgnml. " + err);
    }

    var map;

    if (sbgn.maps.length < 1) {
      // empty sbgn
      return {
        nodes: [],
        edges: []
      };
    } else {
      map = sbgn.maps[0]; // take first map of the file as the main map
    }

    this.map = map;
    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);
    var compartments = self.getAllCompartments(map.glyphs);
    var glyphs = map.glyphs;
    var arcs = map.arcs;
    var i;

    for (i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i]; // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments
      // store glyph members of compartments here.

      var compartmentRef = glyph.compartmentRef;

      if (glyph.class_ === 'compartment') {
        if (compartmentChildrenMap[glyph.id] === undefined) {
          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;
        }

        glyph.glyphMembers = compartmentChildrenMap[glyph.id];
      }

      if (compartmentRef) {
        if (compartmentChildrenMap[compartmentRef] === undefined) {
          compartmentChildrenMap[compartmentRef] = [];
        }

        compartmentChildrenMap[compartmentRef].push(glyph);
      }
    }

    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;

    if (urlParams && urlParams.compoundPadding) {
      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));
    } else if (!map.extension) {
      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i]; // if(glyph.class_ == "complex")continue;

        childNodes = glyph.glyphMembers.filter(function (child) {
          return child.class_ != "state variable" && child.class_ != "unit of information";
        });

        if (childNodes.length > 0) {
          // compound node
          var hasMin = false;

          for (var j = 0; j < childNodes.length; j++) {
            var childNode = childNodes[j];
            var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)["border-width"];
            var stateAndInfos = childNode.glyphMembers.filter(function (child) {
              return child.class_ == "state variable" || child.class_ == "unit of information";
            });

            if (stateAndInfos.length > 0) {
              for (var k = 0; k < stateAndInfos.length; k++) {
                var stateBbox = stateAndInfos[k].bbox;

                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {
                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;
                  hasMin = true;
                }

                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {
                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;
                  hasMin = true;
                }

                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {
                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;
                  hasMin = true;
                }

                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {
                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;
                  hasMin = true;
                }
              }
            }

            var childNodeBbox = childNode.bbox;
            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;
            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;
            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;
            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;

            if (left < minDistanceToChildren) {
              minDistanceToChildren = left;
              hasMin = true;
            }

            if (right < minDistanceToChildren) {
              minDistanceToChildren = right;
              hasMin = true;
            }

            if (top < minDistanceToChildren) {
              minDistanceToChildren = top;
              hasMin = true;
            }

            if (bottom < minDistanceToChildren) {
              minDistanceToChildren = bottom;
              hasMin = true;
            }
          }

          if (hasMin) {
            if (glyph.class_ == "complex") {
              var stateAndInfos = glyph.glyphMembers.filter(function (child) {
                return child.class_ == "state variable" || child.class_ == "unit of information";
              });
              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;

              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {
                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;
                var hasTopBottomInfo = false;
                stateAndInfos.forEach(function (stateAndInfo) {
                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {
                    hasTopBottomInfo = true;
                  }
                });

                if (hasTopBottomInfo) {
                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;
                }
              } else if (stateAndInfos.length > 0) {
                minDistanceToChildren -= 2;
              }
            } else {
              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;
              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;
            }
          }
        }
      }

      minDistanceToChildren = Math.round(minDistanceToChildren);
      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)

      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {
        newPadding = 0;
      }

      mainUtilities.setCompoundPadding(newPadding);
    } else {
      mainUtilities.setCompoundPadding(Number(self.mapPropertiesToObj().mapProperties.compoundPadding));
    }

    for (i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i];
      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);
    }

    for (i = 0; i < arcs.length; i++) {
      var arc = arcs[i];
      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);
    }

    if (map.extension && map.extension.has('renderInformation')) {
      // render extension was found
      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);
    }

    var cytoscapeJsGraph = {};
    cytoscapeJsGraph.nodes = cytoscapeJsNodes;
    cytoscapeJsGraph.edges = cytoscapeJsEdges;
    this.insertedNodes = {};
    var shouldDisablePorts = false;
    cytoscapeJsGraph.nodes.forEach(function (node) {
      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {
        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data["class"]).width;
        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data["class"]).height; // node.data.bbox.x = 15;     
        // node.data.bbox.y = 10; 
      }

      node.data.ports.forEach(function (port) {
        if (isNaN(port.x) || isNaN(port.y)) {
          shouldDisablePorts = true;
        }
      });
    });

    if (shouldDisablePorts) {
      graphUtilities.disablePorts();
    } //getDefaultProperties
    //elementUtilities.nodeTypes.forEach(function(type){
    //  console.log(elementUtilities.getDefaultProperties(type));
    //});
    //console.log(cytoscapeJsGraph);
    //console.log( elementUtilities.nodeTypes);


    return cytoscapeJsGraph;
  };

  sbgnmlToJson.doValidation = function (xmlString) {
    var errors = [];

    try {
      errors = libsbgnjs.Sbgn.doValidation(xmlString);
    } catch (err) {
      throw new Error("Could not do validation. " + err);
    }

    return errors;
  };

  return sbgnmlToJson;
};

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = function () {
  var jsonToSbgnml, elementUtilities, cy;

  function sbgnmlToSbml(param) {
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  sbgnmlToSbml.convert = function (xml, callback) {
    var conversionApiUrl = "https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML";
    return $.ajax({
      type: 'post',
      url: conversionApiUrl,
      contentType: "text/xml; charset=UTF-8",
      data: xml,
      dataType: "text",
      success: function success(data, textStatus, xhr) {
        if (xhr.status !== 200) {
          callback({
            result: false,
            error: data,
            message: "Invalid response code: " + xhr.status
          });
        } else {
          callback({
            result: true,
            message: data,
            error: ""
          });
        }
      },
      error: function error(_error) {
        callback({
          result: false,
          error: _error,
          message: ""
        });
      },
      fail: function fail(error) {
        callback({
          result: false,
          error: error,
          message: ""
        });
      }
    });
  };

  return sbgnmlToSbml;
};

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = function () {
  var jsonToSbgnml, elementUtilities, cy;

  function sbmlToSbgnml(param) {
    jsonToSbgnml = param.jsonToSbgnmlConverter;
    elementUtilities = param.elementUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  sbmlToSbgnml.convert = function (xml, callback) {
    var conversionApiUrl = "https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML";
    return $.ajax({
      type: 'post',
      url: conversionApiUrl,
      contentType: "text/xml; charset=UTF-8",
      data: xml,
      dataType: "text",
      success: function success(data, textStatus, xhr) {
        if (xhr.status !== 200) {
          callback({
            result: false,
            error: data,
            message: "Invalid response code: " + xhr.status
          });
        } else {
          callback({
            result: true,
            message: data,
            error: ""
          });
        }
      },
      error: function error(_error) {
        callback({
          result: false,
          error: _error,
          message: ""
        });
      },
      fail: function fail(error) {
        callback({
          result: false,
          error: error,
          message: ""
        });
      }
    });
  };

  return sbmlToSbgnml;
};

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "console-browserify");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ "./src/utilities/tab-delimeted-parser.js");

function strToSet(str, splitBy) {
  var set = {};
  var list = str ? str.split(splitBy) : [];
  list.forEach(function (member) {
    set[member] = true;
  });
  return set;
}

function getEmptyGraphData() {
  return {
    nodes: [],
    edges: []
  };
}

module.exports = function () {
  var elementUtilities;

  function sifToJson(param) {
    elementUtilities = param.elementUtilities;
  }

  sifToJson.initGraphVariables = function () {
    sifToJson.graphData = getEmptyGraphData();
    sifToJson.nameToNode = {};
    sifToJson.keyToEdge = {}; // set of nodes that are connected to an edge

    sifToJson.nodeWithSpecifiedClass = {};
  };

  sifToJson.defaultNodeType = 'SIF macromolecule';

  sifToJson.mergeGraphData = function () {
    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));
  };

  sifToJson.convert = function (graphText) {
    elementUtilities.fileFormat = 'sif';
    elementUtilities.mapType = 'SIF';
    sifToJson.initGraphVariables();

    if (graphText == undefined) {
      return sifToJson.graphData;
    }

    var lines = tdParser.getLinesArray(graphText.toString());
    lines.forEach(function (line) {
      var tabs = tdParser.getTabsArray(line); // line represents a node

      if (tabs.length === 1) {
        var nodeName = tabs[0]; // create the node if does not exist yet
        // if the node is just created it will have the default node class

        sifToJson.getOrCreateNode(nodeName);
      } // line represents an edge and the connected nodes
      else {
          var srcName = tabs[0];
          var edgeType = tabs[1];
          var tgtName = tabs[2];
          var pcIDSet = strToSet(tabs[3], /;| /);
          var siteLocSet = strToSet(tabs[4], ';');
          var srcClass = sifToJson.getNodeClass(edgeType, 'src');
          var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt'); // create nodes if they do not exist yet
          // if the node already exists the node type and so the default values
          // will be updated

          sifToJson.getOrCreateNode(srcName, srcClass);
          sifToJson.getOrCreateNode(tgtName, tgtClass); // create the edge if it does not exist yet

          sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);
        }
    });
    return sifToJson.mergeGraphData();
  };

  sifToJson.getNodeByName = function (name) {
    return sifToJson.nameToNode[name];
  };

  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {
    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);
    return sifToJson.keyToEdge[key];
  };

  sifToJson.mapNodeToName = function (node, name) {
    sifToJson.nameToNode[name] = node;
  };

  sifToJson.mapEdgeToKey = function (edge, key) {
    sifToJson.keyToEdge[key] = edge;
  };

  sifToJson.calculateEdgeKey = function (src, type, tgt) {
    return [src, type, tgt].join(' ');
  };

  sifToJson.getOrCreateNode = function (name, className) {
    // save if class name parameter is set
    var classNameSpecified = !!className;
    className = className || sifToJson.defaultNodeType;
    var node = sifToJson.getNodeByName(name);
    var defaults = elementUtilities.getDefaultProperties(className);

    var updateWithDefaults = function updateWithDefaults() {
      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);
      node.data.bbox.h = defaults.height;

      if (elementUtilities.canHaveSBGNLabel(className)) {
        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');
        var fontSize;
        var fontFamily = node.data['font-family'];

        if (isDynamicLabel) {
          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');
          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);
          var obj = {
            height: node.data.bbox.h,
            "class": className
          };
          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);
        } else {
          fontSize = node.data['font-size'];
        }

        var max = 250;
        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {
          max: max
        });
      } else {
        node.data.bbox.w = defaults.width;
      }
    };

    if (node == undefined) {
      var uid = elementUtilities.generateNodeId();
      node = {};
      node.data = {
        id: uid,
        label: name,
        "class": className,
        bbox: {
          x: 0,
          y: 0
        },
        statesandinfos: [],
        ports: []
      };
      updateWithDefaults();
      sifToJson.mapNodeToName(node, name);
      sifToJson.graphData.nodes.push(node);
    } // if class name parameter is set and the already existing node has a different
    // class name check if the existing node has a specified class or just used the
    // default one because it was not coming from an edge.
    // In first case give a warning and do not update the class,
    // in second case update the class and the node data with defaults
    else if (classNameSpecified && node.data["class"] !== className) {
        if (sifToJson.nodeWithSpecifiedClass[name]) {
          console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data["class"]);
        } else {
          node.data["class"] = className;
          updateWithDefaults();
        }
      }

    if (classNameSpecified) {
      sifToJson.nodeWithSpecifiedClass[name] = true;
    }

    return node;
  };

  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {
    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);

    if (edge == undefined) {
      var uid = elementUtilities.generateEdgeId();
      var source = sifToJson.getNodeByName(srcName).data.id;
      var target = sifToJson.getNodeByName(tgtName).data.id;
      edge = {};
      edge.data = {
        id: uid,
        pcIDSet: pcIDSet,
        siteLocSet: siteLocSet,
        source: source,
        target: target,
        "class": type
      };
      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);
      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);
      sifToJson.mapEdgeToKey(edge, key);
      sifToJson.graphData.edges.push(edge);
    }

    return edge;
  };

  sifToJson.getNodeClass = function (edgeType, role) {
    var type;

    switch (edgeType) {
      case 'controls-production-of':
      case 'controls-transport-of-chemical':
        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';
        break;

      case 'consumption-controled-by':
      case 'chemical-affects':
        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';
        break;

      case 'reacts-with':
      case 'used-to-produce':
        type = 'SIF simple chemical';
        break;

      default:
        type = 'SIF macromolecule';
        break;
    }

    return type;
  };

  sifToJson.getMapProperty = function (propName) {
    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];
  };

  sifToJson.mapPropertiesToObj = function () {
    return {
      mapProperties: {
        dynamicLabelSize: 'large',
        adjustNodeLabelFontSizeAutomatically: true
      }
    };
  };

  return sifToJson;
};

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

function tdParser() {}

;

tdParser.getTabsArray = function (line) {
  return line.split('\t');
};

tdParser.getLinesArray = function (content) {
  var separator = /\r?\n|\r/;

  var notEmpty = function notEmpty(line) {
    return line !== '';
  };

  return content.split(separator).filter(notEmpty);
};

module.exports = tdParser;

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var libsbgnjs = __webpack_require__(/*! libsbgn.js */ "libsbgn.js");

var parseString = __webpack_require__(/*! xml2js */ "xml2js").parseString;

var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var classes = __webpack_require__(/*! ./classes */ "./src/utilities/classes.js");

module.exports = function () {
  var elementUtilities;

  function tdToJson(param) {
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions();
    elementUtilities = param.elementUtilities;
  }

  tdToJson.map = undefined;
  tdToJson.edgeTypes = {
    'positive influence': true,
    'negative influence': true,
    'unknown influence': true,
    'necassary influence': true,
    'logic arcs': true,
    'equivalance arcs': true
  };
  tdToJson.nodeTypes = {
    'biological activity': 'BA plain',
    'macromolecule': 'BA macromolecule',
    'complex': 'BA complex',
    'simple chemical': 'BA simple chemical',
    'unspecified entity': 'BA unspecified entity',
    'nucleic acid feature': 'BA nucleic acid feature',
    'perturbing agent': 'BA perturbing agent',
    'phenotype': 'phenotype',
    'compartment': 'compartment',
    'submap': 'submap',
    'tag': 'tag',
    'and': 'and',
    'or': 'or',
    'not': 'not',
    'delay': 'delay'
  };

  tdToJson.validateNodeType = function (type) {
    var _type = type.replace(/_/g, ' ').toLowerCase();

    return this.nodeTypes.hasOwnProperty(_type);
  };

  tdToJson.validateEdgeType = function (type) {
    var _type = type.replace(/_/g, ' ').toLowerCase();

    return this.edgeTypes.hasOwnProperty(_type);
  };

  tdToJson.convertTypeToClass = function (ele, type, isNode) {
    var _type = type.replace(/_/g, ' ').toLowerCase();

    ele.data["class"] = isNode ? this.nodeTypes[_type] : _type;
  };

  tdToJson.mapPropertiesToObj = function () {
    return {
      mapProperties: this.map.mapProperties
    };
  };
  /**
   * Adds states and infobox information to given node
   * @param node : a node object
   */


  tdToJson.addInfoBox = function (node) {
    var _class = node.data["class"];

    if (_class.startsWith("BA") && _class != "BA plain") {
      var unitOfInformation = classes.UnitOfInformation.construct();
      unitOfInformation.parent = node.data.id; // file format does not contain bbox information, hence define them below

      unitOfInformation.bbox = {
        x: 25,
        y: -50,
        w: 30,
        h: 12
      };
      classes.UnitOfInformation.setAnchorSide(unitOfInformation);
      node.data.statesandinfos = [unitOfInformation];
    } else {
      node.data.statesandinfos = [];
    }
  };

  tdToJson.convert = function (graphText) {
    elementUtilities.fileFormat = 'td';

    if (graphText === undefined) {
      return {
        nodes: [],
        edges: []
      };
    } else {
      var map = {};
      var nodes = []; //Holds nodes

      var edges = []; //Holds edges

      this.map = map; //Define the line separator
      // \r\n, \n and \r line separators

      var separator = /\r?\n|\r/;
      var lines = graphText.toString().split(separator);
      var graphDataIndex = 4; //graph data starts at index 4

      var edgesStartIndex = -1; //unkown at the begining

      var formatVersion = lines[0];

      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {
        throw "Wrong file format!";
      }

      if (formatVersion.length == 10) {
        formatVersion = formatVersion + " 1.0"; //default 1.0
      }

      var title = lines[1];
      var description = lines[2]; //Second element of the format version specifies map language

      var mapLanguage = formatVersion.toString().split(" ")[1];
      elementUtilities.mapType = mapLanguage;
      map.mapProperties = {};
      map.mapProperties.mapDescription = description;
      map.mapProperties.mapName = title; //start to parse the graph

      for (var i = graphDataIndex; i < lines.length; i++) {
        //blank line indicates that nodes are finished
        //so continue with edges
        if (lines[i].length === 0 || lines[i] === "") {
          while (lines[i] === "" && i < lines.length) {
            i++;
          }

          edgesStartIndex = i + 2;
          break;
        } //Parse the node data


        var data = lines[i].toString().split('\t'); //each data seperated by tab

        var nodeName = data[0]; //If there is no blank line

        if (nodeName.toString().toLowerCase() == '--edge_id') {
          edgesStartIndex = i + 1;
          break;
        }

        var nodeId = data[1];
        var nodeType = data[2];
        var parentID = data[3];
        var posX = data.length > 4 ? data[4] : "0"; //if posX not given

        var posY = data.length > 5 ? data[5] : "0"; //if posY not given

        var nodeWidth = data.length > 6 ? data[6] : undefined;
        var nodeHeight = data.length > 7 ? data[7] : undefined; //add parsed Node

        var newNode = {
          group: 'nodes',
          data: {
            id: nodeId,
            label: nodeName,
            ports: [],
            bbox: {
              x: parseFloat(posX),
              y: parseFloat(posY),
              w: nodeWidth,
              h: nodeHeight
            }
          }
        };

        if (this.validateNodeType(nodeType)) {
          this.convertTypeToClass(newNode, nodeType, true);
          this.addInfoBox(newNode);
        } else {
          throw "Node type mismatched...";
        }

        if (parentID != '-1') {
          newNode.data.parent = parentID;
        }

        if (newNode.data["class"]) {
          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data["class"]);

          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {
            var defaults = elementUtilities.getDefaultProperties(newNode.data["class"]);
            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;
            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;
          }
        }

        nodes.push(newNode);
      } //Start parsing edges


      for (var i = edgesStartIndex; i < lines.length; i++) {
        //EOF finish loop
        if (lines[i].length === 0) {
          break;
        }

        var data = lines[i].toString().split('\t');
        var edgeID = data[0];
        var edgeSource = data[1];
        var edgeTarget = data[2];
        var edgeType = data[3];
        var newEdge = {
          group: 'edges',
          data: {
            id: edgeID,
            source: edgeSource,
            target: edgeTarget
          }
        };
        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {
          throw "Edge Type mismatched...";
        }
        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data["class"]);
        edges.push(newEdge);
      }

      var jsGraph = {};
      jsGraph.nodes = nodes;
      jsGraph.edges = edges;
      return jsGraph;
    }
  };

  return tdToJson;
};

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

/*
 * Text utilities for common usage
 */
var textUtilities = {
  // same purpose as previous one, but with clearer responsibility
  truncate: function truncate(text, font, width) {
    text = text + "";
    var context = document.createElement('canvas').getContext("2d");
    context.font = font; // check trivial case first, when entire text is already small enough

    if (context.measureText(text).width < width) {
      return text;
    } else {
      var ellipsis = ".."; // if ellipsis alone is already too large

      if (context.measureText(ellipsis).width > width) {
        return "";
      }

      var finalLength; // this should always have a value after the loop

      for (var i = 0; i < text.length; i++) {
        var subtext = text.substring(0, i) + ellipsis;

        if (context.measureText(subtext).width > width) {
          // we're too far, take the previous index
          finalLength = i > 0 ? i - 1 : 0;
          break;
        }
      }

      return text.substring(0, finalLength) + ellipsis;
    }
  },
  // ensure that returned string follows xsd:ID standard
  // should follow r'^[a-zA-Z_][\w.-]*$'
  getXMLValidId: function getXMLValidId(originalId) {
    var newId = "";
    var xmlValidRegex = /^[a-zA-Z_][\w.-]*$/;

    if (!xmlValidRegex.test(originalId)) {
      // doesn't comply
      newId = originalId;
      newId = newId.replace(/[^\w.-]/g, "");

      if (!xmlValidRegex.test(newId)) {
        // still doesn't comply
        newId = "_" + newId;

        if (!xmlValidRegex.test(newId)) {
          // normally we should never enter this
          // if for some obscure reason we still don't comply, throw error.
          throw new Error("Can't make identifer comply to xsd:ID requirements: " + newId);
        }
      }

      return newId;
    } else {
      return originalId;
    }
  },
  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {
    var DEFAULT_MARGIN = 5;
    var lines = content.split("\n");
    var context = document.createElement('canvas').getContext('2d'); // should not make type check so '===' should not be used here

    var shouldAppend = parseFloat(fontSize) == fontSize;
    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;
    context.font = validFontSize + ' ' + fontFamily;
    var width = 0;
    lines.forEach(function (line) {
      var w = context.measureText(line).width;

      if (w > width) {
        width = w;
      }
    });
    var margin = options && options.margin;

    if (margin == null) {
      margin = DEFAULT_MARGIN;
    }

    width += 2 * margin;
    var min = options && options.min;
    var max = options && options.max;

    if (min != null && width < min) {
      width = min;
    } else if (max != null && width > max) {
      width = max;
    }

    return width;
  },
  FromKebabToCamelCase: function FromKebabToCamelCase(input) {
    return input.replace(/(-\w)/g, function (m) {
      return m[1].toUpperCase();
    });
  },
  FromCamelToKebabCase: function FromCamelToKebabCase(input) {
    return input.replace(/[\w]([A-Z])/g, function (m) {
      return m[0] + "-" + m[1];
    }).toLowerCase();
  }
};
module.exports = textUtilities;

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
* Commonly needed UI Utilities
*/
var libUtilities = __webpack_require__(/*! ./lib-utilities */ "./src/utilities/lib-utilities.js");

var libs = libUtilities.getLibs();
var jQuery = $ = libs.jQuery;

module.exports = function () {
  var optionUtilities;
  var options;

  function uiUtilities(param) {
    optionUtilities = param.optionUtilities;
    options = optionUtilities.getOptions();
  }

  uiUtilities.startSpinner = function (className) {
    if (!className) {
      className = 'default-class';
    }

    if ($('.' + className).length === 0) {
      var containerWidth = $(options.networkContainerSelector).width();
      var containerHeight = $(options.networkContainerSelector).height();
      $(options.networkContainerSelector + ':parent').prepend('<i style="position: absolute; z-index: 9999999; left: ' + containerWidth / 2 + 'px; top: ' + containerHeight / 2 + 'px;" class="fa fa-spinner fa-spin fa-3x fa-fw ' + className + '"></i>');
    }
  };

  uiUtilities.endSpinner = function (className) {
    if (!className) {
      className = 'default-class';
    }

    if ($('.' + className).length > 0) {
      $('.' + className).remove();
    }
  };

  return uiUtilities;
};

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

/*
 * This file exports the functions to be utilized in undoredo extension actions
 */
module.exports = function () {
  var elementUtilities;
  var experimentalDataOverlay;
  var mainUtilities;
  var cy;

  function undoRedoActionFunctions(param) {
    elementUtilities = param.elementUtilities;
    experimentalDataOverlay = param.experimentalDataOverlay;
    mainUtilities = param.mainUtilities;
    cy = param.sbgnCyInstance.getCy();
  }

  undoRedoActionFunctions.deleteElesSimple = function (param) {
    return elementUtilities.deleteElesSimple(param.eles);
  };

  undoRedoActionFunctions.restoreEles = function (eles) {
    var param = {};
    param.eles = elementUtilities.restoreEles(eles);
    return param;
  };

  undoRedoActionFunctions.deleteNodesSmart = function (param) {
    if (param.firstTime) {
      return elementUtilities.deleteNodesSmart(param.eles);
    }

    return elementUtilities.deleteElesSimple(param.eles);
  };

  undoRedoActionFunctions.setPortsOrdering = function (param) {
    var nodes = param.nodes;
    var ordering = param.ordering;
    var portDistance = param.portDistance;
    var connectedEdges = nodes.connectedEdges();
    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.

    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.
    // Fill node/edge prop maps for undo/redo actions
    // Node prop map includes a copy of node ports

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var ports = node.data('ports');
      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering

      var portsCopy = ports.length === 2 ? [{
        id: ports[0].id,
        x: ports[0].x,
        y: ports[0].y
      }, {
        id: ports[1].id,
        x: ports[1].x,
        y: ports[1].y
      }] : [];
      nodePropMap[node.id()] = {
        ordering: currentOrdering,
        ports: portsCopy
      };
    } // Node prop map includes edge portsource and porttarget


    for (var i = 0; i < connectedEdges.length; i++) {
      var edge = connectedEdges[i];
      edgePropMap[edge.id()] = {
        portsource: edge.data('portsource'),
        porttarget: edge.data('porttarget')
      };
    }

    var result = {
      nodes: nodes,
      nodePropMap: nodePropMap,
      edgePropMap: edgePropMap
    }; // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges

    if (param.firstTime) {
      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);
    } else {
      cy.startBatch(); // Go back to stored node ports state

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var portsToReturn = param.nodePropMap[node.id()].ports;
        var orderingsToReturn = param.nodePropMap[node.id()].ordering;
        node.data('ports', portsToReturn);
        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering
      } // Go back to stored edge portsource/porttargets state


      for (var i = 0; i < connectedEdges.length; i++) {
        var edge = connectedEdges[i];
        var props = param.edgePropMap[edge.id()];
        edge.data('portsource', props.portsource);
        edge.data('porttarget', props.porttarget);
      }

      cy.endBatch();
    }

    return result;
  };

  undoRedoActionFunctions.hideExp = function (param) {
    var expName = param.expName;
    var fileName = param.fileName;
    return experimentalDataOverlay.hideExp(fileName, expName);
  };

  undoRedoActionFunctions.unhideExp = function (param) {
    var expName = param.expName;
    var fileName = param.fileName;
    return experimentalDataOverlay.unhideExp(fileName, expName);
  };

  undoRedoActionFunctions.hideAll = function () {
    return experimentalDataOverlay.hideAll();
  };

  undoRedoActionFunctions.hideAllUndo = function (param) {
    var invisibleFile = param.invisibleFile;
    var invisibleExp = param.invisibleExp;
    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);
  };

  undoRedoActionFunctions.unhideAll = function () {
    return experimentalDataOverlay.unhideAll();
  };

  undoRedoActionFunctions.unhideAllUndo = function (param) {
    var visibleFile = param.visibleFile;
    var visibleExp = param.visibleExp;
    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);
  };

  undoRedoActionFunctions.hideFile = function (param) {
    var fileName = param.fileName;
    return experimentalDataOverlay.hideFile(fileName);
  };

  undoRedoActionFunctions.hideFileUndo = function (param) {
    var fileName = param.fileName;
    var invisible = param.invisible;
    return experimentalDataOverlay.hideFileUndo(fileName, invisible);
  };

  undoRedoActionFunctions.unhideFile = function (param) {
    var fileName = param.fileName;
    return experimentalDataOverlay.unhideFile(fileName);
  };

  undoRedoActionFunctions.unhideFileUndo = function (param) {
    var fileName = param.fileName;
    var visible = param.visible;
    return experimentalDataOverlay.unhideFileUndo(fileName, visible);
  };

  undoRedoActionFunctions.addExp = function (param) {
    var fileName = param.fileName;
    var expName = param.expName;
    var isVisible = param.isVisible;
    var values = param.values;
    var groupArray = param.groupArray;
    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);
  };

  undoRedoActionFunctions.removeExp = function (param) {
    var fileName = param.fileName;
    var expName = param.expName;
    return experimentalDataOverlay.removeExp(fileName, expName);
  };

  undoRedoActionFunctions.addFile = function (param) {
    var fileName = param.fileName;
    var parsed = param.parsed;
    var grouped = param.grouped;
    var visible = param.visible;
    var visiblef = param.visiblef;
    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);
  };

  undoRedoActionFunctions.removeFile = function (param) {
    var fileName = param.fileName;
    return experimentalDataOverlay.removeFile(fileName);
  };

  undoRedoActionFunctions.removeAll = function (param) {
    return experimentalDataOverlay.removeAll();
  };

  undoRedoActionFunctions.restoreAll = function (param) {
    var parsed = param.parsed;
    var grouped = param.grouped;
    var visible = param.visible;
    var visiblef = param.visiblef;
    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);
  };

  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {
    var result = mainUtilities.getCompoundPadding();
    mainUtilities.setCompoundPadding(newPadding);
    return result;
  };

  return undoRedoActionFunctions;
};

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

/*
* Lookup object for valid map properties.
* In the future it could be combined with other similar properties/functions in a new file.
*/
module.exports = {
  compoundPadding: true,
  extraCompartmentPadding: true,
  extraComplexPadding: true,
  arrowScale: true,
  showComplexName: true,
  dynamicLabelSize: true,
  inferNestingOnLoad: true,
  fitLabelsToNodes: true,
  fitLabelsToInfoboxes: true,
  recalculateLayoutOnComplexityManagement: true,
  rearrangeOnComplexityManagement: true,
  animateOnDrawingChanges: true,
  adjustNodeLabelFontSizeAutomatically: true,
  enablePorts: true,
  allowCompoundNodeResize: true,
  mapColorScheme: true,
  mapColorSchemeStyle: true,
  mapName: true,
  mapDescription: true,
  enableSIFTopologyGrouping: true,
  experimentDescription: true
};

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"sbgnviz","version":"6.0.1","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"jquery":"^2.2.4","file-saver":"^2.0.2","cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","tippy.js":"^3.4.0"},"dependencies":{"libsbgn.js":"github:sbgn/libsbgn.js#develop","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^2.2.4","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.7.0","webpack-node-externals":"^3.0.0"}}');

/***/ }),

/***/ "console-browserify":
/*!*************************************!*\
  !*** external "console-browserify" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("console-browserify");;

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");;

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");;

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,