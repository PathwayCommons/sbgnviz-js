/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var sbgnviz = function sbgnviz(_options) {\n    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n\n    var options = optionUtilities.extendOptions(_options);\n\n    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ \"./src/sbgn-extensions/sbgn-cy-instance-factory.js\")(); // Utilities whose functions will be exposed seperately\n\n\n    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ \"./src/utilities/ui-utilities-factory.js\")();\n\n    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ \"./src/utilities/file-utilities-factory.js\")();\n\n    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ \"./src/utilities/graph-utilities-factory.js\")();\n\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n\n    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ \"./src/utilities/keyboard-input-utilities-factory.js\")(); // require keybord input utilities\n\n\n    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ \"./src/utilities/experimental-data-overlay.js\")(); // Utilities to be exposed as is\n\n\n    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n\n    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ \"./src/utilities/undo-redo-action-functions-factory.js\")(); // Other utilities\n\n\n    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ \"./src/utilities/json-to-sbgnml-converter-factory.js\")();\n\n    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ \"./src/utilities/json-to-nwt-converter-factory.js\")();\n\n    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ \"./src/utilities/sbgnml-to-json-converter-factory.js\")();\n\n    var sbmlToJsonConverter = __webpack_require__(/*! ./utilities/sbml-to-json-converter-factory */ \"./src/utilities/sbml-to-json-converter-factory.js\")();\n\n    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ \"./src/utilities/nwt-to-json-converter-factory.js\")();\n\n    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ \"./src/utilities/tab-delimited-to-json-converter-factory.js\")();\n\n    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ \"./src/utilities/sif-to-json-converter-factory.js\")();\n\n    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ \"./src/utilities/json-to-sif-converter-factory.js\")();\n\n    var classes = __webpack_require__(/*! ./utilities/classes */ \"./src/utilities/classes.js\");\n\n    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\n    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ \"./src/utilities/layout-loader-factory.js\")();\n\n    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ \"./src/utilities/layout-to-text-factory.js\")();\n\n    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ \"./src/utilities/cd-to-sbgnml-converter-factory.js\")();\n\n    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ \"./src/utilities/sbgnml-to-cd-converter-factory.js\")();\n\n    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ \"./src/utilities/sbgnml-to-sbml-converter-factory.js\")();\n\n    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ \"./src/utilities/sbml-to-sbgnml-converter-factory.js\")(); // Fill param object to use it utilities internally\n\n\n    param.optionUtilities = optionUtilities;\n    param.sbgnCyInstance = sbgnCyInstance;\n    param.uiUtilities = uiUtilities;\n    param.fileUtilities = fileUtilities;\n    param.graphUtilities = graphUtilities;\n    param.mainUtilities = mainUtilities;\n    param.keyboardInputUtilities = keyboardInputUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;\n    param.jsonToNwtConverter = jsonToNwtConverter;\n    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;\n    param.sbmlToJsonConverter = sbmlToJsonConverter;\n    param.nwtToJsonConverter = nwtToJsonConverter;\n    param.tdToJsonConverter = tdToJsonConverter;\n    param.sifToJsonConverter = sifToJsonConverter;\n    param.classes = classes;\n    param.layoutLoader = layoutLoader;\n    param.layoutToText = layoutToText;\n    param.jsonToSifConverter = jsonToSifConverter;\n    param.cdToSbgnmlConverter = cdToSbgnmlConverter;\n    param.sbgnmlToCdConverter = sbgnmlToCdConverter;\n    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;\n    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;\n    param.experimentalDataOverlay = experimentalDataOverlay; // call constructors of objects with param\n\n    sbgnCyInstance(param);\n    optionUtilities(param);\n    uiUtilities(param);\n    fileUtilities(param);\n    graphUtilities(param);\n    mainUtilities(param);\n    keyboardInputUtilities(param);\n    elementUtilities(param);\n    undoRedoActionFunctions(param);\n    jsonToSbgnmlConverter(param);\n    jsonToNwtConverter(param);\n    sbgnmlToJsonConverter(param);\n    sbmlToJsonConverter(param);\n    nwtToJsonConverter(param);\n    tdToJsonConverter(param);\n    sifToJsonConverter(param);\n    layoutLoader(param);\n    layoutToText(param);\n    jsonToSifConverter(param);\n    cdToSbgnmlConverter(param);\n    sbgnmlToCdConverter(param);\n    sbgnmlToSbmlConverter(param);\n    sbmlToSbgnmlConverter(param);\n    experimentalDataOverlay(param); // set scratch pad for sbgnviz and init sbgnvizParams inside it\n\n    sbgnCyInstance.getCy().scratch('_sbgnviz', {});\n    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param; // Expose the api\n\n    var api = {}; // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these\n\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions; //api.experimentalDataOverlay = experimentalDataOverlay;\n    //expose utility of experimental data-overlay\n\n    for (var prop in experimentalDataOverlay) {\n      api[prop] = experimentalDataOverlay[prop];\n    } // Expose each main utility seperately\n\n\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    } // Expose each file utility seperately\n\n\n    for (var prop in fileUtilities) {\n      api[prop] = fileUtilities[prop];\n    } // Expose each file utility seperately\n\n\n    for (var prop in uiUtilities) {\n      api[prop] = uiUtilities[prop];\n    } // Expose each sbgn graph utility seperately\n\n\n    for (var prop in graphUtilities) {\n      api[prop] = graphUtilities[prop];\n    } // Expose get cy function to enable accessing related cy instance\n\n\n    api.getCy = sbgnCyInstance.getCy; // Expose some utilities directly here\n\n    api.classes = classes;\n    api.tdParser = tdParser;\n    return api;\n  };\n\n  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ \"./src/utilities/validMapProperties.js\");\n\n  sbgnviz.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.tippy = _libs.tippy || Tippy; // Set the libraries to access them from any file\n\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\n    libUtilities.setLibs(libs);\n\n    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ \"./src/sbgn-extensions/sbgn-cy-renderer.js\");\n\n    sbgnRenderer();\n  };\n\n  if ( true && module.exports) {\n    module.exports = sbgnviz;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\n\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar Tippy = libs.tippy;\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;\n  var refreshPaddings, options, cy;\n\n  var sbgnCyInstance = function sbgnCyInstance(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions(); // cy = param.sbgnCyInstance.getCy();\n\n    /*\n     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.\n     */\n\n    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {\n      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian\n\n      return {\n        x: radius * Math.cos(angleInRadian) + centerX,\n        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system\n\n      };\n    };\n    /*\n     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle\n     */\n\n\n    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {\n      var circleStr = \"\";\n      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration\n\n      var currentAngle = angleFrom; // current angle will be updated in each iteration\n\n      for (var i = 0; i < numOfPoints; i++) {\n        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);\n        currentAngle += stepSize;\n        circleStr += point.x + \" \" + point.y + \" \";\n      }\n\n      return circleStr;\n    };\n    /*\n     *  Generates a string representing processes/logical operators with ports.\n     *  lineHW: Half width of line through the circle to the intersection point\n     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)\n     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'\n     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'\n     */\n\n\n    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {\n      var polygonStr;\n      var numOfPoints = 30; // Number of points that both halves of circle will have\n\n      if (orientation === 'horizontal') {\n        var abovePoints, belowPoints;\n\n        if (type === 'circle') {\n          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);\n          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);\n        } else if (type === 'rectangle') {\n          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n        }\n\n        polygonStr = \"-1 -\" + lineHW + \" -\" + shapeHW + \" -\" + lineHW + \" \";\n        polygonStr += abovePoints;\n        polygonStr += shapeHW + \" -\" + lineHW + \" 1 -\" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \" + lineHW + \" \";\n        polygonStr += belowPoints;\n        polygonStr += \"-\" + shapeHW + \" \" + lineHW + \" -1 \" + lineHW;\n      } else {\n        var leftPoints, rightPoints;\n\n        if (type === 'circle') {\n          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);\n          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);\n        } else if (type === 'rectangle') {\n          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n        }\n\n        polygonStr = \"-\" + lineHW + \" -\" + 1 + \" -\" + lineHW + \" -\" + shapeHW + \" \";\n        polygonStr += leftPoints;\n        polygonStr += \"-\" + lineHW + \" \" + shapeHW + \" -\" + lineHW + \" 1 \" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \";\n        polygonStr += rightPoints;\n        polygonStr += lineHW + \" -\" + shapeHW + \" \" + lineHW + \" -1\";\n      }\n\n      return polygonStr;\n    }; // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file\n\n\n    function registerUndoRedoActions() {\n      // create or get the undo-redo instance\n      var ur = cy.undoRedo(); // register general actions\n      // register add remove actions\n\n      ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n      ur.action(\"deleteNodesSmart\", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);\n      ur.action(\"setPortsOrdering\", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering); //experimental data ovarlay\n\n      ur.action(\"removeAll\", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);\n      ur.action(\"hideExperiment\", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);\n      ur.action(\"unhideExperiment\", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);\n      ur.action(\"hideFile\", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);\n      ur.action(\"unhideFile\", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);\n      ur.action(\"removeExperiment\", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);\n      ur.action(\"removeFile\", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);\n      ur.action(\"expButtonChange\", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);\n      ur.action(\"fileButtonChangeHide\", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);\n      ur.action(\"fileButtonChangeUnHide\", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide); //ur.action(\"expButtonUnhide\", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);\n      //ur.action(\"parseData\", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);\n    }\n\n    function showTooltip(event) {\n      var node = event.target || event.cyTarget;\n\n      var canHaveTooltip = function canHaveTooltip(node) {\n        return elementUtilities.isSIFNode(node) || node.data(\"tooltip\") !== null;\n      };\n\n      if (!canHaveTooltip(node)) {\n        return;\n      }\n\n      var ref; // used only for positioning\n\n      var pos = event.position || event.cyPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);\n      var tooltipContent;\n\n      if (!infobox) {\n        tooltipContent = node.data('tooltip');\n\n        if (tooltipContent == undefined || tooltipContent == '') {\n          return;\n        }\n\n        ref = node.popperRef();\n      } else {\n        tooltipContent = infobox['tooltip'];\n\n        if (tooltipContent == undefined) {\n          return;\n        }\n\n        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);\n        var modelW = infobox.bbox.w;\n        var modelH = infobox.bbox.h;\n        var renderedW = modelW * zoom;\n        var renderedH = modelH * zoom;\n        modelPos.x -= modelW / 2;\n        modelPos.y -= modelH / 2;\n        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);\n        var renderedDims = {\n          w: renderedW,\n          h: renderedH\n        };\n        ref = node.popperRef({\n          renderedPosition: function renderedPosition() {\n            return renderedPos;\n          },\n          renderedDimensions: function renderedDimensions() {\n            return renderedDims;\n          }\n        });\n      }\n\n      var placement = infobox ? infobox.anchorSide : 'bottom';\n      var destroyTippy;\n      var tippy = Tippy.one(ref, {\n        content: function () {\n          var content = document.createElement('div');\n          content.style['font-size'] = 12 * zoom + 'px';\n          content.innerHTML = tooltipContent;\n          return content;\n        }(),\n        trigger: 'manual',\n        hideOnClick: true,\n        arrow: true,\n        placement: placement,\n        onHidden: function onHidden() {\n          cy.off('pan zoom', destroyTippy);\n          node.off('position', destroyTippy);\n          cy.off('tapdrag', destroyTippy);\n        }\n      });\n\n      destroyTippy = function destroyTippy() {\n        tippy.destroy();\n      };\n\n      cy.on('pan zoom', destroyTippy);\n      node.on('position', destroyTippy);\n      cy.on('tapdrag', destroyTippy);\n      setTimeout(function () {\n        return tippy.show();\n      }, 250);\n    }\n\n    function bindCyEvents() {\n      cy.on('tapdragover', 'node', function (event) {\n        var waitDuration = 200;\n        var nodeTapdragout;\n        var currEvent = event;\n        var node = currEvent.target || currEvent.cyTarget;\n        var inQueue = true;\n\n        var clearNodeEvent = function clearNodeEvent() {\n          if (nodeTapdragout) {\n            node.off('tapdragout', nodeTapdragout);\n          }\n\n          if (nodeTapdrag) {\n            node.off('tapdrag', nodeTapdrag);\n          }\n        };\n\n        var getShowTooltipAsycn = function getShowTooltipAsycn() {\n          return setTimeout(function () {\n            showTooltip(currEvent);\n            inQueue = false;\n          }, waitDuration);\n        };\n\n        var showTooltipAsycn = getShowTooltipAsycn();\n        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {\n          clearTimeout(showTooltipAsycn);\n          clearNodeEvent();\n        });\n        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {\n          currEvent = e;\n\n          if (!inQueue) {\n            showTooltipAsycn = getShowTooltipAsycn();\n            inQueue = true;\n          }\n        });\n      });\n      cy.on('tapend', 'node', function (event) {\n        cy.style().update();\n      });\n      cy.on(\"expandcollapse.beforecollapse\", \"node\", function (event) {\n        var node = this; //The children info of complex nodes should be shown when they are collapsed\n\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          //The node is being collapsed store infolabel to use it later\n          var infoLabel = elementUtilities.getInfoLabel(node);\n          node._private.data.infoLabel = infoLabel;\n        }\n      });\n      cy.on(\"expandcollapse.aftercollapse\", \"node\", function (event) {\n        var node = this; // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we\n        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).\n\n        cy.startBatch();\n        var bbox = node.data('bbox');\n        bbox.w = 36;\n        bbox.h = 36;\n        node.data('bbox', bbox);\n        cy.endBatch();\n      });\n      cy.on(\"expandcollapse.beforeexpand\", \"node\", function (event) {\n        var node = this;\n        node.removeData(\"infoLabel\");\n      });\n      cy.on(\"expandcollapse.afterexpand\", \"node\", function (event) {\n        var node = this;\n        cy.nodes().updateCompoundBounds();\n\n        if (!options.recalculateOnComplexityManagement) {\n          cy.style().update();\n        } //Don't show children info when the complex node is expanded\n\n\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          node.removeStyle('content');\n        }\n      });\n      cy.on(\"beforeDo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports = ports;\n          args.viewport = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n          if (name == \"layout\") mainUtilities.beforePerformLayout();\n        }\n      });\n      cy.on(\"beforeRedo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterDo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements;\n          res.ports = args.ports;\n          res.viewport = args.viewport;\n        }\n      });\n      cy.on(\"afterRedo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on(\"beforeUndo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterUndo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on('layoutstop', function (event) {\n        /*\n        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.\n        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.\n        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')\n        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'\n        */\n        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {\n          if (graphUtilities.portsEnabled === true) {\n            elementUtilities.changePortsOrientationAfterLayout();\n          }\n        }\n      });\n      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {\n        // if the event is not triggered for this cy instance return directly\n        if (_cy != cy) {\n          return;\n        }\n\n        var setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {\n          if (cyInstance == undefined) return;\n\n          if (node.data().infoboxCalculated) {\n            return;\n          } else if (node.isParent()) {\n            node.children().forEach(function (childNode) {\n              setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);\n            });\n          }\n\n          node.data(\"infoboxCalculated\", true);\n          node.data('auxunitlayouts', {}); // for each statesandinfos\n\n          var correctInfoBoxCoord = true;\n\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;\n          }\n\n          var statesToAdd = [];\n\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n\n            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {\n              classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node); //var fileLoadParam = {extraPadding:  Number(node.data().originalPadding)};\n\n              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);\n              statesandinfos.bbox.x = cordResult.x;\n              statesandinfos.bbox.y = cordResult.y;\n              statesandinfos.isDisplayed = true;\n              var location = statesandinfos.anchorSide; // top bottom right left\n\n              var layouts = node.data('auxunitlayouts');\n\n              if (!layouts[location]) {\n                // layout doesn't exist yet for this location\n                layouts[location] = classes.AuxUnitLayout.construct(node, location);\n              } // populate the layout of this side\n\n\n              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed\n            } else {\n              if (!node.data('auxunitlayouts')) {\n                // ensure minimal initialization\n                node.data('auxunitlayouts', {});\n              }\n\n              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);\n\n              if (!node.data('auxunitlayouts')[location]) {\n                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n\n              var layout = node.data('auxunitlayouts')[location];\n              statesandinfos.anchorSide = location;\n\n              switch (location) {\n                case \"top\":\n                  statesandinfos.bbox.y = 0;\n                  break;\n\n                case \"bottom\":\n                  statesandinfos.bbox.y = 100;\n                  break;\n\n                case \"left\":\n                  statesandinfos.bbox.x = 0;\n                  break;\n\n                case \"right\":\n                  statesandinfos.bbox.x = 100;\n                  break;\n              }\n\n              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);\n            }\n          }\n\n          if (isLayoutRequired === true) {\n            var locations = classes.AuxUnitLayout.checkFit(node, cy);\n\n            if (locations !== undefined && locations.length > 0) {\n              classes.AuxUnitLayout.fitUnits(node, cy, locations);\n            }\n          }\n        }; // list all entitytypes andstore them in the global scratch\n        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned\n        // following is unapplied due to performance decreasing, adding something like 20% time on load\n\n        /*cy.startBatch();\n        var entityHash = {};\n        cy.nodes(\"[class='complex'], [class='macromolecule'], [class='nucleic acid feature']\").forEach(function(node) {\n          // identify an entity by its label AND class\n          var label = node.data('label');\n          var _class = node.data('class');\n          var id=label+'-'+_class;\n          if(!entityHash.hasOwnProperty(id)) { // create entitytype if doesn't already exist\n            entityHash[id] = new classes.EntityType(id);\n          }\n          var currentEntityType = entityHash[id];\n          currentEntityType.EPNs.push(node); // assigne the current element to its corresponding entitytype\n           // collect all stateVariables of the current element, we need to assign StateVariableDefinitions to them\n          for(var i=0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            if(statesandinfos instanceof classes.StateVariable) { // stateVariable found\n              var currentStateVariable = statesandinfos;\n              currentEntityType.assignStateVariable(currentStateVariable);\n            }\n          }\n        });\n        cy.endBatch();\n        cy.scratch('_sbgnviz', {SBGNEntityTypes: entityHash});*/\n        // assign statesandinfos to their layout\n\n\n        cy.style().update(); // cy.startBatch();\n\n        cy.nodes().forEach(function (node) {\n          setCompoundInfoboxes(node, isLayoutRequired, cy);\n        });\n\n        if (callback) {\n          callback();\n        } //cy.endBatch();\n\n      });\n    }\n\n    var selectionColor = '#d67614';\n    var sbgnStyleSheet = cytoscape.stylesheet().selector(\"node\").css({\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'text-opacity': 1,\n      'opacity': 1,\n      'padding': 0\n    }).selector(\"node[class]\").css({\n      'shape': function shape(ele) {\n        return elementUtilities.getCyShape(ele);\n      },\n      'content': function content(ele) {\n        return elementUtilities.getElementContent(ele);\n      },\n      'font-size': function fontSize(ele) {\n        // If node labels are expected to be adjusted automatically or element cannot have label\n        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()\n        // else return ele.data('font-size')\n        var opt = options.adjustNodeLabelFontSizeAutomatically;\n        var adjust = typeof opt === 'function' ? opt() : opt;\n\n        if (!adjust && ele.data('font-size') != undefined) {\n          return ele.data('font-size');\n        }\n\n        return elementUtilities.getLabelTextSize(ele);\n      }\n    }).selector(\"node[class][font-family]\").style({\n      'font-family': function fontFamily(ele) {\n        return ele.data('font-family');\n      }\n    }).selector(\"node[class][font-style]\").style({\n      'font-style': function fontStyle(ele) {\n        return ele.data('font-style');\n      }\n    }).selector(\"node[class][font-weight]\").style({\n      'font-weight': function fontWeight(ele) {\n        return ele.data('font-weight');\n      }\n    }).selector(\"node[class][color]\").style({\n      'color': function color(ele) {\n        return ele.data('color');\n      }\n    }).selector(\"node[class][background-color]\").style({\n      'background-color': function backgroundColor(ele) {\n        return ele.data('background-color');\n      }\n    }).selector(\"node[class][background-opacity]\").style({\n      'background-opacity': function backgroundOpacity(ele) {\n        return ele.data('background-opacity');\n      }\n    }).selector(\"node[class][border-width]\").style({\n      'border-width': function borderWidth(ele) {\n        return ele.data('border-width');\n      }\n    }).selector(\"node[class][border-color]\").style({\n      'border-color': function borderColor(ele) {\n        return ele.data('border-color');\n      }\n    }).selector(\"node[class][text-wrap]\").style({\n      'text-wrap': function textWrap(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n\n        if (isFit) {\n          return 'ellipsis';\n        }\n\n        return ele.data('text-wrap');\n      }\n    }).selector(\"node\").style({\n      'text-max-width': function textMaxWidth(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n\n        if (isFit) {\n          return ele.width();\n        }\n\n        return '1000px';\n      }\n    }).selector(\"edge[class][line-color]\").style({\n      'line-color': function lineColor(ele) {\n        return ele.data('line-color');\n      },\n      'source-arrow-color': function sourceArrowColor(ele) {\n        return ele.data('line-color');\n      },\n      'target-arrow-color': function targetArrowColor(ele) {\n        return ele.data('line-color');\n      }\n    }).selector(\"edge[class][width]\").style({\n      'width': function width(ele) {\n        return ele.data('width');\n      }\n    }).selector(\"node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process'],[class='truncated process'],[class='unknown logical operator']\").css({\n      'shape-polygon-points': function shapePolygonPoints(ele) {\n        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us\n          var port = ele.data('ports')[0]; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'\n\n          var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // The half width of the actual shape discluding the ports\n\n          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x); // Get the class of the node\n\n          var _class = ele.data('class'); // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'\n\n\n          var type = _class.endsWith('process') ? 'rectangle' : 'circle'; // Generate a polygon string with above parameters and return it\n\n          return generateShapeWithPortString(0.01, shapeHW, type, orientation);\n        } // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug\n\n\n        return '-1 -1 1 1 1 0';\n      }\n    }).selector(\"node[class='perturbing agent']\").css({\n      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'\n    }).selector(\"node[class='tag']\").css({\n      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'\n    }).selector(\"node:parent[class^='complex']\") // start with complex\n    .css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': elementUtilities.getComplexMargin,\n      'padding': elementUtilities.getComplexPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node[class='compartment']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='compartment']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node[class='submap']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='submap'],[class='topology group']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node:childless[bbox]\").css({\n      'width': 'data(bbox.w)',\n      'height': 'data(bbox.h)'\n    }).selector(\"node:parent[minHeight]\").css({\n      'min-height': function minHeight(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minHeight');\n        }\n\n        return 0;\n      }\n    }).selector(\"node:parent[minHeightBiasTop]\").css({\n      'min-height-bias-top': function minHeightBiasTop(ele) {\n        var min = parseFloat(ele.data('minHeightBiasTop'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minHeightBiasBottom]\").css({\n      'min-height-bias-bottom': function minHeightBiasBottom(ele) {\n        var min = parseFloat(ele.data('minHeightBiasBottom'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidth]\").css({\n      'min-width': function minWidth(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minWidth');\n        }\n\n        return 0;\n      }\n    }).selector(\"node:parent[minWidthBiasLeft]\").css({\n      'min-width-bias-left': function minWidthBiasLeft(ele) {\n        var min = parseFloat(ele.data('minWidthBiasLeft'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidthBiasRight]\").css({\n      'min-width-bias-right': function minWidthBiasRight(ele) {\n        var min = parseFloat(ele.data('minWidthBiasRight'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node.cy-expand-collapse-collapsed-node\").css({\n      'border-style': 'dashed'\n    }).selector(\"node:selected\").css({\n      'border-color': selectionColor,\n      'target-arrow-color': '#000',\n      'text-outline-color': '#000',\n      'border-width': function borderWidth(ele) {\n        return Math.max(parseFloat(ele.data('border-width')) + 2, 3);\n      }\n    }).selector(\"node:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '14'\n    }).selector(\"edge\").css({\n      'curve-style': 'bezier',\n      'target-arrow-fill': function targetArrowFill(ele) {\n        return elementUtilities.getCyTargetArrowFill(ele);\n      },\n      'source-arrow-fill': 'hollow',\n      'text-border-color': function textBorderColor(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n\n        return ele.css('line-color');\n      },\n      'color': function color(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n\n        return ele.css('line-color');\n      },\n      'arrow-scale': 1.25\n    }).selector(\"edge.cy-expand-collapse-meta-edge\").css({\n      'line-color': '#C4C4C4',\n      'source-arrow-color': '#C4C4C4',\n      'target-arrow-color': '#C4C4C4'\n    }).selector(\"edge:selected\").css({\n      'line-color': selectionColor,\n      'source-arrow-color': selectionColor,\n      'target-arrow-color': selectionColor,\n      'width': function width(ele) {\n        return Math.max(parseFloat(ele.data('width')) + 2, 3);\n      }\n    }).selector(\"edge:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '8'\n    }).selector(\"edge[cardinality > 0]\").css({\n      'text-rotation': 'autorotate',\n      'text-background-shape': 'rectangle',\n      'text-border-opacity': '1',\n      'text-border-width': '1',\n      'text-background-color': 'white',\n      'text-background-opacity': '1'\n    }).selector(\"edge[class='consumption'][cardinality > 0]\").css({\n      'source-label': function sourceLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'source-text-margin-y': '-10',\n      'source-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class='production'][cardinality > 0]\").css({\n      'target-label': function targetLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'target-text-margin-y': '-10',\n      'target-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class]\").css({\n      'target-arrow-shape': function targetArrowShape(ele) {\n        return elementUtilities.getCyArrowShape(ele);\n      },\n      'source-arrow-shape': 'none',\n      'source-endpoint': function sourceEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'source');\n      },\n      'target-endpoint': function targetEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'target');\n      },\n      'line-style': function lineStyle(ele) {\n        return elementUtilities.getArrayLineStyle(ele);\n      },\n      'line-dash-pattern': function lineDashPattern(ele) {\n        return elementUtilities.getArrayLineDashStyle(ele);\n      }\n    }).selector(\"core\").css({\n      'selection-box-color': selectionColor,\n      'selection-box-opacity': '0.2',\n      'selection-box-border-color': selectionColor\n    });\n    var sbgnNetworkContainer = $(options.networkContainerSelector); // create and init cytoscape:\n\n    cytoscape({\n      container: sbgnNetworkContainer,\n      style: sbgnStyleSheet,\n      showOverlay: false,\n      minZoom: 0.125,\n      maxZoom: 16,\n      boxSelectionEnabled: true,\n      motionBlur: true,\n      wheelSensitivity: 0.1,\n      ready: function ready() {\n        cy = this; // If undoable register undo/redo actions\n\n        if (options.undoable) {\n          registerUndoRedoActions();\n        }\n\n        bindCyEvents();\n      }\n    });\n  };\n\n  sbgnCyInstance.getCy = function () {\n    return cy;\n  };\n\n  return sbgnCyInstance;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-instance-factory.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Render sbgn specific shapes which are not supported by cytoscape.js core\n */\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar cyMath = math = cytoscape.math;\nvar cyBaseNodeShapes = cytoscape.baseNodeShapes;\nvar cyStyleProperties = cytoscape.styleProperties;\n\nvar classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var _$$$sbgn$plainInterse;\n\n  var $$ = cytoscape;\n  /*\n  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz\n  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke\n  * border more than once as they would have infoboxes, multimers etc.\n  * Extends the style properties of node with the given ones then strokes the border.\n  * Would needed to be slightly updated during cytoscape upgrades if related function in\n  * Cytoscape.js is updated. Information about where is the related function is located\n  * can be found in the file that list the changes done in ivis cytoscape fork.\n  */\n\n  $$.sbgn.drawBorder = function (_ref) {\n    var context = _ref.context,\n        node = _ref.node,\n        borderWidth = _ref.borderWidth,\n        borderColor = _ref.borderColor,\n        borderStyle = _ref.borderStyle,\n        borderOpacity = _ref.borderOpacity;\n    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));\n\n    if (borderWidth > 0) {\n      var parentOpacity = node && node.effectiveOpacity() || 1;\n      borderStyle = borderStyle || node && node.css('border-style');\n      borderColor = borderColor || node && node.css('border-color');\n      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;\n      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];\n      var initialProps = {};\n      propsToRestore.forEach(function (propName) {\n        initialProps[propName] = context[propName];\n      });\n      context.lineWidth = borderWidth;\n      context.lineCap = 'butt';\n      context.strokeStyle = borderColor;\n      context.globalAlpha = borderOpacity;\n\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n\n      context.stroke();\n\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        context.stroke();\n        context.globalCompositeOperation = gco;\n      } // reset in case we changed the border style\n\n\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n\n      propsToRestore.forEach(function (propName) {\n        context[propName] = initialProps[propName];\n      });\n    }\n  }; // Taken from cytoscape.js and modified\n\n\n  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    context.closePath(); //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n\n  var drawProteinPath = $$.sbgn.drawProtein = function (context, x, y, width, height, activePadding1) {\n    var halfWidth = (width + activePadding1) / 2;\n    var halfHeight = (height + activePadding1) / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    context.closePath(); //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n\n  var drawReceptorPath = $$.sbgn.drawReceptor = function (context, x, y, width, height, activePadding1) {\n    var halfPadding = activePadding1 ? activePadding1 / 2 : 0; //var points= [-1, -1,   0, -0.5,   1, -1,   1, 0.5,   0, 1,   -1,  0.5 ];\n\n    var halfW = width / 2;\n    var halfH = height / 2;\n\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    context.moveTo(x + halfW * -1 - halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 0, y + halfH * -0.5 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * 0.5 + halfPadding);\n    context.lineTo(x + halfW * 0, y + halfH * 1 + 3 * halfPadding / 2);\n    context.lineTo(x + halfW * -1 - halfPadding, y + halfH * 0.5 + halfPadding);\n    context.closePath();\n  };\n\n  var drawRoundedDrugPath = $$.sbgn.drawRoundedDrug = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    var halfWidthInner = width / 2 - 5;\n    var halfHeightInner = height / 2 - 5;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height); // Start at top middle\n\n    context.moveTo(x, y - halfHeightInner); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidthInner, y - halfHeightInner, x + halfWidthInner, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidthInner, y + halfHeightInner, x, y + halfHeightInner, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidthInner, y + halfHeightInner, x - halfWidthInner, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidthInner, y - halfHeightInner, x, y - halfHeightInner, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeightInner);\n    context.closePath();\n  }; // Taken from cytoscape.js\n\n\n  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {\n    var halfW = width / 2;\n    var halfH = height / 2;\n\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n    }\n\n    context.closePath();\n  };\n\n  var sbgnShapes = $$.sbgn.sbgnShapes = {\n    'empty set': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'macromolecule': true,\n    'simple chemical': true,\n    'biological activity': true,\n    'compartment': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'receptor': true,\n    'ion': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true,\n    'degradation': true\n  };\n  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'gene': true,\n    'rna': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'complex sbml': true\n  };\n  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {\n    'simple chemical': true,\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'receptor': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'complex sbml': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'phenotype sbml': true,\n    'drug': true,\n    'ion': true,\n    'degradation': true\n  };\n  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {\n    'macromolecule': true,\n    'complex': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true\n  };\n  var canBeActiveShapes = $$.sbgn.canBeActiveShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true\n  };\n  var canBeHypotheticalShapes = $$.sbgn.canBeHypotheticalShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'degradation': true\n  };\n\n  cyMath.calculateDistance = function (point1, point2) {\n    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);\n    return Math.sqrt(distance);\n  };\n\n  $$.sbgn.colors = {\n    clone: \"#838383\"\n  };\n\n  $$.sbgn.getDefaultComplexCornerLength = function () {\n    return 24;\n  };\n\n  $$.sbgn.getDefaultGeneCornerLength = function () {\n    return 24;\n  };\n\n  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {\n    var layouts = node.data('auxunitlayouts');\n\n    for (var side in layouts) {\n      var layout = layouts[side];\n      classes.AuxUnitLayout.draw(layout, node.cy(), context);\n    }\n\n    context.beginPath();\n    context.closePath();\n  };\n\n  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {\n    switch (shapeName) {\n      case 'roundrectangle':\n        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);\n        break;\n\n      case 'bottomroundrectangle':\n        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);\n        break;\n\n      case 'ellipse':\n        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n        break;\n\n      case 'complex':\n        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);\n        break;\n\n      case 'perturbing agent':\n        var points = $$.sbgn.generatePerturbingAgentPoints();\n        drawPolygonPath(context, x, y, width, height, points);\n        break;\n\n      case 'rectangle':\n        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n        break;\n\n      case 'stadium':\n        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));\n        break;\n    }\n  }; // $$.sbgn.AfShapeArgsFn = function (self){\n  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data(\"class\")];\n  // }\n\n\n  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {\n    //check rectangle at top\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {\n      return true;\n    } //check rectangle at bottom\n\n\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {\n      return true;\n    } //check ellipses\n\n\n    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {\n      x -= centerX;\n      y -= centerY;\n      x /= width / 2 + padding;\n      y /= height / 2 + padding;\n      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;\n    }; // Check bottom right quarter circle\n\n\n    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    } // Check bottom left quarter circle\n\n\n    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n\n    return false;\n  }; //we need to force opacity to 1 since we might have state and info boxes.\n  //having opaque nodes which have state and info boxes gives unpleasent results.\n\n\n  $$.sbgn.forceOpacityToOne = function (node, context) {\n    var parentOpacity = node.effectiveOpacity();\n\n    if (parentOpacity === 0) {\n      return;\n    }\n\n    context.fillStyle = \"rgba(\" + node._private.style[\"background-color\"].value[0] + \",\" + node._private.style[\"background-color\"].value[1] + \",\" + node._private.style[\"background-color\"].value[2] + \",\" + 1 * node.css('opacity') * parentOpacity + \")\";\n  };\n\n  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath(); // Start at top middle\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n\n  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {\n    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);\n    context.fill();\n  };\n\n  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX;\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n\n  ;\n\n  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX;\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n\n  ;\n\n  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {\n    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);\n  };\n\n  $$.sbgn.drawBarrel = function (context, x, y, width, height) {\n    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {\n    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);\n    context.fill();\n  }; // The old draw implementation for nucleic acid feature\n  // now only used for clone marker drawing of nucleic acid feature\n  // and macromolecule shapes because 'bottomroundrectangle' function\n  // of cytoscape.js did not fit well for this purpose.\n  // Did not change the name yet directly as drawNucAcidFeatureClone etc.\n  // because it actually draws a nucleic acid feature in a different way.\n\n\n  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {\n    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var left = centerX - halfWidth,\n        right = centerX + halfWidth;\n    var bottom = centerY - halfHeight,\n        top = centerY + halfHeight;\n    context.beginPath();\n    context.moveTo(left, bottom);\n    context.lineTo(right, bottom);\n    context.lineTo(right, centerY);\n    context.arcTo(right, top, centerX, top, cornerRadius);\n    context.arcTo(left, top, left, centerY, cornerRadius);\n    context.lineTo(left, bottom);\n    context.closePath();\n    context.fill();\n  };\n  /*\n   * Code taken from https://jsperf.com/string-prototype-endswith\n   * Direct implementation seems to work better.\n   * Using this improves isMultimer() performance.\n   * Makes it take 0.1 or 0.2% less time from the whole\n   * loading process, down from ~0.4% initially.\n   */\n\n\n  function endsWith(str, pattern) {\n    for (var i = pattern.length, l = str.length; i--;) {\n      if (str.charAt(--l) != pattern.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  $$.sbgn.isMultimer = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && endsWith(sbgnClass, \"multimer\")) return true;\n    return false;\n  };\n\n  $$.sbgn.isActive = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.startsWith(\"active\")) return true;\n    return false;\n  };\n\n  $$.sbgn.isHypothetical = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.includes(\"hypothetical\")) return true;\n    return false;\n  }; //this function is created to have same corner length when\n  //complex's width or height is changed\n\n\n  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {\n    //cp stands for corner proportion\n    var cpX = Math.min(cornerLength, 0.5 * width) / width;\n    var cpY = Math.min(cornerLength, 0.5 * height) / height;\n    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];\n    return complexPoints;\n  };\n\n  $$.sbgn.generateGeneShapePoints = function (width, height) {\n    return [-1, -1, 1, -1, 1, 1, -1, 1];\n  };\n\n  $$.sbgn.generateRNAShapePoints = function (width, height) {\n    return [-1, 0.8, 0.5, 0.8, 1, -0.8, -0.5, -0.8];\n  };\n\n  $$.sbgn.generateReceptorShapePoints = function (width, height) {\n    return [-1, -1, 0, -0.5, 1, -1, 1, 0.5, 0, 1, -1, 0.5];\n  };\n\n  $$.sbgn.generatePerturbingAgentPoints = function () {\n    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];\n  };\n\n  $$.sbgn.getDefaultMultimerPadding = function () {\n    return 5;\n  };\n\n  $$.sbgn.getDefaultActivePadding = function () {\n    return 5;\n  }; // draw background image of nodes\n\n\n  $$.sbgn.drawImage = function (context, imgObj) {\n    if (imgObj) {\n      context.clip();\n      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);\n      context.restore();\n    }\n  };\n\n  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment', 'gene', 'simple molecule', 'unknown molecule', 'drug', 'truncated protein', 'ion', 'ion channel', 'rna', 'phenotype sbml', 'receptor', 'complex sbml', 'protein', 'degradation');\n\n  $$.sbgn.registerSbgnNodeShapes = function () {\n    function generateDrawFcn(_ref2) {\n      var plainDrawFcn = _ref2.plainDrawFcn,\n          extraDrawFcn = _ref2.extraDrawFcn,\n          canBeMultimer = _ref2.canBeMultimer,\n          cloneMarkerFcn = _ref2.cloneMarkerFcn,\n          canBeActive = _ref2.canBeActive,\n          canBeHypothetical = _ref2.canBeHypothetical,\n          canHaveInfoBox = _ref2.canHaveInfoBox,\n          multimerPadding = _ref2.multimerPadding,\n          activePadding = _ref2.activePadding;\n      return function (context, node, imgObj) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var bgOpacity = node.css('background-opacity');\n        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker; //Ion channel is dran differently when it is active\n\n        if (node._private.data[\"class\"].startsWith('active ion channel') || node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawOpenIonChannel;\n        }\n\n        if (node._private.data[\"class\"].startsWith('ion channel') || node._private.data[\"class\"].startsWith('hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawIonChannel;\n        } //This is where the multimer is drawn\n\n\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height); //If the node is also hypothetical\n\n          if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n            // $$.sbgn.drawImage( context, imgObj );\n            borderStyle = 'dashed';\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            }); //$$.sbgn.drawImage( context, imgObj );\n\n            context.beginPath();\n          } else {\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n\n          if (isCloned) {\n            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);\n          } //If the node is also active\n\n\n          if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n            //add multimer shape\n            plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height, true, activePadding);\n            borderStyle = 'dashed';\n            context.setLineDash([3, 6]);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            });\n\n            if (extraDrawFcn) {\n              extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width + activePadding, height + activePadding);\n              $$.sbgn.drawBorder({\n                context: context,\n                node: node\n              });\n            }\n          }\n        } //This is where the active is drawn\n\n\n        if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height, true, activePadding);\n          borderStyle = 'dashed';\n          context.setLineDash([3, 6]);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          });\n\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width + activePadding, height + activePadding);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        } //This is where the active is drawn\n\n\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height);\n          borderStyle = 'dashed';\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          }); // $$.sbgn.drawImage( context, imgObj );\n\n          context.beginPath();\n\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        }\n\n        if (!(canBeHypothetical && $$.sbgn.isHypothetical(node))) {\n          plainDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawImage(context, imgObj);\n        }\n\n        $$.sbgn.drawBorder({\n          context: context,\n          node: node\n        });\n\n        if (extraDrawFcn) {\n          extraDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n        }\n\n        if (isCloned) {\n          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);\n        }\n\n        if (canHaveInfoBox) {\n          var oldStyle = context.fillStyle;\n          console.log(\"node before forceOpacityToOne\", node);\n          $$.sbgn.forceOpacityToOne(node, context);\n          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);\n          context.fillStyle = oldStyle;\n        }\n      };\n    }\n\n    function generateIntersectLineFcn(_ref3) {\n      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,\n          canBeMultimer = _ref3.canBeMultimer,\n          cloneMarkerFcn = _ref3.cloneMarkerFcn,\n          canBeActive = _ref3.canBeActive,\n          canBeHypothetical = _ref3.canBeHypothetical,\n          canHaveInfoBox = _ref3.canHaveInfoBox,\n          multimerPadding = _ref3.multimerPadding,\n          activePadding = _ref3.activePadding;\n      return function (node, x, y) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var padding = borderWidth / 2;\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var intersections = [];\n\n        if (canHaveInfoBox) {\n          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);\n          intersections = intersections.concat(stateAndInfoIntersectLines);\n        }\n\n        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n        intersections = intersections.concat(nodeIntersectLines);\n\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);\n          intersections = intersections.concat(multimerIntersectionLines);\n        }\n\n        if (canBeActive && $$.sbgn.isActive(node)) {\n          var activeIntersectionLines = plainIntersectLineFcn(centerX + activePadding, centerY + activePadding, width, height, x, y, padding);\n          intersections = intersections.concat(activeIntersectionLines);\n        }\n\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          var hypotheticalIntersectionLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n          intersections = intersections.concat(hypotheticalIntersectionLines);\n        }\n\n        return $$.sbgn.closestIntersectionPoint([x, y], intersections);\n      };\n    }\n\n    function generateCheckPointFcn(_ref4) {\n      var plainCheckPointFcn = _ref4.plainCheckPointFcn,\n          canBeMultimer = _ref4.canBeMultimer,\n          cloneMarkerFcn = _ref4.cloneMarkerFcn,\n          canBeActive = _ref4.canBeActive,\n          canBeHypothetical = _ref4.canBeHypothetical,\n          canHaveInfoBox = _ref4.canHaveInfoBox,\n          multimerPadding = _ref4.multimerPadding,\n          activePadding = _ref4.activePadding;\n      return function (x, y, node, threshold) {\n        threshold = threshold || 0;\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth + 2 * threshold;\n        var height = node.outerHeight() - borderWidth + 2 * threshold;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var padding = borderWidth / 2;\n\n        var nodeCheck = function nodeCheck() {\n          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n\n        var stateAndInfoCheck = function stateAndInfoCheck() {\n          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);\n        };\n\n        var multimerCheck = function multimerCheck() {\n          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);\n        };\n\n        var activeCheck = function activeCheck() {\n          return canBeActive && $$.sbgn.isActive(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + activePadding, centerY + activePadding);\n        };\n\n        var hypotheticalCheck = function hypotheticalCheck() {\n          return canBeHypothetical && $$.sbgn.isHypothetical(node) && plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n\n        return nodeCheck() || stateAndInfoCheck() || multimerCheck() || activeCheck() || hypotheticalCheck();\n      };\n    }\n\n    var shapeNames = [\"simple chemical\", \"macromolecule\", \"complex\", \"nucleic acid feature\", \"empty set\", \"biological activity\", \"compartment\", \"oldCompartment\", \"gene\", \"simple molecule\", 'receptor', 'complex sbml', \"unknown molecule\", \"drug\", \"ion\", \"truncated protein\", \"ion channel\", \"rna\", \"phenotype sbml\", \"protein\", \"degradation\"];\n    shapeNames.forEach(function (shapeName) {\n      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];\n      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];\n      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];\n      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];\n      var canBeActive = $$.sbgn.canBeActiveShapes[shapeName];\n      var canBeHypothetical = $$.sbgn.canBeHypotheticalShapes[shapeName];\n      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];\n      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];\n      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();\n      var activePadding = $$.sbgn.getDefaultActivePadding();\n      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];\n      var draw = generateDrawFcn({\n        plainDrawFcn: plainDrawFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding,\n        extraDrawFcn: extraDrawFcn\n      });\n      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({\n        plainIntersectLineFcn: plainIntersectLineFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainIntersectLineFcn;\n      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({\n        plainCheckPointFcn: plainCheckPointFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainCheckPointFcn;\n      var shape = {\n        draw: draw,\n        intersectLine: intersectLine,\n        checkPoint: checkPoint,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      };\n      cyBaseNodeShapes[shapeName] = shape;\n    });\n  };\n\n  $$.sbgn.drawEllipse = function (context, x, y, width, height) {\n    //$$.sbgn.drawEllipsePath(context, x, y, width, height);\n    //context.fill();\n    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.drawTruncatedProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n    var halfPadding = activePadding ? activePadding / 2 : 0;\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x, y - halfHeight - halfPadding); //Draw a line till right top\n\n    context.lineTo(x + halfWidth + halfPadding, y - halfHeight - halfPadding); //Draw a line to middle right\n\n    context.lineTo(x + halfWidth + halfPadding, y + 2 * halfHeight / 3 + 2 * halfPadding); //Draw a line inner\n\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight / 3 + 2 * halfPadding); //Draw a line to bottom right\n\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight + halfPadding); //Draw a line to bottom middle\n\n    context.lineTo(x, y + halfHeight + halfPadding); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth - halfPadding, y + halfHeight + halfPadding, x - halfWidth - halfPadding, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth - halfPadding, y - halfHeight - halfPadding, x, y - halfHeight - halfPadding, cornerRadius);\n    context.closePath();\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x + halfWidth / 4, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + halfWidth / 2, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x / 2 + halfWidth / 4, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 4, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x + halfWidth / 4, y - halfHeight); // Start at top middle\n\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius); // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n\n  $$.sbgn.drawOpenIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x - halfWidth / 2, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x, y - halfHeight, x, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x, y + halfHeight, x - halfWidth / 2, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 2, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x - halfWidth / 2, y - halfHeight); // Start at top middle\n\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius); // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n\n  $$.sbgn.drawComplex = function (context, x, y, width, height, isActive, cornerLength) {\n    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();\n    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawGene = function (context, x, y, width, height, isActive) {\n    cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawRNA = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateRNAShapePoints(width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n\n  $$.sbgn.drawPhenotype = function (context, x, y, width, height) {\n    cyBaseNodeShapes['hexagon'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.drawReceptor = function (context, x, y, width, height, isActive, activePadding) {\n    drawReceptorPath(context, x, y, width, height, activePadding);\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {\n    var points = cyMath.generateUnitNgonPoints(4, 0);\n    context.beginPath();\n    var scaleX = width * Math.sqrt(2) / 2,\n        scaleY = height * Math.sqrt(2) / 2;\n    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);\n    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);\n    context.closePath();\n  };\n\n  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateBiologicalActivityPoints();\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n\n  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height, isActive) {\n    drawRoundRectanglePath(context, x, y, width, height);\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var activePadding1 = activePadding || 0;\n    drawProteinPath(context, x, y, width, height, activePadding1);\n\n    if (!isActive) {\n      context.fill();\n    }\n  };\n\n  $$.sbgn.drawRoundedDrug = function (context, x, y, width, height) {\n    drawRoundedDrugPath(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.generateNucleicAcidPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.generateBiologicalActivityPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.generateCompartmentPoints = function () {\n    return math.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.plainDraw = {\n    \"simple chemical\": $$.sbgn.drawSimpleChemical,\n    \"macromolecule\": $$.sbgn.drawRoundRectangle,\n    \"complex\": $$.sbgn.drawComplex,\n    \"nucleic acid feature\": $$.sbgn.drawBottomRoundRectangle,\n    \"empty set\": $$.sbgn.drawEllipse,\n    \"biological activity\": $$.sbgn.drawBiologicalActivity,\n    \"compartment\": $$.sbgn.drawBarrel,\n    \"oldCompartment\": $$.sbgn.drawRoundRectangle,\n    \"gene\": $$.sbgn.drawGene,\n    \"rna\": $$.sbgn.drawRNA,\n    \"simple molecule\": $$.sbgn.drawEllipse,\n    \"unknown molecule\": $$.sbgn.drawEllipse,\n    \"drug\": $$.sbgn.drawRoundedDrug,\n    \"ion\": $$.sbgn.drawEllipse,\n    \"truncated protein\": $$.sbgn.drawTruncatedProtein,\n    \"ion channel\": $$.sbgn.drawIonChannel,\n    \"phenotype sbml\": $$.sbgn.drawPhenotype,\n    \"receptor\": $$.sbgn.drawReceptor,\n    \"complex sbml\": $$.sbgn.drawComplex,\n    \"protein\": $$.sbgn.drawProtein,\n    \"degradation\": $$.sbgn.drawEllipse\n  }; // To define an extra drawing for the node that is rendered at the very end,\n  // even after the node background image is drawn.\n  // E.g. cross lines of \"empty set\" nodes.\n\n  $$.sbgn.extraDraw = {\n    \"empty set\": $$.sbgn.drawCrossLine,\n    \"degradation\": $$.sbgn.drawCrossLine\n  };\n  $$.sbgn.plainIntersectLine = (_$$$sbgn$plainInterse = {\n    \"simple chemical\": function simpleChemical(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"macromolecule\": function macromolecule(centerX, centerY, width, height, x, y, padding) {\n      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);\n    },\n    \"complex\": function complex(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"empty set\": function emptySet(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"degradation\": function degradation(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"biological activity\": function biologicalActivity(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateBiologicalActivityPoints();\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"compartment\": function compartment(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"barrel\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"oldCompartment\": function oldCompartment(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"drug\": function drug(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"protein\": function protein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"gene\": function gene(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"rectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"rna\": function rna(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateRNAShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"receptor\": function receptor(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateReceptorShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"ion channel\": function ionChannel(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"truncated protein\": function truncatedProtein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"ion\": function ion(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"simple molecule\": function simpleMolecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"unknown molecule\": function unknownMolecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    }\n  }, _defineProperty(_$$$sbgn$plainInterse, \"drug\", function drug(centerX, centerY, width, height, x, y, padding) {\n    return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n  }), _defineProperty(_$$$sbgn$plainInterse, \"phenotype sbml\", function phenotypeSbml(centerX, centerY, width, height, x, y, padding) {\n    return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n  }), _defineProperty(_$$$sbgn$plainInterse, \"complex sbml\", function complexSbml(centerX, centerY, width, height, x, y, padding) {\n    var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n    return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n  }), _$$$sbgn$plainInterse);\n  $$.sbgn.plainCheckPoint = {\n    \"simple chemical\": function simpleChemical(x, y, padding, width, height, centerX, centerY) {\n      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n      var halfWidth = width / 2;\n      var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n      var cornerRadius = Math.min(halfWidth, halfHeight); //var cornerRadius = math.getRoundRectangleRadius( width, height );\n\n      var diam = cornerRadius * 2; // Check hBox\n\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      } // Check vBox\n\n\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      } // Check top left quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      } // Check top right quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      } // Check bottom right quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      } // Check bottom left quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      return false; //return cyBaseNodeShapes[\"ellipse\"].checkPoint( x, y, padding, width, height, centerX, centerY );\n    },\n    \"macromolecule\": function macromolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"complex\": function complex(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"complex sbml\": function complexSbml(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"empty set\": function emptySet(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"degradation\": function degradation(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"biological activity\": function biologicalActivity(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"rectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"compartment\": function compartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"barrel\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"oldCompartment\": function oldCompartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"gene\": function gene(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"simple molecule\": function simpleMolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"unknown molecule\": function unknownMolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"drug\": function drug(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion\": function ion(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"truncated protein\": function truncatedProtein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion channel\": function ionChannel(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"rna\": function rna(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"phenotype sbml\": function phenotypeSbml(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"receptor\": function receptor(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"protein\": function protein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    }\n  };\n  $$.sbgn.cloneMarker = {\n    \"simple chemical\": function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerRadius = Math.min(width / 2, height / 2);\n        var firstCircleCenterX = centerX - width / 2 + cornerRadius;\n        var firstCircleCenterY = centerY;\n        var secondCircleCenterX = centerX + width / 2 - cornerRadius;\n        var secondCircleCenterY = centerY;\n        var bottomCircleCenterX = centerX;\n        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;\n\n        if (width < height) {\n          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        } else {\n          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        }\n\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n        var cloneX = centerX;\n        var cloneY = centerY + 3 / 4 * cornerRadius;\n        var cloneWidth = width - 2 * cornerRadius;\n        var cloneHeight = cornerRadius / 2;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cloneWidth = width;\n        var cloneHeight = height / 4;\n        var cloneX = centerX;\n        var cloneY = centerY + 3 * height / 8;\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"macromolecule\": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      $$.sbgn.cloneMarker[\"nucleic acid feature\"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);\n    },\n    \"complex\": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();\n        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;\n        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;\n        var cloneWidth = width;\n        var cloneHeight = height * cpY / 2;\n        var cloneX = centerX;\n        var cloneY = centerY + height / 2 - cloneHeight / 2;\n        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    }\n  };\n\n  $$.sbgn.closestIntersectionPoint = function (point, intersections) {\n    if (intersections.length <= 0) return [];\n    var closestIntersection = [];\n    var minDistance = Number.MAX_VALUE;\n\n    for (var i = 0; i < intersections.length; i = i + 2) {\n      var checkPoint = [intersections[i], intersections[i + 1]];\n      var distance = cyMath.calculateDistance(point, checkPoint);\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestIntersection = checkPoint;\n      }\n    }\n\n    return closestIntersection;\n  };\n\n  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {\n    // var nodeX = node._private.position.x;\n    // var nodeY = node._private.position.y;\n    // var width = node.width();\n    // var height = node.height();\n    // var padding = parseInt(node.css('border-width')) / 2;\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var straightLineIntersections; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Bottom segment, left to right\n\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Check intersections with arc segments, we have only two arcs for\n    //nucleic acid features\n\n    var arcIntersections; // Bottom Right\n\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    } // Bottom Left\n\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n    return []; // if nothing\n  }; //this function gives the intersections of any line with the upper half of perturbing agent\n\n\n  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; // Check intersections with straight line segments\n\n    var straightLineIntersections = []; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX - halfWidth / 2;\n      var rightEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX + halfWidth / 2;\n      var leftEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n    return straightLineIntersections;\n  }; //this function gives the intersections of any line with a round rectangle\n\n\n  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; // Check intersections with straight line segments\n\n    var straightLineIntersections = []; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Bottom segment, left to right\n\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Check intersections with arc segments\n\n    var arcIntersections; // Top Left\n\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Top Right\n\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Bottom Right\n\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Bottom Left\n\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n    if (straightLineIntersections.length > 0) return straightLineIntersections;\n    return []; // if nothing\n  };\n\n  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {\n    var w = width / 2 + padding;\n    var h = height / 2 + padding;\n    var an = centerX;\n    var bn = centerY;\n    var d = [x2 - x1, y2 - y1];\n    var m = d[1] / d[0];\n    var n = -1 * m * x2 + y2;\n    var a = h * h + w * w * m * m;\n    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;\n    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;\n    var discriminant = b * b - 4 * a * c;\n\n    if (discriminant < 0) {\n      return [];\n    }\n\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    var xMin = Math.min(t1, t2);\n    var xMax = Math.max(t1, t2);\n    var yMin = m * xMin - m * x2 + y2;\n    var yMax = m * xMax - m * x2 + y2;\n    return [xMin, yMin, xMax, yMax];\n  };\n\n  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {\n    var centerX = node._private.position.x;\n    var centerY = node._private.position.y;\n    var padding = parseInt(node.css('border-width')) / 2;\n    var stateAndInfos = node._private.data.statesandinfos;\n    var intersections = [];\n\n    for (var i = 0; i < stateAndInfos.length; i++) {\n      var state = stateAndInfos[i];\n\n      if (!state.isDisplayed) {\n        continue;\n      }\n\n      var infoBoxWidth = state.bbox.w;\n      var infoBoxHeight = state.bbox.h;\n      var currIntersections = null;\n\n      if (state.clazz == \"state variable\") {\n        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"residue variable\") {\n        var coord = classes.ResidueVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"binding region\") {\n        var coord = classes.BindingRegion.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"unit of information\") {\n        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());\n\n        if (node.data(\"class\") == \"BA macromolecule\" || node.data(\"class\") == \"BA nucleic acid feature\" || node.data(\"class\") == \"BA complex\") {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);\n        } else if (node.data(\"class\") == \"BA unspecified entity\") {\n          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else if (node.data(\"class\") == \"BA simple chemical\") {\n          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);\n        } else if (node.data(\"class\") == \"BA perturbing agent\") {\n          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);\n        }\n      }\n\n      intersections = intersections.concat(currIntersections);\n    }\n\n    return intersections;\n  };\n\n  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {\n    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);\n  };\n\n  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {\n    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {\n      return true;\n    }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-renderer.js\n");

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function cdToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  cdToSbgnml.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/cd2sbgnml\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(_error) {\n        callback(null);\n      }\n    });\n  };\n\n  return cdToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2NkLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJjZFRvU2Jnbm1sIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvY2QtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzPzU2ODMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcbiAgXG4gICAgZnVuY3Rpb24gY2RUb1NiZ25tbChwYXJhbSkge1xuICAgICAganNvblRvU2Jnbm1sID0gcGFyYW0uanNvblRvU2Jnbm1sQ29udmVydGVyO1xuICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gICAgfVxuICBcbiBcbiAgICBjZFRvU2Jnbm1sLmNvbnZlcnQgPSBmdW5jdGlvbiAoeG1sLGNhbGxiYWNrKSB7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogXCJodHRwOi8vd2ViLm5ld3RlZGl0b3Iub3JnOjgwODAvY2Qyc2Jnbm1sXCIsXG4gICAgICAgICAgICBkYXRhOiB4bWwsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gY2RUb1NiZ25tbDtcbiAgXG4gIH1cbiAgXG5cbiJdLCJtYXBwaW5ncyI6IkFBRUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBRXhCLElBQUlDLFlBQUosRUFBa0JDLGdCQUFsQixFQUFvQ0MsRUFBcEM7O0VBRUEsU0FBU0MsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBckI7SUFDQUosZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQXpCO0lBQ0FDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFOLENBQXFCQyxLQUFyQixFQUFMO0VBQ0Q7O0VBR0RKLFVBQVUsQ0FBQ0ssT0FBWCxHQUFxQixVQUFVQyxHQUFWLEVBQWNDLFFBQWQsRUFBd0I7SUFFekNDLENBQUMsQ0FBQ0MsSUFBRixDQUFPO01BQ0hDLElBQUksRUFBRSxNQURIO01BRUhDLEdBQUcsRUFBRSwwQ0FGRjtNQUdIQyxJQUFJLEVBQUVOLEdBSEg7TUFJSE8sT0FBTyxFQUFFLGlCQUFVRCxJQUFWLEVBQWdCO1FBQ3JCTCxRQUFRLENBQUNLLElBQUQsQ0FBUjtNQUNILENBTkU7TUFPSEUsS0FBSyxFQUFFLGVBQVVBLE1BQVYsRUFBaUI7UUFDdkJQLFFBQVEsQ0FBQyxJQUFELENBQVI7TUFDQTtJQVRFLENBQVA7RUFXSCxDQWJEOztFQWVBLE9BQU9QLFVBQVA7QUFFRCxDQTVCSCJ9\n//# sourceURL=webpack-internal:///./src/utilities/cd-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape; // var optionUtilities = require('./option-utilities');\n// var options = optionUtilities.getOptions();\n\nvar truncate = (__webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\").truncate); // only functions not depending on the instances can be used in this way\n// e.g. elementUtilities.generateStateVarId()\n\n\nvar elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n\nvar ns = {}; // Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.\n// It refers to the object that could be refered by 'this' while there was prototyping in these classes.\n// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'\n// parameter and in this case 'mainObj' can be considered as `the object to be copied`\n// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.\n// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.\n// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.\n// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation\n// classes. While calling a method of AuxiliaryUnit class that method should be called from\n// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the\n// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'\n// method for the auxilary unit object.\n\nvar getAuxUnitClass = function getAuxUnitClass(unit) {\n  // Unit parameter may pass the unit itself or the type of the unit check it\n  var unitType = typeof unit === 'string' ? unit : unit.clazz; // Retrieve and return unit class according to the unit type\n\n  var className = '';\n\n  switch (unitType) {\n    case \"state variable\":\n      className = \"StateVariable\";\n      break;\n\n    case \"residue variable\":\n      className = \"ResidueVariable\";\n      break;\n\n    case \"binding region\":\n      className = \"BindingRegion\";\n      break;\n\n    case \"unit of information\":\n      className = \"UnitOfInformation\";\n      break;\n  } //var className = unitType === 'state variable' ? 'StateVariable' : 'residue variable'? \"ResidueVariable\":'UnitOfInformation';\n\n\n  return ns[className];\n};\n\nns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method\n\nvar AuxiliaryUnit = {}; // -------------- AuxiliaryUnit -------------- //\n// constructs a new auxiliary unit object and returns it\n\nAuxiliaryUnit.construct = function (parent) {\n  var obj = {};\n  AuxiliaryUnit.setParentRef(obj, parent);\n  obj.id = null;\n  obj.bbox = null;\n  obj.anchorSide = null;\n  obj.isDisplayed = false;\n  obj.style = null;\n  return obj;\n};\n\nAuxiliaryUnit.getParent = function (mainObj, cy) {\n  var parent = mainObj.parent; // If parent variable stores the id of parent instead of the actual parent get the actual parent by id\n\n  if (typeof parent === 'string') {\n    return cy.getElementById(parent);\n  }\n\n  return parent;\n};\n\nAuxiliaryUnit.setParentRef = function (mainObj, newParent) {\n  if (mainObj && newParent) {\n    // Reference to id instead of the node itself to avaoid circular reference\n    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();\n  }\n};\n\nAuxiliaryUnit.checkPoint = function (x, y, node, threshold) {\n  var centerX = node._private.position.x;\n  var centerY = node._private.position.y;\n  var padding = parseInt(node.css('border-width')) / 2;\n  var stateAndInfos = node._private.data.statesandinfos;\n  var cyBaseNodeShapes = cytoscape.baseNodeShapes; //    threshold = parseFloat(threshold);\n\n  for (var i = 0; i < stateAndInfos.length; i++) {\n    var state = stateAndInfos[i];\n\n    if (!state.isDisplayed) {\n      continue;\n    }\n\n    var stateWidth = parseFloat(state.bbox.w) + threshold;\n    var stateHeight = parseFloat(state.bbox.h) + threshold;\n    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());\n    var stateCenterX = coord.x;\n    var stateCenterY = coord.y;\n    var checkPoint;\n\n    if (state.clazz == \"state variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"unit of information\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"residue variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"binding region\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    }\n\n    if (checkPoint == true) {\n      return state;\n    }\n  }\n\n  return null;\n};\n/*\n * Return a new AuxiliaryUnit object. A new parent reference and new id can\n * optionnally be passed.\n */\n\n\nAuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {\n  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();\n  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  AuxiliaryUnit.setParentRef(newUnit, parentToSet);\n  newUnit.id = newId ? newId : mainObj.id;\n  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);\n  newUnit.coordType = mainObj.coordType;\n  newUnit.anchorSide = mainObj.anchorSide;\n  newUnit.isDisplayed = mainObj.isDisplayed;\n  newUnit.style = mainObj.style;\n  return newUnit;\n}; // draw the auxiliary unit at its position\n\n\nAuxiliaryUnit.draw = function (mainObj, cy, context) {\n  var unitClass = getAuxUnitClass(mainObj);\n  var coords = unitClass.getAbsoluteCoord(mainObj, cy);\n  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);\n\n  if (unitClass.hasText(mainObj, cy)) {\n    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);\n  }\n\n  mainObj.isDisplayed = true;\n}; // to be implemented by children\n\n\nAuxiliaryUnit.getText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\n\nAuxiliaryUnit.hasText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\n\nAuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {\n  var style = mainObj.style;\n  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);\n  var tmp_ctxt = context.fillStyle;\n  context.fillStyle = style['background-color'];\n  context.fill();\n  context.fillStyle = tmp_ctxt;\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var borderStyle = style.dashed ? 'dashed' : undefined;\n  var borderWidth = style['border-width']; // Selected nodes have a specific border color so infobox should have the same\n  // border color when the node is selected. May need to be updated if style of\n  // selected nodes is updated in a different way.\n\n  var borderColor = parent.selected() ? null : style['border-color'];\n  cytoscape.sbgn.drawBorder({\n    context: context,\n    node: parent,\n    borderStyle: borderStyle,\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  });\n}; // draw the statesOrInfo's label at given position\n\n\nAuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {\n  // access the sbgnvizParams set for cy\n  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();\n  var unitClass = getAuxUnitClass(mainObj);\n  var parent = unitClass.getParent(mainObj, cy);\n  var style = mainObj.style; // part of : $$.sbgn.drawText(context, textProp);\n  // save style before modification\n\n  var oldFont = context.font;\n  var oldStyle = context.fillStyle;\n  var oldOpacity = context.globalAlpha;\n  context.font = style['font-style'] + \" \" + style['font-weight'] + \" \" + style['font-size'] + \"px \" + style['font-family'];\n  context.fillStyle = style['font-color'];\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?\n\n  var text;\n\n  if (options.fitLabelsToInfoboxes()) {\n    // here we memoize the truncated text into _textCache,\n    // as it is not something that changes so much\n    text = unitClass.getText(mainObj, cy);\n    var key = text + context.font + mainObj.bbox.w;\n\n    if (mainObj._textCache && mainObj._textCache[key]) {\n      text = mainObj._textCache[key];\n    } else {\n      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);\n\n      if (!mainObj._textCache) {\n        mainObj._textCache = {};\n      }\n\n      mainObj._textCache[key] = text;\n    }\n  } else {\n    text = unitClass.getText(mainObj, cy);\n  }\n\n  context.fillText(text, centerX, centerY); // restore saved style\n\n  context.fillStyle = oldStyle;\n  context.font = oldFont;\n  context.globalAlpha = oldOpacity;\n};\n\nAuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  /* if(parent.data().complexCalculatedPadding){\n    padding = Number(parent.data().complexCalculatedPadding);\n    //delete parent._private.data.complexCalculatedPadding;\n  }else{\n    padding = parent.padding();\n  } */\n\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\")); //parent.data()['border-width'];\n\n  var position = parent.position();\n\n  if (mainObj === undefined || parent === undefined || position === undefined) {\n    return;\n  }\n\n  var borderWidth = parent.data()[\"border-width\"];\n\n  if (borderWidth === undefined) {\n    return;\n  }\n\n  var absX, absY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  } //console.log('mainObj', mainObj)\n  //console.log('mainObj.bbox.y',mainObj.bbox.y)\n  //console.log(\"parent.outerHeight()\", parent.outerHeight())\n  //console.log(\"position.y\",position.y)\n  // due to corner of barrel shaped compartment shift absX to right\n\n  /*  if (parent.data(\"class\") == \"compartment\"){\n       absX += parent.outerWidth() * 0.1;\n   } */\n\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\n\nAuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  var absX, absY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n  /*  if (parent.data(\"class\") == \"compartment\"){\n     absX += parent.outerWidth() * 0.1;\n   }; */\n\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\n\nAuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {\n  if (mainObj === undefined) {\n    return;\n  }\n\n  if (parentNode !== undefined) {\n    var parent = parentNode;\n  } else {\n    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  }\n\n  var position = parent.position();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var padding = parent.padding();\n  /*  if(parent.data().complexCalculatedPadding){\n     padding = Number(parent.data().complexCalculatedPadding)\n   }else{\n     padding = parent.padding();\n   } */\n\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  /* if (parent.data(\"class\") == \"compartment\"){\n    absX -= parent.outerWidth() * 0.1;\n  } */\n\n  var relX, relY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);\n    relY = mainObj.anchorSide == \"top\" ? 0 : 100;\n  } else {\n    relX = mainObj.anchorSide == \"left\" ? 0 : 100;\n    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);\n  }\n\n  relX = relX < 0 ? 0 : relX;\n  relX = relX > 100 ? 100 : relX;\n  relY = relY < 0 ? 0 : relY;\n  relY = relY > 100 ? 100 : relY;\n  return {\n    x: relX,\n    y: relY\n  };\n};\n\nAuxiliaryUnit.setAnchorSide = function (mainObj, node) {\n  var thisX = mainObj.bbox.x;\n  var thisY = mainObj.bbox.y;\n  var thisH = mainObj.bbox.h;\n  var thisW = mainObj.bbox.w;\n  var width, height, padding;\n\n  if (node.data(\"originalW\")) {\n    width = node.data(\"originalW\");\n    padding = 0;\n  } else {\n    width = node.width();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n\n  if (node.data(\"originalH\")) {\n    height = node.data(\"originalH\");\n    padding = 0;\n  } else {\n    height = node.height();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n\n  var parentX = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').x : node.position().x;\n  var parentY = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').y : node.position().y;\n  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));\n  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));\n  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));\n  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));\n  var centerX = Number((thisX + thisW / 2).toFixed(2));\n  var centerY = Number((thisY + thisH / 2).toFixed(2));\n\n  if (centerY == parentY1) {\n    mainObj.anchorSide = \"top\";\n  } else if (centerY == parentY2) {\n    mainObj.anchorSide = \"bottom\";\n  } else if (centerX == parentX1) {\n    mainObj.anchorSide = \"left\";\n  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {\n    mainObj.anchorSide = \"right\";\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\nAuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {\n  // add state var to the parent's statesandinfos\n  if (typeof index != \"undefined\") {\n    // specific index provided (for undo/redo consistency)\n    parentNode.data('statesandinfos').splice(index, 0, mainObj);\n  } else {\n    parentNode.data('statesandinfos').push(mainObj);\n  }\n\n  if (!parentNode.data('auxunitlayouts')) {\n    // ensure minimal initialization\n    parentNode.data('auxunitlayouts', {});\n  }\n\n  if (!location) {\n    // location not provided, need to define it automatically\n    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);\n  } else if (location === 'left' || location === 'right') {\n    location = AuxUnitLayout.selectNextAvailableLeftRight(parentNode, cy);\n  } // here we are sure to have a location even if it was not provided as argument\n  // get or create the necessary layout\n\n\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n\n  var layout = parentNode.data('auxunitlayouts')[location];\n  mainObj.anchorSide = location;\n\n  switch (location) {\n    case \"top\":\n      mainObj.bbox.y = 0;\n      break;\n\n    case \"bottom\":\n      mainObj.bbox.y = 100;\n      break;\n\n    case \"left\":\n      mainObj.bbox.x = 0;\n      break;\n\n    case \"right\":\n      mainObj.bbox.x = 100;\n      break;\n  } // add stateVar to layout, precomputing of relative coords will be triggered accordingly\n  //console.log(\"mainObj.bbox.x in addParent\",mainObj)\n\n\n  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);\n  return insertedPosition;\n};\n\nAuxiliaryUnit.removeFromParent = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];\n  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);\n\n  if (AuxUnitLayout.isEmpty(parentLayout)) {\n    delete parent.data('auxunitlayouts')[mainObj.anchorSide];\n  }\n\n  var statesandinfos = parent.data('statesandinfos');\n  var index = statesandinfos.indexOf(mainObj);\n  statesandinfos.splice(index, 1);\n};\n\nAuxiliaryUnit.getPositionIndex = function (mainObj, cy) {\n  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);\n};\n\nns.AuxiliaryUnit = AuxiliaryUnit; // -------------- END AuxiliaryUnit -------------- //\n// -------------- StateVariable -------------- //\n\n/**\n * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)\n */\n\nvar StateVariable = {}; // StateVariable extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  StateVariable[prop] = AuxiliaryUnit[prop];\n} // Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\n\n\nStateVariable.construct = function (value, stateVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.state = {};\n  obj.state.value = value;\n  obj.state.variable = null;\n  obj.stateVariableDefinition = stateVariableDefinition;\n  obj.clazz = \"state variable\";\n  return obj;\n};\n\nStateVariable.getText = function (mainObj) {\n  var stateValue = mainObj.state.value || '';\n  var stateVariable = mainObj.state.variable ? \"@\" + mainObj.state.variable : \"\";\n  return stateValue + stateVariable;\n};\n\nStateVariable.hasText = function (mainObj) {\n  return mainObj.state.value && mainObj.state.value != \"\" || mainObj.state.variable && mainObj.state.variable != \"\";\n};\n/*this function is called upon creation of state variable and it returns the location information of the added state variable\n*/\n\n\nStateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new state var of info\n  var stateVar = StateVariable.construct();\n  StateVariable.setParentRef(stateVar, parentNode);\n  stateVar.value = value;\n  stateVar.variable = variable;\n  stateVar.state = {\n    value: value,\n    variable: variable\n  };\n  stateVar.bbox = bbox;\n  stateVar.style = style;\n\n  if (id) {\n    stateVar.id = id;\n  } // link to layout\n\n\n  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);\n  return {\n    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),\n    location: stateVar.anchorSide,\n    position: position\n  };\n};\n\nStateVariable.remove = function (mainObj, cy) {\n  var position = StateVariable.getPositionIndex(mainObj, cy);\n  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  StateVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"state variable\",\n    state: {\n      value: mainObj.state.value,\n      variable: mainObj.state.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nStateVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);\n  newStateVar.state = jQuery.extend(true, {}, mainObj.state);\n  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;\n  newStateVar.clazz = mainObj.clazz;\n  return newStateVar;\n};\n\nns.StateVariable = StateVariable; // -------------- END StateVariable -------------- //\n// -------------- ResidueVariable -------------- //\n\n/**\n * This is for CellDesigner palette\n */\n\nvar ResidueVariable = {}; // ResidueVariable extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  ResidueVariable[prop] = AuxiliaryUnit[prop];\n} // Construct a residue variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\n\n\nResidueVariable.construct = function (value, residueVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.residue = {};\n  obj.residue.variable = null;\n  obj.residueVariableDefinition = residueVariableDefinition;\n  obj.clazz = \"residue variable\";\n  return obj;\n};\n\nResidueVariable.getText = function (mainObj) {\n  var residueVariable = mainObj.residue.variable || '';\n  return residueVariable;\n};\n\nResidueVariable.hasText = function (mainObj) {\n  return mainObj.residue.variable && mainObj.residue.variable != \"\";\n};\n/*this function is called upon creation of residue variable and it returns the location information of the added residue variable\n*/\n\n\nResidueVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new residue var of info\n  var residueVar = ResidueVariable.construct();\n  ResidueVariable.setParentRef(residueVar, parentNode);\n  residueVar.variable = variable;\n  residueVar.residue = {\n    value: value,\n    variable: variable\n  };\n  residueVar.bbox = bbox;\n  residueVar.style = style;\n\n  if (id) {\n    residueVar.id = id;\n  } // link to layout\n\n\n  position = ResidueVariable.addToParent(residueVar, cy, parentNode, location, position, index);\n  return {\n    index: ResidueVariable.getParent(residueVar, cy).data('statesandinfos').indexOf(residueVar),\n    location: residueVar.anchorSide,\n    position: position\n  };\n};\n\nResidueVariable.remove = function (mainObj, cy) {\n  var position = ResidueVariable.getPositionIndex(mainObj, cy);\n  var index = ResidueVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  ResidueVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"residue variable\",\n    residue: {\n      variable: mainObj.residue.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nResidueVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newResidueVar = AuxiliaryUnit.copy(mainObj, cy, ResidueVariable.construct(), newParent, newId);\n  newResidueVar.residue = jQuery.extend(true, {}, mainObj.residue);\n  newResidueVar.ResidueVariableDefinition = mainObj.ResidueVariableDefinition;\n  newStanewResidueVarteVar.clazz = mainObj.clazz;\n  return newResidueVar;\n};\n\nns.ResidueVariable = ResidueVariable; // -------------- END ResidueVariable -------------- //\n// -------------- BindingRegion -------------- //\n\n/**\n * This is for CellDesigner palette\n */\n\nvar BindingRegion = {}; // BindingRegion extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  BindingRegion[prop] = AuxiliaryUnit[prop];\n} // Construct a binding region object by extending default behaviours of a AuxiliaryUnit object and returns that object\n\n\nBindingRegion.construct = function (bindingRegionDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.region = {};\n  obj.region.variable = null;\n  obj.bindingRegionDefinition = bindingRegionDefinition;\n  obj.clazz = \"binding region\";\n  return obj;\n};\n\nBindingRegion.getText = function (mainObj) {\n  var bindingRegion = mainObj.region.variable || '';\n  return bindingRegion;\n};\n\nBindingRegion.hasText = function (mainObj) {\n  return mainObj.region.variable && mainObj.region.variable != \"\";\n};\n/*this function is called upon creation of binding region and it returns the location information of the added binding region\n*/\n\n\nBindingRegion.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new binding region of info\n  var bindingRegion = BindingRegion.construct();\n  BindingRegion.setParentRef(bindingRegion, parentNode);\n  bindingRegion.variable = variable;\n  bindingRegion.region = {\n    value: value,\n    variable: variable\n  };\n  bindingRegion.bbox = bbox;\n  bindingRegion.style = style;\n\n  if (id) {\n    bindingRegion.id = id;\n  } // link to layout\n  //console.log('bindingRegion.anchorSide',  bindingRegion.anchorSide).\n\n\n  position = BindingRegion.addToParent(bindingRegion, cy, parentNode, \"left\", position, index);\n  return {\n    index: BindingRegion.getParent(bindingRegion, cy).data('statesandinfos').indexOf(bindingRegion),\n    location: bindingRegion.anchorSide,\n    position: position\n  };\n};\n\nBindingRegion.remove = function (mainObj, cy) {\n  var position = BindingRegion.getPositionIndex(mainObj, cy);\n  var index = BindingRegion.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  BindingRegion.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"binding region\",\n    region: {\n      variable: mainObj.region.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nBindingRegion.copy = function (mainObj, cy, newParent, newId) {\n  var newBindingRegion = AuxiliaryUnit.copy(mainObj, cy, BindingRegion.construct(), newParent, newId);\n  newBindingRegion.region = jQuery.extend(true, {}, mainObj.region);\n  newBindingRegion.BindingRegionDefinition = mainObj.BindingRegionDefinition;\n  newBindingRegion.clazz = mainObj.clazz;\n  return newBindingRegion;\n};\n\nns.BindingRegion = BindingRegion; // -------------- END BindingRegion -------------- //\n// -------------- UnitOfInformation -------------- //\n\n/**\n * parent can be an EPN, compartment or subunit\n */\n\nvar UnitOfInformation = {}; // UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  UnitOfInformation[prop] = AuxiliaryUnit[prop];\n} // Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object\n\n\nUnitOfInformation.construct = function (value, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateUnitOfInfoId();\n  obj.label = {\n    text: value\n  }; // from legacy code, contains {text: }\n\n  obj.clazz = \"unit of information\";\n  return obj;\n};\n\nUnitOfInformation.getText = function (mainObj) {\n  return mainObj.label.text;\n};\n\nUnitOfInformation.hasText = function (mainObj) {\n  return mainObj.label.text && mainObj.label.text != \"\";\n};\n/**\n * Creates a unit of info and links everything accordingly\n * @param parentNode - the cytoscape element hosting the unit of information\n * @param value - its text\n * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)\n * @param [position] - its position in the order of elements placed on the same location\n * @param [index] - its index in the statesandinfos list\n */\n\n\nUnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {\n  // create the new unit of info\n  var unit = UnitOfInformation.construct(value, parentNode);\n  unit.bbox = bbox;\n  unit.style = style;\n\n  if (id) {\n    unit.id = id;\n  } //console.log(\"will insert on\", location, position);\n\n\n  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);\n  return {\n    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),\n    location: unit.anchorSide,\n    position: position\n  };\n};\n\nUnitOfInformation.remove = function (mainObj, cy) {\n  var position = UnitOfInformation.getPositionIndex(mainObj, cy);\n  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  UnitOfInformation.removeFromParent(mainObj, cy); //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n\n  return {\n    clazz: \"unit of information\",\n    label: {\n      text: mainObj.label.text\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nUnitOfInformation.copy = function (mainObj, cy, newParent, newId) {\n  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);\n  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);\n  newUnitOfInfo.clazz = mainObj.clazz;\n  return newUnitOfInfo;\n};\n\nns.UnitOfInformation = UnitOfInformation; // -------------- END UnitOfInformation -------------- //\n// -------------- EntityType -------------- //\n\n/**\n * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType\n * This class will hold the information regarding state variable, that are shared between all myosins\n */\n\nvar EntityType = {}; // Constructs an EntityType object and returns it\n\nEntityType.construct = function (name, EPN) {\n  var obj = {};\n  obj.name = name; // normally the same as its EPNs\n\n  obj.stateVariableDefinitions = []; // 0 or many shared state definitions\n\n  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist\n\n  return obj;\n};\n\nEntityType.createNewDefinitionFor = function (mainObj, stateVar) {\n  var newDefinition = StateVariableDefinition.construct();\n  newDefinition.entityType = mainObj;\n  newDefinition.stateVariables.push(stateVar);\n  stateVar.stateVariableDefinition = newDefinition;\n  stateVar.parent.data('entityType', mainObj);\n  mainObj.stateVariableDefinitions.push(newDefinition);\n};\n\nEntityType.assignStateVariable = function (mainObj, stateVar) {\n  // first trivial case, no stateDefinition yet for this entityType, so this is a new one\n  if (mainObj.stateVariableDefinitions.length == 0) {\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  } else {\n    // if definitions are already present, we need to match those to the current stateVariable\n    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {\n      var matchStateDef = mainObj.stateVariableDefinitions[i];\n\n      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {\n        matchStateDef.stateVariables.push(stateVar);\n        stateVar.stateVariableDefinition = matchStateDef;\n        stateVar.parent.data('entityType', mainObj);\n        return;\n      }\n    } // if nothing was matched among the current stateVarDef of this entityType, create new one\n\n\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  }\n};\n\nns.EntityType = EntityType; // -------------- END EntityType -------------- //\n// -------------- StateVariableDefinition -------------- //\n\n/**\n * The state variable definition is something shared across different EPNs\n * The concerned EPNs are linked through the entitype reference\n */\n\nvar StateVariableDefinition = {}; // Constructs a new StateVariableDefinition object and returns it\n\nStateVariableDefinition.construct = function (name, entityType) {\n  var obj = {};\n  obj.name = name;\n  obj.entityType = entityType; // reference to owning entity type\n\n  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist\n\n  return obj;\n};\n/**\n * returns an array of elements that share this state definition\n */\n\n\nStateVariableDefinition.getConcernedEPNs = function (mainObj) {\n  return mainObj.entityType.EPNs;\n};\n/**\n * Guess if the provided stateVariable belongs to this stateVarDefinition\n * We consider it does, if either the statevar.value or statevar.variable are matching one\n * if the statevar in the set of the StateVarDef\n * This is because we normally compare only stateVariables from the same entityType\n */\n\n\nStateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {\n  for (var i = 0; i < mainObj.stateVariables.length; i++) {\n    var matchStateVar = mainObj.stateVariables[i]; // Don't match a stateVar against another one from the same element.\n    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions\n\n    if (matchStateVar.parent === stateVar.parent) {\n      continue;\n    } //console.log(\"try\", [matchStateVar.value, matchStateVar.variable], [stateVar.value, stateVar.variable]);\n    // normal sure case. Example:\n    // P T134 - undefined T134\n    // P undef - P undef\n\n\n    if ( //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||\n    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {\n      return true;\n    } // more subtle case, with empty stateVar. Look only at value and discard variable\n    // example: undef undef - P undef\n    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nns.StateVariableDefinition = StateVariableDefinition; // -------------- END StateVariableDefinition -------------- //\n// -------------- AuxUnitLayout -------------- //\n\n/**\n * Responsible for laying out the auxiliary units contained on a same edge\n */\n\nvar AuxUnitLayout = {};\n\nAuxUnitLayout.construct = function (parentNode, location, alignment) {\n  var obj = {};\n  obj.units = [];\n  obj.location = location;\n  obj.alignment = alignment || \"left\"; // this was intended to be used, but it isn't for now\n\n  AuxUnitLayout.setParentNodeRef(obj, parentNode);\n  obj.renderLengthCache = [];\n  obj.lengthUsed = 0; // specific rules for the layout\n\n  if (parentNode.data('class') == \"simple chemical\") {\n    obj.outerMargin = 3;\n  }\n\n  return obj;\n};\n\nAuxUnitLayout.getParentNode = function (mainObj, cy) {\n  var parentNode = mainObj.parentNode; // If parentNode is id of parent node rather than being itself get the parent node by that id\n\n  if (typeof parentNode === 'string') {\n    return cy.getElementById(parentNode);\n  }\n\n  return parentNode;\n};\n\nAuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {\n  if (mainObj && parentNode) {\n    // Keep id of parent node to avaoid circular references\n    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();\n  }\n};\n/**\n * outerMargin: the left and right space left between the side of the node, and the first (and last) box\n * unitGap: the space between the auxiliary units\n * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,\n * forcing a minimum size for the node\n * maxUnitDisplayed: show at most this amount of units, even when there is enough space\n *\n * These options can be defined at the instance level. If it is found in an instance, then it\n * takes precedence. If not found, the following class' values are used.\n */\n\n\nAuxUnitLayout.outerMargin = 5;\nAuxUnitLayout.unitGap = 5;\nAuxUnitLayout.currentTopUnitGap = 5;\nAuxUnitLayout.currentBottomUnitGap = 5;\nAuxUnitLayout.currentLeftUnitGap = 5;\nAuxUnitLayout.currentRightUnitGap = 5;\nAuxUnitLayout.alwaysShowAuxUnits = true;\nAuxUnitLayout.maxUnitDisplayed = -1;\nAuxUnitLayout.lastPos = -1;\n\nAuxUnitLayout.update = function (mainObj, cy) {//AuxUnitLayout.precomputeCoords(mainObj, cy);\n};\n\nAuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {\n  if (typeof position != \"undefined\") {\n    //console.log(\"add unit at positiion\", position);\n    mainObj.units.splice(position, 0, unit);\n  } else {\n    mainObj.units.push(unit);\n    position = mainObj.units.length - 1;\n  }\n\n  if (preComputed === undefined || preComputed === false) {\n    AuxUnitLayout.computeCoords(mainObj, cy, unit);\n    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n    var locations = AuxUnitLayout.checkFit(parentNode, cy);\n\n    if (locations.filter(function (loc) {\n      return loc == mainObj.location;\n    }).length > 0) {\n      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);\n    }\n  } //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  //AuxUnitLayout.update(mainObj, cy, true);\n\n  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n    // need to resize the parent in case the space was too small\n    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);\n  }*/\n  //cy.style().update(); // <- was it really necessary ?\n\n\n  return position;\n};\n\nAuxUnitLayout.computeCoords = function (mainObj, cy, unit) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var location = mainObj.location;\n  var node = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  if (location === \"top\" || location === \"bottom\") {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y; // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  } //We don't have the right or left addition cases yet -- Now we have it\n  else {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y; // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  }\n};\n\nAuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {\n  var index = mainObj.units.indexOf(unit);\n  mainObj.units.splice(index, 1); //AuxUnitLayout.updateLengthCache(mainObj, cy);\n\n  /*AuxUnitLayout.update(mainObj, cy, true);\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n  }*/\n\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy); //TODO find a way to elimate this redundancy to update info-box positions\n\n  parentNode.data('border-width', parentNode.data('border-width'));\n};\n/**\n * reorder boxes using their defined positions. From left to right and top to bottom.\n * this ensures that their order in the layout's list corresponds to the reality of the map.\n */\n\n\nAuxUnitLayout.reorderFromPositions = function (mainObj, cy) {\n  mainObj.units.sort(function (a, b) {\n    if (mainObj.location == \"top\" || mainObj.location == \"bottom\") {\n      if (a.bbox.x < b.bbox.x) {\n        return -1;\n      }\n\n      if (a.bbox.x > b.bbox.x) {\n        return 1;\n      }\n    } else {\n      if (a.bbox.y < b.bbox.y) {\n        return -1;\n      }\n\n      if (a.bbox.y > b.bbox.y) {\n        return 1;\n      }\n    }\n\n    return 0;\n  }); //console.log(\"units after reoarder\", this.units);\n\n  /*AuxUnitLayout.updateLengthCache(mainObj, cy);\n  AuxUnitLayout.update(mainObj, cy, true);*/\n};\n/**\n * use a cached list to determine what is the length needed to draw x aux units.\n * can then be compared against the parent node's dimensions, to decide how many\n * aux units to draw.\n */\n\n\nAuxUnitLayout.updateLengthCache = function (mainObj, cy) {\n  mainObj.renderLengthCache = [0];\n  var previous = AuxUnitLayout.getOuterMargin(mainObj);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var currentLength;\n\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      currentLength = mainObj.units[i].bbox.w;\n    } else {\n      currentLength = mainObj.units[i].bbox.h;\n    }\n\n    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));\n    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);\n  }\n};\n/**\n * Use the cached precomputed lengths to decide how many units we are capable of drawing,\n * considering the size of the parent node.\n * The number returned says: we are able to draw the N first units of the lists.\n * Unused for now.\n */\n\n\nAuxUnitLayout.getDrawableUnitAmount = function (mainObj) {\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // bypass all this\n    return mainObj.units.length;\n  } // get the length of the side on which we draw\n\n\n  var availableSpace;\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  } // loop over the cached precomputed lengths\n\n\n  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {\n    if (mainObj.renderLengthCache[i] > availableSpace) {\n      // stop if we overflow\n      return i - 1;\n    }\n  }\n\n  return mainObj.units.length;\n};\n\nAuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {\n  // get the length of the side on which we draw\n  var availableSpace;\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth(); // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners\n\n    if (AuxUnitLayout.getParentNode(mainObj, cy).data(\"class\") == \"compartment\") availableSpace *= 0.8;\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  } // there is always n+1 elements in the cachedLength for n units\n\n\n  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);\n  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?\n    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) // is there no limit? or are we under that limit?\n    || alwaysShowAuxUnits) {\n      // do we always want to show everything regardless?\n      mainObj.units[i].isDisplayed = true;\n    } else {\n      mainObj.units[i].isDisplayed = false;\n    }\n  }\n};\n\nAuxUnitLayout.getUsedWidth = function (node, tb) {\n  var units = tb.units;\n  var totalWidth = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    totalWidth += units[i].bbox.w;\n  }\n\n  return totalWidth;\n};\n\nAuxUnitLayout.getUsedHeight = function (node, tb) {\n  var units = tb.units;\n  var totalHeight = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    totalHeight += units[i].bbox.h;\n  }\n\n  return totalHeight;\n};\n\nAuxUnitLayout.getUsedLengthTB = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\n\nAuxUnitLayout.getUsedLengthLR = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\n\nAuxUnitLayout.setCurrentGap = function (location, value) {\n  if (location === \"top\") {\n    AuxUnitLayout.currentTopUnitGap = value;\n  } else if (location === \"bottom\") {\n    AuxUnitLayout.currentBottomUnitGap = value;\n  } else if (location === \"right\") {\n    AuxUnitLayout.currentRightUnitGap = value;\n  } else {\n    AuxUnitLayout.currentLeftUnitGap = value;\n  }\n};\n\nAuxUnitLayout.getCurrentGap = function (location) {\n  if (location === \"top\") {\n    return AuxUnitLayout.currentTopUnitGap;\n  } else if (location === \"bottom\") {\n    return AuxUnitLayout.currentBottomUnitGap;\n  } else if (location === \"right\") {\n    return AuxUnitLayout.currentRightUnitGap;\n  } else {\n    return AuxUnitLayout.currentLeftUnitGap;\n  }\n};\n\nAuxUnitLayout.checkFit = function (node, cy, forceCheck) {\n  var fitLocations = [];\n\n  for (var location in node.data('auxunitlayouts')) {\n    if (forceCheck !== undefined && location !== forceCheck) {\n      continue;\n    }\n\n    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {\n      fitLocations.push(location);\n      continue;\n    }\n\n    var unit = node.data('auxunitlayouts')[location];\n    var units = unit.units;\n\n    if (units.length === 0) {\n      continue;\n    }\n\n    var firstUnit = units[0];\n    var lastUnit = units[units.length - 1];\n    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);\n    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n    var gap = AuxUnitLayout.getCurrentGap(location);\n    var padding = node.padding();\n\n    if (units.length > 0) {\n      //For any case of removal\n      if (location === \"top\" || location === \"bottom\") {\n        var parentX1 = node.position().x - node.width() / 2 - padding;\n        var parentX2 = node.position().x + node.width() / 2 + padding;\n        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;\n        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;\n\n        if (parentX2 < lastX2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {\n            fitLocations.push(location);\n        } */\n\n      } else {\n        var parentY1 = node.position().y - node.height() / 2 - padding;\n        var parentY2 = node.position().y + node.height() / 2 + padding;\n        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;\n        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;\n\n        if (parentY2 < lastY2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {\n            fitLocations.push(location);\n        } */\n\n      }\n    }\n  }\n\n  return fitLocations;\n};\n\nAuxUnitLayout.setIdealGap = function (node, location) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var estimatedGap;\n  var auxUnit = node.data('auxunitlayouts')[location];\n\n  if (auxUnit === undefined) {\n    return 0;\n  }\n\n  if (auxUnit.units.length <= 0 || !auxUnit.units) {\n    return 0;\n  }\n\n  var units = auxUnit.units;\n\n  if (location === \"top\" || location === \"bottom\") {\n    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n\n    var usedLength = estimatedGap;\n\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.w + estimatedGap;\n    }\n\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } else {\n    //Find total left length\n    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths\n\n    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    } //Else scale by using available space, reducing margins and gaps.\n    //Check if new gap is enough to fit\n\n\n    var usedLength = estimatedGap;\n\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.h + estimatedGap;\n    } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n\n  }\n\n  AuxUnitLayout.setCurrentGap(location, estimatedGap);\n};\n\nAuxUnitLayout.fitUnits = function (node, cy, locations) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentX2 = position.x + parentWidth / 2 + padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var parentY2 = position.y + parentHeight / 2 + padding; //Get Parent node and find parent width\n\n  var estimatedGap;\n\n  for (var index = 0; index < locations.length; index++) {\n    var location = locations[index];\n    var auxUnit = node.data('auxunitlayouts')[location];\n\n    if (auxUnit === undefined) {\n      continue;\n    }\n\n    if (auxUnit.units.length <= 0 || !auxUnit.units) {\n      continue;\n    }\n\n    var units = auxUnit.units;\n\n    if (location === \"top\" || location === \"bottom\") {\n      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n\n      var usedLength = estimatedGap;\n\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.w + estimatedGap;\n      }\n\n      AuxUnitLayout.setCurrentGap(location, estimatedGap);\n    } else {\n      //Find total left length\n      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths\n\n      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      } //Else scale by using available space, reducing margins and gaps.\n      //Check if new gap is enough to fit\n\n\n      var usedLength = estimatedGap;\n\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.h + estimatedGap;\n      } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n\n    }\n\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } //TODO find a way to elimate this redundancy to update info-box positions\n\n\n  node.data('border-width', node.data('border-width'));\n}; // Calculate total length used in a side\n// TODO find a way to refactor, remove ugliness of top-bottom/left-right.\n\n\nAuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);\n  var finalLengthUsed = lengthUsed;\n  var unitGap = AuxUnitLayout.getUnitGap(mainObj);\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    // change the coordinate system of the auxiliary unit according to the chosen layout\n    var auxUnit = mainObj.units[i];\n\n    if (auxUnit.coordType != \"relativeToSide\" || doForceUpdate) {\n      if (auxUnit.coordType == \"relativeToCenter\" || doForceUpdate) {\n        if (AuxUnitLayout.isTorB(mainObj)) {\n          //auxUnit.bbox.y = 0;\n          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;\n        } else {\n          //auxUnit.bbox.x = 0;\n          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;\n        }\n      }\n\n      auxUnit.coordType = \"relativeToSide\";\n    }\n\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      //auxUnit.bbox.y = 0;\n      lengthUsed += auxUnit.bbox.w + unitGap;\n    } else {\n      //auxUnit.bbox.x = 0;\n      lengthUsed += auxUnit.bbox.h + unitGap;\n    }\n\n    if (auxUnit.isDisplayed) {\n      finalLengthUsed = lengthUsed;\n    }\n  } // adjust the length, should be composed of outerMargin on the end, not unitGap\n\n\n  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);\n  mainObj.lengthUsed = finalLengthUsed;\n};\n\nAuxUnitLayout.draw = function (mainObj, cy, context) {\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var auxUnit = mainObj.units[i];\n    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);\n  }\n};\n\nAuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {\n  var location = unit.anchorSide;\n  var posX = unit.bbox.x;\n  var posY = unit.bbox.y;\n\n  if (!parentNode.data('auxunitlayouts')[oldLocation]) {\n    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);\n  }\n\n  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];\n  var deleteUnits = oldAuxUnit.units; //Delete from old location\n\n  var deleteIndex;\n\n  for (var i = 0; i < deleteUnits.length; i++) {\n    if (deleteUnits[i] === unit) {\n      deleteIndex = i;\n      break;\n    }\n  }\n\n  deleteUnits.splice(deleteIndex, 1); //If new is not constructed contruct interval\n\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n\n  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];\n  var insertUnits = insertAuxUnit.units;\n  var index = 0; //Insert into new unit array\n\n  if (location === \"top\" || location === \"bottom\") {\n    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {\n      index++;\n    }\n  } else {\n    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {\n      index++;\n    }\n  }\n\n  insertUnits.splice(index, 0, unit);\n};\n\nAuxUnitLayout.isEmpty = function (mainObj) {\n  return mainObj.units.length == 0;\n};\n\nAuxUnitLayout.unitCount = function (mainObj) {\n  return mainObj.units.length;\n};\n\nAuxUnitLayout.unitLength = function (mainObj) {\n  var units = mainObj.units;\n  var rightMostPoint = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n\n    if (box.x + box.w / 2 > rightMostPoint) {\n      rightMostPoint = box.x + box.w / 2;\n    }\n  }\n\n  return rightMostPoint;\n};\n\nAuxUnitLayout.unitLengthRightLeft = function (mainObj) {\n  var units = mainObj.units;\n  var topMostPoint = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n\n    if (box.y + box.h / 2 > topMostPoint) {\n      topMostPoint = box.y + box.h / 2;\n    }\n  }\n\n  return topMostPoint;\n}; //Get Unit Gaps\n\n\nAuxUnitLayout.getCurrentTopGap = function () {\n  return AuxUnitLayout.currentTopUnitGap;\n};\n\nAuxUnitLayout.getCurrentBottomGap = function () {\n  return AuxUnitLayout.currentBottomUnitGap;\n};\n\nAuxUnitLayout.getCurrentLeftGap = function () {\n  return AuxUnitLayout.currentLeftUnitGap;\n};\n\nAuxUnitLayout.getCurrentRightGap = function () {\n  return AuxUnitLayout.currentRightUnitGap;\n};\n/**\n * Auto choose the next layout. To add a new aux unit, for example.\n */\n\n\nAuxUnitLayout.selectNextAvailable = function (node) {\n  var top = node.data('auxunitlayouts').top;\n  var bottom = node.data('auxunitlayouts').bottom;\n  var resultLocation = \"top\"; // start by adding on top if free\n\n  if (!top || AuxUnitLayout.isEmpty(top)) {\n    resultLocation = \"top\";\n  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {\n    resultLocation = \"bottom\";\n  } else {\n    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {\n      resultLocation = \"top\";\n    } else {\n      resultLocation = \"bottom\";\n    }\n  }\n\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n\n  return resultLocation;\n};\n\nAuxUnitLayout.selectNextAvailableLeftRight = function (node) {\n  var left = node.data('auxunitlayouts').left;\n  var right = node.data('auxunitlayouts').right;\n  var resultLocation = \"left\"; // start by adding on left if free\n\n  if (!left || AuxUnitLayout.isEmpty(left)) {\n    resultLocation = \"left\";\n  } else if (!right || AuxUnitLayout.isEmpty(right)) {\n    resultLocation = \"right\";\n  } else {\n    // choose the side (left or right) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLengthRightLeft(left) <= AuxUnitLayout.unitLengthRightLeft(right)) {\n      resultLocation = \"left\";\n    } else {\n      resultLocation = \"right\";\n    }\n  }\n\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n\n  return resultLocation;\n};\n\nAuxUnitLayout.resizeParent = function (mainObj, cy, length) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    if (parentNode.data('bbox').w < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"centerright\", parentNode]);\n      parentNode.data('bbox').w = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"centerright\", parentNode]);\n    }\n  } else {\n    if (parentNode.data('bbox').h < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"bottomcenter\", parentNode]);\n      parentNode.data('bbox').h = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"bottomcenter\", parentNode]);\n    }\n  }\n};\n\nAuxUnitLayout.isTorB = function (mainObj) {\n  return mainObj.location == \"top\" || mainObj.location == \"bottom\";\n};\n\nAuxUnitLayout.isLorR = function (mainObj) {\n  return mainObj.location == \"left\" || mainObj.location == \"right\";\n};\n\nAuxUnitLayout.setParentMinLength = function (mainObj, cy) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  var parentLayouts = parentNode.data('auxunitlayouts');\n\n  switch (mainObj.location) {\n    case \"top\":\n      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;\n      break;\n\n    case \"bottom\":\n      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;\n      break;\n\n    case \"left\":\n      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;\n      break;\n\n    case \"right\":\n      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;\n      break;\n  }\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));\n  } else {\n    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));\n  }\n};\n\nAuxUnitLayout.getOuterMargin = function (mainObj) {\n  if (typeof mainObj.outerMargin !== \"undefined\" && mainObj.outerMargin !== null) {\n    return mainObj.outerMargin;\n  } else {\n    return AuxUnitLayout.outerMargin;\n  }\n};\n\nAuxUnitLayout.getUnitGap = function (mainObj) {\n  if (typeof mainObj.unitGap !== \"undefined\" && mainObj.unitGap !== null) {\n    return mainObj.unitGap;\n  } else {\n    return AuxUnitLayout.unitGap;\n  }\n};\n\nAuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\" && mainObj.alwaysShowAuxUnits !== null) {\n    return mainObj.alwaysShowAuxUnits;\n  } else {\n    return AuxUnitLayout.alwaysShowAuxUnits;\n  }\n};\n\nAuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\" && mainObj.maxUnitDisplayed !== null) {\n    return mainObj.maxUnitDisplayed;\n  } else {\n    return AuxUnitLayout.maxUnitDisplayed;\n  }\n};\n/*\n *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.\n */\n\n\nAuxUnitLayout.copy = function (mainObj, cy, newParent) {\n  var newLayout = AuxUnitLayout.construct(newParent); // Copying the same reference to units would be inconsistent.\n  // Duplicating owned units goes beyonnd the scope, because we need to assign\n  // ids that are tied to the global cound of units of a node.\n  // So duplicating units is something that should be properly done outside of this function.\n  // TODO that is a bit dirty, find a nice modular way to arrange that\n\n  newLayout.units = [];\n  newLayout.location = mainObj.location;\n  newLayout.alignment = mainObj.alignment;\n  AuxUnitLayout.setParentNodeRef(newLayout, newParent);\n  newLayout.renderLengthCache = mainObj.renderLengthCache;\n  newLayout.lengthUsed = mainObj.lengthUsed;\n\n  if (typeof mainObj.outerMargin !== \"undefined\") {\n    newLayout.outerMargin = mainObj.outerMargin;\n  }\n\n  if (typeof mainObj.unitGap !== \"undefined\") {\n    newLayout.unitGap = mainObj.unitGap;\n  }\n\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\") {\n    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;\n  }\n\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\") {\n    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;\n  }\n\n  return newLayout;\n};\n\nns.AuxUnitLayout = AuxUnitLayout; // -------------- END AuxUnitLayout -------------- //\n\nmodule.exports = ns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/classes.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Common utilities for elements includes both general utilities and sbgn specific utilities\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var _defaultSizeMap;\n\n  var optionUtilities, graphUtilities;\n  var options;\n  var cy;\n\n  function elementUtilities(param) {\n    // Init params to be accessed by elementUtilities\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  var inArray = function inArray(value, arr) {\n    return $.inArray(value, arr) !== -1;\n  }; // initialize map type\n\n\n  elementUtilities.mapType = 'PD';\n  elementUtilities.fileFormat = undefined;\n  elementUtilities.PD = {}; // namespace for all PD specific stuff\n\n  elementUtilities.AF = {}; // namespace for all AF specific stuff\n\n  elementUtilities.SIF = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.SBML = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.graphTopologyLocked = false; // see http://stackoverflow.com/a/8809472\n  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)\n  // don't comply with xsd:SID type that must not begin with a number\n\n  elementUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n      d += performance.now(); //use high-precision timer if available\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n\n  elementUtilities.generateNodeId = function () {\n    return 'nwtN_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateEdgeId = function () {\n    return 'nwtE_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateStateVarId = function () {\n    return 'nwtSV_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateUnitOfInfoId = function () {\n    return 'nwtUOI_' + elementUtilities.generateUUID();\n  };\n  /*\n    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated\n    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft\n    only the following things have been changed from 2.0 (this version is not clear on connectivity):\n     - empty set has no limit on its edge count\n     - logic operators can be source and target\n     - limit of 1 catalysis and 1 necessary stimulation on a process\n     for each edge class and nodeclass define 2 cases:\n     - node can be a source of this edge -> asSource\n     - node can be a target of this edge -> asTarget\n    for both cases, tells if it is allowed and what is the limit of edges allowed.\n    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).\n    Consider undefined things as false/unallowed -> whitelist behavior.\n     the nodes/edges class listed below are those used in the program.\n    For instance \"compartment\" isn't a node in SBGN specs.\n  */\n\n\n  elementUtilities.PD.connectivityConstraints = {\n    \"consumption\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"production\": {\n      \"macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unspecified entity\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"modulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"catalysis\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"inhibition\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      }\n    },\n    \"equivalence arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  /* AF node connectivity rules\n   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015\n   *   Section 3.3.1: Activity Nodes connectivity definition\n   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265\n   */\n\n  elementUtilities.AF.connectivityConstraints = {\n    \"positive influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"equivalence arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SIF.connectivityConstraints = {\n    \"controls-state-change-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-transport-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-phosphorylation-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-expression-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis-precedes\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"in-complex-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"interacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"neighbor-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"consumption-controled-by\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"controls-production-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"controls-transport-of-chemical\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"chemical-affects\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"reacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"used-to-produce\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"activates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"phosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"dephosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"upregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"downregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"activates-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"acetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"deacetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"methylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"demethylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SBML.connectivityConstraints = {\n    \"consumption\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"production\": {\n      \"protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"modulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"stimulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibition\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"trigger\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"transport\": {\n      \"protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown inhibition\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown catalysis\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"transcription consumption\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"transcription production\": {\n      \"protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"translation consumption\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"translation production\": {\n      \"protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"positive influence sbml\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"reduced modulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"reduced stimulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"reduced trigger\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown negative influence\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown positive influence\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown reduced stimulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown reduced modulation\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown reduced trigger\": {\n      \"protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"gene\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"rna\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"degradation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"drug\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"receptor\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.logicalOperatorTypes = ['and', 'or', 'not', 'delay', 'unknown logical operator'];\n  elementUtilities.processTypes = ['process', 'omitted process', 'uncertain process', 'truncated process', 'association', 'dissociation', 'phenotype'];\n  elementUtilities.biologicalActivityTypes = ['biological activity', 'BA plain', 'BA unspecified entity', 'BA simple chemical', 'BA macromolecule', 'BA nucleic acid feature', 'BA perturbing agent', 'BA complex'];\n  elementUtilities.epnTypes = ['macromolecule', 'nucleic acid feature', 'simple chemical', 'empty set', 'unspecified entity', 'perturbing agent', 'complex', 'protein', 'nucleic acid feature multimer', 'macromolecule multimer', 'simple chemical multimer', 'complex multimer'];\n  elementUtilities.sifTypes = ['SIF macromolecule', 'SIF simple chemical'];\n  elementUtilities.otherNodeTypes = ['compartment', 'tag', 'submap', 'topology group'];\n  elementUtilities.sbmlType = ['gene', 'rna', 'simple molecule', 'unknown molecule', 'phenotype', 'drug', 'ion', 'protein', 'truncated protein', 'ion channel', 'receptor', 'phenotype sbml', 'receptor', 'complex sbml', 'protein', 'degradation'];\n  elementUtilities.sbmlTypeMultimer = ['gene multimer', 'rna multimer', 'ion channel multimer', 'receptor multimer', 'truncated protein multimer', 'phenotype multimer', 'ion multimer', 'simple molecule multimer', 'unknown molecule multimer', 'drug multimer', 'complex multimer', 'phenotype sbml multimer', 'receptor multimer', 'complex sbml multimer', 'protein multimer'];\n  elementUtilities.sbmlTypeActive = ['active protein', 'active receptor', 'active ion channel', 'active truncated protein', 'active complex sbml'];\n  elementUtilities.sbmlTypeHypothetical = ['hypothetical protein', 'hypothetical receptor', 'hypothetical truncated protein', 'hypothetical ion channel', 'hypothetical gene', 'hypothetical rna', 'hypothetical phenotype sbml', 'hypothetical ion', 'hypothetical uknown molecule', 'hypothetical drug', 'hypothetical complex sbml', 'hypothetical degradation'];\n  elementUtilities.sbmlTypeActiveHypothetical = ['active hypothetical protein', 'active hypothetical receptor', 'active hypothetical truncated protein', 'hypothetical ion channel', 'active hypothetical complex sbml'];\n  elementUtilities.sbmlTypeActiveMultimer = ['active protein multimer', 'active receptor multimer', 'active ion channel multimer', 'active truncated protein multimer', 'active complex multimer'];\n  elementUtilities.sbmlTypeHypotheticalMultimer = ['hypothetical protein multimer', 'hypothetical receptor multimer', 'hypothetical truncated protein multimer', 'hypothetical ion channel multimer', 'hypothetical gene multimer', 'hypothetical rna multimer', 'hypothetical phenotype sbml multimer', 'hypothetical ion multimer', 'hypothetical uknown molecule multimer', 'hypothetical drug multimer', 'hypothetical complex sbml  multimer', 'hypothetical degradation  multimer'];\n  elementUtilities.sbmlTypeActiveHypotheticalMultimer = ['active hypothetical protein multimer', 'active hypothetical receptor multimer', 'active hypothetical ion channel multimer', 'active hypothetical truncated protein multimer', 'active hypothetical complex multimer']; //elementUtilities.sbmlTypeHypothetical = [''] //Do I need this?\n\n  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.sbmlType).concat(elementUtilities.sbmlTypeMultimer).concat(elementUtilities.sbmlTypeActive).concat(elementUtilities.sbmlTypeHypothetical).concat(elementUtilities.sbmlTypeActiveHypothetical).concat(elementUtilities.sbmlTypeActiveMultimer).concat(elementUtilities.sbmlTypeHypotheticalMultimer).concat(elementUtilities.sbmlTypeActiveHypotheticalMultimer);\n  elementUtilities.compoundNodeTypes = ['complex', 'compartment', 'submap'];\n  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();\n  elementUtilities.sifEdgeTypes = ['neighbor-of', 'interacts-with', 'in-complex-with', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'catalysis-precedes', 'controls-expression-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates', 'inhibits', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];\n  elementUtilities.edgeTypes = ['consumption', 'production', 'modulation', 'stimulation', 'catalysis', 'inhibition', 'necessary stimulation', 'logic arc', 'equivalence arc', 'unknown influence', 'positive influence', 'negative influence', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'controls-expression-of', 'catalysis-precedes', 'in-complex-with', 'interacts-with', 'neighbor-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'activates', 'inhibits', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates', 'trigger', 'transport', 'unknown inhibition', 'unknown catalysis', 'transcription consumption', 'transcription production', 'translation consumption', 'translation production', 'negative influence', 'positive influence sbml', 'reduced modulation', 'reduced stimulation', 'reduced trigger', 'unknown negative influence', 'unknown positive influence', 'unknown reduced stimulation', 'unknown reduced modulation', 'unknown reduced trigger'];\n  elementUtilities.undirectedEdgeTypes = ['in-complex-with', 'interacts-with', 'neighbor-of', 'logic arc', 'equivalence arc'];\n  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);\n  /*\n  * Get sbgnclass of the given element. If the parameter is a string return it\n  * by assuming that it is the sbgnclass itself.\n  */\n\n  elementUtilities.getSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n\n    var sbgnclass = typeof ele === 'string' ? ele : ele.data('class');\n    return sbgnclass;\n  };\n  /*\n  * Get sbgn class omitting the multimer information\n  */\n\n\n  elementUtilities.getPureSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    } //console.log(\"pure sbgn\", elementUtilities.getSbgnClass( ele ).replace( ' multimer', '' ).replace( 'active ', '' ).replace('hypothetical ', ''))\n\n\n    return elementUtilities.getSbgnClass(ele).replace(' multimer', '').replace('active ', '').replace('hypothetical ', '');\n  };\n  /*\n   * Returns if the elements with the given parent class can be parent of the elements with the given node class\n   */\n\n\n  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {\n    // If nodeClass and parentClass params are elements itselves instead of their class names handle it\n    var nodeClass = typeof _nodeClass !== 'string' ? _nodeClass.data('class') : _nodeClass;\n    var parentClass = _parentClass != undefined && typeof _parentClass !== 'string' ? _parentClass.data('class') : _parentClass;\n\n    if (parentClass == undefined || parentClass === 'compartment' || parentClass === 'submap') {\n      // Compartments, submaps and the root can include any type of nodes\n      return true;\n    } else if (parentClass.startsWith('complex') && (!node || node.connectedEdges().length == 0 // Complexes can only include EPNs which do not have edges\n    || elementUtilities.mapType == \"HybridAny\" || elementUtilities.mapType == \"HybridSbgn\")) {\n      // When map type is unknown, allow complexes to include EPNs with edges\n      return elementUtilities.isEPNClass(nodeClass);\n    }\n\n    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass\n  }; // Get common properties of given elements. Returns null if the given element list is empty or the\n  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.\n  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the\n  // property name then use what that function returns.\n\n\n  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {\n    if (elements.length == 0) {\n      return null;\n    }\n\n    var isFunction; // If we are not comparing the properties directly users can specify a function as well\n\n    if (typeof propertyName === 'function') {\n      isFunction = true;\n    } // Use data as default\n\n\n    if (!isFunction && !dataOrCss) {\n      dataOrCss = 'data';\n    }\n\n    var getVal = function getVal(index) {\n      //console.log(\"elements[index][dataOrCss](propertyName)\",elements[index] )\n      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);\n      return val;\n    };\n\n    var value = getVal(0);\n\n    for (var i = 1; i < elements.length; i++) {\n      if (getVal(i) != value) {\n        return null;\n      }\n    }\n\n    return value;\n  }; // Returns if the function returns a truthy value for all of the given elements.\n\n\n  elementUtilities.trueForAllElements = function (elements, fcn) {\n    for (var i = 0; i < elements.length; i++) {\n      if (!fcn(elements[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // Returns whether the give element can have sbgncardinality\n\n\n  elementUtilities.canHaveSBGNCardinality = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'consumption' || sbgnclass == 'production';\n  }; // Returns whether the give element can have sbgnlabel\n\n\n  elementUtilities.canHaveSBGNLabel = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'and' && sbgnclass != 'or' && sbgnclass != 'not' && sbgnclass != 'delay' && sbgnclass != 'unknown logical operator' && sbgnclass != 'association' && sbgnclass != 'dissociation' && sbgnclass != 'empty set' && !sbgnclass.endsWith('process');\n  }; // Returns whether the give element have unit of information\n\n\n  elementUtilities.canHaveUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'simple chemical' || sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'simple chemical multimer' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer' || sbgnclass.startsWith('BA') && sbgnclass != \"BA plain\" || sbgnclass == 'compartment' || sbgnclass == 'SIF macromolecule' || sbgnclass == 'SIF simple chemical' || sbgnclass == 'protein' || sbgnclass == 'protein multimer' || sbgnclass == 'active protein' || sbgnclass == 'hypothetical protein' || sbgnclass == 'active protein multimer' || sbgnclass == 'hypothetical protein multimer' || sbgnclass == 'active hypothetical protein' || sbgnclass == 'active hypothetical protein multimer' || sbgnclass == 'receptor' || sbgnclass == 'receptor multimer' || sbgnclass == 'active receptor' || sbgnclass == 'hypothetical receptor' || sbgnclass == 'active receptor multimer' || sbgnclass == 'hypothetical receptor multimer' || sbgnclass == 'active hypothetical receptor' || sbgnclass == 'active hypothetical receptor multimer' || sbgnclass == 'ion channel' || sbgnclass == 'ion channel multimer' || sbgnclass == 'active ion channel' || sbgnclass == 'hypothetical ion channel' || sbgnclass == 'active ion channel multimer' || sbgnclass == 'hypothetical ion channel multimer' || sbgnclass == 'active hypothetical ion channel' || sbgnclass == 'active hypothetical ion channel multimer' || sbgnclass == 'truncated protein' || sbgnclass == 'truncated protein multimer' || sbgnclass == 'active truncated protein' || sbgnclass == 'hypothetical truncated protein' || sbgnclass == 'active truncated protein multimer' || sbgnclass == 'hypothetical truncated protein multimer' || sbgnclass == 'active hypothetical truncated protein' || sbgnclass == 'active hypothetical truncated protein multimer' || sbgnclass == 'complex sbml' || sbgnclass == 'complex sbml multimer' || sbgnclass == 'active complex sbml' || sbgnclass == 'hypothetical complex sbml' || sbgnclass == 'active complex sbml multimer' || sbgnclass == 'hypothetical complex sbml multimer' || sbgnclass == 'active hypothetical complex sbml' || sbgnclass == 'active hypothetical complex sbml multimer' || sbgnclass == 'gene' || sbgnclass == 'gene multimer' || sbgnclass == 'hypothetical gene' || sbgnclass == 'hypothetical gene multimer' || sbgnclass == 'rna' || sbgnclass == 'rna multimer' || sbgnclass == 'hypothetical rna' || sbgnclass == 'hypothetical rna multimer' || sbgnclass == 'phenotype sbml' || sbgnclass == 'phenotype sbml multimer' || sbgnclass == 'hypothetical phenotype sbml' || sbgnclass == 'hypothetical phenotype sbml multimer' || sbgnclass == 'ion' || sbgnclass == 'ion multimer' || sbgnclass == 'hypothetical ion' || sbgnclass == 'hypothetical ion multimer' || sbgnclass == 'simple molecule' || sbgnclass == 'simple molecule multimer' || sbgnclass == 'hypothetical simple molecule' || sbgnclass == 'hypothetical simple molecule multimer' || sbgnclass == 'unknown molecule' || sbgnclass == 'unknown molecule multimer' || sbgnclass == 'hypothetical unknown molecule' || sbgnclass == 'hypothetical unknown molecule multimer' || sbgnclass == 'drug' || sbgnclass == 'drug multimer' || sbgnclass == 'hypothetical drug' || sbgnclass == 'hypothetical drug multimer' || sbgnclass == 'degradation' || sbgnclass == 'degradation multimer' || sbgnclass == 'hypothetical degradation' || sbgnclass == 'hypothetical degradation multimer') {\n      return true;\n    }\n\n    return false;\n  }; // Returns whether the given element can have more than one units of information\n\n\n  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'gene' || sbgnclass == 'rna' || sbgnclass == 'simple molecule' || sbgnclass == 'unknown molecule' || sbgnclass == 'phenotype sbml' || sbgnclass == 'drug' || sbgnclass == 'protein' || sbgnclass == 'truncated protein' || sbgnclass == 'ion channel' || sbgnclass == 'receptor' || sbgnclass == 'ion' || sbgnclass == 'empty set' || sbgnclass == 'complex sbml') {\n      return false;\n    }\n\n    return !sbgnclass.startsWith('BA');\n  }; // Returns whether the given element can have more than one units of information\n\n\n  elementUtilities.canHaveOneUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'gene' || sbgnclass == 'rna' || sbgnclass == 'simple molecule' || sbgnclass == 'unknown molecule' || sbgnclass == 'phenotype sbml' || sbgnclass == 'drug' || sbgnclass == 'protein' || sbgnclass == 'truncated protein' || sbgnclass == 'ion channel' || sbgnclass == 'receptor' || sbgnclass == 'ion' || sbgnclass == 'degradation' || sbgnclass == 'complex sbml') {\n      return true;\n    }\n\n    return false;\n  }; // Returns whether the give element have state variable\n\n\n  elementUtilities.canHaveStateVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer') {\n      return true;\n    }\n\n    return false;\n  };\n\n  elementUtilities.canHaveResidueVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'protein' || sbgnclass == 'protein multimer' || sbgnclass == 'active protein' || sbgnclass == 'hypothetical protein' || sbgnclass == 'active protein multimer' || sbgnclass == 'hypothetical protein multimer' || sbgnclass == 'active hypothetical protein' || sbgnclass == 'active hypothetical protein multimer' || sbgnclass == 'receptor' || sbgnclass == 'receptor multimer' || sbgnclass == 'active receptor' || sbgnclass == 'hypothetical receptor' || sbgnclass == 'active receptor multimer' || sbgnclass == 'hypothetical receptor multimer' || sbgnclass == 'active hypothetical receptor' || sbgnclass == 'active hypothetical receptor multimer' || sbgnclass == 'ion channel' || sbgnclass == 'ion channel multimer' || sbgnclass == 'active ion channel' || sbgnclass == 'hypothetical ion channel' || sbgnclass == 'active ion channel multimer' || sbgnclass == 'hypothetical ion channel multimer' || sbgnclass == 'active hypothetical ion channel' || sbgnclass == 'active hypothetical ion channel multimer' || sbgnclass == 'truncated protein' || sbgnclass == 'truncated protein multimer' || sbgnclass == 'active truncated protein' || sbgnclass == 'hypothetical truncated protein' || sbgnclass == 'active truncated protein multimer' || sbgnclass == 'hypothetical truncated protein multimer' || sbgnclass == 'active hypothetical truncated protein' || sbgnclass == 'active hypothetical truncated protein multimer') {\n      return true;\n    }\n\n    return false;\n  };\n\n  elementUtilities.canHaveBindingRegion = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'protein' || sbgnclass == 'protein multimer' || sbgnclass == 'active protein' || sbgnclass == 'hypothetical protein' || sbgnclass == 'active protein multimer' || sbgnclass == 'hypothetical protein multimer' || sbgnclass == 'active hypothetical protein' || sbgnclass == 'active hypothetical protein multimer' || sbgnclass == 'receptor' || sbgnclass == 'receptor multimer' || sbgnclass == 'active receptor' || sbgnclass == 'hypothetical receptor' || sbgnclass == 'active receptor multimer' || sbgnclass == 'hypothetical receptor multimer' || sbgnclass == 'active hypothetical receptor' || sbgnclass == 'active hypothetical receptor multimer' || sbgnclass == 'ion channel' || sbgnclass == 'ion channel multimer' || sbgnclass == 'active ion channel' || sbgnclass == 'hypothetical ion channel' || sbgnclass == 'active ion channel multimer' || sbgnclass == 'hypothetical ion channel multimer' || sbgnclass == 'active hypothetical ion channel' || sbgnclass == 'active hypothetical ion channel multimer' || sbgnclass == 'truncated protein' || sbgnclass == 'truncated protein multimer' || sbgnclass == 'active truncated protein' || sbgnclass == 'hypothetical truncated protein' || sbgnclass == 'active truncated protein multimer' || sbgnclass == 'hypothetical truncated protein multimer' || sbgnclass == 'active hypothetical truncated protein' || sbgnclass == 'active hypothetical truncated protein multimer') {\n      return true;\n    }\n\n    return false;\n  }; // Returns whether the given ele should be square in shape\n\n\n  elementUtilities.mustBeSquare = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass.indexOf('process') != -1 || sbgnclass == 'empty set' || sbgnclass == 'and' || sbgnclass == 'or' || sbgnclass == 'not' || sbgnclass == 'unknown logical operator' || sbgnclass == 'association' || sbgnclass == 'dissociation' || sbgnclass == 'delay';\n  }; // Returns whether any of the given nodes must not be in square shape\n\n\n  elementUtilities.someMustNotBeSquare = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      if (!elementUtilities.mustBeSquare(node.data('class'))) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Returns whether the gives element can be cloned\n\n\n  elementUtilities.canBeCloned = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'unspecified entity': true,\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true,\n      'perturbing agent': true\n    };\n    return list[sbgnclass] ? true : false;\n  }; // Returns whether the gives element can be cloned\n\n\n  elementUtilities.canBeMultimer = function (ele) {\n    var _list;\n\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = (_list = {\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true,\n      'receptor': true,\n      'ion channel': true,\n      'truncated protein': true,\n      'gene': true,\n      'rna': true,\n      'phenotype': true,\n      'ion': true,\n      'simple molecule': true,\n      'unknown molecule': true,\n      'drug': true\n    }, _defineProperty(_list, \"complex\", true), _defineProperty(_list, 'phenotype sbml', true), _defineProperty(_list, \"receptor\", true), _defineProperty(_list, 'complex sbml', true), _defineProperty(_list, 'protein', true), _list);\n    return list[sbgnclass] ? true : false;\n  };\n\n  elementUtilities.canBeActive = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'protein': true,\n      'complex sbml': true,\n      'receptor': true,\n      'ion channel': true,\n      'truncated protein': true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  elementUtilities.canBeHypothetical = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'protein': true,\n      'complex sbml': true,\n      'receptor': true,\n      'ion channel': true,\n      'truncated protein': true,\n      'gene': true,\n      'rna': true,\n      'phenotype sbml': true,\n      'ion': true,\n      'simple molecule': true,\n      'unknown molecule': true,\n      'drug': true,\n      'degradation': true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  elementUtilities.isBiologicalActivity = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);\n  };\n\n  elementUtilities.isSIFNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifTypes);\n  };\n\n  elementUtilities.isSIFEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);\n  };\n\n  elementUtilities.isUndirectedEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);\n  };\n\n  elementUtilities.isDirectedEdge = function (ele) {\n    return !elementUtilities.isUndirectedEdge(ele);\n  }; // Returns whether the given element is an EPN\n\n\n  elementUtilities.isEPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.epnTypes);\n  }; // Returns whether the given element is a PN\n\n\n  elementUtilities.isPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.processTypes);\n  }; // Returns wether the given element or string is of the special empty set/empty set class\n\n\n  elementUtilities.isEmptySetClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'empty set';\n  }; // Returns whether the given element is a logical operator\n\n\n  elementUtilities.isLogicalOperator = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);\n  }; // Returns whether the class of given element is a equivalance class\n\n\n  elementUtilities.convenientToEquivalence = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'tag' || sbgnclass == 'terminal';\n  }; // Returns whether the class of given element is a modulation arc as defined in PD specs\n\n\n  elementUtilities.isModulationArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'modulation' || sbgnclass == 'stimulation' || sbgnclass == 'catalysis' || sbgnclass == 'inhibition' || sbgnclass == 'necessary stimulation';\n  }; // Returns whether the class of given element is an arc of AF specs except logical arc\n\n\n  elementUtilities.isAFArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'positive influence' || sbgnclass == 'negative influence' || sbgnclass == 'unknown influence' || sbgnclass == 'necessary stimulation';\n  }; // Returns whether the given element or elements with the given class can have ports.\n\n\n  elementUtilities.canHavePorts = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'phenotype' && sbgnclass != 'delay' && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));\n  }; // Section Start\n  // General Element Utilities\n  //this method returns the nodes non of whose ancestors is not in given nodes\n\n\n  elementUtilities.getTopMostNodes = function (nodes) {\n    var nodesMap = {};\n\n    for (var i = 0; i < nodes.length; i++) {\n      nodesMap[nodes[i].id()] = true;\n    }\n\n    var roots = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      var parent = ele.parent()[0];\n\n      while (parent != null) {\n        if (nodesMap[parent.id()]) {\n          return false;\n        }\n\n        parent = parent.parent()[0];\n      }\n\n      return true;\n    });\n    return roots;\n  }; //This method checks if all of the given nodes have the same parent assuming that the size\n  //of  nodes is not 0\n\n\n  elementUtilities.allHaveTheSameParent = function (nodes) {\n    if (nodes.length == 0) {\n      return true;\n    }\n\n    var parent = nodes[0].data(\"parent\");\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      if (node.data(\"parent\") != parent) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {\n    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);\n\n    for (var i = 0; i < topMostNodes.length; i++) {\n      var node = topMostNodes[i];\n      var oldX = node.position(\"x\");\n      var oldY = node.position(\"y\");\n      node.position({\n        x: oldX + positionDiff.x,\n        y: oldY + positionDiff.y\n      });\n      var children = node.children();\n      this.moveNodes(positionDiff, children, true);\n    }\n  };\n\n  elementUtilities.convertToModelPosition = function (renderedPosition) {\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    var x = (renderedPosition.x - pan.x) / zoom;\n    var y = (renderedPosition.y - pan.y) / zoom;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {\n    pan = pan || cy.pan();\n    zoom = zoom || cy.zoom();\n    var res = {};\n    ['x', 'y'].forEach(function (dim) {\n      res[dim] = modelPos[dim] * zoom + pan[dim];\n    });\n    return res;\n  }; // Section End\n  // General Element Utilities\n  // Section Start\n  // Element Filtering Utilities\n  // SBGN specific utilities\n\n\n  elementUtilities.getProcessesOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    selectedEles = this.extendNodeList(selectedEles);\n    return selectedEles;\n  };\n\n  elementUtilities.getNeighboursOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);\n    return elesToHighlight;\n  };\n\n  elementUtilities.getNeighboursOfNodes = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    nodes = nodes.add(nodes.parents(\"node[class^='complex']\"));\n    nodes = nodes.add(nodes.descendants());\n    var neighborhoodEles = nodes.neighborhood();\n    var elesToReturn = nodes.add(neighborhoodEles);\n    elesToReturn = elesToReturn.add(elesToReturn.descendants());\n    return elesToReturn;\n  };\n\n  elementUtilities.extendNodeList = function (nodesToShow) {\n    var self = this; //add children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants()); //add parents\n\n    nodesToShow = nodesToShow.add(nodesToShow.parents()); //add complex children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants()); // var processes = nodesToShow.nodes(\"node[class='process']\");\n    // var nonProcesses = nodesToShow.nodes(\"node[class!='process']\");\n    // var neighborProcesses = nonProcesses.neighborhood(\"node[class='process']\");\n\n    extendNodeTypes = ['process', 'omitted process', 'uncertain process', 'truncated process', 'association', 'dissociation', 'phenotype', 'and', 'or', 'not', 'delay', 'unknown logical operator']; //Here, logical operators are also considered as processes, since they also get inputs and outputs\n\n    var processes = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var nonProcesses = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    }); //For AF support, subject to change\n\n    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(\":hidden\")).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    nodesToShow = nodesToShow.add(processes.neighborhood());\n    nodesToShow = nodesToShow.add(neighborProcesses);\n    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());\n    nodesToShow = nodesToShow.add(neighborNonProcesses);\n    neighborProcesses.neighborhood().forEach(function (ele) {\n      if (inArray(ele._private.data[\"class\"], extendNodeTypes)) {\n        nodesToShow = nodesToShow.add(ele.neighborhood());\n      }\n    }); //add parents\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents()); //add children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n    return nodesToShow;\n  };\n\n  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {\n    nodesToFilter = this.extendNodeList(nodesToFilter);\n    var nodesToShow = allNodes.not(nodesToFilter);\n    nodesToShow = this.extendNodeList(nodesToShow);\n    return nodesToShow;\n  };\n\n  elementUtilities.getProcessesOfNodes = function (nodes) {\n    return this.extendNodeList(nodes);\n  }; // general utilities\n\n\n  elementUtilities.noneIsNotHighlighted = function () {\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClasses = viewUtilities.getAllHighlightClasses();\n\n    for (var i = 0; i < highlightClasses.length; i++) {\n      if (cy.$('.' + highlightClasses[i]).is(':visible')) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // Section End\n  // Element Filtering Utilities\n  // Section Start\n  // Add remove utilities\n  // SBGN specific utilities\n\n\n  elementUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.nodes();\n    cy.elements().unselect();\n    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);\n    var nodesNotToKeep = allNodes.not(nodesToKeep);\n    return nodesNotToKeep.remove();\n  };\n\n  elementUtilities.deleteElesSimple = function (eles) {\n    cy.elements().unselect();\n    return eles.remove();\n  }; // general utilities\n\n\n  elementUtilities.restoreEles = function (eles) {\n    eles.restore();\n    return eles;\n  }; // Section End\n  // Add remove utilities\n  // Section Start\n  // Stylesheet helpers\n  // SBGN specific utilities\n\n\n  elementUtilities.getArrayLineStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    switch (sbgnclass) {\n      case 'controls-expression-of':\n      case 'upregulates-expression':\n      case 'downregulates-expression':\n      case 'unknown inhibition':\n      case 'unknown catalysis':\n      case 'transcription consumption':\n      case 'transcription production':\n      case 'translation consumption':\n      case 'translation production':\n      case 'unknown negative influence':\n      case 'unknown positive influence':\n      case 'unknown reduced stimulation':\n      case 'unknown reduced modulation':\n      case 'unknown reduced trigger':\n        return 'dashed';\n\n      default:\n        return 'solid';\n    }\n  };\n\n  elementUtilities.getArrayLineDashStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    switch (sbgnclass) {\n      case 'transcription consumption':\n      case 'transcription production':\n        return [20, 10, 2, 5, 2, 10];\n\n      case 'translation consumption':\n      case 'translation production':\n        return [15, 7, 2, 7];\n\n      default:\n        return [6, 3];\n    }\n  };\n\n  elementUtilities.getCyShape = function (ele) {\n    var _class = ele.data('class'); // Get rid of rectangle postfix to have the actual node class\n\n\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n\n    if (_class.startsWith('active ')) {\n      _class = _class.replace('active ', '');\n    }\n\n    if (_class.includes('hypothetical')) {\n      _class = _class.replace('hypothetical ', '');\n    }\n\n    if (_class == 'compartment') {\n      return 'compartment';\n    }\n\n    if (_class == 'phenotype') {\n      return 'hexagon';\n    }\n\n    if (_class == 'perturbing agent' || _class == 'tag') {\n      return 'polygon';\n    }\n\n    if (_class == 'SIF macromolecule') {\n      return 'macromolecule';\n    }\n\n    if (_class == 'SIF simple chemical') {\n      return 'simple chemical';\n    }\n\n    if (_class.startsWith('BA')) {\n      return 'biological activity';\n    }\n\n    if (_class == 'submap' || _class == 'topology group') {\n      return 'rectangle';\n    } // We need to define new node shapes with their class names for these nodes\n\n\n    if (_class == 'empty set' || _class == 'nucleic acid feature' || _class == 'macromolecule' || _class == 'simple chemical' || _class == 'complex' || _class == 'biological activity' || _class == 'cule' || _class == 'gene' || _class == 'unknown molecule' || _class == 'drug' || _class == 'ion' || _class == 'truncated protein' || _class == 'ion channel' || _class == 'rna' || _class == 'simple molecule' || _class == 'phenotype sbml' || _class == 'receptor' || _class == 'complex sbml' || _class == 'protein' || _class == 'degradation') {\n      return _class;\n    } // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles\n    // conditionally.\n\n\n    if (this.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n        return 'polygon'; // The node has ports represent it by polygon\n      } else if (_class == 'process' || _class == 'omitted process' || _class == 'uncertain process' || _class == 'truncated process') {\n        return 'rectangle'; // If node has no port and has one of these classes it should be in a rectangle shape\n      }\n\n      return 'ellipse'; // Other nodes with no port should be in an ellipse shape\n    } // The remaining nodes are supposed to be in ellipse shape\n\n\n    return 'ellipse';\n  };\n\n  elementUtilities.getCyTargetArrowFill = function (ele) {\n    var _class = ele.data('class');\n\n    if (_class == 'inhibition' || _class == 'negative influence' || _class == 'production' || _class == 'transport' || _class == 'transcription production' || _class == 'translation production' || _class == 'unknown inhibition' || _class == 'unknown negative influence' || _class == 'unknown positive influence' || _class == 'positive influence sbml' || elementUtilities.isSIFEdge(_class)) {\n      return 'filled';\n    }\n\n    return 'hollow';\n  };\n\n  elementUtilities.getCyArrowShape = function (ele) {\n    var _class = ele.data('class');\n\n    switch (_class) {\n      case 'necessary stimulation':\n      case 'trigger':\n      case 'reduced trigger':\n      case 'transport':\n      case 'reduced trigger':\n      case 'unknown reduced trigger':\n        return 'triangle-cross';\n\n      case 'inhibition':\n      case 'negative influence':\n      case 'inhibits':\n      case 'downregulates-expression':\n      case 'dephosphorylates':\n      case 'inhibits-gtpase':\n      case 'deacetylates':\n      case 'demethylates':\n      case 'unknown inhibition':\n      case 'unknown negative influence':\n        return 'tee';\n\n      case 'catalysis':\n      case 'unknown catalysis':\n        return 'circle';\n\n      case 'stimulation':\n      case 'production':\n      case 'positive influence':\n      case 'activates':\n      case 'phosphorylates':\n      case 'upregulates-expression':\n      case 'controls-state-change-of':\n      case 'chemical-affects':\n      case 'controls-transport-of':\n      case 'controls-phosphorylation-of':\n      case 'controls-expression-of':\n      case 'catalysis-precedes':\n      case 'consumption-controled-by':\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n      case 'used-to-produce':\n      case 'activates-gtpase':\n      case 'acetylates':\n      case 'methylates':\n      case 'transcription production':\n      case 'translation production':\n      case 'reduced stimulation':\n      case 'unknown reduced stimulation':\n        return 'triangle';\n\n      case 'positive influence sbml':\n      case 'unknown positive influence':\n        return 'vee';\n\n      case 'modulation':\n      case 'unknown influence':\n      case 'reduced modulation':\n      case 'unknown reduced modulation':\n        return 'diamond';\n\n      default:\n        return 'none';\n    }\n  };\n\n  elementUtilities.getElementContent = function (ele) {\n    var _class = ele.data('class');\n\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n\n    if (_class.startsWith('active ')) {\n      _class = _class.replace('active ', '');\n    }\n\n    if (_class.includes('hypothetical')) {\n      _class = _class.replace('hypothetical ', '');\n    }\n\n    var content = \"\";\n\n    if (_class == 'macromolecule' || _class == 'simple chemical' || _class == 'phenotype' || _class == 'unspecified entity' || _class == 'nucleic acid feature' || _class == 'perturbing agent' || _class == 'tag' || _class == 'biological activity' || _class.startsWith('BA') || _class == 'submap' || _class == 'SIF macromolecule' || _class == 'SIF simple chemical' || _class == 'protein' || _class == 'receptor' || _class == 'truncated protein' || _class == 'ion channel' || _class == 'complex sbml' || _class == 'gene' || _class == 'rna' || _class == 'simple molecule' || _class == 'unknown molecule' || _class == 'phenotype sbml' || _class == 'drug' || _class == 'ion') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'compartment') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'complex') {\n      if (ele.children().length == 0 || options.showComplexName) {\n        if (ele.data('label')) {\n          content = ele.data('label');\n        } else if (ele.data('infoLabel')) {\n          content = ele.data('infoLabel');\n        } else {\n          content = '';\n        }\n      } else {\n        content = '';\n      }\n    } else if (_class == 'and') {\n      content = 'AND';\n    } else if (_class == 'or') {\n      content = 'OR';\n    } else if (_class == 'not') {\n      content = 'NOT';\n    } else if (_class == 'unknown logical operator') {\n      content = '?';\n    } else if (_class == 'omitted process') {\n      content = '\\\\\\\\';\n    } else if (_class == 'uncertain process') {\n      content = '?';\n    } else if (_class == 'truncated process') {\n      content = '/\\\\/';\n    } else if (_class == 'dissociation') {\n      content = 'o';\n    } else if (_class == 'delay') {\n      content = \"\\u03C4\"; // tau\n    }\n\n    var textWidth = ele.outerWidth() || ele.data('bbox').w;\n    var textProp = {\n      label: content,\n      width: _class == 'perturbing agent' ? textWidth / 2 : textWidth\n    };\n    return textProp.label;\n  };\n\n  elementUtilities.getLabelTextSize = function (ele) {\n    var _class = ele.data('class'); // These types of nodes cannot have label but this is statement is needed as a workaround\n\n\n    if (_class === 'association') {\n      return 20;\n    }\n\n    if (this.canHavePorts(_class)) {\n      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators\n      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes\n\n      if (_class === 'dissociation') {\n        coeff = 2;\n      } else if (_class.endsWith('process')) {\n        coeff = 1.5;\n      }\n\n      var ports = ele.data('ports');\n\n      if (graphUtilities.portsEnabled === true && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)\n      }\n\n      return this.getDynamicLabelTextSize(ele, coeff);\n    }\n\n    if (_class === 'delay') {\n      return this.getDynamicLabelTextSize(ele, 2);\n    }\n\n    return this.getDynamicLabelTextSize(ele);\n  };\n\n  elementUtilities.getStateVarShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveStateVariable(ele)) {\n      return null;\n    }\n\n    return ['stadium'];\n  };\n\n  elementUtilities.getResidueShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveResidueVariable(ele)) {\n      return null;\n    }\n\n    return ['stadium'];\n  };\n\n  elementUtilities.getBindingRegionShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveBindingRegion(ele)) {\n      return null;\n    }\n\n    return ['rectangle'];\n  };\n\n  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {\n    var type = elementUtilities.getPureSbgnClass(ele);\n\n    if (!elementUtilities.canHaveUnitOfInformation(type)) {\n      return null;\n    }\n\n    var opts = null;\n\n    if (elementUtilities.isSIFNode(type)) {\n      opts = ['rectangle', 'stadium'];\n    } else if (elementUtilities.isBiologicalActivity(type)) {\n      switch (type) {\n        case 'BA macromolecule':\n          opts = ['roundrectangle'];\n          break;\n\n        case 'BA nucleic acid feature':\n          opts = ['bottomroundrectangle'];\n          break;\n\n        case 'BA unspecified entity':\n          opts = ['ellipse'];\n          break;\n\n        case 'BA complex':\n          opts = ['complex'];\n          break;\n\n        case 'BA perturbing agent':\n          opts = ['perturbing agent'];\n          break;\n\n        case 'BA simple chemical':\n          opts = ['stadium'];\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      opts = ['rectangle'];\n    }\n\n    return opts;\n  };\n\n  elementUtilities.getCardinalityDistance = function (ele) {\n    var srcPos = ele.source().position();\n    var tgtPos = ele.target().position();\n    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));\n    return distance * 0.25;\n  };\n\n  elementUtilities.getInfoLabel = function (node) {\n    /* Info label of a collapsed node cannot be changed if\n    * the node is collapsed return the already existing info label of it\n    */\n    if (node._private.data.collapsedChildren != null) {\n      return node._private.data.infoLabel;\n    }\n    /*\n     * If the node is simple then it's infolabel is equal to it's label\n     */\n\n\n    if (node.children() == null || node.children().length == 0) {\n      return node._private.data.label;\n    }\n\n    var children = node.children();\n    var infoLabel = \"\";\n    /*\n     * Get the info label of the given node by it's children info recursively\n     */\n\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      var childInfo = this.getInfoLabel(child);\n\n      if (childInfo == null || childInfo == \"\") {\n        continue;\n      }\n\n      if (infoLabel != \"\") {\n        infoLabel += \":\";\n      }\n\n      infoLabel += childInfo;\n    } //return info label\n\n\n    return infoLabel;\n  };\n\n  elementUtilities.getQtipContent = function (node) {\n    /* Check the label of the node if it is not valid\n    * then check the infolabel if it is also not valid do not show qtip\n    */\n    var label = node.data('label');\n\n    if (label == null || label == \"\") {\n      label = this.getInfoLabel(node);\n    }\n\n    if (label == null || label == \"\") {\n      return;\n    }\n\n    var contentHtml = \"<b style='text-align:center;font-size:16px;'>\" + label + \"</b>\";\n    var statesandinfos = node._private.data.statesandinfos;\n\n    for (var i = 0; i < statesandinfos.length; i++) {\n      var sbgnstateandinfo = statesandinfos[i];\n\n      if (sbgnstateandinfo.clazz == \"state variable\") {\n        var value = sbgnstateandinfo.state.value;\n        var variable = sbgnstateandinfo.state.variable;\n        var stateLabel = variable == null\n        /*|| typeof stateVariable === undefined */\n        ? value : value + \"@\" + variable;\n\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"unit of information\") {\n        var stateLabel = sbgnstateandinfo.label.text;\n\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"residue variable\") {\n        var variable = sbgnstateandinfo.residue.variable;\n        var residueLabel = variable;\n\n        if (residueLabel == null) {\n          residueLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + residueLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"binding region\") {\n        var variable = sbgnstateandinfo.region.variable;\n        var regionLabel = variable;\n\n        if (regionLabel == null) {\n          regionLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + regionLabel + \"</div>\";\n      }\n    }\n\n    return contentHtml;\n  }; // general utilities\n\n\n  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {\n    var map = {\n      'small': 0.75,\n      'regular': 1,\n      'large': 1.25\n    };\n    return map[dynamicLabelSize];\n  };\n\n  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {\n    var sbgnclass, h; // ele can either be node itself or an object that has class and height fields\n\n    if (ele.isNode && ele.isNode()) {\n      sbgnclass = ele.data('class');\n      h = ele.height();\n    } else {\n      sbgnclass = ele['class'];\n      h = ele['height'];\n    }\n\n    var dynamicLabelSize = options.dynamicLabelSize;\n    dynamicLabelSize = typeof dynamicLabelSize === 'function' ? dynamicLabelSize.call() : dynamicLabelSize;\n\n    if (dynamicLabelSizeCoefficient === undefined) {\n      if (dynamicLabelSize == 'small') {\n        if (sbgnclass.startsWith(\"complex\")) return 10;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 12;\n      } else if (dynamicLabelSize == 'regular') {\n        if (sbgnclass.startsWith(\"complex\")) return 11;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 14;\n      } else if (dynamicLabelSize == 'large') {\n        if (sbgnclass.startsWith(\"complex\")) return 12;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 16;\n      }\n\n      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n    }\n\n    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;\n    return textHeight;\n  };\n  /*\n  * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.\n  */\n\n\n  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {\n    var portId = sourceOrTarget === 'source' ? edge.data('portsource') : edge.data('porttarget');\n\n    if (portId == null || !graphUtilities.portsEnabled) {\n      return 'outside-to-node'; // If there is no portsource return the default value which is 'outside-to-node'\n    }\n\n    var endNode = sourceOrTarget === 'source' ? edge.source() : edge.target();\n    var ports = endNode.data('ports');\n    var port;\n\n    for (var i = 0; i < ports.length; i++) {\n      if (ports[i].id === portId) {\n        port = ports[i];\n      }\n    }\n\n    if (port === undefined) {\n      return 'outside-to-node'; // If port is not found return the default value which is 'outside-to-node'\n    }\n\n    var x, y; // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center\n\n    if (port.x != 0) {\n      x = Math.sign(port.x) * 50;\n      y = 0;\n    } else {\n      x = 0;\n      y = Math.sign(port.y) * 50;\n    }\n\n    return '' + x + '% ' + y + '%';\n  };\n  /*\n   * Return ordering of ports of a node.\n   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'\n   */\n\n\n  elementUtilities.getPortsOrdering = function (node) {\n    // Return the cached portsordering if exists\n    if (node.data('portsordering')) {\n      return node.data('portsordering');\n    }\n\n    var ports = node.data('ports');\n\n    if (ports.length !== 2) {\n      node.data('portsordering', 'none'); // Cache the ports ordering\n\n      return 'none'; // Nodes are supposed to have 2 nodes or none\n    }\n    /*\n     * Retursn if the given portId is porttarget of any of the given edges.\n     * These edges are expected to be the edges connected to the node associated with that port.\n     */\n\n\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    }; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.\n\n\n    var orientation = ports[0].x === 0 ? 'vertical' : 'horizontal'; // We need the connected edges of the node to find out if a port is an input port or an output port\n\n    var connectedEdges = node.connectedEdges();\n    var portsordering;\n\n    if (orientation === 'horizontal') {\n      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative\n      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'\n\n      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {\n        portsordering = 'L-to-R';\n      } else {\n        portsordering = 'R-to-L';\n      }\n    } else {\n      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative\n      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'\n\n      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {\n        portsordering = 'T-to-B';\n      } else {\n        portsordering = 'B-to-T';\n      }\n    } // Cache the portsordering and return it.\n\n\n    node.data('portsordering', portsordering);\n    return portsordering;\n  };\n  /*\n  * Sets the ordering of the given nodes.\n  * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n  * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n  * used to set the distance between the node center and the ports. The default port distance is 60.\n  */\n\n\n  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    /*\n    * Returns if the given portId is porttarget of any of the given edges.\n    * These edges are expected to be the edges connected to the node associated with that port.\n    */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n    /*\n    * Returns if the given portId is portsource of any of the given edges.\n    * These edges are expected to be the edges connected to the node associated with that port.\n    */\n\n\n    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('portsource') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    portDistance = portDistance ? portDistance : 70; // The default port distance is 60\n\n    cy.startBatch();\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node\n      // If the current ordering is already equal to the desired ordering pass this node directly\n\n      if (ordering === currentOrdering) {\n        continue;\n      }\n\n      if (ordering === 'none') {\n        // If the ordering is 'none' remove the ports of the node\n        elementUtilities.removePorts(node);\n      } else if (currentOrdering === 'none') {\n        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.\n        elementUtilities.addPorts(node, ordering, portDistance);\n      } else {\n        // Else change the ordering by altering node 'ports'\n        var ports = node.data('ports'); // Ports of the node\n        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one\n\n        var dist = currentOrdering === 'none' ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);\n        var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges\n        // Determine the portsource and porttarget\n\n        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {\n          porttarget = ports[0];\n          portsource = ports[1];\n        } else {\n          porttarget = ports[1];\n          portsource = ports[0];\n        }\n\n        if (ordering === 'L-to-R') {\n          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port\n          porttarget.x = -1 * dist;\n          portsource.x = dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'R-to-L') {\n          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port\n          porttarget.x = dist;\n          portsource.x = -1 * dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'T-to-B') {\n          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = -1 * dist;\n          portsource.y = dist;\n        } else {\n          //if ordering is 'B-to-T'\n          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = dist;\n          portsource.y = -1 * dist;\n        }\n      }\n\n      node.data('ports', ports); // Reset the node ports\n    }\n\n    nodes.data('portsordering', ordering); // Update the cached orderings of the nodes\n\n    cy.endBatch();\n  };\n  /*\n  * Add ports to the given node, with given ordering and port distance.\n  */\n\n\n  elementUtilities.addPorts = function (node, ordering, portDistance) {\n    var firstPortId = node.id() + \".1\"; // Id of first port\n\n    var secondPortId = node.id() + \".2\"; // Id of seconf port\n    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one\n\n    var firstPort = {\n      id: firstPortId\n    }; // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one\n\n    var secondPort = {\n      id: secondPortId\n    }; // Complete port objects according to ordering\n\n    if (ordering === 'L-to-R' || ordering === 'R-to-L') {\n      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one\n      firstPort.x = -1 * portDistance;\n      secondPort.x = portDistance;\n      firstPort.y = 0;\n      secondPort.y = 0;\n    } else {\n      // If ordering is 'T-to-B' or 'B-to-T'\n      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one\n      firstPort.y = -1 * portDistance;\n      secondPort.y = portDistance;\n      firstPort.x = 0;\n      secondPort.x = 0;\n    }\n\n    var fromLorT = ordering === 'L-to-R' || ordering === 'T-to-B'; // Check if ordering starts from left or top\n\n    var ports = [firstPort, secondPort]; // Ports array for the node\n\n    var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n    cy.startBatch();\n    node.data('ports', ports); // Reset the portsource and porttarget for each edge connected to the node\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      var edgeClass = edge.data('class');\n      /*\n       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)\n       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.\n       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,\n       * else it is vice versa.\n       *\n       */\n\n      if (edge.data('target') === node.id()) {\n        if (edgeClass === 'production' || this.isModulationArcClass(edgeClass)) {\n          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)\n        }\n\n        if (fromLorT) {\n          edge.data('porttarget', firstPortId);\n        } else {\n          edge.data('porttarget', secondPortId);\n        }\n      } else {\n        if (edgeClass === 'consumption') {\n          continue; // consumpiton edge cannot be connected to any port of source node\n        }\n\n        if (fromLorT) {\n          edge.data('portsource', secondPortId);\n        } else {\n          edge.data('portsource', firstPortId);\n        }\n      }\n    }\n\n    cy.endBatch();\n  };\n  /*\n  * Remove the ports of the given node\n  */\n\n\n  elementUtilities.removePorts = function (node) {\n    var connectedEdges = node.connectedEdges();\n    var nodeId = node.id();\n    cy.startBatch(); // Reset portsource or porttarget of the connected edges to the node id\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n\n      if (edge.data('source') === nodeId) {\n        edge.data('portsource', nodeId);\n      } else {\n        edge.data('porttarget', nodeId);\n      }\n    }\n\n    node.data('ports', []); // Clear ports data\n\n    cy.endBatch();\n  };\n\n  elementUtilities.changePortsOrientationAfterLayout = function () {\n    //Check all processes and logical operators with ports\n    cy.nodes().forEach(function (ele) {\n      if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'truncated process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation' || ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not' || ele.data('class') === 'unknown logical operator') {\n        if (ele.data('ports').length === 2) {\n          var bestOrientation = elementUtilities.changePortsOrientation(ele);\n          elementUtilities.setPortsOrdering(ele, bestOrientation); // If improve-flow is checked we do the swaping of simple nodes with each other\n\n          var improveFlow = options.improveFlow;\n          improveFlow = typeof improveFlow === 'function' ? improveFlow.call() : improveFlow;\n\n          if (improveFlow) {\n            elementUtilities.postChangePortsOrientation(ele, bestOrientation);\n          }\n        }\n      }\n    });\n    cy.style().update();\n  };\n  /*\n   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.\n   */\n\n\n  elementUtilities.changePortsOrientation = function (ele) {\n    var processId = ele.id();\n    var orientation = {\n      'L-to-R': 0,\n      'R-to-L': 0,\n      'T-to-B': 0,\n      'B-to-T': 0\n    };\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\"); // Holds edges who have the input port as a target\n\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Holds edges who have the output port as a source\n    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports\n\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'truncated process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'consumption') {\n          var source = cy.getElementById(edge.data('source')); //Holds the element from the other side of edge\n\n          var simple = false; //Checks if it is a simple node - connected with only 1 edge\n\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'production') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not' || ele.data('class') === 'unknown logical operator') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'logic arc') {\n          var source = cy.getElementById(edge.data('source'));\n          var simple = false;\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    } //Calculates the best orientation from all orientation scores\n\n\n    var bestOrientation = \"L-to-R\";\n    var bestScore = orientation['L-to-R']; //The score of the best orientation is always positive\n\n    for (var property in orientation) {\n      if (orientation[property] > bestScore) {\n        bestScore = orientation[property];\n        bestOrientation = property;\n      }\n    }\n\n    return bestOrientation;\n  };\n  /*\n   This function calculates the scores for each orientation\n   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,\n   uncertain process, association, dissociation, logical operator\n   @param other - is the other node, and based on its position scores are given to orientations\n   @param orientation - holds scores for each orientation\n   @param firstOrientation - can be L-to-R or T-to-B\n   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)\n   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)\n   @param simple - checks if 'other' node is simple node (with degree 1)\n   */\n\n\n  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {\n    var coeff = 0.5;\n    var score = 2;\n    if (simple) score = 1; // If it is a simple node, its score should affect less\n\n    var nodeWidthOrHeight = 0;\n    if (pos === 'x') nodeWidthOrHeight = ele.width() / 2;else if (pos === 'y') nodeWidthOrHeight = ele.height() / 2;\n\n    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {\n      orientation[firstOrientation] += score;\n      orientation[oppositeOrientation] -= score;\n    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] -= score;\n      orientation[oppositeOrientation] += score;\n    }\n  };\n  /*\n  After a process is oriented, for each simple node that is on the wrong side of the port,\n  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.\n  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1\n  */\n\n\n  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {\n    var processId = ele.id();\n    var inputPort = []; // Holds all simple nodes connected with input port\n\n    var outputPort = []; // Holds all simple nodes connected with output port\n\n    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port\n\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\");\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Checks simple nodes and add them to one of the arrays mentioned above\n\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'truncated process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n\n        if (!source.isParent()) {\n          if (edge.data('class') === 'consumption') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n\n        if (!target.isParent()) {\n          if (edge.data('class') === 'production') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not' || ele.data('class') === 'unknown logical operator') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n\n        if (!source.isParent()) {\n          if (edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n\n        if (!target.isParent()) {\n          if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side\n\n\n    inputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    outputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    notConnectedToPort.sort(function (a, b) {\n      return a.score - b.score;\n    }); //First we check for direct swaping between nodes from different ports positioned to the wrong side\n\n    var minLength = inputPort.length;\n    if (outputPort.length < minLength) minLength = outputPort.length;\n\n    for (i = 0; i < minLength; i++) {\n      var inputPortEle = inputPort.pop();\n      var outputPortEle = outputPort.pop(); //Checks if free nodes belong to the same compound\n\n      var firstNode = cy.getElementById(inputPortEle.id);\n      var secondNode = cy.getElementById(outputPortEle.id);\n\n      if (firstNode.data('parent') !== secondNode.data('parent')) {\n        continue;\n      }\n\n      elementUtilities.swapElements(inputPortEle, outputPortEle);\n    }\n    /*\n     After that we iterate over each element of effector nodes and see the scores it produces by swaping\n     with nodes connected to input or output ports\n     */\n\n\n    for (i = notConnectedToPort.length - 1; i >= 0; i--) {\n      var effector = notConnectedToPort[i];\n\n      if (outputPort.length > 0) {\n        var firstOutput = outputPort[outputPort.length - 1]; //Checks if free nodes belong to the same compound\n\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstOutput.id);\n\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n\n        elementUtilities.swapElements(effector, firstOutput);\n        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);\n\n        if (firstOutputScore > firstOutput.score) {\n          outputPort.pop();\n        } else elementUtilities.swapElements(effector, firstOutput); //swap back\n\n      } else if (inputPort.length > 0) {\n        var firstInput = inputPort[inputPort.length - 1]; //Checks if free nodes belong to the same compound\n\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstInput.id);\n\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n\n        elementUtilities.swapElements(effector, firstInput);\n        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);\n\n        if (firstInputScore > firstInput.score) {\n          inputPort.pop();\n        } else elementUtilities.swapElements(effector, firstInput);\n      }\n    }\n  };\n  /*\n  * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays\n  * */\n\n\n  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {\n    if (other.connectedEdges().length === 1) {\n      var nodeScore;\n      var obj = {};\n\n      if (connectedTo === \"notConnected\") {\n        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));\n        obj['id'] = other.id();\n        obj['score'] = nodeScore;\n        array.push(obj);\n      } else {\n        if (connectedTo === \"input\") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === \"output\") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);\n\n        if (nodeScore < 0) //if it is in the wrong side we add it to the input array\n          {\n            obj['id'] = other.id();\n            obj['score'] = nodeScore;\n            array.push(obj);\n          }\n      }\n    }\n  };\n  /*\n  This function calculates the score of a node based on its position with respect to a process/logical operator\n  @param ele - is the node with the ports. It can be process,omitted process,\n  uncertain process, association, dissociation, logical operator\n  @param other - is the other node, and based on its position score of a node is calculated\n  @param orientation - A string which holds current best orientation\n  */\n\n\n  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {\n    var coeff = 0.5;\n    var score = 1;\n\n    if (orientation === 'L-to-R' || orientation === 'R-to-L') {\n      var nodeWidth = ele.width() / 2;\n\n      if (other.position('x') < ele.position('x') - nodeWidth) {\n        if (orientation === 'L-to-R') return score;else if (orientation === 'R-to-L') return -score;\n      } else if (other.position('x') >= ele.position('x') - nodeWidth && other.position('x') <= ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return (ele.position('x') - other.position('x')) / nodeWidth * coeff;else if (orientation === 'R-to-L') return -(ele.position('x') - other.position('x')) / nodeWidth * coeff;\n      } else if (other.position('x') > ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return -score;else if (orientation === 'R-to-L') return score;\n      }\n    }\n\n    if (orientation === 'T-to-B' || orientation === 'B-to-T') {\n      var nodeHeight = ele.height() / 2;\n\n      if (other.position('y') < ele.position('y') - nodeHeight) {\n        if (orientation === 'T-to-B') return score;else if (orientation === 'B-to-T') return -score;\n      } else if (other.position('y') >= ele.position('y') - nodeHeight && other.position('y') <= ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return (ele.position('y') - other.position('y')) / nodeHeight * coeff;else if (orientation === 'B-to-T') return -(ele.position('y') - other.position('y')) / nodeHeight * coeff;\n      } else if (other.position('y') > ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return -score;else if (orientation === 'B-to-T') return score;\n      }\n    }\n  };\n  /*\n  Swaps the positions of 2 elements\n  */\n\n\n  elementUtilities.swapElements = function (firstEle, secondEle) {\n    var firstNode = cy.getElementById(firstEle.id);\n    var secondNode = cy.getElementById(secondEle.id);\n    var tempx = firstNode.position('x');\n    var tempy = firstNode.position('y');\n    firstNode.position('x', secondNode.position('x'));\n    firstNode.position('y', secondNode.position('y'));\n    secondNode.position('x', tempx);\n    secondNode.position('y', tempy);\n  }; // used for handling the variable property of complexes\n\n\n  elementUtilities.getComplexPadding = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var padding = graphUtilities.getCompoundPaddings();\n    padding = padding < 5 ? 5 : padding;\n\n    if (options.showComplexName && elementUtilities.getElementContent(ele)) {\n      padding += options.extraComplexPadding * 0.5; // if there is something on the bottom side\n\n      if (ele.data('auxunitlayouts') && ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n        padding += options.extraComplexPadding * 0.5;\n      } else {\n        for (var i = 0; i < ele.data('statesandinfos').length; i++) {\n          var statesandinfos = ele.data('statesandinfos')[i];\n          var thisY = statesandinfos.bbox.y;\n          var thisH = statesandinfos.bbox.h;\n          var parentY = ele.data('class') == \"compartment\" || ele.data('class') == \"complex\" ? ele.data('bbox').y : ele.position().y;\n          var height = ele.data(\"originalH\") ? ele.data(\"originalH\") : ele.height();\n          var parentY2 = Number((parentY + height / 2).toFixed(2));\n          var centerY = Number((thisY + thisH / 2).toFixed(2));\n\n          if (centerY == parentY2) {\n            padding += options.extraComplexPadding * 0.5;\n            break;\n          }\n        }\n      }\n    } // for the case where the padding is the tightest, we need a bit of extra space\n    // to avoid touching the infoboxes of the complex\n    else {\n      if (ele.data('statesandinfos').length > 0) {\n        padding += 2;\n      }\n    }\n\n    return padding;\n  }; // used for handling the variable property of complexes\n\n\n  elementUtilities.getComplexMargin = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var margin = -1 * options.extraComplexPadding;\n\n    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data('auxunitlayouts') && // check if there is something on the bottom side\n    ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n      margin -= options.extraComplexPadding * 0.5;\n    }\n\n    if (ele.css(\"font-size\") == \"14px\") margin -= 2;\n    return margin;\n  }; // Set clone marker status of given nodes to the given status.\n\n\n  elementUtilities.setCloneMarkerStatus = function (node, status) {\n    if (status) node.data('clonemarker', true);else node.removeData('clonemarker');\n    if (node.data('class') !== \"unspecified entity\" && node.data('class') !== \"perturbing agent\") return;\n    var bgObj = {\n      'background-image': 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E',\n      'background-position-x': '50%',\n      'background-position-y': '100%',\n      'background-width': '100%',\n      'background-height': '25%',\n      'background-fit': 'none',\n      'background-image-opacity': '0'\n    };\n    var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n    var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n    var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n    var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n    var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n    var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n    var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n\n    if (status) {\n      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity non-zero\n\n      if (index > -1) opacities[index] = node.css('background-opacity');else {\n        imgs.push(bgObj['background-image']);\n        xPos.push(bgObj['background-position-x']);\n        yPos.push(bgObj['background-position-y']);\n        widths.push(bgObj['background-width']);\n        heights.push(bgObj['background-height']);\n        fits.push(bgObj['background-fit']);\n        opacities.push(node.css('background-opacity'));\n      }\n    } else {\n      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity zero\n\n      if (index > -1) opacities[index] = '0';\n    }\n\n    node.data('background-image', imgs.join(\" \"));\n    node.data('background-position-x', xPos.join(\" \"));\n    node.data('background-position-y', yPos.join(\" \"));\n    node.data('background-width', widths.join(\" \"));\n    node.data('background-height', heights.join(\" \"));\n    node.data('background-fit', fits.join(\" \"));\n    node.data('background-image-opacity', opacities.join(\" \"));\n  }; // Section End\n  // Stylesheet helpers\n\n\n  var defaultProperties = {};\n\n  var getDefaultNodeProperties = function getDefaultNodeProperties() {\n    return {\n      'border-width': 1.25,\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'background-opacity': 1,\n      'background-image-opacity': 1,\n      'text-wrap': 'wrap',\n      'border-style': 'solid'\n    };\n  };\n\n  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {\n    return {\n      'line-color': '#555555',\n      'width': 1.25\n    };\n  };\n\n  var getDefaultProcessSize = function getDefaultProcessSize() {\n    return {\n      width: 20,\n      height: 20\n    };\n  };\n\n  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {\n    return {\n      width: 30,\n      height: 30\n    };\n  };\n\n  var getDefaultBASize = function getDefaultBASize() {\n    return {\n      width: 60,\n      height: 30\n    };\n  };\n\n  var defaultSifEdgeColorMap = {\n    'neighbor-of': '#FC002C',\n    'interacts-with': '#B57261',\n    'in-complex-with': '#B4987A',\n    'controls-state-change-of': '#B4E1CD',\n    'controls-transport-of': '#F0E7C8',\n    'controls-phosphorylation-of': '#D970A1',\n    'catalysis-precedes': '#8EC3ED',\n    'controls-expression-of': '#6A0F30',\n    'consumption-controled-by': '#A9A9F7',\n    'controls-production-of': '#2D5207',\n    'controls-transport-of-chemical': '#3F00FF',\n    'chemical-affects': '#D95F23',\n    'reacts-with': '#4E214B',\n    'used-to-produce': '#FF2F07',\n    'phosphorylates': '#43A93C',\n    'dephosphorylates': '#CD4F32',\n    'upregulates-expression': '#43A93C',\n    'downregulates-expression': '#CD4F32',\n    'activates': '#32D849',\n    'inhibits': '#4886A5',\n    'activates-gtpase': '#468DE3',\n    'inhibits-gtpase': '#C364BF',\n    'acetylates': '#55B1B6',\n    'deacetylates': '#EE5F78',\n    'methylates': '#B0B03D',\n    'demethylates': '#DB6F21'\n  };\n  var defaultSizeMap = (_defaultSizeMap = {\n    'macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'protein': {\n      width: 60,\n      height: 30\n    },\n    'nucleic acid feature': {\n      width: 60,\n      height: 30\n    },\n    'simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'empty set': {\n      width: 22,\n      height: 22\n    },\n    'degradation': {\n      width: 22,\n      height: 22\n    },\n    'phenotype': {\n      width: 60,\n      height: 30\n    },\n    'unspecified entity': {\n      width: 60,\n      height: 30\n    },\n    'perturbing agent': {\n      width: 60,\n      height: 30\n    },\n    'complex': {\n      width: 44,\n      height: 44\n    },\n    'compartment': {\n      width: 80,\n      height: 80\n    },\n    'submap': {\n      width: 80,\n      height: 80\n    },\n    'tag': {\n      width: 35,\n      height: 35\n    },\n    'SIF macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'SIF simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'topology group': {\n      width: 44,\n      height: 44\n    },\n    'gene': {\n      width: 50,\n      height: 30\n    },\n    'rna': {\n      width: 50,\n      height: 44\n    },\n    'simple-molecule': {\n      width: 30,\n      height: 30\n    },\n    'unknown molecule': {\n      width: 60,\n      height: 30\n    },\n    'ion': {\n      width: 30,\n      height: 30\n    },\n    'drug': {\n      width: 60,\n      height: 40\n    }\n  }, _defineProperty(_defaultSizeMap, \"phenotype\", {\n    width: 30,\n    height: 30\n  }), _defineProperty(_defaultSizeMap, 'simple molecule', {\n    width: 50,\n    height: 40\n  }), _defineProperty(_defaultSizeMap, 'truncated protein', {\n    width: 60,\n    height: 40\n  }), _defineProperty(_defaultSizeMap, 'ion channel', {\n    width: 60,\n    height: 40\n  }), _defineProperty(_defaultSizeMap, 'receptor', {\n    width: 60,\n    height: 40\n  }), _defineProperty(_defaultSizeMap, 'phenotype sbml', {\n    width: 50,\n    height: 50\n  }), _defineProperty(_defaultSizeMap, 'complex sbml', {\n    width: 44,\n    height: 44\n  }), _defaultSizeMap);\n  elementUtilities.processTypes.forEach(function (type) {\n    // phenotype has a different default size\n    if (type == 'phenotype') {\n      return;\n    }\n\n    defaultSizeMap[type] = getDefaultProcessSize();\n  });\n  elementUtilities.logicalOperatorTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultLogicalOperatorSize();\n  });\n  elementUtilities.biologicalActivityTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultBASize();\n  });\n\n  var getDefaultSize = function getDefaultSize(type) {\n    return defaultSizeMap[type];\n  };\n\n  var getDefaultFontProperties = function getDefaultFontProperties() {\n    return {\n      'font-size': 11,\n      'font-family': 'Helvetica',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'color': '#000'\n    };\n  };\n\n  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {\n    return {\n      'font-size': getDefaultInfoboxFontSize(nodeClass, infoboxType),\n      'font-family': 'Arial',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'font-color': '#0f0f0f',\n      'border-width': 1,\n      'border-style': 'solid',\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'shape-name': getDefaultInfoboxShapeName(nodeClass, infoboxType),\n      'width': getDefaultInfoboxSize(nodeClass, infoboxType).w,\n      'height': getDefaultInfoboxSize(nodeClass, infoboxType).h\n    };\n  };\n\n  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {\n    var fontsize = 9;\n\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      fontsize = 11;\n    }\n\n    return fontsize;\n  };\n\n  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {\n    var w = 12,\n        h = 12;\n\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      w = 15;\n      h = 15;\n    }\n\n    return {\n      w: w,\n      h: h\n    };\n  };\n\n  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {\n    if (infoboxType === 'state variable' || infoboxType === 'residue variable') {\n      return 'stadium';\n    }\n\n    if (elementUtilities.isSIFNode(nodeClass)) {\n      if (infoboxType === 'unit of information' || infoboxType === 'binding region') {\n        if (nodeClass == 'SIF macromolecule') {\n          return 'stadium';\n        }\n\n        return 'rectangle';\n      }\n    } else {\n      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);\n      return list[0];\n    }\n  };\n\n  elementUtilities.nodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));\n\n    if (elementUtilities.canHaveStateVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, 'state variable');\n      defaultProperties[type]['state variable'] = props;\n    }\n\n    if (elementUtilities.canHaveResidueVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, 'residue variable');\n      defaultProperties[type]['residue variable'] = props;\n    }\n\n    if (elementUtilities.canHaveBindingRegion(type)) {\n      var props = getDefaultInfoboxProperties(type, 'binding region');\n      defaultProperties[type]['binding region'] = props;\n    }\n\n    if (elementUtilities.canHaveUnitOfInformation(type)) {\n      var props = getDefaultInfoboxProperties(type, 'unit of information');\n      defaultProperties[type]['unit of information'] = props;\n    }\n  });\n  elementUtilities.compoundNodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend(defaultProperties[type], {\n      'background-opacity': 0.5\n    });\n  });\n  $.extend(defaultProperties['association'], {\n    'background-color': '#707070'\n  });\n  $.extend(defaultProperties['unknown molecule'], {\n    'background-color': '#707070'\n  });\n  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat(['phenotype']).concat(elementUtilities.sbmlType).forEach(function (type) {\n    $.extend(defaultProperties[type], getDefaultFontProperties());\n  });\n  $.extend(defaultProperties['submap'], {\n    'font-size': 14,\n    'border-width': 2.25\n  });\n  $.extend(defaultProperties['compartment'], {\n    'font-size': 14,\n    'border-width': 3.25\n  });\n  elementUtilities.edgeTypes.forEach(function (type) {\n    defaultProperties[type] = getDefaultEdgeProperties();\n\n    if (defaultSifEdgeColorMap[type]) {\n      defaultProperties[type]['line-color'] = defaultSifEdgeColorMap[type];\n    }\n  });\n\n  function getProp(props, name) {\n    var prop = props[name];\n\n    if (_typeof(prop) !== null && _typeof(prop) === 'object') {\n      return $.extend({}, prop);\n    }\n\n    return prop;\n  }\n\n  function extendDataWithClassDefaults(data, className, propsToSkip) {\n    if (!className) {\n      return;\n    }\n\n    var defaultProps = elementUtilities.getDefaultProperties(className);\n    Object.keys(defaultProps).forEach(function (name) {\n      if (!propsToSkip || !propsToSkip[name]) {\n        data[name] = getProp(defaultProps, name);\n      }\n    });\n  }\n\n  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {\n    // list of properties to skip\n    var propsToSkip = {\n      'width': true,\n      'height': true,\n      'state variable': true,\n      'residue variable': true,\n      'binding region': true,\n      'unit of information': true,\n      'multimer': true,\n      'clonemarker': true,\n      'ports-ordering': true,\n      'active': true,\n      'hypothetical': true\n    };\n    extendDataWithClassDefaults(data, className, propsToSkip);\n  };\n\n  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {\n    extendDataWithClassDefaults(data, className);\n  }; // get infobox properties and filter the ones related to style only\n\n\n  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {\n    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);\n    var infoboxStyle = $.extend({}, defaultProps[infoboxType]); // width and height are belonging to bbox object rather than style object\n\n    var nonStyleProps = ['width', 'height'];\n    nonStyleProps.forEach(function (propName) {\n      delete infoboxStyle[propName];\n    });\n    return infoboxStyle;\n  };\n\n  elementUtilities.getDefaultProperties = function (sbgnclass) {\n    if (sbgnclass == undefined) {\n      return defaultProperties;\n    }\n\n    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass); // init default properties for the class if not initialized yet\n    //console.log('defaultProperties[ pureClass ] ', defaultProperties[ pureClass ] )\n\n    if (defaultProperties[pureClass] == null) {\n      defaultProperties[pureClass] = {};\n    }\n\n    return defaultProperties[pureClass];\n  };\n\n  elementUtilities.setDefaultProperties = function (sbgnclass, props) {\n    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);\n  };\n\n  elementUtilities.lockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = true;\n\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').disableCue();\n    }\n  };\n\n  elementUtilities.unlockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = false;\n\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').enableCue();\n    }\n  };\n\n  elementUtilities.isGraphTopologyLocked = function () {\n    return elementUtilities.graphTopologyLocked;\n  };\n\n  elementUtilities.languageToMapType = function (lang) {\n    switch (lang) {\n      case 'process description':\n        return 'PD';\n\n      case 'activity flow':\n        return 'AF';\n\n      case 'sif':\n        return 'SIF';\n\n      case 'sbml':\n        return 'SBML';\n\n      case 'hybrid sbgn':\n        return 'HybridSbgn';\n\n      default:\n        return 'HybridAny';\n    }\n  };\n\n  elementUtilities.mapTypeToLanguage = function (mapType) {\n    switch (mapType) {\n      case 'PD':\n        return 'process description';\n\n      case 'AF':\n        return 'activity flow';\n\n      case 'SIF':\n        return 'sif';\n\n      case 'SBML':\n        return 'sbml';\n\n      case 'HybridSbgn':\n        return 'hybrid sbgn';\n\n      default:\n        return 'hybrid any';\n    }\n  };\n\n  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {\n    var expandCollapse = cy.expandCollapse('get');\n    var collapsedChildren = cy.collection();\n    var collapsedNodes = nodes.filter(\".cy-expand-collapse-collapsed-node\");\n    collapsedNodes.forEach(function (n) {\n      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));\n    });\n    return collapsedChildren;\n  };\n\n  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {\n    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);\n  };\n\n  return elementUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  var parsedDataMap;\n  var visibleDataMapByExp;\n  var groupedDataMap;\n  var visibleFiles;\n  var colorMap;\n  var allVis;\n  var fileDescription;\n  var fileTitle;\n\n  function experimentalDataOverlay(param) {\n    // Init\n    cy = param.sbgnCyInstance.getCy();\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    colorMap = {};\n    allVis = true;\n    fileDescription = {};\n    fileTitle = {};\n  }\n\n  experimentalDataOverlay.getName = function () {\n    return fname;\n  };\n\n  experimentalDataOverlay.getDesc = function () {\n    return fdesc;\n  };\n\n  experimentalDataOverlay.getGroupedDataMap = function () {\n    return groupedDataMap;\n  };\n\n  experimentalDataOverlay.getParsedDataMap = function () {\n    return parsedDataMap;\n  };\n\n  experimentalDataOverlay.getVisibleData = function () {\n    return visibleDataMapByExp;\n  };\n\n  experimentalDataOverlay.hideAll = function () {\n    var invisibleExp = {};\n    var invisibleFile = {};\n    allVis = false;\n\n    for (var i in groupedDataMap) {\n      if (visibleFiles[i]) {\n        visibleFiles[i] = false;\n        invisibleFile[i] = false;\n      }\n    }\n\n    for (var fileName in groupedDataMap) {\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n        if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n          invisibleExp[fileName + '?' + expName] = false;\n          visibleDataMapByExp[fileName + '?' + expName] = false;\n        }\n      }\n    }\n\n    this.showData();\n    params = {\n      invisibleFile: invisibleFile,\n      invisibleExp: invisibleExp\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {\n    for (var j in invisibleFile) {\n      visibleFiles[j] = true;\n    }\n\n    for (var _j in invisibleExp) {\n      visibleDataMapByExp[_j] = true;\n    }\n\n    allVis = true;\n    this.showData();\n    return;\n  };\n\n  experimentalDataOverlay.unhideAll = function () {\n    var visibleExp = {};\n    var visibleFile = {};\n    allVis = true;\n\n    for (var i in visibleFiles) {\n      if (!visibleFiles[i]) {\n        visibleFiles[i] = true;\n        visibleFile[i] = true;\n      }\n    }\n\n    for (var fileName in groupedDataMap) {\n      if (groupedDataMap[fileName] == undefined) {\n        return;\n      }\n\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n        if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n          visibleExp[fileName + '?' + expName] = true;\n          visibleDataMapByExp[fileName + '?' + expName] = true;\n        }\n      }\n    }\n\n    this.showData();\n    return {\n      visibleExp: visibleExp,\n      visibleFile: visibleFile\n    };\n  };\n\n  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {\n    for (var j in visibleFile) {\n      visibleFiles[j] = false;\n    }\n\n    for (var _j2 in visibleExp) {\n      visibleDataMapByExp[_j2] = false;\n    }\n\n    allVis = false;\n    this.showData();\n    return;\n  };\n\n  experimentalDataOverlay.removeAll = function () {\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i in visibleDataMapByExp) {\n      visible[_i] = visibleDataMapByExp[_i];\n    }\n\n    for (var _i2 in visibleFiles) {\n      visiblef[_i2] = visibleFiles[_i2];\n    }\n\n    for (var _i3 in groupedDataMap) {\n      if (!grouped[_i3]) {\n        grouped[_i3] = [];\n      }\n\n      for (var _j3 in groupedDataMap[_i3]) {\n        grouped[_i3].push(groupedDataMap[_i3][_j3]);\n      }\n    }\n\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    this.showData();\n    params = {\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {};\n    return param;\n  };\n\n  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {\n    visibleDataMapByExp[fileName + '?' + expName] = isVisible;\n    groupedDataMap[fileName] = groupArray;\n\n    for (var i in values) {\n      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];\n    }\n\n    var params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {\n      fileName: fileName\n    };\n    return param;\n  };\n\n  experimentalDataOverlay.removeExp = function (fileName, expName) {\n    var isVisible = false;\n    var values = {};\n    var groupArray = [];\n\n    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {\n      isVisible = visibleDataMapByExp[fileName + '?' + expName];\n      delete visibleDataMapByExp[fileName + '?' + expName];\n    }\n\n    if (groupedDataMap[fileName] != undefined) {\n      for (var i in groupedDataMap[fileName]) {\n        groupArray[i] = groupedDataMap[fileName][i];\n      } //groupArray = groupedDataMap[fileName];\n\n\n      var index = groupedDataMap[fileName].indexOf(expName);\n\n      if (index != -1) {\n        delete groupedDataMap[fileName][index];\n      }\n    }\n\n    for (var _i4 in parsedDataMap) {\n      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {\n        if (!(_i4 in values)) {\n          values[_i4] = {};\n        }\n\n        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];\n        delete parsedDataMap[_i4][fileName + '?' + expName];\n      }\n    }\n\n    if (groupedDataMap[fileName] != undefined) {\n      var count = 0;\n\n      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {\n        if (!groupedDataMap[fileName][_i5]) count++;\n      }\n\n      if (count == groupedDataMap[fileName].length) {\n        delete groupedDataMap[fileName];\n      }\n    }\n\n    params = {\n      fileName: fileName,\n      expName: expName,\n      isVisible: isVisible,\n      values: values,\n      groupArray: groupArray\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.removeFile = function (fileName) {\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i6 in visibleDataMapByExp) {\n      visible[_i6] = visibleDataMapByExp[_i6];\n    }\n\n    for (var _i7 in visibleFiles) {\n      visiblef[_i7] = visibleFiles[_i7];\n    }\n\n    for (var _i8 in groupedDataMap) {\n      if (!grouped[_i8]) {\n        grouped[_i8] = [];\n      }\n\n      for (var _j4 in groupedDataMap[_i8]) {\n        grouped[_i8].push(groupedDataMap[_i8][_j4]);\n      }\n    }\n\n    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {\n      var expName = groupedDataMap[fileName][_j5];\n      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];\n\n      for (var _i9 in parsedDataMap) {\n        delete parsedDataMap[_i9][fileName + '?' + expName];\n      }\n    }\n\n    delete groupedDataMap[fileName];\n    var params = {\n      fileName: fileName,\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    this.showData();\n    var k = 0;\n\n    for (var _i10 in groupedDataMap) {\n      k++;\n    }\n\n    if (k == 0) {\n      groupedDataMap = {};\n    }\n\n    return params;\n  };\n\n  experimentalDataOverlay.hideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = false;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.hideFile = function (fileName) {\n    visibleFiles[fileName] = false;\n    var invisible = {};\n\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n      if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n        invisible[fileName + '?' + expName] = false;\n        visibleDataMapByExp[fileName + '?' + expName] = false;\n      }\n    }\n\n    this.showData();\n    params = {\n      fileName: fileName,\n      invisible: invisible\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {\n    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;\n\n    for (var j in invisible) {\n      visibleDataMapByExp[j] = true;\n    }\n\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n\n  experimentalDataOverlay.unhideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = true;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.unhideFile = function (fileName) {\n    var visible = {};\n    visibleFiles[fileName] = true;\n\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n      if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n        visibleDataMapByExp[fileName + '?' + expName] = true;\n        visible[fileName + '?' + expName] = true;\n      }\n    }\n\n    this.showData();\n    params = {\n      fileName: fileName,\n      visible: visible\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {\n    visibleFiles[fileName] = false;\n\n    for (var j in visible) {\n      visibleDataMapByExp[j] = false;\n    }\n\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n\n  experimentalDataOverlay.countVisibleDataByExp = function () {\n    // Count the genomic data that will be displayed on nodes' body\n    var dataBoxCount = 0;\n\n    for (var exp in visibleDataMapByExp) {\n      if (visibleDataMapByExp[exp]) {\n        dataBoxCount++;\n      }\n    }\n\n    return dataBoxCount;\n  };\n\n  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {\n    var dataBoxCount = this.countVisibleDataByExp();\n    var values = []; // Experimental data overlay part !\n    // const dataURI = 'data:image/svg+xml;utf8,'\n\n    var svgNameSpace = 'http://www.w3.org/2000/svg';\n    var nodeLabel = ele.data('label');\n    var reqWidth = ele.outerWidth();\n    var reqHeight = ele.outerHeight();\n    var overlayRecBoxW = reqWidth;\n    var overlayRecBoxH = reqHeight;\n    var svg = document.createElementNS(svgNameSpace, 'svg'); // It seems this should be set according to the node size !\n\n    svg.setAttribute('width', reqWidth);\n    svg.setAttribute('height', reqHeight); // This is important you need to include this to succesfully render in cytoscape.js!\n\n    svg.setAttribute('xmlns', svgNameSpace); // Overlay Data Rect\n\n    var overLayRectBBox = {\n      w: overlayRecBoxW,\n      h: overlayRecBoxH,\n      x: 0,\n      y: 0\n    };\n    var frequencyData = parsedDataMap[nodeLabel];\n    var maxDataBoxCount =\n    /*(genomicDataBoxCount > 3) ? 3:*/\n    dataBoxCount;\n    var counter = 0;\n\n    for (var i in groupedDataMap) {\n      for (var j in groupedDataMap[i]) {\n        var fileName = i;\n        var expName = groupedDataMap[i][j];\n\n        if (!visibleDataMapByExp[fileName + '?' + expName]) {\n          continue;\n        }\n\n        if (frequencyData[fileName + '?' + expName] !== undefined) {\n          values.push(frequencyData[fileName + '?' + expName]);\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);\n        } else {\n          values.push(\"-\");\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);\n        } //  draw separator line between data rectangles\n\n\n        if (counter < maxDataBoxCount - 1) {\n          var overlayRect = document.createElementNS(svgNameSpace, 'line');\n          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y1', overLayRectBBox.y);\n          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);\n          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');\n          svg.appendChild(overlayRect);\n        }\n\n        counter++;\n      }\n    }\n\n    tooltip.content = \"(\" + values.join(\",\") + \")\";\n\n    function interpolateColor(color1, color2, factor) {\n      var result = color1.slice();\n\n      for (var i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n      }\n\n      return result;\n    }\n\n    ;\n\n    function decideColor(percent, fileName) {\n      var sorted = [];\n\n      for (var _i11 in colorMap[fileName]) {\n        sorted.push(_i11);\n      }\n\n      sorted.sort();\n      var prev = sorted[0];\n      var next = sorted[sorted.length - 1];\n\n      if (percent < prev || percent > next) {\n        return {\n          r: 210,\n          g: 210,\n          b: 210\n        };\n      }\n\n      for (var k in sorted) {\n        var i = sorted[k];\n\n        if (i == percent) {\n          return {\n            r: colorMap[fileName][i][0],\n            g: colorMap[fileName][i][1],\n            b: colorMap[fileName][i][2]\n          };\n        } else if (i > percent) {\n          next = i;\n          break;\n        } else {\n          prev = i;\n        }\n      }\n\n      var steps = 1 / (next - prev);\n      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));\n      return {\n        r: res[0],\n        g: res[1],\n        b: res[2]\n      };\n    }\n\n    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {\n      var colorString = '';\n\n      if (percent) {\n        var color = decideColor(parseInt(percent), fileName);\n        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')'; // Rectangle Part\n\n        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');\n\n        _overlayRect.setAttribute('x', x);\n\n        _overlayRect.setAttribute('y', y);\n\n        _overlayRect.setAttribute('width', w);\n\n        _overlayRect.setAttribute('height', h);\n\n        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n\n        parentSVG.appendChild(_overlayRect);\n      } else {\n        colorString = 'rgb(210,210,210)'; // Rectangle Part\n\n        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');\n\n        _overlayRect2.setAttribute('x', x);\n\n        _overlayRect2.setAttribute('y', y);\n\n        _overlayRect2.setAttribute('width', w);\n\n        _overlayRect2.setAttribute('height', h);\n\n        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n\n        parentSVG.appendChild(_overlayRect2);\n      }\n    }\n\n    return svg;\n  };\n\n  experimentalDataOverlay.showData = function () {\n    var self = this;\n    var nodeCollection = cy.collection();\n    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter(\"node\");\n    var collapsedChildrenNotParent = cy.collection();\n    var parentSet = new Set(); // parent ids of collapsed children\n\n    collapsedChildren.forEach(function (node) {\n      parentSet.add(node.parent().id());\n    }); // filter parent nodes from collapsed children\n\n    collapsedChildren.forEach(function (node) {\n      if (!parentSet.has(node.id())) {\n        // this means removed node is not parent\n        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);\n      }\n    });\n    var expandableNodes = cy.expandCollapse('get').expandableNodes();\n    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);\n    cy.batch(function () {\n      nodeCollection.forEach(function (node) {\n        var nodeLabel = node.data('label');\n        var imageURI = 'data:image/svg+xml;utf8,';\n\n        if (nodeLabel in parsedDataMap && !node.isParent()) {\n          var tooltip = {\n            content: ''\n          };\n          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);\n\n          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {\n            // var tooltip = \"(\" + Object.values(parsedDataMap[nodeLabel]).join(\",\") + \")\";\n            node.data(\"tooltip\", tooltip.content);\n          } else {\n            node.data('tooltip', '');\n          }\n\n          node.data('background-image', imageURI), node.data('background-position-x', '100%');\n          node.data('background-position-y', '100%');\n          node.data('background-width', '100%');\n          node.data('background-height', '100%');\n          node.data('background-fit', 'contain');\n          node.data('background-image-opacity', '1');\n        } else {\n          node.data('background-image', \"\");\n          node.data('tooltip', '');\n        }\n      });\n    });\n  };\n\n  experimentalDataOverlay.hexToRgb = function (hex) {\n    if (hex[0] == '#') {\n      hex = hex.substring(1);\n    } else {\n      return;\n    }\n\n    var bigint = parseInt(hex, 16);\n    var r = bigint >> 16 & 255;\n    var g = bigint >> 8 & 255;\n    var b = bigint & 255;\n    return [r, g, b];\n  };\n\n  experimentalDataOverlay.isHex = function (hex) {\n    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';\n  };\n\n  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {\n    parsedDataMap = parsedDataMap || {};\n    visibleDataMapByExp = visibleDataMapByExp || {};\n    groupedDataMap = groupedDataMap || {};\n    colorMap = colorMap || {};\n    var experiments = [];\n    var colors = {};\n\n    if (fileName in groupedDataMap && !sampleExperiment) {\n      return;\n    } else if (fileName in groupedDataMap && sampleExperiment) {\n      this.removeAll();\n    }\n\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    var colorm = {};\n    var fileD = {};\n    var fileN = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i12 in visibleDataMapByExp) {\n      visible[_i12] = visibleDataMapByExp[_i12];\n    }\n\n    for (var _i13 in visibleFiles) {\n      visiblef[_i13] = visibleFiles[_i13];\n    }\n\n    for (var _i14 in groupedDataMap) {\n      if (!grouped[_i14]) {\n        grouped[_i14] = [];\n      }\n\n      for (var _j6 in groupedDataMap[_i14]) {\n        grouped[_i14].push(groupedDataMap[_i14][_j6]);\n      }\n    }\n\n    for (var _i15 in colorMap) {\n      colorm[_i15] = colorMap[_i15];\n    }\n\n    for (var _i16 in visibleFiles) {\n      fileD[_i16] = fileDescription[_i16];\n    }\n\n    for (var _i17 in visibleFiles) {\n      fileN[_i17] = fileTitle[_i17];\n    }\n\n    var intregex = \"^(-?)(0|([1-9][0-9]*))(\\\\.[0-9]+)?$\";\n    var version = '1.0';\n    var clr = false; // By lines\n\n    var lines = data.split('\\n');\n\n    if (lines.length < 2) {\n      errorCallback();\n      return \"Error\";\n    }\n\n    var k = 0;\n    var upto = 4;\n\n    if (lines.length < 4) {\n      upto = lines.length;\n    }\n\n    for (var _i18 = 0; _i18 < upto; _i18++) {\n      if (lines[_i18].substring(0, 7) == 'version') {\n        k++;\n\n        var metaLines = lines[_i18].split('\\t');\n\n        if (metaLines[1] && metaLines[1].length > 1) {\n          version = metaLines[1];\n        } else {\n          fileDescription = fileD;\n          fileTitle = fileN;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 4) == 'name') {\n        k++;\n\n        var _metaLines = lines[_i18].split('\\t');\n\n        if (_metaLines[1] && _metaLines[1].length > 1) {\n          fileTitle[fileName] = _metaLines[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 11) == 'description') {\n        k++;\n\n        var _metaLines2 = lines[_i18].split('\\t');\n\n        if (_metaLines2[1] && _metaLines2[1].length > 1) {\n          fileDescription[fileName] = _metaLines2[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 5) == 'color') {\n        clr = true;\n        k++;\n\n        var _metaLines3 = lines[_i18].split('\\t');\n\n        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {\n          errorCallback();\n          return \"Error\";\n        }\n\n        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {\n          var hex = _metaLines3[t + 1];\n\n          if (t == _metaLines3.length - 2) {\n            hex = hex.trim();\n          }\n\n          if (_metaLines3[t] == \"min\" || _metaLines3[t] == \"max\") {\n            if (this.isHex(hex)) {\n              colors[_metaLines3[t]] = this.hexToRgb(hex);\n            }\n          } else if (parseInt(_metaLines3[t]) != NaN) {\n            if (this.isHex(hex)) {\n              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);\n            } else {\n              fileTitle = fileN;\n              fileDescription = fileD;\n              colorMap = colorm;\n              version = \"1.0\";\n              errorCallback();\n              return \"Error\";\n            }\n          } else {\n            fileTitle = fileN;\n            fileDescription = fileD;\n            colorMap = colorm;\n            version = \"1.0\";\n            errorCallback();\n            return \"Error\";\n          }\n        }\n      }\n    } //default colors\n\n\n    if (!clr) {\n      colors[-100] = this.hexToRgb('#0000ff');\n      colors[100] = this.hexToRgb('#ff0000');\n      colors[0] = this.hexToRgb('#ffffff');\n    } // First line is meta data !\n\n\n    var metaLineColumns = lines[k].split('\\t'); // Parse experiment types\n\n    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {\n      if (_i19 == metaLineColumns.length - 1) {\n        var trimmed = metaLineColumns[_i19].trim();\n\n        experiments.push(trimmed);\n      } else experiments.push(metaLineColumns[_i19]);\n\n      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;\n\n      if (groupedDataMap[fileName] === undefined) {\n        groupedDataMap[fileName] = [];\n      }\n\n      groupedDataMap[fileName].push(experiments[_i19 - 1]);\n    }\n\n    visibleFiles[fileName] = true;\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE; // parse genomic data\n\n    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {\n      // EOF check\n      if (lines[_i20].length === 0) {\n        break;\n      } // Split each line by tab and parse genomic data content\n\n\n      var lineContent = lines[_i20].split('\\t');\n\n      var eleSymbol = lineContent[0]; // If current gene entry is not  in genomic data map create new map\n\n      if (!(eleSymbol in parsedDataMap)) {\n        parsedDataMap[eleSymbol] = {};\n      } // Add each entry of genomic data\n\n\n      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {\n        if (_j7 == lineContent.length - 1) {\n          lineContent[_j7] = lineContent[_j7].trim();\n        }\n\n        if (lineContent[_j7].match(intregex)) {\n          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];\n        } else {\n          parsedDataMap = parsed;\n          visibleDataMapByExp = visible;\n          groupedDataMap = grouped;\n          colorMap = colorm;\n          visibleFiles = visiblef;\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          errorCallback();\n          return \"Error\";\n        }\n\n        if (lineContent[_j7] > max) {\n          max = lineContent[_j7];\n        }\n\n        if (lineContent[_j7] < min) {\n          min = lineContent[_j7];\n        }\n      }\n    }\n\n    if (colors['min']) {\n      var colorvalue = colors['min'];\n      delete colors['min'];\n      colors[min] = colorvalue;\n    }\n\n    if (colors['max']) {\n      var colorvalue = colors['max'];\n      delete colors['max'];\n      colors[max] = colorvalue;\n    }\n\n    colorMap[fileName] = colors;\n    var params = {\n      fileName: fileName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.getExperimentalData = function () {\n    return {\n      visibleDataMapByExp: visibleDataMapByExp,\n      visibleFiles: visibleFiles,\n      fileDescription: fileDescription,\n      allVis: allVis,\n      fileTitle: fileTitle,\n      parsedDataMap: parsedDataMap\n    };\n  };\n\n  return experimentalDataOverlay;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2V4cGVyaW1lbnRhbC1kYXRhLW92ZXJsYXkuanMuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJwYXJzZWREYXRhTWFwIiwidmlzaWJsZURhdGFNYXBCeUV4cCIsImdyb3VwZWREYXRhTWFwIiwidmlzaWJsZUZpbGVzIiwiY29sb3JNYXAiLCJhbGxWaXMiLCJmaWxlRGVzY3JpcHRpb24iLCJmaWxlVGl0bGUiLCJleHBlcmltZW50YWxEYXRhT3ZlcmxheSIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImdldE5hbWUiLCJmbmFtZSIsImdldERlc2MiLCJmZGVzYyIsImdldEdyb3VwZWREYXRhTWFwIiwiZ2V0UGFyc2VkRGF0YU1hcCIsImdldFZpc2libGVEYXRhIiwiaGlkZUFsbCIsImludmlzaWJsZUV4cCIsImludmlzaWJsZUZpbGUiLCJpIiwiZmlsZU5hbWUiLCJqIiwibGVuZ3RoIiwiZXhwTmFtZSIsInVuZGVmaW5lZCIsInNob3dEYXRhIiwicGFyYW1zIiwiaGlkZUFsbFVuZG8iLCJ1bmhpZGVBbGwiLCJ2aXNpYmxlRXhwIiwidmlzaWJsZUZpbGUiLCJ1bmhpZGVBbGxVbmRvIiwicmVtb3ZlQWxsIiwicGFyc2VkIiwidmlzaWJsZSIsImdyb3VwZWQiLCJ2aXNpYmxlZiIsInB1c2giLCJyZXN0b3JlQWxsIiwiYWRkRXhwIiwiaXNWaXNpYmxlIiwidmFsdWVzIiwiZ3JvdXBBcnJheSIsImFkZEZpbGUiLCJyZW1vdmVFeHAiLCJpbmRleCIsImluZGV4T2YiLCJjb3VudCIsInJlbW92ZUZpbGUiLCJrIiwiaGlkZUV4cCIsImhpZGVGaWxlIiwiaW52aXNpYmxlIiwiaGlkZUZpbGVVbmRvIiwidW5oaWRlRXhwIiwidW5oaWRlRmlsZSIsInVuaGlkZUZpbGVVbmRvIiwiY291bnRWaXNpYmxlRGF0YUJ5RXhwIiwiZGF0YUJveENvdW50IiwiZXhwIiwiZ2VuZXJhdGVTVkdGb3JOb2RlIiwiZWxlIiwidG9vbHRpcCIsInN2Z05hbWVTcGFjZSIsIm5vZGVMYWJlbCIsImRhdGEiLCJyZXFXaWR0aCIsIm91dGVyV2lkdGgiLCJyZXFIZWlnaHQiLCJvdXRlckhlaWdodCIsIm92ZXJsYXlSZWNCb3hXIiwib3ZlcmxheVJlY0JveEgiLCJzdmciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsIm92ZXJMYXlSZWN0QkJveCIsInciLCJoIiwieCIsInkiLCJmcmVxdWVuY3lEYXRhIiwibWF4RGF0YUJveENvdW50IiwiY291bnRlciIsImRhdGFSZWN0YW5nbGVHZW5lcmF0b3IiLCJvdmVybGF5UmVjdCIsImFwcGVuZENoaWxkIiwiY29udGVudCIsImpvaW4iLCJpbnRlcnBvbGF0ZUNvbG9yIiwiY29sb3IxIiwiY29sb3IyIiwiZmFjdG9yIiwicmVzdWx0Iiwic2xpY2UiLCJNYXRoIiwicm91bmQiLCJkZWNpZGVDb2xvciIsInBlcmNlbnQiLCJzb3J0ZWQiLCJzb3J0IiwicHJldiIsIm5leHQiLCJyIiwiZyIsImIiLCJzdGVwcyIsInJlcyIsInBhcmVudFNWRyIsImNvbG9yU3RyaW5nIiwiY29sb3IiLCJwYXJzZUludCIsInNlbGYiLCJub2RlQ29sbGVjdGlvbiIsImNvbGxlY3Rpb24iLCJjb2xsYXBzZWRDaGlsZHJlbiIsImV4cGFuZENvbGxhcHNlIiwiZ2V0QWxsQ29sbGFwc2VkQ2hpbGRyZW5SZWN1cnNpdmVseSIsImZpbHRlciIsImNvbGxhcHNlZENoaWxkcmVuTm90UGFyZW50IiwicGFyZW50U2V0IiwiU2V0IiwiZm9yRWFjaCIsIm5vZGUiLCJhZGQiLCJwYXJlbnQiLCJpZCIsImhhcyIsInVuaW9uIiwiZXhwYW5kYWJsZU5vZGVzIiwibm9kZXMiLCJkaWZmZXJlbmNlIiwiYmF0Y2giLCJpbWFnZVVSSSIsImlzUGFyZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3V0ZXJIVE1MIiwiT2JqZWN0Iiwia2V5cyIsImhleFRvUmdiIiwiaGV4Iiwic3Vic3RyaW5nIiwiYmlnaW50IiwiaXNIZXgiLCJpc05hTiIsIk51bWJlciIsInBhcnNlRGF0YSIsImVycm9yQ2FsbGJhY2siLCJzYW1wbGVFeHBlcmltZW50IiwiZXhwZXJpbWVudHMiLCJjb2xvcnMiLCJjb2xvcm0iLCJmaWxlRCIsImZpbGVOIiwiaW50cmVnZXgiLCJ2ZXJzaW9uIiwiY2xyIiwibGluZXMiLCJzcGxpdCIsInVwdG8iLCJtZXRhTGluZXMiLCJ0IiwidHJpbSIsIk5hTiIsIm1ldGFMaW5lQ29sdW1ucyIsInRyaW1tZWQiLCJtaW4iLCJNQVhfVkFMVUUiLCJtYXgiLCJNSU5fVkFMVUUiLCJsaW5lQ29udGVudCIsImVsZVN5bWJvbCIsIm1hdGNoIiwiY29sb3J2YWx1ZSIsImdldEV4cGVyaW1lbnRhbERhdGEiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL3NiZ252aXovLi9zcmMvdXRpbGl0aWVzL2V4cGVyaW1lbnRhbC1kYXRhLW92ZXJsYXkuanM/NDMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY3k7XG4gIHZhciBwYXJzZWREYXRhTWFwO1xuICB2YXIgdmlzaWJsZURhdGFNYXBCeUV4cDtcbiAgdmFyIGdyb3VwZWREYXRhTWFwO1xuICB2YXIgdmlzaWJsZUZpbGVzO1xuICB2YXIgY29sb3JNYXA7XG4gIHZhciBhbGxWaXM7XG4gIHZhciBmaWxlRGVzY3JpcHRpb247XG4gIHZhciBmaWxlVGl0bGU7XG4gIGZ1bmN0aW9uIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5KHBhcmFtKSB7XG4gICAgLy8gSW5pdFxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICBwYXJzZWREYXRhTWFwID0ge307XG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHt9O1xuICAgIHZpc2libGVGaWxlcyA9IHt9O1xuICAgIGdyb3VwZWREYXRhTWFwID0ge307XG4gICAgY29sb3JNYXAgPSB7fTtcbiAgICBhbGxWaXMgPSB0cnVlO1xuXG4gICAgZmlsZURlc2NyaXB0aW9uID0ge307XG4gICAgZmlsZVRpdGxlID0ge307XG4gIH1cblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXROYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbmFtZTtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXREZXNjID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmZGVzYztcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXRHcm91cGVkRGF0YU1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ3JvdXBlZERhdGFNYXA7XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuZ2V0UGFyc2VkRGF0YU1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VkRGF0YU1hcDtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXRWaXNpYmxlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdmlzaWJsZURhdGFNYXBCeUV4cDtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5oaWRlQWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnZpc2libGVFeHAgPSB7fTtcbiAgICB2YXIgaW52aXNpYmxlRmlsZSA9IHt9O1xuICAgIGFsbFZpcyA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSBpbiBncm91cGVkRGF0YU1hcCkge1xuICAgICAgaWYgKHZpc2libGVGaWxlc1tpXSkge1xuICAgICAgICB2aXNpYmxlRmlsZXNbaV0gPSBmYWxzZTtcbiAgICAgICAgaW52aXNpYmxlRmlsZVtpXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBmaWxlTmFtZSBpbiBncm91cGVkRGF0YU1hcCkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgZXhwTmFtZSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXVtqXTtcbiAgICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPT0gdHJ1ZSkge1xuICAgICAgICAgIGludmlzaWJsZUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XG4gICAgICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNob3dEYXRhKCk7XG4gICAgcGFyYW1zID0ge2ludmlzaWJsZUZpbGUsIGludmlzaWJsZUV4cH07XG4gICAgcmV0dXJuIHBhcmFtcztcblxuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhpZGVBbGxVbmRvID0gZnVuY3Rpb24gKGludmlzaWJsZUZpbGUsIGludmlzaWJsZUV4cCkge1xuICAgIGZvciAobGV0IGogaW4gaW52aXNpYmxlRmlsZSkge1xuICAgICAgdmlzaWJsZUZpbGVzW2pdID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaiBpbiBpbnZpc2libGVFeHApIHtcbiAgICAgIHZpc2libGVEYXRhTWFwQnlFeHBbal0gPSB0cnVlO1xuICAgIH1cbiAgICBhbGxWaXMgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm47XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkudW5oaWRlQWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2aXNpYmxlRXhwID0ge307XG4gICAgdmFyIHZpc2libGVGaWxlID0ge307XG4gICAgYWxsVmlzID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVGaWxlcykge1xuICAgICAgaWYgKCF2aXNpYmxlRmlsZXNbaV0pIHtcbiAgICAgICAgdmlzaWJsZUZpbGVzW2ldID0gdHJ1ZTtcbiAgICAgICAgdmlzaWJsZUZpbGVbaV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBmaWxlTmFtZSBpbiBncm91cGVkRGF0YU1hcCkge1xuICAgICAgaWYgKGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgZXhwTmFtZSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXVtqXTtcbiAgICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPT0gZmFsc2UpIHtcbiAgICAgICAgICB2aXNpYmxlRXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPSB0cnVlO1xuICAgICAgICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zaG93RGF0YSgpO1xuICAgIHJldHVybiB7dmlzaWJsZUV4cCwgdmlzaWJsZUZpbGV9O1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUFsbFVuZG8gPSBmdW5jdGlvbiAodmlzaWJsZUZpbGUsIHZpc2libGVFeHApIHtcbiAgICBmb3IgKGxldCBqIGluIHZpc2libGVGaWxlKSB7XG4gICAgICB2aXNpYmxlRmlsZXNbal0gPSBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaiBpbiB2aXNpYmxlRXhwKSB7XG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2pdID0gZmFsc2U7XG4gICAgfVxuICAgIGFsbFZpcyA9IGZhbHNlO1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm47XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkucmVtb3ZlQWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJzZWQgPSB7fTtcbiAgICB2YXIgdmlzaWJsZSA9IHt9O1xuICAgIHZhciBncm91cGVkID0ge307XG4gICAgdmFyIHZpc2libGVmID0ge307XG5cbiAgICBmb3IgKGxldCBpIGluIHBhcnNlZERhdGFNYXApIHtcbiAgICAgIGlmICghcGFyc2VkW2ldKSB7XG4gICAgICAgIHBhcnNlZFtpXSA9IHt9O1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiBpbiBwYXJzZWREYXRhTWFwW2ldKSB7XG4gICAgICAgIHBhcnNlZFtpXVtqXSA9IHBhcnNlZERhdGFNYXBbaV1bal07XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgaW4gdmlzaWJsZURhdGFNYXBCeUV4cCkge1xuICAgICAgdmlzaWJsZVtpXSA9IHZpc2libGVEYXRhTWFwQnlFeHBbaV07XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcbiAgICAgIHZpc2libGVmW2ldID0gdmlzaWJsZUZpbGVzW2ldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpIGluIGdyb3VwZWREYXRhTWFwKSB7XG4gICAgICBpZiAoIWdyb3VwZWRbaV0pIHtcbiAgICAgICAgZ3JvdXBlZFtpXSA9IFtdO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiBpbiBncm91cGVkRGF0YU1hcFtpXSkge1xuICAgICAgICBncm91cGVkW2ldLnB1c2goZ3JvdXBlZERhdGFNYXBbaV1bal0pO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJzZWREYXRhTWFwID0ge307XG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHt9O1xuICAgIHZpc2libGVGaWxlcyA9IHt9O1xuICAgIGdyb3VwZWREYXRhTWFwID0ge307XG4gICAgdGhpcy5zaG93RGF0YSgpO1xuICAgIHBhcmFtcyA9IHtwYXJzZWQsIHZpc2libGUsIGdyb3VwZWQsIHZpc2libGVmfTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlc3RvcmVBbGwgPSBmdW5jdGlvbiAocGFyc2VkLCB2aXNpYmxlLCBncm91cGVkLCB2aXNpYmxlZikge1xuICAgIHBhcnNlZERhdGFNYXAgPSBwYXJzZWQ7XG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHZpc2libGU7XG4gICAgZ3JvdXBlZERhdGFNYXAgPSBncm91cGVkO1xuICAgIHZpc2libGVGaWxlcyA9IHZpc2libGVmO1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICBwYXJhbSA9IHt9O1xuICAgIHJldHVybiBwYXJhbTtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5hZGRFeHAgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGV4cE5hbWUsIGlzVmlzaWJsZSwgdmFsdWVzLCBncm91cEFycmF5KSB7XG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gaXNWaXNpYmxlO1xuICAgIGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSA9IGdyb3VwQXJyYXk7XG5cbiAgICBmb3IgKGxldCBpIGluIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlc1tpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdICE9IHVuZGVmaW5lZClcbiAgICAgICAgcGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gdmFsdWVzW2ldW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IHtmaWxlTmFtZSwgZXhwTmFtZX07XG4gICAgdGhpcy5zaG93RGF0YSgpO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuYWRkRmlsZSA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgcGFyc2VkLCB2aXNpYmxlLCBncm91cGVkLCB2aXNpYmxlZikge1xuICAgIHBhcnNlZERhdGFNYXAgPSBwYXJzZWQ7XG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHZpc2libGU7XG4gICAgZ3JvdXBlZERhdGFNYXAgPSBncm91cGVkO1xuICAgIHZpc2libGVGaWxlcyA9IHZpc2libGVmO1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICBwYXJhbSA9IHtmaWxlTmFtZX07XG4gICAgcmV0dXJuIHBhcmFtO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlbW92ZUV4cCA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgZXhwTmFtZSkge1xuICAgIHZhciBpc1Zpc2libGUgPSBmYWxzZTtcbiAgICB2YXIgdmFsdWVzID0ge307XG4gICAgdmFyIGdyb3VwQXJyYXkgPSBbXTtcblxuICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICBpc1Zpc2libGUgPSB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XG4gICAgICBkZWxldGUgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdO1xuICAgIH1cblxuICAgIGlmIChncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBpIGluIGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSkge1xuICAgICAgICBncm91cEFycmF5W2ldID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2ldO1xuICAgICAgfVxuICAgICAgLy9ncm91cEFycmF5ID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdO1xuICAgICAgdmFyIGluZGV4ID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdLmluZGV4T2YoZXhwTmFtZSk7XG5cbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICBkZWxldGUgZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpIGluIHBhcnNlZERhdGFNYXApIHtcbiAgICAgIGlmIChwYXJzZWREYXRhTWFwW2ldW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghKGkgaW4gdmFsdWVzKSkge1xuICAgICAgICAgIHZhbHVlc1tpXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gcGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdO1xuICAgICAgICBkZWxldGUgcGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFncm91cGVkRGF0YU1hcFtmaWxlTmFtZV1baV0pXG4gICAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICAgIGlmIChjb3VudCA9PSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoKSB7XG4gICAgICAgIGRlbGV0ZSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIHBhcmFtcyA9IHtmaWxlTmFtZSwgZXhwTmFtZSwgaXNWaXNpYmxlLCB2YWx1ZXMsIGdyb3VwQXJyYXl9O1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlbW92ZUZpbGUgPSBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcbiAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWQgPSB7fTtcbiAgICB2YXIgdmlzaWJsZSA9IHt9O1xuICAgIHZhciBncm91cGVkID0ge307XG4gICAgdmFyIHZpc2libGVmID0ge307XG5cbiAgICBmb3IgKGxldCBpIGluIHBhcnNlZERhdGFNYXApIHtcbiAgICAgIGlmICghcGFyc2VkW2ldKSB7XG4gICAgICAgIHBhcnNlZFtpXSA9IHt9O1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiBpbiBwYXJzZWREYXRhTWFwW2ldKSB7XG4gICAgICAgIHBhcnNlZFtpXVtqXSA9IHBhcnNlZERhdGFNYXBbaV1bal07XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgaW4gdmlzaWJsZURhdGFNYXBCeUV4cCkge1xuICAgICAgdmlzaWJsZVtpXSA9IHZpc2libGVEYXRhTWFwQnlFeHBbaV07XG4gICAgfVxuICAgIGZvciAobGV0IGkgaW4gdmlzaWJsZUZpbGVzKSB7XG4gICAgICB2aXNpYmxlZltpXSA9IHZpc2libGVGaWxlc1tpXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSBpbiBncm91cGVkRGF0YU1hcCkge1xuICAgICAgaWYgKCFncm91cGVkW2ldKSB7XG4gICAgICAgIGdyb3VwZWRbaV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGogaW4gZ3JvdXBlZERhdGFNYXBbaV0pIHtcbiAgICAgICAgZ3JvdXBlZFtpXS5wdXNoKGdyb3VwZWREYXRhTWFwW2ldW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgZXhwTmFtZSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXVtqXTtcbiAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gIT0gdW5kZWZpbmVkKVxuICAgICAgICBkZWxldGUgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdO1xuICAgICAgZm9yIChsZXQgaSBpbiBwYXJzZWREYXRhTWFwKSB7XG4gICAgICAgIGRlbGV0ZSBwYXJzZWREYXRhTWFwW2ldW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV07XG5cbiAgICB2YXIgcGFyYW1zID0ge2ZpbGVOYW1lLCBwYXJzZWQsIHZpc2libGUsIGdyb3VwZWQsIHZpc2libGVmfTtcbiAgICB0aGlzLnNob3dEYXRhKCk7XG4gICAgdmFyIGsgPSAwO1xuICAgIGZvciAobGV0IGkgaW4gZ3JvdXBlZERhdGFNYXApXG4gICAge1xuICAgICAgaysrO1xuICAgIH1cbiAgICBpZiAoayA9PSAwKSB7XG4gICAgICBncm91cGVkRGF0YU1hcCA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhpZGVFeHAgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGV4cE5hbWUpIHtcbiAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPSBmYWxzZTtcbiAgICBwYXJhbXMgPSB7ZmlsZU5hbWUsIGV4cE5hbWV9O1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaGlkZUZpbGUgPSBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcbiAgICB2aXNpYmxlRmlsZXNbZmlsZU5hbWVdID0gZmFsc2U7XG4gICAgdmFyIGludmlzaWJsZSA9IHt9O1xuICAgIGlmIChncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBleHBOYW1lID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2pdO1xuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB0cnVlKSB7XG4gICAgICAgIGludmlzaWJsZVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XG4gICAgICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICBwYXJhbXMgPSB7ZmlsZU5hbWUsIGludmlzaWJsZX07XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5oaWRlRmlsZVVuZG8gPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGludmlzaWJsZSkge1xuICAgIGlmICh2aXNpYmxlRmlsZXNbZmlsZU5hbWVdICE9IHVuZGVmaW5lZClcbiAgICAgIHZpc2libGVGaWxlc1tmaWxlTmFtZV0gPSB0cnVlO1xuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgICBmb3IgKGxldCBqIGluIGludmlzaWJsZSkge1xuICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtqXSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm4ge2ZpbGVOYW1lfTtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS51bmhpZGVFeHAgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGV4cE5hbWUpIHtcbiAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPSB0cnVlO1xuICAgIHBhcmFtcyA9IHtmaWxlTmFtZSwgZXhwTmFtZX07XG4gICAgdGhpcy5zaG93RGF0YSgpO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkudW5oaWRlRmlsZSA9IGZ1bmN0aW9uIChmaWxlTmFtZSkge1xuICAgIHZhciB2aXNpYmxlID0ge307XG4gICAgdmlzaWJsZUZpbGVzW2ZpbGVOYW1lXSA9IHRydWU7XG4gICAgaWYgKGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IGV4cE5hbWUgPSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV1bal07XG4gICAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IHVuZGVmaW5lZClcbiAgICAgICAgY29udGludWU7XG4gICAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IGZhbHNlKSB7XG4gICAgICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IHRydWU7XG4gICAgICAgIHZpc2libGVbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICBwYXJhbXMgPSB7ZmlsZU5hbWUsIHZpc2libGV9O1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkudW5oaWRlRmlsZVVuZG8gPSBmdW5jdGlvbiAoZmlsZU5hbWUsIHZpc2libGUpIHtcbiAgICB2aXNpYmxlRmlsZXNbZmlsZU5hbWVdID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaiBpbiB2aXNpYmxlKSB7XG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2pdID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm4ge2ZpbGVOYW1lfTtcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5jb3VudFZpc2libGVEYXRhQnlFeHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ291bnQgdGhlIGdlbm9taWMgZGF0YSB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIG9uIG5vZGVzJyBib2R5XG4gICAgbGV0IGRhdGFCb3hDb3VudCA9IDA7XG4gICAgZm9yIChsZXQgZXhwIGluIHZpc2libGVEYXRhTWFwQnlFeHApIHtcbiAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2V4cF0pIHtcbiAgICAgICAgZGF0YUJveENvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhQm94Q291bnQ7XG4gIH07XG5cbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuZ2VuZXJhdGVTVkdGb3JOb2RlID0gZnVuY3Rpb24gKGVsZSwgdG9vbHRpcCkge1xuICAgIGNvbnN0IGRhdGFCb3hDb3VudCA9IHRoaXMuY291bnRWaXNpYmxlRGF0YUJ5RXhwKCk7XG4gICAgdmFyIHZhbHVlcyA9IFtdOyAgIFxuICAgIC8vIEV4cGVyaW1lbnRhbCBkYXRhIG92ZXJsYXkgcGFydCAhXG4gICAgLy8gY29uc3QgZGF0YVVSSSA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwnXG4gICAgY29uc3Qgc3ZnTmFtZVNwYWNlID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICBjb25zdCBub2RlTGFiZWwgPSBlbGUuZGF0YSgnbGFiZWwnKTtcbiAgICBjb25zdCByZXFXaWR0aCA9IGVsZS5vdXRlcldpZHRoKCk7XG4gICAgY29uc3QgcmVxSGVpZ2h0ID0gZWxlLm91dGVySGVpZ2h0KCk7XG4gICAgY29uc3Qgb3ZlcmxheVJlY0JveFcgPSByZXFXaWR0aDtcbiAgICBjb25zdCBvdmVybGF5UmVjQm94SCA9IHJlcUhlaWdodDtcbiAgICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZVNwYWNlLCAnc3ZnJyk7XG4gICAgLy8gSXQgc2VlbXMgdGhpcyBzaG91bGQgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgbm9kZSBzaXplICFcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHJlcVdpZHRoKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCByZXFIZWlnaHQpO1xuICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IHlvdSBuZWVkIHRvIGluY2x1ZGUgdGhpcyB0byBzdWNjZXNmdWxseSByZW5kZXIgaW4gY3l0b3NjYXBlLmpzIVxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgc3ZnTmFtZVNwYWNlKTtcblxuICAgIC8vIE92ZXJsYXkgRGF0YSBSZWN0XG4gICAgY29uc3Qgb3ZlckxheVJlY3RCQm94ID0ge1xuICAgICAgdzogb3ZlcmxheVJlY0JveFcsXG4gICAgICBoOiBvdmVybGF5UmVjQm94SCxcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcblxuICAgIGNvbnN0IGZyZXF1ZW5jeURhdGEgPSBwYXJzZWREYXRhTWFwW25vZGVMYWJlbF07XG5cbiAgICBsZXQgbWF4RGF0YUJveENvdW50ID0gLyooZ2Vub21pY0RhdGFCb3hDb3VudCA+IDMpID8gMzoqLyBkYXRhQm94Q291bnQ7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuXG4gICAgZm9yIChsZXQgaSBpbiBncm91cGVkRGF0YU1hcCkge1xuICAgICAgZm9yIChsZXQgaiBpbiBncm91cGVkRGF0YU1hcFtpXSkge1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGk7XG4gICAgICAgIGNvbnN0IGV4cE5hbWUgPSBncm91cGVkRGF0YU1hcFtpXVtqXTtcbiAgICAgICAgaWYgKCF2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0pIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyZXF1ZW5jeURhdGFbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7ICAgICAgICAgXG4gICAgICAgICAgdmFsdWVzLnB1c2goZnJlcXVlbmN5RGF0YVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdKTtcbiAgICAgICAgICBkYXRhUmVjdGFuZ2xlR2VuZXJhdG9yKFxuICAgICAgICAgICAgICAgICAgb3ZlckxheVJlY3RCQm94LnggK1xuICAgICAgICAgICAgICAgICAgKGNvdW50ZXIgKiBvdmVyTGF5UmVjdEJCb3gudykgLyBtYXhEYXRhQm94Q291bnQsXG4gICAgICAgICAgICAgICAgICBvdmVyTGF5UmVjdEJCb3gueSxcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC53IC8gbWF4RGF0YUJveENvdW50LFxuICAgICAgICAgICAgICAgICAgb3ZlckxheVJlY3RCQm94LmgsXG4gICAgICAgICAgICAgICAgICBmcmVxdWVuY3lEYXRhW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0sXG4gICAgICAgICAgICAgICAgICBzdmcsXG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChcIi1cIik7XG4gICAgICAgICAgZGF0YVJlY3RhbmdsZUdlbmVyYXRvcihcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC54ICtcbiAgICAgICAgICAgICAgICAgIChjb3VudGVyICogb3ZlckxheVJlY3RCQm94LncpIC8gbWF4RGF0YUJveENvdW50LFxuICAgICAgICAgICAgICAgICAgb3ZlckxheVJlY3RCQm94LnksXG4gICAgICAgICAgICAgICAgICBvdmVyTGF5UmVjdEJCb3gudyAvIG1heERhdGFCb3hDb3VudCxcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC5oLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHN2ZyxcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgICAgLy8gIGRyYXcgc2VwYXJhdG9yIGxpbmUgYmV0d2VlbiBkYXRhIHJlY3RhbmdsZXNcbiAgICAgICAgaWYgKGNvdW50ZXIgPCBtYXhEYXRhQm94Q291bnQgLSAxKSB7XG4gICAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZVNwYWNlLCAnbGluZScpO1xuICAgICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgneDEnLCBvdmVyTGF5UmVjdEJCb3gueCArIChjb3VudGVyICogb3ZlckxheVJlY3RCQm94LncpIC8gbWF4RGF0YUJveENvdW50XG4gICAgICAgICAgICAgICAgICArIG92ZXJMYXlSZWN0QkJveC53IC8gbWF4RGF0YUJveENvdW50KTtcbiAgICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3kxJywgb3ZlckxheVJlY3RCQm94LnkpO1xuICAgICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgneDInLCBvdmVyTGF5UmVjdEJCb3gueCArIChjb3VudGVyICogb3ZlckxheVJlY3RCQm94LncpIC8gbWF4RGF0YUJveENvdW50XG4gICAgICAgICAgICAgICAgICArIG92ZXJMYXlSZWN0QkJveC53IC8gbWF4RGF0YUJveENvdW50KTtcbiAgICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3kyJywgb3ZlckxheVJlY3RCQm94LnkgKyBvdmVyTGF5UmVjdEJCb3guaCk7XG4gICAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICAgICAgICAgICdzdHJva2Utd2lkdGg6MTtzdHJva2U6cmdiKDg1LDg1LDg1KTsnXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChvdmVybGF5UmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRlcisrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRvb2x0aXAuY29udGVudCA9IFwiKFwiICsgdmFsdWVzLmpvaW4oXCIsXCIpICsgXCIpXCI7XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZUNvbG9yKGNvbG9yMSwgY29sb3IyLCBmYWN0b3IpIHtcbiAgICAgIHZhciByZXN1bHQgPSBjb2xvcjEuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldICsgZmFjdG9yICogKGNvbG9yMltpXSAtIGNvbG9yMVtpXSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZGVjaWRlQ29sb3IocGVyY2VudCwgZmlsZU5hbWUpIHtcbiAgICAgIHZhciBzb3J0ZWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgaW4gY29sb3JNYXBbZmlsZU5hbWVdKSB7XG4gICAgICAgIHNvcnRlZC5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgc29ydGVkLnNvcnQoKTtcblxuICAgICAgdmFyIHByZXYgPSBzb3J0ZWRbMF07XG4gICAgICB2YXIgbmV4dCA9IHNvcnRlZFtzb3J0ZWQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChwZXJjZW50IDwgcHJldiB8fCBwZXJjZW50ID4gbmV4dCkge1xuICAgICAgICByZXR1cm4gKHtyOiAyMTAsIGc6IDIxMCwgYjogMjEwfSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGsgaW4gc29ydGVkKSB7XG4gICAgICAgIHZhciBpID0gc29ydGVkW2tdO1xuICAgICAgICBpZiAoaSA9PSBwZXJjZW50KSB7XG4gICAgICAgICAgcmV0dXJuICh7cjogY29sb3JNYXBbZmlsZU5hbWVdW2ldWzBdLCBnOiBjb2xvck1hcFtmaWxlTmFtZV1baV1bMV0sIGI6IGNvbG9yTWFwW2ZpbGVOYW1lXVtpXVsyXX0pO1xuICAgICAgICB9IGVsc2UgaWYgKGkgPiBwZXJjZW50KSB7XG4gICAgICAgICAgbmV4dCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldiA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN0ZXBzID0gMSAvIChuZXh0IC0gcHJldik7XG4gICAgICB2YXIgcmVzID0gaW50ZXJwb2xhdGVDb2xvcihjb2xvck1hcFtmaWxlTmFtZV1bcHJldl0sIGNvbG9yTWFwW2ZpbGVOYW1lXVtuZXh0XSwgc3RlcHMgKiAocGVyY2VudCAtIHByZXYpKTtcblxuICAgICAgcmV0dXJuICh7cjogcmVzWzBdLCBnOiByZXNbMV0sIGI6IHJlc1syXX0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkYXRhUmVjdGFuZ2xlR2VuZXJhdG9yKHgsIHksIHcsIGgsIHBlcmNlbnQsIHBhcmVudFNWRywgZmlsZU5hbWUpIHtcbiAgICAgIGxldCBjb2xvclN0cmluZyA9ICcnO1xuICAgICAgaWYgKHBlcmNlbnQpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gZGVjaWRlQ29sb3IocGFyc2VJbnQocGVyY2VudCksIGZpbGVOYW1lKTtcbiAgICAgICAgY29sb3JTdHJpbmcgPVxuICAgICAgICAgICAgICAgICdyZ2IoJyArXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZChjb2xvci5yKSArXG4gICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbG9yLmcpICtcbiAgICAgICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoY29sb3IuYikgKyAnKSc7XG4gICAgICAgIC8vIFJlY3RhbmdsZSBQYXJ0XG4gICAgICAgIGNvbnN0IG92ZXJsYXlSZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05hbWVTcGFjZSwgJ3JlY3QnKTtcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd4JywgeCk7XG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgneScsIHkpO1xuICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdyk7XG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaCk7XG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnb3BhY2l0eToxO2ZpbGw6JyArIGNvbG9yU3RyaW5nICsgJzsnKTtcblxuICAgICAgICBwYXJlbnRTVkcuYXBwZW5kQ2hpbGQob3ZlcmxheVJlY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3JTdHJpbmcgPSAncmdiKDIxMCwyMTAsMjEwKSc7XG5cbiAgICAgICAgLy8gUmVjdGFuZ2xlIFBhcnRcbiAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZVNwYWNlLCAncmVjdCcpO1xuICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCB4KTtcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd5JywgeSk7XG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3KTtcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoKTtcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsICdvcGFjaXR5OjE7ZmlsbDonICsgY29sb3JTdHJpbmcgKyAnOycpO1xuXG4gICAgICAgIHBhcmVudFNWRy5hcHBlbmRDaGlsZChvdmVybGF5UmVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN2ZztcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5zaG93RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB2YXIgbm9kZUNvbGxlY3Rpb24gPSBjeS5jb2xsZWN0aW9uKCk7XG4gICAgdmFyIGNvbGxhcHNlZENoaWxkcmVuID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpLmdldEFsbENvbGxhcHNlZENoaWxkcmVuUmVjdXJzaXZlbHkoKS5maWx0ZXIoXCJub2RlXCIpO1xuICAgIHZhciBjb2xsYXBzZWRDaGlsZHJlbk5vdFBhcmVudCA9IGN5LmNvbGxlY3Rpb24oKTtcbiAgICB2YXIgcGFyZW50U2V0ID0gbmV3IFNldCgpOyAgLy8gcGFyZW50IGlkcyBvZiBjb2xsYXBzZWQgY2hpbGRyZW5cbiAgICBjb2xsYXBzZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgcGFyZW50U2V0LmFkZChub2RlLnBhcmVudCgpLmlkKCkpO1xuICAgIH0pO1xuICAgIC8vIGZpbHRlciBwYXJlbnQgbm9kZXMgZnJvbSBjb2xsYXBzZWQgY2hpbGRyZW5cbiAgICBjb2xsYXBzZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgaWYoIXBhcmVudFNldC5oYXMobm9kZS5pZCgpKSl7IC8vIHRoaXMgbWVhbnMgcmVtb3ZlZCBub2RlIGlzIG5vdCBwYXJlbnRcbiAgICAgICAgY29sbGFwc2VkQ2hpbGRyZW5Ob3RQYXJlbnQgPSBjb2xsYXBzZWRDaGlsZHJlbk5vdFBhcmVudC51bmlvbihub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgZXhwYW5kYWJsZU5vZGVzID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpLmV4cGFuZGFibGVOb2RlcygpO1xuICAgIG5vZGVDb2xsZWN0aW9uID0gbm9kZUNvbGxlY3Rpb24udW5pb24oY3kubm9kZXMoKSkudW5pb24oY29sbGFwc2VkQ2hpbGRyZW5Ob3RQYXJlbnQpLmRpZmZlcmVuY2UoZXhwYW5kYWJsZU5vZGVzKTtcbiAgICBjeS5iYXRjaChmdW5jdGlvbigpe1xuICAgICAgbm9kZUNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBjb25zdCBub2RlTGFiZWwgPSBub2RlLmRhdGEoJ2xhYmVsJyk7XG4gICAgICAgIHZhciBpbWFnZVVSSSA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwnO1xuICAgICAgICBpZiAobm9kZUxhYmVsIGluIHBhcnNlZERhdGFNYXAgJiYgIW5vZGUuaXNQYXJlbnQoKSkge1xuXG4gICAgICAgICAgdmFyIHRvb2x0aXAgPSB7Y29udGVudDonJ307XG4gICAgICAgICAgaW1hZ2VVUkkgPSBpbWFnZVVSSSArIGVuY29kZVVSSUNvbXBvbmVudChzZWxmLmdlbmVyYXRlU1ZHRm9yTm9kZShub2RlLHRvb2x0aXApLm91dGVySFRNTCk7XG5cbiAgICAgICAgICBpZihPYmplY3Qua2V5cyhwYXJzZWREYXRhTWFwW25vZGVMYWJlbF0pLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAvLyB2YXIgdG9vbHRpcCA9IFwiKFwiICsgT2JqZWN0LnZhbHVlcyhwYXJzZWREYXRhTWFwW25vZGVMYWJlbF0pLmpvaW4oXCIsXCIpICsgXCIpXCI7XG4gICAgICAgICAgICBub2RlLmRhdGEoXCJ0b29sdGlwXCIsdG9vbHRpcC5jb250ZW50KTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIG5vZGUuZGF0YSgndG9vbHRpcCcsJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtaW1hZ2UnLCBpbWFnZVVSSSksXG4gICAgICAgICAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtcG9zaXRpb24teCcsICcxMDAlJyk7XG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknLCAnMTAwJScpO1xuICAgICAgICAgIG5vZGUuZGF0YSgnYmFja2dyb3VuZC13aWR0aCcsICcxMDAlJyk7XG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWhlaWdodCcsICcxMDAlJyk7XG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWZpdCcsICdjb250YWluJyk7XG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHknLCAnMScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuZGF0YSgnYmFja2dyb3VuZC1pbWFnZScsIFwiXCIpO1xuICAgICAgICAgIG5vZGUuZGF0YSgndG9vbHRpcCcsJycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTsgICAgICBcbiAgICAgIFxuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhleFRvUmdiID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGlmIChoZXhbMF0gPT0gJyMnKSB7XG4gICAgICBoZXggPSBoZXguc3Vic3RyaW5nKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBiaWdpbnQgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICB2YXIgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1O1xuICAgIHZhciBnID0gKGJpZ2ludCA+PiA4KSAmIDI1NTtcbiAgICB2YXIgYiA9IGJpZ2ludCAmIDI1NTtcbiAgICByZXR1cm4gW3IsIGcsIGJdO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmlzSGV4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHJldHVybiB0eXBlb2YgaGV4ID09ICdzdHJpbmcnXG4gICAgICAgICAgICAmJiBoZXgubGVuZ3RoID09IDdcbiAgICAgICAgICAgICYmICFpc05hTihOdW1iZXIoJzB4JyArIGhleC5zdWJzdHJpbmcoMSkpKVxuICAgICAgICAgICAgJiYgaGV4WzBdID09ICcjJztcbiAgfTtcblxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5wYXJzZURhdGEgPSBmdW5jdGlvbiAoZGF0YSwgZmlsZU5hbWUsIGVycm9yQ2FsbGJhY2ssIHNhbXBsZUV4cGVyaW1lbnQpIHtcbiAgICBwYXJzZWREYXRhTWFwID0gcGFyc2VkRGF0YU1hcCB8fCB7fTtcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwID0gdmlzaWJsZURhdGFNYXBCeUV4cCB8fCB7fTtcbiAgICBncm91cGVkRGF0YU1hcCA9IGdyb3VwZWREYXRhTWFwIHx8IHt9O1xuICAgIGNvbG9yTWFwID0gY29sb3JNYXAgfHwge307XG4gICAgY29uc3QgZXhwZXJpbWVudHMgPSBbXTtcbiAgICB2YXIgY29sb3JzID0ge307XG5cbiAgICBpZiAoZmlsZU5hbWUgaW4gZ3JvdXBlZERhdGFNYXAgJiYgIXNhbXBsZUV4cGVyaW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlsZU5hbWUgaW4gZ3JvdXBlZERhdGFNYXAgJiYgc2FtcGxlRXhwZXJpbWVudCkge1xuICAgICAgdGhpcy5yZW1vdmVBbGwoKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkID0ge307XG4gICAgdmFyIHZpc2libGUgPSB7fTtcbiAgICB2YXIgZ3JvdXBlZCA9IHt9O1xuICAgIHZhciB2aXNpYmxlZiA9IHt9O1xuICAgIHZhciBjb2xvcm0gPSB7fTtcbiAgICB2YXIgZmlsZUQgPSB7fTtcbiAgICB2YXIgZmlsZU4gPSB7fTtcblxuICAgIGZvciAobGV0IGkgaW4gcGFyc2VkRGF0YU1hcCkge1xuICAgICAgaWYgKCFwYXJzZWRbaV0pIHtcbiAgICAgICAgcGFyc2VkW2ldID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqIGluIHBhcnNlZERhdGFNYXBbaV0pIHtcbiAgICAgICAgcGFyc2VkW2ldW2pdID0gcGFyc2VkRGF0YU1hcFtpXVtqXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRGF0YU1hcEJ5RXhwKSB7XG4gICAgICB2aXNpYmxlW2ldID0gdmlzaWJsZURhdGFNYXBCeUV4cFtpXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcbiAgICAgIHZpc2libGVmW2ldID0gdmlzaWJsZUZpbGVzW2ldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpIGluIGdyb3VwZWREYXRhTWFwKSB7XG4gICAgICBpZiAoIWdyb3VwZWRbaV0pIHtcbiAgICAgICAgZ3JvdXBlZFtpXSA9IFtdO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaiBpbiBncm91cGVkRGF0YU1hcFtpXSkge1xuICAgICAgICBncm91cGVkW2ldLnB1c2goZ3JvdXBlZERhdGFNYXBbaV1bal0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgaW4gY29sb3JNYXApIHtcbiAgICAgIGNvbG9ybVtpXSA9IGNvbG9yTWFwW2ldO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgaW4gdmlzaWJsZUZpbGVzKSB7XG4gICAgICBmaWxlRFtpXSA9IGZpbGVEZXNjcmlwdGlvbltpXTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVGaWxlcykge1xuICAgICAgZmlsZU5baV0gPSBmaWxlVGl0bGVbaV07XG4gICAgfVxuXG4gICAgdmFyIGludHJlZ2V4ID0gXCJeKC0/KSgwfChbMS05XVswLTldKikpKFxcXFwuWzAtOV0rKT8kXCI7XG4gICAgdmFyIHZlcnNpb24gPSAnMS4wJztcbiAgICB2YXIgY2xyID0gZmFsc2U7XG4gICAgLy8gQnkgbGluZXNcbiAgICBjb25zdCBsaW5lcyA9IGRhdGEuc3BsaXQoJ1xcbicpO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPCAyKSB7XG4gICAgICBlcnJvckNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gXCJFcnJvclwiO1xuICAgIH1cbiAgICB2YXIgayA9IDA7XG4gICAgdmFyIHVwdG8gPSA0O1xuICAgIGlmIChsaW5lcy5sZW5ndGggPCA0KSB7XG4gICAgICB1cHRvID0gbGluZXMubGVuZ3RoO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwdG87IGkrKykge1xuICAgICAgaWYgKGxpbmVzW2ldLnN1YnN0cmluZygwLCA3KSA9PSAndmVyc2lvbicpIHtcbiAgICAgICAgaysrO1xuICAgICAgICBjb25zdCBtZXRhTGluZXMgPSBsaW5lc1tpXS5zcGxpdCgnXFx0Jyk7XG4gICAgICAgIGlmIChtZXRhTGluZXNbMV0gJiYgbWV0YUxpbmVzWzFdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2ZXJzaW9uID0gbWV0YUxpbmVzWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbGVEZXNjcmlwdGlvbiA9IGZpbGVEO1xuICAgICAgICAgIGZpbGVUaXRsZSA9IGZpbGVOO1xuICAgICAgICAgIHZlcnNpb24gPSBcIjEuMFwiO1xuICAgICAgICAgIGNvbG9yTWFwID0gY29sb3JtO1xuICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm4gXCJFcnJvclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGluZXNbaV0uc3Vic3RyaW5nKDAsIDQpID09ICduYW1lJykge1xuICAgICAgICBrKys7XG4gICAgICAgIGNvbnN0IG1ldGFMaW5lcyA9IGxpbmVzW2ldLnNwbGl0KCdcXHQnKTtcbiAgICAgICAgaWYgKG1ldGFMaW5lc1sxXSAmJiBtZXRhTGluZXNbMV0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGZpbGVUaXRsZVtmaWxlTmFtZV0gPSBtZXRhTGluZXNbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsZVRpdGxlID0gZmlsZU47XG4gICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XG4gICAgICAgICAgdmVyc2lvbiA9IFwiMS4wXCI7XG4gICAgICAgICAgY29sb3JNYXAgPSBjb2xvcm07XG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsaW5lc1tpXS5zdWJzdHJpbmcoMCwgMTEpID09ICdkZXNjcmlwdGlvbicpIHtcbiAgICAgICAgaysrO1xuICAgICAgICBjb25zdCBtZXRhTGluZXMgPSBsaW5lc1tpXS5zcGxpdCgnXFx0Jyk7XG4gICAgICAgIGlmIChtZXRhTGluZXNbMV0gJiYgbWV0YUxpbmVzWzFdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBmaWxlRGVzY3JpcHRpb25bZmlsZU5hbWVdID0gbWV0YUxpbmVzWzFdO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsZVRpdGxlID0gZmlsZU47XG4gICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XG4gICAgICAgICAgdmVyc2lvbiA9IFwiMS4wXCI7XG4gICAgICAgICAgY29sb3JNYXAgPSBjb2xvcm07XG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsaW5lc1tpXS5zdWJzdHJpbmcoMCwgNSkgPT0gJ2NvbG9yJykge1xuICAgICAgICBjbHIgPSB0cnVlO1xuICAgICAgICBrKys7XG4gICAgICAgIGNvbnN0IG1ldGFMaW5lcyA9IGxpbmVzW2ldLnNwbGl0KCdcXHQnKTtcbiAgICAgICAgaWYgKG1ldGFMaW5lcy5sZW5ndGggPD0gMSAmJiBtZXRhTGluZXMubGVuZ3RoICUgMiA9PSAwKSB7XG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB0ID0gMTsgdCA8IG1ldGFMaW5lcy5sZW5ndGggLSAxOyB0ID0gdCArIDIpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gbWV0YUxpbmVzW3QgKyAxXTtcbiAgICAgICAgICBpZiAodCA9PSBtZXRhTGluZXMubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgaGV4ID0gaGV4LnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1ldGFMaW5lc1t0XSA9PSBcIm1pblwiIHx8IG1ldGFMaW5lc1t0XSA9PSBcIm1heFwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0hleChoZXgpKSB7XG4gICAgICAgICAgICAgIGNvbG9yc1sobWV0YUxpbmVzW3RdKV0gPSB0aGlzLmhleFRvUmdiKGhleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChtZXRhTGluZXNbdF0pICE9IE5hTikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNIZXgoaGV4KSkge1xuICAgICAgICAgICAgICBjb2xvcnNbcGFyc2VJbnQobWV0YUxpbmVzW3RdKV0gPSB0aGlzLmhleFRvUmdiKGhleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaWxlVGl0bGUgPSBmaWxlTjtcbiAgICAgICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XG4gICAgICAgICAgICAgIGNvbG9yTWFwID0gY29sb3JtO1xuICAgICAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcbiAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgICAgICByZXR1cm4gXCJFcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxlVGl0bGUgPSBmaWxlTjtcbiAgICAgICAgICAgIGZpbGVEZXNjcmlwdGlvbiA9IGZpbGVEO1xuICAgICAgICAgICAgY29sb3JNYXAgPSBjb2xvcm07XG4gICAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9kZWZhdWx0IGNvbG9yc1xuICAgIGlmICghY2xyKSB7XG4gICAgICBjb2xvcnNbLTEwMF0gPSB0aGlzLmhleFRvUmdiKCcjMDAwMGZmJyk7XG4gICAgICBjb2xvcnNbMTAwXSA9IHRoaXMuaGV4VG9SZ2IoJyNmZjAwMDAnKTtcbiAgICAgIGNvbG9yc1swXSA9IHRoaXMuaGV4VG9SZ2IoJyNmZmZmZmYnKTtcbiAgICB9XG5cbiAgICAvLyBGaXJzdCBsaW5lIGlzIG1ldGEgZGF0YSAhXG4gICAgY29uc3QgbWV0YUxpbmVDb2x1bW5zID0gbGluZXNba10uc3BsaXQoJ1xcdCcpO1xuXG4gICAgLy8gUGFyc2UgZXhwZXJpbWVudCB0eXBlc1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbWV0YUxpbmVDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSA9PSBtZXRhTGluZUNvbHVtbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB2YXIgdHJpbW1lZCA9IG1ldGFMaW5lQ29sdW1uc1tpXS50cmltKCk7XG4gICAgICAgIGV4cGVyaW1lbnRzLnB1c2godHJpbW1lZCk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgZXhwZXJpbWVudHMucHVzaChtZXRhTGluZUNvbHVtbnNbaV0pO1xuXG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwZXJpbWVudHNbaSAtIDFdXSA9IHRydWU7XG5cbiAgICAgIGlmIChncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXS5wdXNoKGV4cGVyaW1lbnRzW2kgLSAxXSk7XG4gICAgfVxuXG4gICAgdmlzaWJsZUZpbGVzW2ZpbGVOYW1lXSA9IHRydWU7XG5cbiAgICB2YXIgbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB2YXIgbWF4ID0gTnVtYmVyLk1JTl9WQUxVRTtcblxuICAgIC8vIHBhcnNlIGdlbm9taWMgZGF0YVxuICAgIGZvciAobGV0IGkgPSBrICsgMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBFT0YgY2hlY2tcbiAgICAgIGlmIChsaW5lc1tpXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIC8vIFNwbGl0IGVhY2ggbGluZSBieSB0YWIgYW5kIHBhcnNlIGdlbm9taWMgZGF0YSBjb250ZW50XG4gICAgICBjb25zdCBsaW5lQ29udGVudCA9IGxpbmVzW2ldLnNwbGl0KCdcXHQnKTtcbiAgICAgIGNvbnN0IGVsZVN5bWJvbCA9IGxpbmVDb250ZW50WzBdO1xuXG4gICAgICAvLyBJZiBjdXJyZW50IGdlbmUgZW50cnkgaXMgbm90ICBpbiBnZW5vbWljIGRhdGEgbWFwIGNyZWF0ZSBuZXcgbWFwXG4gICAgICBpZiAoIShlbGVTeW1ib2wgaW4gcGFyc2VkRGF0YU1hcCkpIHtcbiAgICAgICAgcGFyc2VkRGF0YU1hcFtlbGVTeW1ib2xdID0ge307XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBlYWNoIGVudHJ5IG9mIGdlbm9taWMgZGF0YVxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBsaW5lQ29udGVudC5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoaiA9PSBsaW5lQ29udGVudC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgbGluZUNvbnRlbnRbal0gPSBsaW5lQ29udGVudFtqXS50cmltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmVDb250ZW50W2pdLm1hdGNoKGludHJlZ2V4KSkge1xuICAgICAgICAgIHBhcnNlZERhdGFNYXBbZWxlU3ltYm9sXVtmaWxlTmFtZSArICc/JyArIGV4cGVyaW1lbnRzW2ogLSAxXV0gPSBsaW5lQ29udGVudFtqXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWREYXRhTWFwID0gcGFyc2VkO1xuICAgICAgICAgIHZpc2libGVEYXRhTWFwQnlFeHAgPSB2aXNpYmxlO1xuICAgICAgICAgIGdyb3VwZWREYXRhTWFwID0gZ3JvdXBlZDtcbiAgICAgICAgICBjb2xvck1hcCA9IGNvbG9ybTtcbiAgICAgICAgICB2aXNpYmxlRmlsZXMgPSB2aXNpYmxlZjtcbiAgICAgICAgICBmaWxlVGl0bGUgPSBmaWxlTjtcbiAgICAgICAgICBmaWxlRGVzY3JpcHRpb24gPSBmaWxlRDtcbiAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcbiAgICAgICAgICBlcnJvckNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZUNvbnRlbnRbal0gPiBtYXgpIHtcbiAgICAgICAgICBtYXggPSBsaW5lQ29udGVudFtqXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZUNvbnRlbnRbal0gPCBtaW4pIHtcbiAgICAgICAgICBtaW4gPSBsaW5lQ29udGVudFtqXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2xvcnNbJ21pbiddKSB7XG4gICAgICB2YXIgY29sb3J2YWx1ZSA9IGNvbG9yc1snbWluJ107XG4gICAgICBkZWxldGUgY29sb3JzWydtaW4nXTtcbiAgICAgIGNvbG9yc1ttaW5dID0gY29sb3J2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoY29sb3JzWydtYXgnXSkge1xuICAgICAgdmFyIGNvbG9ydmFsdWUgPSBjb2xvcnNbJ21heCddO1xuICAgICAgZGVsZXRlIGNvbG9yc1snbWF4J107XG4gICAgICBjb2xvcnNbbWF4XSA9IGNvbG9ydmFsdWU7XG4gICAgfVxuXG4gICAgY29sb3JNYXBbZmlsZU5hbWVdID0gY29sb3JzO1xuICAgIHZhciBwYXJhbXMgPSB7ZmlsZU5hbWV9O1xuICAgIHRoaXMuc2hvd0RhdGEoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmdldEV4cGVyaW1lbnRhbERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2libGVEYXRhTWFwQnlFeHA6IHZpc2libGVEYXRhTWFwQnlFeHAsXG4gICAgICB2aXNpYmxlRmlsZXM6IHZpc2libGVGaWxlcyxcbiAgICAgIGZpbGVEZXNjcmlwdGlvbjogZmlsZURlc2NyaXB0aW9uLFxuICAgICAgYWxsVmlzOiBhbGxWaXMsXG4gICAgICBmaWxlVGl0bGU6IGZpbGVUaXRsZSxcbiAgICAgIHBhcnNlZERhdGFNYXA6cGFyc2VkRGF0YU1hcFxuICAgIH07XG4gIH07XG4gIHJldHVybiBleHBlcmltZW50YWxEYXRhT3ZlcmxheTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUNBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtFQUMzQixJQUFJQyxFQUFKO0VBQ0EsSUFBSUMsYUFBSjtFQUNBLElBQUlDLG1CQUFKO0VBQ0EsSUFBSUMsY0FBSjtFQUNBLElBQUlDLFlBQUo7RUFDQSxJQUFJQyxRQUFKO0VBQ0EsSUFBSUMsTUFBSjtFQUNBLElBQUlDLGVBQUo7RUFDQSxJQUFJQyxTQUFKOztFQUNBLFNBQVNDLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3QztJQUN0QztJQUNBVixFQUFFLEdBQUdVLEtBQUssQ0FBQ0MsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtJQUNBWCxhQUFhLEdBQUcsRUFBaEI7SUFDQUMsbUJBQW1CLEdBQUcsRUFBdEI7SUFDQUUsWUFBWSxHQUFHLEVBQWY7SUFDQUQsY0FBYyxHQUFH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\n//# sourceURL=webpack-internal:///./src/utilities/experimental-data-overlay.js\n");

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/*\n* File Utilities: To be used on read/write file operation\n*/\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar saveAs = libs.saveAs;\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nmodule.exports = function () {\n  // Helper functions Start\n  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n  function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n\n  function loadTextDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhttp.overrideMimeType('application/text');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseText;\n  }\n\n  function loadXMLDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhttp.overrideMimeType('application/xml');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseXML;\n  } // Should this be exposed or should this be moved to the helper functions section?\n\n\n  function textToXmlObject(text) {\n    if (window.ActiveXObject) {\n      var doc = new ActiveXObject('Microsoft.XMLDOM');\n      doc.async = 'false';\n      doc.loadXML(text);\n    } else {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(text, 'text/xml');\n    }\n\n    return doc;\n  } // Helper functions End\n\n\n  var sbgnmlToJson, sbmlToJson, jsonToSbgnml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml;\n  var updateGraph;\n  var options, cy;\n\n  function fileUtilities(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    jsonToSif = param.jsonToSifConverter;\n    uiUtilities = param.uiUtilities;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    layoutToText = param.layoutToText;\n    graphUtilities = param.graphUtilities;\n    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n    sbgnmlToCd = param.sbgnmlToCdConverter;\n    cdToSbgnml = param.cdToSbgnmlConverter;\n    sbgnmlToSbml = param.sbgnmlToSbmlConverter;\n    sbmlToSbgnml = param.sbmlToSbgnmlConverter;\n  }\n\n  fileUtilities.loadXMLDoc = loadXMLDoc;\n  fileUtilities.textToXmlObject = textToXmlObject;\n\n  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var pngContent = cy.png({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var pngContent = cy.png({\n        scale: scale || 3,\n        full: true,\n        bg: bg\n      });\n    } // this is to remove the beginning of the pngContent: data:img/png;base64,\n\n\n    var b64data = pngContent.substr(pngContent.indexOf(\",\") + 1); // lower quality when response is empty\n\n    if (!b64data || b64data === \"\") {\n      pngContent = cy.png({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n    }\n\n    saveAs(b64toBlob(b64data, \"image/png\"), filename || \"network.png\");\n  };\n\n  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {\n    if (maxWidth || maxHeight) {\n      var jpgContent = cy.jpg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        quality: quality\n      });\n    } else {\n      var jpgContent = cy.jpg({\n        scale: scale || 3,\n        full: true,\n        bg: bg,\n        quality: quality\n      });\n    } // this is to remove the beginning of the pngContent: data:img/png;base64,\n\n\n    var b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1); // lower quality when response is empty\n\n    if (!b64data || b64data === \"\") {\n      jpgContent = cy.jpg({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n    }\n\n    saveAs(b64toBlob(b64data, \"image/jpg\"), filename || \"network.jpg\");\n  };\n\n  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var svgContent = cy.svg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var svgContent = cy.svg({\n        scale: scale || 1,\n        full: true,\n        bg: bg\n      });\n    }\n\n    saveAs(new Blob([svgContent], {\n      type: \"image/svg+xml;charset=utf-8\"\n    }), filename || \"network.svg\");\n  };\n\n  fileUtilities.loadSample = function (filename, folderpath, callback) {\n    var file = (folderpath || 'sample-app/samples/') + filename;\n    uiUtilities.startSpinner(\"load-spinner\"); // Users may want to do customized things while a sample is being loaded\n    // Trigger an event for this purpose and specify the 'filename' as an event parameter\n\n    $(document).trigger(\"sbgnvizLoadSample\", [filename, cy]); // Aliases for sbgnvizLoadSampleStart\n\n    $(document).trigger(\"sbgnvizLoadSampleStart\", [filename, cy]);\n    var text = loadTextDoc(file);\n    var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n\n    if (matchResult != null) {\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n\n      ;\n      matches.forEach(function (match) {\n        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n      });\n      text = text.replace(renderInfoStringCopy, renderInfoString);\n    }\n\n    var xmlObject = textToXmlObject(text);\n    setTimeout(function () {\n      updateGraph(nwtToJson.convert(xmlObject));\n      fileUtilities.collapseMarkedNodes();\n      uiUtilities.endSpinner(\"load-spinner\");\n      $(document).trigger(\"sbgnvizLoadSampleEnd\", [filename, cy]); // Trigger an event signaling that a sample is loaded\n\n      if (typeof callback !== 'undefined') {\n        callback();\n      }\n    }, 0);\n  };\n\n  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {\n    var convert = function convert(text) {\n      return sifToJson.convert(text);\n    };\n\n    var runLayout = function runLayout() {\n      if (layoutBy) {\n        if (typeof layoutBy === 'function') {\n          layoutBy();\n        } else {\n          var layout = cy.layout(layoutBy); // for backward compatibility need to make this if check\n\n          if (layout && layout.run) {\n            layout.run();\n          }\n        }\n      }\n\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n\n    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);\n  };\n\n  fileUtilities.loadTDFile = function functionName(file, callback) {\n    var convert = function convert(text) {\n      return tdToJson.convert(text);\n    };\n\n    fileUtilities.loadFile(file, convert, undefined, callback);\n  };\n\n  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {\n    var convert = function convert(text) {\n      return sbgnmlToJson.convert(textToXmlObject(text));\n    };\n\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  }; // collapse the nodes whose collapse data field is set\n\n\n  fileUtilities.collapseMarkedNodes = function () {\n    // collapse nodes\n    var nodesToCollapse = cy.nodes(\"[collapse]\");\n\n    if (nodesToCollapse.length > 0) {\n      cy.expandCollapse('get').collapse(nodesToCollapse, {\n        layoutBy: null\n      });\n      nodesToCollapse.forEach(function (ele, i, eles) {\n        ele.position(ele.data(\"positionBeforeSaving\"));\n      });\n      nodesToCollapse.removeData(\"positionBeforeSaving\");\n    }\n  };\n  /*\n    callback is a function remotely defined to add specific behavior that isn't implemented here.\n    it is completely optional.\n    signature: callback(textXml)\n  */\n\n\n  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4) {\n    var self = this;\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var textType = /text.*/;\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var text = this.result;\n      console.log(\"text\", text);\n      var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n\n      if (matchResult != null) {\n        var imagesElementMatch = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        var imagesElement;\n\n        if (imagesElementMatch != null) {\n          imagesElement = imagesElementMatch[0];\n        }\n\n        var renderInfoString = matchResult[0];\n        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n        var regex = /\\s([\\S]+)([\\s]*)=/g;\n        var result;\n        var matches = [];\n\n        while (result = regex.exec(renderInfoString)) {\n          matches.push(result[0]);\n        }\n\n        ;\n        matches.forEach(function (match) {\n          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n        });\n        text = text.replace(renderInfoStringCopy, renderInfoString);\n        var imagesElementMatchDirty = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n\n        if (imagesElementMatchDirty != null) {\n          text = text.replace(imagesElementMatchDirty[0], imagesElement);\n        }\n      }\n\n      setTimeout(function () {\n        if (typeof callback1 !== 'undefined') callback1(text);\n        var cyGraph;\n\n        try {\n          cyGraph = convertFcn(text); // Users may want to do customized things while an external file is being loaded\n          // Trigger an event for this purpose and specify the 'filename' as an event parameter\n\n          $(document).trigger(\"sbgnvizLoadFile\", [file.name, cy]); // Aliases for sbgnvizLoadFileStart\n\n          $(document).trigger(\"sbgnvizLoadFileStart\", [file.name, cy]);\n        } catch (err) {\n          uiUtilities.endSpinner(\"load-file-spinner\");\n          console.log(err);\n          if (typeof callback2 !== 'undefined') callback2();\n          return;\n        }\n\n        updateGraph(cyGraph);\n\n        if (typeof callback3 !== 'undefined') {\n          callback3();\n        }\n\n        uiUtilities.endSpinner(\"load-file-spinner\");\n        $(document).trigger(\"sbgnvizLoadFileEnd\", [file.name, cy]); // Trigger an event signaling that a file is loaded\n\n        if (typeof callback4 !== 'undefined') {\n          callback4();\n        }\n      }, 0);\n    };\n\n    reader.readAsText(file);\n  };\n\n  fileUtilities.loadSBGNMLText = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n\n            case 2:\n              _context.next = 4;\n              return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n\n            case 4:\n              uiUtilities.endSpinner(\"load-file-spinner\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  fileUtilities.loadSBMLText = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return updateGraph(sbmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n\n            case 2:\n              _context2.next = 4;\n              return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n\n            case 4:\n              uiUtilities.endSpinner(\"load-file-spinner\");\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x6, _x7, _x8, _x9, _x10) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // supported versions are either 0.2 or 0.3\n\n\n  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  }; // supported versions are either 0.2 or 0.3\n\n\n  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = jsonToSbgnml.createSbgnml();\n    this.convertSbgnmlToCD(sbgnml, function (data) {\n      if (data == null) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n\n  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      this.convertCDToSbgnml(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n\n  fileUtilities.saveAsSbml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToSbml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n\n  fileUtilities.loadSbml = function (file, callback1, callback2) {\n    /*\n    var reader = new FileReader();\n    reader.onload = function (e) { \n     \n       this.convertSbmlToSbgnml(e.target.result, function(data){\n       if(data == null){\n         errorCallback();\n       }else{\n         successCallback(data);\n       }\n     });\n    }.bind(this);\n    reader.readAsText(file);\n    }\n    fileUtilities.convertSbgn= function(filename, version, renderInfo, mapProperties, nodes, edges, hidden = false) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, \"plain\", renderInfo, mapProperties, nodes, edges, hidden);\n     return sbgnmlText;\n    */\n    var convert = function convert(text) {\n      var converted = sbmlToJson.convert(text);\n      console.log(\"converted\", converted);\n      return converted;\n    };\n\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  fileUtilities.exportLayoutData = function (filename, byName) {\n    var layoutText = layoutToText.convert(byName);\n    var blob = new Blob([layoutText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.saveAsPlainSif = function (filename) {\n    var text = jsonToSif.convert();\n    var blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n\n  fileUtilities.convertSbmlTextToJson = function (sbgnmlText) {\n    return sbmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n\n  fileUtilities.convertSifTextToJson = function (sifText) {\n    return sifToJson.convert(sifText);\n  };\n\n  fileUtilities.createJsonFromSBGN = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml();\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n\n  fileUtilities.createJsonFromSBML = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(); //SBML\n\n    var converted_ = sbmlToJson.convert(textToXmlObject(sbgnmlText));\n    console.log(\"converted_\", converted_);\n    return converted_;\n  };\n\n  fileUtilities.createJsonFromSif = function () {\n    var sifText = jsonToSif.convert();\n    return sifToJson.convert(sifText);\n  };\n\n  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {\n    return sbgnmlToCd.convert(sbgnml, callback);\n  };\n\n  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {\n    return sbgnmlToSbml.convert(sbgnml, callback);\n  };\n\n  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {\n    return sbmlToSbgnml.convert(sbml, callback);\n  };\n\n  fileUtilities.convertCDToSbgnml = function (xml, callback) {\n    return cdToSbgnml.convert(xml, callback);\n  };\n\n  return fileUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/file-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*\n * Common utilities for sbgnviz graphs\n */\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var optionUtilities;\n  var options, cy;\n\n  function graphUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n  } // TODO make these initial values user options instead of hardcoding them here\n\n\n  graphUtilities.portsEnabled = true;\n  graphUtilities.compoundSizesConsidered = true;\n\n  graphUtilities.disablePorts = function () {\n    graphUtilities.portsEnabled = false;\n    cy.style().update();\n  };\n\n  graphUtilities.enablePorts = function () {\n    graphUtilities.portsEnabled = true;\n    cy.style().update();\n  };\n\n  graphUtilities.arePortsEnabled = function () {\n    return graphUtilities.portsEnabled;\n  };\n\n  graphUtilities.considerCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = true;\n    cy.style().update();\n  };\n\n  graphUtilities.omitCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = false;\n    cy.style().update();\n  };\n\n  graphUtilities.areCompoundSizesConsidered = function () {\n    return graphUtilities.compoundSizesConsidered == true;\n  };\n\n  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {\n    console.log(\"cyGraph\", cyGraph);\n    var isLayoutRequired;\n\n    if (layoutOptions === undefined) {\n      isLayoutRequired = false;\n    } else {\n      isLayoutRequired = true;\n    }\n\n    $(document).trigger(\"updateGraphStart\", cy); // Reset undo/redo stack and buttons when a new graph is loaded\n\n    if (options.undoable) {\n      cy.undoRedo().reset(); //    this.resetUndoRedoButtons();\n    }\n\n    cy.startBatch(); // clear data\n\n    cy.remove('*');\n    cy.add(cyGraph);\n    console.log(\"cy in update graph\", cy); //add position information to data for preset layout\n\n    var positionMap = {};\n    cy.nodes().forEach(function (node) {\n      var xPos = node.data('bbox').x;\n      var yPos = node.data('bbox').y;\n      positionMap[node.data('id')] = {\n        'x': xPos,\n        'y': yPos\n      }; // assign correct parents to info boxes\n\n      var statesandinfos = node.data('statesandinfos');\n\n      for (var j = 0; j < statesandinfos.length; j++) {\n        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);\n      }\n    }); //this.refreshPaddings(); // Recalculates/refreshes the compound paddings\n\n    cy.endBatch();\n\n    if (isLayoutRequired) {\n      var preferences = {};\n\n      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {\n        preferences.quality = \"draft\";\n      }\n\n      preferences.animate = false;\n      preferences.randomize = true;\n      preferences = $.extend({}, layoutOptions, preferences);\n      var layout = cy.layout(preferences);\n    } else {\n      var layout = cy.layout({\n        name: 'preset',\n        positions: positionMap,\n        fit: true,\n        padding: 20\n      });\n    } // Check this for cytoscape.js backward compatibility\n\n\n    if (layout && layout.run) {\n      layout.run();\n    }\n\n    var performLayout = function performLayout() {\n      cy.fit(cy.elements(\":visible\"), 20);\n    }; // Update the style\n\n\n    cy.style().update(); // Initilize the anchor points once the elements are created\n\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      cy.edgeEditing('get').initAnchorPoints(cy.edges());\n    }\n\n    $(document).trigger(\"updateGraphEnd\", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);\n    if (callback) callback();\n  };\n\n  graphUtilities.calculatePaddings = function (paddingPercent) {\n    //As default use the compound padding value\n    if (!paddingPercent) {\n      var compoundPadding = options.compoundPadding;\n      paddingPercent = typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;\n    }\n\n    var nodes = cy.nodes();\n    var total = 0;\n    var numOfSimples = 0;\n\n    for (var i = 0; i < nodes.length; i++) {\n      var theNode = nodes[i];\n\n      if (theNode.children() == null || theNode.children().length == 0) {\n        total += Number(theNode.width());\n        total += Number(theNode.height());\n        numOfSimples++;\n      }\n    }\n\n    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));\n\n    if (calc_padding < 5) {\n      calc_padding = 5;\n    }\n\n    return calc_padding;\n  };\n\n  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {\n    // this.calculatedPaddings is not working here\n    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out\n    //graphUtilities.calculatedPaddings = this.calculatePaddings();\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings;\n  };\n\n  graphUtilities.getCompoundPaddings = function () {\n    // Return calculated paddings in case of that data is invalid return 5\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings || 5;\n  };\n\n  return graphUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2dyYXBoLXV0aWxpdGllcy1mYWN0b3J5LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsNkNBQUQsQ0FBckI7O0FBQ0EsSUFBSUMsWUFBWSxHQUFHRCxtQkFBTyxDQUFDLHlEQUFELENBQTFCOztBQUNBLElBQUlFLElBQUksR0FBR0QsWUFBWSxDQUFDRSxPQUFiLEVBQVg7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLENBQUMsR0FBR0gsSUFBSSxDQUFDRSxNQUF0Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVk7RUFDM0IsSUFBSUMsZUFBSjtFQUNBLElBQUlDLE9BQUosRUFBYUMsRUFBYjs7RUFFQSxTQUFTQyxjQUFULENBQXlCQyxLQUF6QixFQUFnQztJQUM5QkosZUFBZSxHQUFHSSxLQUFLLENBQUNKLGVBQXhCO0lBQ0FDLE9BQU8sR0FBR0QsZUFBZSxDQUFDSyxVQUFoQixFQUFWO0lBQ0FILEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFOLENBQXFCQyxLQUFyQixFQUFMO0VBQ0QsQ0FSMEIsQ0FVM0I7OztFQUNBSixjQUFjLENBQUNLLFlBQWYsR0FBOEIsSUFBOUI7RUFDQUwsY0FBYyxDQUFDTSx1QkFBZixHQUF5QyxJQUF6Qzs7RUFFQU4sY0FBYyxDQUFDTyxZQUFmLEdBQThCLFlBQVc7SUFDdkNQLGNBQWMsQ0FBQ0ssWUFBZixHQUE4QixLQUE5QjtJQUVBTixFQUFFLENBQUNTLEtBQUgsR0FBV0MsTUFBWDtFQUNELENBSkQ7O0VBTUFULGNBQWMsQ0FBQ1UsV0FBZixHQUE2QixZQUFXO0lBQ3RDVixjQUFjLENBQUNLLFlBQWYsR0FBOEIsSUFBOUI7SUFFQU4sRUFBRSxDQUFDUyxLQUFILEdBQVdDLE1BQVg7RUFDRCxDQUpEOztFQU1BVCxjQUFjLENBQUNXLGVBQWYsR0FBaUMsWUFBVztJQUMxQyxPQUFPWCxjQUFjLENBQUNLLFlBQXRCO0VBQ0Qs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R0FBcUM5RSxjQUFjLENBQUMrRSxlQUFmLEdBQWlDLFlBQVc7SUFDL0U7SUFDQTtJQUNBO0lBQ0EsSUFBSWQsZUFBZSxHQUFHbkUsT0FBTyxDQUFDbUUsZUFBOUI7SUFDQSxPQUFTLE9BQU9BLGVBQVAsS0FBMkIsVUFBN0IsR0FBMkNBLGVBQWUsQ0FBQ0MsSUFBaEIsRUFBM0MsR0FBb0VELGVBQTNFLENBTCtFLENBTS9FO0VBQ0QsQ0FQRDs7RUFTQWpFLGNBQWMsQ0FBQ2dGLG1CQUFmLEdBQXFDLFlBQVc7SUFDOUM7SUFDQSxJQUFJZixlQUFlLEdBQUduRSxPQUFPLENBQUNtRSxlQUE5QjtJQUNBLE9BQVMsT0FBT0EsZUFBUCxLQUEyQixVQUE3QixHQUEyQ0EsZUFBZSxDQUFDQyxJQUFoQixFQUEzQyxHQUFvRUQsZUFBM0UsQ0FIOEMsQ0FLOUM7RUFDRCxDQU5EOztFQVFBLE9BQU9qRSxjQUFQO0FBQ0QsQ0EzS0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9ncmFwaC11dGlsaXRpZXMtZmFjdG9yeS5qcz8zYmZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb21tb24gdXRpbGl0aWVzIGZvciBzYmdudml6IGdyYXBoc1xuICovXG5cbnZhciBjbGFzc2VzID0gcmVxdWlyZSgnLi9jbGFzc2VzJyk7XG52YXIgbGliVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9saWItdXRpbGl0aWVzJyk7XG52YXIgbGlicyA9IGxpYlV0aWxpdGllcy5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdGlvblV0aWxpdGllcztcbiAgdmFyIG9wdGlvbnMsIGN5O1xuXG4gIGZ1bmN0aW9uIGdyYXBoVXRpbGl0aWVzIChwYXJhbSkge1xuICAgIG9wdGlvblV0aWxpdGllcyA9IHBhcmFtLm9wdGlvblV0aWxpdGllcztcbiAgICBvcHRpb25zID0gb3B0aW9uVXRpbGl0aWVzLmdldE9wdGlvbnMoKTtcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7ICAgIFxuICB9XG5cbiAgLy8gVE9ETyBtYWtlIHRoZXNlIGluaXRpYWwgdmFsdWVzIHVzZXIgb3B0aW9ucyBpbnN0ZWFkIG9mIGhhcmRjb2RpbmcgdGhlbSBoZXJlXG4gIGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZCA9IHRydWU7XG4gIGdyYXBoVXRpbGl0aWVzLmNvbXBvdW5kU2l6ZXNDb25zaWRlcmVkID0gdHJ1ZTtcblxuICBncmFwaFV0aWxpdGllcy5kaXNhYmxlUG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICBncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPSBmYWxzZTtcbiAgICBcbiAgICBjeS5zdHlsZSgpLnVwZGF0ZSgpO1xuICB9O1xuXG4gIGdyYXBoVXRpbGl0aWVzLmVuYWJsZVBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgZ3JhcGhVdGlsaXRpZXMucG9ydHNFbmFibGVkID0gdHJ1ZTtcbiAgICBcbiAgICBjeS5zdHlsZSgpLnVwZGF0ZSgpO1xuICB9O1xuXG4gIGdyYXBoVXRpbGl0aWVzLmFyZVBvcnRzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQ7XG4gIH07XG5cbiAgZ3JhcGhVdGlsaXRpZXMuY29uc2lkZXJDb21wb3VuZFNpemVzID0gZnVuY3Rpb24oKSB7XG4gICAgZ3JhcGhVdGlsaXRpZXMuY29tcG91bmRTaXplc0NvbnNpZGVyZWQgPSB0cnVlO1xuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gIH07XG5cbiAgZ3JhcGhVdGlsaXRpZXMub21pdENvbXBvdW5kU2l6ZXMgPSBmdW5jdGlvbigpIHtcbiAgICBncmFwaFV0aWxpdGllcy5jb21wb3VuZFNpemVzQ29uc2lkZXJlZCA9IGZhbHNlO1xuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gIH07XG5cbiAgZ3JhcGhVdGlsaXRpZXMuYXJlQ29tcG91bmRTaXplc0NvbnNpZGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ3JhcGhVdGlsaXRpZXMuY29tcG91bmRTaXplc0NvbnNpZGVyZWQgPT0gdHJ1ZTtcbiAgfTtcblxuICBncmFwaFV0aWxpdGllcy51cGRhdGVHcmFwaCA9IGZ1bmN0aW9uKGN5R3JhcGgsIGNhbGxiYWNrLCBsYXlvdXRPcHRpb25zLCB0aWxlSW5mb0JveGVzKSB7XG5cbiAgICBjb25zb2xlLmxvZyhcImN5R3JhcGhcIiwgY3lHcmFwaClcbiAgICB2YXIgaXNMYXlvdXRSZXF1aXJlZDtcbiAgICBpZihsYXlvdXRPcHRpb25zID09PSB1bmRlZmluZWQpe1xuICAgICAgaXNMYXlvdXRSZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgaXNMYXlvdXRSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgJChkb2N1bWVudCkudHJpZ2dlciggXCJ1cGRhdGVHcmFwaFN0YXJ0XCIsIGN5ICk7XG4gICAgLy8gUmVzZXQgdW5kby9yZWRvIHN0YWNrIGFuZCBidXR0b25zIHdoZW4gYSBuZXcgZ3JhcGggaXMgbG9hZGVkXG4gICAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICAgIGN5LnVuZG9SZWRvKCkucmVzZXQoKTtcbiAgLy8gICAgdGhpcy5yZXNldFVuZG9SZWRvQnV0dG9ucygpO1xuICAgIH1cblxuICAgIGN5LnN0YXJ0QmF0Y2goKTtcbiAgICAvLyBjbGVhciBkYXRhXG4gICAgY3kucmVtb3ZlKCcqJyk7XG4gICAgY3kuYWRkKGN5R3JhcGgpO1xuXG4gICAgY29uc29sZS5sb2coXCJjeSBpbiB1cGRhdGUgZ3JhcGhcIiwgY3kpXG4gICAgLy9hZGQgcG9zaXRpb24gaW5mb3JtYXRpb24gdG8gZGF0YSBmb3IgcHJlc2V0IGxheW91dFxuICAgIHZhciBwb3NpdGlvbk1hcCA9IHt9O1xuICAgIGN5Lm5vZGVzKCkuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgeFBvcyA9IG5vZGUuZGF0YSgnYmJveCcpLng7XG4gICAgICB2YXIgeVBvcyA9IG5vZGUuZGF0YSgnYmJveCcpLnk7XG4gICAgICBwb3NpdGlvbk1hcFtub2RlLmRhdGEoJ2lkJyldID0geyd4JzogeFBvcywgJ3knOiB5UG9zfTtcblxuICAgICAgLy8gYXNzaWduIGNvcnJlY3QgcGFyZW50cyB0byBpbmZvIGJveGVzXG4gICAgICB2YXIgc3RhdGVzYW5kaW5mb3MgPSBub2RlLmRhdGEoJ3N0YXRlc2FuZGluZm9zJyk7XG4gICAgICBmb3IgKHZhciBqPTA7IGogPCBzdGF0ZXNhbmRpbmZvcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjbGFzc2VzLmdldEF1eFVuaXRDbGFzcyhzdGF0ZXNhbmRpbmZvc1tqXSkuc2V0UGFyZW50UmVmKHN0YXRlc2FuZGluZm9zW2pdLCBub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy90aGlzLnJlZnJlc2hQYWRkaW5ncygpOyAvLyBSZWNhbGN1bGF0ZXMvcmVmcmVzaGVzIHRoZSBjb21wb3VuZCBwYWRkaW5nc1xuICAgIGN5LmVuZEJhdGNoKCk7XG5cbiAgICBpZihpc0xheW91dFJlcXVpcmVkKSB7XG4gICAgICB2YXIgcHJlZmVyZW5jZXMgPSB7fTtcbiAgICAgIGlmKGN5Lm5vZGVzKCkubGVuZ3RoID4gMzAwMCB8fCBjeS5lZGdlcygpLmxlbmd0aCA+IDMwMDApIHtcbiAgICAgICAgcHJlZmVyZW5jZXMucXVhbGl0eSA9IFwiZHJhZnRcIjtcbiAgICAgIH1cbiAgICAgIHByZWZlcmVuY2VzLmFuaW1hdGUgPSBmYWxzZTtcbiAgICAgIHByZWZlcmVuY2VzLnJhbmRvbWl6ZSA9IHRydWU7XG4gICAgICBwcmVmZXJlbmNlcyA9ICQuZXh0ZW5kKHt9LCBsYXlvdXRPcHRpb25zLCBwcmVmZXJlbmNlcyk7XG4gICAgICB2YXIgbGF5b3V0ID0gY3kubGF5b3V0KHByZWZlcmVuY2VzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbGF5b3V0ID0gY3kubGF5b3V0KHtcbiAgICAgICAgbmFtZTogJ3ByZXNldCcsXG4gICAgICAgIHBvc2l0aW9uczogcG9zaXRpb25NYXAsXG4gICAgICAgIGZpdDogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzogMjBcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRoaXMgZm9yIGN5dG9zY2FwZS5qcyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgaWYgKGxheW91dCAmJiBsYXlvdXQucnVuKSB7XG4gICAgICBsYXlvdXQucnVuKCk7XG4gICAgfVxuXG4gICAgdmFyIHBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgY3kuZml0KCBjeS5lbGVtZW50cyhcIjp2aXNpYmxlXCIpLCAyMCApXG4gICAgfTtcbiAgICAvLyBVcGRhdGUgdGhlIHN0eWxlXG4gICAgY3kuc3R5bGUoKS51cGRhdGUoKTtcbiAgICAvLyBJbml0aWxpemUgdGhlIGFuY2hvciBwb2ludHMgb25jZSB0aGUgZWxlbWVudHMgYXJlIGNyZWF0ZWRcbiAgICBpZiAoY3kuZWRnZUVkaXRpbmcgJiYgY3kuZWRnZUVkaXRpbmcoJ2luaXRpYWxpemVkJykpIHtcbiAgICAgIGN5LmVkZ2VFZGl0aW5nKCdnZXQnKS5pbml0QW5jaG9yUG9pbnRzKGN5LmVkZ2VzKCkpO1xuICAgIH1cblxuXG5cbiAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCBcInVwZGF0ZUdyYXBoRW5kXCIsIFtjeSwgKGlzTGF5b3V0UmVxdWlyZWQgfHwgdGlsZUluZm9Cb3hlcykgLCBwZXJmb3JtTGF5b3V0XSk7XG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICB9O1xuXG4gIGdyYXBoVXRpbGl0aWVzLmNhbGN1bGF0ZVBhZGRpbmdzID0gZnVuY3Rpb24ocGFkZGluZ1BlcmNlbnQpIHtcbiAgICAvL0FzIGRlZmF1bHQgdXNlIHRoZSBjb21wb3VuZCBwYWRkaW5nIHZhbHVlXG4gICAgaWYgKCFwYWRkaW5nUGVyY2VudCkge1xuICAgICAgdmFyIGNvbXBvdW5kUGFkZGluZyA9IG9wdGlvbnMuY29tcG91bmRQYWRkaW5nO1xuICAgICAgcGFkZGluZ1BlcmNlbnQgPSB0eXBlb2YgY29tcG91bmRQYWRkaW5nID09PSAnZnVuY3Rpb24nID8gY29tcG91bmRQYWRkaW5nLmNhbGwoKSA6IGNvbXBvdW5kUGFkZGluZztcbiAgICB9XG5cbiAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xuICAgIHZhciB0b3RhbCA9IDA7XG4gICAgdmFyIG51bU9mU2ltcGxlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRoZU5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmICh0aGVOb2RlLmNoaWxkcmVuKCkgPT0gbnVsbCB8fCB0aGVOb2RlLmNoaWxkcmVuKCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgdG90YWwgKz0gTnVtYmVyKHRoZU5vZGUud2lkdGgoKSk7XG4gICAgICAgIHRvdGFsICs9IE51bWJlcih0aGVOb2RlLmhlaWdodCgpKTtcbiAgICAgICAgbnVtT2ZTaW1wbGVzKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNhbGNfcGFkZGluZyA9IChwYWRkaW5nUGVyY2VudCAvIDEwMCkgKiBNYXRoLmZsb29yKHRvdGFsIC8gKDIgKiBudW1PZlNpbXBsZXMpKTtcbiAgICBpZiAoY2FsY19wYWRkaW5nIDwgNSkge1xuICAgICAgY2FsY19wYWRkaW5nID0gNTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsY19wYWRkaW5nO1xuICB9O1xuXG4gIGdyYXBoVXRpbGl0aWVzLnJlY2FsY3VsYXRlUGFkZGluZ3MgPSBncmFwaFV0aWxpdGllcy5yZWZyZXNoUGFkZGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAvLyB0aGlzLmNhbGN1bGF0ZWRQYWRkaW5ncyBpcyBub3Qgd29ya2luZyBoZXJlXG4gICAgLy8gVE9ETzogcmVwbGFjZSB0aGlzIHJlZmVyZW5jZSB3aXRoIHRoaXMuY2FsY3VsYXRlZFBhZGRpbmdzIG9uY2UgdGhlIHJlYXNvbiBpcyBmaWd1cmVkIG91dFxuICAgIC8vZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlZFBhZGRpbmdzID0gdGhpcy5jYWxjdWxhdGVQYWRkaW5ncygpO1xuICAgIHZhciBjb21wb3VuZFBhZGRpbmcgPSBvcHRpb25zLmNvbXBvdW5kUGFkZGluZztcbiAgICByZXR1cm4gKCB0eXBlb2YgY29tcG91bmRQYWRkaW5nID09PSAnZnVuY3Rpb24nKSA/IGNvbXBvdW5kUGFkZGluZy5jYWxsKCkgOiBjb21wb3VuZFBhZGRpbmdcbiAgICAvL3JldHVybiBncmFwaFV0aWxpdGllcy5jYWxjdWxhdGVkUGFkZGluZ3M7XG4gIH07XG5cbiAgZ3JhcGhVdGlsaXRpZXMuZ2V0Q29tcG91bmRQYWRkaW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIFJldHVybiBjYWxjdWxhdGVkIHBhZGRpbmdzIGluIGNhc2Ugb2YgdGhhdCBkYXRhIGlzIGludmFsaWQgcmV0dXJuIDVcbiAgICB2YXIgY29tcG91bmRQYWRkaW5nID0gb3B0aW9ucy5jb21wb3VuZFBhZGRpbmc7XG4gICAgcmV0dXJuICggdHlwZW9mIGNvbXBvdW5kUGFkZGluZyA9PT0gJ2Z1bmN0aW9uJykgPyBjb21wb3VuZFBhZGRpbmcuY2FsbCgpIDogY29tcG91bmRQYWRkaW5nXG5cbiAgICAvL3JldHVybiBncmFwaFV0aWxpdGllcy5jYWxjdWxhdGVkUGFkZGluZ3MgfHwgNTtcbiAgfTtcblxuICByZXR1cm4gZ3JhcGhVdGlsaXRpZXM7XG59XG4iXSwibmFtZXMiOlsiY2xhc3NlcyIsInJlcXVpcmUiLCJsaWJVdGlsaXRpZXMiLCJsaWJzIiwiZ2V0TGlicyIsImpRdWVyeSIsIiQiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9uVXRpbGl0aWVzIiwib3B0aW9ucyIsImN5IiwiZ3JhcGhVdGlsaXRpZXMiLCJwYXJhbSIsImdldE9wdGlvbnMiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwicG9ydHNFbmFibGVkIiwiY29tcG91bmRTaXplc0NvbnNpZGVyZWQiLCJkaXNhYmxlUG9ydHMiLCJzdHlsZSIsInVwZGF0ZSIsImVuYWJsZVBvcnRzIiwiYXJlUG9ydHNFbmFibGVkIiwiY29uc2lkZXJDb21wb3VuZFNpemVzIiwib21pdENvbXBvdW5kU2l6ZXMiLCJhcmVDb21wb3VuZFNpemVzQ29uc2lkZXJlZCIsInVwZGF0ZUdyYXBoIiwiY3lHcmFwaCIsImNhbGxiYWNrIiwibGF5b3V0T3B0aW9ucyIsInRpbGVJbmZvQm94ZXMiLCJjb25zb2xlIiwibG9nIiwiaXNMYXlvdXRSZXF1aXJlZCIsInVuZGVmaW5lZCIsImRvY3VtZW50IiwidHJpZ2dlciIsInVuZG9hYmxlIiwidW5kb1JlZG8iLCJyZXNldCIsInN0YXJ0QmF0Y2giLCJyZW1vdmUiLCJhZGQiLCJwb3NpdGlvbk1hcCIsIm5vZGVzIiwiZm9yRWFjaCIsIm5vZGUiLCJ4UG9zIiwiZGF0YSIsIngiLCJ5UG9zIiwieSIsInN0YXRlc2FuZGluZm9zIiwiaiIsImxlbmd0aCIsImdldEF1eFVuaXRDbGFzcyIsInNldFBhcmVudFJlZiIsImVuZEJhdGNoIiwicHJlZmVyZW5jZXMiLCJlZGdlcyIsInF1YWxpdHkiLCJhbmltYXRlIiwicmFuZG9taXplIiwiZXh0ZW5kIiwibGF5b3V0IiwibmFtZSIsInBvc2l0aW9ucyIsImZpdCIsInBhZGRpbmciLCJydW4iLCJwZXJmb3JtTGF5b3V0IiwiZWxlbWVudHMiLCJlZGdlRWRpdGluZyIsImluaXRBbmNob3JQb2ludHMiLCJjYWxjdWxhdGVQYWRkaW5ncyIsInBhZGRpbmdQZXJjZW50IiwiY29tcG91bmRQYWRkaW5nIiwiY2FsbCIsInRvdGFsIiwibnVtT2ZTaW1wbGVzIiwiaSIsInRoZU5vZGUiLCJjaGlsZHJlbiIsIk51bWJlciIsIndpZHRoIiwiaGVpZ2h0IiwiY2FsY19wYWRkaW5nIiwiTWF0aCIsImZsb29yIiwicmVjYWxjdWxhdGVQYWRkaW5ncyIsInJlZnJlc2hQYWRkaW5ncyIsImdldENvbXBvdW5kUGFkZGluZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/graph-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function jsonToNwt(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  function setToStr(set) {\n    if (set) {\n      return Object.keys(set).join(';');\n    }\n\n    return null;\n  }\n\n  var sifEdgePropHandlerMap = {\n    'pcIDs': function pcIDs(edge) {\n      return setToStr(edge.data('pcIDSet'));\n    },\n    'siteLocations': function siteLocations(edge) {\n      return setToStr(edge.data('siteLocSet'));\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(node) {\n      return node.data('tooltip');\n    },\n    'infoboxes': function infoboxes(node, obj) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(infobox) {\n          return infobox.tooltip;\n        }\n      };\n      var infoboxes = node.data('statesandinfos');\n      var glyphs = obj.glyph;\n      infoboxes.forEach(function (infobox, i) {\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infobox);\n\n          if (val) {\n            glyphs[i][propName] = val;\n          }\n        });\n      });\n    }\n  }; // objects consist of arcs or gylphs\n\n  function extendObjectsData(objs, filterFcn, propHandlerMap) {\n    if (!objs) {\n      return;\n    }\n\n    objs.forEach(function (obj) {\n      if (filterFcn(obj.$[\"class\"])) {\n        var ele = cy.getElementById(obj.$.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](ele, obj);\n\n          if (val) {\n            obj[propName] = val;\n          }\n        });\n      }\n    });\n  }\n\n  function extendStylesData(toExtend, extendFrom) {\n    if (!toExtend || !extendFrom) {\n      return;\n    }\n\n    var styleNames = ['shapeName'];\n    var styleMap = {};\n    Object.keys(extendFrom).forEach(function (key) {\n      styleNames.forEach(function (name) {\n        var el = extendFrom[key];\n        var props = el && el.properties;\n\n        if (props && props[name]) {\n          var val = props[name];\n          var idList = el.idList;\n          idList.forEach(function (id) {\n            styleMap[id] = styleMap[id] || {};\n            styleMap[id][name] = val;\n          });\n        }\n      });\n    });\n    toExtend.forEach(function (style) {\n      var idList = style.$.idList.split(' ');\n      styleNames.forEach(function (name) {\n        var val = null;\n        idList.forEach(function (id) {\n          var currVal = styleMap[id] && styleMap[id][name];\n\n          if (currVal === undefined) {\n            return;\n          }\n\n          if (val == null) {\n            val = currVal;\n          } else if (val !== currVal) {\n            console.warn('Shape name of some glyphs defined multiple times in render information!');\n          }\n        });\n\n        if (val !== null) {\n          style.g.$[name] = val;\n        }\n      });\n    });\n  }\n\n  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n\n    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn' && elementUtilities.mapType !== 'SBML') {\n      var map = jsObj.map[0];\n      var arcs = map.arc;\n      var glyphs = map.glyph;\n      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);\n      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);\n      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;\n      var appStyles = renderInfo && renderInfo.styles;\n      extendStylesData(jsObjStyles, appStyles);\n    }\n\n    return jsObj;\n  };\n\n  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n\n  return jsonToNwt;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-nwt-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar renderExtension = libsbgnjs.render;\nvar annot = libsbgnjs.annot;\n\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\n\n\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\n\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\n\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\n\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"extraInfo\"\n});\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n  /*\n      takes renderInfo as an optional argument. It contains all the information needed to save\n      the style and colors to the render extension. See newt/app-utilities getAllStyles()\n      Structure: {\n          background: the map background color,\n          colors: {\n            validXmlValue: color_id\n            ...\n          },\n          styles: {\n              styleKey1: {\n                  idList: list of the nodes ids that have this style\n                  properties: {\n                      fontSize: ...\n                      fill: ...\n                      ...\n                  }\n              }\n              styleKey2: ...\n              ...\n          }\n      }\n  */\n\n  function jsonToSbgnml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  /*\n   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.\n   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.\n   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.\n   TODO implement 0.3 changes when submap support is fully there.\n   */\n\n\n  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var _this = this;\n\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return function (edges) {\n      var self = _this;\n      var mapID = textUtilities.getXMLValidId(filename);\n      var hasExtension = false;\n      var hasRenderExtension = false;\n      var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;\n      _this.nodes = nodes || cy.nodes();\n      _this.edges = edges || cy.edges();\n      var id = [];\n      var i = 0; //console.log(\"this.nodes\",this.nodes)\n\n      _this.nodes.forEach(function (node) {\n        return function () {\n          id[i] = node._private.data.id;\n          i++;\n        };\n      });\n\n      var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(_this.nodes);\n      _this.allCollapsedNodes = collapsedChildren.filter(\"node\");\n      _this.allCollapsedEdges = collapsedChildren.filter(\"edge\");\n\n      if (typeof renderInfo !== 'undefined') {\n        hasExtension = true;\n        hasRenderExtension = true;\n      }\n\n      if (typeof version === 'undefined') {\n        // default if not specified\n        version = \"0.3\";\n      } // check version validity\n\n\n      if (version !== \"0.2\" && version !== \"0.3\" && version !== \"plain\" && version !== \"plain3\") {\n        console.error(\"Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: \" + version);\n        return \"Error\";\n      }\n\n      var mapLanguage = elementUtilities.mapTypeToLanguage(mapType); //add headers\n\n      xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n      var versionNo;\n\n      if (version === \"plain\") {\n        versionNo = \"0.2\";\n      } else if (version === \"plain3\") {\n        versionNo = \"0.3\";\n      } else {\n        versionNo = version;\n      } //var versionNo = (version === \"plain\") ? \"0.2\" : version;\n\n\n      console.log(\"Version number\", versionNo);\n      var sbgn = new libsbgnjs.Sbgn({\n        xmlns: 'http://sbgn.org/libsbgn/' + versionNo\n      });\n      var map;\n\n      if (version === \"0.3\" || version === \"plain3\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage,\n          id: mapID\n        });\n      } else if (version === \"0.2\" || version === \"plain\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage\n        });\n      }\n\n      if (hasExtension) {\n        // extension is there\n        var extension = new libsbgnjs.Extension();\n\n        if (hasRenderExtension) {\n          extension.add(self.getRenderExtensionSbgnml(renderInfo));\n        }\n\n        map.setExtension(extension);\n\n        if (mapProperties) {\n          delete mapProperties.experimentDescription;\n          var xml = mapPropertiesBuilder.buildObject(mapProperties);\n          map.extension.add(xml);\n        }\n      } else if (mapProperties) {\n        map.setExtension(new libsbgnjs.Extension());\n        map.extension.add(mapPropertiesBuilder.buildObject(mapProperties));\n      } // get all glyphs\n\n\n      var glyphList = []; // be careful that :visible is also used during recursive search of nodes\n      // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.\n\n      var self = _this;\n\n      _this.nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        if (jsonToSbgnml.childOfNone(ele, self.nodes)) {\n          var vis = true;\n          if (hidden) vis = id.includes(ele._private.data.id);\n          glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, vis)); // returns potentially more than 1 glyph\n        }\n      }); // add them to the map\n\n\n      for (var i = 0; i < glyphList.length; i++) {\n        if (version === \"plain\" && !hidden) glyphList[i].extension = null;\n        if (glyphList[i] != undefined) map.addGlyph(glyphList[i]);\n      } // get all arcs\n\n\n      var edges = _this.allCollapsedEdges.union(_this.edges);\n\n      edges.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        var arc = self.getArcSbgnml(ele, version, hidden);\n        if (version === \"plain\" && (!hidden || hidden && ele.visible())) arc.extension = null;\n        map.addArc(arc);\n      });\n      sbgn.addMap(map);\n      return sbgn.buildJsObj();\n    }(edges);\n  };\n\n  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  }; // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js\n\n\n  jsonToSbgnml.buildString = function (obj) {\n    var xmlString = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    }).buildObject(obj); // change naming convention from Camel Case (variableName) to Kebab case (variable-name)\n\n    var matchResult = xmlString.match(\"<renderInformation[^]*</renderInformation>\");\n\n    if (matchResult != null) {\n      var imagesElementMatch = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      var imagesElement;\n\n      if (imagesElementMatch != null) {\n        imagesElement = imagesElementMatch[0];\n      }\n\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n\n      ;\n      matches.forEach(function (match) {\n        if (match != \" idList=\") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));\n      });\n      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);\n      var imagesElementMatchDirty = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n\n      if (imagesElementMatchDirty != null) {\n        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);\n      }\n    }\n    /* \tdirty hack needed to solve the newline char encoding problem\n    \txml2js doesn't encode \\n as &#xA; we need to do it manually\n    */\n\n\n    var re = /<label text=\"((.|\\n+)+?)\"/gm;\n    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {\n      return '<label text=\"' + p1.replace(/\\n/g, \"&#xA;\") + '\"';\n    });\n    var xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    /*\n      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.\n      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.\n      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported\n      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.\n    */\n\n    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace(\"<sbgn \\n  xmlns=\\\"http://sbgn.org/libsbgn\", \"<sbgn xmlns=\\\"http://sbgn.org/libsbgn\");\n    return xmlHeader + xmlbody;\n  }; // see createSbgnml for info on the structure of renderInfo\n\n\n  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {\n    // initialize the main container\n    var renderInformation = new renderExtension.RenderInformation({\n      id: 'renderInformation',\n      backgroundColor: renderInfo.background,\n      programName: pkgName,\n      programVersion: pkgVersion\n    }); // populate list of colors\n\n    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();\n\n    for (var color in renderInfo.colors) {\n      var colorDefinition = new renderExtension.ColorDefinition({\n        id: renderInfo.colors[color],\n        value: color\n      });\n      listOfColorDefinitions.addColorDefinition(colorDefinition);\n    }\n\n    renderInformation.setListOfColorDefinitions(listOfColorDefinitions); // populate list of background images\n\n    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();\n\n    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {\n      for (var img in renderInfo.images) {\n        var backgroundImage = new renderExtension.BackgroundImage({\n          id: renderInfo.images[img],\n          value: img\n        });\n        listOfBackgroundImages.addBackgroundImage(backgroundImage);\n      }\n    }\n\n    renderInformation.setListOfBackgroundImages(listOfBackgroundImages); // populates styles\n\n    var listOfStyles = new renderExtension.ListOfStyles();\n\n    for (var key in renderInfo.styles) {\n      var style = renderInfo.styles[key];\n      var xmlStyle = new renderExtension.Style({\n        id: textUtilities.getXMLValidId(key),\n        idList: style.idList.join(' ')\n      });\n      var g = new renderExtension.RenderGroup({\n        fontSize: style.properties.fontSize,\n        fontFamily: style.properties.fontFamily,\n        fontWeight: style.properties.fontWeight,\n        fontStyle: style.properties.fontStyle,\n        fontColor: style.properties.fontColor,\n        fill: style.properties.fill,\n        // fill color\n        stroke: style.properties.stroke,\n        // stroke color\n        strokeWidth: style.properties.strokeWidth,\n        backgroundImage: style.properties.backgroundImage,\n        backgroundFit: style.properties.backgroundFit,\n        backgroundPosX: style.properties.backgroundPosX,\n        backgroundPosY: style.properties.backgroundPosY,\n        backgroundWidth: style.properties.backgroundWidth,\n        backgroundHeight: style.properties.backgroundHeight,\n        backgroundImageOpacity: style.properties.backgroundImageOpacity,\n        backgroundOpacity: style.properties.backgroundOpacity\n      });\n      xmlStyle.setRenderGroup(g);\n      listOfStyles.addStyle(xmlStyle);\n    }\n\n    renderInformation.setListOfStyles(listOfStyles);\n    return renderInformation;\n  };\n\n  jsonToSbgnml.getAnnotationExtension = function (cyElement) {\n    var annotations = cyElement.data('annotations');\n    var annotExt = new annot.Annotation();\n    var rdfElement = new annot.RdfElement();\n\n    for (var annotID in annotations) {\n      var currentAnnot = annotations[annotID]; // check validity of annotation\n\n      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {\n        continue;\n      } // check if uncontrolled vocabulary\n\n\n      if (currentAnnot.selectedRelation == \"sio:SIO_000223\") {\n        var obj = {};\n        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;\n        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);\n      } else {\n        var obj = {};\n        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;\n        rdfElement.addResource('#' + cyElement.data('id'), obj);\n      }\n    }\n\n    annotExt.setRdfElement(rdfElement);\n    return annotExt;\n  };\n\n  jsonToSbgnml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var self = this;\n    var nodeClass = node._private.data[\"class\"];\n    var glyphList = [];\n    if (!visible && !node.visible()) return;\n\n    if (nodeClass.startsWith('BA')) {\n      nodeClass = \"biological activity\";\n    } // Workaround: In application we use 'empty set' class but SBGN-ML files \n    // use 'source and sink' so we read and write as 'source and sink'\n\n\n    if (nodeClass === \"empty set\") {\n      nodeClass = \"source and sink\";\n    }\n\n    var glyph = new libsbgnjs.Glyph({\n      id: node._private.data.id,\n      class_: nodeClass\n    }); // assign compartmentRef\n\n    if (node.parent() && node.parent().length > 0) {\n      if (nodeClass === \"compartment\") {\n        var parent = node.parent();\n        glyph.compartmentRef = node._private.data.parent;\n      } else {\n        var parent = node.parent()[0];\n        if (parent._private.data[\"class\"] == \"compartment\") glyph.compartmentRef = parent._private.data.id;\n      }\n    } // misc information\n\n\n    var label = node._private.data.label;\n    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({\n      text: label\n    })); //add clone information\n\n    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType()); //add bbox information\n\n    glyph.setBbox(this.addGlyphBbox(node));\n\n    if (node.isParent() || node.data()[\"class\"] == 'topology group' || node.data()[\"class\"] == 'submap' || node.data()[\"class\"] == 'complex' || node.data()[\"class\"] == 'compartment') {\n      var extraInfo = {};\n      extraInfo.w = node.width();\n      extraInfo.h = node.height();\n      extraInfo.minW = Number(node.css(\"min-width\").replace(\"px\", \"\"));\n      extraInfo.minH = Number(node.css(\"min-height\").replace(\"px\", \"\"));\n      extraInfo.WLBias = Number(node.css(\"min-width-bias-left\").replace(\"px\", \"\"));\n      extraInfo.WRBias = Number(node.css(\"min-width-bias-right\").replace(\"px\", \"\"));\n      extraInfo.HTBias = Number(node.css(\"min-height-bias-top\").replace(\"px\", \"\"));\n      extraInfo.HBBias = Number(node.css(\"min-height-bias-bottom\").replace(\"px\", \"\"));\n      glyph.setExtension(new libsbgnjs.Extension());\n      glyph.extension.add(compoundExtensionBuilder.buildObject(extraInfo));\n    } //add port information\n\n\n    var ports = node._private.data.ports;\n\n    for (var i = 0; i < ports.length; i++) {\n      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied for ports over the whole shape\n\n      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50; // Divide the node sizes by the ratio because that sizes includes ports as well\n\n      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;\n      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;\n      glyph.addPort(new libsbgnjs.Port({\n        id: ports[i].id,\n        x: x,\n        y: y\n      }));\n    } //add state and info box information\n\n\n    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {\n      var boxGlyph = node._private.data.statesandinfos[i];\n      var statesandinfosId = boxGlyph.id;\n\n      if (boxGlyph.clazz === \"state variable\") {\n        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"unit of information\") {\n        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"residue variable\") {\n        glyph.addGlyphMember(this.addResidueBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"binding region\") {\n        glyph.addGlyphMember(this.addBindingBoxGlyph(boxGlyph, statesandinfosId, node));\n      }\n    } // check for annotations\n\n\n    if (version !== \"plain\" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {\n      var extension = self.getOrCreateExtension(glyph);\n      var annotExt = self.getAnnotationExtension(node);\n      extension.add(annotExt);\n    } // add glyph members that are not state variables or unit of info: subunits\n\n\n    if (nodeClass === \"complex\" || nodeClass === \"complex multimer\" || nodeClass === \"submap\" || nodeClass === \"topology group\" || nodeClass == \"active protein\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n\n      if (node.data('collapsedChildren')) {\n        var collapsedChildren = node.data('collapsedChildren');\n        children = children.union(collapsedChildren);\n      }\n\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        var glyphMemberList = self.getGlyphSbgnml(ele, version, visible);\n\n        for (var i = 0; i < glyphMemberList.length; i++) {\n          glyph.addGlyphMember(glyphMemberList[i]);\n        }\n      });\n    }\n\n    var sbgnvizExtString = \"\";\n    var hasNewtExt = false; // add info for collapsed nodes\n\n    if (node.data('collapsedChildren')) {\n      sbgnvizExtString += \"<collapsed/>\";\n      sbgnvizExtString += \"<positionBeforeSaving x='\" + node.position().x + \"' y='\" + node.position().y + \"'/>\";\n      hasNewtExt = true;\n    } // add info for hidden nodes\n\n\n    if (node.hidden()) {\n      sbgnvizExtString += \"<hidden/>\";\n      hasNewtExt = true;\n    } // add info for nodes which has hidden neighbour\n\n\n    if (node.data(\"thickBorder\")) {\n      sbgnvizExtString += \"<hasHiddenNeighbour/>\";\n      hasNewtExt = true;\n    } // add string to a new extension for this glyph\n\n\n    if (hasNewtExt) {\n      var extension = self.getOrCreateExtension(glyph);\n      extension.add(\"<sbgnviz>\" + sbgnvizExtString + \"</sbgnviz>\");\n    } // current glyph is done\n\n\n    glyphList.push(glyph); // keep going with all the included glyphs\n\n    if (nodeClass === \"compartment\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, visible));\n      });\n    }\n\n    return glyphList;\n  }; // element: a libsbgn.js glyph or edge object\n\n\n  jsonToSbgnml.getOrCreateExtension = function (element) {\n    var extension;\n\n    if (element.extension) {\n      // an extension is already there for this element\n      extension = element.extension;\n    } else {\n      extension = new libsbgnjs.Extension();\n      element.setExtension(extension);\n    }\n\n    return extension;\n  };\n\n  jsonToSbgnml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var self = this; //Temporary hack to resolve \"undefined\" arc source and targets\n\n    var arcTarget = edge._private.data.porttarget;\n    var arcSource = edge._private.data.portsource;\n    if (hidden && !edge.visible()) return;\n    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;\n    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;\n    var arcId = edge._private.data.id;\n    var arc = new libsbgnjs.Arc({\n      id: arcId,\n      source: arcSource,\n      target: arcTarget,\n      class_: edge._private.data[\"class\"]\n    });\n    arc.setStart(new libsbgnjs.StartType({\n      x: edge._private.rscratch.startX,\n      y: edge._private.rscratch.startY\n    })); // Export anchor points if edgeEditingExtension is registered\n\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);\n\n      if (typeof segpts !== 'undefined') {\n        if (segpts.length > 0) {\n          for (var i = 0; segpts && i < segpts.length; i = i + 2) {\n            var anchorX = segpts[i];\n            var anchorY = segpts[i + 1];\n            arc.addNext(new libsbgnjs.NextType({\n              x: anchorX,\n              y: anchorY\n            }));\n          }\n        }\n      }\n    }\n\n    arc.setEnd(new libsbgnjs.EndType({\n      x: edge._private.rscratch.endX,\n      y: edge._private.rscratch.endY\n    }));\n    var cardinality = edge._private.data.cardinality;\n\n    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {\n      var edgebBox = edge.boundingBox({\n        includeLabels: true,\n        includeNodes: false,\n        includeEdges: false,\n        includeOverlays: false\n      });\n      arc.addGlyph(new libsbgnjs.Glyph({\n        id: arc.id + '_card',\n        class_: 'stoichiometry',\n        label: new libsbgnjs.Label({\n          text: cardinality\n        }),\n        bbox: new libsbgnjs.Bbox({\n          x: edgebBox.x1,\n          y: edgebBox.y1,\n          w: edgebBox.w,\n          h: edgebBox.h\n        }) // dummy bbox, needed for format compliance\n\n      }));\n    } // check for annotations\n\n\n    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {\n      var extension = self.getOrCreateExtension(arc);\n      var annotExt = this.getAnnotationExtension(edge);\n      extension.add(annotExt);\n    } // add info for hidden edges\n\n\n    if (edge.hidden()) {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sbgnviz><hidden/></sbgnviz>\");\n    } // add info about edge type\n    // since curve style is not standard we shouldn't have it for either version\n\n\n    if (edge.css('curve-style') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<curveStyle>\" + edge.css('curve-style') + \"</curveStyle>\");\n    }\n\n    if (edge.data('sif-meta') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sifMetaEdge>true</sifMetaEdge>\");\n    }\n\n    return arc;\n  };\n\n  jsonToSbgnml.addGlyphBbox = function (node) {\n    var padding = node.padding();\n    var borderWidth = Number(node.css(\"border-width\").replace(\"px\", \"\"));\n\n    var _class = node.data('class');\n\n    var width = node.outerWidth() - borderWidth;\n    var height = node.outerHeight() - borderWidth; // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n\n    if (elementUtilities.canHavePorts(_class)) {\n      if (node.data('ports').length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = node.data('ports')[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports\n\n        width /= ratio;\n        height /= ratio;\n      }\n    }\n\n    var x = node.position().x - width / 2;\n    var y = node.position().y - height / 2; //var x =node._private.position.x - width/2 - padding;    \n    //var y = node._private.position.y - height/2 - padding;\n    //var x = node._private.position.x - width/2;\n    //var y = node._private.position.y - height/2;\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: width,\n      h: height\n    });\n  };\n\n  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {\n    boxBbox = boxGlyph.bbox;\n    var borderWidth = node.data()['border-width'];\n    var padding = node.padding();\n    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);\n    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2); //var x = boxBbox.x / 100 * node.width();\n    //var y = boxBbox.y / 100 * node.height();\n    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);\n    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: boxBbox.w,\n      h: boxBbox.h\n    });\n  };\n\n  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'state variable'\n    });\n    var state = new libsbgnjs.StateType();\n    if (typeof node.state.value != 'undefined') state.value = node.state.value;\n    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;\n    glyph.setState(state);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n\n  jsonToSbgnml.addBindingBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'binding region'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.region.variable != 'undefined') label.text = node.region.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n\n  jsonToSbgnml.addResidueBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'residue variable'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.residue.variable != 'undefined') label.text = node.residue.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n\n  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'unit of information'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.label.text != 'undefined') label.text = node.label.text;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node)); // assign correct entity tag for AF case\n\n    var entityName = null;\n\n    switch (mainGlyph._private.data[\"class\"]) {\n      case 'BA unspecified entity':\n        entityName = \"unspecified entity\";\n        break;\n\n      case 'BA simple chemical':\n        entityName = \"simple chemical\";\n        break;\n\n      case 'BA macromolecule':\n        entityName = \"macromolecule\";\n        break;\n\n      case 'BA nucleic acid feature':\n        entityName = \"nucleic acid feature\";\n        break;\n\n      case 'BA perturbing agent':\n        entityName = \"perturbation\";\n        break;\n\n      case 'BA complex':\n        entityName = \"complex\";\n        break;\n    } // entity tag aren't always there, only for AF\n    // but we still need to keep this information for unknown map type\n\n\n    if (entityName) {\n      glyph.setEntity(new libsbgnjs.EntityType({\n        name: entityName\n      }));\n    }\n\n    return glyph;\n  };\n\n  jsonToSbgnml.childOfNone = function (ele, nodes) {\n    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;\n  };\n\n  return jsonToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var elementUtilities, cy;\n\n  function jsonToSif(param) {\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  function isValidEnd(node) {\n    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';\n  }\n\n  jsonToSif.convert = function () {\n    var lines = [];\n    var edges = cy.edges().filter(function (edge) {\n      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());\n    });\n    var nodes = cy.nodes().filter(function (node) {\n      return elementUtilities.isSIFNode(node);\n    });\n    nodes = nodes.not(edges.connectedNodes());\n\n    var setToStr = function setToStr(set) {\n      if (!set) {\n        return '';\n      }\n\n      return Object.keys(set).join(';');\n    };\n\n    var getLabel = function getLabel(node) {\n      return node.data('label');\n    };\n\n    var isValidLabel = function isValidLabel(label) {\n      return !!label;\n    };\n\n    edges.forEach(function (edge) {\n      var srcNames, tgtNames;\n\n      var getNames = function getNames(node) {\n        var names;\n\n        if (node.isParent()) {\n          names = node.children().map(getLabel);\n        } else {\n          names = [getLabel(node)];\n        }\n\n        return names && names.filter(isValidLabel);\n      };\n\n      var srcNames = getNames(edge.source());\n      var tgtNames = getNames(edge.target());\n\n      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {\n        return;\n      }\n\n      var type = edge.data('class');\n      var pcIDSet = edge.data('pcIDSet');\n      var siteLocSet = edge.data('siteLocSet');\n      var pcIDs = setToStr(pcIDSet);\n      var siteLocations = setToStr(siteLocSet);\n      srcNames.forEach(function (srcName) {\n        tgtNames.forEach(function (tgtName) {\n          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\\t');\n          lines.push(line);\n        });\n      });\n    });\n    nodes.forEach(function (node) {\n      var label = getLabel(node);\n\n      if (label) {\n        lines.push(label);\n      }\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n\n  return jsonToSif;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2lmLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImpzb25Ub1NpZiIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImlzVmFsaWRFbmQiLCJub2RlIiwiaXNTSUZOb2RlIiwiZGF0YSIsImNvbnZlcnQiLCJsaW5lcyIsImVkZ2VzIiwiZmlsdGVyIiwiZWRnZSIsImlzU0lGRWRnZSIsInNvdXJjZSIsInRhcmdldCIsIm5vZGVzIiwibm90IiwiY29ubmVjdGVkTm9kZXMiLCJzZXRUb1N0ciIsInNldCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiZ2V0TGFiZWwiLCJpc1ZhbGlkTGFiZWwiLCJsYWJlbCIsImZvckVhY2giLCJzcmNOYW1lcyIsInRndE5hbWVzIiwiZ2V0TmFtZXMiLCJuYW1lcyIsImlzUGFyZW50IiwiY2hpbGRyZW4iLCJtYXAiLCJsZW5ndGgiLCJ0eXBlIiwicGNJRFNldCIsInNpdGVMb2NTZXQiLCJwY0lEcyIsInNpdGVMb2NhdGlvbnMiLCJzcmNOYW1lIiwidGd0TmFtZSIsImxpbmUiLCJwdXNoIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvanNvbi10by1zaWYtY29udmVydGVyLWZhY3RvcnkuanM/NzQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gIHZhciBlbGVtZW50VXRpbGl0aWVzLCBjeTtcblxuICBmdW5jdGlvbiBqc29uVG9TaWYocGFyYW0pIHtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ZhbGlkRW5kKG5vZGUpIHtcbiAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRk5vZGUoIG5vZGUgKSB8fCBub2RlLmRhdGEoJ2NsYXNzJykgPT0gJ3RvcG9sb2d5IGdyb3VwJztcbiAgfVxuXG4gIGpzb25Ub1NpZi5jb252ZXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpLmZpbHRlciggZnVuY3Rpb24oIGVkZ2UgKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRkVkZ2UoIGVkZ2UgKVxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnNvdXJjZSgpIClcbiAgICAgICAgJiYgaXNWYWxpZEVuZCggZWRnZS50YXJnZXQoKSApO1xuICAgIH0gKTtcblxuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCkuZmlsdGVyKCBmdW5jdGlvbiggbm9kZSApIHtcbiAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGTm9kZSggbm9kZSApO1xuICAgIH0gKTtcblxuICAgIG5vZGVzID0gbm9kZXMubm90KCBlZGdlcy5jb25uZWN0ZWROb2RlcygpICk7XG5cbiAgICB2YXIgc2V0VG9TdHIgPSBmdW5jdGlvbihzZXQpIHtcbiAgICAgIGlmICghc2V0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNldCkuam9pbignOycpO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TGFiZWwgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5kYXRhKCdsYWJlbCcpO1xuICAgIH07XG5cbiAgICB2YXIgaXNWYWxpZExhYmVsID0gZnVuY3Rpb24obGFiZWwpe1xuICAgICAgcmV0dXJuICEhbGFiZWw7XG4gICAgfVxuXG4gICAgZWRnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGVkZ2UgKSB7XG4gICAgICB2YXIgc3JjTmFtZXMsIHRndE5hbWVzO1xuXG4gICAgICB2YXIgZ2V0TmFtZXMgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBuYW1lcztcblxuICAgICAgICBpZiAobm9kZS5pc1BhcmVudCgpKSB7XG4gICAgICAgICAgbmFtZXMgPSAgbm9kZS5jaGlsZHJlbigpLm1hcCggZ2V0TGFiZWwgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5hbWVzID0gWyBnZXRMYWJlbChub2RlKSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5hbWVzICYmIG5hbWVzLmZpbHRlciggaXNWYWxpZExhYmVsICk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgc3JjTmFtZXMgPSBnZXROYW1lcyhlZGdlLnNvdXJjZSgpKTtcbiAgICAgIHZhciB0Z3ROYW1lcyA9IGdldE5hbWVzKGVkZ2UudGFyZ2V0KCkpO1xuXG4gICAgICBpZiAoICFzcmNOYW1lcyB8fCAhdGd0TmFtZXMgfHwgc3JjTmFtZXMubGVuZ3RoID09IDAgfHwgdGd0TmFtZXMubGVuZ3RoID09IDAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGUgPSBlZGdlLmRhdGEoJ2NsYXNzJyk7XG4gICAgICB2YXIgcGNJRFNldCA9IGVkZ2UuZGF0YSgncGNJRFNldCcpO1xuICAgICAgdmFyIHNpdGVMb2NTZXQgPSBlZGdlLmRhdGEoJ3NpdGVMb2NTZXQnKTtcbiAgICAgIHZhciBwY0lEcyA9IHNldFRvU3RyKCBwY0lEU2V0ICk7XG4gICAgICB2YXIgc2l0ZUxvY2F0aW9ucyA9IHNldFRvU3RyKCBzaXRlTG9jU2V0ICk7XG5cbiAgICAgIHNyY05hbWVzLmZvckVhY2goIHNyY05hbWUgPT4ge1xuICAgICAgICB0Z3ROYW1lcy5mb3JFYWNoKCB0Z3ROYW1lID0+IHtcbiAgICAgICAgICB2YXIgbGluZSA9IFsgc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSwgcGNJRHMsIHNpdGVMb2NhdGlvbnMgXS5qb2luKCAnXFx0JyApO1xuICAgICAgICAgIGxpbmVzLnB1c2goIGxpbmUgKTtcbiAgICAgICAgfSApO1xuICAgICAgfSApO1xuICAgIH0gKTtcblxuICAgIG5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgdmFyIGxhYmVsID0gZ2V0TGFiZWwoIG5vZGUgKTtcblxuICAgICAgaWYgKCBsYWJlbCApIHtcbiAgICAgICAgbGluZXMucHVzaCggbGFiZWwgKTtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgICB2YXIgdGV4dCA9IGxpbmVzLmpvaW4oICdcXG4nICk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGpzb25Ub1NpZjtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztFQUUxQixJQUFJQyxnQkFBSixFQUFzQkMsRUFBdEI7O0VBRUEsU0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7SUFDeEJILGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtJQUNBQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtFQUNEOztFQUVELFNBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0lBQ3hCLE9BQU9QLGdCQUFnQixDQUFDUSxTQUFqQixDQUE0QkQsSUFBNUIsS0FBc0NBLElBQUksQ0FBQ0UsSUFBTCxDQUFVLE9BQVYsS0FBc0IsZ0JBQW5FO0VBQ0Q7O0VBRURQLFNBQVMsQ0FBQ1EsT0FBVixHQUFvQixZQUFXO0lBQzdCLElBQUlDLEtBQUssR0FBRyxFQUFaO0lBRUEsSUFBSUMsS0FBSyxHQUFHWCxFQUFFLENBQUNXLEtBQUgsR0FBV0MsTUFBWCxDQUFtQixVQUFVQyxJQUFWLEVBQWlCO01BQzlDLE9BQU9kLGdCQUFnQixDQUFDZSxTQUFqQixDQUE0QkQsSUFBNUIsS0FDRlIsVUFBVSxDQUFFUSxJQUFJLENBQUNFLE1BQUwsRUFBRixDQURSLElBRUZWLFVBQVUsQ0FBRVEsSUFBSSxDQUFDRyxNQUFMLEVBQUYsQ0FG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\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sif-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Listen document for keyboard inputs and exports the utilities that it makes use of\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  function keyboardInputUtilities(param) {\n    // Listen to events on network container\n    $(document).on('keydown', '.integer-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isIntegerFieldInput(value, e);\n    });\n    $(document).on('keydown', '.float-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isFloatFieldInput(value, e);\n    });\n    $(document).on('change', '.integer-input,.float-input', function (e) {\n      var min = $(this).attr('min');\n      var max = $(this).attr('max');\n      var value = parseFloat($(this).val());\n\n      if (min != null) {\n        min = parseFloat(min);\n      }\n\n      if (max != null) {\n        max = parseFloat(max);\n      }\n\n      if (min != null && value < min) {\n        value = min;\n      } else if (max != null && value > max) {\n        value = max;\n      }\n\n      if (isNaN(value)) {\n        if (min != null) {\n          value = min;\n        } else if (max != null) {\n          value = max;\n        } else {\n          value = 0;\n        }\n      }\n\n      $(this).val(\"\" + value);\n    });\n  }\n\n  keyboardInputUtilities.isNumberKey = function (e) {\n    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;\n  };\n\n  keyboardInputUtilities.isDotKey = function (e) {\n    return e.keyCode === 190;\n  };\n\n  keyboardInputUtilities.isMinusSignKey = function (e) {\n    return e.keyCode === 109 || e.keyCode === 189;\n  };\n\n  keyboardInputUtilities.isLeftKey = function (e) {\n    return e.keyCode === 37;\n  };\n\n  keyboardInputUtilities.isRightKey = function (e) {\n    return e.keyCode === 39;\n  };\n\n  keyboardInputUtilities.isBackspaceKey = function (e) {\n    return e.keyCode === 8;\n  };\n\n  keyboardInputUtilities.isTabKey = function (e) {\n    return e.keyCode === 9;\n  };\n\n  keyboardInputUtilities.isEnterKey = function (e) {\n    return e.keyCode === 13;\n  };\n\n  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {\n    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);\n  };\n\n  keyboardInputUtilities.isFloatFieldInput = function (value, e) {\n    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);\n  };\n\n  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {\n    return e.ctrlKey || e.metaKey;\n  };\n\n  return keyboardInputUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/keyboard-input-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\nmodule.exports = function () {\n  var cy, mainUtilities;\n\n  function layoutLoader(param) {\n    cy = param.sbgnCyInstance.getCy();\n    mainUtilities = param.mainUtilities;\n  }\n\n  layoutLoader.load = function (layoutText, byName) {\n    var lines = tdParser.getLinesArray(layoutText);\n    var posMap = {};\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n      var nodeId;\n\n      if (byName) {\n        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);\n\n        if (matchingNodes.length === 0) {\n          return;\n        } // ideally there is only one matching node\n        // use the first one in any case\n\n\n        nodeId = matchingNodes.id();\n      } else {\n        nodeId = tabs[0];\n      }\n\n      var posX = parseFloat(tabs[1]);\n      var posY = parseFloat(tabs[2]);\n      posMap[nodeId] = {\n        x: posX,\n        y: posY\n      };\n    });\n    var options = {\n      name: 'preset',\n      positions: posMap,\n      fit: false\n    };\n    mainUtilities.performLayout(options);\n  };\n\n  layoutLoader.getNodesByName = function (name) {\n    return cy.nodes().filter('[label=\"' + name + '\"]');\n  };\n\n  return layoutLoader;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC1sb2FkZXItZmFjdG9yeS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsdUVBQUQsQ0FBdEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLElBQUlDLEVBQUosRUFBUUMsYUFBUjs7RUFFQSxTQUFTQyxZQUFULENBQXVCQyxLQUF2QixFQUErQjtJQUM3QkgsRUFBRSxHQUFHRyxLQUFLLENBQUNDLGNBQU4sQ0FBcUJDLEtBQXJCLEVBQUw7SUFDQUosYUFBYSxHQUFHRSxLQUFLLENBQUNGLGFBQXRCO0VBQ0Q7O0VBRURDLFlBQVksQ0FBQ0ksSUFBYixHQUFvQixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUErQjtJQUNqRCxJQUFJQyxLQUFLLEdBQUdiLFFBQVEsQ0FBQ2MsYUFBVCxDQUF3QkgsVUFBeEIsQ0FBWjtJQUNBLElBQUlJLE1BQU0sR0FBRyxFQUFiO0lBRUFGLEtBQUssQ0FBQ0csT0FBTixDQUFlLFVBQVVDLElBQVYsRUFBaUI7TUFDOUIsSUFBSUMsSUFBSSxHQUFHbEIsUUFBUSxDQUFDbUIsWUFBVCxDQUF1QkYsSUFBdkIsQ0FBWDtNQUVBLElBQUlHLE1BQUo7O01BRUEsSUFBS1IsTUFBTCxFQUFjO1FBQ1osSUFBSVMsYUFBYSxHQUFHZixZQUFZLENBQUNnQixjQUFiLENBQTZCSixJQUFJLENBQUUsQ0FBRixDQUFqQyxDQUFwQjs7UUFDQSxJQUFLRyxhQUFhLENBQUNFLE1BQWQsS0FBeUIsQ0FBOUIsRUFBa0M7VUFDaEM7UUFDRCxDQUpXLENBTVo7UUFDQTs7O1FBQ0FILE1BQU0sR0FBR0MsYUFBYSxDQUFDRyxFQUFkLEVBQVQ7TUFDRCxDQVRELE1BVUs7UUFDSEosTUFBTSxHQUFHRixJQUFJLENBQUUsQ0FBRixDQUFiO01BQ0Q7O01BRUQsSUFBSU8sSUFBSSxHQUFHQyxVQUFVLENBQUVSLElBQUksQ0FBRSxDQUFGLENBQU4sQ0FBckI7TUFDQSxJQUFJUyxJQUFJLEdBQUdELFVBQVUsQ0FBRVIsSUFBSSxDQUFFLENBQUYsQ0FBTixDQUFyQjtNQUVBSCxNQUFNLENBQUVLLE1BQUYsQ0FBTixHQUFtQjtRQUFFUSxDQUFDLEVBQUVILElBQUw7UUFBV0ksQ0FBQyxFQUFFRjtNQUFkLENBQW5CO0lBQ0QsQ0F2QkQ7SUF5QkEsSUFBSUcsT0FBTyxHQUFHO01BQ1pDLElBQUksRUFBRSxRQURNO01BRVpDLFNBQVMsRUFBRWpCLE1BRkM7TUFHWmtCLEdBQUcsRUFBRTtJQUhPLENBQWQ7SUFNQTVCLGFBQWEsQ0FBQzZCLGFBQWQsQ0FBNkJKLE9BQTdCO0VBQ0QsQ0FwQ0Q7O0VBc0NBeEIsWUFBWSxDQUFDZ0IsY0FBYixHQUE4QixVQUFVUyxJQUFWLEVBQWlCO0lBQzdDLE9BQU8zQixFQUFFLENBQUMrQixLQUFILEdBQVdDLE1BQVgsQ0FBbUIsYUFBYUwsSUFBYixHQUFvQixJQUF2QyxDQUFQO0VBQ0QsQ0FGRDs7RUFJQSxPQUFPekIsWUFBUDtBQUNELENBbkREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvbGF5b3V0LWxvYWRlci1mYWN0b3J5LmpzP2YzMDIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRkUGFyc2VyID0gcmVxdWlyZSgnLi90YWItZGVsaW1ldGVkLXBhcnNlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3ksIG1haW5VdGlsaXRpZXM7XG5cbiAgZnVuY3Rpb24gbGF5b3V0TG9hZGVyKCBwYXJhbSApIHtcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gICAgbWFpblV0aWxpdGllcyA9IHBhcmFtLm1haW5VdGlsaXRpZXM7XG4gIH1cblxuICBsYXlvdXRMb2FkZXIubG9hZCA9IGZ1bmN0aW9uKCBsYXlvdXRUZXh0LCBieU5hbWUgKSB7XG4gICAgdmFyIGxpbmVzID0gdGRQYXJzZXIuZ2V0TGluZXNBcnJheSggbGF5b3V0VGV4dCApO1xuICAgIHZhciBwb3NNYXAgPSB7fTtcblxuICAgIGxpbmVzLmZvckVhY2goIGZ1bmN0aW9uKCBsaW5lICkge1xuICAgICAgdmFyIHRhYnMgPSB0ZFBhcnNlci5nZXRUYWJzQXJyYXkoIGxpbmUgKTtcblxuICAgICAgdmFyIG5vZGVJZDtcblxuICAgICAgaWYgKCBieU5hbWUgKSB7XG4gICAgICAgIHZhciBtYXRjaGluZ05vZGVzID0gbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lKCB0YWJzWyAwIF0gKTtcbiAgICAgICAgaWYgKCBtYXRjaGluZ05vZGVzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZGVhbGx5IHRoZXJlIGlzIG9ubHkgb25lIG1hdGNoaW5nIG5vZGVcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBvbmUgaW4gYW55IGNhc2VcbiAgICAgICAgbm9kZUlkID0gbWF0Y2hpbmdOb2Rlcy5pZCgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vZGVJZCA9IHRhYnNbIDAgXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc1ggPSBwYXJzZUZsb2F0KCB0YWJzWyAxIF0gKTtcbiAgICAgIHZhciBwb3NZID0gcGFyc2VGbG9hdCggdGFic1sgMiBdICk7XG5cbiAgICAgIHBvc01hcFsgbm9kZUlkIF0gPSB7IHg6IHBvc1gsIHk6IHBvc1kgfTtcbiAgICB9ICk7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIG5hbWU6ICdwcmVzZXQnLFxuICAgICAgcG9zaXRpb25zOiBwb3NNYXAsXG4gICAgICBmaXQ6IGZhbHNlXG4gICAgfTtcblxuICAgIG1haW5VdGlsaXRpZXMucGVyZm9ybUxheW91dCggb3B0aW9ucyApO1xuICB9O1xuXG4gIGxheW91dExvYWRlci5nZXROb2Rlc0J5TmFtZSA9IGZ1bmN0aW9uKCBuYW1lICkge1xuICAgIHJldHVybiBjeS5ub2RlcygpLmZpbHRlciggJ1tsYWJlbD1cIicgKyBuYW1lICsgJ1wiXScgKTtcbiAgfTtcblxuICByZXR1cm4gbGF5b3V0TG9hZGVyO1xufTtcbiJdLCJuYW1lcyI6WyJ0ZFBhcnNlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJtYWluVXRpbGl0aWVzIiwibGF5b3V0TG9hZGVyIiwicGFyYW0iLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwibG9hZCIsImxheW91dFRleHQiLCJieU5hbWUiLCJsaW5lcyIsImdldExpbmVzQXJyYXkiLCJwb3NNYXAiLCJmb3JFYWNoIiwibGluZSIsInRhYnMiLCJnZXRUYWJzQXJyYXkiLCJub2RlSWQiLCJtYXRjaGluZ05vZGVzIiwiZ2V0Tm9kZXNCeU5hbWUiLCJsZW5ndGgiLCJpZCIsInBvc1giLCJwYXJzZUZsb2F0IiwicG9zWSIsIngiLCJ5Iiwib3B0aW9ucyIsIm5hbWUiLCJwb3NpdGlvbnMiLCJmaXQiLCJwZXJmb3JtTGF5b3V0Iiwibm9kZXMiLCJmaWx0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/layout-loader-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n\n  function layoutToText(param) {\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  layoutToText.convert = function (byName) {\n    var nodes = cy.nodes();\n    var lines = [];\n    nodes.map(function (node) {\n      var idOrName = byName ? node.data('label') : node.id();\n      var posX = node.position('x');\n      var posY = node.position('y');\n      var line = [idOrName, posX, posY].join('\\t');\n      lines.push(line);\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n\n  return layoutToText;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC10by10ZXh0LWZhY3RvcnkuanMuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJsYXlvdXRUb1RleHQiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwiYnlOYW1lIiwibm9kZXMiLCJsaW5lcyIsIm1hcCIsIm5vZGUiLCJpZE9yTmFtZSIsImRhdGEiLCJpZCIsInBvc1giLCJwb3NpdGlvbiIsInBvc1kiLCJsaW5lIiwiam9pbiIsInB1c2giLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzPzA0ZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN5O1xuXG4gIGZ1bmN0aW9uIGxheW91dFRvVGV4dCggcGFyYW0gKSB7XG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICB9XG5cbiAgbGF5b3V0VG9UZXh0LmNvbnZlcnQgPSBmdW5jdGlvbiggYnlOYW1lICkge1xuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICBub2Rlcy5tYXAoIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgdmFyIGlkT3JOYW1lID0gYnlOYW1lID8gbm9kZS5kYXRhKCdsYWJlbCcpIDogbm9kZS5pZCgpO1xuICAgICAgdmFyIHBvc1ggPSBub2RlLnBvc2l0aW9uKCd4Jyk7XG4gICAgICB2YXIgcG9zWSA9IG5vZGUucG9zaXRpb24oJ3knKTtcblxuICAgICAgdmFyIGxpbmUgPSBbIGlkT3JOYW1lLCBwb3NYLCBwb3NZIF0uam9pbiggJ1xcdCcgKTtcbiAgICAgIGxpbmVzLnB1c2goIGxpbmUgKTtcbiAgICB9ICk7XG5cbiAgICB2YXIgdGV4dCA9IGxpbmVzLmpvaW4oICdcXG4nICk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxheW91dFRvVGV4dDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztFQUMxQixJQUFJQyxFQUFKOztFQUVBLFNBQVNDLFlBQVQsQ0FBdUJDLEtBQXZCLEVBQStCO0lBQzdCRixFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtFQUNEOztFQUVESCxZQUFZLENBQUNJLE9BQWIsR0FBdUIsVUFBVUMsTUFBVixFQUFtQjtJQUN4QyxJQUFJQyxLQUFLLEdBQUdQLEVBQUUsQ0FBQ08sS0FBSCxFQUFaO0lBQ0EsSUFBSUMsS0FBSyxHQUFHLEVBQVo7SUFFQUQsS0FBSyxDQUFDRSxHQUFOLENBQVcsVUFBVUMsSUFBVixFQUFpQjtNQUMxQixJQUFJQyxRQUFRLEdBQUdMLE1BQU0sR0FBR0ksSUFBSSxDQUFDRSxJQUFMLENBQVUsT0FBVixDQUFILEdBQXdCRixJQUFJLENBQUNHLEVBQUwsRUFBN0M7TUFDQSxJQUFJQyxJQUFJLEdBQUdKLElBQUksQ0FBQ0ssUUFBTCxDQUFjLEdBQWQsQ0FBWDtNQUNBLElBQUlDLElBQUksR0FBR04sSUFBSSxDQUFDSyxRQUFMLENBQWMsR0FBZCxDQUFYO01BRUEsSUFBSUUsSUFBSSxHQUFHLENBQUVOLFFBQUYsRUFBWUcsSUFBWixFQUFrQkUsSUFBbEIsRUFBeUJFLElBQXpCLENBQStCLElBQS9CLENBQVg7TUFDQVYsS0FBSyxDQUFDVyxJQUFOLENBQVlGLElBQVo7SUFDRCxDQVBEO0lBU0EsSUFBSUcsSUFBSSxHQUFHWixLQUFLLENBQUNVLElBQU4sQ0FBWSxJQUFaLENBQVg7SUFDQSxPQUFPRSxJQUFQO0VBQ0QsQ0FmRDs7RUFpQkEsT0FBT25CLFlBQVA7QUFDRCxDQXpCRCJ9\n//# sourceURL=webpack-internal:///./src/utilities/layout-to-text-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\n */\nvar libUtilities = function libUtilities() {};\n\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\n\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\n\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9saWItdXRpbGl0aWVzLmpzP2JhYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogXG4gKiBVdGlsaXR5IGZpbGUgdG8gZ2V0IGFuZCBzZXQgdGhlIGxpYnJhcmllcyB0byB3aGljaCBzYmdudml6IGlzIGRlcGVuZGVudCBmcm9tIGFueSBmaWxlLlxuICovXG5cbnZhciBsaWJVdGlsaXRpZXMgPSBmdW5jdGlvbigpe1xufTtcblxubGliVXRpbGl0aWVzLnNldExpYnMgPSBmdW5jdGlvbihsaWJzKSB7XG4gIHRoaXMubGlicyA9IGxpYnM7XG59O1xuXG5saWJVdGlsaXRpZXMuZ2V0TGlicyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5saWJzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaWJVdGlsaXRpZXM7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVSxDQUM1QixDQUREOztBQUdBQSxZQUFZLENBQUNDLE9BQWIsR0FBdUIsVUFBU0MsSUFBVCxFQUFlO0VBQ3BDLEtBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNELENBRkQ7O0FBSUFGLFlBQVksQ0FBQ0csT0FBYixHQUF1QixZQUFXO0VBQ2hDLE9BQU8sS0FBS0QsSUFBWjtBQUNELENBRkQ7O0FBSUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsWUFBakIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*\n * These are the main utilities to be directly utilized by the user interactions.\n * Idealy, this file is just required by index.js\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var elementUtilities, jsonToSbgnml, sbgnmlToJson, sbmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;\n  var cy, options;\n\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    optionUtilities = param.optionUtilities;\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n    layoutLoader = param.layoutLoader;\n    layoutToText = param.layoutToText;\n    options = optionUtilities.getOptions();\n  }\n\n  mainUtilities.beforePerformLayout = function () {\n    var parents = cy.nodes(':parent');\n    var edges = cy.edges();\n    cy.startBatch(); // graphUtilities.disablePorts();\n    // TODO do this by using extension API\n    // removes all bendpoints for all edges in cytoscape instance\n\n    for (var i = 0; i < edges.length; i++) {\n      var edge = edges[i];\n      edge.removeClass('edgebendediting-hasbendpoints');\n      edge.removeClass('edgecontrolediting-hascontrolpoints');\n      edge.removeClass('edgebendediting-hasmultiplebendpoints');\n      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');\n      edge.data('cyedgebendeditingDistances', []);\n      edge.data('cyedgebendeditingWeights', []);\n      edge.data('cyedgecontroleditingDistances', []);\n      edge.data('cyedgecontroleditingWeights', []);\n    }\n\n    parents.removeData('minWidth');\n    parents.removeData('minHeight');\n    parents.removeData('minWidthBiasLeft');\n    parents.removeData('minWidthBiasRight');\n    parents.removeData('minHeightBiasTop');\n    parents.removeData('minHeightBiasBottom');\n    cy.endBatch();\n    if (parents.length > 0) cy.style().update();\n  }; // Expand given nodes. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodesToExpand = expandCollapse.expandableNodes(nodes);\n\n    if (nodesToExpand.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expand\", {\n        nodes: nodesToExpand\n      });\n    } else {\n      expandCollapse.expand(nodes);\n    }\n  }; // Collapse given nodes. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapse\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapse(nodes);\n    }\n  }; // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var complexes = cy.nodes(\"[class^='complex']\");\n\n    if (expandCollapse.collapsibleNodes(complexes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: complexes\n      });\n    } else {\n      expandCollapse.collapseRecursively(complexes);\n    }\n  }; // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes().filter(\"[class^='complex']\"));\n\n    if (nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  }; // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = cy.nodes(':visible');\n\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapseRecursively(nodes);\n    }\n  }; // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));\n\n    if (nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  }; // Increase border width to show nodes with hidden neighbors\n\n\n  mainUtilities.thickenBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth + 2);\n    });\n    eles.data(\"thickBorder\", true);\n    return eles;\n  }; // Decrease border width when hidden neighbors of the nodes become visible\n\n\n  mainUtilities.thinBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth - 2);\n    });\n    eles.removeData(\"thickBorder\");\n    return eles;\n  };\n\n  mainUtilities.hideElesSimple = function (eles) {\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (eles.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(eles);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: eles\n      });\n      nodesWithHiddenNeighbor = eles.neighborhood(\":visible\").nodes().difference(eles).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.\n  // Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.hideNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n\n    if (nodesToHide.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact.\n  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.elements();\n    var nodesToShow = elementUtilities.extendNodeList(nodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n\n    if (nodesToHide.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide);\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showEles = function (eles) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var hiddenEles = eles.filter(':hidden');\n\n    if (hiddenEles.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"show\",\n        param: hiddenEles\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showAll = function () {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (cy.elements().length === cy.elements(':visible').length) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"show\",\n        param: cy.elements()\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(cy.elements());\n    }\n  }; // Removes the given elements in a simple way. Considers 'undoable' option.\n\n\n  mainUtilities.deleteElesSimple = function (eles) {\n    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteElesSimple\", {\n        eles: eles\n      });\n    } else {\n      eles.remove();\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.\n  // Considers 'undoable' option.\n\n\n  mainUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes();\n\n    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteNodesSmart\", {\n        firstTime: true,\n        eles: nodes\n      });\n    } else {\n      elementUtilities.deleteNodesSmart(nodes);\n    }\n  };\n\n  function isNeed2Highligth(eles2highligth) {\n    if (eles2highligth.length === 0) {\n      return false;\n    }\n\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClass = viewUtilities.getAllHighlightClasses()[0];\n    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');\n\n    if (highlightedEles.contains(eles2highligth)) {\n      return false;\n    }\n\n    return true;\n  } // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightSelected = function (_eles) {\n    var elesToHighlight = _eles;\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightNeighbours = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Finds the elements whose label includes the given label and highlights processes of those elements.\n  // Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.searchByLabel = function (label) {\n    if (label.length == 0) {\n      return;\n    }\n\n    var nodesToHighlight = cy.nodes(\":visible\").filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      if (ele.data(\"label\") && ele.data(\"label\").toLowerCase().indexOf(label) >= 0) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (nodesToHighlight.length == 0) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get'); // Use this line for smart search\n    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: nodesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(nodesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightProcesses = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var elesToHighlight = elementUtilities.extendNodeList(nodes);\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.removeHighlights = function () {\n    if (elementUtilities.noneIsNotHighlighted()) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"removeHighlights\");\n    } else {\n      viewUtilities.removeHighlights();\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.loadLayoutData = function (layoutText, byName) {\n    layoutLoader.load(layoutText, byName);\n  };\n\n  mainUtilities.getLayoutText = function (byName) {\n    layoutToText.convert(byName);\n  }; // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter\n  // to a truthy value you can force an undable layout operation independant of 'undoable' option.\n\n\n  mainUtilities.performLayout = function (layoutOptions, notUndoable) {\n    if (!options.undoable || notUndoable) {\n      // 'notUndoable' flag can be used to have composite actions in undo/redo stack\n      // Things to do before performing layout\n      mainUtilities.beforePerformLayout();\n      var layout = cy.elements().filter(':visible').layout(layoutOptions); // Check this for cytoscape.js backward compatibility\n\n      if (layout && layout.run) {\n        layout.run();\n      }\n    } else {\n      cy.undoRedo()[\"do\"](\"layout\", {\n        options: layoutOptions,\n        eles: cy.elements().filter(':visible')\n      });\n    }\n  }; // Creates an sbgnml file content from the exising graph and returns it.\n\n\n  mainUtilities.createSbgnml = function () {\n    return jsonToSbgnml.createSbgnml();\n  };\n\n  mainUtilities.createNwt = function () {\n    return jsonToNwt.createSbgnml();\n  }; // Converts given sbgnml data to a json object in a special format\n  // (http://js.cytoscape.org/#notation/elements-json) and returns it.\n\n\n  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {\n    return sbgnmlToJson.convert(data, urlParams);\n  };\n\n  mainUtilities.convertSbmlToJson = function (data, urlParams) {\n    var converted2 = sbmlToJson.convert(data, urlParams);\n    console.log(\"converted2\", converted2);\n    return converted2;\n  };\n\n  mainUtilities.convertNwtToJson = function (data) {\n    return nwtToJson.convert(data);\n  }; // Create the qtip contents of the given node and returns it.\n\n\n  mainUtilities.getQtipContent = function (node) {\n    return elementUtilities.getQtipContent(node);\n  }; // Change option\n\n\n  mainUtilities.setShowComplexName = function (showComplexName) {\n    options.showComplexName = showComplexName; // make change active by triggering data which will trigger style update\n\n    cy.nodes('[class^=\"complex\"]').forEach(function (ele) {\n      ele.trigger(\"data\");\n    });\n  };\n  /*\n   * Sets the ordering of the given nodes.\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n   * used to set the distance between the node center and the ports. The default port distance is 60.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      var param = {\n        nodes: nodes,\n        ordering: ordering,\n        portDistance: portDistance\n      };\n      cy.undoRedo()[\"do\"](\"setPortsOrdering\", param);\n    }\n\n    cy.style().update();\n  };\n  /**\n   * Get map properties from SBGNML file\n   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event\n   * return: map properties as object\n   */\n\n\n  mainUtilities.getMapProperties = function () {\n    if (elementUtilities.fileFormat !== undefined) {\n      if (elementUtilities.fileFormat == 'sbgnml') this.showNodesSmart;else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sbml') return sbmlToJson.mapPropertiesToObj();else {\n        console.log(\"File format mismatched!\");\n        return;\n      }\n    } else {\n      console.log(\"File format is not defined!\");\n      return;\n    }\n  };\n\n  mainUtilities.doValidation = function (file) {\n    return sbgnmlToJson.doValidation(file);\n  };\n\n  mainUtilities.doValidation = function (file) {\n    return sbmlToJson.doValidation(file);\n  };\n\n  mainUtilities.setCompoundPadding = function (newPaddingValue) {\n    options.compoundPadding = newPaddingValue;\n    optionUtilities.extendOptions(options);\n  };\n\n  mainUtilities.getCompoundPadding = function () {\n    return options.compoundPadding;\n  };\n\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL21haW4tdXRpbGl0aWVzLWZhY3RvcnkuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLHlEQUFELENBQTFCOztBQUNBLElBQUlDLElBQUksR0FBR0YsWUFBWSxDQUFDRyxPQUFiLEVBQVg7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLENBQUMsR0FBR0gsSUFBSSxDQUFDRSxNQUF0Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVk7RUFDM0IsSUFBSUMsZ0JBQUosRUFBc0JDLFlBQXRCLEVBQW9DQyxZQUFwQyxFQUFrREMsVUFBbEQsRUFBOERDLFFBQTlELEVBQXdFQyxTQUF4RSxFQUNJQyxTQURKLEVBQ2VDLGVBRGYsRUFDZ0NDLGNBRGhDLEVBQ2dEQyxZQURoRCxFQUM4REMsU0FEOUQ7RUFFQSxJQUFJQyxFQUFKLEVBQVFDLE9BQVI7O0VBRUEsU0FBU0MsYUFBVCxDQUF3QkMsS0FBeEIsRUFBK0I7SUFDN0JkLGdCQUFnQixHQUFHYyxLQUFLLENBQUNkLGdCQUF6QjtJQUNBQyxZQUFZLEdBQUdhLEtBQUssQ0FBQ0MscUJBQXJCO0lBQ0FMLFNBQVMsR0FBR0ksS0FBSyxDQUFDRSxrQkFBbEI7SUFDQWQsWUFBWSxHQUFHWSxLQUFLLENBQUNHLHFCQUFyQjtJQUNBZCxVQUFVLEdBQUdXLEtBQUssQ0FBQ0ksbUJBQW5CO0lBQ0FiLFNBQVMsR0FBR1MsS0FBSyxDQUFDSyxrQkFBbEI7SUFDQWYsUUFBUSxHQUFHVSxLQUFLLENBQUNNLGlCQUFqQjtJQUNBZCxTQUFTLEdBQUdRLEtBQUssQ0FBQ08sa0JBQWxCO0lBQ0FkLGVBQWUsR0FBR08sS0FBSyxDQUFDUCxlQUF4QjtJQUNBQyxjQUFjLEdBQUdNLEtBQUssQ0FBQ04sY0FBdkI7SUFDQUcsRUFBRSxHQUFHRyxLQUFLLENBQUNRLGNBQU4sQ0FBcUJDLEtBQXJCLEVBQUw7SUFDQWQsWUFBWSxHQUFHSyxL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dGllcy9tYWluLXV0aWxpdGllcy1mYWN0b3J5LmpzPzA4ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoZXNlIGFyZSB0aGUgbWFpbiB1dGlsaXRpZXMgdG8gYmUgZGlyZWN0bHkgdXRpbGl6ZWQgYnkgdGhlIHVzZXIgaW50ZXJhY3Rpb25zLlxuICogSWRlYWx5LCB0aGlzIGZpbGUgaXMganVzdCByZXF1aXJlZCBieSBpbmRleC5qc1xuICovXG5cbnZhciBsaWJVdGlsaXRpZXMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKTtcbnZhciBsaWJzID0gbGliVXRpbGl0aWVzLmdldExpYnMoKTtcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWxlbWVudFV0aWxpdGllcywganNvblRvU2Jnbm1sLCBzYmdubWxUb0pzb24sIHNibWxUb0pzb24sIHRkVG9Kc29uLCBud3RUb0pzb24sXG4gICAgICBzaWZUb0pzb24sIG9wdGlvblV0aWxpdGllcywgZ3JhcGhVdGlsaXRpZXMsIGxheW91dExvYWRlciwganNvblRvTnd0O1xuICB2YXIgY3ksIG9wdGlvbnM7XG5cbiAgZnVuY3Rpb24gbWFpblV0aWxpdGllcyAocGFyYW0pIHtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XG4gICAganNvblRvTnd0ID0gcGFyYW0uanNvblRvTnd0Q29udmVydGVyO1xuICAgIHNiZ25tbFRvSnNvbiA9IHBhcmFtLnNiZ25tbFRvSnNvbkNvbnZlcnRlcjtcbiAgICBzYm1sVG9Kc29uID0gcGFyYW0uc2JtbFRvSnNvbkNvbnZlcnRlcjtcbiAgICBud3RUb0pzb24gPSBwYXJhbS5ud3RUb0pzb25Db252ZXJ0ZXI7XG4gICAgdGRUb0pzb24gPSBwYXJhbS50ZFRvSnNvbkNvbnZlcnRlcjtcbiAgICBzaWZUb0pzb24gPSBwYXJhbS5zaWZUb0pzb25Db252ZXJ0ZXI7XG4gICAgb3B0aW9uVXRpbGl0aWVzID0gcGFyYW0ub3B0aW9uVXRpbGl0aWVzO1xuICAgIGdyYXBoVXRpbGl0aWVzID0gcGFyYW0uZ3JhcGhVdGlsaXRpZXM7XG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgIGxheW91dExvYWRlciA9IHBhcmFtLmxheW91dExvYWRlcjtcbiAgICBsYXlvdXRUb1RleHQgPSBwYXJhbS5sYXlvdXRUb1RleHQ7XG5cbiAgICBvcHRpb25zID0gb3B0aW9uVXRpbGl0aWVzLmdldE9wdGlvbnMoKTtcbiAgfVxuXG4gIG1haW5VdGlsaXRpZXMuYmVmb3JlUGVyZm9ybUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnRzID0gY3kubm9kZXMoJzpwYXJlbnQnKTtcbiAgICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpO1xuXG4gICAgY3kuc3RhcnRCYXRjaCgpO1xuXG4gICAgLy8gZ3JhcGhVdGlsaXRpZXMuZGlzYWJsZVBvcnRzKCk7XG5cbiAgICAvLyBUT0RPIGRvIHRoaXMgYnkgdXNpbmcgZXh0ZW5zaW9uIEFQSVxuICAgIC8vIHJlbW92ZXMgYWxsIGJlbmRwb2ludHMgZm9yIGFsbCBlZGdlcyBpbiBjeXRvc2NhcGUgaW5zdGFuY2VcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspe1xuICAgICAgdmFyIGVkZ2UgPSBlZGdlc1tpXTtcbiAgICAgIGVkZ2UucmVtb3ZlQ2xhc3MoJ2VkZ2ViZW5kZWRpdGluZy1oYXNiZW5kcG9pbnRzJyk7XG4gICAgICBlZGdlLnJlbW92ZUNsYXNzKCdlZGdlY29udHJvbGVkaXRpbmctaGFzY29udHJvbHBvaW50cycpO1xuICAgICAgZWRnZS5yZW1vdmVDbGFzcygnZWRnZWJlbmRlZGl0aW5nLWhhc211bHRpcGxlYmVuZHBvaW50cycpO1xuICAgICAgZWRnZS5yZW1vdmVDbGFzcygnZWRnZWNvbnRyb2xlZGl0aW5nLWhhc211bHRpcGxlY29udHJvbHBvaW50cycpO1xuICAgICAgZWRnZS5kYXRhKCdjeWVkZ2ViZW5kZWRpdGluZ0Rpc3RhbmNlcycsIFtdKTtcbiAgICAgIGVkZ2UuZGF0YSgnY3llZGdlYmVuZGVkaXRpbmdXZWlnaHRzJywgW10pO1xuICAgICAgZWRnZS5kYXRhKCdjeWVkZ2Vjb250cm9sZWRpdGluZ0Rpc3RhbmNlcycsIFtdKTtcdFxuICAgICAgZWRnZS5kYXRhKCdjeWVkZ2Vjb250cm9sZWRpdGluZ1dlaWdodHMnLCBbXSk7XG4gICAgfVxuXG4gICAgcGFyZW50cy5yZW1vdmVEYXRhKCdtaW5XaWR0aCcpO1xuICAgIHBhcmVudHMucmVtb3ZlRGF0YSgnbWluSGVpZ2h0Jyk7XG4gICAgcGFyZW50cy5yZW1vdmVEYXRhKCdtaW5XaWR0aEJpYXNMZWZ0Jyk7XG4gICAgcGFyZW50cy5yZW1vdmVEYXRhKCdtaW5XaWR0aEJpYXNSaWdodCcpO1xuICAgIHBhcmVudHMucmVtb3ZlRGF0YSgnbWluSGVpZ2h0Qmlhc1RvcCcpO1xuICAgIHBhcmVudHMucmVtb3ZlRGF0YSgnbWluSGVpZ2h0Qmlhc0JvdHRvbScpO1xuXG4gICAgY3kuZW5kQmF0Y2goKTtcbiAgICBcbiAgICBpZihwYXJlbnRzLmxlbmd0aCA+IDApXG4gICAgICBjeS5zdHlsZSgpLnVwZGF0ZSgpO1xuICB9O1xuXG4gIC8vIEV4cGFuZCBnaXZlbiBub2Rlcy4gUmVxdWlyZXMgZXhwYW5kQ29sbGFwc2UgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgdW5kb2FibGUgb3B0aW9uLlxuICBtYWluVXRpbGl0aWVzLmV4cGFuZE5vZGVzID0gZnVuY3Rpb24obm9kZXMpIHtcbiAgICBpZiAoIGVsZW1lbnRVdGlsaXRpZXMuaXNHcmFwaFRvcG9sb2d5TG9ja2VkKCkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IGV4cGFuZENvbGxhcHNlIGFwaVxuICAgIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcblxuICAgIHZhciBub2Rlc1RvRXhwYW5kID0gZXhwYW5kQ29sbGFwc2UuZXhwYW5kYWJsZU5vZGVzKG5vZGVzKTtcbiAgICBpZiAobm9kZXNUb0V4cGFuZC5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiZXhwYW5kXCIsIHtcbiAgICAgICAgbm9kZXM6IG5vZGVzVG9FeHBhbmQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBleHBhbmRDb2xsYXBzZS5leHBhbmQobm9kZXMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBDb2xsYXBzZSBnaXZlbiBub2Rlcy4gUmVxdWlyZXMgZXhwYW5kQ29sbGFwc2UgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgdW5kb2FibGUgb3B0aW9uLlxuICBtYWluVXRpbGl0aWVzLmNvbGxhcHNlTm9kZXMgPSBmdW5jdGlvbihub2Rlcykge1xuICAgIGlmICggZWxlbWVudFV0aWxpdGllcy5pc0dyYXBoVG9wb2xvZ3lMb2NrZWQoKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gICAgdmFyIGV4cGFuZENvbGxhcHNlID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpO1xuXG4gICAgaWYgKGV4cGFuZENvbGxhcHNlLmNvbGxhcHNpYmxlTm9kZXMobm9kZXMpLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbyhcImNvbGxhcHNlXCIsIHtcbiAgICAgICAgbm9kZXM6IG5vZGVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBleHBhbmRDb2xsYXBzZS5jb2xsYXBzZShub2Rlcyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIENvbGxhcHNlIGFsbCBjb21wbGV4ZXMgcmVjdXJzaXZlbHkuIFJlcXVpcmVzIGV4cGFuZENvbGxhcHNlIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzIHVuZG9hYmxlIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5jb2xsYXBzZUNvbXBsZXhlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICggZWxlbWVudFV0aWxpdGllcy5pc0dyYXBoVG9wb2xvZ3lMb2NrZWQoKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gICAgdmFyIGV4cGFuZENvbGxhcHNlID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpO1xuXG4gICAgdmFyIGNvbXBsZXhlcyA9IGN5Lm5vZGVzKFwiW2NsYXNzXj0nY29tcGxleCddXCIpO1xuICAgIGlmIChleHBhbmRDb2xsYXBzZS5jb2xsYXBzaWJsZU5vZGVzKGNvbXBsZXhlcykubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbyhcImNvbGxhcHNlUmVjdXJzaXZlbHlcIiwge1xuICAgICAgICBub2RlczogY29tcGxleGVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBleHBhbmRDb2xsYXBzZS5jb2xsYXBzZVJlY3Vyc2l2ZWx5KGNvbXBsZXhlcyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEV4cGFuZCBhbGwgY29tcGxleGVzIHJlY3Vyc2l2ZWx5LiBSZXF1aXJlcyBleHBhbmRDb2xsYXBzZSBleHRlbnNpb24gYW5kIGNvbnNpZGVycyB1bmRvYWJsZSBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMuZXhwYW5kQ29tcGxleGVzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCBlbGVtZW50VXRpbGl0aWVzLmlzR3JhcGhUb3BvbG9neUxvY2tlZCgpICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEdldCBleHBhbmRDb2xsYXBzZSBhcGlcbiAgICB2YXIgZXhwYW5kQ29sbGFwc2UgPSBjeS5leHBhbmRDb2xsYXBzZSgnZ2V0Jyk7XG5cbiAgICB2YXIgbm9kZXMgPSBleHBhbmRDb2xsYXBzZS5leHBhbmRhYmxlTm9kZXMoY3kubm9kZXMoKS5maWx0ZXIoXCJbY2xhc3NePSdjb21wbGV4J11cIikpO1xuICAgIGlmIChub2Rlcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiZXhwYW5kUmVjdXJzaXZlbHlcIiwge1xuICAgICAgICBub2Rlczogbm9kZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGV4cGFuZENvbGxhcHNlLmV4cGFuZFJlY3Vyc2l2ZWx5KG5vZGVzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ29sbGFwc2UgYWxsIG5vZGVzIHJlY3Vyc2l2ZWx5LiBSZXF1aXJlcyBleHBhbmRDb2xsYXBzZSBleHRlbnNpb24gYW5kIGNvbnNpZGVycyB1bmRvYWJsZSBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMuY29sbGFwc2VBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIGVsZW1lbnRVdGlsaXRpZXMuaXNHcmFwaFRvcG9sb2d5TG9ja2VkKCkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IGV4cGFuZENvbGxhcHNlIGFwaVxuICAgIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcblxuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCc6dmlzaWJsZScpO1xuICAgIGlmIChleHBhbmRDb2xsYXBzZS5jb2xsYXBzaWJsZU5vZGVzKG5vZGVzKS5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiY29sbGFwc2VSZWN1cnNpdmVseVwiLCB7XG4gICAgICAgIG5vZGVzOiBub2Rlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZXhwYW5kQ29sbGFwc2UuY29sbGFwc2VSZWN1cnNpdmVseShub2Rlcyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEV4cGFuZCBhbGwgbm9kZXMgcmVjdXJzaXZlbHkuIFJlcXVpcmVzIGV4cGFuZENvbGxhcHNlIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzIHVuZG9hYmxlIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5leHBhbmRBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIGVsZW1lbnRVdGlsaXRpZXMuaXNHcmFwaFRvcG9sb2d5TG9ja2VkKCkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IGV4cGFuZENvbGxhcHNlIGFwaVxuICAgIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcblxuICAgIHZhciBub2RlcyA9IGV4cGFuZENvbGxhcHNlLmV4cGFuZGFibGVOb2RlcyhjeS5ub2RlcygnOnZpc2libGUnKSk7XG4gICAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJleHBhbmRSZWN1cnNpdmVseVwiLCB7XG4gICAgICAgIG5vZGVzOiBub2Rlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZXhwYW5kQ29sbGFwc2UuZXhwYW5kUmVjdXJzaXZlbHkobm9kZXMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBJbmNyZWFzZSBib3JkZXIgd2lkdGggdG8gc2hvdyBub2RlcyB3aXRoIGhpZGRlbiBuZWlnaGJvcnNcbiAgbWFpblV0aWxpdGllcy50aGlja2VuQm9yZGVyID0gZnVuY3Rpb24oZWxlcyl7XG4gICAgZWxlcy5mb3JFYWNoKGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgIHZhciBkZWZhdWx0Qm9yZGVyV2lkdGggPSBOdW1iZXIoZWxlLmRhdGEoXCJib3JkZXItd2lkdGhcIikpO1xuICAgICAgZWxlLmRhdGEoXCJib3JkZXItd2lkdGhcIiwgZGVmYXVsdEJvcmRlcldpZHRoICsgMik7XG4gICAgfSk7XG4gICAgZWxlcy5kYXRhKFwidGhpY2tCb3JkZXJcIiwgdHJ1ZSk7XG4gICAgcmV0dXJuIGVsZXM7XG4gIH1cbiAgLy8gRGVjcmVhc2UgYm9yZGVyIHdpZHRoIHdoZW4gaGlkZGVuIG5laWdoYm9ycyBvZiB0aGUgbm9kZXMgYmVjb21lIHZpc2libGVcbiAgbWFpblV0aWxpdGllcy50aGluQm9yZGVyID0gZnVuY3Rpb24oZWxlcyl7XG4gICAgZWxlcy5mb3JFYWNoKGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgIHZhciBkZWZhdWx0Qm9yZGVyV2lkdGggPSBOdW1iZXIoZWxlLmRhdGEoXCJib3JkZXItd2lkdGhcIikpO1xuICAgICAgZWxlLmRhdGEoXCJib3JkZXItd2lkdGhcIiwgZGVmYXVsdEJvcmRlcldpZHRoIC0gMik7XG4gICAgfSk7XG4gICAgZWxlcy5yZW1vdmVEYXRhKFwidGhpY2tCb3JkZXJcIik7XG4gICAgcmV0dXJuIGVsZXM7XG4gIH1cblxuICBtYWluVXRpbGl0aWVzLmhpZGVFbGVzU2ltcGxlID0gZnVuY3Rpb24oZWxlcykge1xuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG5cbiAgICBpZiAoZWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG5cbiAgICAgIHZhciB1ciA9IGN5LnVuZG9SZWRvKCk7XG4gICAgICB1ci5hY3Rpb24oXCJ0aGlja2VuQm9yZGVyXCIsIG1haW5VdGlsaXRpZXMudGhpY2tlbkJvcmRlciwgbWFpblV0aWxpdGllcy50aGluQm9yZGVyKTtcbiAgICAgIHVyLmFjdGlvbihcInRoaW5Cb3JkZXJcIiwgbWFpblV0aWxpdGllcy50aGluQm9yZGVyLCBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIpO1xuXG4gICAgICAvLyBCYXRjaGluZ1xuICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgIHZhciBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvciA9IGN5LmVkZ2VzKFwiOmhpZGRlblwiKS5jb25uZWN0ZWROb2RlcygpLmludGVyc2VjdGlvbihlbGVzKTtcbiAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJ0aGluQm9yZGVyXCIsIHBhcmFtOiBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvcn0pO1xuICAgICAgYWN0aW9ucy5wdXNoKHtuYW1lOiBcImhpZGVcIiwgcGFyYW06IGVsZXN9KTtcbiAgICAgIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gZWxlcy5uZWlnaGJvcmhvb2QoXCI6dmlzaWJsZVwiKVxuICAgICAgICAgICAgICAubm9kZXMoKS5kaWZmZXJlbmNlKGVsZXMpLmRpZmZlcmVuY2UoY3kubm9kZXMoXCJbdGhpY2tCb3JkZXJdXCIpKTtcbiAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJ0aGlja2VuQm9yZGVyXCIsIHBhcmFtOiBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvcn0pO1xuICAgICAgY3kudW5kb1JlZG8oKS5kbyhcImJhdGNoXCIsIGFjdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvciA9IGN5LmVkZ2VzKFwiOmhpZGRlblwiKS5jb25uZWN0ZWROb2RlcygnOnZpc2libGUnKTtcbiAgICAgIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlcihub2Rlc1dpdGhIaWRkZW5OZWlnaGJvcik7XG4gICAgICB2aWV3VXRpbGl0aWVzLmhpZGUoZWxlcyk7XG4gICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5lZGdlcyhcIjpoaWRkZW5cIikuY29ubmVjdGVkTm9kZXMoJzp2aXNpYmxlJyk7XG4gICAgICBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIobm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV4dGVuZHMgdGhlIGdpdmVuIG5vZGVzIGxpc3QgaW4gYSBzbWFydCB3YXkgdG8gbGVhdmUgdGhlIG1hcCBpbnRhY3QgYW5kIGhpZGVzIHRoZSByZXN1bHRpbmcgbGlzdC5cbiAgLy8gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5oaWRlTm9kZXNTbWFydCA9IGZ1bmN0aW9uKF9ub2Rlcykge1xuICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkIHdlIGNhbiBhc3N1bWUgdGhhdCB2aWV3IHV0aWxpdGllcyBleHRlbnNpb24gaXMgb24gdXNlXG4gICAgdmFyIHZpZXdVdGlsaXRpZXMgPSBjeS52aWV3VXRpbGl0aWVzKCdnZXQnKTtcbiAgICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcblxuICAgIHZhciBhbGxOb2RlcyA9IGN5Lm5vZGVzKFwiOnZpc2libGVcIik7XG4gICAgdmFyIG5vZGVzVG9TaG93ID0gZWxlbWVudFV0aWxpdGllcy5leHRlbmRSZW1haW5pbmdOb2Rlcyhub2RlcywgYWxsTm9kZXMpO1xuICAgIHZhciBub2Rlc1RvSGlkZSA9IGFsbE5vZGVzLm5vdChub2Rlc1RvU2hvdyk7XG5cbiAgICBpZiAobm9kZXNUb0hpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuXG4gICAgICB2YXIgdXIgPSBjeS51bmRvUmVkbygpO1xuICAgICAgdXIuYWN0aW9uKFwidGhpY2tlbkJvcmRlclwiLCBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIsIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlcik7XG4gICAgICB1ci5hY3Rpb24oXCJ0aGluQm9yZGVyXCIsIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlciwgbWFpblV0aWxpdGllcy50aGlja2VuQm9yZGVyKTtcblxuICAgICAgLy8gQmF0Y2hpbmdcbiAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5lZGdlcyhcIjpoaWRkZW5cIikuY29ubmVjdGVkTm9kZXMoKS5pbnRlcnNlY3Rpb24obm9kZXNUb0hpZGUpO1xuICAgICAgYWN0aW9ucy5wdXNoKHtuYW1lOiBcInRoaW5Cb3JkZXJcIiwgcGFyYW06IG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yfSk7XG4gICAgICBhY3Rpb25zLnB1c2goe25hbWU6IFwiaGlkZVwiLCBwYXJhbTogbm9kZXNUb0hpZGV9KTtcbiAgICAgIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gbm9kZXNUb0hpZGUubmVpZ2hib3Job29kKFwiOnZpc2libGVcIilcbiAgICAgICAgICAgICAgLm5vZGVzKCkuZGlmZmVyZW5jZShub2Rlc1RvSGlkZSkuZGlmZmVyZW5jZShjeS5ub2RlcyhcIlt0aGlja0JvcmRlcl1cIikpO1xuICAgICAgYWN0aW9ucy5wdXNoKHtuYW1lOiBcInRoaWNrZW5Cb3JkZXJcIiwgcGFyYW06IG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yfSk7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiYmF0Y2hcIiwgYWN0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gY3kuZWRnZXMoXCI6aGlkZGVuXCIpLmNvbm5lY3RlZE5vZGVzKCc6dmlzaWJsZScpO1xuICAgICAgbWFpblV0aWxpdGllcy50aGluQm9yZGVyKG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yKTtcbiAgICAgIHZpZXdVdGlsaXRpZXMuaGlkZShub2Rlc1RvSGlkZSk7XG4gICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5lZGdlcyhcIjpoaWRkZW5cIikuY29ubmVjdGVkTm9kZXMoJzp2aXNpYmxlJyk7XG4gICAgICBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIobm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFeHRlbmRzIHRoZSBnaXZlbiBub2RlcyBsaXN0IGluIGEgc21hcnQgd2F5IHRvIGxlYXZlIHRoZSBtYXAgaW50YWN0LlxuICAvLyBUaGVuIHVuaGlkZXMgdGhlIHJlc3VsdGluZyBsaXN0IGFuZCBoaWRlcyBvdGhlcnMuIFJlcXVpcmVzIHZpZXdVdGlsaXRpZXMgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMuc2hvd05vZGVzU21hcnQgPSBmdW5jdGlvbihfbm9kZXMpIHtcbiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG4gICAgdmFyIG5vZGVzID0gX25vZGVzLm5vZGVzKCk7IC8vIEVuc3VyZSB0aGF0IG5vZGVzIGxpc3QganVzdCBpbmNsdWRlIG5vZGVzXG5cbiAgICB2YXIgYWxsTm9kZXMgPSBjeS5lbGVtZW50cygpO1xuICAgIHZhciBub2Rlc1RvU2hvdyA9IGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXMpO1xuICAgIHZhciBub2Rlc1RvSGlkZSA9IGFsbE5vZGVzLm5vdChub2Rlc1RvU2hvdyk7XG5cbiAgICBpZiAobm9kZXNUb0hpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgdmFyIHVyID0gY3kudW5kb1JlZG8oKTtcbiAgICAgIHVyLmFjdGlvbihcInRoaWNrZW5Cb3JkZXJcIiwgbWFpblV0aWxpdGllcy50aGlja2VuQm9yZGVyLCBtYWluVXRpbGl0aWVzLnRoaW5Cb3JkZXIpO1xuICAgICAgdXIuYWN0aW9uKFwidGhpbkJvcmRlclwiLCBtYWluVXRpbGl0aWVzLnRoaW5Cb3JkZXIsIG1haW5VdGlsaXRpZXMudGhpY2tlbkJvcmRlcik7XG5cbiAgICAgIC8vIEJhdGNoaW5nXG4gICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgdmFyIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gY3kuZWRnZXMoXCI6aGlkZGVuXCIpLmNvbm5lY3RlZE5vZGVzKCc6dmlzaWJsZScpO1xuICAgICAgYWN0aW9ucy5wdXNoKHtuYW1lOiBcInRoaW5Cb3JkZXJcIiwgcGFyYW06IG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yfSk7XG4gICAgICBhY3Rpb25zLnB1c2goe25hbWU6IFwiaGlkZVwiLCBwYXJhbTogbm9kZXNUb0hpZGV9KTtcbiAgICAgIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gbm9kZXNUb0hpZGUubmVpZ2hib3Job29kKFwiOnZpc2libGVcIilcbiAgICAgICAgICAgICAgLm5vZGVzKCkuZGlmZmVyZW5jZShub2Rlc1RvSGlkZSk7XG4gICAgICBhY3Rpb25zLnB1c2goe25hbWU6IFwidGhpY2tlbkJvcmRlclwiLCBwYXJhbTogbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3J9KTtcbiAgICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJiYXRjaFwiLCBhY3Rpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5lZGdlcyhcIjpoaWRkZW5cIikuY29ubmVjdGVkTm9kZXMoJzp2aXNpYmxlJyk7XG4gICAgICBtYWluVXRpbGl0aWVzLnRoaW5Cb3JkZXIobm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IpO1xuICAgICAgdmlld1V0aWxpdGllcy5oaWRlKG5vZGVzVG9IaWRlKTtcbiAgICAgIHZhciBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvciA9IGN5LmVkZ2VzKFwiOmhpZGRlblwiKS5jb25uZWN0ZWROb2RlcygnOnZpc2libGUnKTtcbiAgICAgIG1haW5VdGlsaXRpZXMudGhpY2tlbkJvcmRlcihub2Rlc1dpdGhIaWRkZW5OZWlnaGJvcik7XG4gICAgfVxuICB9O1xuXG4gIC8vIFVuaGlkZXMgZWxlbWVudHMgcGFzc2VkIGFzIGFyZ3VtZW50cy4gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5zaG93RWxlcyA9IGZ1bmN0aW9uKGVsZXMpIHtcbiAgICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkIHdlIGNhbiBhc3N1bWUgdGhhdCB2aWV3IHV0aWxpdGllcyBleHRlbnNpb24gaXMgb24gdXNlXG4gICAgICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuICAgICAgdmFyIGhpZGRlbkVsZXMgPSBlbGVzLmZpbHRlcignOmhpZGRlbicpO1xuICAgICAgaWYgKGhpZGRlbkVsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgICAgIHZhciB1ciA9IGN5LnVuZG9SZWRvKCk7XG4gICAgICAgICAgdXIuYWN0aW9uKFwidGhpY2tlbkJvcmRlclwiLCBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIsIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlcik7XG4gICAgICAgICAgdXIuYWN0aW9uKFwidGhpbkJvcmRlclwiLCBtYWluVXRpbGl0aWVzLnRoaW5Cb3JkZXIsIG1haW5VdGlsaXRpZXMudGhpY2tlbkJvcmRlcik7XG5cbiAgICAgICAgICAvLyBCYXRjaGluZ1xuICAgICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgICAgdmFyIG5vZGVzVG9UaGluQm9yZGVyID0gKGhpZGRlbkVsZXMubmVpZ2hib3Job29kKFwiOnZpc2libGVcIikubm9kZXMoXCJbdGhpY2tCb3JkZXJdXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kaWZmZXJlbmNlKGN5LmVkZ2VzKFwiOmhpZGRlblwiKS5kaWZmZXJlbmNlKGhpZGRlbkVsZXMuZWRnZXMoKS51bmlvbihoaWRkZW5FbGVzLm5vZGVzKCkuY29ubmVjdGVkRWRnZXMoKSkpLmNvbm5lY3RlZE5vZGVzKCkpO1xuICAgICAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJ0aGluQm9yZGVyXCIsIHBhcmFtOiBub2Rlc1RvVGhpbkJvcmRlcn0pO1xuICAgICAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJzaG93XCIsIHBhcmFtOiBoaWRkZW5FbGVzfSk7XG4gICAgICAgICAgdmFyIG5vZGVzVG9UaGlja2VuQm9yZGVyID0gaGlkZGVuRWxlcy5ub2RlcygpLmVkZ2VzV2l0aChjeS5ub2RlcyhcIjpoaWRkZW5cIikuZGlmZmVyZW5jZShoaWRkZW5FbGVzLm5vZGVzKCkpKVxuICBcdCAgICAgICAgICAgIC5jb25uZWN0ZWROb2RlcygpLmludGVyc2VjdGlvbihoaWRkZW5FbGVzLm5vZGVzKCkpO1xuICAgICAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJ0aGlja2VuQm9yZGVyXCIsIHBhcmFtOiBub2Rlc1RvVGhpY2tlbkJvcmRlcn0pO1xuICAgICAgICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJiYXRjaFwiLCBhY3Rpb25zKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBub2Rlc1dpdGhIaWRkZW5OZWlnaGJvciA9IGN5LmVkZ2VzKFwiOmhpZGRlblwiKS5jb25uZWN0ZWROb2RlcygnOnZpc2libGUnKTtcbiAgICAgICAgICBtYWluVXRpbGl0aWVzLnRoaW5Cb3JkZXIobm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IpO1xuICAgICAgICAgIHZpZXdVdGlsaXRpZXMuc2hvdyhlbGVzKTtcbiAgICAgICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5lZGdlcyhcIjpoaWRkZW5cIikuY29ubmVjdGVkTm9kZXMoJzp2aXNpYmxlJyk7XG4gICAgICAgICAgbWFpblV0aWxpdGllcy50aGlja2VuQm9yZGVyKG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yKTtcbiAgICAgIH1cbiAgfTtcblxuICAvLyBVbmhpZGVzIGFsbCBlbGVtZW50cy4gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5zaG93QWxsID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQgd2UgY2FuIGFzc3VtZSB0aGF0IHZpZXcgdXRpbGl0aWVzIGV4dGVuc2lvbiBpcyBvbiB1c2VcbiAgICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuXG4gICAgaWYgKGN5LmVsZW1lbnRzKCkubGVuZ3RoID09PSBjeS5lbGVtZW50cygnOnZpc2libGUnKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICB2YXIgdXIgPSBjeS51bmRvUmVkbygpO1xuICAgICAgdXIuYWN0aW9uKFwidGhpY2tlbkJvcmRlclwiLCBtYWluVXRpbGl0aWVzLnRoaWNrZW5Cb3JkZXIsIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlcik7XG4gICAgICB1ci5hY3Rpb24oXCJ0aGluQm9yZGVyXCIsIG1haW5VdGlsaXRpZXMudGhpbkJvcmRlciwgbWFpblV0aWxpdGllcy50aGlja2VuQm9yZGVyKTtcblxuICAgICAgLy8gQmF0Y2hpbmdcbiAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICB2YXIgbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IgPSBjeS5ub2RlcyhcIlt0aGlja0JvcmRlcl1cIik7XG4gICAgICBhY3Rpb25zLnB1c2goe25hbWU6IFwidGhpbkJvcmRlclwiLCBwYXJhbTogbm9kZXNXaXRoSGlkZGVuTmVpZ2hib3J9KTtcbiAgICAgIGFjdGlvbnMucHVzaCh7bmFtZTogXCJzaG93XCIsIHBhcmFtOiBjeS5lbGVtZW50cygpfSk7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiYmF0Y2hcIiwgYWN0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yID0gY3kuZWRnZXMoXCI6aGlkZGVuXCIpLmNvbm5lY3RlZE5vZGVzKCc6dmlzaWJsZScpO1xuICAgICAgbWFpblV0aWxpdGllcy50aGluQm9yZGVyKG5vZGVzV2l0aEhpZGRlbk5laWdoYm9yKTtcbiAgICAgIHZpZXdVdGlsaXRpZXMuc2hvdyhjeS5lbGVtZW50cygpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVtb3ZlcyB0aGUgZ2l2ZW4gZWxlbWVudHMgaW4gYSBzaW1wbGUgd2F5LiBDb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMuZGVsZXRlRWxlc1NpbXBsZSA9IGZ1bmN0aW9uKGVsZXMpIHtcbiAgICBpZiAoZWxlbWVudFV0aWxpdGllcy5pc0dyYXBoVG9wb2xvZ3lMb2NrZWQoKSB8fCBlbGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJkZWxldGVFbGVzU2ltcGxlXCIsIHtcbiAgICAgICAgZWxlczogZWxlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZWxlcy5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRXh0ZW5kcyB0aGUgZ2l2ZW4gbm9kZXMgbGlzdCBpbiBhIHNtYXJ0IHdheSB0byBsZWF2ZSB0aGUgbWFwIGludGFjdCBhbmQgcmVtb3ZlcyB0aGUgcmVzdWx0aW5nIGxpc3QuXG4gIC8vIENvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5kZWxldGVOb2Rlc1NtYXJ0ID0gZnVuY3Rpb24oX25vZGVzKSB7XG4gICAgdmFyIG5vZGVzID0gX25vZGVzLm5vZGVzKCk7XG4gICAgaWYgKGVsZW1lbnRVdGlsaXRpZXMuaXNHcmFwaFRvcG9sb2d5TG9ja2VkKCkgfHwgbm9kZXMubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwiZGVsZXRlTm9kZXNTbWFydFwiLCB7XG4gICAgICAgIGZpcnN0VGltZTogdHJ1ZSxcbiAgICAgICAgZWxlczogbm9kZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlTm9kZXNTbWFydChub2Rlcyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzTmVlZDJIaWdobGlndGgoZWxlczJoaWdobGlndGgpIHtcbiAgICBpZiAoZWxlczJoaWdobGlndGgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG4gICAgdmFyIGhpZ2hsaWdodENsYXNzID0gdmlld1V0aWxpdGllcy5nZXRBbGxIaWdobGlnaHRDbGFzc2VzKClbMF07XG4gICAgdmFyIGhpZ2hsaWdodGVkRWxlcyA9IGN5LmVsZW1lbnRzKCcuJyArIGhpZ2hsaWdodENsYXNzKS5maWx0ZXIoJzp2aXNpYmxlJyk7XG4gICAgaWYgKGhpZ2hsaWdodGVkRWxlcy5jb250YWlucyhlbGVzMmhpZ2hsaWd0aCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBIaWdobGlnaHRzIHNlbGVjdGVkIGVsZW1lbnRzLiBSZXF1aXJlcyB2aWV3VXRpbGl0aWVzIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxuICBtYWluVXRpbGl0aWVzLmhpZ2hsaWdodFNlbGVjdGVkID0gZnVuY3Rpb24gKF9lbGVzKSB7XG5cbiAgICB2YXIgZWxlc1RvSGlnaGxpZ2h0ID0gX2VsZXM7XG4gICAgaWYgKCFpc05lZWQySGlnaGxpZ3RoKGVsZXNUb0hpZ2hsaWdodCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG4gICAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICAgIGN5LnVuZG9SZWRvKCkuZG8oJ2hpZ2hsaWdodCcsIHsgZWxlczogZWxlc1RvSGlnaGxpZ2h0LCBpZHg6IDAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmlld1V0aWxpdGllcy5oaWdobGlnaHQoZWxlc1RvSGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gIH07XG5cbiAgLy8gSGlnaGxpZ2h0cyBuZWlnaGJvdXJzIG9mIHRoZSBnaXZlbiBub2Rlcy4gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5oaWdobGlnaHROZWlnaGJvdXJzID0gZnVuY3Rpb24oX25vZGVzKSB7XG4gICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQgd2UgY2FuIGFzc3VtZSB0aGF0IHZpZXcgdXRpbGl0aWVzIGV4dGVuc2lvbiBpcyBvbiB1c2VcbiAgICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuXG4gICAgdmFyIG5vZGVzID0gX25vZGVzLm5vZGVzKCk7IC8vIEVuc3VyZSB0aGF0IG5vZGVzIGxpc3QganVzdCBpbmNsdWRlIG5vZGVzXG4gICAgdmFyIGVsZXNUb0hpZ2hsaWdodCA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0TmVpZ2hib3Vyc09mTm9kZXMobm9kZXMpO1xuICAgIGlmICghaXNOZWVkMkhpZ2hsaWd0aChlbGVzVG9IaWdobGlnaHQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICAgIGN5LnVuZG9SZWRvKCkuZG8oJ2hpZ2hsaWdodCcsIHsgZWxlczogZWxlc1RvSGlnaGxpZ2h0LCBpZHg6IDAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmlld1V0aWxpdGllcy5oaWdobGlnaHQoZWxlc1RvSGlnaGxpZ2h0KTtcbiAgICB9XG5cbiAgICBjeS5lbGVtZW50cygpLnVuc2VsZWN0KCk7XG4gIH07XG5cbiAgLy8gRmluZHMgdGhlIGVsZW1lbnRzIHdob3NlIGxhYmVsIGluY2x1ZGVzIHRoZSBnaXZlbiBsYWJlbCBhbmQgaGlnaGxpZ2h0cyBwcm9jZXNzZXMgb2YgdGhvc2UgZWxlbWVudHMuXG4gIC8vIFJlcXVpcmVzIHZpZXdVdGlsaXRpZXMgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMuc2VhcmNoQnlMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzVG9IaWdobGlnaHQgPSBjeS5ub2RlcyhcIjp2aXNpYmxlXCIpLmZpbHRlcihmdW5jdGlvbiAoZWxlLCBpKSB7XG4gICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGVsZSA9IGk7XG4gICAgICB9XG4gICAgICBpZiAoZWxlLmRhdGEoXCJsYWJlbFwiKSAmJiBlbGUuZGF0YShcImxhYmVsXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihsYWJlbCkgPj0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgIGlmIChub2Rlc1RvSGlnaGxpZ2h0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQgd2UgY2FuIGFzc3VtZSB0aGF0IHZpZXcgdXRpbGl0aWVzIGV4dGVuc2lvbiBpcyBvbiB1c2VcbiAgICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuXG4gICAgLy8gVXNlIHRoaXMgbGluZSBmb3Igc21hcnQgc2VhcmNoXG4gICAgLy8gbm9kZXNUb0hpZ2hsaWdodCA9IGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXNUb0hpZ2hsaWdodCk7XG5cbiAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbygnaGlnaGxpZ2h0JywgeyBlbGVzOiBub2Rlc1RvSGlnaGxpZ2h0LCBpZHg6IDAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmlld1V0aWxpdGllcy5oaWdobGlnaHQobm9kZXNUb0hpZ2hsaWdodCk7XG4gICAgfVxuXG4gICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICB9O1xuXG4gIC8vIEhpZ2hsaWdodHMgcHJvY2Vzc2VzIG9mIHRoZSBnaXZlbiBub2Rlcy4gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5oaWdobGlnaHRQcm9jZXNzZXMgPSBmdW5jdGlvbihfbm9kZXMpIHtcbiAgICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgICB2YXIgZWxlc1RvSGlnaGxpZ2h0ID0gZWxlbWVudFV0aWxpdGllcy5leHRlbmROb2RlTGlzdChub2Rlcyk7XG4gICAgaWYgKCFpc05lZWQySGlnaGxpZ3RoKGVsZXNUb0hpZ2hsaWdodCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG5cbiAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbygnaGlnaGxpZ2h0JywgeyBlbGVzOiBlbGVzVG9IaWdobGlnaHQsIGlkeDogMCB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2aWV3VXRpbGl0aWVzLmhpZ2hsaWdodChlbGVzVG9IaWdobGlnaHQpO1xuICAgIH1cblxuICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgfTtcblxuICAvLyBVbmhpZ2hsaWdodHMgYW55IGhpZ2hsaWdodGVkIGVsZW1lbnQuIFJlcXVpcmVzIHZpZXdVdGlsaXRpZXMgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG4gIG1haW5VdGlsaXRpZXMucmVtb3ZlSGlnaGxpZ2h0cyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChlbGVtZW50VXRpbGl0aWVzLm5vbmVJc05vdEhpZ2hsaWdodGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICAgIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG5cbiAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbyhcInJlbW92ZUhpZ2hsaWdodHNcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmlld1V0aWxpdGllcy5yZW1vdmVIaWdobGlnaHRzKCk7XG4gICAgfVxuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gIH07XG5cbiAgbWFpblV0aWxpdGllcy5sb2FkTGF5b3V0RGF0YSA9IGZ1bmN0aW9uKGxheW91dFRleHQsIGJ5TmFtZSkge1xuICAgIGxheW91dExvYWRlci5sb2FkKCBsYXlvdXRUZXh0LCBieU5hbWUgKTtcbiAgfTtcblxuICBtYWluVXRpbGl0aWVzLmdldExheW91dFRleHQgPSBmdW5jdGlvbiggYnlOYW1lICkge1xuICAgIGxheW91dFRvVGV4dC5jb252ZXJ0KCBieU5hbWUgKTtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBsYXlvdXQgYnkgZ2l2ZW4gbGF5b3V0T3B0aW9ucy4gQ29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLiBIb3dldmVyLCBieSBzZXR0aW5nIG5vdFVuZG9hYmxlIHBhcmFtZXRlclxuICAvLyB0byBhIHRydXRoeSB2YWx1ZSB5b3UgY2FuIGZvcmNlIGFuIHVuZGFibGUgbGF5b3V0IG9wZXJhdGlvbiBpbmRlcGVuZGFudCBvZiAndW5kb2FibGUnIG9wdGlvbi5cbiAgbWFpblV0aWxpdGllcy5wZXJmb3JtTGF5b3V0ID0gZnVuY3Rpb24obGF5b3V0T3B0aW9ucywgbm90VW5kb2FibGUpIHtcbiAgICBcbiAgICBpZiAoIW9wdGlvbnMudW5kb2FibGUgfHwgbm90VW5kb2FibGUpIHsgLy8gJ25vdFVuZG9hYmxlJyBmbGFnIGNhbiBiZSB1c2VkIHRvIGhhdmUgY29tcG9zaXRlIGFjdGlvbnMgaW4gdW5kby9yZWRvIHN0YWNrXG4gICAgICAvLyBUaGluZ3MgdG8gZG8gYmVmb3JlIHBlcmZvcm1pbmcgbGF5b3V0XG4gICAgICBtYWluVXRpbGl0aWVzLmJlZm9yZVBlcmZvcm1MYXlvdXQoKTtcbiAgICAgIFxuICAgICAgdmFyIGxheW91dCA9IGN5LmVsZW1lbnRzKCkuZmlsdGVyKCc6dmlzaWJsZScpLmxheW91dChsYXlvdXRPcHRpb25zKTtcblxuICAgICAgLy8gQ2hlY2sgdGhpcyBmb3IgY3l0b3NjYXBlLmpzIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgIGlmIChsYXlvdXQgJiYgbGF5b3V0LnJ1bikge1xuICAgICAgICBsYXlvdXQucnVuKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY3kudW5kb1JlZG8oKS5kbyhcImxheW91dFwiLCB7XG4gICAgICAgIG9wdGlvbnM6IGxheW91dE9wdGlvbnMsXG4gICAgICAgIGVsZXM6IGN5LmVsZW1lbnRzKCkuZmlsdGVyKCc6dmlzaWJsZScpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ3JlYXRlcyBhbiBzYmdubWwgZmlsZSBjb250ZW50IGZyb20gdGhlIGV4aXNpbmcgZ3JhcGggYW5kIHJldHVybnMgaXQuXG4gIG1haW5VdGlsaXRpZXMuY3JlYXRlU2Jnbm1sID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGpzb25Ub1NiZ25tbC5jcmVhdGVTYmdubWwoKTtcbiAgfTtcblxuICBtYWluVXRpbGl0aWVzLmNyZWF0ZU53dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBqc29uVG9Od3QuY3JlYXRlU2Jnbm1sKCk7XG4gIH07XG5cbiAgLy8gQ29udmVydHMgZ2l2ZW4gc2Jnbm1sIGRhdGEgdG8gYSBqc29uIG9iamVjdCBpbiBhIHNwZWNpYWwgZm9ybWF0XG4gIC8vIChodHRwOi8vanMuY3l0b3NjYXBlLm9yZy8jbm90YXRpb24vZWxlbWVudHMtanNvbikgYW5kIHJldHVybnMgaXQuXG4gIG1haW5VdGlsaXRpZXMuY29udmVydFNiZ25tbFRvSnNvbiA9IGZ1bmN0aW9uKGRhdGEsIHVybFBhcmFtcykge1xuICAgIHJldHVybiBzYmdubWxUb0pzb24uY29udmVydChkYXRhLCB1cmxQYXJhbXMpO1xuICB9O1xuXG4gIG1haW5VdGlsaXRpZXMuY29udmVydFNibWxUb0pzb24gPSBmdW5jdGlvbihkYXRhLCB1cmxQYXJhbXMpIHtcbiAgICB2YXIgY29udmVydGVkMiA9IHNibWxUb0pzb24uY29udmVydChkYXRhLCB1cmxQYXJhbXMpO1xuICAgIGNvbnNvbGUubG9nKFwiY29udmVydGVkMlwiLGNvbnZlcnRlZDIpIFxuICAgIHJldHVybiBjb252ZXJ0ZWQyO1xuICB9O1xuXG4gIG1haW5VdGlsaXRpZXMuY29udmVydE53dFRvSnNvbiA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gbnd0VG9Kc29uLmNvbnZlcnQoZGF0YSk7XG4gIH07XG5cblxuICAvLyBDcmVhdGUgdGhlIHF0aXAgY29udGVudHMgb2YgdGhlIGdpdmVuIG5vZGUgYW5kIHJldHVybnMgaXQuXG4gIG1haW5VdGlsaXRpZXMuZ2V0UXRpcENvbnRlbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuZ2V0UXRpcENvbnRlbnQobm9kZSk7XG4gIH07XG5cbiAgLy8gQ2hhbmdlIG9wdGlvblxuICBtYWluVXRpbGl0aWVzLnNldFNob3dDb21wbGV4TmFtZSA9IGZ1bmN0aW9uKHNob3dDb21wbGV4TmFtZSkge1xuICAgIG9wdGlvbnMuc2hvd0NvbXBsZXhOYW1lID0gc2hvd0NvbXBsZXhOYW1lO1xuICAgIC8vIG1ha2UgY2hhbmdlIGFjdGl2ZSBieSB0cmlnZ2VyaW5nIGRhdGEgd2hpY2ggd2lsbCB0cmlnZ2VyIHN0eWxlIHVwZGF0ZVxuICAgIGN5Lm5vZGVzKCdbY2xhc3NePVwiY29tcGxleFwiXScpLmZvckVhY2goZnVuY3Rpb24oZWxlKXtcbiAgICAgIGVsZS50cmlnZ2VyKFwiZGF0YVwiKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKlxuICAgKiBTZXRzIHRoZSBvcmRlcmluZyBvZiB0aGUgZ2l2ZW4gbm9kZXMuXG4gICAqIE9yZGVyaW5nIG9wdGlvbnMgYXJlICdMLXRvLVInLCAnUi10by1MJywgJ1QtdG8tQicsICdCLXRvLVQnLCAnbm9uZScuXG4gICAqIElmIGEgbm9kZSBkb2VzIG5vdCBoYXZlIGFueSBwb3J0IGJlZm9yZSB0aGUgb3BlcmF0aW9uIGFuZCBpdCBpcyBzdXBwb3NlZCB0byBoYXZlIHNvbWUgYWZ0ZXIgb3BlcmF0aW9uIHRoZSBwb3J0RGlzdGFuY2UgcGFyYW1ldGVyIGlzXG4gICAqIHVzZWQgdG8gc2V0IHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBub2RlIGNlbnRlciBhbmQgdGhlIHBvcnRzLiBUaGUgZGVmYXVsdCBwb3J0IGRpc3RhbmNlIGlzIDYwLlxuICAgKiBDb25zaWRlcnMgdW5kb2FibGUgb3B0aW9uLlxuICAgKi9cbiAgbWFpblV0aWxpdGllcy5zZXRQb3J0c09yZGVyaW5nID0gZnVuY3Rpb24gKG5vZGVzLCBvcmRlcmluZywgcG9ydERpc3RhbmNlKSB7XG4gICAgaWYgKCBub2Rlcy5sZW5ndGggPT09IDAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzLnNldFBvcnRzT3JkZXJpbmcobm9kZXMsIG9yZGVyaW5nLCBwb3J0RGlzdGFuY2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBwYXJhbSA9IHtcbiAgICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgICBvcmRlcmluZzogb3JkZXJpbmcsXG4gICAgICAgIHBvcnREaXN0YW5jZTogcG9ydERpc3RhbmNlXG4gICAgICB9O1xuXG4gICAgICBjeS51bmRvUmVkbygpLmRvKFwic2V0UG9ydHNPcmRlcmluZ1wiLCBwYXJhbSk7XG4gICAgfVxuXG4gICAgY3kuc3R5bGUoKS51cGRhdGUoKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IG1hcCBwcm9wZXJ0aWVzIGZyb20gU0JHTk1MIGZpbGVcbiAgICogTmVlZHMgdG8gYmUgY2FsbGVkIGFmdGVyIGZpbGUgaXMgbG9hZGVkIC0gc2JnbnZpekxvYWRGaWxlRW5kIGV2ZW50XG4gICAqIHJldHVybjogbWFwIHByb3BlcnRpZXMgYXMgb2JqZWN0XG4gICAqL1xubWFpblV0aWxpdGllcy5nZXRNYXBQcm9wZXJ0aWVzID0gZnVuY3Rpb24oKSB7XG4gIGlmKCBlbGVtZW50VXRpbGl0aWVzLmZpbGVGb3JtYXQgIT09IHVuZGVmaW5lZCl7XG4gICAgaWYoIGVsZW1lbnRVdGlsaXRpZXMuZmlsZUZvcm1hdCA9PSAnc2Jnbm1sJylcbiAgICAgICB0aGlzLnNob3dOb2Rlc1NtYXJ0XG4gICAgZWxzZSBpZiggZWxlbWVudFV0aWxpdGllcy5maWxlRm9ybWF0ID09ICdud3QnIClcbiAgICAgIHJldHVybiBud3RUb0pzb24ubWFwUHJvcGVydGllc1RvT2JqKCk7XG4gICAgZWxzZSBpZiggZWxlbWVudFV0aWxpdGllcy5maWxlRm9ybWF0ID09ICd0ZCcpXG4gICAgICByZXR1cm4gdGRUb0pzb24ubWFwUHJvcGVydGllc1RvT2JqKCk7XG4gICAgZWxzZSBpZiggZWxlbWVudFV0aWxpdGllcy5maWxlRm9ybWF0ID09ICdzaWYnIClcbiAgICAgIHJldHVybiBzaWZUb0pzb24ubWFwUHJvcGVydGllc1RvT2JqKCk7XG4gICAgZWxzZSBpZiggZWxlbWVudFV0aWxpdGllcy5maWxlRm9ybWF0ID09ICdzYm1sJyApXG4gICAgICByZXR1cm4gc2JtbFRvSnNvbi5tYXBQcm9wZXJ0aWVzVG9PYmooKTtcbiAgICBlbHNle1xuICAgICAgY29uc29sZS5sb2coIFwiRmlsZSBmb3JtYXQgbWlzbWF0Y2hlZCFcIilcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfWVsc2V7XG4gICAgY29uc29sZS5sb2coIFwiRmlsZSBmb3JtYXQgaXMgbm90IGRlZmluZWQhXCIpXG4gICAgcmV0dXJuO1xuICB9XG4gfTtcbiAgbWFpblV0aWxpdGllcy5kb1ZhbGlkYXRpb24gPSBmdW5jdGlvbihmaWxlKSB7XG4gICAgcmV0dXJuIHNiZ25tbFRvSnNvbi5kb1ZhbGlkYXRpb24oZmlsZSk7XG4gIH1cblxuICBtYWluVXRpbGl0aWVzLmRvVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICByZXR1cm4gc2JtbFRvSnNvbi5kb1ZhbGlkYXRpb24oZmlsZSk7XG4gIH1cblxuICBtYWluVXRpbGl0aWVzLnNldENvbXBvdW5kUGFkZGluZyA9IGZ1bmN0aW9uKG5ld1BhZGRpbmdWYWx1ZSkge1xuICAgIG9wdGlvbnMuY29tcG91bmRQYWRkaW5nID0gbmV3UGFkZGluZ1ZhbHVlO1xuICAgIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zKG9wdGlvbnMpOyAgICBcbiAgfVxuXG4gIG1haW5VdGlsaXRpZXMuZ2V0Q29tcG91bmRQYWRkaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuY29tcG91bmRQYWRkaW5nO1xuICB9XG4gICByZXR1cm4gbWFpblV0aWxpdGllcztcbn07XG4iXSwibmFtZXMiOlsibGliVXRpbGl0aWVzIiwicmVxdWlyZSIsImxpYnMiLCJnZXRMaWJzIiwialF1ZXJ5IiwiJCIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbGVtZW50VXRpbGl0aWVzIiwianNvblRvU2Jnbm1sIiwic2Jnbm1sVG9Kc29uIiwic2JtbFRvSnNvbiIsInRkVG9Kc29uIiwibnd0VG9Kc29uIiwic2lmVG9Kc29uIiwib3B0aW9uVXRpbGl0aWVzIiwiZ3JhcGhVdGlsaXRpZXMiLCJsYXlvdXRMb2FkZXIiLCJqc29uVG9Od3QiLCJjeSIsIm9wdGlvbnMiLCJtYWluVXRpbGl0aWVzIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJqc29uVG9Od3RDb252ZXJ0ZXIiLCJzYmdubWxUb0pzb25Db252ZXJ0ZXIiLCJzYm1sVG9Kc29uQ29udmVydGVyIiwibnd0VG9Kc29uQ29udmVydGVyIiwidGRUb0pzb25Db252ZXJ0ZXIiLCJzaWZUb0pzb25Db252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwibGF5b3V0VG9UZXh0IiwiZ2V0T3B0aW9ucyIsImJlZm9yZVBlcmZvcm1MYXlvdXQiLCJwYXJlbnRzIiwibm9kZXMiLCJlZGdlcyIsInN0YXJ0QmF0Y2giLCJpIiwibGVuZ3RoIiwiZWRnZSIsInJlbW92ZUNsYXNzIiwiZGF0YSIsInJlbW92ZURhdGEiLCJlbmRCYXRjaCIsInN0eWxlIiwidXBkYXRlIiwiZXhwYW5kTm9kZXMiLCJpc0dyYXBoVG9wb2xvZ3lMb2NrZWQiLCJleHBhbmRDb2xsYXBzZSIsIm5vZGVzVG9FeHBhbmQiLCJleHBhbmRhYmxlTm9kZXMiLCJ1bmRvYWJsZSIsInVuZG9SZWRvIiwiZXhwYW5kIiwiY29sbGFwc2VOb2RlcyIsImNvbGxhcHNpYmxlTm9kZXMiLCJjb2xsYXBzZSIsImNvbGxhcHNlQ29tcGxleGVzIiwiY29tcGxleGVzIiwiY29sbGFwc2VSZWN1cnNpdmVseSIsImV4cGFuZENvbXBsZXhlcyIsImZpbHRlciIsImV4cGFuZFJlY3Vyc2l2ZWx5IiwiY29sbGFwc2VBbGwiLCJleHBhbmRBbGwiLCJ0aGlja2VuQm9yZGVyIiwiZWxlcyIsImZvckVhY2giLCJlbGUiLCJkZWZhdWx0Qm9yZGVyV2lkdGgiLCJOdW1iZXIiLCJ0aGluQm9yZGVyIiwiaGlkZUVsZXNTaW1wbGUiLCJ2aWV3VXRpbGl0aWVzIiwidXIiLCJhY3Rpb24iLCJhY3Rpb25zIiwibm9kZXNXaXRoSGlkZGVuTmVpZ2hib3IiLCJjb25uZWN0ZWROb2RlcyIsImludGVyc2VjdGlvbiIsInB1c2giLCJuYW1lIiwibmVpZ2hib3Job29kIiwiZGlmZmVyZW5jZSIsImhpZGUiLCJoaWRlTm9kZXNTbWFydCIsIl9ub2RlcyIsImFsbE5vZGVzIiwibm9kZXNUb1Nob3ciLCJleHRlbmRSZW1haW5pbmdOb2RlcyIsIm5vZGVzVG9IaWRlIiwibm90Iiwic2hvd05vZGVzU21hcnQiLCJlbGVtZW50cyIsImV4dGVuZE5vZGVMaXN0Iiwic2hvd0VsZXMiLCJoaWRkZW5FbGVzIiwibm9kZXNUb1RoaW5Cb3JkZXIiLCJ1bmlvbiIsImNvbm5lY3RlZEVkZ2VzIiwibm9kZXNUb1RoaWNrZW5Cb3JkZXIiLCJlZGdlc1dpdGgiLCJzaG93Iiwic2hvd0FsbCIsImRlbGV0ZUVsZXNTaW1wbGUiLCJyZW1vdmUiLCJkZWxldGVOb2Rlc1NtYXJ0IiwiZmlyc3RUaW1lIiwiaXNOZWVkMkhpZ2hsaWd0aCIsImVsZXMyaGlnaGxpZ3RoIiwiaGlnaGxpZ2h0Q2xhc3MiLCJnZXRBbGxIaWdobGlnaHRDbGFzc2VzIiwiaGlnaGxpZ2h0ZWRFbGVzIiwiY29udGFpbnMiLCJoaWdobGlnaHRTZWxlY3RlZCIsIl9lbGVzIiwiZWxlc1RvSGlnaGxpZ2h0IiwiaWR4IiwiaGlnaGxpZ2h0IiwidW5zZWxlY3QiLCJoaWdobGlnaHROZWlnaGJvdXJzIiwiZ2V0TmVpZ2hib3Vyc09mTm9kZXMiLCJzZWFyY2hCeUxhYmVsIiwibGFiZWwiLCJub2Rlc1RvSGlnaGxpZ2h0IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiaGlnaGxpZ2h0UHJvY2Vzc2VzIiwicmVtb3ZlSGlnaGxpZ2h0cyIsIm5vbmVJc05vdEhpZ2hsaWdodGVkIiwibG9hZExheW91dERhdGEiLCJsYXlvdXRUZXh0IiwiYnlOYW1lIiwibG9hZCIsImdldExheW91dFRleHQiLCJjb252ZXJ0IiwicGVyZm9ybUxheW91dCIsImxheW91dE9wdGlvbnMiLCJub3RVbmRvYWJsZSIsImxheW91dCIsInJ1biIsImNyZWF0ZVNiZ25tbCIsImNyZWF0ZU53dCIsImNvbnZlcnRTYmdubWxUb0pzb24iLCJ1cmxQYXJhbXMiLCJjb252ZXJ0U2JtbFRvSnNvbiIsImNvbnZlcnRlZDIiLCJjb25zb2xlIiwibG9nIiwiY29udmVydE53dFRvSnNvbiIsImdldFF0aXBDb250ZW50Iiwibm9kZSIsInNldFNob3dDb21wbGV4TmFtZSIsInNob3dDb21wbGV4TmFtZSIsInRyaWdnZXIiLCJzZXRQb3J0c09yZGVyaW5nIiwib3JkZXJpbmciLCJwb3J0RGlzdGFuY2UiLCJnZXRNYXBQcm9wZXJ0aWVzIiwiZmlsZUZvcm1hdCIsInVuZGVmaW5lZCIsIm1hcFByb3BlcnRpZXNUb09iaiIsImRvVmFsaWRhdGlvbiIsImZpbGUiLCJzZXRDb21wb3VuZFBhZGRpbmciLCJuZXdQYWRkaW5nVmFsdWUiLCJjb21wb3VuZFBhZGRpbmciLCJleHRlbmRPcHRpb25zIiwiZ2V0Q29tcG91bmRQYWRkaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var sbgnmlToJson, elementUtilities;\n\n  function nwtToJson(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    elementUtilities = param.elementUtilities;\n  }\n\n  function strToSet(str, splitBy) {\n    var set = {};\n    var list = str ? str.split(splitBy) : [];\n    list.forEach(function (member) {\n      set[member] = true;\n    });\n    return set;\n  }\n\n  function getFirstByTagName(arc, tagName) {\n    var els = arc.getElementsByTagName(tagName);\n    var val = els.length > 0 ? els[0].innerHTML : null;\n    return val;\n  }\n\n  var sifEdgePropHandlerMap = {\n    'pcIDSet': function pcIDSet(arc) {\n      var val = getFirstByTagName(arc, 'pcIDs');\n      return strToSet(val, /;| /);\n    },\n    'siteLocSet': function siteLocSet(arc) {\n      var val = getFirstByTagName(arc, 'siteLocations');\n      return strToSet(val, ';');\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(glyph) {\n      var val = getFirstByTagName(glyph, 'tooltip');\n      return val;\n    },\n    'infoboxes': function infoboxes(glyph, data) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(glyph) {\n          var val = getFirstByTagName(glyph, 'tooltip');\n          return val;\n        }\n      };\n      var infoboxGlyphs = glyph.getElementsByTagName('glyph');\n\n      for (var i = 0; i < infoboxGlyphs.length; i++) {\n        var infoboxGlyph = infoboxGlyphs[i];\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);\n\n          if (val) {\n            data.statesandinfos[i][propName] = val;\n          }\n        });\n      }\n    }\n  };\n\n  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {\n    elesData.forEach(function (obj) {\n      var data = obj.data;\n\n      if (filterFcn(data[\"class\"])) {\n        var xmlEle = getXMLEleById(xmlObject, data.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](xmlEle, data);\n\n          if (val) {\n            data[propName] = val;\n          }\n        });\n      }\n    });\n  }\n\n  function getElMap(graphData) {\n    var map = {\n      nodes: {},\n      edges: {},\n      infoboxes: {}\n    };\n    graphData.edges.forEach(function (edge) {\n      map.edges[edge.data.id] = edge;\n    });\n    graphData.nodes.forEach(function (node) {\n      map.nodes[node.data.id] = node;\n      var infoboxes = node.data.statesandinfos;\n      infoboxes.forEach(function (infobox) {\n        map.infoboxes[infobox.id] = infobox;\n      });\n    });\n    return map;\n  }\n\n  function applyExtraStylesData(graphData, xmlObject) {\n    var listOfStyles = xmlObject.querySelector('listOfStyles');\n    var styles = listOfStyles && listOfStyles.querySelectorAll('style');\n\n    if (!styles || styles.length === 0) {\n      return;\n    }\n\n    var attrToProp = {\n      'shapeName': 'shape-name'\n    };\n    var elMap = getElMap(graphData);\n    styles.forEach(function (style) {\n      var idList = style.getAttribute('idList').split(' ');\n      Object.keys(attrToProp).forEach(function (attrName) {\n        var g = style.querySelector('g');\n        var val = g.getAttribute(attrName);\n\n        if (val) {\n          var propName = attrToProp[attrName];\n          idList.forEach(function (id) {\n            if (elMap.nodes[id] || elMap.edges[id]) {\n              var el = elMap.nodes[id] || elMap.edges[id];\n              el.data[propName] = val;\n            } else if (elMap.infoboxes[id]) {\n              var el = elMap.infoboxes[id];\n              el.style[propName] = val;\n            }\n          });\n        }\n      });\n    });\n  }\n\n  nwtToJson.convert = function (xmlObject, urlParams) {\n    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);\n    var mapType = elementUtilities.mapType;\n\n    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      elementUtilities.fileFormat = 'nwt'; // extend edges data with sif specific features\n\n      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);\n      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);\n    } // apply the style data that is not applied because of restrictions of libsbgn\n\n\n    applyExtraStylesData(graphData, xmlObject);\n    return graphData;\n  };\n\n  nwtToJson.mapPropertiesToObj = function () {\n    return sbgnmlToJson.mapPropertiesToObj();\n  };\n\n  return nwtToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/nwt-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\n *  Extend default options and get current options by using this file\n */\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer parent node on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // intial compound padding for all compound nodes \n    compoundPadding: function compoundPadding() {\n      return 0;\n    },\n    improveFlow: function improveFlow() {\n      return true;\n    },\n    // Whether to adjust node label font size automatically.\n    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')\n    // instead of doing it.\n    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {\n      return true;\n    },\n    // extra padding for compound nodes except for complexes\n    extraCompartmentPadding: 14,\n    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details\n    extraComplexPadding: 10,\n    // Wether to display the complex's labels, like compartments.\n    // Will also increase the paddings by extraCompoundPadding to make room for the name.\n    showComplexName: true,\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true\n  };\n\n  var optionUtilities = function optionUtilities(param) {}; // Extend the defaults options with the user options\n\n\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n\n    optionUtilities.options = result;\n    return options;\n  };\n\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwiaW1wcm92ZUZsb3ciLCJhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHkiLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJzaG93Q29tcGxleE5hbWUiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ1bmRvYWJsZSIsIm9wdGlvblV0aWxpdGllcyIsInBhcmFtIiwiZXh0ZW5kT3B0aW9ucyIsIm9wdGlvbnMiLCJyZXN1bHQiLCJwcm9wIiwiZ2V0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBFeHRlbmQgZGVmYXVsdCBvcHRpb25zIGFuZCBnZXQgY3VycmVudCBvcHRpb25zIGJ5IHVzaW5nIHRoaXMgZmlsZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIC8vIFRoZSBwYXRoIG9mIGNvcmUgbGlicmFyeSBpbWFnZXMgd2hlbiBzYmdudml6IGlzIHJlcXVpcmVkIGZyb20gbnBtIGFuZCB0aGUgaW5kZXggaHRtbFxuICAgIC8vIGZpbGUgYW5kIG5vZGVfbW9kdWxlcyBhcmUgdW5kZXIgdGhlIHNhbWUgZm9sZGVyIHRoZW4gdXNpbmcgdGhlIGRlZmF1bHQgdmFsdWUgaXMgZmluZVxuICAgIGltZ1BhdGg6ICdub2RlX21vZHVsZXMvc2JnbnZpei9zcmMvaW1nJyxcbiAgICAvLyBXaGV0aGVyIHRvIGZpdCBsYWJlbHMgdG8gbm9kZXNcbiAgICBmaXRMYWJlbHNUb05vZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBmaXRMYWJlbHNUb0luZm9ib3hlczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgLy8gZHluYW1pYyBsYWJlbCBzaXplIGl0IG1heSBiZSAnc21hbGwnLCAncmVndWxhcicsICdsYXJnZSdcbiAgICBkeW5hbWljTGFiZWxTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ3JlZ3VsYXInO1xuICAgIH0sXG4gICAgLy8gV2hldGhlciB0byBpbmZlciBwYXJlbnQgbm9kZSBvbiBsb2FkIFxuICAgIGluZmVyTmVzdGluZ09uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgLy8gaW50aWFsIGNvbXBvdW5kIHBhZGRpbmcgZm9yIGFsbCBjb21wb3VuZCBub2RlcyBcbiAgICBjb21wb3VuZFBhZGRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgaW1wcm92ZUZsb3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvLyBXaGV0aGVyIHRvIGFkanVzdCBub2RlIGxhYmVsIGZvbnQgc2l6ZSBhdXRvbWF0aWNhbGx5LlxuICAgIC8vIElmIHRoaXMgb3B0aW9uIHJldHVybiBmYWxzZSBkbyBub3QgYWRqdXN0IGxhYmVsIHNpemVzIGFjY29yZGluZyB0byBub2RlIGhlaWdodCB1c2VzIG5vZGUuZGF0YSgnZm9udC1zaXplJylcbiAgICAvLyBpbnN0ZWFkIG9mIGRvaW5nIGl0LlxuICAgIGFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIC8vIGV4dHJhIHBhZGRpbmcgZm9yIGNvbXBvdW5kIG5vZGVzIGV4Y2VwdCBmb3IgY29tcGxleGVzXG4gICAgZXh0cmFDb21wYXJ0bWVudFBhZGRpbmc6IDE0LFxuXG4gICAgLy9leHRyYSBwYWRkaW5nIGZvciBjb21wbGV4IGNvbXBvdW5kIG5vZGVzLCByZWZlciB0byBlbGVtZW50VXRpbGl0aWVzLmdldENvbXBsZXhQYWRkaW5nIGZ1bmN0aW9uIHRvIHNlZSBkZXRhaWxzXG4gICAgZXh0cmFDb21wbGV4UGFkZGluZzogMTAsXG4gICAgLy8gV2V0aGVyIHRvIGRpc3BsYXkgdGhlIGNvbXBsZXgncyBsYWJlbHMsIGxpa2UgY29tcGFydG1lbnRzLlxuICAgIC8vIFdpbGwgYWxzbyBpbmNyZWFzZSB0aGUgcGFkZGluZ3MgYnkgZXh0cmFDb21wb3VuZFBhZGRpbmcgdG8gbWFrZSByb29tIGZvciB0aGUgbmFtZS5cbiAgICBzaG93Q29tcGxleE5hbWU6IHRydWUsXG4gICAgLy8gVGhlIHNlbGVjdG9yIG9mIHRoZSBjb21wb25lbnQgY29udGFpbmluZyB0aGUgc2JnbiBuZXR3b3JrXG4gICAgbmV0d29ya0NvbnRhaW5lclNlbGVjdG9yOiAnI3NiZ24tbmV0d29yay1jb250YWluZXInLFxuICAgIC8vIFdoZXRoZXIgdGhlIGFjdGlvbnMgYXJlIHVuZG9hYmxlLCByZXF1aXJlcyBjeXRvc2NhcGUtdW5kby1yZWRvIGV4dGVuc2lvblxuICAgIHVuZG9hYmxlOiB0cnVlXG4gIH07XG5cbiAgdmFyIG9wdGlvblV0aWxpdGllcyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICB9O1xuXG4gIC8vIEV4dGVuZCB0aGUgZGVmYXVsdHMgb3B0aW9ucyB3aXRoIHRoZSB1c2VyIG9wdGlvbnNcbiAgb3B0aW9uVXRpbGl0aWVzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG5cbiAgICBvcHRpb25VdGlsaXRpZXMub3B0aW9ucyA9IHJlc3VsdDtcblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcHRpb25VdGlsaXRpZXMub3B0aW9ucztcbiAgfTtcblxuICByZXR1cm4gb3B0aW9uVXRpbGl0aWVzO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFZO0VBQzNCO0VBQ0EsSUFBSUMsUUFBUSxHQUFHO0lBQ2I7SUFDQTtJQUNBQyxPQUFPLEVBQUUsOEJBSEk7SUFJYjtJQUNBQyxnQkFBZ0IsRUFBRSw0QkFBWTtNQUM1QixPQUFPLEtBQVA7SUFDRCxDQVBZO0lBUWJDLG9CQUFvQixFQUFFLGdDQUFZO01BQ2hDLE9BQU8sS0FBUDtJQUNELENBVlk7SUFXYjtJQUNBQyxnQkFBZ0IsRUFBRSw0QkFBWTtNQUM1QixPQUFPLFNBQVA7SUFDRCxDQWRZO0lBZWI7SUFDQUMsa0JBQWtCLEVBQUUsOEJBQVk7TUFDOUIsT0FBTyxLQUFQO0lBQ0QsQ0FsQlk7SUFtQmI7SUFDQUMsZUFBZSxFQUFFLDJCQUFZO01BQzNCLE9BQU8sQ0FBUDtJQUNELENBdEJZO0lBdUJiQyxXQUFXLEVBQUUsdUJBQVk7TUFDckIsT0FBTyxJQUFQO0lBQ0gsQ0F6Qlk7SUEwQmI7SUFDQTtJQUNBO0lBQ0FDLG9DQUFvQyxFQUFFLGdEQUFXO01BQy9DLE9BQU8sSUFBUDtJQUNELENBL0JZO0lBZ0NiO0lBQ0FDLHVCQUF1QixFQUFFLEVBakNaO0lBbUNiO0lBQ0FDLG1CQUFtQixFQUFFLEVBcENSO0lBcUNiO0lBQ0E7SUFDQUMsZUFBZSxFQUFFLElBdkNKO0lBd0NiO0lBQ0FDLHdCQUF3QixFQUFFLHlCQXpDYjtJQTBDYjtJQUNBQyxRQUFRLEVBQUU7RUEzQ0csQ0FBZjs7RUE4Q0EsSUFBSUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFVQyxLQUFWLEVBQWlCLENBQ3RDLENBREQsQ0FoRDJCLENBbUQzQjs7O0VBQ0FELGVBQWUsQ0FBQ0UsYUFBaEIsR0FBZ0MsVUFBVUMsT0FBVixFQUFtQjtJQUNqRCxJQUFJQyxNQUFNLEdBQUcsRUFBYjs7SUFFQSxLQUFLLElBQUlDLElBQVQsSUFBaUJuQixRQUFqQixFQUEyQjtNQUN6QmtCLE1BQU0sQ0FBQ0MsSUFBRCxDQUFOLEdBQWVuQixRQUFRLENBQUNtQixJQUFELENBQXZCO0lBQ0Q7O0lBRUQsS0FBSyxJQUFJQSxJQUFULElBQWlCRixPQUFqQixFQUEwQjtNQUN4QkMsTUFBTSxDQUFDQyxJQUFELENBQU4sR0FBZUYsT0FBTyxDQUFDRSxJQUFELENBQXRCO0lBQ0Q7O0lBRURMLGVBQWUsQ0FBQ0csT0FBaEIsR0FBMEJDLE1BQTFCO0lBRUEsT0FBT0QsT0FBUDtFQUNELENBZEQ7O0VBZ0JBSCxlQUFlLENBQUNNLFVBQWhCLEdBQTZCLFlBQVk7SUFDdkMsT0FBT04sZUFBZSxDQUFDRyxPQUF2QjtFQUNELENBRkQ7O0VBSUEsT0FBT0gsZUFBUDtBQUNELENBekVEIn0=\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbgnmlToCd(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbgnmlToCd.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/sbgnml2cd\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(XMLHttpRequest) {\n        callback(null);\n      }\n    });\n  };\n\n  return sbgnmlToCd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1jZC1jb252ZXJ0ZXItZmFjdG9yeS5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYmdubWxUb0NkIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciIsIlhNTEh0dHBSZXF1ZXN0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanM/ODNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG4gIFxuICAgIGZ1bmN0aW9uIHNiZ25tbFRvQ2QocGFyYW0pIHtcbiAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgIH1cbiAgXG4gXG4gICAgc2Jnbm1sVG9DZC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcblxuICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsICAgICAgICAgICAgIFxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9zYmdubWwyY2RcIixcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuIHNiZ25tbFRvQ2Q7XG4gIFxuICB9XG4gIFxuXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztFQUV4QixJQUFJQyxZQUFKLEVBQWtCQyxnQkFBbEIsRUFBb0NDLEVBQXBDOztFQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCO0lBQ3pCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXJCO0lBQ0FKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtJQUNBQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtFQUNEOztFQUdESixVQUFVLENBQUNLLE9BQVgsR0FBcUIsVUFBVUMsR0FBVixFQUFlQyxRQUFmLEVBQXlCO0lBRTNDQyxDQUFDLENBQUNDLElBQUYsQ0FBTztNQUNGQyxJQUFJLEVBQUUsTUFESjtNQUVGQyxHQUFHLEVBQUUsMENBRkg7TUFHRkMsSUFBSSxFQUFFTixHQUhKO01BSUZPLE9BQU8sRUFBRSxpQkFBVUQsSUFBVixFQUFnQjtRQUNyQkwsUUFBUSxDQUFDSyxJQUFELENBQVI7TUFDSCxDQU5DO01BT0ZFLEtBQUssRUFBRSxlQUFVQyxjQUFWLEVBQTBCO1FBQzdCUixRQUFRLENBQUMsSUFBRCxDQUFSO01BQ0g7SUFUQyxDQUFQO0VBYUYsQ0FmRDs7RUFpQkEsT0FBT1AsVUFBUDtBQUVELENBOUJIIn0=\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-cd-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n\n  function sbgnmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n\n  sbgnmlToJson.insertedNodes = {};\n  sbgnmlToJson.map = undefined;\n  sbgnmlToJson.calculatedCompoundPadding = undefined;\n\n  sbgnmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == 'compartment') {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          'x': parseFloat(bbox.x),\n          'y': parseFloat(bbox.y),\n          'w': parseFloat(bbox.w),\n          'h': parseFloat(bbox.h),\n          'id': compartment.id\n        });\n      }\n    }\n\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return compartments;\n  };\n\n  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n\n    return false;\n  };\n\n  sbgnmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h; //if it is simple node return bbox\n\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has('extraInfo')) {\n      // if newt file then extrainfo on the compound node exists\n      var xml = ele.extension.get('extraInfo');\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result.extraInfo;\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\n       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\n         styles = this.map.extension.get('renderInformation').listOfStyles;\n         if(styles  !== undefined){\n           styles = styles.styles;\n         }\n       }\n      */\n\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\n       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n      var padding = this.calculateElementPadding(ele);\n\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false; // Traverse the other children and update the extreme values\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode); //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\n           borderWidth = childStyle[0].renderGroup.strokeWidth;\n         } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n        });\n\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2; // The sizes of children bbox are determined by the difference between the extreme coordinates\n\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n\n      childrenBboxH = maxBottom - minTop + 2; // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n      } // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n\n\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n      } // set positions as center\n\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2; //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n\n  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n\n    return bbox;\n  };\n\n  sbgnmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding; // } \n\n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n      });\n\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n\n    return padding;\n  };\n\n  sbgnmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n\n    return children;\n  };\n\n  sbgnmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n\n  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n    // if a biological activity node has no unit of info, it must be a BA plain\n\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n\n      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable' && glyph.class_ !== 'residue variable' && glyph.class_ !== 'binding region') {\n        continue;\n      }\n\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n\n      if (glyph.class_ === 'unit of information') {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case 'unspecified entity':\n              parent[\"class\"] = \"BA unspecified entity\";\n              break;\n\n            case 'simple chemical':\n              parent[\"class\"] = \"BA simple chemical\";\n              break;\n\n            case 'macromolecule':\n              parent[\"class\"] = \"BA macromolecule\";\n              break;\n\n            case 'nucleic acid feature':\n              parent[\"class\"] = \"BA nucleic acid feature\";\n              break;\n\n            case 'perturbation':\n              parent[\"class\"] = \"BA perturbing agent\";\n              break;\n\n            case 'complex':\n              parent[\"class\"] = \"BA complex\";\n              break;\n          }\n        }\n\n        infobox.label = {\n          'text': glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === 'state variable') {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      } else if (glyph.class_ === 'residue variable') {\n        infobox = classes.ResidueVariable.construct(undefined, undefined, infoboxId);\n        infobox.residue.variable = glyph.label && glyph.label.text || undefined;\n      } else if (glyph.class_ === 'binding region') {\n        infobox = classes.BindingRegion.construct(undefined, undefined, infoboxId);\n        infobox.region.variable = glyph.label && glyph.label.text || undefined;\n      } //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]); //classes.StateVariable.setAnchorSide(infobox);\n\n      stateAndInfoArray.push(infobox);\n    }\n\n    return stateAndInfoArray;\n  };\n\n  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n\n  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = ''; // add compartment according to geometry\n\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          'x': parseFloat(ele.bbox.x),\n          'y': parseFloat(ele.bbox.y),\n          'w': parseFloat(ele.bbox.w),\n          'h': parseFloat(ele.bbox.h),\n          'id': ele.id\n        };\n\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n\n  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {}; // add id information\n\n    nodeObj.id = ele.id; // add node bounding box information\n\n    nodeObj.bbox = self.bboxProp(ele);\n\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    } // add class information\n\n\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    } // add label information\n\n\n    nodeObj.label = ele.label && ele.label.text || undefined;\n\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    } // add state and info box information\n\n\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj); // adding parent information\n\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments); // add language info, this will always be the mapType if not hybrid\n\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD'; //Need to add SBML here\n      }\n    } // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n\n\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]); // add clone information\n\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    } // add port information\n\n\n    var ports = [];\n    var portElements = ele.ports;\n\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100; // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      } // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n\n\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      } // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n\n\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"]; // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Multiply the bbox with the calculated ratio\n\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n  /**\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\n  */\n\n\n  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    } // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n\n\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0; // handle controlled properties\n\n    for (var fullQualifier in resources) {\n      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);\n\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    } // handle custom properties\n\n\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n\n    return cyObject;\n  };\n\n  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id; // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n\n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n\n    this.insertedNodes[elId] = true;\n    var self = this; // add complex nodes here\n\n    var eleClass = ele.class_;\n\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information' && glyphClass !== 'residue variable' && glyphClass !== 'binding region') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n\n  sbgnmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n\n  sbgnmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n\n    return glyphs;\n  };\n\n  sbgnmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n\n    return arcs;\n  };\n\n  sbgnmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n\n  sbgnmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n\n  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n\n    if (targetExists) {\n      targetNodeId = target;\n    }\n\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n\n  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n\n    return anchorPointPositions;\n  };\n\n  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_; // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n\n    var curveStyle = \"bezier\";\n\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n\n    var isSifMetaEdge;\n\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    } // add language info, this will always be the mapType if not hybrid\n\n\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF'; // Need to add SBML\n      }\n    }\n\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n\n  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    } // get all background image id references to their value\n\n\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    } // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n\n\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup; // convert color references\n\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      } // convert background image references\n\n\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n\n      var idList = style.idList.split(' ');\n\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n\n      /*  'background-opacity': {\n         'converter': convertHexColor,\n         'extra-field': 'opacity'\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    } // apply the style to list and overwrite the default style\n\n\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n\n        if (!memberStyle) {\n          return;\n        }\n\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n\n            setStyleProp(member, propName, fieldVal);\n          }\n        }); // if the member is a node\n\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n\n  sbgnmlToJson.mapPropertiesToObj = function () {\n    if (this.map.extension && this.map.extension.has('mapProperties')) {\n      // render extension was found\n      var xml = this.map.extension.get('mapProperties');\n      var obj;\n      parseString(xml, function (err, result) {\n        obj = result;\n      });\n      return obj;\n    } else {\n      return {\n        mapProperties: {\n          compoundPadding: mainUtilities.getCompoundPadding()\n        }\n      };\n    }\n  };\n\n  sbgnmlToJson.convert = function (xmlObject, urlParams) {\n    var self = this;\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n\n    elementUtilities.fileFormat = 'sbgnml';\n    var sbgn;\n\n    try {\n      var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      console.log(\"xmlStringl\", xmlString);\n      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);\n      console.log(\"sbgn\", sbgn);\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n\n    var map;\n\n    if (sbgn.maps.length < 1) {\n      // empty sbgn\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      map = sbgn.maps[0]; // take first map of the file as the main map\n    }\n\n    this.map = map;\n    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);\n    var compartments = self.getAllCompartments(map.glyphs);\n    var glyphs = map.glyphs;\n    var arcs = map.arcs;\n    var i;\n\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i]; // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments\n      // store glyph members of compartments here.\n\n      var compartmentRef = glyph.compartmentRef;\n\n      if (glyph.class_ === 'compartment') {\n        if (compartmentChildrenMap[glyph.id] === undefined) {\n          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;\n        }\n\n        glyph.glyphMembers = compartmentChildrenMap[glyph.id];\n      }\n\n      if (compartmentRef) {\n        if (compartmentChildrenMap[compartmentRef] === undefined) {\n          compartmentChildrenMap[compartmentRef] = [];\n        }\n\n        compartmentChildrenMap[compartmentRef].push(glyph);\n      }\n    }\n\n    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;\n\n    if (urlParams && urlParams.compoundPadding) {\n      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));\n    } else if (!map.extension) {\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        childNodes = glyph.glyphMembers.filter(function (child) {\n          return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"residue variable\" && child.class_ != \"binding region\";\n        });\n\n        if (childNodes.length > 0) {\n          // compound node\n          var hasMin = false;\n\n          for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            var childClass = childNode.class_;\n\n            if (childClass === \"source and sink\" || childClass === \"emptyset\") {\n              childClass = \"empty set\";\n            }\n\n            var borderWidth = elementUtilities.getDefaultProperties(childClass)[\"border-width\"];\n            var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n              return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n            });\n\n            if (stateAndInfos.length > 0) {\n              for (var k = 0; k < stateAndInfos.length; k++) {\n                var stateBbox = stateAndInfos[k].bbox;\n\n                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;\n                  hasMin = true;\n                }\n\n                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;\n                  hasMin = true;\n                }\n\n                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;\n                  hasMin = true;\n                }\n\n                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;\n                  hasMin = true;\n                }\n              }\n            }\n\n            var childNodeBbox = childNode.bbox;\n            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;\n            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;\n            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;\n            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;\n\n            if (left < minDistanceToChildren) {\n              minDistanceToChildren = left;\n              hasMin = true;\n            }\n\n            if (right < minDistanceToChildren) {\n              minDistanceToChildren = right;\n              hasMin = true;\n            }\n\n            if (top < minDistanceToChildren) {\n              minDistanceToChildren = top;\n              hasMin = true;\n            }\n\n            if (bottom < minDistanceToChildren) {\n              minDistanceToChildren = bottom;\n              hasMin = true;\n            }\n          }\n\n          if (hasMin) {\n            if (glyph.class_ == \"complex\") {\n              var stateAndInfos = glyph.glyphMembers.filter(function (child) {\n                return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n              });\n              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n\n              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {\n                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                var hasTopBottomInfo = false;\n                stateAndInfos.forEach(function (stateAndInfo) {\n                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {\n                    hasTopBottomInfo = true;\n                  }\n                });\n\n                if (hasTopBottomInfo) {\n                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                }\n              } else if (stateAndInfos.length > 0) {\n                minDistanceToChildren -= 2;\n              }\n            } else {\n              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;\n            }\n          }\n        }\n      }\n\n      minDistanceToChildren = Math.round(minDistanceToChildren);\n      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)\n\n      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {\n        newPadding = 0;\n      }\n\n      mainUtilities.setCompoundPadding(newPadding);\n    } else {\n      mainUtilities.setCompoundPadding(Number(self.mapPropertiesToObj().mapProperties.compoundPadding));\n    }\n\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);\n    }\n\n    for (i = 0; i < arcs.length; i++) {\n      var arc = arcs[i];\n      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);\n    }\n\n    if (map.extension && map.extension.has('renderInformation')) {\n      // render extension was found\n      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);\n    }\n\n    var cytoscapeJsGraph = {};\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    this.insertedNodes = {};\n    var shouldDisablePorts = false;\n    cytoscapeJsGraph.nodes.forEach(function (node) {\n      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {\n        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data[\"class\"]).width;\n        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data[\"class\"]).height; // node.data.bbox.x = 15;     \n        // node.data.bbox.y = 10; \n      }\n\n      node.data.ports.forEach(function (port) {\n        if (isNaN(port.x) || isNaN(port.y)) {\n          shouldDisablePorts = true;\n        }\n      });\n    });\n\n    if (shouldDisablePorts) {\n      graphUtilities.disablePorts();\n    } //getDefaultProperties\n    //elementUtilities.nodeTypes.forEach(function(type){\n    //  console.log(elementUtilities.getDefaultProperties(type));\n    //});\n    //console.log(cytoscapeJsGraph);\n    //console.log( elementUtilities.nodeTypes);\n\n\n    return cytoscapeJsGraph;\n  };\n\n  sbgnmlToJson.doValidation = function (xmlString) {\n    var errors = [];\n\n    try {\n      errors = libsbgnjs.Sbgn.doValidation(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not do validation. \" + err);\n    }\n\n    return errors;\n  };\n\n  return sbgnmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbgnmlToSbml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbgnmlToSbml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/xml; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n\n  return sbgnmlToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1zYm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvU2JtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLXNibWwtY29udmVydGVyLWZhY3RvcnkuanM/NGVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gICAgZnVuY3Rpb24gc2Jnbm1sVG9TYm1sKHBhcmFtKSB7XG4gICAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gICAgICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICB9XG5cblxuICAgIHNiZ25tbFRvU2JtbC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JHTi1NTDpTQk1MXCI7XG5cbiAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgICAgICB1cmw6IGNvbnZlcnNpb25BcGlVcmwsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJ0ZXh0L3htbDsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgICAgICAgZGF0YTogeG1sLFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBzYmdubWxUb1NibWw7XG5cbn1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVk7RUFFekIsSUFBSUMsWUFBSixFQUFrQkMsZ0JBQWxCLEVBQW9DQyxFQUFwQzs7RUFFQSxTQUFTQyxZQUFULENBQXNCQyxLQUF0QixFQUE2QjtJQUN6QkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFyQjtJQUNBSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBekI7SUFDQUMsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQU4sQ0FBcUJDLEtBQXJCLEVBQUw7RUFDSDs7RUFHREosWUFBWSxDQUFDSyxPQUFiLEdBQXVCLFVBQVVDLEdBQVYsRUFBZUMsUUFBZixFQUF5QjtJQUM1QyxJQUFJQyxnQkFBZ0IsR0FBRyxzRUFBdkI7SUFFQSxPQUFPQyxDQUFDLENBQUNDLElBQUYsQ0FBTztNQUNWQyxJQUFJLEVBQUUsTUFESTtNQUVWQyxHQUFHLEVBQUVKLGdCQUZLO01BR1ZLLFdBQVcsRUFBRSx5QkFISDtNQUlWQyxJQUFJLEVBQUVSLEdBSkk7TUFLVlMsUUFBUSxFQUFFLE1BTEE7TUFNVkMsT0FBTyxFQUFFLGlCQUFVRixJQUFWLEVBQWdCRyxVQUFoQixFQUE0QkMsR0FBNUIsRUFBaUM7UUFDdEMsSUFBSUEsR0FBRyxDQUFDQyxNQUFKLEtBQWUsR0FBbkIsRUFBd0I7VUFDcEJaLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsS0FBVDtZQUFnQkMsS0FBSyxFQUFFUCxJQUF2QjtZQUE2QlEsT0FBTyxFQUFFLDRCQUE0QkosR0FBRyxDQUFDQztVQUF0RSxDQUFELENBQVI7UUFDSCxDQUZELE1BRU87VUFDSFosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxJQUFUO1lBQWVFLE9BQU8sRUFBRVIsSUFBeEI7WUFBOEJPLEtBQUssRUFBRTtVQUFyQyxDQUFELENBQVI7UUFDSDtNQUNKLENBWlM7TUFhVkEsS0FBSyxFQUFFLGVBQVVBLE1BQVYsRUFBaUI7UUFDcEJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBVDtVQUFnQkMsS0FBSyxFQUFFQSxNQUF2QjtVQUE4QkMsT0FBTyxFQUFFO1FBQXZDLENBQUQsQ0FBUjtNQUNILENBZlM7TUFnQlZDLElBQUksRUFBRSxjQUFVRixLQUFWLEVBQWlCO1FBQ25CZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQVQ7VUFBZ0JDLEtBQUssRUFBRUEsS0FBdkI7VUFBOEJDLE9BQU8sRUFBRTtRQUF2QyxDQUFELENBQVI7TUFDSDtJQWxCUyxDQUFQLENBQVA7RUFvQkgsQ0F2QkQ7O0VBeUJBLE9BQU90QixZQUFQO0FBRUgsQ0F0Q0QifQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-json-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbml-to-json-converter-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar libsbml = __webpack_require__(/*! libsbmljs_stable */ \"libsbmljs_stable\");\n\nvar libsbmlInstance = libsbml();\n\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var _sboToNodeClass;\n\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n  var resultJson = [];\n  var speciesCompartmentMap = new Map();\n\n  function sbmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n\n  var sboToNodeClass = (_sboToNodeClass = {\n    278: \"rna\",\n    253: \"complex\",\n    289: \"hypothetical complex\",\n    291: \"degradation\",\n    298: \"drug\",\n    243: \"gene\",\n    252: \"protein\",\n    327: \"ion\",\n    284: \"ion channel\",\n    358: \"phenotype\",\n    244: \"receptor\",\n    247: \"simple molecule\"\n  }, _defineProperty(_sboToNodeClass, \"252\", \"truncated protein\"), _defineProperty(_sboToNodeClass, 285, \"unknown molecule\"), _sboToNodeClass);\n  sbmlToJson.insertedNodes = {};\n  sbmlToJson.map = undefined;\n  sbmlToJson.calculatedCompoundPadding = undefined;\n\n  sbmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == \"compartment\") {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          x: parseFloat(bbox.x),\n          y: parseFloat(bbox.y),\n          w: parseFloat(bbox.w),\n          h: parseFloat(bbox.h),\n          id: compartment.id\n        });\n      }\n    }\n\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return compartments;\n  };\n\n  sbmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n\n    return false;\n  };\n\n  sbmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h; //if it is simple node return bbox\n\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has(\"extraInfo\")) {\n      // if newt file then extrainfo on the compound node exists\n      var xml = ele.extension.get(\"extraInfo\");\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result.extraInfo;\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\n      if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\n        styles = this.map.extension.get('renderInformation').listOfStyles;\n        if(styles  !== undefined){\n          styles = styles.styles;\n        }\n      }\n      */\n\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\n      var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n      var padding = this.calculateElementPadding(ele);\n\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false; // Traverse the other children and update the extreme values\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode); //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\n          borderWidth = childStyle[0].renderGroup.strokeWidth;\n        } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n        });\n\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2; // The sizes of children bbox are determined by the difference between the extreme coordinates\n\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n\n      childrenBboxH = maxBottom - minTop + 2; // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n      } // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n\n\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n      } // set positions as center\n\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2; //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n\n  sbmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n\n    return bbox;\n  };\n\n  sbmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === \"function\" ? options.compoundPadding.call() : options.compoundPadding; // }\n\n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === \"function\" ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n      });\n\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === \"function\" ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n\n    return padding;\n  };\n\n  sbmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n\n    return children;\n  };\n\n  sbmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n\n  sbmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n    // if a biological activity node has no unit of info, it must be a BA plain\n\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n\n      if (glyph.class_ !== \"unit of information\" && glyph.class_ !== \"state variable\" && glyph.class_ !== \"residue variable\" && glyph.class_ !== \"binding region\") {\n        continue;\n      }\n\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n\n      if (glyph.class_ === \"unit of information\") {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n        /*\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case \"unspecified entity\":\n              parent.class = \"BA unspecified entity\";\n              break;\n            case \"simple chemical\":\n              parent.class = \"BA simple chemical\";\n              break;\n            case \"macromolecule\":\n              parent.class = \"BA macromolecule\";\n              break;\n            case \"nucleic acid feature\":\n              parent.class = \"BA nucleic acid feature\";\n              break;\n            case \"perturbation\":\n              parent.class = \"BA perturbing agent\";\n              break;\n            case \"complex\":\n              parent.class = \"BA complex\";\n              break;\n          }\n        }\n        */\n\n        infobox.label = {\n          text: glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === \"state variable\") {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      } else if (glyph.class_ === \"residue variable\") {\n        infobox = classes.ResidueVariable.construct(undefined, undefined, infoboxId);\n        infobox.residue.variable = glyph.label && glyph.label.text || undefined;\n      } else if (glyph.class_ === \"binding region\") {\n        infobox = classes.BindingRegion.construct(undefined, undefined, infoboxId);\n        infobox.region.variable = glyph.label && glyph.label.text || undefined;\n      } //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]); //classes.StateVariable.setAnchorSide(infobox);\n\n      stateAndInfoArray.push(infobox);\n    }\n\n    return stateAndInfoArray;\n  };\n\n  sbmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n\n  sbmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === \"function\" ? inferNestingOnLoad.call() : inferNestingOnLoad;\n\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = \"\"; // add compartment according to geometry\n\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          x: parseFloat(ele.bbox.x),\n          y: parseFloat(ele.bbox.y),\n          w: parseFloat(ele.bbox.w),\n          h: parseFloat(ele.bbox.h),\n          id: ele.id\n        };\n\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n\n  sbmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {}; // add id information\n\n    nodeObj.id = ele.id; // add node bounding box information\n\n    nodeObj.bbox = self.bboxProp(ele);\n\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    } // add class information\n\n\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    } // add label information\n\n\n    nodeObj.label = ele.label && ele.label.text || undefined;\n\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    } // add state and info box information\n\n\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj); // adding parent information\n\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments); // add language info, this will always be the mapType if not hybrid\n\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD'; //Need to add SBML here\n      }\n    } // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n\n\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]); // add clone information\n\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    } // add port information\n\n\n    var ports = [];\n    var portElements = ele.ports;\n\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100; // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      } // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n\n\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      } // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n\n\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"]; // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Multiply the bbox with the calculated ratio\n\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n  /**\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\n  */\n\n\n  sbmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    } // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n\n\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0; // handle controlled properties\n\n    for (var fullQualifier in resources) {\n      var relation = libsbml.annot.Util.reducePrefix(fullQualifier);\n\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    } // handle custom properties\n\n\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n\n    return cyObject;\n  };\n\n  sbmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id; // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n\n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n\n    this.insertedNodes[elId] = true;\n    var self = this; // add complex nodes here\n\n    var eleClass = ele.class_;\n\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information' && glyphClass !== 'residue variable' && glyphClass !== 'binding region') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n\n  sbmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n\n  sbmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n\n    return glyphs;\n  };\n\n  sbmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n\n    return arcs;\n  };\n\n  sbmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n\n  sbmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n\n  sbmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n\n    if (targetExists) {\n      targetNodeId = target;\n    }\n\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n\n  sbmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n\n    return anchorPointPositions;\n  };\n\n  sbmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_; // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n\n    var curveStyle = \"bezier\";\n\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n\n    var isSifMetaEdge;\n\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    } // add language info, this will always be the mapType if not hybrid\n\n\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF'; // Need to add SBML\n      }\n    }\n\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n\n  sbmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    } // get all background image id references to their value\n\n\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    } // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n\n\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup; // convert color references\n\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      } // convert background image references\n\n\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n\n      var idList = style.idList.split(' ');\n\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n\n      /*  'background-opacity': {\n         'converter': convertHexColor,\n         'extra-field': 'opacity'\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    } // apply the style to list and overwrite the default style\n\n\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n\n        if (!memberStyle) {\n          return;\n        }\n\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n\n            setStyleProp(member, propName, fieldVal);\n          }\n        }); // if the member is a node\n\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n\n  sbmlToJson.mapPropertiesToObj = function () {\n    /*\n    if (this.map.extension && this.map.extension.has('mapProperties')) { // render extension was found\n       var xml = this.map.extension.get('mapProperties');\n       var obj;\n       parseString(xml, function (err, result) {\n          obj = result;\n       });\n       return obj;\n    }else{\n        \n          return {mapProperties : {compoundPadding : mainUtilities.getCompoundPadding()}};\n        }\n        */\n    return {};\n  };\n\n  sbmlToJson.convert = function (xmlString, urlParams) {\n    console.log(\"converting to json\");\n    var self = this;\n    var cytoscapeJsGraph = {};\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n\n    elementUtilities.fileFormat = 'sbml';\n    var model = null;\n    var sbgn;\n\n    try {\n      //var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      //console.log(\"xmlStringl\",xmlString)\n      var reader = new libsbmlInstance.SBMLReader(); // get document and model from sbml text\n\n      var doc = reader.readSBMLFromString(xmlString);\n      model = doc.getModel();\n      console.log(\"model.getNumSpecies()\", model.getNumSpecies());\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n\n    var result = [];\n    var plugin;\n\n    try {\n      plugin = model.findPlugin('layout');\n    } catch (err) {\n      plugin = undefined;\n    }\n\n    console.log('plugin', plugin);\n    var layoutplugin;\n    var layout;\n\n    if (plugin) {\n      layoutplugin = libsbmlInstance.castObject(plugin, libsbmlInstance.LayoutModelPlugin);\n      layout = layoutplugin.layouts[0];\n    }\n\n    console.log('layout', layout);\n\n    if (layout) {\n      var contains = function contains(a, b) {\n        return !(b.x1 <= a.x1 || b.y1 <= a.y1 || b.x2 >= a.x2 || b.y2 >= a.y2);\n      };\n\n      var edgeArray = [];\n      var compoundMap = new Map();\n      var compartmentMap = new Map();\n      var compartmentNodeMap = new Map(); // traverse compartments\n\n      for (var i = 0; i < model.getNumCompartments(); i++) {\n        var compartment = model.getCompartment(i);\n\n        if (compartment.getId() !== \"default\") {\n          compartmentMap.set(compartment.getId(), compartment.getName());\n        }\n      } // traverse compartment glyphs\n\n\n      for (var _i = 0; _i < layout.getNumCompartmentGlyphs(); _i++) {\n        var compartmentGlyph = layout.getCompartmentGlyph(_i);\n\n        if (compartmentGlyph.getCompartmentId() !== \"default\") {\n          var bbox = compartmentGlyph.getBoundingBox();\n          var data = {\n            id: compartmentGlyph.getCompartmentId(),\n            label: compartmentMap.get(compartmentGlyph.getCompartmentId()),\n            width: bbox.width,\n            height: bbox.height\n          };\n          var position = {\n            x: bbox.x + bbox.width / 2,\n            y: bbox.y + bbox.height / 2\n          };\n          compartmentNodeMap.set(compartmentGlyph.getCompartmentId(), {\n            \"data\": data,\n            \"position\": position,\n            \"group\": \"nodes\",\n            \"classes\": \"compartment\"\n          });\n          compoundMap.set(compartmentGlyph.getCompartmentId(), [bbox.x, bbox.y, bbox.width, bbox.height, bbox.width * bbox.height]);\n        }\n      }\n\n      var speciesMap = new Map();\n      var speciesNodeMap = new Map();\n      var speciesGlyphIdSpeciesIdMap = new Map(); // traverse species\n\n      for (var _i2 = 0; _i2 < model.getNumSpecies(); _i2++) {\n        var species = model.getSpecies(_i2);\n        speciesMap.set(species.getId(), [species.getName(), species.getCompartment(), species.getSBOTerm()]);\n      } // traverse species glyphs\n\n\n      for (var _i3 = 0; _i3 < layout.getNumSpeciesGlyphs(); _i3++) {\n        var speciesGlyph = layout.specglyphs[_i3];\n        speciesGlyphIdSpeciesIdMap.set(speciesGlyph.getId(), speciesGlyph.getSpeciesId());\n\n        var _bbox = speciesGlyph.getBoundingBox();\n\n        var _data = {\n          id: speciesGlyph.getId(),\n          label: speciesMap.get(speciesGlyph.getSpeciesId())[0],\n          compref: speciesMap.get(speciesGlyph.getSpeciesId())[1],\n          sboTerm: speciesMap.get(speciesGlyph.getSpeciesId())[2],\n          width: _bbox.width,\n          height: _bbox.height\n        };\n        var _position = {\n          x: _bbox.x + _bbox.width / 2,\n          y: _bbox.y + _bbox.height / 2\n        };\n        speciesNodeMap.set(speciesGlyph.getId(), {\n          \"data\": _data,\n          \"position\": _position,\n          \"group\": \"nodes\",\n          \"classes\": \"species\"\n        });\n\n        if (speciesMap.get(speciesGlyph.getSpeciesId())[2] == 253 || speciesMap.get(speciesGlyph.getSpeciesId())[2] == 289) {\n          compoundMap.set(speciesGlyph.getId(), [_bbox.x, _bbox.y, _bbox.width, _bbox.height, _bbox.width * _bbox.height]);\n        }\n      }\n\n      var reactionMap = new Map();\n      var reactionNodeMap = new Map();\n      var reactionSpeciesModifierMap = new Map(); // traverse reactions\n\n      for (var _i4 = 0; _i4 < model.getNumReactions(); _i4++) {\n        var reaction = model.getReaction(_i4);\n        reactionMap.set(reaction.getId(), [reaction.getName(), reaction.getSBOTerm()]);\n        reactionSpeciesModifierMap.set(reaction.getId(), {}); // fill reactionSpeciesModifierMap\n\n        for (var l = 0; l < reaction.getNumModifiers(); l++) {\n          var modifier = reaction.getModifier(l);\n          reactionSpeciesModifierMap.get(reaction.getId())[modifier.getSpecies()] = modifier.getSBOTerm();\n        }\n      } // traverse reaction glyphs\n\n\n      for (var _i5 = 0; _i5 < layout.getNumReactionGlyphs(); _i5++) {\n        var reactionGlyph = layout.getReactionGlyph(_i5);\n        var _data2 = {\n          id: reactionGlyph.getReactionId(),\n          label: reactionMap.get(reactionGlyph.getReactionId())[0],\n          sboTerm: reactionMap.get(reactionGlyph.getReactionId())[1],\n          width: 15,\n          height: 15\n        };\n        var _position2 = {\n          x: reactionGlyph.getCurve().getCurveSegment(0).getStart().x() + 10,\n          y: reactionGlyph.getCurve().getCurveSegment(0).getStart().y() + 10\n        };\n        reactionNodeMap.set(reactionGlyph.getReactionId(), {\n          \"data\": _data2,\n          \"position\": _position2,\n          \"group\": \"nodes\",\n          \"classes\": \"reaction\"\n        }); // add edges\n\n        for (var j = 0; j < reactionGlyph.getNumSpeciesReferenceGlyphs(); j++) {\n          var speciesReferenceGlyph = reactionGlyph.getSpeciesReferenceGlyph(j);\n          var role = speciesReferenceGlyph.getRole();\n\n          if (role === 1 || role === 3) {\n            var edgeData = {\n              id: reactionGlyph.getReactionId() + \"_\" + speciesReferenceGlyph.getSpeciesGlyphId(),\n              source: speciesReferenceGlyph.getSpeciesGlyphId(),\n              target: reactionGlyph.getReactionId()\n            };\n            edgeArray.push({\n              \"data\": edgeData,\n              \"group\": \"edges\",\n              \"classes\": \"reactantEdge\"\n            });\n          } else if (role === 2 || role === 4) {\n            var _edgeData = {\n              id: speciesReferenceGlyph.getSpeciesGlyphId() + \"_\" + reactionGlyph.getReactionId(),\n              source: reactionGlyph.getReactionId(),\n              target: speciesReferenceGlyph.getSpeciesGlyphId()\n            };\n            edgeArray.push({\n              \"data\": _edgeData,\n              \"group\": \"edges\",\n              \"classes\": \"productEdge\"\n            });\n          } else if (role === 5 || role === 6 || role === 7) {\n            var _edgeData2 = {\n              id: speciesReferenceGlyph.getSpeciesGlyphId() + \"_\" + reactionGlyph.getReactionId(),\n              source: speciesReferenceGlyph.getSpeciesGlyphId(),\n              target: reactionGlyph.getReactionId(),\n              sboTerm: reactionSpeciesModifierMap.get(reactionGlyph.getReactionId())[speciesGlyphIdSpeciesIdMap.get(speciesReferenceGlyph.getSpeciesGlyphId())]\n            };\n            edgeArray.push({\n              \"data\": _edgeData2,\n              \"group\": \"edges\"\n            });\n          } else {\n            var _edgeData3 = {\n              id: reactionGlyph.getReactionId() + \"_\" + speciesReferenceGlyph.getSpeciesGlyphId(),\n              source: reactionGlyph.getReactionId(),\n              target: speciesReferenceGlyph.getSpeciesGlyphId(),\n              sboTerm: reactionSpeciesModifierMap.get(reactionGlyph.getReactionId())[speciesGlyphIdSpeciesIdMap.get(speciesReferenceGlyph.getSpeciesGlyphId())]\n            };\n            edgeArray.push({\n              \"data\": _edgeData3,\n              \"group\": \"edges\"\n            });\n          }\n        }\n      } // infer nesting\n\n\n      var areaMap = new Map();\n      compoundMap.forEach(function (value, key) {\n        areaMap.set(key, value[4]);\n      });\n      var sortedAreaMap = new Map(_toConsumableArray(areaMap.entries()).sort(function (a, b) {\n        return a[1] - b[1];\n      }));\n      ;\n      var mergedMap = new Map([].concat(_toConsumableArray(compartmentNodeMap), _toConsumableArray(speciesNodeMap), _toConsumableArray(reactionNodeMap)));\n      var finalNodeArray = [];\n      mergedMap.forEach(function (value, key) {\n        var nodeId = key;\n        var nodeRect = {\n          x1: value[\"position\"].x - value[\"data\"].width / 2,\n          y1: value[\"position\"].y - value[\"data\"].height / 2,\n          x2: value[\"position\"].x + value[\"data\"].width / 2,\n          y2: value[\"position\"].y + value[\"data\"].height / 2\n        };\n        var isFound = false;\n        sortedAreaMap.forEach(function (value, key) {\n          var compoundRect = {\n            x1: compoundMap.get(key)[0],\n            y1: compoundMap.get(key)[1],\n            x2: compoundMap.get(key)[0] + compoundMap.get(key)[2],\n            y2: compoundMap.get(key)[1] + compoundMap.get(key)[3]\n          };\n\n          if (contains(compoundRect, nodeRect) && !isFound) {\n            mergedMap.get(nodeId)[\"data\"][\"parent\"] = key;\n            isFound = true;\n          }\n        });\n        finalNodeArray.push(value);\n      });\n      result = finalNodeArray.concat(edgeArray);\n      console.log(\"result\", result);\n      return result;\n    } else {\n      // add compartments, species and reactions\n      console.log(\"in else part\");\n      sbmlToJson.addCompartments(model);\n      sbmlToJson.addSpecies(model, cytoscapeJsNodes);\n      sbmlToJson.addReactions(model, cytoscapeJsEdges);\n      var _result = resultJson;\n      cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n      cytoscapeJsGraph.edges = cytoscapeJsEdges;\n      resultJson = [];\n      speciesCompartmentMap = new Map();\n      console.log(\"cytoscapeJsGraph\", cytoscapeJsGraph);\n      return cytoscapeJsGraph;\n    }\n  }; // add compartment nodes\n\n\n  sbmlToJson.addCompartments = function (model) {\n    for (var i = 0; i < model.getNumCompartments(); i++) {\n      var compartment = model.getCompartment(i);\n      console.log(\"compartment\", compartment);\n\n      if (compartment.getId() !== \"default\") {\n        var compartmentData = {\n          \"id\": compartment.getId(),\n          \"label\": compartment.getName()\n        };\n        resultJson.push({\n          \"data\": compartmentData,\n          \"group\": \"nodes\",\n          \"classes\": \"compartment\"\n        });\n      }\n    }\n  }; // add species nodes\n\n\n  sbmlToJson.addSpecies = function (model, cytoscapeJsNodes) {\n    for (var i = 0; i < model.getNumSpecies(); i++) {\n      var species = model.getSpecies(i);\n      console.log(\"species\", species); //speciesCompartmentMap.set(species.getId(), species.getCompartment());\n\n      var sboTerm = species.getSBOTerm(); //Create node obj\n\n      var nodeObj = {};\n      var styleObj = {};\n      var tempBbox = {};\n      tempBbox.x = 0;\n      tempBbox.y = 0;\n      tempBbox.w = 30;\n      tempBbox.h = 30;\n\n      if (sbmlToJson[sboTerm]) {\n        nodeObj[\"class\"] = sbmlToJson[sboTerm];\n      } else {\n        nodeObj[\"class\"] = \"simple molecule\";\n        tempBbox.w = 50;\n        tempBbox.h = 30;\n      }\n\n      nodeObj.id = species.getId();\n      nodeObj.bbox = tempBbox;\n      nodeObj.label = species.getName();\n      nodeObj.statesandinfos = {};\n      var cytoscapeJsNode = {\n        data: nodeObj,\n        style: styleObj\n      };\n      elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n      console.log(\"cytoscapeJsNode\", cytoscapeJsNode); //let speciesData = {\"id\": species.getId(), \"label\": species.getName(), \"parent\": species.getCompartment(), \"sboTerm\": species.getSBOTerm()};\n\n      cytoscapeJsNodes.push(cytoscapeJsNode);\n      console.log(\"cytoscapeJsNodes\", cytoscapeJsNodes);\n    }\n  }; // add reaction nodes and corresponding edges\n\n\n  sbmlToJson.addReactions = function (model, cytoscapeJsEdges) {\n    for (var i = 0; i < model.getNumReactions(); i++) {\n      var reaction = model.getReaction(i);\n      var reactionParentMap = new Map(); // add reactant->reaction edges\n\n      for (var j = 0; j < reaction.getNumReactants(); j++) {\n        var reactant = reaction.getReactant(j);\n        var reactantEdgeData = {\n          \"id\": reactant.getSpecies() + '_' + reaction.getId(),\n          \"source\": reactant.getSpecies(),\n          \"target\": reaction.getId()\n        };\n        resultJson.push({\n          \"data\": reactantEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"reactantEdge\"\n        });\n        console.log(\"reactant\", reactant); // collect possible parent info\n\n        var speciesCompartment = speciesCompartmentMap.get(reactant.getSpecies());\n        if (reactionParentMap.has(speciesCompartment)) reactionParentMap.set(speciesCompartment, reactionParentMap.get(speciesCompartment) + 1);else reactionParentMap.set(speciesCompartment, 1);\n      } // add reaction->product edges\n\n\n      for (var k = 0; k < reaction.getNumProducts(); k++) {\n        var product = reaction.getProduct(k);\n        var productEdgeData = {\n          \"id\": reaction.getId() + '_' + product.getSpecies(),\n          \"source\": reaction.getId(),\n          \"target\": product.getSpecies()\n        };\n        resultJson.push({\n          \"data\": productEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"productEdge\"\n        });\n        console.log(\"product\", product); // collect possible parent info\n\n        var _speciesCompartment = speciesCompartmentMap.get(product.getSpecies());\n\n        if (reactionParentMap.has(_speciesCompartment)) reactionParentMap.set(_speciesCompartment, reactionParentMap.get(_speciesCompartment) + 1);else reactionParentMap.set(_speciesCompartment, 1);\n      } // add modifier->reaction edges\n\n\n      for (var l = 0; l < reaction.getNumModifiers(); l++) {\n        var modifier = reaction.getModifier(l);\n        var modifierEdgeData = {\n          \"id\": modifier.getSpecies() + '_' + reaction.getId(),\n          \"source\": modifier.getSpecies(),\n          \"target\": reaction.getId(),\n          \"sboTerm\": modifier.getSBOTerm()\n        };\n        resultJson.push({\n          \"data\": modifierEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"modifierEdge\"\n        });\n        console.log(\"modifier\", modifier); // collect possible parent info\n\n        var _speciesCompartment2 = speciesCompartmentMap.get(modifier.getSpecies());\n\n        if (reactionParentMap.has(_speciesCompartment2)) reactionParentMap.set(_speciesCompartment2, reactionParentMap.get(_speciesCompartment2) + 1);else reactionParentMap.set(_speciesCompartment2, 1);\n      } // add reaction node\n\n\n      var parent = reaction.getCompartment();\n\n      if (!parent) {\n        // find the max occurrence\n        var max_count = 0,\n            result = -1;\n        reactionParentMap.forEach(function (value, key) {\n          if (max_count < value) {\n            result = key;\n            max_count = value;\n          }\n        });\n        parent = result;\n      }\n\n      var reactionData = {\n        \"id\": reaction.getId(),\n        \"label\": reaction.getName(),\n        \"parent\": parent\n      };\n      reactionData.width = 15;\n      reactionData.height = 15;\n      resultJson.push({\n        \"data\": reactionData,\n        \"group\": \"nodes\",\n        \"classes\": \"reaction\"\n      });\n    }\n  };\n\n  return sbmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/xml; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n\n  return sbmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNibWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2JtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/NGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gIGZ1bmN0aW9uIHNibWxUb1NiZ25tbChwYXJhbSkge1xuICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gIH1cblxuXG4gIHNibWxUb1NiZ25tbC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjb252ZXJzaW9uQXBpVXJsID0gXCJodHRwczovL21pbmVydmEtc2VydmljZS5sY3NiLnVuaS5sdS9taW5lcnZhL2FwaS9jb252ZXJ0L1NCTUw6U0JHTi1NTFwiO1xuXG4gICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgICAgdXJsOiBjb252ZXJzaW9uQXBpVXJsLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiBcInRleHQveG1sOyBjaGFyc2V0PVVURi04XCIsXG4gICAgICAgICAgZGF0YTogeG1sLFxuICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xuICAgICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgXG4gIH1cblxuICByZXR1cm4gc2JtbFRvU2Jnbm1sO1xuXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztFQUUxQixJQUFJQyxZQUFKLEVBQWtCQyxnQkFBbEIsRUFBb0NDLEVBQXBDOztFQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0lBQzNCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXJCO0lBQ0FKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtJQUNBQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtFQUNEOztFQUdESixZQUFZLENBQUNLLE9BQWIsR0FBdUIsVUFBVUMsR0FBVixFQUFlQyxRQUFmLEVBQXlCO0lBQzVDLElBQUlDLGdCQUFnQixHQUFHLHNFQUF2QjtJQUVBLE9BQU9DLENBQUMsQ0FBQ0MsSUFBRixDQUFPO01BQ1ZDLElBQUksRUFBRSxNQURJO01BRVZDLEdBQUcsRUFBRUosZ0JBRks7TUFHVkssV0FBVyxFQUFFLHlCQUhIO01BSVZDLElBQUksRUFBRVIsR0FKSTtNQUtWUyxRQUFRLEVBQUUsTUFMQTtNQU1WQyxPQUFPLEVBQUUsaUJBQVVGLElBQVYsRUFBZ0JHLFVBQWhCLEVBQTRCQyxHQUE1QixFQUFpQztRQUN0QyxJQUFJQSxHQUFHLENBQUNDLE1BQUosS0FBZSxHQUFuQixFQUF3QjtVQUNwQlosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxLQUFUO1lBQWdCQyxLQUFLLEVBQUVQLElBQXZCO1lBQTZCUSxPQUFPLEVBQUUsNEJBQTRCSixHQUFHLENBQUNDO1VBQXRFLENBQUQsQ0FBUjtRQUNILENBRkQsTUFFTztVQUNIWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLElBQVQ7WUFBZUUsT0FBTyxFQUFFUixJQUF4QjtZQUE4Qk8sS0FBSyxFQUFFO1VBQXJDLENBQUQsQ0FBUjtRQUNIO01BQ0osQ0FaUztNQWFWQSxLQUFLLEVBQUUsZUFBVUEsTUFBVixFQUFpQjtRQUNwQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFUO1VBQWdCQyxLQUFLLEVBQUVBLE1BQXZCO1VBQThCQyxPQUFPLEVBQUU7UUFBdkMsQ0FBRCxDQUFSO01BQ0gsQ0FmUztNQWdCVkMsSUFBSSxFQUFFLGNBQVVGLEtBQVYsRUFBaUI7UUFDbkJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBVDtVQUFnQkMsS0FBSyxFQUFFQSxLQUF2QjtVQUE4QkMsT0FBTyxFQUFFO1FBQXZDLENBQUQsQ0FBUjtNQUNIO0lBbEJTLENBQVAsQ0FBUDtFQXFCSCxDQXhCRDs7RUEwQkEsT0FBT3RCLFlBQVA7QUFFRCxDQXZDRCJ9\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\nfunction strToSet(str, splitBy) {\n  var set = {};\n  var list = str ? str.split(splitBy) : [];\n  list.forEach(function (member) {\n    set[member] = true;\n  });\n  return set;\n}\n\nfunction getEmptyGraphData() {\n  return {\n    nodes: [],\n    edges: []\n  };\n}\n\nmodule.exports = function () {\n  var elementUtilities;\n\n  function sifToJson(param) {\n    elementUtilities = param.elementUtilities;\n  }\n\n  sifToJson.initGraphVariables = function () {\n    sifToJson.graphData = getEmptyGraphData();\n    sifToJson.nameToNode = {};\n    sifToJson.keyToEdge = {}; // set of nodes that are connected to an edge\n\n    sifToJson.nodeWithSpecifiedClass = {};\n  };\n\n  sifToJson.defaultNodeType = 'SIF macromolecule';\n\n  sifToJson.mergeGraphData = function () {\n    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));\n  };\n\n  sifToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'sif';\n    elementUtilities.mapType = 'SIF';\n    sifToJson.initGraphVariables();\n\n    if (graphText == undefined) {\n      return sifToJson.graphData;\n    }\n\n    var lines = tdParser.getLinesArray(graphText.toString());\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line); // line represents a node\n\n      if (tabs.length === 1) {\n        var nodeName = tabs[0]; // create the node if does not exist yet\n        // if the node is just created it will have the default node class\n\n        sifToJson.getOrCreateNode(nodeName);\n      } // line represents an edge and the connected nodes\n      else {\n        var srcName = tabs[0];\n        var edgeType = tabs[1];\n        var tgtName = tabs[2];\n        var pcIDSet = strToSet(tabs[3], /;| /);\n        var siteLocSet = strToSet(tabs[4], ';');\n        var srcClass = sifToJson.getNodeClass(edgeType, 'src');\n        var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt'); // create nodes if they do not exist yet\n        // if the node already exists the node type and so the default values\n        // will be updated\n\n        sifToJson.getOrCreateNode(srcName, srcClass);\n        sifToJson.getOrCreateNode(tgtName, tgtClass); // create the edge if it does not exist yet\n\n        sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);\n      }\n    });\n    return sifToJson.mergeGraphData();\n  };\n\n  sifToJson.getNodeByName = function (name) {\n    return sifToJson.nameToNode[name];\n  };\n\n  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {\n    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n    return sifToJson.keyToEdge[key];\n  };\n\n  sifToJson.mapNodeToName = function (node, name) {\n    sifToJson.nameToNode[name] = node;\n  };\n\n  sifToJson.mapEdgeToKey = function (edge, key) {\n    sifToJson.keyToEdge[key] = edge;\n  };\n\n  sifToJson.calculateEdgeKey = function (src, type, tgt) {\n    return [src, type, tgt].join(' ');\n  };\n\n  sifToJson.getOrCreateNode = function (name, className) {\n    // save if class name parameter is set\n    var classNameSpecified = !!className;\n    className = className || sifToJson.defaultNodeType;\n    var node = sifToJson.getNodeByName(name);\n    var defaults = elementUtilities.getDefaultProperties(className);\n\n    var updateWithDefaults = function updateWithDefaults() {\n      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);\n      node.data.bbox.h = defaults.height;\n\n      if (elementUtilities.canHaveSBGNLabel(className)) {\n        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');\n        var fontSize;\n        var fontFamily = node.data['font-family'];\n\n        if (isDynamicLabel) {\n          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');\n          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n          var obj = {\n            height: node.data.bbox.h,\n            \"class\": className\n          };\n          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);\n        } else {\n          fontSize = node.data['font-size'];\n        }\n\n        var max = 250;\n        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {\n          max: max\n        });\n      } else {\n        node.data.bbox.w = defaults.width;\n      }\n    };\n\n    if (node == undefined) {\n      var uid = elementUtilities.generateNodeId();\n      node = {};\n      node.data = {\n        id: uid,\n        label: name,\n        \"class\": className,\n        bbox: {\n          x: 0,\n          y: 0\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      updateWithDefaults();\n      sifToJson.mapNodeToName(node, name);\n      sifToJson.graphData.nodes.push(node);\n    } // if class name parameter is set and the already existing node has a different\n    // class name check if the existing node has a specified class or just used the\n    // default one because it was not coming from an edge.\n    // In first case give a warning and do not update the class,\n    // in second case update the class and the node data with defaults\n    else if (classNameSpecified && node.data[\"class\"] !== className) {\n      if (sifToJson.nodeWithSpecifiedClass[name]) {\n        console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data[\"class\"]);\n      } else {\n        node.data[\"class\"] = className;\n        updateWithDefaults();\n      }\n    }\n\n    if (classNameSpecified) {\n      sifToJson.nodeWithSpecifiedClass[name] = true;\n    }\n\n    return node;\n  };\n\n  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {\n    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);\n\n    if (edge == undefined) {\n      var uid = elementUtilities.generateEdgeId();\n      var source = sifToJson.getNodeByName(srcName).data.id;\n      var target = sifToJson.getNodeByName(tgtName).data.id;\n      edge = {};\n      edge.data = {\n        id: uid,\n        pcIDSet: pcIDSet,\n        siteLocSet: siteLocSet,\n        source: source,\n        target: target,\n        \"class\": type\n      };\n      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);\n      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n      sifToJson.mapEdgeToKey(edge, key);\n      sifToJson.graphData.edges.push(edge);\n    }\n\n    return edge;\n  };\n\n  sifToJson.getNodeClass = function (edgeType, role) {\n    var type;\n\n    switch (edgeType) {\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';\n        break;\n\n      case 'consumption-controled-by':\n      case 'chemical-affects':\n        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';\n        break;\n\n      case 'reacts-with':\n      case 'used-to-produce':\n        type = 'SIF simple chemical';\n        break;\n\n      default:\n        type = 'SIF macromolecule';\n        break;\n    }\n\n    return type;\n  };\n\n  sifToJson.getMapProperty = function (propName) {\n    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];\n  };\n\n  sifToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: {\n        dynamicLabelSize: 'large',\n        adjustNodeLabelFontSizeAutomatically: true\n      }\n    };\n  };\n\n  return sifToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sif-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function tdParser() {}\n\n;\n\ntdParser.getTabsArray = function (line) {\n  return line.split('\\t');\n};\n\ntdParser.getLinesArray = function (content) {\n  var separator = /\\r?\\n|\\r/;\n\n  var notEmpty = function notEmpty(line) {\n    return line !== '';\n  };\n\n  return content.split(separator).filter(notEmpty);\n};\n\nmodule.exports = tdParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3RhYi1kZWxpbWV0ZWQtcGFyc2VyLmpzLmpzIiwibmFtZXMiOlsidGRQYXJzZXIiLCJnZXRUYWJzQXJyYXkiLCJsaW5lIiwic3BsaXQiLCJnZXRMaW5lc0FycmF5IiwiY29udGVudCIsInNlcGFyYXRvciIsIm5vdEVtcHR5IiwiZmlsdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdGFiLWRlbGltZXRlZC1wYXJzZXIuanM/MGVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0ZFBhcnNlcigpIHtcbn07XG5cbnRkUGFyc2VyLmdldFRhYnNBcnJheSA9IGZ1bmN0aW9uKCBsaW5lICkge1xuICByZXR1cm4gbGluZS5zcGxpdCggJ1xcdCcgKTtcbn07XG5cbnRkUGFyc2VyLmdldExpbmVzQXJyYXkgPSBmdW5jdGlvbiggY29udGVudCApIHtcbiAgdmFyIHNlcGFyYXRvciA9IC9cXHI/XFxufFxcci87XG4gIHZhciBub3RFbXB0eSA9IGZ1bmN0aW9uKCBsaW5lICkge1xuICAgIHJldHVybiBsaW5lICE9PSAnJztcbiAgfTtcbiAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoIHNlcGFyYXRvciApLmZpbHRlciggbm90RW1wdHkgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGRQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBQVQsR0FBb0IsQ0FDbkI7O0FBQUE7O0FBRURBLFFBQVEsQ0FBQ0MsWUFBVCxHQUF3QixVQUFVQyxJQUFWLEVBQWlCO0VBQ3ZDLE9BQU9BLElBQUksQ0FBQ0MsS0FBTCxDQUFZLElBQVosQ0FBUDtBQUNELENBRkQ7O0FBSUFILFFBQVEsQ0FBQ0ksYUFBVCxHQUF5QixVQUFVQyxPQUFWLEVBQW9CO0VBQzNDLElBQUlDLFNBQVMsR0FBRyxVQUFoQjs7RUFDQSxJQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVTCxJQUFWLEVBQWlCO0lBQzlCLE9BQU9BLElBQUksS0FBSyxFQUFoQjtFQUNELENBRkQ7O0VBR0EsT0FBT0csT0FBTyxDQUFDRixLQUFSLENBQWVHLFNBQWYsRUFBMkJFLE1BQTNCLENBQW1DRCxRQUFuQyxDQUFQO0FBQ0QsQ0FORDs7QUFRQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVixRQUFqQiJ9\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimeted-parser.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var elementUtilities;\n\n  function tdToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n  }\n\n  tdToJson.map = undefined;\n  tdToJson.edgeTypes = {\n    'positive influence': true,\n    'negative influence': true,\n    'unknown influence': true,\n    'necassary influence': true,\n    'logic arcs': true,\n    'equivalance arcs': true\n  };\n  tdToJson.nodeTypes = {\n    'biological activity': 'BA plain',\n    'macromolecule': 'BA macromolecule',\n    'complex': 'BA complex',\n    'simple chemical': 'BA simple chemical',\n    'unspecified entity': 'BA unspecified entity',\n    'nucleic acid feature': 'BA nucleic acid feature',\n    'perturbing agent': 'BA perturbing agent',\n    'phenotype': 'phenotype',\n    'compartment': 'compartment',\n    'submap': 'submap',\n    'tag': 'tag',\n    'and': 'and',\n    'or': 'or',\n    'not': 'not',\n    'delay': 'delay'\n  };\n\n  tdToJson.validateNodeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    return this.nodeTypes.hasOwnProperty(_type);\n  };\n\n  tdToJson.validateEdgeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    return this.edgeTypes.hasOwnProperty(_type);\n  };\n\n  tdToJson.convertTypeToClass = function (ele, type, isNode) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    ele.data[\"class\"] = isNode ? this.nodeTypes[_type] : _type;\n  };\n\n  tdToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: this.map.mapProperties\n    };\n  };\n  /**\n   * Adds states and infobox information to given node\n   * @param node : a node object\n   */\n\n\n  tdToJson.addInfoBox = function (node) {\n    var _class = node.data[\"class\"];\n\n    if (_class.startsWith(\"BA\") && _class != \"BA plain\") {\n      var unitOfInformation = classes.UnitOfInformation.construct();\n      unitOfInformation.parent = node.data.id; // file format does not contain bbox information, hence define them below\n\n      unitOfInformation.bbox = {\n        x: 25,\n        y: -50,\n        w: 30,\n        h: 12\n      };\n      classes.UnitOfInformation.setAnchorSide(unitOfInformation);\n      node.data.statesandinfos = [unitOfInformation];\n    } else {\n      node.data.statesandinfos = [];\n    }\n  };\n\n  tdToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'td';\n\n    if (graphText === undefined) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      var map = {};\n      var nodes = []; //Holds nodes\n\n      var edges = []; //Holds edges\n\n      this.map = map; //Define the line separator\n      // \\r\\n, \\n and \\r line separators\n\n      var separator = /\\r?\\n|\\r/;\n      var lines = graphText.toString().split(separator);\n      var graphDataIndex = 4; //graph data starts at index 4\n\n      var edgesStartIndex = -1; //unkown at the begining\n\n      var formatVersion = lines[0];\n\n      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {\n        throw \"Wrong file format!\";\n      }\n\n      if (formatVersion.length == 10) {\n        formatVersion = formatVersion + \" 1.0\"; //default 1.0\n      }\n\n      var title = lines[1];\n      var description = lines[2]; //Second element of the format version specifies map language\n\n      var mapLanguage = formatVersion.toString().split(\" \")[1];\n      elementUtilities.mapType = mapLanguage;\n      map.mapProperties = {};\n      map.mapProperties.mapDescription = description;\n      map.mapProperties.mapName = title; //start to parse the graph\n\n      for (var i = graphDataIndex; i < lines.length; i++) {\n        //blank line indicates that nodes are finished\n        //so continue with edges\n        if (lines[i].length === 0 || lines[i] === \"\") {\n          while (lines[i] === \"\" && i < lines.length) {\n            i++;\n          }\n\n          edgesStartIndex = i + 2;\n          break;\n        } //Parse the node data\n\n\n        var data = lines[i].toString().split('\\t'); //each data seperated by tab\n\n        var nodeName = data[0]; //If there is no blank line\n\n        if (nodeName.toString().toLowerCase() == '--edge_id') {\n          edgesStartIndex = i + 1;\n          break;\n        }\n\n        var nodeId = data[1];\n        var nodeType = data[2];\n        var parentID = data[3];\n        var posX = data.length > 4 ? data[4] : \"0\"; //if posX not given\n\n        var posY = data.length > 5 ? data[5] : \"0\"; //if posY not given\n\n        var nodeWidth = data.length > 6 ? data[6] : undefined;\n        var nodeHeight = data.length > 7 ? data[7] : undefined; //add parsed Node\n\n        var newNode = {\n          group: 'nodes',\n          data: {\n            id: nodeId,\n            label: nodeName,\n            ports: [],\n            bbox: {\n              x: parseFloat(posX),\n              y: parseFloat(posY),\n              w: nodeWidth,\n              h: nodeHeight\n            }\n          }\n        };\n\n        if (this.validateNodeType(nodeType)) {\n          this.convertTypeToClass(newNode, nodeType, true);\n          this.addInfoBox(newNode);\n        } else {\n          throw \"Node type mismatched...\";\n        }\n\n        if (parentID != '-1') {\n          newNode.data.parent = parentID;\n        }\n\n        if (newNode.data[\"class\"]) {\n          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data[\"class\"]);\n\n          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {\n            var defaults = elementUtilities.getDefaultProperties(newNode.data[\"class\"]);\n            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;\n            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;\n          }\n        }\n\n        nodes.push(newNode);\n      } //Start parsing edges\n\n\n      for (var i = edgesStartIndex; i < lines.length; i++) {\n        //EOF finish loop\n        if (lines[i].length === 0) {\n          break;\n        }\n\n        var data = lines[i].toString().split('\\t');\n        var edgeID = data[0];\n        var edgeSource = data[1];\n        var edgeTarget = data[2];\n        var edgeType = data[3];\n        var newEdge = {\n          group: 'edges',\n          data: {\n            id: edgeID,\n            source: edgeSource,\n            target: edgeTarget\n          }\n        };\n        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {\n          throw \"Edge Type mismatched...\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data[\"class\"]);\n        edges.push(newEdge);\n      }\n\n      var jsGraph = {};\n      jsGraph.nodes = nodes;\n      jsGraph.edges = edges;\n      return jsGraph;\n    }\n  };\n\n  return tdToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimited-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*\n * Text utilities for common usage\n */\nvar textUtilities = {\n  // same purpose as previous one, but with clearer responsibility\n  truncate: function truncate(text, font, width) {\n    text = text + \"\";\n    var context = document.createElement('canvas').getContext(\"2d\");\n    context.font = font; // check trivial case first, when entire text is already small enough\n\n    if (context.measureText(text).width < width) {\n      return text;\n    } else {\n      var ellipsis = \"..\"; // if ellipsis alone is already too large\n\n      if (context.measureText(ellipsis).width > width) {\n        return \"\";\n      }\n\n      var finalLength; // this should always have a value after the loop\n\n      for (var i = 0; i < text.length; i++) {\n        var subtext = text.substring(0, i) + ellipsis;\n\n        if (context.measureText(subtext).width > width) {\n          // we're too far, take the previous index\n          finalLength = i > 0 ? i - 1 : 0;\n          break;\n        }\n      }\n\n      return text.substring(0, finalLength) + ellipsis;\n    }\n  },\n  // ensure that returned string follows xsd:ID standard\n  // should follow r'^[a-zA-Z_][\\w.-]*$'\n  getXMLValidId: function getXMLValidId(originalId) {\n    var newId = \"\";\n    var xmlValidRegex = /^[a-zA-Z_][\\w.-]*$/;\n\n    if (!xmlValidRegex.test(originalId)) {\n      // doesn't comply\n      newId = originalId;\n      newId = newId.replace(/[^\\w.-]/g, \"\");\n\n      if (!xmlValidRegex.test(newId)) {\n        // still doesn't comply\n        newId = \"_\" + newId;\n\n        if (!xmlValidRegex.test(newId)) {\n          // normally we should never enter this\n          // if for some obscure reason we still don't comply, throw error.\n          throw new Error(\"Can't make identifer comply to xsd:ID requirements: \" + newId);\n        }\n      }\n\n      return newId;\n    } else {\n      return originalId;\n    }\n  },\n  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {\n    var DEFAULT_MARGIN = 5;\n    var lines = content.split(\"\\n\");\n    var context = document.createElement('canvas').getContext('2d'); // should not make type check so '===' should not be used here\n\n    var shouldAppend = parseFloat(fontSize) == fontSize;\n    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;\n    context.font = validFontSize + ' ' + fontFamily;\n    var width = 0;\n    lines.forEach(function (line) {\n      var w = context.measureText(line).width;\n\n      if (w > width) {\n        width = w;\n      }\n    });\n    var margin = options && options.margin;\n\n    if (margin == null) {\n      margin = DEFAULT_MARGIN;\n    }\n\n    width += 2 * margin;\n    var min = options && options.min;\n    var max = options && options.max;\n\n    if (min != null && width < min) {\n      width = min;\n    } else if (max != null && width > max) {\n      width = max;\n    }\n\n    return width;\n  },\n  FromKebabToCamelCase: function FromKebabToCamelCase(input) {\n    return input.replace(/(-\\w)/g, function (m) {\n      return m[1].toUpperCase();\n    });\n  },\n  FromCamelToKebabCase: function FromCamelToKebabCase(input) {\n    return input.replace(/[\\w]([A-Z])/g, function (m) {\n      return m[0] + \"-\" + m[1];\n    }).toLowerCase();\n  }\n};\nmodule.exports = textUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/text-utilities.js\n");

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n* Commonly needed UI Utilities\n*/\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var optionUtilities;\n  var options;\n\n  function uiUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n  }\n\n  uiUtilities.startSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n\n    if ($('.' + className).length === 0) {\n      var containerWidth = $(options.networkContainerSelector).width();\n      var containerHeight = $(options.networkContainerSelector).height();\n      $(options.networkContainerSelector + ':parent').prepend('<i style=\"position: absolute; z-index: 9999999; left: ' + containerWidth / 2 + 'px; top: ' + containerHeight / 2 + 'px;\" class=\"fa fa-spinner fa-spin fa-3x fa-fw ' + className + '\"></i>');\n    }\n  };\n\n  uiUtilities.endSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n\n    if ($('.' + className).length > 0) {\n      $('.' + className).remove();\n    }\n  };\n\n  return uiUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VpLXV0aWxpdGllcy1mYWN0b3J5LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyx5REFBRCxDQUExQjs7QUFDQSxJQUFJQyxJQUFJLEdBQUdGLFlBQVksQ0FBQ0csT0FBYixFQUFYO0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxDQUFDLEdBQUdILElBQUksQ0FBQ0UsTUFBdEI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFZO0VBRTVCLElBQUlDLGVBQUo7RUFDQSxJQUFJQyxPQUFKOztFQUVBLFNBQVNDLFdBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0lBQzNCSCxlQUFlLEdBQUdHLEtBQUssQ0FBQ0gsZUFBeEI7SUFDQUMsT0FBTyxHQUFHRCxlQUFlLENBQUNJLFVBQWhCLEVBQVY7RUFDRDs7RUFFREYsV0FBVyxDQUFDRyxZQUFaLEdBQTJCLFVBQVVDLFNBQVYsRUFBcUI7SUFDOUMsSUFBSSxDQUFDQSxTQUFMLEVBQWdCO01BQ2RBLFNBQVMsR0FBRyxlQUFaO0lBQ0Q7O0lBRUQsSUFBSVQsQ0FBQyxDQUFDLE1BQU1TLFNBQVAsQ0FBRCxDQUFtQkMsTUFBbkIsS0FBOEIsQ0FBbEMsRUFBcUM7TUFDbkMsSUFBSUMsY0FBYyxHQUFHWCxDQUFDLENBQUNJLE9BQU8sQ0FBQ1Esd0JBQVQsQ0FBRCxDQUFvQ0MsS0FBcEMsRUFBckI7TUFDQSxJQUFJQyxlQUFlLEdBQUdkLENBQUMsQ0FBQ0ksT0FBTyxDQUFDUSx3QkFBVCxDQUFELENBQW9DRyxNQUFwQyxFQUF0QjtNQUNBZixDQUFDLENBQUNJLE9BQU8sQ0FBQ1Esd0JBQVIsR0FBbUMsU0FBcEMsQ0FBRCxDQUFnREksT0FBaEQsQ0FBd0QsMkRBQTJETCxjQUFjLEdBQUcsQ0FBNUUsR0FBZ0YsV0FBaEYsR0FBOEZHLGVBQWUsR0FBRyxDQUFoSCxHQUFvSCxnREFBcEgsR0FBdUtMLFNBQXZLLEdBQW1MLFFBQTNPO0lBQ0Q7RUFDRixDQVZEOztFQVlBSixXQUFXLENBQUNZLFVBQVosR0FBeUIsVUFBVVIsU0FBVixFQUFxQjtJQUM1QyxJQUFJLENBQUNBLFNBQUwsRUFBZ0I7TUFDZEEsU0FBUyxHQUFHLGVBQVo7SUFDRDs7SUFFRCxJQUFJVCxDQUFDLENBQUMsTUFBTVMsU0FBUCxDQUFELENBQW1CQyxNQUFuQixHQUE0QixDQUFoQyxFQUFtQztNQUNqQ1YsQ0FBQyxDQUFDLE1BQU1TLFNBQVAsQ0FBRCxDQUFtQlMsTUFBbkI7SUFDRDtFQUNGLENBUkQ7O0VBVUEsT0FBT2IsV0FBUDtBQUNBLENBakNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdWktdXRpbGl0aWVzLWZhY3RvcnkuanM/N2YzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBDb21tb25seSBuZWVkZWQgVUkgVXRpbGl0aWVzXG4qL1xuXG52YXIgbGliVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9saWItdXRpbGl0aWVzJyk7XG52YXIgbGlicyA9IGxpYlV0aWxpdGllcy5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuIHZhciBvcHRpb25VdGlsaXRpZXM7XG4gdmFyIG9wdGlvbnM7XG5cbiBmdW5jdGlvbiB1aVV0aWxpdGllcyAocGFyYW0pIHtcbiAgIG9wdGlvblV0aWxpdGllcyA9IHBhcmFtLm9wdGlvblV0aWxpdGllcztcbiAgIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xuIH1cblxuIHVpVXRpbGl0aWVzLnN0YXJ0U3Bpbm5lciA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgIGNsYXNzTmFtZSA9ICdkZWZhdWx0LWNsYXNzJztcbiAgIH1cblxuICAgaWYgKCQoJy4nICsgY2xhc3NOYW1lKS5sZW5ndGggPT09IDApIHtcbiAgICAgdmFyIGNvbnRhaW5lcldpZHRoID0gJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3Rvcikud2lkdGgoKTtcbiAgICAgdmFyIGNvbnRhaW5lckhlaWdodCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLmhlaWdodCgpO1xuICAgICAkKG9wdGlvbnMubmV0d29ya0NvbnRhaW5lclNlbGVjdG9yICsgJzpwYXJlbnQnKS5wcmVwZW5kKCc8aSBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogOTk5OTk5OTsgbGVmdDogJyArIGNvbnRhaW5lcldpZHRoIC8gMiArICdweDsgdG9wOiAnICsgY29udGFpbmVySGVpZ2h0IC8gMiArICdweDtcIiBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtc3BpbiBmYS0zeCBmYS1mdyAnICsgY2xhc3NOYW1lICsgJ1wiPjwvaT4nKTtcbiAgIH1cbiB9O1xuXG4gdWlVdGlsaXRpZXMuZW5kU3Bpbm5lciA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgIGNsYXNzTmFtZSA9ICdkZWZhdWx0LWNsYXNzJztcbiAgIH1cblxuICAgaWYgKCQoJy4nICsgY2xhc3NOYW1lKS5sZW5ndGggPiAwKSB7XG4gICAgICQoJy4nICsgY2xhc3NOYW1lKS5yZW1vdmUoKTtcbiAgIH1cbiB9O1xuXG4gcmV0dXJuIHVpVXRpbGl0aWVzO1xufTtcbiJdLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJyZXF1aXJlIiwibGlicyIsImdldExpYnMiLCJqUXVlcnkiLCIkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvblV0aWxpdGllcyIsIm9wdGlvbnMiLCJ1aVV0aWxpdGllcyIsInBhcmFtIiwiZ2V0T3B0aW9ucyIsInN0YXJ0U3Bpbm5lciIsImNsYXNzTmFtZSIsImxlbmd0aCIsImNvbnRhaW5lcldpZHRoIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwid2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJoZWlnaHQiLCJwcmVwZW5kIiwiZW5kU3Bpbm5lciIsInJlbW92ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/ui-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/*\n * This file exports the functions to be utilized in undoredo extension actions\n */\nmodule.exports = function () {\n  var elementUtilities;\n  var experimentalDataOverlay;\n  var mainUtilities;\n  var cy;\n\n  function undoRedoActionFunctions(param) {\n    elementUtilities = param.elementUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  undoRedoActionFunctions.deleteElesSimple = function (param) {\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n\n  undoRedoActionFunctions.restoreEles = function (eles) {\n    var param = {};\n    param.eles = elementUtilities.restoreEles(eles);\n    return param;\n  };\n\n  undoRedoActionFunctions.deleteNodesSmart = function (param) {\n    if (param.firstTime) {\n      return elementUtilities.deleteNodesSmart(param.eles);\n    }\n\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n\n  undoRedoActionFunctions.setPortsOrdering = function (param) {\n    var nodes = param.nodes;\n    var ordering = param.ordering;\n    var portDistance = param.portDistance;\n    var connectedEdges = nodes.connectedEdges();\n    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.\n\n    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.\n    // Fill node/edge prop maps for undo/redo actions\n    // Node prop map includes a copy of node ports\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var ports = node.data('ports');\n      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering\n\n      var portsCopy = ports.length === 2 ? [{\n        id: ports[0].id,\n        x: ports[0].x,\n        y: ports[0].y\n      }, {\n        id: ports[1].id,\n        x: ports[1].x,\n        y: ports[1].y\n      }] : [];\n      nodePropMap[node.id()] = {\n        ordering: currentOrdering,\n        ports: portsCopy\n      };\n    } // Node prop map includes edge portsource and porttarget\n\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      edgePropMap[edge.id()] = {\n        portsource: edge.data('portsource'),\n        porttarget: edge.data('porttarget')\n      };\n    }\n\n    var result = {\n      nodes: nodes,\n      nodePropMap: nodePropMap,\n      edgePropMap: edgePropMap\n    }; // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges\n\n    if (param.firstTime) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      cy.startBatch(); // Go back to stored node ports state\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var portsToReturn = param.nodePropMap[node.id()].ports;\n        var orderingsToReturn = param.nodePropMap[node.id()].ordering;\n        node.data('ports', portsToReturn);\n        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering\n      } // Go back to stored edge portsource/porttargets state\n\n\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        var props = param.edgePropMap[edge.id()];\n        edge.data('portsource', props.portsource);\n        edge.data('porttarget', props.porttarget);\n      }\n\n      cy.endBatch();\n    }\n\n    return result;\n  };\n\n  undoRedoActionFunctions.hideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.unhideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.hideAll = function () {\n    return experimentalDataOverlay.hideAll();\n  };\n\n  undoRedoActionFunctions.hideAllUndo = function (param) {\n    var invisibleFile = param.invisibleFile;\n    var invisibleExp = param.invisibleExp;\n    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);\n  };\n\n  undoRedoActionFunctions.unhideAll = function () {\n    return experimentalDataOverlay.unhideAll();\n  };\n\n  undoRedoActionFunctions.unhideAllUndo = function (param) {\n    var visibleFile = param.visibleFile;\n    var visibleExp = param.visibleExp;\n    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);\n  };\n\n  undoRedoActionFunctions.hideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideFile(fileName);\n  };\n\n  undoRedoActionFunctions.hideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var invisible = param.invisible;\n    return experimentalDataOverlay.hideFileUndo(fileName, invisible);\n  };\n\n  undoRedoActionFunctions.unhideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideFile(fileName);\n  };\n\n  undoRedoActionFunctions.unhideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var visible = param.visible;\n    return experimentalDataOverlay.unhideFileUndo(fileName, visible);\n  };\n\n  undoRedoActionFunctions.addExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    var isVisible = param.isVisible;\n    var values = param.values;\n    var groupArray = param.groupArray;\n    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);\n  };\n\n  undoRedoActionFunctions.removeExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    return experimentalDataOverlay.removeExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.addFile = function (param) {\n    var fileName = param.fileName;\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);\n  };\n\n  undoRedoActionFunctions.removeFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.removeFile(fileName);\n  };\n\n  undoRedoActionFunctions.removeAll = function (param) {\n    return experimentalDataOverlay.removeAll();\n  };\n\n  undoRedoActionFunctions.restoreAll = function (param) {\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);\n  };\n\n  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {\n    var result = mainUtilities.getCompoundPadding();\n    mainUtilities.setCompoundPadding(newPadding);\n    return result;\n  };\n\n  return undoRedoActionFunctions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/undo-redo-action-functions-factory.js\n");

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\n* Lookup object for valid map properties.\n* In the future it could be combined with other similar properties/functions in a new file.\n*/\nmodule.exports = {\n  compoundPadding: true,\n  extraCompartmentPadding: true,\n  extraComplexPadding: true,\n  arrowScale: true,\n  showComplexName: true,\n  dynamicLabelSize: true,\n  inferNestingOnLoad: true,\n  fitLabelsToNodes: true,\n  fitLabelsToInfoboxes: true,\n  recalculateLayoutOnComplexityManagement: true,\n  rearrangeOnComplexityManagement: true,\n  animateOnDrawingChanges: true,\n  adjustNodeLabelFontSizeAutomatically: true,\n  enablePorts: true,\n  allowCompoundNodeResize: true,\n  mapColorScheme: true,\n  mapColorSchemeStyle: true,\n  mapName: true,\n  mapDescription: true,\n  enableSIFTopologyGrouping: true,\n  experimentDescription: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3ZhbGlkTWFwUHJvcGVydGllcy5qcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3VuZFBhZGRpbmciLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJhcnJvd1NjYWxlIiwic2hvd0NvbXBsZXhOYW1lIiwiZHluYW1pY0xhYmVsU2l6ZSIsImluZmVyTmVzdGluZ09uTG9hZCIsImZpdExhYmVsc1RvTm9kZXMiLCJmaXRMYWJlbHNUb0luZm9ib3hlcyIsInJlY2FsY3VsYXRlTGF5b3V0T25Db21wbGV4aXR5TWFuYWdlbWVudCIsInJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQiLCJhbmltYXRlT25EcmF3aW5nQ2hhbmdlcyIsImFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseSIsImVuYWJsZVBvcnRzIiwiYWxsb3dDb21wb3VuZE5vZGVSZXNpemUiLCJtYXBDb2xvclNjaGVtZSIsIm1hcENvbG9yU2NoZW1lU3R5bGUiLCJtYXBOYW1lIiwibWFwRGVzY3JpcHRpb24iLCJlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nIiwiZXhwZXJpbWVudERlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy92YWxpZE1hcFByb3BlcnRpZXMuanM/NGM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBMb29rdXAgb2JqZWN0IGZvciB2YWxpZCBtYXAgcHJvcGVydGllcy5cbiogSW4gdGhlIGZ1dHVyZSBpdCBjb3VsZCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHNpbWlsYXIgcHJvcGVydGllcy9mdW5jdGlvbnMgaW4gYSBuZXcgZmlsZS5cbiovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcG91bmRQYWRkaW5nOiB0cnVlLFxuICBleHRyYUNvbXBhcnRtZW50UGFkZGluZzogdHJ1ZSxcbiAgZXh0cmFDb21wbGV4UGFkZGluZzogdHJ1ZSxcbiAgYXJyb3dTY2FsZTogdHJ1ZSxcbiAgc2hvd0NvbXBsZXhOYW1lOiB0cnVlLFxuICBkeW5hbWljTGFiZWxTaXplOiB0cnVlLFxuICBpbmZlck5lc3RpbmdPbkxvYWQ6IHRydWUsXG4gIGZpdExhYmVsc1RvTm9kZXM6IHRydWUsXG4gIGZpdExhYmVsc1RvSW5mb2JveGVzOiB0cnVlLFxuICByZWNhbGN1bGF0ZUxheW91dE9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXG4gIHJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXG4gIGFuaW1hdGVPbkRyYXdpbmdDaGFuZ2VzOiB0cnVlLFxuICBhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHk6IHRydWUsXG4gIGVuYWJsZVBvcnRzOiB0cnVlLFxuICBhbGxvd0NvbXBvdW5kTm9kZVJlc2l6ZTogdHJ1ZSxcbiAgbWFwQ29sb3JTY2hlbWU6IHRydWUsXG4gIG1hcENvbG9yU2NoZW1lU3R5bGU6IHRydWUsXG4gIG1hcE5hbWU6IHRydWUsXG4gIG1hcERlc2NyaXB0aW9uOiB0cnVlLFxuICBlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nOiB0cnVlLFxuICBleHBlcmltZW50RGVzY3JpcHRpb246IHRydWVcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmQyxlQUFlLEVBQUUsSUFERjtFQUVmQyx1QkFBdUIsRUFBRSxJQUZWO0VBR2ZDLG1CQUFtQixFQUFFLElBSE47RUFJZkMsVUFBVSxFQUFFLElBSkc7RUFLZkMsZUFBZSxFQUFFLElBTEY7RUFNZkMsZ0JBQWdCLEVBQUUsSUFOSDtFQU9mQyxrQkFBa0IsRUFBRSxJQVBMO0VBUWZDLGdCQUFnQixFQUFFLElBUkg7RUFTZkMsb0JBQW9CLEVBQUUsSUFUUDtFQVVmQyx1Q0FBdUMsRUFBRSxJQVYxQjtFQVdmQywrQkFBK0IsRUFBRSxJQVhsQjtFQVlmQyx1QkFBdUIsRUFBRSxJQVpWO0VBYWZDLG9DQUFvQyxFQUFFLElBYnZCO0VBY2ZDLFdBQVcsRUFBRSxJQWRFO0VBZWZDLHVCQUF1QixFQUFFLElBZlY7RUFnQmZDLGNBQWMsRUFBRSxJQWhCRDtFQWlCZkMsbUJBQW1CLEVBQUUsSUFqQk47RUFrQmZDLE9BQU8sRUFBRSxJQWxCTTtFQW1CZkMsY0FBYyxFQUFFLElBbkJEO0VBb0JmQyx5QkFBeUIsRUFBRSxJQXBCWjtFQXFCZkMscUJBQXFCLEVBQUU7QUFyQlIsQ0FBakIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/validMapProperties.js\n");

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*global window, global*/\nvar util = __webpack_require__(/*! util */ \"util\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nfunction now() { return new Date().getTime() }\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.console) {\n    console = __webpack_require__.g.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29uc29sZS1icm93c2VyaWZ5L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHFCQUFNLG9CQUFvQixxQkFBTTtBQUMzQyxjQUFjLHFCQUFNO0FBQ3BCLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vbm9kZV9tb2R1bGVzL2NvbnNvbGUtYnJvd3NlcmlmeS9pbmRleC5qcz9jZTI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdywgZ2xvYmFsKi9cbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIilcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpXG5mdW5jdGlvbiBub3coKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl0sXG4gICAgW2luZm8sIFwiaW5mb1wiXSxcbiAgICBbd2FybiwgXCJ3YXJuXCJdLFxuICAgIFtlcnJvciwgXCJlcnJvclwiXSxcbiAgICBbdGltZSwgXCJ0aW1lXCJdLFxuICAgIFt0aW1lRW5kLCBcInRpbWVFbmRcIl0sXG4gICAgW3RyYWNlLCBcInRyYWNlXCJdLFxuICAgIFtkaXIsIFwiZGlyXCJdLFxuICAgIFtjb25zb2xlQXNzZXJ0LCBcImFzc2VydFwiXVxuXVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IGZ1bmN0aW9uc1tpXVxuICAgIHZhciBmID0gdHVwbGVbMF1cbiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdXG5cbiAgICBpZiAoIWNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgY29uc29sZVtuYW1lXSA9IGZcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc29sZVxuXG5mdW5jdGlvbiBsb2coKSB7fVxuXG5mdW5jdGlvbiBpbmZvKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gd2FybigpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICB0aW1lc1tsYWJlbF0gPSBub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICBkZWxldGUgdGltZXNbbGFiZWxdXG4gICAgdmFyIGR1cmF0aW9uID0gbm93KCkgLSB0aW1lXG4gICAgY29uc29sZS5sb2cobGFiZWwgKyBcIjogXCIgKyBkdXJhdGlvbiArIFwibXNcIilcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLm5hbWUgPSBcIlRyYWNlXCJcbiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjaylcbn1cblxuZnVuY3Rpb24gZGlyKG9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChvYmplY3QpICsgXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gY29uc29sZUFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/console-browserify/index.js\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");

/***/ }),

/***/ "libsbmljs_stable":
/*!***********************************!*\
  !*** external "libsbmljs_stable" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbmljs_stable");

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"sbgnviz","version":"6.0.1","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"jquery":"^2.2.4","file-saver":"^2.0.2","cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","tippy.js":"^3.4.0"},"dependencies":{"libsbgn.js":"github:sbgn/libsbgn.js#develop","libsbmljs_stable":"^5.18.0-beta1","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^2.2.4","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.7.0","webpack-node-externals":"^3.0.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});