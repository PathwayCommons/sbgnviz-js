/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var sbgnviz = function sbgnviz(_options) {\n    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n    var options = optionUtilities.extendOptions(_options);\n    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ \"./src/sbgn-extensions/sbgn-cy-instance-factory.js\")();\n\n    // Utilities whose functions will be exposed seperately\n    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ \"./src/utilities/ui-utilities-factory.js\")();\n    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ \"./src/utilities/file-utilities-factory.js\")();\n    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ \"./src/utilities/graph-utilities-factory.js\")();\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ \"./src/utilities/keyboard-input-utilities-factory.js\")(); // require keybord input utilities\n    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ \"./src/utilities/experimental-data-overlay.js\")();\n    // Utilities to be exposed as is\n    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ \"./src/utilities/undo-redo-action-functions-factory.js\")();\n\n    // Other utilities\n    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ \"./src/utilities/json-to-sbgnml-converter-factory.js\")();\n    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ \"./src/utilities/json-to-nwt-converter-factory.js\")();\n    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ \"./src/utilities/sbgnml-to-json-converter-factory.js\")();\n    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ \"./src/utilities/nwt-to-json-converter-factory.js\")();\n    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ \"./src/utilities/tab-delimited-to-json-converter-factory.js\")();\n    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ \"./src/utilities/sif-to-json-converter-factory.js\")();\n    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ \"./src/utilities/json-to-sif-converter-factory.js\")();\n    var classes = __webpack_require__(/*! ./utilities/classes */ \"./src/utilities/classes.js\");\n    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ \"./src/utilities/layout-loader-factory.js\")();\n    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ \"./src/utilities/layout-to-text-factory.js\")();\n    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ \"./src/utilities/cd-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ \"./src/utilities/sbgnml-to-cd-converter-factory.js\")();\n    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ \"./src/utilities/sbgnml-to-sbml-converter-factory.js\")();\n    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ \"./src/utilities/sbml-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToGpmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-gpml-converter-factory */ \"./src/utilities/sbgnml-to-gpml-converter-factory.js\")();\n    var gpmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/gpml-to-sbgnml-converter-factory */ \"./src/utilities/gpml-to-sbgnml-converter-factory.js\")();\n    // Fill param object to use it utilities internally\n\n    param.optionUtilities = optionUtilities;\n    param.sbgnCyInstance = sbgnCyInstance;\n    param.uiUtilities = uiUtilities;\n    param.fileUtilities = fileUtilities;\n    param.graphUtilities = graphUtilities;\n    param.mainUtilities = mainUtilities;\n    param.keyboardInputUtilities = keyboardInputUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;\n    param.jsonToNwtConverter = jsonToNwtConverter;\n    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;\n    param.nwtToJsonConverter = nwtToJsonConverter;\n    param.tdToJsonConverter = tdToJsonConverter;\n    param.sifToJsonConverter = sifToJsonConverter;\n    param.classes = classes;\n    param.layoutLoader = layoutLoader;\n    param.layoutToText = layoutToText;\n    param.jsonToSifConverter = jsonToSifConverter;\n    param.cdToSbgnmlConverter = cdToSbgnmlConverter;\n    param.sbgnmlToCdConverter = sbgnmlToCdConverter;\n    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;\n    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;\n    param.sbgnmlToGpmlConverter = sbgnmlToGpmlConverter;\n    param.gpmlToSbgnmlConverter = gpmlToSbgnmlConverter;\n    param.experimentalDataOverlay = experimentalDataOverlay;\n\n    // call constructors of objects with param\n\n    sbgnCyInstance(param);\n    optionUtilities(param);\n    uiUtilities(param);\n    fileUtilities(param);\n    graphUtilities(param);\n    mainUtilities(param);\n    keyboardInputUtilities(param);\n    elementUtilities(param);\n    undoRedoActionFunctions(param);\n    jsonToSbgnmlConverter(param);\n    jsonToNwtConverter(param);\n    sbgnmlToJsonConverter(param);\n    nwtToJsonConverter(param);\n    tdToJsonConverter(param);\n    sifToJsonConverter(param);\n    layoutLoader(param);\n    layoutToText(param);\n    jsonToSifConverter(param);\n    cdToSbgnmlConverter(param);\n    sbgnmlToCdConverter(param);\n    sbgnmlToSbmlConverter(param);\n    sbmlToSbgnmlConverter(param);\n    sbgnmlToGpmlConverter(param);\n    gpmlToSbgnmlConverter(param);\n    experimentalDataOverlay(param);\n\n    // set scratch pad for sbgnviz and init sbgnvizParams inside it\n    sbgnCyInstance.getCy().scratch('_sbgnviz', {});\n    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param;\n\n    // Expose the api\n    var api = {};\n\n    // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    //api.experimentalDataOverlay = experimentalDataOverlay;\n\n    //expose utility of experimental data-overlay\n    for (var prop in experimentalDataOverlay) {\n      api[prop] = experimentalDataOverlay[prop];\n    }\n\n    // Expose each main utility seperately\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in fileUtilities) {\n      api[prop] = fileUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in uiUtilities) {\n      api[prop] = uiUtilities[prop];\n    }\n\n    // Expose each sbgn graph utility seperately\n    for (var prop in graphUtilities) {\n      api[prop] = graphUtilities[prop];\n    }\n\n    // Expose get cy function to enable accessing related cy instance\n    api.getCy = sbgnCyInstance.getCy;\n\n    // Expose some utilities directly here\n    api.classes = classes;\n    api.tdParser = tdParser;\n    return api;\n  };\n  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ \"./src/utilities/validMapProperties.js\");\n  sbgnviz.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.tippy = _libs.tippy || Tippy;\n\n    // Set the libraries to access them from any file\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n    libUtilities.setLibs(libs);\n    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ \"./src/sbgn-extensions/sbgn-cy-renderer.js\");\n    sbgnRenderer();\n  };\n  if ( true && module.exports) {\n    module.exports = sbgnviz;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar Tippy = libs.tippy;\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;\n  var refreshPaddings, options, cy;\n  var sbgnCyInstance = function sbgnCyInstance(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n\n    // cy = param.sbgnCyInstance.getCy();\n\n    /*\r\n     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.\r\n     */\n    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {\n      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian\n      return {\n        x: radius * Math.cos(angleInRadian) + centerX,\n        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system\n      };\n    };\n\n    /*\r\n     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle\r\n     */\n    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {\n      var circleStr = \"\";\n      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration\n      var currentAngle = angleFrom; // current angle will be updated in each iteration\n\n      for (var i = 0; i < numOfPoints; i++) {\n        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);\n        currentAngle += stepSize;\n        circleStr += point.x + \" \" + point.y + \" \";\n      }\n      return circleStr;\n    };\n\n    /*\r\n     *  Generates a string representing processes/logical operators with ports.\r\n     *  lineHW: Half width of line through the circle to the intersection point\r\n     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)\r\n     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'\r\n     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'\r\n     */\n\n    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {\n      var polygonStr;\n      var numOfPoints = 30; // Number of points that both halves of circle will have\n      if (orientation === 'horizontal') {\n        var abovePoints, belowPoints;\n        if (type === 'circle') {\n          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);\n          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);\n        } else if (type === 'rectangle') {\n          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n        }\n        polygonStr = \"-1 -\" + lineHW + \" -\" + shapeHW + \" -\" + lineHW + \" \";\n        polygonStr += abovePoints;\n        polygonStr += shapeHW + \" -\" + lineHW + \" 1 -\" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \" + lineHW + \" \";\n        polygonStr += belowPoints;\n        polygonStr += \"-\" + shapeHW + \" \" + lineHW + \" -1 \" + lineHW;\n      } else {\n        var leftPoints, rightPoints;\n        if (type === 'circle') {\n          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);\n          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);\n        } else if (type === 'rectangle') {\n          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n        }\n        polygonStr = \"-\" + lineHW + \" -\" + 1 + \" -\" + lineHW + \" -\" + shapeHW + \" \";\n        polygonStr += leftPoints;\n        polygonStr += \"-\" + lineHW + \" \" + shapeHW + \" -\" + lineHW + \" 1 \" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \";\n        polygonStr += rightPoints;\n        polygonStr += lineHW + \" -\" + shapeHW + \" \" + lineHW + \" -1\";\n      }\n      return polygonStr;\n    };\n\n    // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file\n    function registerUndoRedoActions() {\n      // create or get the undo-redo instance\n      var ur = cy.undoRedo();\n\n      // register general actions\n      // register add remove actions\n      ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n      ur.action(\"deleteNodesSmart\", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);\n      ur.action(\"setPortsOrdering\", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering);\n\n      //experimental data ovarlay\n      ur.action(\"removeAll\", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);\n      ur.action(\"hideExperiment\", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);\n      ur.action(\"unhideExperiment\", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);\n      ur.action(\"hideFile\", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);\n      ur.action(\"unhideFile\", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);\n      ur.action(\"removeExperiment\", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);\n      ur.action(\"removeFile\", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);\n      ur.action(\"expButtonChange\", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);\n      ur.action(\"fileButtonChangeHide\", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);\n      ur.action(\"fileButtonChangeUnHide\", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide);\n\n      //ur.action(\"expButtonUnhide\", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);\n      //ur.action(\"parseData\", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);\n    }\n    function showTooltip(event) {\n      var node = event.target || event.cyTarget;\n      var canHaveTooltip = function canHaveTooltip(node) {\n        return elementUtilities.isSIFNode(node) || node.data(\"tooltip\") !== null;\n      };\n      if (!canHaveTooltip(node)) {\n        return;\n      }\n      var ref; // used only for positioning\n      var pos = event.position || event.cyPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);\n      var tooltipContent;\n      if (!infobox) {\n        tooltipContent = node.data('tooltip');\n        if (tooltipContent == undefined || tooltipContent == '') {\n          return;\n        }\n        ref = node.popperRef();\n      } else {\n        tooltipContent = infobox['tooltip'];\n        if (tooltipContent == undefined) {\n          return;\n        }\n        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);\n        var modelW = infobox.bbox.w;\n        var modelH = infobox.bbox.h;\n        var renderedW = modelW * zoom;\n        var renderedH = modelH * zoom;\n        modelPos.x -= modelW / 2;\n        modelPos.y -= modelH / 2;\n        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);\n        var renderedDims = {\n          w: renderedW,\n          h: renderedH\n        };\n        ref = node.popperRef({\n          renderedPosition: function renderedPosition() {\n            return renderedPos;\n          },\n          renderedDimensions: function renderedDimensions() {\n            return renderedDims;\n          }\n        });\n      }\n      var placement = infobox ? infobox.anchorSide : 'bottom';\n      var destroyTippy;\n      var tippy = Tippy.one(ref, {\n        content: function () {\n          var content = document.createElement('div');\n          content.style['font-size'] = 12 * zoom + 'px';\n          content.innerHTML = tooltipContent;\n          return content;\n        }(),\n        trigger: 'manual',\n        hideOnClick: true,\n        arrow: true,\n        placement: placement,\n        onHidden: function onHidden() {\n          cy.off('pan zoom', destroyTippy);\n          node.off('position', destroyTippy);\n          cy.off('tapdrag', destroyTippy);\n        }\n      });\n      destroyTippy = function destroyTippy() {\n        tippy.destroy();\n      };\n      cy.on('pan zoom', destroyTippy);\n      node.on('position', destroyTippy);\n      cy.on('tapdrag', destroyTippy);\n      setTimeout(function () {\n        return tippy.show();\n      }, 250);\n    }\n    function bindCyEvents() {\n      cy.on('tapdragover', 'node', function (event) {\n        var waitDuration = 200;\n        var nodeTapdragout;\n        var currEvent = event;\n        var node = currEvent.target || currEvent.cyTarget;\n        var inQueue = true;\n        var clearNodeEvent = function clearNodeEvent() {\n          if (nodeTapdragout) {\n            node.off('tapdragout', nodeTapdragout);\n          }\n          if (nodeTapdrag) {\n            node.off('tapdrag', nodeTapdrag);\n          }\n        };\n        var getShowTooltipAsycn = function getShowTooltipAsycn() {\n          return setTimeout(function () {\n            showTooltip(currEvent);\n            inQueue = false;\n          }, waitDuration);\n        };\n        var showTooltipAsycn = getShowTooltipAsycn();\n        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {\n          clearTimeout(showTooltipAsycn);\n          clearNodeEvent();\n        });\n        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {\n          currEvent = e;\n          if (!inQueue) {\n            showTooltipAsycn = getShowTooltipAsycn();\n            inQueue = true;\n          }\n        });\n      });\n      cy.on('tapend', 'node', function (event) {\n        cy.style().update();\n      });\n      cy.on(\"expandcollapse.beforecollapse\", \"node\", function (event) {\n        var node = this;\n        //The children info of complex nodes should be shown when they are collapsed\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          //The node is being collapsed store infolabel to use it later\n          var infoLabel = elementUtilities.getInfoLabel(node);\n          node._private.data.infoLabel = infoLabel;\n        }\n      });\n      cy.on(\"expandcollapse.aftercollapse\", \"node\", function (event) {\n        var node = this;\n        // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we\n        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).\n        cy.startBatch();\n        var bbox = node.data('bbox');\n        bbox.w = 36;\n        bbox.h = 36;\n        node.data('bbox', bbox);\n        cy.endBatch();\n      });\n      cy.on(\"expandcollapse.beforeexpand\", \"node\", function (event) {\n        var node = this;\n        node.removeData(\"infoLabel\");\n      });\n      cy.on(\"expandcollapse.afterexpand\", \"node\", function (event) {\n        var node = this;\n        cy.nodes().updateCompoundBounds();\n        if (!options.recalculateOnComplexityManagement) {\n          cy.style().update();\n        }\n        //Don't show children info when the complex node is expanded\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          node.removeStyle('content');\n        }\n      });\n      cy.on(\"beforeDo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports = ports;\n          args.viewport = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n          if (name == \"layout\") mainUtilities.beforePerformLayout();\n        }\n      });\n      cy.on(\"beforeRedo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterDo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements;\n          res.ports = args.ports;\n          res.viewport = args.viewport;\n        }\n      });\n      cy.on(\"afterRedo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on(\"beforeUndo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterUndo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on('layoutstop', function (event) {\n        /*\r\n        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.\r\n        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.\r\n        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')\r\n        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'\r\n        */\n        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {\n          // 3000 nodes/edges check is for performance improvement\n          if (graphUtilities.portsEnabled === true && !(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n            elementUtilities.changePortsOrientationAfterLayout();\n          }\n        }\n      });\n      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {\n        // if the event is not triggered for this cy instance return directly\n        if (_cy != cy) {\n          return;\n        }\n        var setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {\n          if (cyInstance == undefined) return;\n          if (node.data().infoboxCalculated) {\n            return;\n          } else if (node.isParent()) {\n            node.children().forEach(function (childNode) {\n              setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);\n            });\n          }\n          node.data(\"infoboxCalculated\", true);\n          node.data('auxunitlayouts', {});\n          // for each statesandinfos\n\n          var correctInfoBoxCoord = true;\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;\n          }\n          var statesToAdd = [];\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {\n              classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n              //var fileLoadParam = {extraPadding:  Number(node.data().originalPadding)};\n              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);\n              statesandinfos.bbox.x = cordResult.x;\n              statesandinfos.bbox.y = cordResult.y;\n              statesandinfos.isDisplayed = true;\n              var location = statesandinfos.anchorSide; // top bottom right left\n              var layouts = node.data('auxunitlayouts');\n              if (!layouts[location]) {\n                // layout doesn't exist yet for this location\n                layouts[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              // populate the layout of this side\n              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed\n            } else {\n              if (!node.data('auxunitlayouts')) {\n                // ensure minimal initialization\n                node.data('auxunitlayouts', {});\n              }\n              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);\n              if (!node.data('auxunitlayouts')[location]) {\n                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              var layout = node.data('auxunitlayouts')[location];\n              statesandinfos.anchorSide = location;\n              switch (location) {\n                case \"top\":\n                  statesandinfos.bbox.y = 0;\n                  break;\n                case \"bottom\":\n                  statesandinfos.bbox.y = 100;\n                  break;\n                case \"left\":\n                  statesandinfos.bbox.x = 0;\n                  break;\n                case \"right\":\n                  statesandinfos.bbox.x = 100;\n                  break;\n              }\n              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);\n            }\n          }\n          if (isLayoutRequired === true) {\n            var locations = classes.AuxUnitLayout.checkFit(node, cy);\n            if (locations !== undefined && locations.length > 0) {\n              classes.AuxUnitLayout.fitUnits(node, cy, locations);\n            }\n          }\n        };\n        // list all entitytypes andstore them in the global scratch\n        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned\n\n        // following is unapplied due to performance decreasing, adding something like 20% time on load\n        /*cy.startBatch();\r\n        var entityHash = {};\r\n        cy.nodes(\"[class='complex'], [class='macromolecule'], [class='nucleic acid feature']\").forEach(function(node) {\r\n          // identify an entity by its label AND class\r\n          var label = node.data('label');\r\n          var _class = node.data('class');\r\n          var id=label+'-'+_class;\r\n          if(!entityHash.hasOwnProperty(id)) { // create entitytype if doesn't already exist\r\n            entityHash[id] = new classes.EntityType(id);\r\n          }\r\n          var currentEntityType = entityHash[id];\r\n          currentEntityType.EPNs.push(node); // assigne the current element to its corresponding entitytype\r\n            // collect all stateVariables of the current element, we need to assign StateVariableDefinitions to them\r\n          for(var i=0; i < node.data('statesandinfos').length; i++) {\r\n            var statesandinfos = node.data('statesandinfos')[i];\r\n            if(statesandinfos instanceof classes.StateVariable) { // stateVariable found\r\n              var currentStateVariable = statesandinfos;\r\n              currentEntityType.assignStateVariable(currentStateVariable);\r\n            }\r\n          }\r\n        });\r\n        cy.endBatch();\r\n        cy.scratch('_sbgnviz', {SBGNEntityTypes: entityHash});*/\n\n        // assign statesandinfos to their layout\n        cy.style().update();\n        // cy.startBatch();\n\n        // this check is for performance improvement\n        if (!(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n          cy.nodes().forEach(function (node) {\n            setCompoundInfoboxes(node, isLayoutRequired, cy);\n          });\n        }\n        if (callback) {\n          callback();\n        }\n\n        //cy.endBatch();\n      });\n    }\n    var selectionColor = '#d67614';\n    var sbgnStyleSheet = cytoscape.stylesheet().selector(\"node\").css({\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'text-opacity': 1,\n      'opacity': 1,\n      'padding': 0\n    }).selector(\"node[class]\").css({\n      'shape': function shape(ele) {\n        return elementUtilities.getCyShape(ele);\n      },\n      'content': function content(ele) {\n        return elementUtilities.getElementContent(ele);\n      },\n      'font-size': function fontSize(ele) {\n        // If node labels are expected to be adjusted automatically or element cannot have label\n        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()\n        // else return ele.data('font-size')\n        var opt = options.adjustNodeLabelFontSizeAutomatically;\n        var adjust = typeof opt === 'function' ? opt() : opt;\n        if (!adjust && ele.data('font-size') != undefined) {\n          return ele.data('font-size');\n        }\n        return elementUtilities.getLabelTextSize(ele);\n      }\n    }).selector(\"node[class][font-family]\").style({\n      'font-family': function fontFamily(ele) {\n        return ele.data('font-family');\n      }\n    }).selector(\"node[class][font-style]\").style({\n      'font-style': function fontStyle(ele) {\n        return ele.data('font-style');\n      }\n    }).selector(\"node[class][font-weight]\").style({\n      'font-weight': function fontWeight(ele) {\n        return ele.data('font-weight');\n      }\n    }).selector(\"node[class][color]\").style({\n      'color': function color(ele) {\n        return ele.data('color');\n      }\n    }).selector(\"node[class][background-color]\").style({\n      'background-color': function backgroundColor(ele) {\n        return ele.data('background-color');\n      }\n    }).selector(\"node[class][background-opacity]\").style({\n      'background-opacity': function backgroundOpacity(ele) {\n        return ele.data('background-opacity');\n      }\n    }).selector(\"node[class][border-width]\").style({\n      'border-width': function borderWidth(ele) {\n        return ele.data('border-width');\n      }\n    }).selector(\"node[class][border-color]\").style({\n      'border-color': function borderColor(ele) {\n        return ele.data('border-color');\n      }\n    }).selector(\"node[class][text-wrap]\").style({\n      'text-wrap': function textWrap(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return 'ellipsis';\n        }\n        return ele.data('text-wrap');\n      }\n    }).selector(\"node\").style({\n      'text-max-width': function textMaxWidth(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return ele.width();\n        }\n        return '1000px';\n      }\n    }).selector(\"edge[class][line-color]\").style({\n      'line-color': function lineColor(ele) {\n        return ele.data('line-color');\n      },\n      'source-arrow-color': function sourceArrowColor(ele) {\n        return ele.data('line-color');\n      },\n      'target-arrow-color': function targetArrowColor(ele) {\n        return ele.data('line-color');\n      }\n    }).selector(\"edge[class][width]\").style({\n      'width': function width(ele) {\n        return ele.data('width');\n      }\n    }).selector(\"node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process']\").css({\n      'shape-polygon-points': function shapePolygonPoints(ele) {\n        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us\n          var port = ele.data('ports')[0];\n          // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'\n          var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n          // The half width of the actual shape discluding the ports\n          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x);\n          // Get the class of the node\n          var _class = ele.data('class');\n          // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'\n          var type = _class.endsWith('process') ? 'rectangle' : 'circle';\n\n          // Generate a polygon string with above parameters and return it\n          return generateShapeWithPortString(0.01, shapeHW, type, orientation);\n        }\n\n        // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug\n        return '-1 -1 1 1 1 0';\n      }\n    }).selector(\"node[class='perturbing agent']\").css({\n      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'\n    }).selector(\"node[class='tag']\").css({\n      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'\n    }).selector(\"node:parent[class^='complex']\") // start with complex\n    .css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': elementUtilities.getComplexMargin,\n      'padding': elementUtilities.getComplexPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node[class='compartment']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='compartment']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node[class='submap']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='submap'],[class='topology group']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node:childless[bbox]\").css({\n      'width': 'data(bbox.w)',\n      'height': 'data(bbox.h)'\n    }).selector(\"node:parent[minHeight]\").css({\n      'min-height': function minHeight(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minHeight');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minHeightBiasTop]\").css({\n      'min-height-bias-top': function minHeightBiasTop(ele) {\n        var min = parseFloat(ele.data('minHeightBiasTop'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minHeightBiasBottom]\").css({\n      'min-height-bias-bottom': function minHeightBiasBottom(ele) {\n        var min = parseFloat(ele.data('minHeightBiasBottom'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidth]\").css({\n      'min-width': function minWidth(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minWidth');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minWidthBiasLeft]\").css({\n      'min-width-bias-left': function minWidthBiasLeft(ele) {\n        var min = parseFloat(ele.data('minWidthBiasLeft'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidthBiasRight]\").css({\n      'min-width-bias-right': function minWidthBiasRight(ele) {\n        var min = parseFloat(ele.data('minWidthBiasRight'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node.cy-expand-collapse-collapsed-node\").css({\n      'border-style': 'dashed'\n    }).selector(\"node:selected\").css({\n      'border-color': selectionColor,\n      'target-arrow-color': '#000',\n      'text-outline-color': '#000',\n      'border-width': function borderWidth(ele) {\n        return Math.max(parseFloat(ele.data('border-width')) + 2, 3);\n      }\n    }).selector(\"node:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '14'\n    }).selector(\"edge\").css({\n      'curve-style': 'bezier',\n      'target-arrow-fill': function targetArrowFill(ele) {\n        return elementUtilities.getCyTargetArrowFill(ele);\n      },\n      'source-arrow-fill': 'hollow',\n      'text-border-color': function textBorderColor(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'color': function color(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'arrow-scale': 1.25\n    }).selector(\"edge.cy-expand-collapse-meta-edge\").css({\n      'line-color': '#C4C4C4',\n      'source-arrow-color': '#C4C4C4',\n      'target-arrow-color': '#C4C4C4'\n    }).selector(\"edge:selected\").css({\n      'line-color': selectionColor,\n      'source-arrow-color': selectionColor,\n      'target-arrow-color': selectionColor,\n      'width': function width(ele) {\n        return Math.max(parseFloat(ele.data('width')) + 2, 3);\n      }\n    }).selector(\"edge:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '8'\n    }).selector(\"edge[cardinality > 0]\").css({\n      'text-rotation': 'autorotate',\n      'text-background-shape': 'rectangle',\n      'text-border-opacity': '1',\n      'text-border-width': '1',\n      'text-background-color': 'white',\n      'text-background-opacity': '1'\n    }).selector(\"edge[class='consumption'][cardinality > 0]\").css({\n      'source-label': function sourceLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'source-text-margin-y': '-10',\n      'source-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class='production'][cardinality > 0]\").css({\n      'target-label': function targetLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'target-text-margin-y': '-10',\n      'target-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class]\").css({\n      'target-arrow-shape': function targetArrowShape(ele) {\n        return elementUtilities.getCyArrowShape(ele);\n      },\n      'source-arrow-shape': 'none',\n      'source-endpoint': function sourceEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'source');\n      },\n      'target-endpoint': function targetEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'target');\n      },\n      'line-style': function lineStyle(ele) {\n        return elementUtilities.getArrayLineStyle(ele);\n      }\n    }).selector(\"core\").css({\n      'selection-box-color': selectionColor,\n      'selection-box-opacity': '0.2',\n      'selection-box-border-color': selectionColor\n    });\n    var sbgnNetworkContainer = $(options.networkContainerSelector);\n\n    // create and init cytoscape:\n    cytoscape({\n      container: sbgnNetworkContainer,\n      style: sbgnStyleSheet,\n      showOverlay: false,\n      minZoom: 0.125,\n      maxZoom: 16,\n      boxSelectionEnabled: true,\n      motionBlur: true,\n      wheelSensitivity: 0.1,\n      ready: function ready() {\n        cy = this;\n        // If undoable register undo/redo actions\n        if (options.undoable) {\n          registerUndoRedoActions();\n        }\n        bindCyEvents();\n      }\n    });\n  };\n  sbgnCyInstance.getCy = function () {\n    return cy;\n  };\n  return sbgnCyInstance;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-instance-factory.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Render sbgn specific shapes which are not supported by cytoscape.js core\r\n */\n\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar cyMath = math = cytoscape.math;\nvar cyBaseNodeShapes = cytoscape.baseNodeShapes;\nvar cyStyleProperties = cytoscape.styleProperties;\nvar classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var $$ = cytoscape;\n\n  /*\r\n  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz\r\n  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke\r\n  * border more than once as they would have infoboxes, multimers etc.\r\n  * Extends the style properties of node with the given ones then strokes the border.\r\n  * Would needed to be slightly updated during cytoscape upgrades if related function in\r\n  * Cytoscape.js is updated. Information about where is the related function is located\r\n  * can be found in the file that list the changes done in ivis cytoscape fork.\r\n  */\n  $$.sbgn.drawBorder = function (_ref) {\n    var context = _ref.context,\n      node = _ref.node,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      borderStyle = _ref.borderStyle,\n      borderOpacity = _ref.borderOpacity;\n    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));\n    if (borderWidth > 0) {\n      var parentOpacity = node && node.effectiveOpacity() || 1;\n      borderStyle = borderStyle || node && node.css('border-style');\n      borderColor = borderColor || node && node.css('border-color');\n      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;\n      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];\n      var initialProps = {};\n      propsToRestore.forEach(function (propName) {\n        initialProps[propName] = context[propName];\n      });\n      context.lineWidth = borderWidth;\n      context.lineCap = 'butt';\n      context.strokeStyle = borderColor;\n      context.globalAlpha = borderOpacity;\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n      context.stroke();\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        context.stroke();\n        context.globalCompositeOperation = gco;\n      }\n\n      // reset in case we changed the border style\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n      propsToRestore.forEach(function (propName) {\n        context[propName] = initialProps[propName];\n      });\n    }\n  };\n\n  // Taken from cytoscape.js and modified\n  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n\n  // Taken from cytoscape.js\n  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {\n    var halfW = width / 2;\n    var halfH = height / 2;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n    }\n    context.closePath();\n  };\n  var sbgnShapes = $$.sbgn.sbgnShapes = {\n    'empty set': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'macromolecule': true,\n    'simple chemical': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {\n    'simple chemical': true,\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {\n    'macromolecule': true,\n    'complex': true,\n    'nucleic acid feature': true,\n    'simple chemical': true\n  };\n  cyMath.calculateDistance = function (point1, point2) {\n    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);\n    return Math.sqrt(distance);\n  };\n  $$.sbgn.colors = {\n    clone: \"#838383\"\n  };\n  $$.sbgn.getDefaultComplexCornerLength = function () {\n    return 24;\n  };\n  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {\n    var layouts = node.data('auxunitlayouts');\n    for (var side in layouts) {\n      var layout = layouts[side];\n      classes.AuxUnitLayout.draw(layout, node.cy(), context);\n    }\n    context.beginPath();\n    context.closePath();\n  };\n  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {\n    switch (shapeName) {\n      case 'roundrectangle':\n        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);\n        break;\n      case 'bottomroundrectangle':\n        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);\n        break;\n      case 'ellipse':\n        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n        break;\n      case 'complex':\n        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);\n        break;\n      case 'perturbing agent':\n        var points = $$.sbgn.generatePerturbingAgentPoints();\n        drawPolygonPath(context, x, y, width, height, points);\n        break;\n      case 'rectangle':\n        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n        break;\n      case 'stadium':\n        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));\n        break;\n    }\n  };\n\n  // $$.sbgn.AfShapeArgsFn = function (self){\n  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data(\"class\")];\n  // }\n\n  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {\n    //check rectangle at top\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {\n      return true;\n    }\n\n    //check rectangle at bottom\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {\n      return true;\n    }\n\n    //check ellipses\n    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {\n      x -= centerX;\n      y -= centerY;\n      x /= width / 2 + padding;\n      y /= height / 2 + padding;\n      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;\n    };\n\n    // Check bottom right quarter circle\n    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n\n    // Check bottom left quarter circle\n    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n    return false;\n  };\n\n  //we need to force opacity to 1 since we might have state and info boxes.\n  //having opaque nodes which have state and info boxes gives unpleasent results.\n  $$.sbgn.forceOpacityToOne = function (node, context) {\n    var parentOpacity = node.effectiveOpacity();\n    if (parentOpacity === 0) {\n      return;\n    }\n    context.fillStyle = \"rgba(\" + node._private.style[\"background-color\"].value[0] + \",\" + node._private.style[\"background-color\"].value[1] + \",\" + node._private.style[\"background-color\"].value[2] + \",\" + 1 * node.css('opacity') * parentOpacity + \")\";\n  };\n  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath();\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {\n    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);\n    context.fill();\n  };\n  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX;\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX;\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {\n    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);\n  };\n  $$.sbgn.drawBarrel = function (context, x, y, width, height) {\n    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {\n    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  // The old draw implementation for nucleic acid feature\n  // now only used for clone marker drawing of nucleic acid feature\n  // and macromolecule shapes because 'bottomroundrectangle' function\n  // of cytoscape.js did not fit well for this purpose.\n  // Did not change the name yet directly as drawNucAcidFeatureClone etc.\n  // because it actually draws a nucleic acid feature in a different way.\n  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {\n    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var left = centerX - halfWidth,\n      right = centerX + halfWidth;\n    var bottom = centerY - halfHeight,\n      top = centerY + halfHeight;\n    context.beginPath();\n    context.moveTo(left, bottom);\n    context.lineTo(right, bottom);\n    context.lineTo(right, centerY);\n    context.arcTo(right, top, centerX, top, cornerRadius);\n    context.arcTo(left, top, left, centerY, cornerRadius);\n    context.lineTo(left, bottom);\n    context.closePath();\n    context.fill();\n  };\n\n  /*\r\n   * Code taken from https://jsperf.com/string-prototype-endswith\r\n   * Direct implementation seems to work better.\r\n   * Using this improves isMultimer() performance.\r\n   * Makes it take 0.1 or 0.2% less time from the whole\r\n   * loading process, down from ~0.4% initially.\r\n   */\n  function endsWith(str, pattern) {\n    for (var i = pattern.length, l = str.length; i--;) {\n      if (str.charAt(--l) != pattern.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  $$.sbgn.isMultimer = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && endsWith(sbgnClass, \"multimer\")) return true;\n    return false;\n  };\n\n  //this function is created to have same corner length when\n  //complex's width or height is changed\n  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {\n    //cp stands for corner proportion\n    var cpX = Math.min(cornerLength, 0.5 * width) / width;\n    var cpY = Math.min(cornerLength, 0.5 * height) / height;\n    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];\n    return complexPoints;\n  };\n  $$.sbgn.generatePerturbingAgentPoints = function () {\n    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];\n  };\n  $$.sbgn.getDefaultMultimerPadding = function () {\n    return 5;\n  };\n\n  // draw background image of nodes\n  $$.sbgn.drawImage = function (context, imgObj) {\n    if (imgObj) {\n      context.clip();\n      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);\n      context.restore();\n    }\n  };\n  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment');\n  $$.sbgn.registerSbgnNodeShapes = function () {\n    function generateDrawFcn(_ref2) {\n      var plainDrawFcn = _ref2.plainDrawFcn,\n        extraDrawFcn = _ref2.extraDrawFcn,\n        canBeMultimer = _ref2.canBeMultimer,\n        cloneMarkerFcn = _ref2.cloneMarkerFcn,\n        canHaveInfoBox = _ref2.canHaveInfoBox,\n        multimerPadding = _ref2.multimerPadding;\n      return function (context, node, imgObj) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var bgOpacity = node.css('background-opacity');\n        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker;\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          //add multimer shape\n          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n          if (isCloned) {\n            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);\n          }\n        }\n        plainDrawFcn(context, centerX, centerY, width, height);\n        $$.sbgn.drawBorder({\n          context: context,\n          node: node\n        });\n        $$.sbgn.drawImage(context, imgObj);\n        if (extraDrawFcn) {\n          extraDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n        }\n        if (isCloned) {\n          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);\n        }\n        if (canHaveInfoBox) {\n          var oldStyle = context.fillStyle;\n          $$.sbgn.forceOpacityToOne(node, context);\n          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);\n          context.fillStyle = oldStyle;\n        }\n      };\n    }\n    function generateIntersectLineFcn(_ref3) {\n      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,\n        canBeMultimer = _ref3.canBeMultimer,\n        cloneMarkerFcn = _ref3.cloneMarkerFcn,\n        canHaveInfoBox = _ref3.canHaveInfoBox,\n        multimerPadding = _ref3.multimerPadding;\n      return function (node, x, y) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var padding = borderWidth / 2;\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var intersections = [];\n        if (canHaveInfoBox) {\n          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);\n          intersections = intersections.concat(stateAndInfoIntersectLines);\n        }\n        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n        intersections = intersections.concat(nodeIntersectLines);\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);\n          intersections = intersections.concat(multimerIntersectionLines);\n        }\n        return $$.sbgn.closestIntersectionPoint([x, y], intersections);\n      };\n    }\n    function generateCheckPointFcn(_ref4) {\n      var plainCheckPointFcn = _ref4.plainCheckPointFcn,\n        canBeMultimer = _ref4.canBeMultimer,\n        cloneMarkerFcn = _ref4.cloneMarkerFcn,\n        canHaveInfoBox = _ref4.canHaveInfoBox,\n        multimerPadding = _ref4.multimerPadding;\n      return function (x, y, node, threshold) {\n        threshold = threshold || 0;\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth + 2 * threshold;\n        var height = node.outerHeight() - borderWidth + 2 * threshold;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var padding = borderWidth / 2;\n        var nodeCheck = function nodeCheck() {\n          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n        var stateAndInfoCheck = function stateAndInfoCheck() {\n          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);\n        };\n        var multimerCheck = function multimerCheck() {\n          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);\n        };\n        return nodeCheck() || stateAndInfoCheck() || multimerCheck();\n      };\n    }\n    var shapeNames = [\"simple chemical\", \"macromolecule\", \"complex\", \"nucleic acid feature\", \"empty set\", \"biological activity\", \"compartment\", \"oldCompartment\"];\n    shapeNames.forEach(function (shapeName) {\n      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];\n      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];\n      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];\n      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];\n      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];\n      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];\n      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();\n      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];\n      var draw = generateDrawFcn({\n        plainDrawFcn: plainDrawFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        extraDrawFcn: extraDrawFcn\n      });\n      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({\n        plainIntersectLineFcn: plainIntersectLineFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding\n      }) : plainIntersectLineFcn;\n      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({\n        plainCheckPointFcn: plainCheckPointFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding\n      }) : plainCheckPointFcn;\n      var shape = {\n        draw: draw,\n        intersectLine: intersectLine,\n        checkPoint: checkPoint,\n        multimerPadding: multimerPadding\n      };\n      cyBaseNodeShapes[shapeName] = shape;\n    });\n  };\n  $$.sbgn.drawEllipse = function (context, x, y, width, height) {\n    //$$.sbgn.drawEllipsePath(context, x, y, width, height);\n    //context.fill();\n    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n  };\n  $$.sbgn.drawComplex = function (context, x, y, width, height, cornerLength) {\n    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();\n    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {\n    var points = cyMath.generateUnitNgonPoints(4, 0);\n    context.beginPath();\n    var scaleX = width * Math.sqrt(2) / 2,\n      scaleY = height * Math.sqrt(2) / 2;\n    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);\n    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);\n    context.closePath();\n  };\n  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateBiologicalActivityPoints();\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height) {\n    drawRoundRectanglePath(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.generateNucleicAcidPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateBiologicalActivityPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateCompartmentPoints = function () {\n    return math.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.plainDraw = {\n    \"simple chemical\": $$.sbgn.drawSimpleChemical,\n    \"macromolecule\": $$.sbgn.drawRoundRectangle,\n    \"complex\": $$.sbgn.drawComplex,\n    \"nucleic acid feature\": $$.sbgn.drawBottomRoundRectangle,\n    \"empty set\": $$.sbgn.drawEllipse,\n    \"biological activity\": $$.sbgn.drawBiologicalActivity,\n    \"compartment\": $$.sbgn.drawBarrel,\n    \"oldCompartment\": $$.sbgn.drawRoundRectangle\n  };\n\n  // To define an extra drawing for the node that is rendered at the very end,\n  // even after the node background image is drawn.\n  // E.g. cross lines of \"empty set\" nodes.\n  $$.sbgn.extraDraw = {\n    \"empty set\": $$.sbgn.drawCrossLine\n  };\n  $$.sbgn.plainIntersectLine = {\n    \"simple chemical\": function simpleChemical(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"macromolecule\": function macromolecule(centerX, centerY, width, height, x, y, padding) {\n      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);\n    },\n    \"complex\": function complex(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"empty set\": function emptySet(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"biological activity\": function biologicalActivity(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateBiologicalActivityPoints();\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"compartment\": function compartment(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"barrel\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"oldCompartment\": function oldCompartment(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    }\n  };\n  $$.sbgn.plainCheckPoint = {\n    \"simple chemical\": function simpleChemical(x, y, padding, width, height, centerX, centerY) {\n      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n      var halfWidth = width / 2;\n      var halfHeight = height / 2;\n      //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n      var cornerRadius = Math.min(halfWidth, halfHeight);\n      //var cornerRadius = math.getRoundRectangleRadius( width, height );\n      var diam = cornerRadius * 2;\n\n      // Check hBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check top left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check top right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n      return false;\n      //return cyBaseNodeShapes[\"ellipse\"].checkPoint( x, y, padding, width, height, centerX, centerY );\n    },\n    \"macromolecule\": function macromolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"complex\": function complex(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"empty set\": function emptySet(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"biological activity\": function biologicalActivity(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"rectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"compartment\": function compartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"barrel\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"oldCompartment\": function oldCompartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    }\n  };\n  $$.sbgn.cloneMarker = {\n    \"simple chemical\": function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerRadius = Math.min(width / 2, height / 2);\n        var firstCircleCenterX = centerX - width / 2 + cornerRadius;\n        var firstCircleCenterY = centerY;\n        var secondCircleCenterX = centerX + width / 2 - cornerRadius;\n        var secondCircleCenterY = centerY;\n        var bottomCircleCenterX = centerX;\n        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;\n        if (width < height) {\n          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        } else {\n          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        }\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n        var cloneX = centerX;\n        var cloneY = centerY + 3 / 4 * cornerRadius;\n        var cloneWidth = width - 2 * cornerRadius;\n        var cloneHeight = cornerRadius / 2;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cloneWidth = width;\n        var cloneHeight = height / 4;\n        var cloneX = centerX;\n        var cloneY = centerY + 3 * height / 8;\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"macromolecule\": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      $$.sbgn.cloneMarker[\"nucleic acid feature\"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);\n    },\n    \"complex\": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();\n        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;\n        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;\n        var cloneWidth = width;\n        var cloneHeight = height * cpY / 2;\n        var cloneX = centerX;\n        var cloneY = centerY + height / 2 - cloneHeight / 2;\n        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    }\n  };\n  $$.sbgn.closestIntersectionPoint = function (point, intersections) {\n    if (intersections.length <= 0) return [];\n    var closestIntersection = [];\n    var minDistance = Number.MAX_VALUE;\n    for (var i = 0; i < intersections.length; i = i + 2) {\n      var checkPoint = [intersections[i], intersections[i + 1]];\n      var distance = cyMath.calculateDistance(point, checkPoint);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestIntersection = checkPoint;\n      }\n    }\n    return closestIntersection;\n  };\n  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {\n    // var nodeX = node._private.position.x;\n    // var nodeY = node._private.position.y;\n    // var width = node.width();\n    // var height = node.height();\n    // var padding = parseInt(node.css('border-width')) / 2;\n\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var straightLineIntersections;\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Check intersections with arc segments, we have only two arcs for\n    //nucleic acid features\n    var arcIntersections;\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n    return []; // if nothing\n  };\n\n  //this function gives the intersections of any line with the upper half of perturbing agent\n  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX - halfWidth / 2;\n      var rightEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX + halfWidth / 2;\n      var leftEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n    return straightLineIntersections;\n  };\n\n  //this function gives the intersections of any line with a round rectangle\n  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Check intersections with arc segments\n    var arcIntersections;\n\n    // Top Left\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Top Right\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n    if (straightLineIntersections.length > 0) return straightLineIntersections;\n    return []; // if nothing\n  };\n  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {\n    var w = width / 2 + padding;\n    var h = height / 2 + padding;\n    var an = centerX;\n    var bn = centerY;\n    var d = [x2 - x1, y2 - y1];\n    var m = d[1] / d[0];\n    var n = -1 * m * x2 + y2;\n    var a = h * h + w * w * m * m;\n    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;\n    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;\n    var discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n      return [];\n    }\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    var xMin = Math.min(t1, t2);\n    var xMax = Math.max(t1, t2);\n    var yMin = m * xMin - m * x2 + y2;\n    var yMax = m * xMax - m * x2 + y2;\n    return [xMin, yMin, xMax, yMax];\n  };\n  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {\n    var centerX = node._private.position.x;\n    var centerY = node._private.position.y;\n    var padding = parseInt(node.css('border-width')) / 2;\n    var stateAndInfos = node._private.data.statesandinfos;\n    var intersections = [];\n    for (var i = 0; i < stateAndInfos.length; i++) {\n      var state = stateAndInfos[i];\n      if (!state.isDisplayed) {\n        continue;\n      }\n      var infoBoxWidth = state.bbox.w;\n      var infoBoxHeight = state.bbox.h;\n      var currIntersections = null;\n      if (state.clazz == \"state variable\") {\n        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"unit of information\") {\n        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());\n        if (node.data(\"class\") == \"BA macromolecule\" || node.data(\"class\") == \"BA nucleic acid feature\" || node.data(\"class\") == \"BA complex\") {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);\n        } else if (node.data(\"class\") == \"BA unspecified entity\") {\n          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else if (node.data(\"class\") == \"BA simple chemical\") {\n          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);\n        } else if (node.data(\"class\") == \"BA perturbing agent\") {\n          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);\n        }\n      }\n      intersections = intersections.concat(currIntersections);\n    }\n    return intersections;\n  };\n  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {\n    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);\n  };\n  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {\n    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {\n      return true;\n    }\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-renderer.js\n");

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function cdToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  cdToSbgnml.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/cd2sbgnml\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(_error) {\n        callback(null);\n      }\n    });\n  };\n  return cdToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2NkLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJjZFRvU2Jnbm1sIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvY2QtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzPzU2ODMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gY2RUb1NiZ25tbChwYXJhbSkge1xyXG4gICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xyXG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgICB9XHJcbiAgXHJcbiBcclxuICAgIGNkVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cDovL3dlYi5uZXd0ZWRpdG9yLm9yZzo4MDgwL2NkMnNiZ25tbFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB4bWwsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjZFRvU2Jnbm1sO1xyXG4gIFxyXG4gIH1cclxuICBcclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBRUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFFeEIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxVQUFVQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFHQUosVUFBVSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFDQyxRQUFRLEVBQUU7SUFFekNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ0hDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRSwwQ0FBMEM7TUFDL0NDLElBQUksRUFBRU4sR0FBRztNQUNUTyxPQUFPLEVBQUUsU0FBQUEsUUFBVUQsSUFBSSxFQUFFO1FBQ3JCTCxRQUFRLENBQUNLLElBQUksQ0FBQztNQUNsQixDQUFDO01BQ0RFLEtBQUssRUFBRSxTQUFBQSxNQUFVQSxNQUFLLEVBQUU7UUFDdkJQLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFDZjtJQUNKLENBQUMsQ0FBQztFQUNOLENBQUM7RUFFRCxPQUFPUCxVQUFVO0FBRW5CLENBQUMifQ==\n//# sourceURL=webpack-internal:///./src/utilities/cd-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\n// var optionUtilities = require('./option-utilities');\n// var options = optionUtilities.getOptions();\nvar truncate = (__webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\").truncate);\n// only functions not depending on the instances can be used in this way\n// e.g. elementUtilities.generateStateVarId()\nvar elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\nvar ns = {};\n\n// Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.\n// It refers to the object that could be refered by 'this' while there was prototyping in these classes.\n// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'\n// parameter and in this case 'mainObj' can be considered as `the object to be copied`\n\n// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.\n\n// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.\n// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.\n\n// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation\n// classes. While calling a method of AuxiliaryUnit class that method should be called from\n// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the\n// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'\n// method for the auxilary unit object.\n\nvar getAuxUnitClass = function getAuxUnitClass(unit) {\n  // Unit parameter may pass the unit itself or the type of the unit check it\n  var unitType = typeof unit === 'string' ? unit : unit.clazz;\n  // Retrieve and return unit class according to the unit type\n  var className = unitType === 'state variable' ? 'StateVariable' : 'UnitOfInformation';\n  return ns[className];\n};\nns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method\n\nvar AuxiliaryUnit = {};\n\n// -------------- AuxiliaryUnit -------------- //\n// constructs a new auxiliary unit object and returns it\nAuxiliaryUnit.construct = function (parent) {\n  var obj = {};\n  AuxiliaryUnit.setParentRef(obj, parent);\n  obj.id = null;\n  obj.bbox = null;\n  obj.anchorSide = null;\n  obj.isDisplayed = false;\n  obj.style = null;\n  return obj;\n};\nAuxiliaryUnit.getParent = function (mainObj, cy) {\n  var parent = mainObj.parent;\n  // If parent variable stores the id of parent instead of the actual parent get the actual parent by id\n  if (typeof parent === 'string') {\n    return cy.getElementById(parent);\n  }\n  return parent;\n};\nAuxiliaryUnit.setParentRef = function (mainObj, newParent) {\n  if (mainObj && newParent) {\n    // Reference to id instead of the node itself to avaoid circular reference\n    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();\n  }\n};\nAuxiliaryUnit.checkPoint = function (x, y, node, threshold) {\n  var centerX = node._private.position.x;\n  var centerY = node._private.position.y;\n  var padding = parseInt(node.css('border-width')) / 2;\n  var stateAndInfos = node._private.data.statesandinfos;\n  var cyBaseNodeShapes = cytoscape.baseNodeShapes;\n  //    threshold = parseFloat(threshold);\n\n  for (var i = 0; i < stateAndInfos.length; i++) {\n    var state = stateAndInfos[i];\n    if (!state.isDisplayed) {\n      continue;\n    }\n    var stateWidth = parseFloat(state.bbox.w) + threshold;\n    var stateHeight = parseFloat(state.bbox.h) + threshold;\n    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());\n    var stateCenterX = coord.x;\n    var stateCenterY = coord.y;\n    var checkPoint;\n    if (state.clazz == \"state variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"unit of information\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    }\n    if (checkPoint == true) {\n      return state;\n    }\n  }\n  return null;\n};\n\n/*\r\n * Return a new AuxiliaryUnit object. A new parent reference and new id can\r\n * optionnally be passed.\r\n */\nAuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {\n  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();\n  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  AuxiliaryUnit.setParentRef(newUnit, parentToSet);\n  newUnit.id = newId ? newId : mainObj.id;\n  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);\n  newUnit.coordType = mainObj.coordType;\n  newUnit.anchorSide = mainObj.anchorSide;\n  newUnit.isDisplayed = mainObj.isDisplayed;\n  newUnit.style = mainObj.style;\n  return newUnit;\n};\n\n// draw the auxiliary unit at its position\nAuxiliaryUnit.draw = function (mainObj, cy, context) {\n  var unitClass = getAuxUnitClass(mainObj);\n  var coords = unitClass.getAbsoluteCoord(mainObj, cy);\n  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);\n  if (unitClass.hasText(mainObj, cy)) {\n    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);\n  }\n  mainObj.isDisplayed = true;\n};\n\n// to be implemented by children\nAuxiliaryUnit.getText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.hasText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {\n  var style = mainObj.style;\n  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);\n  var tmp_ctxt = context.fillStyle;\n  context.fillStyle = style['background-color'];\n  context.fill();\n  context.fillStyle = tmp_ctxt;\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var borderStyle = style.dashed ? 'dashed' : undefined;\n  var borderWidth = style['border-width'];\n  // Selected nodes have a specific border color so infobox should have the same\n  // border color when the node is selected. May need to be updated if style of\n  // selected nodes is updated in a different way.\n  var borderColor = parent.selected() ? null : style['border-color'];\n  cytoscape.sbgn.drawBorder({\n    context: context,\n    node: parent,\n    borderStyle: borderStyle,\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  });\n};\n\n// draw the statesOrInfo's label at given position\nAuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {\n  // access the sbgnvizParams set for cy\n  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();\n  var unitClass = getAuxUnitClass(mainObj);\n  var parent = unitClass.getParent(mainObj, cy);\n  var style = mainObj.style;\n\n  // part of : $$.sbgn.drawText(context, textProp);\n  // save style before modification\n  var oldFont = context.font;\n  var oldStyle = context.fillStyle;\n  var oldOpacity = context.globalAlpha;\n  context.font = style['font-style'] + \" \" + style['font-weight'] + \" \" + style['font-size'] + \"px \" + style['font-family'];\n  context.fillStyle = style['font-color'];\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?\n\n  var text;\n  if (options.fitLabelsToInfoboxes()) {\n    // here we memoize the truncated text into _textCache,\n    // as it is not something that changes so much\n    text = unitClass.getText(mainObj, cy);\n    var key = text + context.font + mainObj.bbox.w;\n    if (mainObj._textCache && mainObj._textCache[key]) {\n      text = mainObj._textCache[key];\n    } else {\n      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);\n      if (!mainObj._textCache) {\n        mainObj._textCache = {};\n      }\n      mainObj._textCache[key] = text;\n    }\n  } else {\n    text = unitClass.getText(mainObj, cy);\n  }\n  context.fillText(text, centerX, centerY);\n\n  // restore saved style\n  context.fillStyle = oldStyle;\n  context.font = oldFont;\n  context.globalAlpha = oldOpacity;\n};\nAuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  /* if(parent.data().complexCalculatedPadding){\r\n    padding = Number(parent.data().complexCalculatedPadding);\r\n    //delete parent._private.data.complexCalculatedPadding;\r\n  }else{\r\n    padding = parent.padding();\r\n  } */\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\")); //parent.data()['border-width'];\n  var position = parent.position();\n  if (mainObj === undefined || parent === undefined || position === undefined) {\n    return;\n  }\n  var borderWidth = parent.data()[\"border-width\"];\n  if (borderWidth === undefined) {\n    return;\n  }\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  // due to corner of barrel shaped compartment shift absX to right\n  /*  if (parent.data(\"class\") == \"compartment\"){\r\n       absX += parent.outerWidth() * 0.1;\r\n   } */\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  /*  if (parent.data(\"class\") == \"compartment\"){\r\n     absX += parent.outerWidth() * 0.1;\r\n   }; */\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {\n  if (mainObj === undefined) {\n    return;\n  }\n  if (parentNode !== undefined) {\n    var parent = parentNode;\n  } else {\n    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  }\n  var position = parent.position();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var padding = parent.padding();\n  /*  if(parent.data().complexCalculatedPadding){\r\n     padding = Number(parent.data().complexCalculatedPadding)\r\n   }else{\r\n     padding = parent.padding();\r\n   } */\n\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n\n  /* if (parent.data(\"class\") == \"compartment\"){\r\n    absX -= parent.outerWidth() * 0.1;\r\n  } */\n\n  var relX, relY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);\n    relY = mainObj.anchorSide == \"top\" ? 0 : 100;\n  } else {\n    relX = mainObj.anchorSide == \"left\" ? 0 : 100;\n    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);\n  }\n  relX = relX < 0 ? 0 : relX;\n  relX = relX > 100 ? 100 : relX;\n  relY = relY < 0 ? 0 : relY;\n  relY = relY > 100 ? 100 : relY;\n  return {\n    x: relX,\n    y: relY\n  };\n};\nAuxiliaryUnit.setAnchorSide = function (mainObj, node) {\n  var thisX = mainObj.bbox.x;\n  var thisY = mainObj.bbox.y;\n  var thisH = mainObj.bbox.h;\n  var thisW = mainObj.bbox.w;\n  var width, height, padding;\n  if (node.data(\"originalW\")) {\n    width = node.data(\"originalW\");\n    padding = 0;\n  } else {\n    width = node.width();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  if (node.data(\"originalH\")) {\n    height = node.data(\"originalH\");\n    padding = 0;\n  } else {\n    height = node.height();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  var parentX = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').x : node.position().x;\n  var parentY = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').y : node.position().y;\n  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));\n  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));\n  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));\n  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));\n  var centerX = Number((thisX + thisW / 2).toFixed(2));\n  var centerY = Number((thisY + thisH / 2).toFixed(2));\n  if (centerY == parentY1) {\n    mainObj.anchorSide = \"top\";\n  } else if (centerY == parentY2) {\n    mainObj.anchorSide = \"bottom\";\n  } else if (centerX == parentX1) {\n    mainObj.anchorSide = \"left\";\n  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {\n    mainObj.anchorSide = \"right\";\n  } else {\n    return false;\n  }\n  return true;\n};\nAuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {\n  // add state var to the parent's statesandinfos\n  if (typeof index != \"undefined\") {\n    // specific index provided (for undo/redo consistency)\n    parentNode.data('statesandinfos').splice(index, 0, mainObj);\n  } else {\n    parentNode.data('statesandinfos').push(mainObj);\n  }\n  if (!parentNode.data('auxunitlayouts')) {\n    // ensure minimal initialization\n    parentNode.data('auxunitlayouts', {});\n  }\n  if (!location) {\n    // location not provided, need to define it automatically\n    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);\n  }\n  // here we are sure to have a location even if it was not provided as argument\n  // get or create the necessary layout\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var layout = parentNode.data('auxunitlayouts')[location];\n  mainObj.anchorSide = location;\n  switch (location) {\n    case \"top\":\n      mainObj.bbox.y = 0;\n      break;\n    case \"bottom\":\n      mainObj.bbox.y = 100;\n      break;\n    case \"left\":\n      mainObj.bbox.x = 0;\n      break;\n    case \"right\":\n      mainObj.bbox.x = 100;\n      break;\n  }\n  // add stateVar to layout, precomputing of relative coords will be triggered accordingly\n  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);\n  return insertedPosition;\n};\nAuxiliaryUnit.removeFromParent = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];\n  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);\n  if (AuxUnitLayout.isEmpty(parentLayout)) {\n    delete parent.data('auxunitlayouts')[mainObj.anchorSide];\n  }\n  var statesandinfos = parent.data('statesandinfos');\n  var index = statesandinfos.indexOf(mainObj);\n  statesandinfos.splice(index, 1);\n};\nAuxiliaryUnit.getPositionIndex = function (mainObj, cy) {\n  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);\n};\nns.AuxiliaryUnit = AuxiliaryUnit;\n// -------------- END AuxiliaryUnit -------------- //\n\n// -------------- StateVariable -------------- //\n/**\r\n * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)\r\n */\n\nvar StateVariable = {};\n\n// StateVariable extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  StateVariable[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\nStateVariable.construct = function (value, stateVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.state = {};\n  obj.state.value = value;\n  obj.state.variable = null;\n  obj.stateVariableDefinition = stateVariableDefinition;\n  obj.clazz = \"state variable\";\n  return obj;\n};\nStateVariable.getText = function (mainObj) {\n  var stateValue = mainObj.state.value || '';\n  var stateVariable = mainObj.state.variable ? \"@\" + mainObj.state.variable : \"\";\n  return stateValue + stateVariable;\n};\nStateVariable.hasText = function (mainObj) {\n  return mainObj.state.value && mainObj.state.value != \"\" || mainObj.state.variable && mainObj.state.variable != \"\";\n};\n\n/*this function is called upon creation of state variable and it returns the location information of the added state variable\r\n*/\nStateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new state var of info\n  var stateVar = StateVariable.construct();\n  StateVariable.setParentRef(stateVar, parentNode);\n  stateVar.value = value;\n  stateVar.variable = variable;\n  stateVar.state = {\n    value: value,\n    variable: variable\n  };\n  stateVar.bbox = bbox;\n  stateVar.style = style;\n  if (id) {\n    stateVar.id = id;\n  }\n  // link to layout\n  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);\n  return {\n    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),\n    location: stateVar.anchorSide,\n    position: position\n  };\n};\nStateVariable.remove = function (mainObj, cy) {\n  var position = StateVariable.getPositionIndex(mainObj, cy);\n  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  StateVariable.removeFromParent(mainObj, cy);\n  //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n  return {\n    clazz: \"state variable\",\n    state: {\n      value: mainObj.state.value,\n      variable: mainObj.state.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nStateVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);\n  newStateVar.state = jQuery.extend(true, {}, mainObj.state);\n  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;\n  newStateVar.clazz = mainObj.clazz;\n  return newStateVar;\n};\nns.StateVariable = StateVariable;\n// -------------- END StateVariable -------------- //\n\n// -------------- UnitOfInformation -------------- //\n/**\r\n * parent can be an EPN, compartment or subunit\r\n */\n\nvar UnitOfInformation = {};\n\n// UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  UnitOfInformation[prop] = AuxiliaryUnit[prop];\n}\n\n// Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object\nUnitOfInformation.construct = function (value, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateUnitOfInfoId();\n  obj.label = {\n    text: value\n  }; // from legacy code, contains {text: }\n  obj.clazz = \"unit of information\";\n  return obj;\n};\nUnitOfInformation.getText = function (mainObj) {\n  return mainObj.label.text;\n};\nUnitOfInformation.hasText = function (mainObj) {\n  return mainObj.label.text && mainObj.label.text != \"\";\n};\n\n/**\r\n * Creates a unit of info and links everything accordingly\r\n * @param parentNode - the cytoscape element hosting the unit of information\r\n * @param value - its text\r\n * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)\r\n * @param [position] - its position in the order of elements placed on the same location\r\n * @param [index] - its index in the statesandinfos list\r\n */\nUnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {\n  // create the new unit of info\n  var unit = UnitOfInformation.construct(value, parentNode);\n  unit.bbox = bbox;\n  unit.style = style;\n  if (id) {\n    unit.id = id;\n  }\n\n  //console.log(\"will insert on\", location, position);\n  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);\n  return {\n    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),\n    location: unit.anchorSide,\n    position: position\n  };\n};\nUnitOfInformation.remove = function (mainObj, cy) {\n  var position = UnitOfInformation.getPositionIndex(mainObj, cy);\n  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  UnitOfInformation.removeFromParent(mainObj, cy);\n  //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n  return {\n    clazz: \"unit of information\",\n    label: {\n      text: mainObj.label.text\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nUnitOfInformation.copy = function (mainObj, cy, newParent, newId) {\n  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);\n  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);\n  newUnitOfInfo.clazz = mainObj.clazz;\n  return newUnitOfInfo;\n};\nns.UnitOfInformation = UnitOfInformation;\n// -------------- END UnitOfInformation -------------- //\n\n// -------------- EntityType -------------- //\n/**\r\n * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType\r\n * This class will hold the information regarding state variable, that are shared between all myosins\r\n */\n\nvar EntityType = {};\n\n// Constructs an EntityType object and returns it\nEntityType.construct = function (name, EPN) {\n  var obj = {};\n  obj.name = name; // normally the same as its EPNs\n  obj.stateVariableDefinitions = []; // 0 or many shared state definitions\n  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\nEntityType.createNewDefinitionFor = function (mainObj, stateVar) {\n  var newDefinition = StateVariableDefinition.construct();\n  newDefinition.entityType = mainObj;\n  newDefinition.stateVariables.push(stateVar);\n  stateVar.stateVariableDefinition = newDefinition;\n  stateVar.parent.data('entityType', mainObj);\n  mainObj.stateVariableDefinitions.push(newDefinition);\n};\nEntityType.assignStateVariable = function (mainObj, stateVar) {\n  // first trivial case, no stateDefinition yet for this entityType, so this is a new one\n  if (mainObj.stateVariableDefinitions.length == 0) {\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  } else {\n    // if definitions are already present, we need to match those to the current stateVariable\n    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {\n      var matchStateDef = mainObj.stateVariableDefinitions[i];\n      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {\n        matchStateDef.stateVariables.push(stateVar);\n        stateVar.stateVariableDefinition = matchStateDef;\n        stateVar.parent.data('entityType', mainObj);\n        return;\n      }\n    }\n    // if nothing was matched among the current stateVarDef of this entityType, create new one\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  }\n};\nns.EntityType = EntityType;\n// -------------- END EntityType -------------- //\n\n// -------------- StateVariableDefinition -------------- //\n/**\r\n * The state variable definition is something shared across different EPNs\r\n * The concerned EPNs are linked through the entitype reference\r\n */\n\nvar StateVariableDefinition = {};\n\n// Constructs a new StateVariableDefinition object and returns it\nStateVariableDefinition.construct = function (name, entityType) {\n  var obj = {};\n  obj.name = name;\n  obj.entityType = entityType; // reference to owning entity type\n  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\n\n/**\r\n * returns an array of elements that share this state definition\r\n */\nStateVariableDefinition.getConcernedEPNs = function (mainObj) {\n  return mainObj.entityType.EPNs;\n};\n\n/**\r\n * Guess if the provided stateVariable belongs to this stateVarDefinition\r\n * We consider it does, if either the statevar.value or statevar.variable are matching one\r\n * if the statevar in the set of the StateVarDef\r\n * This is because we normally compare only stateVariables from the same entityType\r\n */\nStateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {\n  for (var i = 0; i < mainObj.stateVariables.length; i++) {\n    var matchStateVar = mainObj.stateVariables[i];\n    // Don't match a stateVar against another one from the same element.\n    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions\n    if (matchStateVar.parent === stateVar.parent) {\n      continue;\n    }\n    //console.log(\"try\", [matchStateVar.value, matchStateVar.variable], [stateVar.value, stateVar.variable]);\n    // normal sure case. Example:\n    // P T134 - undefined T134\n    // P undef - P undef\n    if (\n    //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||\n    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {\n      return true;\n    }\n    // more subtle case, with empty stateVar. Look only at value and discard variable\n    // example: undef undef - P undef\n    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {\n      return true;\n    }\n  }\n  return false;\n};\nns.StateVariableDefinition = StateVariableDefinition;\n// -------------- END StateVariableDefinition -------------- //\n\n// -------------- AuxUnitLayout -------------- //\n/**\r\n * Responsible for laying out the auxiliary units contained on a same edge\r\n */\n\nvar AuxUnitLayout = {};\nAuxUnitLayout.construct = function (parentNode, location, alignment) {\n  var obj = {};\n  obj.units = [];\n  obj.location = location;\n  obj.alignment = alignment || \"left\"; // this was intended to be used, but it isn't for now\n  AuxUnitLayout.setParentNodeRef(obj, parentNode);\n  obj.renderLengthCache = [];\n  obj.lengthUsed = 0;\n\n  // specific rules for the layout\n  if (parentNode.data('class') == \"simple chemical\") {\n    obj.outerMargin = 3;\n  }\n  return obj;\n};\nAuxUnitLayout.getParentNode = function (mainObj, cy) {\n  //console.log(mainObj);\n  var parentNode = mainObj.parentNode;\n\n  // If parentNode is id of parent node rather than being itself get the parent node by that id\n  if (typeof parentNode === 'string') {\n    return cy.getElementById(parentNode);\n  }\n  return parentNode;\n};\nAuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {\n  if (mainObj && parentNode) {\n    // Keep id of parent node to avaoid circular references\n    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();\n  }\n};\n\n/**\r\n * outerMargin: the left and right space left between the side of the node, and the first (and last) box\r\n * unitGap: the space between the auxiliary units\r\n * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,\r\n * forcing a minimum size for the node\r\n * maxUnitDisplayed: show at most this amount of units, even when there is enough space\r\n *\r\n * These options can be defined at the instance level. If it is found in an instance, then it\r\n * takes precedence. If not found, the following class' values are used.\r\n */\nAuxUnitLayout.outerMargin = 5;\nAuxUnitLayout.unitGap = 5;\nAuxUnitLayout.currentTopUnitGap = 5;\nAuxUnitLayout.currentBottomUnitGap = 5;\nAuxUnitLayout.currentLeftUnitGap = 5;\nAuxUnitLayout.currentRightUnitGap = 5;\nAuxUnitLayout.alwaysShowAuxUnits = true;\nAuxUnitLayout.maxUnitDisplayed = -1;\nAuxUnitLayout.lastPos = -1;\nAuxUnitLayout.update = function (mainObj, cy) {\n  //AuxUnitLayout.precomputeCoords(mainObj, cy);\n};\nAuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {\n  if (typeof position != \"undefined\") {\n    //console.log(\"add unit at positiion\", position);\n    mainObj.units.splice(position, 0, unit);\n  } else {\n    mainObj.units.push(unit);\n    position = mainObj.units.length - 1;\n  }\n  if (preComputed === undefined || preComputed === false) {\n    AuxUnitLayout.computeCoords(mainObj, cy, unit);\n    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n    var locations = AuxUnitLayout.checkFit(parentNode, cy);\n    if (locations.filter(function (loc) {\n      return loc == mainObj.location;\n    }).length > 0) {\n      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);\n    }\n  }\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  //AuxUnitLayout.update(mainObj, cy, true);\n  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\r\n    // set a minimum size according to both sides on the same orientation\r\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\r\n    // need to resize the parent in case the space was too small\r\n    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);\r\n  }*/\n  //cy.style().update(); // <- was it really necessary ?\n  return position;\n};\nAuxUnitLayout.computeCoords = function (mainObj, cy, unit) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var location = mainObj.location;\n  var node = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (location === \"top\" || location === \"bottom\") {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n      // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  } //We don't have the right or left addition cases yet\n};\nAuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {\n  var index = mainObj.units.indexOf(unit);\n  mainObj.units.splice(index, 1);\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  /*AuxUnitLayout.update(mainObj, cy, true);\r\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\r\n    // set a minimum size according to both sides on the same orientation\r\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\r\n  }*/\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  parentNode.data('border-width', parentNode.data('border-width'));\n};\n\n/**\r\n * reorder boxes using their defined positions. From left to right and top to bottom.\r\n * this ensures that their order in the layout's list corresponds to the reality of the map.\r\n */\nAuxUnitLayout.reorderFromPositions = function (mainObj, cy) {\n  mainObj.units.sort(function (a, b) {\n    if (mainObj.location == \"top\" || mainObj.location == \"bottom\") {\n      if (a.bbox.x < b.bbox.x) {\n        return -1;\n      }\n      if (a.bbox.x > b.bbox.x) {\n        return 1;\n      }\n    } else {\n      if (a.bbox.y < b.bbox.y) {\n        return -1;\n      }\n      if (a.bbox.y > b.bbox.y) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n  //console.log(\"units after reoarder\", this.units);\n  /*AuxUnitLayout.updateLengthCache(mainObj, cy);\r\n  AuxUnitLayout.update(mainObj, cy, true);*/\n};\n\n/**\r\n * use a cached list to determine what is the length needed to draw x aux units.\r\n * can then be compared against the parent node's dimensions, to decide how many\r\n * aux units to draw.\r\n */\nAuxUnitLayout.updateLengthCache = function (mainObj, cy) {\n  mainObj.renderLengthCache = [0];\n  var previous = AuxUnitLayout.getOuterMargin(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var currentLength;\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      currentLength = mainObj.units[i].bbox.w;\n    } else {\n      currentLength = mainObj.units[i].bbox.h;\n    }\n    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));\n    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);\n  }\n};\n\n/**\r\n * Use the cached precomputed lengths to decide how many units we are capable of drawing,\r\n * considering the size of the parent node.\r\n * The number returned says: we are able to draw the N first units of the lists.\r\n * Unused for now.\r\n */\nAuxUnitLayout.getDrawableUnitAmount = function (mainObj) {\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // bypass all this\n    return mainObj.units.length;\n  }\n\n  // get the length of the side on which we draw\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n  // loop over the cached precomputed lengths\n  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {\n    if (mainObj.renderLengthCache[i] > availableSpace) {\n      // stop if we overflow\n      return i - 1;\n    }\n  }\n  return mainObj.units.length;\n};\nAuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {\n  // get the length of the side on which we draw\n\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n    // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners\n    if (AuxUnitLayout.getParentNode(mainObj, cy).data(\"class\") == \"compartment\") availableSpace *= 0.8;\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n\n  // there is always n+1 elements in the cachedLength for n units\n  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);\n  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?\n    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) // is there no limit? or are we under that limit?\n    || alwaysShowAuxUnits) {\n      // do we always want to show everything regardless?\n      mainObj.units[i].isDisplayed = true;\n    } else {\n      mainObj.units[i].isDisplayed = false;\n    }\n  }\n};\nAuxUnitLayout.getUsedWidth = function (node, tb) {\n  var units = tb.units;\n  var totalWidth = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalWidth += units[i].bbox.w;\n  }\n  return totalWidth;\n};\nAuxUnitLayout.getUsedHeight = function (node, tb) {\n  var units = tb.units;\n  var totalHeight = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalHeight += units[i].bbox.h;\n  }\n  return totalHeight;\n};\nAuxUnitLayout.getUsedLengthTB = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.getUsedLengthLR = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.setCurrentGap = function (location, value) {\n  if (location === \"top\") {\n    AuxUnitLayout.currentTopUnitGap = value;\n  } else if (location === \"bottom\") {\n    AuxUnitLayout.currentBottomUnitGap = value;\n  } else if (location === \"right\") {\n    AuxUnitLayout.currentRightUnitGap = value;\n  } else {\n    AuxUnitLayout.currentLeftUnitGap = value;\n  }\n};\nAuxUnitLayout.getCurrentGap = function (location) {\n  if (location === \"top\") {\n    return AuxUnitLayout.currentTopUnitGap;\n  } else if (location === \"bottom\") {\n    return AuxUnitLayout.currentBottomUnitGap;\n  } else if (location === \"right\") {\n    return AuxUnitLayout.currentRightUnitGap;\n  } else {\n    return AuxUnitLayout.currentLeftUnitGap;\n  }\n};\nAuxUnitLayout.checkFit = function (node, cy, forceCheck) {\n  var fitLocations = [];\n  for (var location in node.data('auxunitlayouts')) {\n    if (forceCheck !== undefined && location !== forceCheck) {\n      continue;\n    }\n    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {\n      fitLocations.push(location);\n      continue;\n    }\n    var unit = node.data('auxunitlayouts')[location];\n    var units = unit.units;\n    if (units.length === 0) {\n      continue;\n    }\n    var firstUnit = units[0];\n    var lastUnit = units[units.length - 1];\n    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);\n    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n    var gap = AuxUnitLayout.getCurrentGap(location);\n    var padding = node.padding();\n    if (units.length > 0) {\n      //For any case of removal\n      if (location === \"top\" || location === \"bottom\") {\n        var parentX1 = node.position().x - node.width() / 2 - padding;\n        var parentX2 = node.position().x + node.width() / 2 + padding;\n        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;\n        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;\n        if (parentX2 < lastX2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {\r\n            fitLocations.push(location);\r\n        } */\n      } else {\n        var parentY1 = node.position().y - node.height() / 2 - padding;\n        var parentY2 = node.position().y + node.height() / 2 + padding;\n        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;\n        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;\n        if (parentY2 < lastY2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {\r\n            fitLocations.push(location);\r\n        } */\n      }\n    }\n  }\n  return fitLocations;\n};\nAuxUnitLayout.setIdealGap = function (node, location) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var estimatedGap;\n  var auxUnit = node.data('auxunitlayouts')[location];\n  if (auxUnit === undefined) {\n    return 0;\n  }\n  if (auxUnit.units.length <= 0 || !auxUnit.units) {\n    return 0;\n  }\n  var units = auxUnit.units;\n  if (location === \"top\" || location === \"bottom\") {\n    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n\n    //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.w + estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } else {\n    //Find total left length\n    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n    //Compare the side lengths\n    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n    //Else scale by using available space, reducing margins and gaps.\n    //Check if new gap is enough to fit\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.h + estimatedGap;\n    }\n    //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n  }\n  AuxUnitLayout.setCurrentGap(location, estimatedGap);\n};\nAuxUnitLayout.fitUnits = function (node, cy, locations) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentX2 = position.x + parentWidth / 2 + padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var parentY2 = position.y + parentHeight / 2 + padding;\n\n  //Get Parent node and find parent width\n\n  var estimatedGap;\n  for (var index = 0; index < locations.length; index++) {\n    var location = locations[index];\n    var auxUnit = node.data('auxunitlayouts')[location];\n    if (auxUnit === undefined) {\n      continue;\n    }\n    if (auxUnit.units.length <= 0 || !auxUnit.units) {\n      continue;\n    }\n    var units = auxUnit.units;\n    if (location === \"top\" || location === \"bottom\") {\n      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n\n      //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.w + estimatedGap;\n      }\n      AuxUnitLayout.setCurrentGap(location, estimatedGap);\n    } else {\n      //Find total left length\n      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n      //Compare the side lengths\n      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n      //Else scale by using available space, reducing margins and gaps.\n      //Check if new gap is enough to fit\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.h + estimatedGap;\n      }\n      //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  }\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  node.data('border-width', node.data('border-width'));\n};\n\n// Calculate total length used in a side\n// TODO find a way to refactor, remove ugliness of top-bottom/left-right.\nAuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);\n  var finalLengthUsed = lengthUsed;\n  var unitGap = AuxUnitLayout.getUnitGap(mainObj);\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    // change the coordinate system of the auxiliary unit according to the chosen layout\n    var auxUnit = mainObj.units[i];\n    if (auxUnit.coordType != \"relativeToSide\" || doForceUpdate) {\n      if (auxUnit.coordType == \"relativeToCenter\" || doForceUpdate) {\n        if (AuxUnitLayout.isTorB(mainObj)) {\n          //auxUnit.bbox.y = 0;\n          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;\n        } else {\n          //auxUnit.bbox.x = 0;\n          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;\n        }\n      }\n      auxUnit.coordType = \"relativeToSide\";\n    }\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      //auxUnit.bbox.y = 0;\n      lengthUsed += auxUnit.bbox.w + unitGap;\n    } else {\n      //auxUnit.bbox.x = 0;\n      lengthUsed += auxUnit.bbox.h + unitGap;\n    }\n    if (auxUnit.isDisplayed) {\n      finalLengthUsed = lengthUsed;\n    }\n  }\n  // adjust the length, should be composed of outerMargin on the end, not unitGap\n  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);\n  mainObj.lengthUsed = finalLengthUsed;\n};\nAuxUnitLayout.draw = function (mainObj, cy, context) {\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var auxUnit = mainObj.units[i];\n    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);\n  }\n};\nAuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {\n  var location = unit.anchorSide;\n  var posX = unit.bbox.x;\n  var posY = unit.bbox.y;\n  if (!parentNode.data('auxunitlayouts')[oldLocation]) {\n    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);\n  }\n  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];\n  var deleteUnits = oldAuxUnit.units;\n\n  //Delete from old location\n  var deleteIndex;\n  for (var i = 0; i < deleteUnits.length; i++) {\n    if (deleteUnits[i] === unit) {\n      deleteIndex = i;\n      break;\n    }\n  }\n  deleteUnits.splice(deleteIndex, 1);\n  //If new is not constructed contruct interval\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];\n  var insertUnits = insertAuxUnit.units;\n  var index = 0;\n  //Insert into new unit array\n  if (location === \"top\" || location === \"bottom\") {\n    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {\n      index++;\n    }\n  } else {\n    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {\n      index++;\n    }\n  }\n  insertUnits.splice(index, 0, unit);\n};\nAuxUnitLayout.isEmpty = function (mainObj) {\n  return mainObj.units.length == 0;\n};\nAuxUnitLayout.unitCount = function (mainObj) {\n  return mainObj.units.length;\n};\nAuxUnitLayout.unitLength = function (mainObj) {\n  var units = mainObj.units;\n  var rightMostPoint = 0;\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n    if (box.x + box.w / 2 > rightMostPoint) {\n      rightMostPoint = box.x + box.w / 2;\n    }\n  }\n  return rightMostPoint;\n};\n\n//Get Unit Gaps\nAuxUnitLayout.getCurrentTopGap = function () {\n  return AuxUnitLayout.currentTopUnitGap;\n};\nAuxUnitLayout.getCurrentBottomGap = function () {\n  return AuxUnitLayout.currentBottomUnitGap;\n};\nAuxUnitLayout.getCurrentLeftGap = function () {\n  return AuxUnitLayout.currentLeftUnitGap;\n};\nAuxUnitLayout.getCurrentRightGap = function () {\n  return AuxUnitLayout.currentRightUnitGap;\n};\n\n/**\r\n * Auto choose the next layout. To add a new aux unit, for example.\r\n */\nAuxUnitLayout.selectNextAvailable = function (node) {\n  var top = node.data('auxunitlayouts').top;\n  var bottom = node.data('auxunitlayouts').bottom;\n  var resultLocation = \"top\";\n  // start by adding on top if free\n  if (!top || AuxUnitLayout.isEmpty(top)) {\n    resultLocation = \"top\";\n  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {\n    resultLocation = \"bottom\";\n  } else {\n    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {\n      resultLocation = \"top\";\n    } else {\n      resultLocation = \"bottom\";\n    }\n  }\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n  return resultLocation;\n};\nAuxUnitLayout.resizeParent = function (mainObj, cy, length) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    if (parentNode.data('bbox').w < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"centerright\", parentNode]);\n      parentNode.data('bbox').w = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"centerright\", parentNode]);\n    }\n  } else {\n    if (parentNode.data('bbox').h < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"bottomcenter\", parentNode]);\n      parentNode.data('bbox').h = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"bottomcenter\", parentNode]);\n    }\n  }\n};\nAuxUnitLayout.isTorB = function (mainObj) {\n  return mainObj.location == \"top\" || mainObj.location == \"bottom\";\n};\nAuxUnitLayout.isLorR = function (mainObj) {\n  return mainObj.location == \"left\" || mainObj.location == \"right\";\n};\nAuxUnitLayout.setParentMinLength = function (mainObj, cy) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  var parentLayouts = parentNode.data('auxunitlayouts');\n  switch (mainObj.location) {\n    case \"top\":\n      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;\n      break;\n    case \"bottom\":\n      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;\n      break;\n    case \"left\":\n      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;\n      break;\n    case \"right\":\n      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;\n      break;\n  }\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));\n  } else {\n    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));\n  }\n};\nAuxUnitLayout.getOuterMargin = function (mainObj) {\n  if (typeof mainObj.outerMargin !== \"undefined\" && mainObj.outerMargin !== null) {\n    return mainObj.outerMargin;\n  } else {\n    return AuxUnitLayout.outerMargin;\n  }\n};\nAuxUnitLayout.getUnitGap = function (mainObj) {\n  if (typeof mainObj.unitGap !== \"undefined\" && mainObj.unitGap !== null) {\n    return mainObj.unitGap;\n  } else {\n    return AuxUnitLayout.unitGap;\n  }\n};\nAuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\" && mainObj.alwaysShowAuxUnits !== null) {\n    return mainObj.alwaysShowAuxUnits;\n  } else {\n    return AuxUnitLayout.alwaysShowAuxUnits;\n  }\n};\nAuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\" && mainObj.maxUnitDisplayed !== null) {\n    return mainObj.maxUnitDisplayed;\n  } else {\n    return AuxUnitLayout.maxUnitDisplayed;\n  }\n};\n\n/*\r\n *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.\r\n */\nAuxUnitLayout.copy = function (mainObj, cy, newParent) {\n  var newLayout = AuxUnitLayout.construct(newParent);\n  // Copying the same reference to units would be inconsistent.\n  // Duplicating owned units goes beyonnd the scope, because we need to assign\n  // ids that are tied to the global cound of units of a node.\n  // So duplicating units is something that should be properly done outside of this function.\n  // TODO that is a bit dirty, find a nice modular way to arrange that\n  newLayout.units = [];\n  newLayout.location = mainObj.location;\n  newLayout.alignment = mainObj.alignment;\n  AuxUnitLayout.setParentNodeRef(newLayout, newParent);\n  newLayout.renderLengthCache = mainObj.renderLengthCache;\n  newLayout.lengthUsed = mainObj.lengthUsed;\n  if (typeof mainObj.outerMargin !== \"undefined\") {\n    newLayout.outerMargin = mainObj.outerMargin;\n  }\n  if (typeof mainObj.unitGap !== \"undefined\") {\n    newLayout.unitGap = mainObj.unitGap;\n  }\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\") {\n    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;\n  }\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\") {\n    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;\n  }\n  return newLayout;\n};\nns.AuxUnitLayout = AuxUnitLayout;\n// -------------- END AuxUnitLayout -------------- //\n\nmodule.exports = ns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/classes.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*\r\n * Common utilities for elements includes both general utilities and sbgn specific utilities\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var optionUtilities, graphUtilities;\n  var options;\n  var cy;\n  function elementUtilities(param) {\n    // Init params to be accessed by elementUtilities\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  var inArray = function inArray(value, arr) {\n    return $.inArray(value, arr) !== -1;\n  };\n\n  // initialize map type\n  elementUtilities.mapType = 'PD';\n  elementUtilities.fileFormat = undefined;\n  elementUtilities.PD = {}; // namespace for all PD specific stuff\n  elementUtilities.AF = {}; // namespace for all AF specific stuff\n  elementUtilities.SIF = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.graphTopologyLocked = false;\n\n  // see http://stackoverflow.com/a/8809472\n  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)\n  // don't comply with xsd:SID type that must not begin with a number\n  elementUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n      d += performance.now(); //use high-precision timer if available\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n  elementUtilities.generateNodeId = function () {\n    return 'nwtN_' + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateEdgeId = function () {\n    return 'nwtE_' + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateStateVarId = function () {\n    return 'nwtSV_' + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateUnitOfInfoId = function () {\n    return 'nwtUOI_' + elementUtilities.generateUUID();\n  };\n\n  /*\r\n    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated\r\n    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft\r\n    only the following things have been changed from 2.0 (this version is not clear on connectivity):\r\n     - empty set has no limit on its edge count\r\n     - logic operators can be source and target\r\n     - limit of 1 catalysis and 1 necessary stimulation on a process\r\n      for each edge class and nodeclass define 2 cases:\r\n     - node can be a source of this edge -> asSource\r\n     - node can be a target of this edge -> asTarget\r\n    for both cases, tells if it is allowed and what is the limit of edges allowed.\r\n    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).\r\n    Consider undefined things as false/unallowed -> whitelist behavior.\r\n      the nodes/edges class listed below are those used in the program.\r\n    For instance \"compartment\" isn't a node in SBGN specs.\r\n  */\n  elementUtilities.PD.connectivityConstraints = {\n    \"consumption\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"production\": {\n      \"macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unspecified entity\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"modulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"catalysis\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"inhibition\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      }\n    },\n    \"equivalence arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n\n  /* AF node connectivity rules\r\n   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015\r\n   *   Section 3.3.1: Activity Nodes connectivity definition\r\n   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265\r\n   */\n  elementUtilities.AF.connectivityConstraints = {\n    \"positive influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"equivalence arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SIF.connectivityConstraints = {\n    \"controls-state-change-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-transport-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-phosphorylation-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-expression-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis-precedes\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"in-complex-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"interacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"neighbor-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"consumption-controled-by\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"controls-production-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"controls-transport-of-chemical\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"chemical-affects\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"reacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"used-to-produce\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"activates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"phosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"dephosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"upregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"downregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"activates-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"acetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"deacetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"methylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"demethylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.logicalOperatorTypes = ['and', 'or', 'not', 'delay'];\n  elementUtilities.processTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype'];\n  elementUtilities.biologicalActivityTypes = ['biological activity', 'BA plain', 'BA unspecified entity', 'BA simple chemical', 'BA macromolecule', 'BA nucleic acid feature', 'BA perturbing agent', 'BA complex'];\n  elementUtilities.epnTypes = ['macromolecule', 'nucleic acid feature', 'simple chemical', 'empty set', 'unspecified entity', 'perturbing agent', 'complex', 'nucleic acid feature multimer', 'macromolecule multimer', 'simple chemical multimer', 'complex multimer'];\n  elementUtilities.sifTypes = ['SIF macromolecule', 'SIF simple chemical'];\n  elementUtilities.otherNodeTypes = ['compartment', 'tag', 'submap', 'topology group'];\n  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes);\n  elementUtilities.compoundNodeTypes = ['complex', 'compartment', 'submap'];\n  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();\n  elementUtilities.sifEdgeTypes = ['neighbor-of', 'interacts-with', 'in-complex-with', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'catalysis-precedes', 'controls-expression-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates', 'inhibits', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];\n  elementUtilities.edgeTypes = ['consumption', 'production', 'modulation', 'stimulation', 'catalysis', 'inhibition', 'necessary stimulation', 'logic arc', 'equivalence arc', 'unknown influence', 'positive influence', 'negative influence', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'controls-expression-of', 'catalysis-precedes', 'in-complex-with', 'interacts-with', 'neighbor-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'activates', 'inhibits', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];\n  elementUtilities.undirectedEdgeTypes = ['in-complex-with', 'interacts-with', 'neighbor-of', 'logic arc', 'equivalence arc'];\n  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);\n\n  /*\r\n  * Get sbgnclass of the given element. If the parameter is a string return it\r\n  * by assuming that it is the sbgnclass itself.\r\n  */\n  elementUtilities.getSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n    var sbgnclass = typeof ele === 'string' ? ele : ele.data('class');\n    return sbgnclass;\n  };\n\n  /*\r\n  * Get sbgn class omitting the multimer information\r\n  */\n  elementUtilities.getPureSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n    return elementUtilities.getSbgnClass(ele).replace(' multimer', '');\n  };\n\n  /*\r\n   * Returns if the elements with the given parent class can be parent of the elements with the given node class\r\n   */\n  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {\n    // If nodeClass and parentClass params are elements itselves instead of their class names handle it\n    var nodeClass = typeof _nodeClass !== 'string' ? _nodeClass.data('class') : _nodeClass;\n    var parentClass = _parentClass != undefined && typeof _parentClass !== 'string' ? _parentClass.data('class') : _parentClass;\n    if (parentClass == undefined || parentClass === 'compartment' || parentClass === 'submap') {\n      // Compartments, submaps and the root can include any type of nodes\n      return true;\n    } else if (parentClass.startsWith('complex') && (!node || node.connectedEdges().length == 0 // Complexes can only include EPNs which do not have edges\n    || elementUtilities.mapType == \"HybridAny\" || elementUtilities.mapType == \"HybridSbgn\")) {\n      // When map type is unknown, allow complexes to include EPNs with edges\n      return elementUtilities.isEPNClass(nodeClass);\n    }\n    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass\n  };\n\n  // Get common properties of given elements. Returns null if the given element list is empty or the\n  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.\n  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the\n  // property name then use what that function returns.\n  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {\n    if (elements.length == 0) {\n      return null;\n    }\n    var isFunction;\n    // If we are not comparing the properties directly users can specify a function as well\n    if (typeof propertyName === 'function') {\n      isFunction = true;\n    }\n\n    // Use data as default\n    if (!isFunction && !dataOrCss) {\n      dataOrCss = 'data';\n    }\n    var getVal = function getVal(index) {\n      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);\n      return val;\n    };\n    var value = getVal(0);\n    for (var i = 1; i < elements.length; i++) {\n      if (getVal(i) != value) {\n        return null;\n      }\n    }\n    return value;\n  };\n\n  // Returns if the function returns a truthy value for all of the given elements.\n  elementUtilities.trueForAllElements = function (elements, fcn) {\n    for (var i = 0; i < elements.length; i++) {\n      if (!fcn(elements[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Returns whether the give element can have sbgncardinality\n  elementUtilities.canHaveSBGNCardinality = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'consumption' || sbgnclass == 'production';\n  };\n\n  // Returns whether the give element can have sbgnlabel\n  elementUtilities.canHaveSBGNLabel = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'and' && sbgnclass != 'or' && sbgnclass != 'not' && sbgnclass != 'delay' && sbgnclass != 'association' && sbgnclass != 'dissociation' && sbgnclass != 'empty set' && !sbgnclass.endsWith('process');\n  };\n\n  // Returns whether the give element have unit of information\n  elementUtilities.canHaveUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == 'simple chemical' || sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'simple chemical multimer' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer' || sbgnclass.startsWith('BA') && sbgnclass != \"BA plain\" || sbgnclass == 'compartment' || sbgnclass == 'SIF macromolecule' || sbgnclass == 'SIF simple chemical') {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given element can have more than one units of information\n  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return !sbgnclass.startsWith('BA');\n  };\n\n  // Returns whether the give element have state variable\n  elementUtilities.canHaveStateVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer') {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given ele should be square in shape\n  elementUtilities.mustBeSquare = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass.indexOf('process') != -1 || sbgnclass == 'empty set' || sbgnclass == 'and' || sbgnclass == 'or' || sbgnclass == 'not' || sbgnclass == 'association' || sbgnclass == 'dissociation' || sbgnclass == 'delay';\n  };\n\n  // Returns whether any of the given nodes must not be in square shape\n  elementUtilities.someMustNotBeSquare = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!elementUtilities.mustBeSquare(node.data('class'))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeCloned = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'unspecified entity': true,\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true,\n      'perturbing agent': true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeMultimer = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.isBiologicalActivity = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);\n  };\n  elementUtilities.isSIFNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifTypes);\n  };\n  elementUtilities.isSIFEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);\n  };\n  elementUtilities.isUndirectedEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);\n  };\n  elementUtilities.isDirectedEdge = function (ele) {\n    return !elementUtilities.isUndirectedEdge(ele);\n  };\n\n  // Returns whether the given element is an EPN\n  elementUtilities.isEPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.epnTypes);\n  };\n\n  // Returns whether the given element is a PN\n  elementUtilities.isPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.processTypes);\n  };\n\n  // Returns wether the given element or string is of the special empty set/empty set class\n  elementUtilities.isEmptySetClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'empty set';\n  };\n\n  // Returns whether the given element is a logical operator\n  elementUtilities.isLogicalOperator = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);\n  };\n\n  // Returns whether the class of given element is a equivalance class\n  elementUtilities.convenientToEquivalence = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'tag' || sbgnclass == 'terminal';\n  };\n\n  // Returns whether the class of given element is a modulation arc as defined in PD specs\n  elementUtilities.isModulationArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'modulation' || sbgnclass == 'stimulation' || sbgnclass == 'catalysis' || sbgnclass == 'inhibition' || sbgnclass == 'necessary stimulation';\n  };\n\n  // Returns whether the class of given element is an arc of AF specs except logical arc\n  elementUtilities.isAFArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'positive influence' || sbgnclass == 'negative influence' || sbgnclass == 'unknown influence' || sbgnclass == 'necessary stimulation';\n  };\n\n  // Returns whether the given element or elements with the given class can have ports.\n  elementUtilities.canHavePorts = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'phenotype' && sbgnclass != 'delay' && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));\n  };\n\n  // Section Start\n  // General Element Utilities\n\n  //this method returns the nodes non of whose ancestors is not in given nodes\n  elementUtilities.getTopMostNodes = function (nodes) {\n    var nodesMap = {};\n    for (var i = 0; i < nodes.length; i++) {\n      nodesMap[nodes[i].id()] = true;\n    }\n    var roots = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      var parent = ele.parent()[0];\n      while (parent != null) {\n        if (nodesMap[parent.id()]) {\n          return false;\n        }\n        parent = parent.parent()[0];\n      }\n      return true;\n    });\n    return roots;\n  };\n\n  //This method checks if all of the given nodes have the same parent assuming that the size\n  //of  nodes is not 0\n  elementUtilities.allHaveTheSameParent = function (nodes) {\n    if (nodes.length == 0) {\n      return true;\n    }\n    var parent = nodes[0].data(\"parent\");\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (node.data(\"parent\") != parent) {\n        return false;\n      }\n    }\n    return true;\n  };\n  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {\n    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);\n    for (var i = 0; i < topMostNodes.length; i++) {\n      var node = topMostNodes[i];\n      var oldX = node.position(\"x\");\n      var oldY = node.position(\"y\");\n      node.position({\n        x: oldX + positionDiff.x,\n        y: oldY + positionDiff.y\n      });\n      var children = node.children();\n      this.moveNodes(positionDiff, children, true);\n    }\n  };\n  elementUtilities.convertToModelPosition = function (renderedPosition) {\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    var x = (renderedPosition.x - pan.x) / zoom;\n    var y = (renderedPosition.y - pan.y) / zoom;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {\n    pan = pan || cy.pan();\n    zoom = zoom || cy.zoom();\n    var res = {};\n    ['x', 'y'].forEach(function (dim) {\n      res[dim] = modelPos[dim] * zoom + pan[dim];\n    });\n    return res;\n  };\n\n  // Section End\n  // General Element Utilities\n\n  // Section Start\n  // Element Filtering Utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.getProcessesOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    selectedEles = this.extendNodeList(selectedEles);\n    return selectedEles;\n  };\n  elementUtilities.getNeighboursOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);\n    return elesToHighlight;\n  };\n  elementUtilities.getNeighboursOfNodes = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    nodes = nodes.add(nodes.parents(\"node[class^='complex']\"));\n    nodes = nodes.add(nodes.descendants());\n    var neighborhoodEles = nodes.neighborhood();\n    var elesToReturn = nodes.add(neighborhoodEles);\n    elesToReturn = elesToReturn.add(elesToReturn.descendants());\n    return elesToReturn;\n  };\n  elementUtilities.extendNodeList = function (nodesToShow) {\n    var self = this;\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants());\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.parents());\n    //add complex children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n\n    // var processes = nodesToShow.nodes(\"node[class='process']\");\n    // var nonProcesses = nodesToShow.nodes(\"node[class!='process']\");\n    // var neighborProcesses = nonProcesses.neighborhood(\"node[class='process']\");\n\n    extendNodeTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype', 'and', 'or', 'not', 'delay'];\n\n    //Here, logical operators are also considered as processes, since they also get inputs and outputs\n    var processes = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var nonProcesses = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    //For AF support, subject to change\n    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(\":hidden\")).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    nodesToShow = nodesToShow.add(processes.neighborhood());\n    nodesToShow = nodesToShow.add(neighborProcesses);\n    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());\n    nodesToShow = nodesToShow.add(neighborNonProcesses);\n    neighborProcesses.neighborhood().forEach(function (ele) {\n      if (inArray(ele._private.data[\"class\"], extendNodeTypes)) {\n        nodesToShow = nodesToShow.add(ele.neighborhood());\n      }\n    });\n\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents());\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n    return nodesToShow;\n  };\n  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {\n    nodesToFilter = this.extendNodeList(nodesToFilter);\n    var nodesToShow = allNodes.not(nodesToFilter);\n    nodesToShow = this.extendNodeList(nodesToShow);\n    return nodesToShow;\n  };\n  elementUtilities.getProcessesOfNodes = function (nodes) {\n    return this.extendNodeList(nodes);\n  };\n\n  // general utilities\n\n  elementUtilities.noneIsNotHighlighted = function () {\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClasses = viewUtilities.getAllHighlightClasses();\n    for (var i = 0; i < highlightClasses.length; i++) {\n      if (cy.$('.' + highlightClasses[i]).is(':visible')) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Section End\n  // Element Filtering Utilities\n\n  // Section Start\n  // Add remove utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes();\n    cy.elements().unselect();\n    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);\n    var nodesNotToKeep = allNodes.not(nodesToKeep);\n    return nodesNotToKeep.remove();\n  };\n  elementUtilities.deleteElesSimple = function (eles) {\n    cy.elements().unselect();\n    return eles.remove();\n  };\n\n  // general utilities\n\n  elementUtilities.restoreEles = function (eles) {\n    eles.restore();\n    return eles;\n  };\n\n  // Section End\n  // Add remove utilities\n\n  // Section Start\n  // Stylesheet helpers\n\n  // SBGN specific utilities\n\n  elementUtilities.getArrayLineStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    switch (sbgnclass) {\n      case 'controls-expression-of':\n      case 'upregulates-expression':\n      case 'downregulates-expression':\n        return 'dashed';\n      default:\n        return 'solid';\n    }\n  };\n  elementUtilities.getCyShape = function (ele) {\n    var _class = ele.data('class');\n    // Get rid of rectangle postfix to have the actual node class\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n    if (_class == 'compartment') {\n      return 'compartment';\n    }\n    if (_class == 'phenotype') {\n      return 'hexagon';\n    }\n    if (_class == 'perturbing agent' || _class == 'tag') {\n      return 'polygon';\n    }\n    if (_class == 'SIF macromolecule') {\n      return 'macromolecule';\n    }\n    if (_class == 'SIF simple chemical') {\n      return 'simple chemical';\n    }\n    if (_class.startsWith('BA')) {\n      return 'biological activity';\n    }\n    if (_class == 'submap' || _class == 'topology group') {\n      return 'rectangle';\n    }\n\n    // We need to define new node shapes with their class names for these nodes\n    if (_class == 'empty set' || _class == 'nucleic acid feature' || _class == 'macromolecule' || _class == 'simple chemical' || _class == 'complex' || _class == 'biological activity') {\n      return _class;\n    }\n\n    // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles\n    // conditionally.\n    if (this.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n        return 'polygon'; // The node has ports represent it by polygon\n      } else if (_class == 'process' || _class == 'omitted process' || _class == 'uncertain process') {\n        return 'rectangle'; // If node has no port and has one of these classes it should be in a rectangle shape\n      }\n      return 'ellipse'; // Other nodes with no port should be in an ellipse shape\n    }\n\n    // The remaining nodes are supposed to be in ellipse shape\n    return 'ellipse';\n  };\n  elementUtilities.getCyTargetArrowFill = function (ele) {\n    var _class = ele.data('class');\n    if (_class == 'inhibition' || _class == 'negative influence' || _class == 'production' || elementUtilities.isSIFEdge(_class)) {\n      return 'filled';\n    }\n    return 'hollow';\n  };\n  elementUtilities.getCyArrowShape = function (ele) {\n    var _class = ele.data('class');\n    switch (_class) {\n      case 'necessary stimulation':\n        return 'triangle-cross';\n      case 'inhibition':\n      case 'negative influence':\n      case 'inhibits':\n      case 'downregulates-expression':\n      case 'dephosphorylates':\n      case 'inhibits-gtpase':\n      case 'deacetylates':\n      case 'demethylates':\n        return 'tee';\n      case 'catalysis':\n        return 'circle';\n      case 'stimulation':\n      case 'production':\n      case 'positive influence':\n      case 'activates':\n      case 'phosphorylates':\n      case 'upregulates-expression':\n      case 'controls-state-change-of':\n      case 'chemical-affects':\n      case 'controls-transport-of':\n      case 'controls-phosphorylation-of':\n      case 'controls-expression-of':\n      case 'catalysis-precedes':\n      case 'consumption-controled-by':\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n      case 'used-to-produce':\n      case 'activates-gtpase':\n      case 'acetylates':\n      case 'methylates':\n        return 'triangle';\n      case 'modulation':\n      case 'unknown influence':\n        return 'diamond';\n      default:\n        return 'none';\n    }\n  };\n  elementUtilities.getElementContent = function (ele) {\n    var _class = ele.data('class');\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n    var content = \"\";\n    if (_class == 'macromolecule' || _class == 'simple chemical' || _class == 'phenotype' || _class == 'unspecified entity' || _class == 'nucleic acid feature' || _class == 'perturbing agent' || _class == 'tag' || _class == 'biological activity' || _class.startsWith('BA') || _class == 'submap' || _class == 'SIF macromolecule' || _class == 'SIF simple chemical') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'compartment') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'complex') {\n      if (ele.children().length == 0 || options.showComplexName) {\n        if (ele.data('label')) {\n          content = ele.data('label');\n        } else if (ele.data('infoLabel')) {\n          content = ele.data('infoLabel');\n        } else {\n          content = '';\n        }\n      } else {\n        content = '';\n      }\n    } else if (_class == 'and') {\n      content = 'AND';\n    } else if (_class == 'or') {\n      content = 'OR';\n    } else if (_class == 'not') {\n      content = 'NOT';\n    } else if (_class == 'omitted process') {\n      content = '\\\\\\\\';\n    } else if (_class == 'uncertain process') {\n      content = '?';\n    } else if (_class == 'dissociation') {\n      content = 'o';\n    } else if (_class == 'delay') {\n      content = \"\\u03C4\"; // tau\n    }\n    var textWidth = ele.outerWidth() || ele.data('bbox').w;\n    var textProp = {\n      label: content,\n      width: _class == 'perturbing agent' ? textWidth / 2 : textWidth\n    };\n    return textProp.label;\n  };\n  elementUtilities.getLabelTextSize = function (ele) {\n    var _class = ele.data('class');\n    // These types of nodes cannot have label but this is statement is needed as a workaround\n    if (_class === 'association') {\n      return 20;\n    }\n    if (this.canHavePorts(_class)) {\n      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators\n\n      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes\n      if (_class === 'dissociation') {\n        coeff = 2;\n      } else if (_class.endsWith('process')) {\n        coeff = 1.5;\n      }\n      var ports = ele.data('ports');\n      if (graphUtilities.portsEnabled === true && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)\n      }\n      return this.getDynamicLabelTextSize(ele, coeff);\n    }\n    if (_class === 'delay') {\n      return this.getDynamicLabelTextSize(ele, 2);\n    }\n    return this.getDynamicLabelTextSize(ele);\n  };\n  elementUtilities.getStateVarShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveStateVariable(ele)) {\n      return null;\n    }\n    return ['stadium'];\n  };\n  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {\n    var type = elementUtilities.getPureSbgnClass(ele);\n    if (!elementUtilities.canHaveUnitOfInformation(type)) {\n      return null;\n    }\n    var opts = null;\n    if (elementUtilities.isSIFNode(type)) {\n      opts = ['rectangle', 'stadium'];\n    } else if (elementUtilities.isBiologicalActivity(type)) {\n      switch (type) {\n        case 'BA macromolecule':\n          opts = ['roundrectangle'];\n          break;\n        case 'BA nucleic acid feature':\n          opts = ['bottomroundrectangle'];\n          break;\n        case 'BA unspecified entity':\n          opts = ['ellipse'];\n          break;\n        case 'BA complex':\n          opts = ['complex'];\n          break;\n        case 'BA perturbing agent':\n          opts = ['perturbing agent'];\n          break;\n        case 'BA simple chemical':\n          opts = ['stadium'];\n          break;\n        default:\n          break;\n      }\n    } else {\n      opts = ['rectangle'];\n    }\n    return opts;\n  };\n  elementUtilities.getCardinalityDistance = function (ele) {\n    var srcPos = ele.source().position();\n    var tgtPos = ele.target().position();\n    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));\n    return distance * 0.25;\n  };\n  elementUtilities.getInfoLabel = function (node) {\n    /* Info label of a collapsed node cannot be changed if\r\n    * the node is collapsed return the already existing info label of it\r\n    */\n    if (node._private.data.collapsedChildren != null) {\n      return node._private.data.infoLabel;\n    }\n\n    /*\r\n     * If the node is simple then it's infolabel is equal to it's label\r\n     */\n    if (node.children() == null || node.children().length == 0) {\n      return node._private.data.label;\n    }\n    var children = node.children();\n    var infoLabel = \"\";\n    /*\r\n     * Get the info label of the given node by it's children info recursively\r\n     */\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      var childInfo = this.getInfoLabel(child);\n      if (childInfo == null || childInfo == \"\") {\n        continue;\n      }\n      if (infoLabel != \"\") {\n        infoLabel += \":\";\n      }\n      infoLabel += childInfo;\n    }\n\n    //return info label\n    return infoLabel;\n  };\n  elementUtilities.getQtipContent = function (node) {\n    /* Check the label of the node if it is not valid\r\n    * then check the infolabel if it is also not valid do not show qtip\r\n    */\n    var label = node.data('label');\n    if (label == null || label == \"\") {\n      label = this.getInfoLabel(node);\n    }\n    if (label == null || label == \"\") {\n      return;\n    }\n    var contentHtml = \"<b style='text-align:center;font-size:16px;'>\" + label + \"</b>\";\n    var statesandinfos = node._private.data.statesandinfos;\n    for (var i = 0; i < statesandinfos.length; i++) {\n      var sbgnstateandinfo = statesandinfos[i];\n      if (sbgnstateandinfo.clazz == \"state variable\") {\n        var value = sbgnstateandinfo.state.value;\n        var variable = sbgnstateandinfo.state.variable;\n        var stateLabel = variable == null /*|| typeof stateVariable === undefined */ ? value : value + \"@\" + variable;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"unit of information\") {\n        var stateLabel = sbgnstateandinfo.label.text;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      }\n    }\n    return contentHtml;\n  };\n\n  // general utilities\n\n  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {\n    var map = {\n      'small': 0.75,\n      'regular': 1,\n      'large': 1.25\n    };\n    return map[dynamicLabelSize];\n  };\n  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {\n    var sbgnclass, h;\n\n    // ele can either be node itself or an object that has class and height fields\n    if (ele.isNode && ele.isNode()) {\n      sbgnclass = ele.data('class');\n      h = ele.height();\n    } else {\n      sbgnclass = ele['class'];\n      h = ele['height'];\n    }\n    var dynamicLabelSize = options.dynamicLabelSize;\n    dynamicLabelSize = typeof dynamicLabelSize === 'function' ? dynamicLabelSize.call() : dynamicLabelSize;\n    if (dynamicLabelSizeCoefficient === undefined) {\n      if (dynamicLabelSize == 'small') {\n        if (sbgnclass.startsWith(\"complex\")) return 10;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 12;\n      } else if (dynamicLabelSize == 'regular') {\n        if (sbgnclass.startsWith(\"complex\")) return 11;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 14;\n      } else if (dynamicLabelSize == 'large') {\n        if (sbgnclass.startsWith(\"complex\")) return 12;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 16;\n      }\n      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n    }\n    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;\n    return textHeight;\n  };\n\n  /*\r\n  * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.\r\n  */\n  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {\n    var portId = sourceOrTarget === 'source' ? edge.data('portsource') : edge.data('porttarget');\n    if (portId == null || !graphUtilities.portsEnabled) {\n      return 'outside-to-node'; // If there is no portsource return the default value which is 'outside-to-node'\n    }\n    var endNode = sourceOrTarget === 'source' ? edge.source() : edge.target();\n    var ports = endNode.data('ports');\n    var port;\n    for (var i = 0; i < ports.length; i++) {\n      if (ports[i].id === portId) {\n        port = ports[i];\n      }\n    }\n    if (port === undefined) {\n      return 'outside-to-node'; // If port is not found return the default value which is 'outside-to-node'\n    }\n    var x, y;\n    // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center\n    if (port.x != 0) {\n      x = Math.sign(port.x) * 50;\n      y = 0;\n    } else {\n      x = 0;\n      y = Math.sign(port.y) * 50;\n    }\n    return '' + x + '% ' + y + '%';\n  };\n\n  /*\r\n   * Return ordering of ports of a node.\r\n   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'\r\n   */\n  elementUtilities.getPortsOrdering = function (node) {\n    // Return the cached portsordering if exists\n    if (node.data('portsordering')) {\n      return node.data('portsordering');\n    }\n    var ports = node.data('ports');\n    if (ports.length !== 2) {\n      node.data('portsordering', 'none'); // Cache the ports ordering\n      return 'none'; // Nodes are supposed to have 2 nodes or none\n    }\n\n    /*\r\n     * Retursn if the given portId is porttarget of any of the given edges.\r\n     * These edges are expected to be the edges connected to the node associated with that port.\r\n     */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.\n    var orientation = ports[0].x === 0 ? 'vertical' : 'horizontal';\n    // We need the connected edges of the node to find out if a port is an input port or an output port\n    var connectedEdges = node.connectedEdges();\n    var portsordering;\n    if (orientation === 'horizontal') {\n      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative\n      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'\n      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {\n        portsordering = 'L-to-R';\n      } else {\n        portsordering = 'R-to-L';\n      }\n    } else {\n      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative\n      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'\n      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {\n        portsordering = 'T-to-B';\n      } else {\n        portsordering = 'B-to-T';\n      }\n    }\n\n    // Cache the portsordering and return it.\n    node.data('portsordering', portsordering);\n    return portsordering;\n  };\n\n  /*\r\n  * Sets the ordering of the given nodes.\r\n  * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\r\n  * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\r\n  * used to set the distance between the node center and the ports. The default port distance is 60.\r\n  */\n  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    /*\r\n    * Returns if the given portId is porttarget of any of the given edges.\r\n    * These edges are expected to be the edges connected to the node associated with that port.\r\n    */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /*\r\n    * Returns if the given portId is portsource of any of the given edges.\r\n    * These edges are expected to be the edges connected to the node associated with that port.\r\n    */\n    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('portsource') === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n    portDistance = portDistance ? portDistance : 70; // The default port distance is 60\n\n    cy.startBatch();\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node\n\n      // If the current ordering is already equal to the desired ordering pass this node directly\n      if (ordering === currentOrdering) {\n        continue;\n      }\n      if (ordering === 'none') {\n        // If the ordering is 'none' remove the ports of the node\n        elementUtilities.removePorts(node);\n      } else if (currentOrdering === 'none') {\n        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.\n        elementUtilities.addPorts(node, ordering, portDistance);\n      } else {\n        // Else change the ordering by altering node 'ports'\n        var ports = node.data('ports'); // Ports of the node\n        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one\n        var dist = currentOrdering === 'none' ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);\n        var connectedEdges = node.connectedEdges(); // The edges connected to the node\n        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges\n\n        // Determine the portsource and porttarget\n        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {\n          porttarget = ports[0];\n          portsource = ports[1];\n        } else {\n          porttarget = ports[1];\n          portsource = ports[0];\n        }\n        if (ordering === 'L-to-R') {\n          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port\n          porttarget.x = -1 * dist;\n          portsource.x = dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'R-to-L') {\n          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port\n          porttarget.x = dist;\n          portsource.x = -1 * dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'T-to-B') {\n          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = -1 * dist;\n          portsource.y = dist;\n        } else {\n          //if ordering is 'B-to-T'\n          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = dist;\n          portsource.y = -1 * dist;\n        }\n      }\n      node.data('ports', ports); // Reset the node ports\n    }\n    nodes.data('portsordering', ordering); // Update the cached orderings of the nodes\n    cy.endBatch();\n  };\n\n  /*\r\n  * Add ports to the given node, with given ordering and port distance.\r\n  */\n  elementUtilities.addPorts = function (node, ordering, portDistance) {\n    var firstPortId = node.id() + \".1\"; // Id of first port\n    var secondPortId = node.id() + \".2\"; // Id of seconf port\n    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one\n    var firstPort = {\n      id: firstPortId\n    };\n    // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one\n    var secondPort = {\n      id: secondPortId\n    };\n\n    // Complete port objects according to ordering\n    if (ordering === 'L-to-R' || ordering === 'R-to-L') {\n      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one\n      firstPort.x = -1 * portDistance;\n      secondPort.x = portDistance;\n      firstPort.y = 0;\n      secondPort.y = 0;\n    } else {\n      // If ordering is 'T-to-B' or 'B-to-T'\n      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one\n      firstPort.y = -1 * portDistance;\n      secondPort.y = portDistance;\n      firstPort.x = 0;\n      secondPort.x = 0;\n    }\n    var fromLorT = ordering === 'L-to-R' || ordering === 'T-to-B'; // Check if ordering starts from left or top\n    var ports = [firstPort, secondPort]; // Ports array for the node\n    var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n    cy.startBatch();\n    node.data('ports', ports);\n\n    // Reset the portsource and porttarget for each edge connected to the node\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      var edgeClass = edge.data('class');\n      /*\r\n       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)\r\n       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.\r\n       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,\r\n       * else it is vice versa.\r\n       *\r\n       */\n      if (edge.data('target') === node.id()) {\n        if (edgeClass === 'production' || this.isModulationArcClass(edgeClass)) {\n          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)\n        }\n        if (fromLorT) {\n          edge.data('porttarget', firstPortId);\n        } else {\n          edge.data('porttarget', secondPortId);\n        }\n      } else {\n        if (edgeClass === 'consumption') {\n          continue; // consumpiton edge cannot be connected to any port of source node\n        }\n        if (fromLorT) {\n          edge.data('portsource', secondPortId);\n        } else {\n          edge.data('portsource', firstPortId);\n        }\n      }\n    }\n    cy.endBatch();\n  };\n\n  /*\r\n  * Remove the ports of the given node\r\n  */\n  elementUtilities.removePorts = function (node) {\n    var connectedEdges = node.connectedEdges();\n    var nodeId = node.id();\n    cy.startBatch();\n\n    // Reset portsource or porttarget of the connected edges to the node id\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      if (edge.data('source') === nodeId) {\n        edge.data('portsource', nodeId);\n      } else {\n        edge.data('porttarget', nodeId);\n      }\n    }\n    node.data('ports', []); // Clear ports data\n\n    cy.endBatch();\n  };\n  elementUtilities.changePortsOrientationAfterLayout = function () {\n    //Check all processes and logical operators with ports\n    cy.nodes().forEach(function (ele) {\n      if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation' || ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n        if (ele.data('ports').length === 2) {\n          var bestOrientation = elementUtilities.changePortsOrientation(ele);\n          elementUtilities.setPortsOrdering(ele, bestOrientation);\n          // If improve-flow is checked we do the swaping of simple nodes with each other\n          var improveFlow = options.improveFlow;\n          improveFlow = typeof improveFlow === 'function' ? improveFlow.call() : improveFlow;\n          if (improveFlow) {\n            elementUtilities.postChangePortsOrientation(ele, bestOrientation);\n          }\n        }\n      }\n    });\n    cy.style().update();\n  };\n\n  /*\r\n   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.\r\n   */\n  elementUtilities.changePortsOrientation = function (ele) {\n    var processId = ele.id();\n    var orientation = {\n      'L-to-R': 0,\n      'R-to-L': 0,\n      'T-to-B': 0,\n      'B-to-T': 0\n    };\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\"); // Holds edges who have the input port as a target\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Holds edges who have the output port as a source\n    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'consumption') {\n          var source = cy.getElementById(edge.data('source')); //Holds the element from the other side of edge\n          var simple = false; //Checks if it is a simple node - connected with only 1 edge\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'production') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'logic arc') {\n          var source = cy.getElementById(edge.data('source'));\n          var simple = false;\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    }\n    //Calculates the best orientation from all orientation scores\n    var bestOrientation = \"L-to-R\";\n    var bestScore = orientation['L-to-R']; //The score of the best orientation is always positive\n    for (var property in orientation) {\n      if (orientation[property] > bestScore) {\n        bestScore = orientation[property];\n        bestOrientation = property;\n      }\n    }\n    return bestOrientation;\n  };\n\n  /*\r\n   This function calculates the scores for each orientation\r\n   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,\r\n   uncertain process, association, dissociation, logical operator\r\n   @param other - is the other node, and based on its position scores are given to orientations\r\n   @param orientation - holds scores for each orientation\r\n   @param firstOrientation - can be L-to-R or T-to-B\r\n   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)\r\n   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)\r\n   @param simple - checks if 'other' node is simple node (with degree 1)\r\n   */\n  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {\n    var coeff = 0.5;\n    var score = 2;\n    if (simple) score = 1; // If it is a simple node, its score should affect less\n    var nodeWidthOrHeight = 0;\n    if (pos === 'x') nodeWidthOrHeight = ele.width() / 2;else if (pos === 'y') nodeWidthOrHeight = ele.height() / 2;\n    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {\n      orientation[firstOrientation] += score;\n      orientation[oppositeOrientation] -= score;\n    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] -= score;\n      orientation[oppositeOrientation] += score;\n    }\n  };\n\n  /*\r\n  After a process is oriented, for each simple node that is on the wrong side of the port,\r\n  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.\r\n  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1\r\n  */\n  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {\n    var processId = ele.id();\n    var inputPort = []; // Holds all simple nodes connected with input port\n    var outputPort = []; // Holds all simple nodes connected with output port\n    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\");\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\");\n    // Checks simple nodes and add them to one of the arrays mentioned above\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n        if (!source.isParent()) {\n          if (edge.data('class') === 'consumption') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n        if (!target.isParent()) {\n          if (edge.data('class') === 'production') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n        if (!source.isParent()) {\n          if (edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n        if (!target.isParent()) {\n          if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    }\n    //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side\n    inputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    outputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    notConnectedToPort.sort(function (a, b) {\n      return a.score - b.score;\n    });\n    //First we check for direct swaping between nodes from different ports positioned to the wrong side\n    var minLength = inputPort.length;\n    if (outputPort.length < minLength) minLength = outputPort.length;\n    for (i = 0; i < minLength; i++) {\n      var inputPortEle = inputPort.pop();\n      var outputPortEle = outputPort.pop();\n      //Checks if free nodes belong to the same compound\n      var firstNode = cy.getElementById(inputPortEle.id);\n      var secondNode = cy.getElementById(outputPortEle.id);\n      if (firstNode.data('parent') !== secondNode.data('parent')) {\n        continue;\n      }\n      elementUtilities.swapElements(inputPortEle, outputPortEle);\n    }\n    /*\r\n     After that we iterate over each element of effector nodes and see the scores it produces by swaping\r\n     with nodes connected to input or output ports\r\n     */\n    for (i = notConnectedToPort.length - 1; i >= 0; i--) {\n      var effector = notConnectedToPort[i];\n      if (outputPort.length > 0) {\n        var firstOutput = outputPort[outputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstOutput.id);\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstOutput);\n        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);\n        if (firstOutputScore > firstOutput.score) {\n          outputPort.pop();\n        } else elementUtilities.swapElements(effector, firstOutput); //swap back\n      } else if (inputPort.length > 0) {\n        var firstInput = inputPort[inputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstInput.id);\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstInput);\n        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);\n        if (firstInputScore > firstInput.score) {\n          inputPort.pop();\n        } else elementUtilities.swapElements(effector, firstInput);\n      }\n    }\n  };\n\n  /*\r\n  * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays\r\n  * */\n  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {\n    if (other.connectedEdges().length === 1) {\n      var nodeScore;\n      var obj = {};\n      if (connectedTo === \"notConnected\") {\n        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));\n        obj['id'] = other.id();\n        obj['score'] = nodeScore;\n        array.push(obj);\n      } else {\n        if (connectedTo === \"input\") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === \"output\") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);\n        if (nodeScore < 0)\n          //if it is in the wrong side we add it to the input array\n          {\n            obj['id'] = other.id();\n            obj['score'] = nodeScore;\n            array.push(obj);\n          }\n      }\n    }\n  };\n\n  /*\r\n  This function calculates the score of a node based on its position with respect to a process/logical operator\r\n  @param ele - is the node with the ports. It can be process,omitted process,\r\n  uncertain process, association, dissociation, logical operator\r\n  @param other - is the other node, and based on its position score of a node is calculated\r\n  @param orientation - A string which holds current best orientation\r\n  */\n  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {\n    var coeff = 0.5;\n    var score = 1;\n    if (orientation === 'L-to-R' || orientation === 'R-to-L') {\n      var nodeWidth = ele.width() / 2;\n      if (other.position('x') < ele.position('x') - nodeWidth) {\n        if (orientation === 'L-to-R') return score;else if (orientation === 'R-to-L') return -score;\n      } else if (other.position('x') >= ele.position('x') - nodeWidth && other.position('x') <= ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return (ele.position('x') - other.position('x')) / nodeWidth * coeff;else if (orientation === 'R-to-L') return -(ele.position('x') - other.position('x')) / nodeWidth * coeff;\n      } else if (other.position('x') > ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return -score;else if (orientation === 'R-to-L') return score;\n      }\n    }\n    if (orientation === 'T-to-B' || orientation === 'B-to-T') {\n      var nodeHeight = ele.height() / 2;\n      if (other.position('y') < ele.position('y') - nodeHeight) {\n        if (orientation === 'T-to-B') return score;else if (orientation === 'B-to-T') return -score;\n      } else if (other.position('y') >= ele.position('y') - nodeHeight && other.position('y') <= ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return (ele.position('y') - other.position('y')) / nodeHeight * coeff;else if (orientation === 'B-to-T') return -(ele.position('y') - other.position('y')) / nodeHeight * coeff;\n      } else if (other.position('y') > ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return -score;else if (orientation === 'B-to-T') return score;\n      }\n    }\n  };\n\n  /*\r\n  Swaps the positions of 2 elements\r\n  */\n  elementUtilities.swapElements = function (firstEle, secondEle) {\n    var firstNode = cy.getElementById(firstEle.id);\n    var secondNode = cy.getElementById(secondEle.id);\n    var tempx = firstNode.position('x');\n    var tempy = firstNode.position('y');\n    firstNode.position('x', secondNode.position('x'));\n    firstNode.position('y', secondNode.position('y'));\n    secondNode.position('x', tempx);\n    secondNode.position('y', tempy);\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexPadding = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var padding = graphUtilities.getCompoundPaddings();\n    padding = padding < 5 ? 5 : padding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele)) {\n      padding += options.extraComplexPadding * 0.5;\n      // if there is something on the bottom side\n\n      if (ele.data('auxunitlayouts') && ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n        padding += options.extraComplexPadding * 0.5;\n      } else {\n        for (var i = 0; i < ele.data('statesandinfos').length; i++) {\n          var statesandinfos = ele.data('statesandinfos')[i];\n          var thisY = statesandinfos.bbox.y;\n          var thisH = statesandinfos.bbox.h;\n          var parentY = ele.data('class') == \"compartment\" || ele.data('class') == \"complex\" ? ele.data('bbox').y : ele.position().y;\n          var height = ele.data(\"originalH\") ? ele.data(\"originalH\") : ele.height();\n          var parentY2 = Number((parentY + height / 2).toFixed(2));\n          var centerY = Number((thisY + thisH / 2).toFixed(2));\n          if (centerY == parentY2) {\n            padding += options.extraComplexPadding * 0.5;\n            break;\n          }\n        }\n      }\n    }\n    // for the case where the padding is the tightest, we need a bit of extra space\n    // to avoid touching the infoboxes of the complex\n    else {\n      if (ele.data('statesandinfos').length > 0) {\n        padding += 2;\n      }\n    }\n    return padding;\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexMargin = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var margin = -1 * options.extraComplexPadding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data('auxunitlayouts') &&\n    // check if there is something on the bottom side\n    ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n      margin -= options.extraComplexPadding * 0.5;\n    }\n    if (ele.css(\"font-size\") == \"14px\") margin -= 2;\n    return margin;\n  };\n\n  // Set clone marker status of given nodes to the given status.\n  elementUtilities.setCloneMarkerStatus = function (node, status) {\n    if (status) node.data('clonemarker', true);else node.removeData('clonemarker');\n    if (node.data('class') !== \"unspecified entity\" && node.data('class') !== \"perturbing agent\") return;\n    var bgObj = {\n      'background-image': 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E',\n      'background-position-x': '50%',\n      'background-position-y': '100%',\n      'background-width': '100%',\n      'background-height': '25%',\n      'background-fit': 'none',\n      'background-image-opacity': '0'\n    };\n    var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n    var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n    var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n    var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n    var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n    var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n    var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n    if (status) {\n      var index = imgs.indexOf(bgObj['background-image']);\n      // Already exists; Make opacity non-zero\n      if (index > -1) opacities[index] = node.css('background-opacity');else {\n        imgs.push(bgObj['background-image']);\n        xPos.push(bgObj['background-position-x']);\n        yPos.push(bgObj['background-position-y']);\n        widths.push(bgObj['background-width']);\n        heights.push(bgObj['background-height']);\n        fits.push(bgObj['background-fit']);\n        opacities.push(node.css('background-opacity'));\n      }\n    } else {\n      var index = imgs.indexOf(bgObj['background-image']);\n      // Already exists; Make opacity zero\n      if (index > -1) opacities[index] = '0';\n    }\n    node.data('background-image', imgs.join(\" \"));\n    node.data('background-position-x', xPos.join(\" \"));\n    node.data('background-position-y', yPos.join(\" \"));\n    node.data('background-width', widths.join(\" \"));\n    node.data('background-height', heights.join(\" \"));\n    node.data('background-fit', fits.join(\" \"));\n    node.data('background-image-opacity', opacities.join(\" \"));\n  };\n\n  // Section End\n  // Stylesheet helpers\n\n  var defaultProperties = {};\n  var getDefaultNodeProperties = function getDefaultNodeProperties() {\n    return {\n      'border-width': 1.25,\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'background-opacity': 1,\n      'background-image-opacity': 1,\n      'text-wrap': 'wrap'\n    };\n  };\n  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {\n    return {\n      'line-color': '#555555',\n      'width': 1.25\n    };\n  };\n  var getDefaultProcessSize = function getDefaultProcessSize() {\n    return {\n      width: 20,\n      height: 20\n    };\n  };\n  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {\n    return {\n      width: 30,\n      height: 30\n    };\n  };\n  var getDefaultBASize = function getDefaultBASize() {\n    return {\n      width: 60,\n      height: 30\n    };\n  };\n  var defaultSifEdgeColorMap = {\n    'neighbor-of': '#FC002C',\n    'interacts-with': '#B57261',\n    'in-complex-with': '#B4987A',\n    'controls-state-change-of': '#B4E1CD',\n    'controls-transport-of': '#F0E7C8',\n    'controls-phosphorylation-of': '#D970A1',\n    'catalysis-precedes': '#8EC3ED',\n    'controls-expression-of': '#6A0F30',\n    'consumption-controled-by': '#A9A9F7',\n    'controls-production-of': '#2D5207',\n    'controls-transport-of-chemical': '#3F00FF',\n    'chemical-affects': '#D95F23',\n    'reacts-with': '#4E214B',\n    'used-to-produce': '#FF2F07',\n    'phosphorylates': '#43A93C',\n    'dephosphorylates': '#CD4F32',\n    'upregulates-expression': '#43A93C',\n    'downregulates-expression': '#CD4F32',\n    'activates': '#32D849',\n    'inhibits': '#4886A5',\n    'activates-gtpase': '#468DE3',\n    'inhibits-gtpase': '#C364BF',\n    'acetylates': '#55B1B6',\n    'deacetylates': '#EE5F78',\n    'methylates': '#B0B03D',\n    'demethylates': '#DB6F21'\n  };\n  var defaultSizeMap = {\n    'macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'nucleic acid feature': {\n      width: 60,\n      height: 30\n    },\n    'simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'empty set': {\n      width: 22,\n      height: 22\n    },\n    'phenotype': {\n      width: 60,\n      height: 30\n    },\n    'unspecified entity': {\n      width: 60,\n      height: 30\n    },\n    'perturbing agent': {\n      width: 60,\n      height: 30\n    },\n    'complex': {\n      width: 44,\n      height: 44\n    },\n    'compartment': {\n      width: 80,\n      height: 80\n    },\n    'submap': {\n      width: 80,\n      height: 80\n    },\n    'tag': {\n      width: 35,\n      height: 35\n    },\n    'SIF macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'SIF simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'topology group': {\n      width: 44,\n      height: 44\n    }\n  };\n  elementUtilities.processTypes.forEach(function (type) {\n    // phenotype has a different default size\n    if (type == 'phenotype') {\n      return;\n    }\n    defaultSizeMap[type] = getDefaultProcessSize();\n  });\n  elementUtilities.logicalOperatorTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultLogicalOperatorSize();\n  });\n  elementUtilities.biologicalActivityTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultBASize();\n  });\n  var getDefaultSize = function getDefaultSize(type) {\n    return defaultSizeMap[type];\n  };\n  var getDefaultFontProperties = function getDefaultFontProperties() {\n    return {\n      'font-size': 11,\n      'font-family': 'Helvetica',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'color': '#000'\n    };\n  };\n  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {\n    return {\n      'font-size': getDefaultInfoboxFontSize(nodeClass, infoboxType),\n      'font-family': 'Arial',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'font-color': '#0f0f0f',\n      'border-width': 1,\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'shape-name': getDefaultInfoboxShapeName(nodeClass, infoboxType),\n      'width': getDefaultInfoboxSize(nodeClass, infoboxType).w,\n      'height': getDefaultInfoboxSize(nodeClass, infoboxType).h\n    };\n  };\n  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {\n    var fontsize = 9;\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      fontsize = 11;\n    }\n    return fontsize;\n  };\n  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {\n    var w = 12,\n      h = 12;\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      w = 15;\n      h = 15;\n    }\n    return {\n      w: w,\n      h: h\n    };\n  };\n  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {\n    if (infoboxType === 'state variable') {\n      return 'stadium';\n    }\n    if (elementUtilities.isSIFNode(nodeClass)) {\n      if (infoboxType === 'unit of information') {\n        if (nodeClass == 'SIF macromolecule') {\n          return 'stadium';\n        }\n        return 'rectangle';\n      }\n    } else {\n      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);\n      return list[0];\n    }\n  };\n  elementUtilities.nodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));\n    if (elementUtilities.canHaveStateVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, 'state variable');\n      defaultProperties[type]['state variable'] = props;\n    }\n    if (elementUtilities.canHaveUnitOfInformation(type)) {\n      var props = getDefaultInfoboxProperties(type, 'unit of information');\n      defaultProperties[type]['unit of information'] = props;\n    }\n  });\n  elementUtilities.compoundNodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend(defaultProperties[type], {\n      'background-opacity': 0.5\n    });\n  });\n  $.extend(defaultProperties['association'], {\n    'background-color': '#707070'\n  });\n  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat(['phenotype']).forEach(function (type) {\n    $.extend(defaultProperties[type], getDefaultFontProperties());\n  });\n  $.extend(defaultProperties['submap'], {\n    'font-size': 14,\n    'border-width': 2.25\n  });\n  $.extend(defaultProperties['compartment'], {\n    'font-size': 14,\n    'border-width': 3.25\n  });\n  elementUtilities.edgeTypes.forEach(function (type) {\n    defaultProperties[type] = getDefaultEdgeProperties();\n    if (defaultSifEdgeColorMap[type]) {\n      defaultProperties[type]['line-color'] = defaultSifEdgeColorMap[type];\n    }\n  });\n  function getProp(props, name) {\n    var prop = props[name];\n    if (_typeof(prop) !== null && _typeof(prop) === 'object') {\n      return $.extend({}, prop);\n    }\n    return prop;\n  }\n  function extendDataWithClassDefaults(data, className, propsToSkip) {\n    if (!className) {\n      return;\n    }\n    var defaultProps = elementUtilities.getDefaultProperties(className);\n    Object.keys(defaultProps).forEach(function (name) {\n      if (!propsToSkip || !propsToSkip[name]) {\n        data[name] = getProp(defaultProps, name);\n      }\n    });\n  }\n  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {\n    // list of properties to skip\n    var propsToSkip = {\n      'width': true,\n      'height': true,\n      'state variable': true,\n      'unit of information': true,\n      'multimer': true,\n      'clonemarker': true,\n      'ports-ordering': true\n    };\n    extendDataWithClassDefaults(data, className, propsToSkip);\n  };\n  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {\n    extendDataWithClassDefaults(data, className);\n  };\n\n  // get infobox properties and filter the ones related to style only\n  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {\n    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);\n    var infoboxStyle = $.extend({}, defaultProps[infoboxType]);\n\n    // width and height are belonging to bbox object rather than style object\n    var nonStyleProps = ['width', 'height'];\n    nonStyleProps.forEach(function (propName) {\n      delete infoboxStyle[propName];\n    });\n    return infoboxStyle;\n  };\n  elementUtilities.getDefaultProperties = function (sbgnclass) {\n    if (sbgnclass == undefined) {\n      return defaultProperties;\n    }\n    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass);\n\n    // init default properties for the class if not initialized yet\n    if (defaultProperties[pureClass] == null) {\n      defaultProperties[pureClass] = {};\n    }\n    return defaultProperties[pureClass];\n  };\n  elementUtilities.setDefaultProperties = function (sbgnclass, props) {\n    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);\n  };\n  elementUtilities.lockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = true;\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').disableCue();\n    }\n  };\n  elementUtilities.unlockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = false;\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').enableCue();\n    }\n  };\n  elementUtilities.isGraphTopologyLocked = function () {\n    return elementUtilities.graphTopologyLocked;\n  };\n  elementUtilities.languageToMapType = function (lang) {\n    switch (lang) {\n      case 'process description':\n        return 'PD';\n      case 'activity flow':\n        return 'AF';\n      case 'sif':\n        return 'SIF';\n      case 'hybrid sbgn':\n        return 'HybridSbgn';\n      default:\n        return 'HybridAny';\n    }\n  };\n  elementUtilities.mapTypeToLanguage = function (mapType) {\n    switch (mapType) {\n      case 'PD':\n        return 'process description';\n      case 'AF':\n        return 'activity flow';\n      case 'SIF':\n        return 'sif';\n      case 'HybridSbgn':\n        return 'hybrid sbgn';\n      default:\n        return 'hybrid any';\n    }\n  };\n  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {\n    var expandCollapse = cy.expandCollapse('get');\n    var collapsedChildren = cy.collection();\n    var collapsedNodes = nodes.filter(\".cy-expand-collapse-collapsed-node\");\n    collapsedNodes.forEach(function (n) {\n      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));\n    });\n    return collapsedChildren;\n  };\n  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {\n    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);\n  };\n  return elementUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  var parsedDataMap;\n  var visibleDataMapByExp;\n  var groupedDataMap;\n  var visibleFiles;\n  var colorMap;\n  var allVis;\n  var fileDescription;\n  var fileTitle;\n  function experimentalDataOverlay(param) {\n    // Init\n    cy = param.sbgnCyInstance.getCy();\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    colorMap = {};\n    allVis = true;\n    fileDescription = {};\n    fileTitle = {};\n  }\n  experimentalDataOverlay.getName = function () {\n    return fname;\n  };\n  experimentalDataOverlay.getDesc = function () {\n    return fdesc;\n  };\n  experimentalDataOverlay.getGroupedDataMap = function () {\n    return groupedDataMap;\n  };\n  experimentalDataOverlay.getParsedDataMap = function () {\n    return parsedDataMap;\n  };\n  experimentalDataOverlay.getVisibleData = function () {\n    return visibleDataMapByExp;\n  };\n  experimentalDataOverlay.hideAll = function () {\n    var invisibleExp = {};\n    var invisibleFile = {};\n    allVis = false;\n    for (var i in groupedDataMap) {\n      if (visibleFiles[i]) {\n        visibleFiles[i] = false;\n        invisibleFile[i] = false;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n          invisibleExp[fileName + '?' + expName] = false;\n          visibleDataMapByExp[fileName + '?' + expName] = false;\n        }\n      }\n    }\n    this.showData();\n    params = {\n      invisibleFile: invisibleFile,\n      invisibleExp: invisibleExp\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {\n    for (var j in invisibleFile) {\n      visibleFiles[j] = true;\n    }\n    for (var _j in invisibleExp) {\n      visibleDataMapByExp[_j] = true;\n    }\n    allVis = true;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.unhideAll = function () {\n    var visibleExp = {};\n    var visibleFile = {};\n    allVis = true;\n    for (var i in visibleFiles) {\n      if (!visibleFiles[i]) {\n        visibleFiles[i] = true;\n        visibleFile[i] = true;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      if (groupedDataMap[fileName] == undefined) {\n        return;\n      }\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n          visibleExp[fileName + '?' + expName] = true;\n          visibleDataMapByExp[fileName + '?' + expName] = true;\n        }\n      }\n    }\n    this.showData();\n    return {\n      visibleExp: visibleExp,\n      visibleFile: visibleFile\n    };\n  };\n  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {\n    for (var j in visibleFile) {\n      visibleFiles[j] = false;\n    }\n    for (var _j2 in visibleExp) {\n      visibleDataMapByExp[_j2] = false;\n    }\n    allVis = false;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.removeAll = function () {\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i in visibleDataMapByExp) {\n      visible[_i] = visibleDataMapByExp[_i];\n    }\n    for (var _i2 in visibleFiles) {\n      visiblef[_i2] = visibleFiles[_i2];\n    }\n    for (var _i3 in groupedDataMap) {\n      if (!grouped[_i3]) {\n        grouped[_i3] = [];\n      }\n      for (var _j3 in groupedDataMap[_i3]) {\n        grouped[_i3].push(groupedDataMap[_i3][_j3]);\n      }\n    }\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    this.showData();\n    params = {\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    return params;\n  };\n  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {};\n    return param;\n  };\n  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {\n    visibleDataMapByExp[fileName + '?' + expName] = isVisible;\n    groupedDataMap[fileName] = groupArray;\n    for (var i in values) {\n      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];\n    }\n    var params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {\n      fileName: fileName\n    };\n    return param;\n  };\n  experimentalDataOverlay.removeExp = function (fileName, expName) {\n    var isVisible = false;\n    var values = {};\n    var groupArray = [];\n    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {\n      isVisible = visibleDataMapByExp[fileName + '?' + expName];\n      delete visibleDataMapByExp[fileName + '?' + expName];\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      for (var i in groupedDataMap[fileName]) {\n        groupArray[i] = groupedDataMap[fileName][i];\n      }\n      //groupArray = groupedDataMap[fileName];\n      var index = groupedDataMap[fileName].indexOf(expName);\n      if (index != -1) {\n        delete groupedDataMap[fileName][index];\n      }\n    }\n    for (var _i4 in parsedDataMap) {\n      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {\n        if (!(_i4 in values)) {\n          values[_i4] = {};\n        }\n        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];\n        delete parsedDataMap[_i4][fileName + '?' + expName];\n      }\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      var count = 0;\n      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {\n        if (!groupedDataMap[fileName][_i5]) count++;\n      }\n      if (count == groupedDataMap[fileName].length) {\n        delete groupedDataMap[fileName];\n      }\n    }\n    params = {\n      fileName: fileName,\n      expName: expName,\n      isVisible: isVisible,\n      values: values,\n      groupArray: groupArray\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.removeFile = function (fileName) {\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i6 in visibleDataMapByExp) {\n      visible[_i6] = visibleDataMapByExp[_i6];\n    }\n    for (var _i7 in visibleFiles) {\n      visiblef[_i7] = visibleFiles[_i7];\n    }\n    for (var _i8 in groupedDataMap) {\n      if (!grouped[_i8]) {\n        grouped[_i8] = [];\n      }\n      for (var _j4 in groupedDataMap[_i8]) {\n        grouped[_i8].push(groupedDataMap[_i8][_j4]);\n      }\n    }\n    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {\n      var expName = groupedDataMap[fileName][_j5];\n      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];\n      for (var _i9 in parsedDataMap) {\n        delete parsedDataMap[_i9][fileName + '?' + expName];\n      }\n    }\n    delete groupedDataMap[fileName];\n    var params = {\n      fileName: fileName,\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    this.showData();\n    var k = 0;\n    for (var _i10 in groupedDataMap) {\n      k++;\n    }\n    if (k == 0) {\n      groupedDataMap = {};\n    }\n    return params;\n  };\n  experimentalDataOverlay.hideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = false;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.hideFile = function (fileName) {\n    visibleFiles[fileName] = false;\n    var invisible = {};\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n        invisible[fileName + '?' + expName] = false;\n        visibleDataMapByExp[fileName + '?' + expName] = false;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      invisible: invisible\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {\n    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;\n    for (var j in invisible) {\n      visibleDataMapByExp[j] = true;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.unhideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = true;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.unhideFile = function (fileName) {\n    var visible = {};\n    visibleFiles[fileName] = true;\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n        visibleDataMapByExp[fileName + '?' + expName] = true;\n        visible[fileName + '?' + expName] = true;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      visible: visible\n    };\n    return params;\n  };\n  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {\n    visibleFiles[fileName] = false;\n    for (var j in visible) {\n      visibleDataMapByExp[j] = false;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.countVisibleDataByExp = function () {\n    // Count the genomic data that will be displayed on nodes' body\n    var dataBoxCount = 0;\n    for (var exp in visibleDataMapByExp) {\n      if (visibleDataMapByExp[exp]) {\n        dataBoxCount++;\n      }\n    }\n    return dataBoxCount;\n  };\n  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {\n    var dataBoxCount = this.countVisibleDataByExp();\n    var values = [];\n    // Experimental data overlay part !\n    // const dataURI = 'data:image/svg+xml;utf8,'\n    var svgNameSpace = 'http://www.w3.org/2000/svg';\n    var nodeLabel = ele.data('label');\n    var reqWidth = ele.outerWidth();\n    var reqHeight = ele.outerHeight();\n    var overlayRecBoxW = reqWidth;\n    var overlayRecBoxH = reqHeight;\n    var svg = document.createElementNS(svgNameSpace, 'svg');\n    // It seems this should be set according to the node size !\n    svg.setAttribute('width', reqWidth);\n    svg.setAttribute('height', reqHeight);\n    // This is important you need to include this to succesfully render in cytoscape.js!\n    svg.setAttribute('xmlns', svgNameSpace);\n\n    // Overlay Data Rect\n    var overLayRectBBox = {\n      w: overlayRecBoxW,\n      h: overlayRecBoxH,\n      x: 0,\n      y: 0\n    };\n    var frequencyData = parsedDataMap[nodeLabel];\n    var maxDataBoxCount = /*(genomicDataBoxCount > 3) ? 3:*/dataBoxCount;\n    var counter = 0;\n    for (var i in groupedDataMap) {\n      for (var j in groupedDataMap[i]) {\n        var fileName = i;\n        var expName = groupedDataMap[i][j];\n        if (!visibleDataMapByExp[fileName + '?' + expName]) {\n          continue;\n        }\n        if (frequencyData[fileName + '?' + expName] !== undefined) {\n          values.push(frequencyData[fileName + '?' + expName]);\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);\n        } else {\n          values.push(\"-\");\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);\n        }\n\n        //  draw separator line between data rectangles\n        if (counter < maxDataBoxCount - 1) {\n          var overlayRect = document.createElementNS(svgNameSpace, 'line');\n          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y1', overLayRectBBox.y);\n          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);\n          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');\n          svg.appendChild(overlayRect);\n        }\n        counter++;\n      }\n    }\n    tooltip.content = \"(\" + values.join(\",\") + \")\";\n    function interpolateColor(color1, color2, factor) {\n      var result = color1.slice();\n      for (var i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n      }\n      return result;\n    }\n    ;\n    function decideColor(percent, fileName) {\n      var sorted = [];\n      for (var _i11 in colorMap[fileName]) {\n        sorted.push(_i11);\n      }\n      sorted.sort();\n      var prev = sorted[0];\n      var next = sorted[sorted.length - 1];\n      if (percent < prev || percent > next) {\n        return {\n          r: 210,\n          g: 210,\n          b: 210\n        };\n      }\n      for (var k in sorted) {\n        var i = sorted[k];\n        if (i == percent) {\n          return {\n            r: colorMap[fileName][i][0],\n            g: colorMap[fileName][i][1],\n            b: colorMap[fileName][i][2]\n          };\n        } else if (i > percent) {\n          next = i;\n          break;\n        } else {\n          prev = i;\n        }\n      }\n      var steps = 1 / (next - prev);\n      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));\n      return {\n        r: res[0],\n        g: res[1],\n        b: res[2]\n      };\n    }\n    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {\n      var colorString = '';\n      if (percent) {\n        var color = decideColor(parseInt(percent), fileName);\n        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')';\n        // Rectangle Part\n        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect.setAttribute('x', x);\n        _overlayRect.setAttribute('y', y);\n        _overlayRect.setAttribute('width', w);\n        _overlayRect.setAttribute('height', h);\n        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect);\n      } else {\n        colorString = 'rgb(210,210,210)';\n\n        // Rectangle Part\n        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect2.setAttribute('x', x);\n        _overlayRect2.setAttribute('y', y);\n        _overlayRect2.setAttribute('width', w);\n        _overlayRect2.setAttribute('height', h);\n        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect2);\n      }\n    }\n    return svg;\n  };\n  experimentalDataOverlay.showData = function () {\n    var self = this;\n    var nodeCollection = cy.collection();\n    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter(\"node\");\n    var collapsedChildrenNotParent = cy.collection();\n    var parentSet = new Set(); // parent ids of collapsed children\n    collapsedChildren.forEach(function (node) {\n      parentSet.add(node.parent().id());\n    });\n    // filter parent nodes from collapsed children\n    collapsedChildren.forEach(function (node) {\n      if (!parentSet.has(node.id())) {\n        // this means removed node is not parent\n        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);\n      }\n    });\n    var expandableNodes = cy.expandCollapse('get').expandableNodes();\n    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);\n    cy.batch(function () {\n      nodeCollection.forEach(function (node) {\n        var nodeLabel = node.data('label');\n        var imageURI = 'data:image/svg+xml;utf8,';\n        if (nodeLabel in parsedDataMap && !node.isParent()) {\n          var tooltip = {\n            content: ''\n          };\n          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);\n          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {\n            // var tooltip = \"(\" + Object.values(parsedDataMap[nodeLabel]).join(\",\") + \")\";\n            node.data(\"tooltip\", tooltip.content);\n          } else {\n            node.data('tooltip', '');\n          }\n          node.data('background-image', imageURI), node.data('background-position-x', '100%');\n          node.data('background-position-y', '100%');\n          node.data('background-width', '100%');\n          node.data('background-height', '100%');\n          node.data('background-fit', 'contain');\n          node.data('background-image-opacity', '1');\n        } else {\n          node.data('background-image', \"\");\n          node.data('tooltip', '');\n        }\n      });\n    });\n  };\n  experimentalDataOverlay.hexToRgb = function (hex) {\n    if (hex[0] == '#') {\n      hex = hex.substring(1);\n    } else {\n      return;\n    }\n    var bigint = parseInt(hex, 16);\n    var r = bigint >> 16 & 255;\n    var g = bigint >> 8 & 255;\n    var b = bigint & 255;\n    return [r, g, b];\n  };\n  experimentalDataOverlay.isHex = function (hex) {\n    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';\n  };\n  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {\n    parsedDataMap = parsedDataMap || {};\n    visibleDataMapByExp = visibleDataMapByExp || {};\n    groupedDataMap = groupedDataMap || {};\n    colorMap = colorMap || {};\n    var experiments = [];\n    var colors = {};\n    if (fileName in groupedDataMap && !sampleExperiment) {\n      return;\n    } else if (fileName in groupedDataMap && sampleExperiment) {\n      this.removeAll();\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    var colorm = {};\n    var fileD = {};\n    var fileN = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i12 in visibleDataMapByExp) {\n      visible[_i12] = visibleDataMapByExp[_i12];\n    }\n    for (var _i13 in visibleFiles) {\n      visiblef[_i13] = visibleFiles[_i13];\n    }\n    for (var _i14 in groupedDataMap) {\n      if (!grouped[_i14]) {\n        grouped[_i14] = [];\n      }\n      for (var _j6 in groupedDataMap[_i14]) {\n        grouped[_i14].push(groupedDataMap[_i14][_j6]);\n      }\n    }\n    for (var _i15 in colorMap) {\n      colorm[_i15] = colorMap[_i15];\n    }\n    for (var _i16 in visibleFiles) {\n      fileD[_i16] = fileDescription[_i16];\n    }\n    for (var _i17 in visibleFiles) {\n      fileN[_i17] = fileTitle[_i17];\n    }\n    var intregex = \"^(-?)(0|([1-9][0-9]*))(\\\\.[0-9]+)?$\";\n    var version = '1.0';\n    var clr = false;\n    // By lines\n    var lines = data.split('\\n');\n    if (lines.length < 2) {\n      errorCallback();\n      return \"Error\";\n    }\n    var k = 0;\n    var upto = 4;\n    if (lines.length < 4) {\n      upto = lines.length;\n    }\n    for (var _i18 = 0; _i18 < upto; _i18++) {\n      if (lines[_i18].substring(0, 7) == 'version') {\n        k++;\n        var metaLines = lines[_i18].split('\\t');\n        if (metaLines[1] && metaLines[1].length > 1) {\n          version = metaLines[1];\n        } else {\n          fileDescription = fileD;\n          fileTitle = fileN;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 4) == 'name') {\n        k++;\n        var _metaLines = lines[_i18].split('\\t');\n        if (_metaLines[1] && _metaLines[1].length > 1) {\n          fileTitle[fileName] = _metaLines[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 11) == 'description') {\n        k++;\n        var _metaLines2 = lines[_i18].split('\\t');\n        if (_metaLines2[1] && _metaLines2[1].length > 1) {\n          fileDescription[fileName] = _metaLines2[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 5) == 'color') {\n        clr = true;\n        k++;\n        var _metaLines3 = lines[_i18].split('\\t');\n        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {\n          errorCallback();\n          return \"Error\";\n        }\n        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {\n          var hex = _metaLines3[t + 1];\n          if (t == _metaLines3.length - 2) {\n            hex = hex.trim();\n          }\n          if (_metaLines3[t] == \"min\" || _metaLines3[t] == \"max\") {\n            if (this.isHex(hex)) {\n              colors[_metaLines3[t]] = this.hexToRgb(hex);\n            }\n          } else if (parseInt(_metaLines3[t]) != NaN) {\n            if (this.isHex(hex)) {\n              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);\n            } else {\n              fileTitle = fileN;\n              fileDescription = fileD;\n              colorMap = colorm;\n              version = \"1.0\";\n              errorCallback();\n              return \"Error\";\n            }\n          } else {\n            fileTitle = fileN;\n            fileDescription = fileD;\n            colorMap = colorm;\n            version = \"1.0\";\n            errorCallback();\n            return \"Error\";\n          }\n        }\n      }\n    }\n\n    //default colors\n    if (!clr) {\n      colors[-100] = this.hexToRgb('#0000ff');\n      colors[100] = this.hexToRgb('#ff0000');\n      colors[0] = this.hexToRgb('#ffffff');\n    }\n\n    // First line is meta data !\n    var metaLineColumns = lines[k].split('\\t');\n\n    // Parse experiment types\n    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {\n      if (_i19 == metaLineColumns.length - 1) {\n        var trimmed = metaLineColumns[_i19].trim();\n        experiments.push(trimmed);\n      } else experiments.push(metaLineColumns[_i19]);\n      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;\n      if (groupedDataMap[fileName] === undefined) {\n        groupedDataMap[fileName] = [];\n      }\n      groupedDataMap[fileName].push(experiments[_i19 - 1]);\n    }\n    visibleFiles[fileName] = true;\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE;\n\n    // parse genomic data\n    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {\n      // EOF check\n      if (lines[_i20].length === 0) {\n        break;\n      }\n      // Split each line by tab and parse genomic data content\n      var lineContent = lines[_i20].split('\\t');\n      var eleSymbol = lineContent[0];\n\n      // If current gene entry is not  in genomic data map create new map\n      if (!(eleSymbol in parsedDataMap)) {\n        parsedDataMap[eleSymbol] = {};\n      }\n\n      // Add each entry of genomic data\n      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {\n        if (_j7 == lineContent.length - 1) {\n          lineContent[_j7] = lineContent[_j7].trim();\n        }\n        if (lineContent[_j7].match(intregex)) {\n          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];\n        } else {\n          parsedDataMap = parsed;\n          visibleDataMapByExp = visible;\n          groupedDataMap = grouped;\n          colorMap = colorm;\n          visibleFiles = visiblef;\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          errorCallback();\n          return \"Error\";\n        }\n        if (lineContent[_j7] > max) {\n          max = lineContent[_j7];\n        }\n        if (lineContent[_j7] < min) {\n          min = lineContent[_j7];\n        }\n      }\n    }\n    if (colors['min']) {\n      var colorvalue = colors['min'];\n      delete colors['min'];\n      colors[min] = colorvalue;\n    }\n    if (colors['max']) {\n      var colorvalue = colors['max'];\n      delete colors['max'];\n      colors[max] = colorvalue;\n    }\n    colorMap[fileName] = colors;\n    var params = {\n      fileName: fileName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.getExperimentalData = function () {\n    return {\n      visibleDataMapByExp: visibleDataMapByExp,\n      visibleFiles: visibleFiles,\n      fileDescription: fileDescription,\n      allVis: allVis,\n      fileTitle: fileTitle,\n      parsedDataMap: parsedDataMap\n    };\n  };\n  return experimentalDataOverlay;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2V4cGVyaW1lbnRhbC1kYXRhLW92ZXJsYXkuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJwYXJzZWREYXRhTWFwIiwidmlzaWJsZURhdGFNYXBCeUV4cCIsImdyb3VwZWREYXRhTWFwIiwidmlzaWJsZUZpbGVzIiwiY29sb3JNYXAiLCJhbGxWaXMiLCJmaWxlRGVzY3JpcHRpb24iLCJmaWxlVGl0bGUiLCJleHBlcmltZW50YWxEYXRhT3ZlcmxheSIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImdldE5hbWUiLCJmbmFtZSIsImdldERlc2MiLCJmZGVzYyIsImdldEdyb3VwZWREYXRhTWFwIiwiZ2V0UGFyc2VkRGF0YU1hcCIsImdldFZpc2libGVEYXRhIiwiaGlkZUFsbCIsImludmlzaWJsZUV4cCIsImludmlzaWJsZUZpbGUiLCJpIiwiZmlsZU5hbWUiLCJqIiwibGVuZ3RoIiwiZXhwTmFtZSIsInVuZGVmaW5lZCIsInNob3dEYXRhIiwicGFyYW1zIiwiaGlkZUFsbFVuZG8iLCJ1bmhpZGVBbGwiLCJ2aXNpYmxlRXhwIiwidmlzaWJsZUZpbGUiLCJ1bmhpZGVBbGxVbmRvIiwicmVtb3ZlQWxsIiwicGFyc2VkIiwidmlzaWJsZSIsImdyb3VwZWQiLCJ2aXNpYmxlZiIsInB1c2giLCJyZXN0b3JlQWxsIiwiYWRkRXhwIiwiaXNWaXNpYmxlIiwidmFsdWVzIiwiZ3JvdXBBcnJheSIsImFkZEZpbGUiLCJyZW1vdmVFeHAiLCJpbmRleCIsImluZGV4T2YiLCJjb3VudCIsInJlbW92ZUZpbGUiLCJrIiwiaGlkZUV4cCIsImhpZGVGaWxlIiwiaW52aXNpYmxlIiwiaGlkZUZpbGVVbmRvIiwidW5oaWRlRXhwIiwidW5oaWRlRmlsZSIsInVuaGlkZUZpbGVVbmRvIiwiY291bnRWaXNpYmxlRGF0YUJ5RXhwIiwiZGF0YUJveENvdW50IiwiZXhwIiwiZ2VuZXJhdGVTVkdGb3JOb2RlIiwiZWxlIiwidG9vbHRpcCIsInN2Z05hbWVTcGFjZSIsIm5vZGVMYWJlbCIsImRhdGEiLCJyZXFXaWR0aCIsIm91dGVyV2lkdGgiLCJyZXFIZWlnaHQiLCJvdXRlckhlaWdodCIsIm92ZXJsYXlSZWNCb3hXIiwib3ZlcmxheVJlY0JveEgiLCJzdmciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsIm92ZXJMYXlSZWN0QkJveCIsInciLCJoIiwieCIsInkiLCJmcmVxdWVuY3lEYXRhIiwibWF4RGF0YUJveENvdW50IiwiY291bnRlciIsImRhdGFSZWN0YW5nbGVHZW5lcmF0b3IiLCJvdmVybGF5UmVjdCIsImFwcGVuZENoaWxkIiwiY29udGVudCIsImpvaW4iLCJpbnRlcnBvbGF0ZUNvbG9yIiwiY29sb3IxIiwiY29sb3IyIiwiZmFjdG9yIiwicmVzdWx0Iiwic2xpY2UiLCJNYXRoIiwicm91bmQiLCJkZWNpZGVDb2xvciIsInBlcmNlbnQiLCJzb3J0ZWQiLCJzb3J0IiwicHJldiIsIm5leHQiLCJyIiwiZyIsImIiLCJzdGVwcyIsInJlcyIsInBhcmVudFNWRyIsImNvbG9yU3RyaW5nIiwiY29sb3IiLCJwYXJzZUludCIsInNlbGYiLCJub2RlQ29sbGVjdGlvbiIsImNvbGxlY3Rpb24iLCJjb2xsYXBzZWRDaGlsZHJlbiIsImV4cGFuZENvbGxhcHNlIiwiZ2V0QWxsQ29sbGFwc2VkQ2hpbGRyZW5SZWN1cnNpdmVseSIsImZpbHRlciIsImNvbGxhcHNlZENoaWxkcmVuTm90UGFyZW50IiwicGFyZW50U2V0IiwiU2V0IiwiZm9yRWFjaCIsIm5vZGUiLCJhZGQiLCJwYXJlbnQiLCJpZCIsImhhcyIsInVuaW9uIiwiZXhwYW5kYWJsZU5vZGVzIiwibm9kZXMiLCJkaWZmZXJlbmNlIiwiYmF0Y2giLCJpbWFnZVVSSSIsImlzUGFyZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3V0ZXJIVE1MIiwiT2JqZWN0Iiwia2V5cyIsImhleFRvUmdiIiwiaGV4Iiwic3Vic3RyaW5nIiwiYmlnaW50IiwiaXNIZXgiLCJpc05hTiIsIk51bWJlciIsInBhcnNlRGF0YSIsImVycm9yQ2FsbGJhY2siLCJzYW1wbGVFeHBlcmltZW50IiwiZXhwZXJpbWVudHMiLCJjb2xvcnMiLCJjb2xvcm0iLCJmaWxlRCIsImZpbGVOIiwiaW50cmVnZXgiLCJ2ZXJzaW9uIiwiY2xyIiwibGluZXMiLCJzcGxpdCIsInVwdG8iLCJtZXRhTGluZXMiLCJ0IiwidHJpbSIsIk5hTiIsIm1ldGFMaW5lQ29sdW1ucyIsInRyaW1tZWQiLCJtaW4iLCJNQVhfVkFMVUUiLCJtYXgiLCJNSU5fVkFMVUUiLCJsaW5lQ29udGVudCIsImVsZVN5bWJvbCIsIm1hdGNoIiwiY29sb3J2YWx1ZSIsImdldEV4cGVyaW1lbnRhbERhdGEiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL3NiZ252aXovLi9zcmMvdXRpbGl0aWVzL2V4cGVyaW1lbnRhbC1kYXRhLW92ZXJsYXkuanM/NDMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGN5O1xyXG4gIHZhciBwYXJzZWREYXRhTWFwO1xyXG4gIHZhciB2aXNpYmxlRGF0YU1hcEJ5RXhwO1xyXG4gIHZhciBncm91cGVkRGF0YU1hcDtcclxuICB2YXIgdmlzaWJsZUZpbGVzO1xyXG4gIHZhciBjb2xvck1hcDtcclxuICB2YXIgYWxsVmlzO1xyXG4gIHZhciBmaWxlRGVzY3JpcHRpb247XHJcbiAgdmFyIGZpbGVUaXRsZTtcclxuICBmdW5jdGlvbiBleHBlcmltZW50YWxEYXRhT3ZlcmxheShwYXJhbSkge1xyXG4gICAgLy8gSW5pdFxyXG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gICAgcGFyc2VkRGF0YU1hcCA9IHt9O1xyXG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHt9O1xyXG4gICAgdmlzaWJsZUZpbGVzID0ge307XHJcbiAgICBncm91cGVkRGF0YU1hcCA9IHt9O1xyXG4gICAgY29sb3JNYXAgPSB7fTtcclxuICAgIGFsbFZpcyA9IHRydWU7XHJcblxyXG4gICAgZmlsZURlc2NyaXB0aW9uID0ge307XHJcbiAgICBmaWxlVGl0bGUgPSB7fTtcclxuICB9XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZm5hbWU7XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuZ2V0RGVzYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmZGVzYztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXRHcm91cGVkRGF0YU1hcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBncm91cGVkRGF0YU1hcDtcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXRQYXJzZWREYXRhTWFwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHBhcnNlZERhdGFNYXA7XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuZ2V0VmlzaWJsZURhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdmlzaWJsZURhdGFNYXBCeUV4cDtcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5oaWRlQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGludmlzaWJsZUV4cCA9IHt9O1xyXG4gICAgdmFyIGludmlzaWJsZUZpbGUgPSB7fTtcclxuICAgIGFsbFZpcyA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IGkgaW4gZ3JvdXBlZERhdGFNYXApIHtcclxuICAgICAgaWYgKHZpc2libGVGaWxlc1tpXSkge1xyXG4gICAgICAgIHZpc2libGVGaWxlc1tpXSA9IGZhbHNlO1xyXG4gICAgICAgIGludmlzaWJsZUZpbGVbaV0gPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgZmlsZU5hbWUgaW4gZ3JvdXBlZERhdGFNYXApIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBjb25zdCBleHBOYW1lID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2pdO1xyXG4gICAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICBpbnZpc2libGVFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcGFyYW1zID0ge2ludmlzaWJsZUZpbGUsIGludmlzaWJsZUV4cH07XHJcbiAgICByZXR1cm4gcGFyYW1zO1xyXG5cclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5oaWRlQWxsVW5kbyA9IGZ1bmN0aW9uIChpbnZpc2libGVGaWxlLCBpbnZpc2libGVFeHApIHtcclxuICAgIGZvciAobGV0IGogaW4gaW52aXNpYmxlRmlsZSkge1xyXG4gICAgICB2aXNpYmxlRmlsZXNbal0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaiBpbiBpbnZpc2libGVFeHApIHtcclxuICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtqXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBhbGxWaXMgPSB0cnVlO1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2aXNpYmxlRXhwID0ge307XHJcbiAgICB2YXIgdmlzaWJsZUZpbGUgPSB7fTtcclxuICAgIGFsbFZpcyA9IHRydWU7XHJcbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVGaWxlcykge1xyXG4gICAgICBpZiAoIXZpc2libGVGaWxlc1tpXSkge1xyXG4gICAgICAgIHZpc2libGVGaWxlc1tpXSA9IHRydWU7XHJcbiAgICAgICAgdmlzaWJsZUZpbGVbaV0gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBmaWxlTmFtZSBpbiBncm91cGVkRGF0YU1hcCkge1xyXG4gICAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGNvbnN0IGV4cE5hbWUgPSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV1bal07XHJcbiAgICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IGZhbHNlKSB7XHJcbiAgICAgICAgICB2aXNpYmxlRXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuc2hvd0RhdGEoKTtcclxuICAgIHJldHVybiB7dmlzaWJsZUV4cCwgdmlzaWJsZUZpbGV9O1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUFsbFVuZG8gPSBmdW5jdGlvbiAodmlzaWJsZUZpbGUsIHZpc2libGVFeHApIHtcclxuICAgIGZvciAobGV0IGogaW4gdmlzaWJsZUZpbGUpIHtcclxuICAgICAgdmlzaWJsZUZpbGVzW2pdID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBqIGluIHZpc2libGVFeHApIHtcclxuICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtqXSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYWxsVmlzID0gZmFsc2U7XHJcbiAgICB0aGlzLnNob3dEYXRhKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkucmVtb3ZlQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHBhcnNlZCA9IHt9O1xyXG4gICAgdmFyIHZpc2libGUgPSB7fTtcclxuICAgIHZhciBncm91cGVkID0ge307XHJcbiAgICB2YXIgdmlzaWJsZWYgPSB7fTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHBhcnNlZERhdGFNYXApIHtcclxuICAgICAgaWYgKCFwYXJzZWRbaV0pIHtcclxuICAgICAgICBwYXJzZWRbaV0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBqIGluIHBhcnNlZERhdGFNYXBbaV0pIHtcclxuICAgICAgICBwYXJzZWRbaV1bal0gPSBwYXJzZWREYXRhTWFwW2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVEYXRhTWFwQnlFeHApIHtcclxuICAgICAgdmlzaWJsZVtpXSA9IHZpc2libGVEYXRhTWFwQnlFeHBbaV07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcclxuICAgICAgdmlzaWJsZWZbaV0gPSB2aXNpYmxlRmlsZXNbaV07XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIGdyb3VwZWREYXRhTWFwKSB7XHJcbiAgICAgIGlmICghZ3JvdXBlZFtpXSkge1xyXG4gICAgICAgIGdyb3VwZWRbaV0gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBqIGluIGdyb3VwZWREYXRhTWFwW2ldKSB7XHJcbiAgICAgICAgZ3JvdXBlZFtpXS5wdXNoKGdyb3VwZWREYXRhTWFwW2ldW2pdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGFyc2VkRGF0YU1hcCA9IHt9O1xyXG4gICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHt9O1xyXG4gICAgdmlzaWJsZUZpbGVzID0ge307XHJcbiAgICBncm91cGVkRGF0YU1hcCA9IHt9O1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcGFyYW1zID0ge3BhcnNlZCwgdmlzaWJsZSwgZ3JvdXBlZCwgdmlzaWJsZWZ9O1xyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5yZXN0b3JlQWxsID0gZnVuY3Rpb24gKHBhcnNlZCwgdmlzaWJsZSwgZ3JvdXBlZCwgdmlzaWJsZWYpIHtcclxuICAgIHBhcnNlZERhdGFNYXAgPSBwYXJzZWQ7XHJcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwID0gdmlzaWJsZTtcclxuICAgIGdyb3VwZWREYXRhTWFwID0gZ3JvdXBlZDtcclxuICAgIHZpc2libGVGaWxlcyA9IHZpc2libGVmO1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcGFyYW0gPSB7fTtcclxuICAgIHJldHVybiBwYXJhbTtcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5hZGRFeHAgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIGV4cE5hbWUsIGlzVmlzaWJsZSwgdmFsdWVzLCBncm91cEFycmF5KSB7XHJcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPSBpc1Zpc2libGU7XHJcbiAgICBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gPSBncm91cEFycmF5O1xyXG5cclxuICAgIGZvciAobGV0IGkgaW4gdmFsdWVzKSB7XHJcbiAgICAgIGlmICh2YWx1ZXNbaV1bZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgcGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gdmFsdWVzW2ldW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHBhcmFtcyA9IHtmaWxlTmFtZSwgZXhwTmFtZX07XHJcbiAgICB0aGlzLnNob3dEYXRhKCk7XHJcbiAgICByZXR1cm4gcGFyYW1zO1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmFkZEZpbGUgPSBmdW5jdGlvbiAoZmlsZU5hbWUsIHBhcnNlZCwgdmlzaWJsZSwgZ3JvdXBlZCwgdmlzaWJsZWYpIHtcclxuICAgIHBhcnNlZERhdGFNYXAgPSBwYXJzZWQ7XHJcbiAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwID0gdmlzaWJsZTtcclxuICAgIGdyb3VwZWREYXRhTWFwID0gZ3JvdXBlZDtcclxuICAgIHZpc2libGVGaWxlcyA9IHZpc2libGVmO1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcGFyYW0gPSB7ZmlsZU5hbWV9O1xyXG4gICAgcmV0dXJuIHBhcmFtO1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlbW92ZUV4cCA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgZXhwTmFtZSkge1xyXG4gICAgdmFyIGlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgdmFyIHZhbHVlcyA9IHt9O1xyXG4gICAgdmFyIGdyb3VwQXJyYXkgPSBbXTtcclxuXHJcbiAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBpc1Zpc2libGUgPSB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XHJcbiAgICAgIGRlbGV0ZSB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgZm9yIChsZXQgaSBpbiBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0pIHtcclxuICAgICAgICBncm91cEFycmF5W2ldID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2ldO1xyXG4gICAgICB9XHJcbiAgICAgIC8vZ3JvdXBBcnJheSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXTtcclxuICAgICAgdmFyIGluZGV4ID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdLmluZGV4T2YoZXhwTmFtZSk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggIT0gLTEpIHtcclxuICAgICAgICBkZWxldGUgZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2luZGV4XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgaW4gcGFyc2VkRGF0YU1hcCkge1xyXG4gICAgICBpZiAocGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghKGkgaW4gdmFsdWVzKSkge1xyXG4gICAgICAgICAgdmFsdWVzW2ldID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbHVlc1tpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gcGFyc2VkRGF0YU1hcFtpXVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdO1xyXG4gICAgICAgIGRlbGV0ZSBwYXJzZWREYXRhTWFwW2ldW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmICghZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2ldKVxyXG4gICAgICAgICAgY291bnQrKztcclxuICAgICAgfVxyXG4gICAgICBpZiAoY291bnQgPT0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdLmxlbmd0aCkge1xyXG4gICAgICAgIGRlbGV0ZSBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHBhcmFtcyA9IHtmaWxlTmFtZSwgZXhwTmFtZSwgaXNWaXNpYmxlLCB2YWx1ZXMsIGdyb3VwQXJyYXl9O1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5yZW1vdmVGaWxlID0gZnVuY3Rpb24gKGZpbGVOYW1lKSB7XHJcbiAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdID09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHBhcnNlZCA9IHt9O1xyXG4gICAgdmFyIHZpc2libGUgPSB7fTtcclxuICAgIHZhciBncm91cGVkID0ge307XHJcbiAgICB2YXIgdmlzaWJsZWYgPSB7fTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHBhcnNlZERhdGFNYXApIHtcclxuICAgICAgaWYgKCFwYXJzZWRbaV0pIHtcclxuICAgICAgICBwYXJzZWRbaV0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBqIGluIHBhcnNlZERhdGFNYXBbaV0pIHtcclxuICAgICAgICBwYXJzZWRbaV1bal0gPSBwYXJzZWREYXRhTWFwW2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVEYXRhTWFwQnlFeHApIHtcclxuICAgICAgdmlzaWJsZVtpXSA9IHZpc2libGVEYXRhTWFwQnlFeHBbaV07XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIHZpc2libGVGaWxlcykge1xyXG4gICAgICB2aXNpYmxlZltpXSA9IHZpc2libGVGaWxlc1tpXTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgaW4gZ3JvdXBlZERhdGFNYXApIHtcclxuICAgICAgaWYgKCFncm91cGVkW2ldKSB7XHJcbiAgICAgICAgZ3JvdXBlZFtpXSA9IFtdO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAobGV0IGogaW4gZ3JvdXBlZERhdGFNYXBbaV0pIHtcclxuICAgICAgICBncm91cGVkW2ldLnB1c2goZ3JvdXBlZERhdGFNYXBbaV1bal0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgY29uc3QgZXhwTmFtZSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXVtqXTtcclxuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgZGVsZXRlIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXTtcclxuICAgICAgZm9yIChsZXQgaSBpbiBwYXJzZWREYXRhTWFwKSB7XHJcbiAgICAgICAgZGVsZXRlIHBhcnNlZERhdGFNYXBbaV1bZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVsZXRlIGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXTtcclxuXHJcbiAgICB2YXIgcGFyYW1zID0ge2ZpbGVOYW1lLCBwYXJzZWQsIHZpc2libGUsIGdyb3VwZWQsIHZpc2libGVmfTtcclxuICAgIHRoaXMuc2hvd0RhdGEoKTtcclxuICAgIHZhciBrID0gMDtcclxuICAgIGZvciAobGV0IGkgaW4gZ3JvdXBlZERhdGFNYXApXHJcbiAgICB7XHJcbiAgICAgIGsrKztcclxuICAgIH1cclxuICAgIGlmIChrID09IDApIHtcclxuICAgICAgZ3JvdXBlZERhdGFNYXAgPSB7fTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXM7XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaGlkZUV4cCA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgZXhwTmFtZSkge1xyXG4gICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IGZhbHNlO1xyXG4gICAgcGFyYW1zID0ge2ZpbGVOYW1lLCBleHBOYW1lfTtcclxuICAgIHRoaXMuc2hvd0RhdGEoKTtcclxuICAgIHJldHVybiBwYXJhbXM7XHJcbiAgfVxyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5oaWRlRmlsZSA9IGZ1bmN0aW9uIChmaWxlTmFtZSkge1xyXG4gICAgdmlzaWJsZUZpbGVzW2ZpbGVOYW1lXSA9IGZhbHNlO1xyXG4gICAgdmFyIGludmlzaWJsZSA9IHt9O1xyXG4gICAgaWYgKGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgY29uc3QgZXhwTmFtZSA9IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXVtqXTtcclxuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGlmICh2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gPT0gdHJ1ZSkge1xyXG4gICAgICAgIGludmlzaWJsZVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNob3dEYXRhKCk7XHJcbiAgICBwYXJhbXMgPSB7ZmlsZU5hbWUsIGludmlzaWJsZX07XHJcbiAgICByZXR1cm4gcGFyYW1zO1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhpZGVGaWxlVW5kbyA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgaW52aXNpYmxlKSB7XHJcbiAgICBpZiAodmlzaWJsZUZpbGVzW2ZpbGVOYW1lXSAhPSB1bmRlZmluZWQpXHJcbiAgICAgIHZpc2libGVGaWxlc1tmaWxlTmFtZV0gPSB0cnVlO1xyXG4gICAgZWxzZVxyXG4gICAgICByZXR1cm47XHJcbiAgICBmb3IgKGxldCBqIGluIGludmlzaWJsZSkge1xyXG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2pdID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc2hvd0RhdGEoKTtcclxuICAgIHJldHVybiB7ZmlsZU5hbWV9O1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUV4cCA9IGZ1bmN0aW9uIChmaWxlTmFtZSwgZXhwTmFtZSkge1xyXG4gICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IHRydWU7XHJcbiAgICBwYXJhbXMgPSB7ZmlsZU5hbWUsIGV4cE5hbWV9O1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS51bmhpZGVGaWxlID0gZnVuY3Rpb24gKGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgdmlzaWJsZSA9IHt9O1xyXG4gICAgdmlzaWJsZUZpbGVzW2ZpbGVOYW1lXSA9IHRydWU7XHJcbiAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdID09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwZWREYXRhTWFwW2ZpbGVOYW1lXS5sZW5ndGg7IGorKykge1xyXG4gICAgICBjb25zdCBleHBOYW1lID0gZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdW2pdO1xyXG4gICAgICBpZiAodmlzaWJsZURhdGFNYXBCeUV4cFtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID09IHVuZGVmaW5lZClcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9PSBmYWxzZSkge1xyXG4gICAgICAgIHZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgdmlzaWJsZVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcGFyYW1zID0ge2ZpbGVOYW1lLCB2aXNpYmxlfTtcclxuICAgIHJldHVybiBwYXJhbXM7XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkudW5oaWRlRmlsZVVuZG8gPSBmdW5jdGlvbiAoZmlsZU5hbWUsIHZpc2libGUpIHtcclxuICAgIHZpc2libGVGaWxlc1tmaWxlTmFtZV0gPSBmYWxzZTtcclxuICAgIGZvciAobGV0IGogaW4gdmlzaWJsZSkge1xyXG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2pdID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNob3dEYXRhKCk7XHJcbiAgICByZXR1cm4ge2ZpbGVOYW1lfTtcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5jb3VudFZpc2libGVEYXRhQnlFeHAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBDb3VudCB0aGUgZ2Vub21pYyBkYXRhIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgb24gbm9kZXMnIGJvZHlcclxuICAgIGxldCBkYXRhQm94Q291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgZXhwIGluIHZpc2libGVEYXRhTWFwQnlFeHApIHtcclxuICAgICAgaWYgKHZpc2libGVEYXRhTWFwQnlFeHBbZXhwXSkge1xyXG4gICAgICAgIGRhdGFCb3hDb3VudCsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YUJveENvdW50O1xyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmdlbmVyYXRlU1ZHRm9yTm9kZSA9IGZ1bmN0aW9uIChlbGUsIHRvb2x0aXApIHtcclxuICAgIGNvbnN0IGRhdGFCb3hDb3VudCA9IHRoaXMuY291bnRWaXNpYmxlRGF0YUJ5RXhwKCk7XHJcbiAgICB2YXIgdmFsdWVzID0gW107ICAgXHJcbiAgICAvLyBFeHBlcmltZW50YWwgZGF0YSBvdmVybGF5IHBhcnQgIVxyXG4gICAgLy8gY29uc3QgZGF0YVVSSSA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwnXHJcbiAgICBjb25zdCBzdmdOYW1lU3BhY2UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xyXG4gICAgY29uc3Qgbm9kZUxhYmVsID0gZWxlLmRhdGEoJ2xhYmVsJyk7XHJcbiAgICBjb25zdCByZXFXaWR0aCA9IGVsZS5vdXRlcldpZHRoKCk7XHJcbiAgICBjb25zdCByZXFIZWlnaHQgPSBlbGUub3V0ZXJIZWlnaHQoKTtcclxuICAgIGNvbnN0IG92ZXJsYXlSZWNCb3hXID0gcmVxV2lkdGg7XHJcbiAgICBjb25zdCBvdmVybGF5UmVjQm94SCA9IHJlcUhlaWdodDtcclxuICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOYW1lU3BhY2UsICdzdmcnKTtcclxuICAgIC8vIEl0IHNlZW1zIHRoaXMgc2hvdWxkIGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIG5vZGUgc2l6ZSAhXHJcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHJlcVdpZHRoKTtcclxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHJlcUhlaWdodCk7XHJcbiAgICAvLyBUaGlzIGlzIGltcG9ydGFudCB5b3UgbmVlZCB0byBpbmNsdWRlIHRoaXMgdG8gc3VjY2VzZnVsbHkgcmVuZGVyIGluIGN5dG9zY2FwZS5qcyFcclxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgc3ZnTmFtZVNwYWNlKTtcclxuXHJcbiAgICAvLyBPdmVybGF5IERhdGEgUmVjdFxyXG4gICAgY29uc3Qgb3ZlckxheVJlY3RCQm94ID0ge1xyXG4gICAgICB3OiBvdmVybGF5UmVjQm94VyxcclxuICAgICAgaDogb3ZlcmxheVJlY0JveEgsXHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDBcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZnJlcXVlbmN5RGF0YSA9IHBhcnNlZERhdGFNYXBbbm9kZUxhYmVsXTtcclxuXHJcbiAgICBsZXQgbWF4RGF0YUJveENvdW50ID0gLyooZ2Vub21pY0RhdGFCb3hDb3VudCA+IDMpID8gMzoqLyBkYXRhQm94Q291bnQ7XHJcbiAgICBsZXQgY291bnRlciA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiBncm91cGVkRGF0YU1hcCkge1xyXG4gICAgICBmb3IgKGxldCBqIGluIGdyb3VwZWREYXRhTWFwW2ldKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBpO1xyXG4gICAgICAgIGNvbnN0IGV4cE5hbWUgPSBncm91cGVkRGF0YU1hcFtpXVtqXTtcclxuICAgICAgICBpZiAoIXZpc2libGVEYXRhTWFwQnlFeHBbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSkge1xyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmcmVxdWVuY3lEYXRhW2ZpbGVOYW1lICsgJz8nICsgZXhwTmFtZV0gIT09IHVuZGVmaW5lZCkgeyAgICAgICAgIFxyXG4gICAgICAgICAgdmFsdWVzLnB1c2goZnJlcXVlbmN5RGF0YVtmaWxlTmFtZSArICc/JyArIGV4cE5hbWVdKTtcclxuICAgICAgICAgIGRhdGFSZWN0YW5nbGVHZW5lcmF0b3IoXHJcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC54ICtcclxuICAgICAgICAgICAgICAgICAgKGNvdW50ZXIgKiBvdmVyTGF5UmVjdEJCb3gudykgLyBtYXhEYXRhQm94Q291bnQsXHJcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC55LFxyXG4gICAgICAgICAgICAgICAgICBvdmVyTGF5UmVjdEJCb3gudyAvIG1heERhdGFCb3hDb3VudCxcclxuICAgICAgICAgICAgICAgICAgb3ZlckxheVJlY3RCQm94LmgsXHJcbiAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeURhdGFbZmlsZU5hbWUgKyAnPycgKyBleHBOYW1lXSxcclxuICAgICAgICAgICAgICAgICAgc3ZnLFxyXG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZXMucHVzaChcIi1cIik7XHJcbiAgICAgICAgICBkYXRhUmVjdGFuZ2xlR2VuZXJhdG9yKFxyXG4gICAgICAgICAgICAgICAgICBvdmVyTGF5UmVjdEJCb3gueCArXHJcbiAgICAgICAgICAgICAgICAgIChjb3VudGVyICogb3ZlckxheVJlY3RCQm94LncpIC8gbWF4RGF0YUJveENvdW50LFxyXG4gICAgICAgICAgICAgICAgICBvdmVyTGF5UmVjdEJCb3gueSxcclxuICAgICAgICAgICAgICAgICAgb3ZlckxheVJlY3RCQm94LncgLyBtYXhEYXRhQm94Q291bnQsXHJcbiAgICAgICAgICAgICAgICAgIG92ZXJMYXlSZWN0QkJveC5oLFxyXG4gICAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgICBzdmcsXHJcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAvLyAgZHJhdyBzZXBhcmF0b3IgbGluZSBiZXR3ZWVuIGRhdGEgcmVjdGFuZ2xlc1xyXG4gICAgICAgIGlmIChjb3VudGVyIDwgbWF4RGF0YUJveENvdW50IC0gMSkge1xyXG4gICAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZVNwYWNlLCAnbGluZScpO1xyXG4gICAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd4MScsIG92ZXJMYXlSZWN0QkJveC54ICsgKGNvdW50ZXIgKiBvdmVyTGF5UmVjdEJCb3gudykgLyBtYXhEYXRhQm94Q291bnRcclxuICAgICAgICAgICAgICAgICAgKyBvdmVyTGF5UmVjdEJCb3gudyAvIG1heERhdGFCb3hDb3VudCk7XHJcbiAgICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3kxJywgb3ZlckxheVJlY3RCQm94LnkpO1xyXG4gICAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd4MicsIG92ZXJMYXlSZWN0QkJveC54ICsgKGNvdW50ZXIgKiBvdmVyTGF5UmVjdEJCb3gudykgLyBtYXhEYXRhQm94Q291bnRcclxuICAgICAgICAgICAgICAgICAgKyBvdmVyTGF5UmVjdEJCb3gudyAvIG1heERhdGFCb3hDb3VudCk7XHJcbiAgICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ3kyJywgb3ZlckxheVJlY3RCQm94LnkgKyBvdmVyTGF5UmVjdEJCb3guaCk7XHJcbiAgICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgICAgICdzdHlsZScsXHJcbiAgICAgICAgICAgICAgICAgICdzdHJva2Utd2lkdGg6MTtzdHJva2U6cmdiKDg1LDg1LDg1KTsnXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQob3ZlcmxheVJlY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb3VudGVyKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0b29sdGlwLmNvbnRlbnQgPSBcIihcIiArIHZhbHVlcy5qb2luKFwiLFwiKSArIFwiKVwiO1xyXG5cclxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlQ29sb3IoY29sb3IxLCBjb2xvcjIsIGZhY3Rvcikge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gY29sb3IxLnNsaWNlKCk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5yb3VuZChyZXN1bHRbaV0gKyBmYWN0b3IgKiAoY29sb3IyW2ldIC0gY29sb3IxW2ldKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZGVjaWRlQ29sb3IocGVyY2VudCwgZmlsZU5hbWUpIHtcclxuICAgICAgdmFyIHNvcnRlZCA9IFtdO1xyXG4gICAgICBmb3IgKGxldCBpIGluIGNvbG9yTWFwW2ZpbGVOYW1lXSkge1xyXG4gICAgICAgIHNvcnRlZC5wdXNoKGkpO1xyXG4gICAgICB9XHJcbiAgICAgIHNvcnRlZC5zb3J0KCk7XHJcblxyXG4gICAgICB2YXIgcHJldiA9IHNvcnRlZFswXTtcclxuICAgICAgdmFyIG5leHQgPSBzb3J0ZWRbc29ydGVkLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgaWYgKHBlcmNlbnQgPCBwcmV2IHx8IHBlcmNlbnQgPiBuZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuICh7cjogMjEwLCBnOiAyMTAsIGI6IDIxMH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBrIGluIHNvcnRlZCkge1xyXG4gICAgICAgIHZhciBpID0gc29ydGVkW2tdO1xyXG4gICAgICAgIGlmIChpID09IHBlcmNlbnQpIHtcclxuICAgICAgICAgIHJldHVybiAoe3I6IGNvbG9yTWFwW2ZpbGVOYW1lXVtpXVswXSwgZzogY29sb3JNYXBbZmlsZU5hbWVdW2ldWzFdLCBiOiBjb2xvck1hcFtmaWxlTmFtZV1baV1bMl19KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGkgPiBwZXJjZW50KSB7XHJcbiAgICAgICAgICBuZXh0ID0gaTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwcmV2ID0gaTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdGVwcyA9IDEgLyAobmV4dCAtIHByZXYpO1xyXG4gICAgICB2YXIgcmVzID0gaW50ZXJwb2xhdGVDb2xvcihjb2xvck1hcFtmaWxlTmFtZV1bcHJldl0sIGNvbG9yTWFwW2ZpbGVOYW1lXVtuZXh0XSwgc3RlcHMgKiAocGVyY2VudCAtIHByZXYpKTtcclxuXHJcbiAgICAgIHJldHVybiAoe3I6IHJlc1swXSwgZzogcmVzWzFdLCBiOiByZXNbMl19KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGRhdGFSZWN0YW5nbGVHZW5lcmF0b3IoeCwgeSwgdywgaCwgcGVyY2VudCwgcGFyZW50U1ZHLCBmaWxlTmFtZSkge1xyXG4gICAgICBsZXQgY29sb3JTdHJpbmcgPSAnJztcclxuICAgICAgaWYgKHBlcmNlbnQpIHtcclxuICAgICAgICB2YXIgY29sb3IgPSBkZWNpZGVDb2xvcihwYXJzZUludChwZXJjZW50KSwgZmlsZU5hbWUpO1xyXG4gICAgICAgIGNvbG9yU3RyaW5nID1cclxuICAgICAgICAgICAgICAgICdyZ2IoJyArXHJcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbG9yLnIpICtcclxuICAgICAgICAgICAgICAgICcsJyArXHJcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbG9yLmcpICtcclxuICAgICAgICAgICAgICAgICcsJyArXHJcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKGNvbG9yLmIpICsgJyknO1xyXG4gICAgICAgIC8vIFJlY3RhbmdsZSBQYXJ0XHJcbiAgICAgICAgY29uc3Qgb3ZlcmxheVJlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZVNwYWNlLCAncmVjdCcpO1xyXG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgneCcsIHgpO1xyXG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgneScsIHkpO1xyXG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3KTtcclxuICAgICAgICBvdmVybGF5UmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGgpO1xyXG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnb3BhY2l0eToxO2ZpbGw6JyArIGNvbG9yU3RyaW5nICsgJzsnKTtcclxuXHJcbiAgICAgICAgcGFyZW50U1ZHLmFwcGVuZENoaWxkKG92ZXJsYXlSZWN0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb2xvclN0cmluZyA9ICdyZ2IoMjEwLDIxMCwyMTApJztcclxuXHJcbiAgICAgICAgLy8gUmVjdGFuZ2xlIFBhcnRcclxuICAgICAgICBjb25zdCBvdmVybGF5UmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOYW1lU3BhY2UsICdyZWN0Jyk7XHJcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd4JywgeCk7XHJcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd5JywgeSk7XHJcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcpO1xyXG4gICAgICAgIG92ZXJsYXlSZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaCk7XHJcbiAgICAgICAgb3ZlcmxheVJlY3Quc2V0QXR0cmlidXRlKCdzdHlsZScsICdvcGFjaXR5OjE7ZmlsbDonICsgY29sb3JTdHJpbmcgKyAnOycpO1xyXG5cclxuICAgICAgICBwYXJlbnRTVkcuYXBwZW5kQ2hpbGQob3ZlcmxheVJlY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN2ZztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5zaG93RGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIG5vZGVDb2xsZWN0aW9uID0gY3kuY29sbGVjdGlvbigpO1xyXG4gICAgdmFyIGNvbGxhcHNlZENoaWxkcmVuID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpLmdldEFsbENvbGxhcHNlZENoaWxkcmVuUmVjdXJzaXZlbHkoKS5maWx0ZXIoXCJub2RlXCIpO1xyXG4gICAgdmFyIGNvbGxhcHNlZENoaWxkcmVuTm90UGFyZW50ID0gY3kuY29sbGVjdGlvbigpO1xyXG4gICAgdmFyIHBhcmVudFNldCA9IG5ldyBTZXQoKTsgIC8vIHBhcmVudCBpZHMgb2YgY29sbGFwc2VkIGNoaWxkcmVuXHJcbiAgICBjb2xsYXBzZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICBwYXJlbnRTZXQuYWRkKG5vZGUucGFyZW50KCkuaWQoKSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGZpbHRlciBwYXJlbnQgbm9kZXMgZnJvbSBjb2xsYXBzZWQgY2hpbGRyZW5cclxuICAgIGNvbGxhcHNlZENoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XHJcbiAgICAgIGlmKCFwYXJlbnRTZXQuaGFzKG5vZGUuaWQoKSkpeyAvLyB0aGlzIG1lYW5zIHJlbW92ZWQgbm9kZSBpcyBub3QgcGFyZW50XHJcbiAgICAgICAgY29sbGFwc2VkQ2hpbGRyZW5Ob3RQYXJlbnQgPSBjb2xsYXBzZWRDaGlsZHJlbk5vdFBhcmVudC51bmlvbihub2RlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB2YXIgZXhwYW5kYWJsZU5vZGVzID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpLmV4cGFuZGFibGVOb2RlcygpO1xyXG4gICAgbm9kZUNvbGxlY3Rpb24gPSBub2RlQ29sbGVjdGlvbi51bmlvbihjeS5ub2RlcygpKS51bmlvbihjb2xsYXBzZWRDaGlsZHJlbk5vdFBhcmVudCkuZGlmZmVyZW5jZShleHBhbmRhYmxlTm9kZXMpO1xyXG4gICAgY3kuYmF0Y2goZnVuY3Rpb24oKXtcclxuICAgICAgbm9kZUNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGVMYWJlbCA9IG5vZGUuZGF0YSgnbGFiZWwnKTtcclxuICAgICAgICB2YXIgaW1hZ2VVUkkgPSAnZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsJztcclxuICAgICAgICBpZiAobm9kZUxhYmVsIGluIHBhcnNlZERhdGFNYXAgJiYgIW5vZGUuaXNQYXJlbnQoKSkge1xyXG5cclxuICAgICAgICAgIHZhciB0b29sdGlwID0ge2NvbnRlbnQ6Jyd9O1xyXG4gICAgICAgICAgaW1hZ2VVUkkgPSBpbWFnZVVSSSArIGVuY29kZVVSSUNvbXBvbmVudChzZWxmLmdlbmVyYXRlU1ZHRm9yTm9kZShub2RlLHRvb2x0aXApLm91dGVySFRNTCk7XHJcblxyXG4gICAgICAgICAgaWYoT2JqZWN0LmtleXMocGFyc2VkRGF0YU1hcFtub2RlTGFiZWxdKS5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAvLyB2YXIgdG9vbHRpcCA9IFwiKFwiICsgT2JqZWN0LnZhbHVlcyhwYXJzZWREYXRhTWFwW25vZGVMYWJlbF0pLmpvaW4oXCIsXCIpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YShcInRvb2x0aXBcIix0b29sdGlwLmNvbnRlbnQpO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YSgndG9vbHRpcCcsJycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWltYWdlJywgaW1hZ2VVUkkpLFxyXG4gICAgICAgICAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtcG9zaXRpb24teCcsICcxMDAlJyk7XHJcbiAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtcG9zaXRpb24teScsICcxMDAlJyk7XHJcbiAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtd2lkdGgnLCAnMTAwJScpO1xyXG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWhlaWdodCcsICcxMDAlJyk7XHJcbiAgICAgICAgICBub2RlLmRhdGEoJ2JhY2tncm91bmQtZml0JywgJ2NvbnRhaW4nKTtcclxuICAgICAgICAgIG5vZGUuZGF0YSgnYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5JywgJzEnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbm9kZS5kYXRhKCdiYWNrZ3JvdW5kLWltYWdlJywgXCJcIik7XHJcbiAgICAgICAgICBub2RlLmRhdGEoJ3Rvb2x0aXAnLCcnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7ICAgICAgXHJcbiAgICAgIFxyXG4gIH07XHJcblxyXG4gIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhleFRvUmdiID0gZnVuY3Rpb24gKGhleCkge1xyXG4gICAgaWYgKGhleFswXSA9PSAnIycpIHtcclxuICAgICAgaGV4ID0gaGV4LnN1YnN0cmluZygxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBiaWdpbnQgPSBwYXJzZUludChoZXgsIDE2KTtcclxuICAgIHZhciByID0gKGJpZ2ludCA+PiAxNikgJiAyNTU7XHJcbiAgICB2YXIgZyA9IChiaWdpbnQgPj4gOCkgJiAyNTU7XHJcbiAgICB2YXIgYiA9IGJpZ2ludCAmIDI1NTtcclxuICAgIHJldHVybiBbciwgZywgYl07XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaXNIZXggPSBmdW5jdGlvbiAoaGV4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGhleCA9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAmJiBoZXgubGVuZ3RoID09IDdcclxuICAgICAgICAgICAgJiYgIWlzTmFOKE51bWJlcignMHgnICsgaGV4LnN1YnN0cmluZygxKSkpXHJcbiAgICAgICAgICAgICYmIGhleFswXSA9PSAnIyc7XHJcbiAgfTtcclxuXHJcbiAgZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkucGFyc2VEYXRhID0gZnVuY3Rpb24gKGRhdGEsIGZpbGVOYW1lLCBlcnJvckNhbGxiYWNrLCBzYW1wbGVFeHBlcmltZW50KSB7XHJcbiAgICBwYXJzZWREYXRhTWFwID0gcGFyc2VkRGF0YU1hcCB8fCB7fTtcclxuICAgIHZpc2libGVEYXRhTWFwQnlFeHAgPSB2aXNpYmxlRGF0YU1hcEJ5RXhwIHx8IHt9O1xyXG4gICAgZ3JvdXBlZERhdGFNYXAgPSBncm91cGVkRGF0YU1hcCB8fCB7fTtcclxuICAgIGNvbG9yTWFwID0gY29sb3JNYXAgfHwge307XHJcbiAgICBjb25zdCBleHBlcmltZW50cyA9IFtdO1xyXG4gICAgdmFyIGNvbG9ycyA9IHt9O1xyXG5cclxuICAgIGlmIChmaWxlTmFtZSBpbiBncm91cGVkRGF0YU1hcCAmJiAhc2FtcGxlRXhwZXJpbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmaWxlTmFtZSBpbiBncm91cGVkRGF0YU1hcCAmJiBzYW1wbGVFeHBlcmltZW50KSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlQWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHBhcnNlZCA9IHt9O1xyXG4gICAgdmFyIHZpc2libGUgPSB7fTtcclxuICAgIHZhciBncm91cGVkID0ge307XHJcbiAgICB2YXIgdmlzaWJsZWYgPSB7fTtcclxuICAgIHZhciBjb2xvcm0gPSB7fTtcclxuICAgIHZhciBmaWxlRCA9IHt9O1xyXG4gICAgdmFyIGZpbGVOID0ge307XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiBwYXJzZWREYXRhTWFwKSB7XHJcbiAgICAgIGlmICghcGFyc2VkW2ldKSB7XHJcbiAgICAgICAgcGFyc2VkW2ldID0ge307XHJcbiAgICAgIH1cclxuICAgICAgZm9yIChsZXQgaiBpbiBwYXJzZWREYXRhTWFwW2ldKSB7XHJcbiAgICAgICAgcGFyc2VkW2ldW2pdID0gcGFyc2VkRGF0YU1hcFtpXVtqXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRGF0YU1hcEJ5RXhwKSB7XHJcbiAgICAgIHZpc2libGVbaV0gPSB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ldO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcclxuICAgICAgdmlzaWJsZWZbaV0gPSB2aXNpYmxlRmlsZXNbaV07XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIGdyb3VwZWREYXRhTWFwKSB7XHJcbiAgICAgIGlmICghZ3JvdXBlZFtpXSkge1xyXG4gICAgICAgIGdyb3VwZWRbaV0gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBqIGluIGdyb3VwZWREYXRhTWFwW2ldKSB7XHJcbiAgICAgICAgZ3JvdXBlZFtpXS5wdXNoKGdyb3VwZWREYXRhTWFwW2ldW2pdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgaW4gY29sb3JNYXApIHtcclxuICAgICAgY29sb3JtW2ldID0gY29sb3JNYXBbaV07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcclxuICAgICAgZmlsZURbaV0gPSBmaWxlRGVzY3JpcHRpb25baV07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiB2aXNpYmxlRmlsZXMpIHtcclxuICAgICAgZmlsZU5baV0gPSBmaWxlVGl0bGVbaV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGludHJlZ2V4ID0gXCJeKC0/KSgwfChbMS05XVswLTldKikpKFxcXFwuWzAtOV0rKT8kXCI7XHJcbiAgICB2YXIgdmVyc2lvbiA9ICcxLjAnO1xyXG4gICAgdmFyIGNsciA9IGZhbHNlO1xyXG4gICAgLy8gQnkgbGluZXNcclxuICAgIGNvbnN0IGxpbmVzID0gZGF0YS5zcGxpdCgnXFxuJyk7XHJcbiAgICBpZiAobGluZXMubGVuZ3RoIDwgMikge1xyXG4gICAgICBlcnJvckNhbGxiYWNrKCk7XHJcbiAgICAgIHJldHVybiBcIkVycm9yXCI7XHJcbiAgICB9XHJcbiAgICB2YXIgayA9IDA7XHJcbiAgICB2YXIgdXB0byA9IDQ7XHJcbiAgICBpZiAobGluZXMubGVuZ3RoIDwgNCkge1xyXG4gICAgICB1cHRvID0gbGluZXMubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cHRvOyBpKyspIHtcclxuICAgICAgaWYgKGxpbmVzW2ldLnN1YnN0cmluZygwLCA3KSA9PSAndmVyc2lvbicpIHtcclxuICAgICAgICBrKys7XHJcbiAgICAgICAgY29uc3QgbWV0YUxpbmVzID0gbGluZXNbaV0uc3BsaXQoJ1xcdCcpO1xyXG4gICAgICAgIGlmIChtZXRhTGluZXNbMV0gJiYgbWV0YUxpbmVzWzFdLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHZlcnNpb24gPSBtZXRhTGluZXNbMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZpbGVEZXNjcmlwdGlvbiA9IGZpbGVEO1xyXG4gICAgICAgICAgZmlsZVRpdGxlID0gZmlsZU47XHJcbiAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcclxuICAgICAgICAgIGNvbG9yTWFwID0gY29sb3JtO1xyXG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxpbmVzW2ldLnN1YnN0cmluZygwLCA0KSA9PSAnbmFtZScpIHtcclxuICAgICAgICBrKys7XHJcbiAgICAgICAgY29uc3QgbWV0YUxpbmVzID0gbGluZXNbaV0uc3BsaXQoJ1xcdCcpO1xyXG4gICAgICAgIGlmIChtZXRhTGluZXNbMV0gJiYgbWV0YUxpbmVzWzFdLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIGZpbGVUaXRsZVtmaWxlTmFtZV0gPSBtZXRhTGluZXNbMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZpbGVUaXRsZSA9IGZpbGVOO1xyXG4gICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XHJcbiAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcclxuICAgICAgICAgIGNvbG9yTWFwID0gY29sb3JtO1xyXG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxpbmVzW2ldLnN1YnN0cmluZygwLCAxMSkgPT0gJ2Rlc2NyaXB0aW9uJykge1xyXG4gICAgICAgIGsrKztcclxuICAgICAgICBjb25zdCBtZXRhTGluZXMgPSBsaW5lc1tpXS5zcGxpdCgnXFx0Jyk7XHJcbiAgICAgICAgaWYgKG1ldGFMaW5lc1sxXSAmJiBtZXRhTGluZXNbMV0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgZmlsZURlc2NyaXB0aW9uW2ZpbGVOYW1lXSA9IG1ldGFMaW5lc1sxXTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZpbGVUaXRsZSA9IGZpbGVOO1xyXG4gICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XHJcbiAgICAgICAgICB2ZXJzaW9uID0gXCIxLjBcIjtcclxuICAgICAgICAgIGNvbG9yTWFwID0gY29sb3JtO1xyXG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxpbmVzW2ldLnN1YnN0cmluZygwLCA1KSA9PSAnY29sb3InKSB7XHJcbiAgICAgICAgY2xyID0gdHJ1ZTtcclxuICAgICAgICBrKys7XHJcbiAgICAgICAgY29uc3QgbWV0YUxpbmVzID0gbGluZXNbaV0uc3BsaXQoJ1xcdCcpO1xyXG4gICAgICAgIGlmIChtZXRhTGluZXMubGVuZ3RoIDw9IDEgJiYgbWV0YUxpbmVzLmxlbmd0aCAlIDIgPT0gMCkge1xyXG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHQgPSAxOyB0IDwgbWV0YUxpbmVzLmxlbmd0aCAtIDE7IHQgPSB0ICsgMikge1xyXG4gICAgICAgICAgdmFyIGhleCA9IG1ldGFMaW5lc1t0ICsgMV07XHJcbiAgICAgICAgICBpZiAodCA9PSBtZXRhTGluZXMubGVuZ3RoIC0gMikge1xyXG4gICAgICAgICAgICBoZXggPSBoZXgudHJpbSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG1ldGFMaW5lc1t0XSA9PSBcIm1pblwiIHx8IG1ldGFMaW5lc1t0XSA9PSBcIm1heFwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSGV4KGhleCkpIHtcclxuICAgICAgICAgICAgICBjb2xvcnNbKG1ldGFMaW5lc1t0XSldID0gdGhpcy5oZXhUb1JnYihoZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KG1ldGFMaW5lc1t0XSkgIT0gTmFOKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSGV4KGhleCkpIHtcclxuICAgICAgICAgICAgICBjb2xvcnNbcGFyc2VJbnQobWV0YUxpbmVzW3RdKV0gPSB0aGlzLmhleFRvUmdiKGhleCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZmlsZVRpdGxlID0gZmlsZU47XHJcbiAgICAgICAgICAgICAgZmlsZURlc2NyaXB0aW9uID0gZmlsZUQ7XHJcbiAgICAgICAgICAgICAgY29sb3JNYXAgPSBjb2xvcm07XHJcbiAgICAgICAgICAgICAgdmVyc2lvbiA9IFwiMS4wXCI7XHJcbiAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpbGVUaXRsZSA9IGZpbGVOO1xyXG4gICAgICAgICAgICBmaWxlRGVzY3JpcHRpb24gPSBmaWxlRDtcclxuICAgICAgICAgICAgY29sb3JNYXAgPSBjb2xvcm07XHJcbiAgICAgICAgICAgIHZlcnNpb24gPSBcIjEuMFwiO1xyXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9kZWZhdWx0IGNvbG9yc1xyXG4gICAgaWYgKCFjbHIpIHtcclxuICAgICAgY29sb3JzWy0xMDBdID0gdGhpcy5oZXhUb1JnYignIzAwMDBmZicpO1xyXG4gICAgICBjb2xvcnNbMTAwXSA9IHRoaXMuaGV4VG9SZ2IoJyNmZjAwMDAnKTtcclxuICAgICAgY29sb3JzWzBdID0gdGhpcy5oZXhUb1JnYignI2ZmZmZmZicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpcnN0IGxpbmUgaXMgbWV0YSBkYXRhICFcclxuICAgIGNvbnN0IG1ldGFMaW5lQ29sdW1ucyA9IGxpbmVzW2tdLnNwbGl0KCdcXHQnKTtcclxuXHJcbiAgICAvLyBQYXJzZSBleHBlcmltZW50IHR5cGVzXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1ldGFMaW5lQ29sdW1ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaSA9PSBtZXRhTGluZUNvbHVtbnMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIHZhciB0cmltbWVkID0gbWV0YUxpbmVDb2x1bW5zW2ldLnRyaW0oKTtcclxuICAgICAgICBleHBlcmltZW50cy5wdXNoKHRyaW1tZWQpO1xyXG4gICAgICB9IGVsc2VcclxuICAgICAgICBleHBlcmltZW50cy5wdXNoKG1ldGFMaW5lQ29sdW1uc1tpXSk7XHJcblxyXG4gICAgICB2aXNpYmxlRGF0YU1hcEJ5RXhwW2ZpbGVOYW1lICsgJz8nICsgZXhwZXJpbWVudHNbaSAtIDFdXSA9IHRydWU7XHJcblxyXG4gICAgICBpZiAoZ3JvdXBlZERhdGFNYXBbZmlsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBncm91cGVkRGF0YU1hcFtmaWxlTmFtZV0ucHVzaChleHBlcmltZW50c1tpIC0gMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZpc2libGVGaWxlc1tmaWxlTmFtZV0gPSB0cnVlO1xyXG5cclxuICAgIHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgdmFyIG1heCA9IE51bWJlci5NSU5fVkFMVUU7XHJcblxyXG4gICAgLy8gcGFyc2UgZ2Vub21pYyBkYXRhXHJcbiAgICBmb3IgKGxldCBpID0gayArIDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAvLyBFT0YgY2hlY2tcclxuICAgICAgaWYgKGxpbmVzW2ldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgICAgLy8gU3BsaXQgZWFjaCBsaW5lIGJ5IHRhYiBhbmQgcGFyc2UgZ2Vub21pYyBkYXRhIGNvbnRlbnRcclxuICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBsaW5lc1tpXS5zcGxpdCgnXFx0Jyk7XHJcbiAgICAgIGNvbnN0IGVsZVN5bWJvbCA9IGxpbmVDb250ZW50WzBdO1xyXG5cclxuICAgICAgLy8gSWYgY3VycmVudCBnZW5lIGVudHJ5IGlzIG5vdCAgaW4gZ2Vub21pYyBkYXRhIG1hcCBjcmVhdGUgbmV3IG1hcFxyXG4gICAgICBpZiAoIShlbGVTeW1ib2wgaW4gcGFyc2VkRGF0YU1hcCkpIHtcclxuICAgICAgICBwYXJzZWREYXRhTWFwW2VsZVN5bWJvbF0gPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWRkIGVhY2ggZW50cnkgb2YgZ2Vub21pYyBkYXRhXHJcbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgbGluZUNvbnRlbnQubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBpZiAoaiA9PSBsaW5lQ29udGVudC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBsaW5lQ29udGVudFtqXSA9IGxpbmVDb250ZW50W2pdLnRyaW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbmVDb250ZW50W2pdLm1hdGNoKGludHJlZ2V4KSkge1xyXG4gICAgICAgICAgcGFyc2VkRGF0YU1hcFtlbGVTeW1ib2xdW2ZpbGVOYW1lICsgJz8nICsgZXhwZXJpbWVudHNbaiAtIDFdXSA9IGxpbmVDb250ZW50W2pdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwYXJzZWREYXRhTWFwID0gcGFyc2VkO1xyXG4gICAgICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cCA9IHZpc2libGU7XHJcbiAgICAgICAgICBncm91cGVkRGF0YU1hcCA9IGdyb3VwZWQ7XHJcbiAgICAgICAgICBjb2xvck1hcCA9IGNvbG9ybTtcclxuICAgICAgICAgIHZpc2libGVGaWxlcyA9IHZpc2libGVmO1xyXG4gICAgICAgICAgZmlsZVRpdGxlID0gZmlsZU47XHJcbiAgICAgICAgICBmaWxlRGVzY3JpcHRpb24gPSBmaWxlRDtcclxuICAgICAgICAgIHZlcnNpb24gPSBcIjEuMFwiO1xyXG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xyXG4gICAgICAgICAgcmV0dXJuIFwiRXJyb3JcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbmVDb250ZW50W2pdID4gbWF4KSB7XHJcbiAgICAgICAgICBtYXggPSBsaW5lQ29udGVudFtqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbmVDb250ZW50W2pdIDwgbWluKSB7XHJcbiAgICAgICAgICBtaW4gPSBsaW5lQ29udGVudFtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29sb3JzWydtaW4nXSkge1xyXG4gICAgICB2YXIgY29sb3J2YWx1ZSA9IGNvbG9yc1snbWluJ107XHJcbiAgICAgIGRlbGV0ZSBjb2xvcnNbJ21pbiddO1xyXG4gICAgICBjb2xvcnNbbWluXSA9IGNvbG9ydmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbG9yc1snbWF4J10pIHtcclxuICAgICAgdmFyIGNvbG9ydmFsdWUgPSBjb2xvcnNbJ21heCddO1xyXG4gICAgICBkZWxldGUgY29sb3JzWydtYXgnXTtcclxuICAgICAgY29sb3JzW21heF0gPSBjb2xvcnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbG9yTWFwW2ZpbGVOYW1lXSA9IGNvbG9ycztcclxuICAgIHZhciBwYXJhbXMgPSB7ZmlsZU5hbWV9O1xyXG4gICAgdGhpcy5zaG93RGF0YSgpO1xyXG4gICAgcmV0dXJuIHBhcmFtcztcclxuICB9O1xyXG5cclxuICBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5nZXRFeHBlcmltZW50YWxEYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmlzaWJsZURhdGFNYXBCeUV4cDogdmlzaWJsZURhdGFNYXBCeUV4cCxcclxuICAgICAgdmlzaWJsZUZpbGVzOiB2aXNpYmxlRmlsZXMsXHJcbiAgICAgIGZpbGVEZXNjcmlwdGlvbjogZmlsZURlc2NyaXB0aW9uLFxyXG4gICAgICBhbGxWaXM6IGFsbFZpcyxcclxuICAgICAgZmlsZVRpdGxlOiBmaWxlVGl0bGUsXHJcbiAgICAgIHBhcnNlZERhdGFNYXA6cGFyc2VkRGF0YU1hcFxyXG4gICAgfTtcclxuICB9O1xyXG4gIHJldHVybiBleHBlcmltZW50YWxEYXRhT3ZlcmxheTtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFDQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUMzQixJQUFJQyxFQUFFO0VBQ04sSUFBSUMsYUFBYTtFQUNqQixJQUFJQyxtQkFBbUI7RUFDdkIsSUFBSUMsY0FBYztFQUNsQixJQUFJQyxZQUFZO0VBQ2hCLElBQUlDLFFBQVE7RUFDWixJQUFJQyxNQUFNO0VBQ1YsSUFBSUMsZUFBZTtFQUNuQixJQUFJQyxTQUFTO0VBQ2IsU0FBU0MsdUJBQXVCQSxDQUFDQyxLQUFLLEVBQUU7SUFDdEM7SUFDQVYsRUFBRSxHQUFHVSxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDakNYLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDbEJDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUN4QkUsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNqQkQsY0FBYyxHQUFHLENBQUMsQ0FBQztJ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\n//# sourceURL=webpack-internal:///./src/utilities/experimental-data-overlay.js\n");

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n/*\r\n* File Utilities: To be used on read/write file operation\r\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar saveAs = libs.saveAs;\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  // Helper functions Start\n  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n  function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n  function loadTextDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/text');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseText;\n  }\n  function loadXMLDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/xml');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseXML;\n  }\n\n  // Should this be exposed or should this be moved to the helper functions section?\n  function textToXmlObject(text) {\n    if (window.ActiveXObject) {\n      var doc = new ActiveXObject('Microsoft.XMLDOM');\n      doc.async = 'false';\n      doc.loadXML(text);\n    } else {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(text, 'text/xml');\n    }\n    return doc;\n  }\n  // Helper functions End\n\n  var sbgnmlToJson, jsonToSbgnml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml, gpmlToSbgnml, sbgnmlToGpml;\n  var updateGraph;\n  var options, cy;\n  function fileUtilities(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    jsonToSif = param.jsonToSifConverter;\n    uiUtilities = param.uiUtilities;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    layoutToText = param.layoutToText;\n    graphUtilities = param.graphUtilities;\n    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n    sbgnmlToCd = param.sbgnmlToCdConverter;\n    cdToSbgnml = param.cdToSbgnmlConverter;\n    sbgnmlToSbml = param.sbgnmlToSbmlConverter;\n    sbmlToSbgnml = param.sbmlToSbgnmlConverter;\n    gpmlToSbgnml = param.gpmlToSbgnmlConverter;\n    sbgnmlToGpml = param.sbgnmlToGpmlConverter;\n  }\n  fileUtilities.loadXMLDoc = loadXMLDoc;\n  fileUtilities.textToXmlObject = textToXmlObject;\n  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var pngContent = cy.png({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var pngContent = cy.png({\n        scale: scale || 3,\n        full: true,\n        bg: bg\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      pngContent = cy.png({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/png\"), filename || \"network.png\");\n  };\n  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {\n    if (maxWidth || maxHeight) {\n      var jpgContent = cy.jpg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        quality: quality\n      });\n    } else {\n      var jpgContent = cy.jpg({\n        scale: scale || 3,\n        full: true,\n        bg: bg,\n        quality: quality\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      jpgContent = cy.jpg({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/jpg\"), filename || \"network.jpg\");\n  };\n  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var svgContent = cy.svg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var svgContent = cy.svg({\n        scale: scale || 1,\n        full: true,\n        bg: bg\n      });\n    }\n    saveAs(new Blob([svgContent], {\n      type: \"image/svg+xml;charset=utf-8\"\n    }), filename || \"network.svg\");\n  };\n  fileUtilities.loadSample = function (filename, folderpath, callback) {\n    var file = (folderpath || 'sample-app/samples/') + filename;\n    uiUtilities.startSpinner(\"load-spinner\");\n    // Users may want to do customized things while a sample is being loaded\n    // Trigger an event for this purpose and specify the 'filename' as an event parameter\n    $(document).trigger(\"sbgnvizLoadSample\", [filename, cy]); // Aliases for sbgnvizLoadSampleStart\n    $(document).trigger(\"sbgnvizLoadSampleStart\", [filename, cy]);\n    var text = loadTextDoc(file);\n    var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n      });\n      text = text.replace(renderInfoStringCopy, renderInfoString);\n    }\n    var xmlObject = textToXmlObject(text);\n    setTimeout(function () {\n      updateGraph(nwtToJson.convert(xmlObject));\n      fileUtilities.collapseMarkedNodes();\n      uiUtilities.endSpinner(\"load-spinner\");\n      $(document).trigger(\"sbgnvizLoadSampleEnd\", [filename, cy]); // Trigger an event signaling that a sample is loaded\n      if (typeof callback !== 'undefined') {\n        callback();\n      }\n    }, 0);\n  };\n  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {\n    var convert = function convert(text) {\n      return sifToJson.convert(text);\n    };\n    var runLayout = function runLayout() {\n      if (layoutBy) {\n        if (typeof layoutBy === 'function') {\n          layoutBy();\n        } else {\n          var layout = cy.layout(layoutBy);\n\n          // for backward compatibility need to make this if check\n          if (layout && layout.run) {\n            layout.run();\n          }\n        }\n      }\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);\n  };\n  fileUtilities.loadTDFile = function functionName(file, callback) {\n    var convert = function convert(text) {\n      return tdToJson.convert(text);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback);\n  };\n  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {\n    var convert = function convert(text) {\n      return sbgnmlToJson.convert(textToXmlObject(text));\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  // collapse the nodes whose collapse data field is set\n  fileUtilities.collapseMarkedNodes = function () {\n    // collapse nodes\n    var nodesToCollapse = cy.nodes(\"[collapse]\");\n    if (nodesToCollapse.length > 0) {\n      cy.expandCollapse('get').collapse(nodesToCollapse, {\n        layoutBy: null\n      });\n      nodesToCollapse.forEach(function (ele, i, eles) {\n        ele.position(ele.data(\"positionBeforeSaving\"));\n      });\n      nodesToCollapse.removeData(\"positionBeforeSaving\");\n    }\n  };\n\n  /*\r\n    callback is a function remotely defined to add specific behavior that isn't implemented here.\r\n    it is completely optional.\r\n    signature: callback(textXml)\r\n  */\n  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4) {\n    var self = this;\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var textType = /text.*/;\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var text = this.result;\n      var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n      if (matchResult != null) {\n        var imagesElementMatch = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        var imagesElement;\n        if (imagesElementMatch != null) {\n          imagesElement = imagesElementMatch[0];\n        }\n        var renderInfoString = matchResult[0];\n        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n        var regex = /\\s([\\S]+)([\\s]*)=/g;\n        var result;\n        var matches = [];\n        while (result = regex.exec(renderInfoString)) {\n          matches.push(result[0]);\n        }\n        ;\n        matches.forEach(function (match) {\n          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n        });\n        text = text.replace(renderInfoStringCopy, renderInfoString);\n        var imagesElementMatchDirty = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        if (imagesElementMatchDirty != null) {\n          text = text.replace(imagesElementMatchDirty[0], imagesElement);\n        }\n      }\n      setTimeout(function () {\n        if (typeof callback1 !== 'undefined') callback1(text);\n        var cyGraph;\n        try {\n          cyGraph = convertFcn(text);\n          // Users may want to do customized things while an external file is being loaded\n          // Trigger an event for this purpose and specify the 'filename' as an event parameter\n          $(document).trigger(\"sbgnvizLoadFile\", [file.name, cy]); // Aliases for sbgnvizLoadFileStart\n          $(document).trigger(\"sbgnvizLoadFileStart\", [file.name, cy]);\n        } catch (err) {\n          uiUtilities.endSpinner(\"load-file-spinner\");\n          console.log(err);\n          if (typeof callback2 !== 'undefined') callback2();\n          return;\n        }\n        updateGraph(cyGraph);\n        if (typeof callback3 !== 'undefined') {\n          callback3();\n        }\n        uiUtilities.endSpinner(\"load-file-spinner\");\n        $(document).trigger(\"sbgnvizLoadFileEnd\", [file.name, cy]); // Trigger an event signaling that a file is loaded\n\n        if (typeof callback4 !== 'undefined') {\n          callback4();\n        }\n      }, 0);\n    };\n    reader.readAsText(file);\n  };\n  fileUtilities.loadSBGNMLText = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n          case 2:\n            _context.next = 4;\n            return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n          case 4:\n            uiUtilities.endSpinner(\"load-file-spinner\");\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = jsonToSbgnml.createSbgnml();\n    this.convertSbgnmlToCD(sbgnml, function (data) {\n      if (data == null) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      this.convertCDToSbgnml(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsSbml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToSbml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadSbml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      this.convertSbmlToSbgnml(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsGpml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToGpml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadGpml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      this.convertGpmlToSbgnml(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.convertSbgn = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, \"plain\", renderInfo, mapProperties, nodes, edges, hidden);\n    return sbgnmlText;\n  };\n  fileUtilities.exportLayoutData = function (filename, byName) {\n    var layoutText = layoutToText.convert(byName);\n    var blob = new Blob([layoutText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsPlainSif = function (filename) {\n    var text = jsonToSif.convert();\n    var blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.convertSifTextToJson = function (sifText) {\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.createJsonFromSBGN = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml();\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.createJsonFromSif = function () {\n    var sifText = jsonToSif.convert();\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {\n    return sbgnmlToCd.convert(sbgnml, callback);\n  };\n  fileUtilities.convertCDToSbgnml = function (xml, callback) {\n    return cdToSbgnml.convert(xml, callback);\n  };\n  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {\n    return sbgnmlToSbml.convert(sbgnml, callback);\n  };\n  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {\n    return sbmlToSbgnml.convert(sbml, callback);\n  };\n  fileUtilities.convertGpmlToSbgnml = function (gpml, callback) {\n    return gpmlToSbgnml.convert(gpml, callback);\n  };\n  fileUtilities.convertSbgnmlToGpml = function (sbgnml, callback) {\n    return sbgnmlToGpml.convert(sbgnml, callback);\n  };\n  return fileUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/file-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/gpml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/gpml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function gpmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  gpmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/GPML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return gpmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2dwbWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImdwbWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvZ3BtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/YmEwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgZnVuY3Rpb24gZ3BtbFRvU2Jnbm1sKHBhcmFtKSB7XHJcbiAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICB9XHJcblxyXG5cclxuICBncG1sVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBjb252ZXJzaW9uQXBpVXJsID0gXCJodHRwczovL21pbmVydmEtc2VydmljZS5sY3NiLnVuaS5sdS9taW5lcnZhL2FwaS9jb252ZXJ0L0dQTUw6U0JHTi1NTFwiO1xyXG5cclxuICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICB1cmw6IGNvbnZlcnNpb25BcGlVcmwsXHJcbiAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94bWxcIixcclxuICAgICAgICAgIGRhdGE6IHhtbCxcclxuICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcclxuICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IHRydWUsIG1lc3NhZ2U6IGRhdGEsIGVycm9yOiBcIlwifSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgfSlcclxuICAgICAgXHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ3BtbFRvU2Jnbm1sO1xyXG5cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRTFCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQzNCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFlBQVksQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBQzVDLElBQUlDLGdCQUFnQixHQUFHLHNFQUFzRTtJQUU3RixPQUFPQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNWQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUVKLGdCQUFnQjtNQUNyQkssV0FBVyxFQUFFLGlCQUFpQjtNQUM5QkMsSUFBSSxFQUFFUixHQUFHO01BQ1RTLFFBQVEsRUFBRSxNQUFNO01BQ2hCQyxPQUFPLEVBQUUsU0FBQUEsUUFBVUYsSUFBSSxFQUFFRyxVQUFVLEVBQUVDLEdBQUcsRUFBRTtRQUN0QyxJQUFJQSxHQUFHLENBQUNDLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDcEJaLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsS0FBSztZQUFFQyxLQUFLLEVBQUVQLElBQUk7WUFBRVEsT0FBTyxFQUFFLHlCQUF5QixHQUFHSixHQUFHLENBQUNDO1VBQU0sQ0FBQyxDQUFDO1FBQzNGLENBQUMsTUFBTTtVQUNIWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLElBQUk7WUFBRUUsT0FBTyxFQUFFUixJQUFJO1lBQUVPLEtBQUssRUFBRTtVQUFFLENBQUMsQ0FBQztRQUN0RDtNQUNKLENBQUM7TUFDREEsS0FBSyxFQUFFLFNBQUFBLE1BQVVBLE1BQUssRUFBRTtRQUNwQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsTUFBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQsQ0FBQztNQUNEQyxJQUFJLEVBQUUsU0FBQUEsS0FBVUYsS0FBSyxFQUFFO1FBQ25CZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxLQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RDtJQUNKLENBQUMsQ0FBQztFQUVOLENBQUM7RUFFRCxPQUFPdEIsWUFBWTtBQUVyQixDQUFDIn0=\n//# sourceURL=webpack-internal:///./src/utilities/gpml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Common utilities for sbgnviz graphs\r\n */\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options, cy;\n  function graphUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    elementUtilities = param.elementUtilities;\n    options = optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  // TODO make these initial values user options instead of hardcoding them here\n  graphUtilities.portsEnabled = true;\n  graphUtilities.compoundSizesConsidered = true;\n  graphUtilities.disablePorts = function () {\n    graphUtilities.portsEnabled = false;\n    cy.style().update();\n  };\n  graphUtilities.enablePorts = function () {\n    graphUtilities.portsEnabled = true;\n    cy.style().update();\n  };\n  graphUtilities.arePortsEnabled = function () {\n    return graphUtilities.portsEnabled;\n  };\n  graphUtilities.considerCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = true;\n    cy.style().update();\n  };\n  graphUtilities.omitCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = false;\n    cy.style().update();\n  };\n  graphUtilities.areCompoundSizesConsidered = function () {\n    return graphUtilities.compoundSizesConsidered == true;\n  };\n  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {\n    var isLayoutRequired;\n    if (layoutOptions === undefined) {\n      isLayoutRequired = false;\n    } else {\n      isLayoutRequired = true;\n    }\n    $(document).trigger(\"updateGraphStart\", cy);\n    // Reset undo/redo stack and buttons when a new graph is loaded\n    if (options.undoable) {\n      cy.undoRedo().reset();\n      //    this.resetUndoRedoButtons();\n    }\n    cy.startBatch();\n    // clear data\n    cy.remove('*');\n    cy.add(cyGraph);\n\n    //add position information to data for preset layout\n    var positionMap = {};\n    cy.nodes().not(':parent').forEach(function (node) {\n      var xPos = node.data('bbox').x;\n      var yPos = node.data('bbox').y;\n      positionMap[node.data('id')] = {\n        'x': xPos,\n        'y': yPos\n      };\n    });\n    cy.nodes().forEach(function (node) {\n      // assign correct parents to info boxes\n      var statesandinfos = node.data('statesandinfos');\n      for (var j = 0; j < statesandinfos.length; j++) {\n        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);\n      }\n    });\n\n    // change parent of PNClass nodes based on neighbor majority if inferNestingOnLoad is enabled and node has no parent\n    if (options.inferNestingOnLoad) {\n      cy.nodes().forEach(function (node) {\n        if (elementUtilities.isPNClass(node) && node.parent().length == 0) {\n          var processParentMap = new Map();\n          node.neighborhood().nodes().forEach(function (neighbor) {\n            if (processParentMap.has(neighbor.parent().id())) processParentMap.set(neighbor.parent().id(), processParentMap.get(neighbor.parent().id()) + 1);else processParentMap.set(neighbor.parent().id(), 1);\n          });\n          // find the max occurrence\n          var max_count = 0,\n            result = null;\n          processParentMap.forEach(function (value, key) {\n            if (max_count < value || max_count == value && result == undefined) {\n              result = key;\n              max_count = value;\n            }\n          });\n          node.move({\n            parent: result\n          });\n        }\n      });\n    }\n\n    //this.refreshPaddings(); // Recalculates/refreshes the compound paddings\n    cy.endBatch();\n    if (isLayoutRequired) {\n      var preferences = {};\n      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {\n        preferences.quality = \"draft\";\n      }\n      preferences.animate = false;\n      preferences.randomize = true;\n      preferences = $.extend({}, layoutOptions, preferences);\n      var layout = cy.layout(preferences);\n    } else {\n      var layout = cy.layout({\n        name: 'preset',\n        positions: positionMap,\n        fit: true,\n        padding: 20\n      });\n    }\n\n    // Check this for cytoscape.js backward compatibility\n    if (layout && layout.run) {\n      layout.run();\n    }\n    var performLayout = function performLayout() {\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    // Update the style\n    cy.style().update();\n    // Initilize the anchor points once the elements are created\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      cy.edgeEditing('get').initAnchorPoints(cy.edges());\n    }\n    $(document).trigger(\"updateGraphEnd\", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);\n    if (callback) callback();\n  };\n  graphUtilities.calculatePaddings = function (paddingPercent) {\n    //As default use the compound padding value\n    if (!paddingPercent) {\n      var compoundPadding = options.compoundPadding;\n      paddingPercent = typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;\n    }\n    var nodes = cy.nodes();\n    var total = 0;\n    var numOfSimples = 0;\n    for (var i = 0; i < nodes.length; i++) {\n      var theNode = nodes[i];\n      if (theNode.children() == null || theNode.children().length == 0) {\n        total += Number(theNode.width());\n        total += Number(theNode.height());\n        numOfSimples++;\n      }\n    }\n    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));\n    if (calc_padding < 5) {\n      calc_padding = 5;\n    }\n    return calc_padding;\n  };\n  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {\n    // this.calculatedPaddings is not working here\n    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out\n    //graphUtilities.calculatedPaddings = this.calculatePaddings();\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;\n    //return graphUtilities.calculatedPaddings;\n  };\n  graphUtilities.getCompoundPaddings = function () {\n    // Return calculated paddings in case of that data is invalid return 5\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;\n\n    //return graphUtilities.calculatedPaddings || 5;\n  };\n  return graphUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/graph-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function jsonToNwt(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function setToStr(set) {\n    if (set) {\n      return Object.keys(set).join(';');\n    }\n    return null;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDs': function pcIDs(edge) {\n      return setToStr(edge.data('pcIDSet'));\n    },\n    'siteLocations': function siteLocations(edge) {\n      return setToStr(edge.data('siteLocSet'));\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(node) {\n      return node.data('tooltip');\n    },\n    'infoboxes': function infoboxes(node, obj) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(infobox) {\n          return infobox.tooltip;\n        }\n      };\n      var infoboxes = node.data('statesandinfos');\n      var glyphs = obj.glyph;\n      infoboxes.forEach(function (infobox, i) {\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infobox);\n          if (val) {\n            glyphs[i][propName] = val;\n          }\n        });\n      });\n    }\n  };\n\n  // objects consist of arcs or gylphs\n  function extendObjectsData(objs, filterFcn, propHandlerMap) {\n    if (!objs) {\n      return;\n    }\n    objs.forEach(function (obj) {\n      if (filterFcn(obj.$[\"class\"])) {\n        var ele = cy.getElementById(obj.$.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](ele, obj);\n          if (val) {\n            obj[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function extendStylesData(toExtend, extendFrom) {\n    if (!toExtend || !extendFrom) {\n      return;\n    }\n    var styleNames = ['shapeName'];\n    var styleMap = {};\n    Object.keys(extendFrom).forEach(function (key) {\n      styleNames.forEach(function (name) {\n        var el = extendFrom[key];\n        var props = el && el.properties;\n        if (props && props[name]) {\n          var val = props[name];\n          var idList = el.idList;\n          idList.forEach(function (id) {\n            styleMap[id] = styleMap[id] || {};\n            styleMap[id][name] = val;\n          });\n        }\n      });\n    });\n    toExtend.forEach(function (style) {\n      var idList = style.$.idList.split(' ');\n      styleNames.forEach(function (name) {\n        var val = null;\n        idList.forEach(function (id) {\n          var currVal = styleMap[id] && styleMap[id][name];\n          if (currVal === undefined) {\n            return;\n          }\n          if (val == null) {\n            val = currVal;\n          } else if (val !== currVal) {\n            console.warn('Shape name of some glyphs defined multiple times in render information!');\n          }\n        });\n        if (val !== null) {\n          style.g.$[name] = val;\n        }\n      });\n    });\n  }\n  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      var map = jsObj.map[0];\n      var arcs = map.arc;\n      var glyphs = map.glyph;\n      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);\n      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);\n      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;\n      var appStyles = renderInfo && renderInfo.styles;\n      extendStylesData(jsObjStyles, appStyles);\n    }\n    return jsObj;\n  };\n  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n  return jsonToNwt;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-nwt-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar renderExtension = libsbgnjs.render;\nvar annot = libsbgnjs.annot;\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"extraInfo\"\n});\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n\n  /*\r\n      takes renderInfo as an optional argument. It contains all the information needed to save\r\n      the style and colors to the render extension. See newt/app-utilities getAllStyles()\r\n      Structure: {\r\n          background: the map background color,\r\n          colors: {\r\n            validXmlValue: color_id\r\n            ...\r\n          },\r\n          styles: {\r\n              styleKey1: {\r\n                  idList: list of the nodes ids that have this style\r\n                  properties: {\r\n                      fontSize: ...\r\n                      fill: ...\r\n                      ...\r\n                  }\r\n              }\r\n              styleKey2: ...\r\n              ...\r\n          }\r\n      }\r\n  */\n  function jsonToSbgnml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  /*\r\n   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.\r\n   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.\r\n   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.\r\n   TODO implement 0.3 changes when submap support is fully there.\r\n   */\n  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var _this = this;\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return function (edges) {\n      var self = _this;\n      var mapID = textUtilities.getXMLValidId(filename);\n      var hasExtension = false;\n      var hasRenderExtension = false;\n      var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;\n      _this.nodes = nodes || cy.nodes();\n      _this.edges = edges || cy.edges();\n      var id = [];\n      var i = 0;\n      _this.nodes.forEach(function (node) {\n        return function () {\n          id[i] = node._private.data.id;\n          i++;\n        };\n      });\n      var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(_this.nodes);\n      _this.allCollapsedNodes = collapsedChildren.filter(\"node\");\n      _this.allCollapsedEdges = collapsedChildren.filter(\"edge\");\n      if (typeof renderInfo !== 'undefined') {\n        hasExtension = true;\n        hasRenderExtension = true;\n      }\n      if (typeof version === 'undefined') {\n        // default if not specified\n        version = \"0.3\";\n      }\n\n      // check version validity\n      if (version !== \"0.2\" && version !== \"0.3\" && version !== \"plain\" && version !== \"plain3\") {\n        console.error(\"Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: \" + version);\n        return \"Error\";\n      }\n      var mapLanguage = elementUtilities.mapTypeToLanguage(mapType);\n\n      //add headers\n      xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n      var versionNo;\n      if (version === \"plain\") {\n        versionNo = \"0.2\";\n      } else if (version === \"plain3\") {\n        versionNo = \"0.3\";\n      } else {\n        versionNo = version;\n      }\n      //var versionNo = (version === \"plain\") ? \"0.2\" : version;\n      var sbgn = new libsbgnjs.Sbgn({\n        xmlns: 'http://sbgn.org/libsbgn/' + versionNo\n      });\n      var map;\n      if (version === \"0.3\" || version === \"plain3\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage,\n          id: mapID\n        });\n      } else if (version === \"0.2\" || version === \"plain\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage\n        });\n      }\n      if (hasExtension) {\n        // extension is there\n        var extension = new libsbgnjs.Extension();\n        if (hasRenderExtension) {\n          extension.add(self.getRenderExtensionSbgnml(renderInfo));\n        }\n        map.setExtension(extension);\n        if (mapProperties) {\n          delete mapProperties.experimentDescription;\n          var xml = mapPropertiesBuilder.buildObject(mapProperties);\n          map.extension.add(xml);\n        }\n      } else if (mapProperties) {\n        map.setExtension(new libsbgnjs.Extension());\n        map.extension.add(mapPropertiesBuilder.buildObject(mapProperties));\n      }\n\n      // get all glyphs\n      var glyphList = [];\n      // be careful that :visible is also used during recursive search of nodes\n      // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.\n      var self = _this;\n      _this.nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        if (jsonToSbgnml.childOfNone(ele, self.nodes)) {\n          var vis = true;\n          if (hidden) vis = id.includes(ele._private.data.id);\n          glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, vis)); // returns potentially more than 1 glyph\n        }\n      });\n      // add them to the map\n      for (var i = 0; i < glyphList.length; i++) {\n        if (version === \"plain\" && !hidden) glyphList[i].extension = null;\n        if (glyphList[i] != undefined) map.addGlyph(glyphList[i]);\n      }\n      // get all arcs\n      var edges = _this.allCollapsedEdges.union(_this.edges);\n      edges.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var arc = self.getArcSbgnml(ele, version, hidden);\n        if (version === \"plain\" && (!hidden || hidden && ele.visible())) arc.extension = null;\n        map.addArc(arc);\n      });\n      sbgn.addMap(map);\n      return sbgn.buildJsObj();\n    }(edges);\n  };\n  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n\n  // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js\n  jsonToSbgnml.buildString = function (obj) {\n    var xmlString = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    }).buildObject(obj);\n\n    // change naming convention from Camel Case (variableName) to Kebab case (variable-name)\n    var matchResult = xmlString.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var imagesElementMatch = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      var imagesElement;\n      if (imagesElementMatch != null) {\n        imagesElement = imagesElementMatch[0];\n      }\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        if (match != \" idList=\") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));\n      });\n      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);\n      var imagesElementMatchDirty = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      if (imagesElementMatchDirty != null) {\n        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);\n      }\n    }\n\n    /* \tdirty hack needed to solve the newline char encoding problem\r\n    \txml2js doesn't encode \\n as &#xA; we need to do it manually\r\n    */\n    var re = /<label text=\"((.|\\n+)+?)\"/gm;\n    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {\n      return '<label text=\"' + p1.replace(/\\n/g, \"&#xA;\") + '\"';\n    });\n    var xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    /*\r\n      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.\r\n      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.\r\n      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported\r\n      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.\r\n    */\n    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace(\"<sbgn \\n  xmlns=\\\"http://sbgn.org/libsbgn\", \"<sbgn xmlns=\\\"http://sbgn.org/libsbgn\");\n    return xmlHeader + xmlbody;\n  };\n\n  // see createSbgnml for info on the structure of renderInfo\n  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {\n    // initialize the main container\n    var renderInformation = new renderExtension.RenderInformation({\n      id: 'renderInformation',\n      backgroundColor: renderInfo.background,\n      programName: pkgName,\n      programVersion: pkgVersion\n    });\n\n    // populate list of colors\n    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();\n    for (var color in renderInfo.colors) {\n      var colorDefinition = new renderExtension.ColorDefinition({\n        id: renderInfo.colors[color],\n        value: color\n      });\n      listOfColorDefinitions.addColorDefinition(colorDefinition);\n    }\n    renderInformation.setListOfColorDefinitions(listOfColorDefinitions);\n    // populate list of background images\n    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();\n    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {\n      for (var img in renderInfo.images) {\n        var backgroundImage = new renderExtension.BackgroundImage({\n          id: renderInfo.images[img],\n          value: img\n        });\n        listOfBackgroundImages.addBackgroundImage(backgroundImage);\n      }\n    }\n    renderInformation.setListOfBackgroundImages(listOfBackgroundImages);\n    // populates styles\n    var listOfStyles = new renderExtension.ListOfStyles();\n    for (var key in renderInfo.styles) {\n      var style = renderInfo.styles[key];\n      var xmlStyle = new renderExtension.Style({\n        id: textUtilities.getXMLValidId(key),\n        idList: style.idList.join(' ')\n      });\n      var g = new renderExtension.RenderGroup({\n        fontSize: style.properties.fontSize,\n        fontFamily: style.properties.fontFamily,\n        fontWeight: style.properties.fontWeight,\n        fontStyle: style.properties.fontStyle,\n        fontColor: style.properties.fontColor,\n        fill: style.properties.fill,\n        // fill color\n        stroke: style.properties.stroke,\n        // stroke color\n        strokeWidth: style.properties.strokeWidth,\n        backgroundImage: style.properties.backgroundImage,\n        backgroundFit: style.properties.backgroundFit,\n        backgroundPosX: style.properties.backgroundPosX,\n        backgroundPosY: style.properties.backgroundPosY,\n        backgroundWidth: style.properties.backgroundWidth,\n        backgroundHeight: style.properties.backgroundHeight,\n        backgroundImageOpacity: style.properties.backgroundImageOpacity,\n        backgroundOpacity: style.properties.backgroundOpacity\n      });\n      xmlStyle.setRenderGroup(g);\n      listOfStyles.addStyle(xmlStyle);\n    }\n    renderInformation.setListOfStyles(listOfStyles);\n    return renderInformation;\n  };\n  jsonToSbgnml.getAnnotationExtension = function (cyElement) {\n    var annotations = cyElement.data('annotations');\n    var annotExt = new annot.Annotation();\n    var rdfElement = new annot.RdfElement();\n    for (var annotID in annotations) {\n      var currentAnnot = annotations[annotID];\n\n      // check validity of annotation\n      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {\n        continue;\n      }\n\n      // check if uncontrolled vocabulary\n      if (currentAnnot.selectedRelation == \"sio:SIO_000223\") {\n        var obj = {};\n        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;\n        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);\n      } else {\n        var obj = {};\n        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;\n        rdfElement.addResource('#' + cyElement.data('id'), obj);\n      }\n    }\n    annotExt.setRdfElement(rdfElement);\n    return annotExt;\n  };\n  jsonToSbgnml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var self = this;\n    var nodeClass = node._private.data[\"class\"];\n    var glyphList = [];\n    if (!visible && !node.visible()) return;\n    if (nodeClass.startsWith('BA')) {\n      nodeClass = \"biological activity\";\n    }\n\n    // Workaround: In application we use 'empty set' class but SBGN-ML files \n    // use 'source and sink' so we read and write as 'source and sink'\n    if (nodeClass === \"empty set\") {\n      nodeClass = \"source and sink\";\n    }\n    var glyph = new libsbgnjs.Glyph({\n      id: node._private.data.id,\n      class_: nodeClass\n    });\n\n    // assign compartmentRef\n    if (node.parent() && node.parent().length > 0) {\n      if (nodeClass === \"compartment\") {\n        var parent = node.parent();\n        glyph.compartmentRef = node._private.data.parent;\n      } else {\n        var parent = node.parent()[0];\n        if (parent._private.data[\"class\"] == \"compartment\") glyph.compartmentRef = parent._private.data.id;\n      }\n    }\n\n    // misc information\n    var label = node._private.data.label;\n    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({\n      text: label\n    }));\n    //add clone information\n    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType());\n    //add bbox information\n    glyph.setBbox(this.addGlyphBbox(node));\n    if (node.isParent() || node.data()[\"class\"] == 'topology group' || node.data()[\"class\"] == 'submap' || node.data()[\"class\"] == 'complex' || node.data()[\"class\"] == 'compartment') {\n      var extraInfo = {};\n      extraInfo.w = node.width();\n      extraInfo.h = node.height();\n      extraInfo.minW = Number(node.css(\"min-width\").replace(\"px\", \"\"));\n      extraInfo.minH = Number(node.css(\"min-height\").replace(\"px\", \"\"));\n      extraInfo.WLBias = Number(node.css(\"min-width-bias-left\").replace(\"px\", \"\"));\n      extraInfo.WRBias = Number(node.css(\"min-width-bias-right\").replace(\"px\", \"\"));\n      extraInfo.HTBias = Number(node.css(\"min-height-bias-top\").replace(\"px\", \"\"));\n      extraInfo.HBBias = Number(node.css(\"min-height-bias-bottom\").replace(\"px\", \"\"));\n      glyph.setExtension(new libsbgnjs.Extension());\n      glyph.extension.add(compoundExtensionBuilder.buildObject(extraInfo));\n    }\n\n    //add port information\n    var ports = node._private.data.ports;\n    for (var i = 0; i < ports.length; i++) {\n      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal';\n      // This is the ratio of the area occupied for ports over the whole shape\n      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50;\n\n      // Divide the node sizes by the ratio because that sizes includes ports as well\n      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;\n      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;\n      glyph.addPort(new libsbgnjs.Port({\n        id: ports[i].id,\n        x: x,\n        y: y\n      }));\n    }\n    //add state and info box information\n    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {\n      var boxGlyph = node._private.data.statesandinfos[i];\n      var statesandinfosId = boxGlyph.id;\n      if (boxGlyph.clazz === \"state variable\") {\n        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"unit of information\") {\n        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));\n      }\n    }\n    // check for annotations\n    if (version !== \"plain\" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {\n      var extension = self.getOrCreateExtension(glyph);\n      var annotExt = self.getAnnotationExtension(node);\n      extension.add(annotExt);\n    }\n    // add glyph members that are not state variables or unit of info: subunits\n    if (nodeClass === \"complex\" || nodeClass === \"complex multimer\" || nodeClass === \"submap\" || nodeClass === \"topology group\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      if (node.data('collapsedChildren')) {\n        var collapsedChildren = node.data('collapsedChildren');\n        children = children.union(collapsedChildren);\n      }\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var glyphMemberList = self.getGlyphSbgnml(ele, version, visible);\n        for (var i = 0; i < glyphMemberList.length; i++) {\n          glyph.addGlyphMember(glyphMemberList[i]);\n        }\n      });\n    }\n    var sbgnvizExtString = \"\";\n    var hasNewtExt = false;\n\n    // add info for collapsed nodes\n    if (node.data('collapsedChildren')) {\n      sbgnvizExtString += \"<collapsed/>\";\n      sbgnvizExtString += \"<positionBeforeSaving x='\" + node.position().x + \"' y='\" + node.position().y + \"'/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for hidden nodes\n    if (node.hidden()) {\n      sbgnvizExtString += \"<hidden/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for nodes which has hidden neighbour\n    if (node.data(\"thickBorder\")) {\n      sbgnvizExtString += \"<hasHiddenNeighbour/>\";\n      hasNewtExt = true;\n    }\n\n    // add string to a new extension for this glyph\n    if (hasNewtExt) {\n      var extension = self.getOrCreateExtension(glyph);\n      extension.add(\"<sbgnviz>\" + sbgnvizExtString + \"</sbgnviz>\");\n    }\n\n    // current glyph is done\n    glyphList.push(glyph);\n\n    // keep going with all the included glyphs\n    if (nodeClass === \"compartment\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, visible));\n      });\n    }\n    return glyphList;\n  };\n\n  // element: a libsbgn.js glyph or edge object\n  jsonToSbgnml.getOrCreateExtension = function (element) {\n    var extension;\n    if (element.extension) {\n      // an extension is already there for this element\n      extension = element.extension;\n    } else {\n      extension = new libsbgnjs.Extension();\n      element.setExtension(extension);\n    }\n    return extension;\n  };\n  jsonToSbgnml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var self = this;\n    //Temporary hack to resolve \"undefined\" arc source and targets\n    var arcTarget = edge._private.data.porttarget;\n    var arcSource = edge._private.data.portsource;\n    if (hidden && !edge.visible()) return;\n    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;\n    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;\n    var arcId = edge._private.data.id;\n    var arc = new libsbgnjs.Arc({\n      id: arcId,\n      source: arcSource,\n      target: arcTarget,\n      class_: edge._private.data[\"class\"]\n    });\n    arc.setStart(new libsbgnjs.StartType({\n      x: edge._private.rscratch.startX,\n      y: edge._private.rscratch.startY\n    }));\n\n    // Export anchor points if edgeEditingExtension is registered\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);\n      if (typeof segpts !== 'undefined') {\n        if (segpts.length > 0) {\n          for (var i = 0; segpts && i < segpts.length; i = i + 2) {\n            var anchorX = segpts[i];\n            var anchorY = segpts[i + 1];\n            arc.addNext(new libsbgnjs.NextType({\n              x: anchorX,\n              y: anchorY\n            }));\n          }\n        }\n      }\n    }\n    arc.setEnd(new libsbgnjs.EndType({\n      x: edge._private.rscratch.endX,\n      y: edge._private.rscratch.endY\n    }));\n    var cardinality = edge._private.data.cardinality;\n    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {\n      var edgebBox = edge.boundingBox({\n        includeLabels: true,\n        includeNodes: false,\n        includeEdges: false,\n        includeOverlays: false\n      });\n      arc.addGlyph(new libsbgnjs.Glyph({\n        id: arc.id + '_card',\n        class_: 'stoichiometry',\n        label: new libsbgnjs.Label({\n          text: cardinality\n        }),\n        bbox: new libsbgnjs.Bbox({\n          x: edgebBox.x1,\n          y: edgebBox.y1,\n          w: edgebBox.w,\n          h: edgebBox.h\n        }) // dummy bbox, needed for format compliance\n      }));\n    }\n    // check for annotations\n    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {\n      var extension = self.getOrCreateExtension(arc);\n      var annotExt = this.getAnnotationExtension(edge);\n      extension.add(annotExt);\n    }\n\n    // add info for hidden edges\n    if (edge.hidden()) {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sbgnviz><hidden/></sbgnviz>\");\n    }\n\n    // add info about edge type\n    // since curve style is not standard we shouldn't have it for either version\n    if (edge.css('curve-style') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<curveStyle>\" + edge.css('curve-style') + \"</curveStyle>\");\n    }\n    if (edge.data('sif-meta') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sifMetaEdge>true</sifMetaEdge>\");\n    }\n    return arc;\n  };\n  jsonToSbgnml.addGlyphBbox = function (node) {\n    var padding = node.padding();\n    var borderWidth = Number(node.css(\"border-width\").replace(\"px\", \"\"));\n    var _class = node.data('class');\n    var width = node.outerWidth() - borderWidth;\n    var height = node.outerHeight() - borderWidth;\n    // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (node.data('ports').length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = node.data('ports')[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports\n        width /= ratio;\n        height /= ratio;\n      }\n    }\n    var x = node.position().x - width / 2;\n    var y = node.position().y - height / 2;\n    //var x =node._private.position.x - width/2 - padding;    \n    //var y = node._private.position.y - height/2 - padding;\n    //var x = node._private.position.x - width/2;\n    //var y = node._private.position.y - height/2;\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: width,\n      h: height\n    });\n  };\n  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {\n    boxBbox = boxGlyph.bbox;\n    var borderWidth = node.data()['border-width'];\n    var padding = node.padding();\n    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);\n    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2);\n    //var x = boxBbox.x / 100 * node.width();\n    //var y = boxBbox.y / 100 * node.height();\n\n    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);\n    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: boxBbox.w,\n      h: boxBbox.h\n    });\n  };\n  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'state variable'\n    });\n    var state = new libsbgnjs.StateType();\n    if (typeof node.state.value != 'undefined') state.value = node.state.value;\n    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;\n    glyph.setState(state);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'unit of information'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.label.text != 'undefined') label.text = node.label.text;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n\n    // assign correct entity tag for AF case\n    var entityName = null;\n    switch (mainGlyph._private.data[\"class\"]) {\n      case 'BA unspecified entity':\n        entityName = \"unspecified entity\";\n        break;\n      case 'BA simple chemical':\n        entityName = \"simple chemical\";\n        break;\n      case 'BA macromolecule':\n        entityName = \"macromolecule\";\n        break;\n      case 'BA nucleic acid feature':\n        entityName = \"nucleic acid feature\";\n        break;\n      case 'BA perturbing agent':\n        entityName = \"perturbation\";\n        break;\n      case 'BA complex':\n        entityName = \"complex\";\n        break;\n    }\n    // entity tag aren't always there, only for AF\n    // but we still need to keep this information for unknown map type\n    if (entityName) {\n      glyph.setEntity(new libsbgnjs.EntityType({\n        name: entityName\n      }));\n    }\n    return glyph;\n  };\n  jsonToSbgnml.childOfNone = function (ele, nodes) {\n    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;\n  };\n  return jsonToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var elementUtilities, cy;\n  function jsonToSif(param) {\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function isValidEnd(node) {\n    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';\n  }\n  jsonToSif.convert = function () {\n    var lines = [];\n    var edges = cy.edges().filter(function (edge) {\n      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());\n    });\n    var nodes = cy.nodes().filter(function (node) {\n      return elementUtilities.isSIFNode(node);\n    });\n    nodes = nodes.not(edges.connectedNodes());\n    var setToStr = function setToStr(set) {\n      if (!set) {\n        return '';\n      }\n      return Object.keys(set).join(';');\n    };\n    var getLabel = function getLabel(node) {\n      return node.data('label');\n    };\n    var isValidLabel = function isValidLabel(label) {\n      return !!label;\n    };\n    edges.forEach(function (edge) {\n      var srcNames, tgtNames;\n      var getNames = function getNames(node) {\n        var names;\n        if (node.isParent()) {\n          names = node.children().map(getLabel);\n        } else {\n          names = [getLabel(node)];\n        }\n        return names && names.filter(isValidLabel);\n      };\n      var srcNames = getNames(edge.source());\n      var tgtNames = getNames(edge.target());\n      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {\n        return;\n      }\n      var type = edge.data('class');\n      var pcIDSet = edge.data('pcIDSet');\n      var siteLocSet = edge.data('siteLocSet');\n      var pcIDs = setToStr(pcIDSet);\n      var siteLocations = setToStr(siteLocSet);\n      srcNames.forEach(function (srcName) {\n        tgtNames.forEach(function (tgtName) {\n          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\\t');\n          lines.push(line);\n        });\n      });\n    });\n    nodes.forEach(function (node) {\n      var label = getLabel(node);\n      if (label) {\n        lines.push(label);\n      }\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return jsonToSif;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2lmLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImpzb25Ub1NpZiIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImlzVmFsaWRFbmQiLCJub2RlIiwiaXNTSUZOb2RlIiwiZGF0YSIsImNvbnZlcnQiLCJsaW5lcyIsImVkZ2VzIiwiZmlsdGVyIiwiZWRnZSIsImlzU0lGRWRnZSIsInNvdXJjZSIsInRhcmdldCIsIm5vZGVzIiwibm90IiwiY29ubmVjdGVkTm9kZXMiLCJzZXRUb1N0ciIsInNldCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiZ2V0TGFiZWwiLCJpc1ZhbGlkTGFiZWwiLCJsYWJlbCIsImZvckVhY2giLCJzcmNOYW1lcyIsInRndE5hbWVzIiwiZ2V0TmFtZXMiLCJuYW1lcyIsImlzUGFyZW50IiwiY2hpbGRyZW4iLCJtYXAiLCJsZW5ndGgiLCJ0eXBlIiwicGNJRFNldCIsInNpdGVMb2NTZXQiLCJwY0lEcyIsInNpdGVMb2NhdGlvbnMiLCJzcmNOYW1lIiwidGd0TmFtZSIsImxpbmUiLCJwdXNoIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvanNvbi10by1zaWYtY29udmVydGVyLWZhY3RvcnkuanM/NzQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIgZWxlbWVudFV0aWxpdGllcywgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIGpzb25Ub1NpZihwYXJhbSkge1xyXG4gICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc1ZhbGlkRW5kKG5vZGUpIHtcclxuICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGTm9kZSggbm9kZSApIHx8IG5vZGUuZGF0YSgnY2xhc3MnKSA9PSAndG9wb2xvZ3kgZ3JvdXAnO1xyXG4gIH1cclxuXHJcbiAganNvblRvU2lmLmNvbnZlcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBsaW5lcyA9IFtdO1xyXG5cclxuICAgIHZhciBlZGdlcyA9IGN5LmVkZ2VzKCkuZmlsdGVyKCBmdW5jdGlvbiggZWRnZSApIHtcclxuICAgICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuaXNTSUZFZGdlKCBlZGdlIClcclxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnNvdXJjZSgpIClcclxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnRhcmdldCgpICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIG5vZGVzID0gY3kubm9kZXMoKS5maWx0ZXIoIGZ1bmN0aW9uKCBub2RlICkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRk5vZGUoIG5vZGUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBub2RlcyA9IG5vZGVzLm5vdCggZWRnZXMuY29ubmVjdGVkTm9kZXMoKSApO1xyXG5cclxuICAgIHZhciBzZXRUb1N0ciA9IGZ1bmN0aW9uKHNldCkge1xyXG4gICAgICBpZiAoIXNldCkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNldCkuam9pbignOycpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2V0TGFiZWwgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHJldHVybiBub2RlLmRhdGEoJ2xhYmVsJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBpc1ZhbGlkTGFiZWwgPSBmdW5jdGlvbihsYWJlbCl7XHJcbiAgICAgIHJldHVybiAhIWxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGVkZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBlZGdlICkge1xyXG4gICAgICB2YXIgc3JjTmFtZXMsIHRndE5hbWVzO1xyXG5cclxuICAgICAgdmFyIGdldE5hbWVzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHZhciBuYW1lcztcclxuXHJcbiAgICAgICAgaWYgKG5vZGUuaXNQYXJlbnQoKSkge1xyXG4gICAgICAgICAgbmFtZXMgPSAgbm9kZS5jaGlsZHJlbigpLm1hcCggZ2V0TGFiZWwgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWVzID0gWyBnZXRMYWJlbChub2RlKSBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWVzICYmIG5hbWVzLmZpbHRlciggaXNWYWxpZExhYmVsICk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgc3JjTmFtZXMgPSBnZXROYW1lcyhlZGdlLnNvdXJjZSgpKTtcclxuICAgICAgdmFyIHRndE5hbWVzID0gZ2V0TmFtZXMoZWRnZS50YXJnZXQoKSk7XHJcblxyXG4gICAgICBpZiAoICFzcmNOYW1lcyB8fCAhdGd0TmFtZXMgfHwgc3JjTmFtZXMubGVuZ3RoID09IDAgfHwgdGd0TmFtZXMubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdHlwZSA9IGVkZ2UuZGF0YSgnY2xhc3MnKTtcclxuICAgICAgdmFyIHBjSURTZXQgPSBlZGdlLmRhdGEoJ3BjSURTZXQnKTtcclxuICAgICAgdmFyIHNpdGVMb2NTZXQgPSBlZGdlLmRhdGEoJ3NpdGVMb2NTZXQnKTtcclxuICAgICAgdmFyIHBjSURzID0gc2V0VG9TdHIoIHBjSURTZXQgKTtcclxuICAgICAgdmFyIHNpdGVMb2NhdGlvbnMgPSBzZXRUb1N0ciggc2l0ZUxvY1NldCApO1xyXG5cclxuICAgICAgc3JjTmFtZXMuZm9yRWFjaCggc3JjTmFtZSA9PiB7XHJcbiAgICAgICAgdGd0TmFtZXMuZm9yRWFjaCggdGd0TmFtZSA9PiB7XHJcbiAgICAgICAgICB2YXIgbGluZSA9IFsgc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSwgcGNJRHMsIHNpdGVMb2NhdGlvbnMgXS5qb2luKCAnXFx0JyApO1xyXG4gICAgICAgICAgbGluZXMucHVzaCggbGluZSApO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBub2RlICkge1xyXG4gICAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbCggbm9kZSApO1xyXG5cclxuICAgICAgaWYgKCBsYWJlbCApIHtcclxuICAgICAgICBsaW5lcy5wdXNoKCBsYWJlbCApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIHRleHQgPSBsaW5lcy5qb2luKCAnXFxuJyApO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGpzb25Ub1NpZjtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUUxQixJQUFJQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV4QixTQUFTQyxTQUFTQSxDQUFDQyxLQUFLLEVBQUU7SUFDeEJILGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFFQSxTQUFTQyxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7SUFDeEIsT0FBT1AsZ0JBQWdCLENBQUNRLFNBQVMsQ0FBRUQsSUFBSyxDQUFDLElBQUlBLElBQUksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQjtFQUNyRjtFQUVBUCxTQUFTLENBQUNRLE9BQU8sR0FBRyxZQUFXO0lBQzdCLElBQUlDLEtBQUssR0FBRyxFQUFFO0lBRWQsSUFBSUMs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\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sif-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Listen document for keyboard inputs and exports the utilities that it makes use of\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  function keyboardInputUtilities(param) {\n    // Listen to events on network container\n    $(document).on('keydown', '.integer-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isIntegerFieldInput(value, e);\n    });\n    $(document).on('keydown', '.float-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isFloatFieldInput(value, e);\n    });\n    $(document).on('change', '.integer-input,.float-input', function (e) {\n      var min = $(this).attr('min');\n      var max = $(this).attr('max');\n      var value = parseFloat($(this).val());\n      if (min != null) {\n        min = parseFloat(min);\n      }\n      if (max != null) {\n        max = parseFloat(max);\n      }\n      if (min != null && value < min) {\n        value = min;\n      } else if (max != null && value > max) {\n        value = max;\n      }\n      if (isNaN(value)) {\n        if (min != null) {\n          value = min;\n        } else if (max != null) {\n          value = max;\n        } else {\n          value = 0;\n        }\n      }\n      $(this).val(\"\" + value);\n    });\n  }\n  keyboardInputUtilities.isNumberKey = function (e) {\n    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;\n  };\n  keyboardInputUtilities.isDotKey = function (e) {\n    return e.keyCode === 190;\n  };\n  keyboardInputUtilities.isMinusSignKey = function (e) {\n    return e.keyCode === 109 || e.keyCode === 189;\n  };\n  keyboardInputUtilities.isLeftKey = function (e) {\n    return e.keyCode === 37;\n  };\n  keyboardInputUtilities.isRightKey = function (e) {\n    return e.keyCode === 39;\n  };\n  keyboardInputUtilities.isBackspaceKey = function (e) {\n    return e.keyCode === 8;\n  };\n  keyboardInputUtilities.isTabKey = function (e) {\n    return e.keyCode === 9;\n  };\n  keyboardInputUtilities.isEnterKey = function (e) {\n    return e.keyCode === 13;\n  };\n  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {\n    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);\n  };\n  keyboardInputUtilities.isFloatFieldInput = function (value, e) {\n    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);\n  };\n  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {\n    return e.ctrlKey || e.metaKey;\n  };\n  return keyboardInputUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/keyboard-input-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nmodule.exports = function () {\n  var cy, mainUtilities;\n  function layoutLoader(param) {\n    cy = param.sbgnCyInstance.getCy();\n    mainUtilities = param.mainUtilities;\n  }\n  layoutLoader.load = function (layoutText, byName) {\n    var lines = tdParser.getLinesArray(layoutText);\n    var posMap = {};\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n      var nodeId;\n      if (byName) {\n        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);\n        if (matchingNodes.length === 0) {\n          return;\n        }\n\n        // ideally there is only one matching node\n        // use the first one in any case\n        nodeId = matchingNodes.id();\n      } else {\n        nodeId = tabs[0];\n      }\n      var posX = parseFloat(tabs[1]);\n      var posY = parseFloat(tabs[2]);\n      posMap[nodeId] = {\n        x: posX,\n        y: posY\n      };\n    });\n    var options = {\n      name: 'preset',\n      positions: posMap,\n      fit: false\n    };\n    mainUtilities.performLayout(options);\n  };\n  layoutLoader.getNodesByName = function (name) {\n    return cy.nodes().filter('[label=\"' + name + '\"]');\n  };\n  return layoutLoader;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC1sb2FkZXItZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsdUVBQXdCLENBQUM7QUFFaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFDMUIsSUFBSUMsRUFBRSxFQUFFQyxhQUFhO0VBRXJCLFNBQVNDLFlBQVlBLENBQUVDLEtBQUssRUFBRztJQUM3QkgsRUFBRSxHQUFHRyxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDakNKLGFBQWEsR0FBR0UsS0FBSyxDQUFDRixhQUFhO0VBQ3JDO0VBRUFDLFlBQVksQ0FBQ0ksSUFBSSxHQUFHLFVBQVVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBQ2pELElBQUlDLEtBQUssR0FBR2IsUUFBUSxDQUFDYyxhQUFhLENBQUVILFVBQVcsQ0FBQztJQUNoRCxJQUFJSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWZGLEtBQUssQ0FBQ0csT0FBTyxDQUFFLFVBQVVDLElBQUksRUFBRztNQUM5QixJQUFJQyxJQUFJLEdBQUdsQixRQUFRLENBQUNtQixZQUFZLENBQUVGLElBQUssQ0FBQztNQUV4QyxJQUFJRyxNQUFNO01BRVYsSUFBS1IsTUFBTSxFQUFHO1FBQ1osSUFBSVMsYUFBYSxHQUFHZixZQUFZLENBQUNnQixjQUFjLENBQUVKLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztRQUM1RCxJQUFLRyxhQUFhLENBQUNFLE1BQU0sS0FBSyxDQUFDLEVBQUc7VUFDaEM7UUFDRjs7UUFFQTtRQUNBO1FBQ0FILE1BQU0sR0FBR0MsYUFBYSxDQUFDRyxFQUFFLENBQUMsQ0FBQztNQUM3QixDQUFDLE1BQ0k7UUFDSEosTUFBTSxHQUFHRixJQUFJLENBQUUsQ0FBQyxDQUFFO01BQ3BCO01BRUEsSUFBSU8sSUFBSSxHQUFHQyxVQUFVLENBQUVSLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztNQUNsQyxJQUFJUyxJQUFJLEdBQUdELFVBQVUsQ0FBRVIsSUFBSSxDQUFFLENBQUMsQ0FBRyxDQUFDO01BRWxDSCxNQUFNLENBQUVLLE1BQU0sQ0FBRSxHQUFHO1FBQUVRLENBQUMsRUFBRUgsSUFBSTtRQUFFSSxDQUFDLEVBQUVGO01BQUssQ0FBQztJQUN6QyxDQUFFLENBQUM7SUFFSCxJQUFJRyxPQUFPLEdBQUc7TUFDWkMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsU0FBUyxFQUFFakIsTUFBTTtNQUNqQmtCLEdBQUcsRUFBRTtJQUNQLENBQUM7SUFFRDVCLGFBQWEsQ0FBQzZCLGFBQWEsQ0FBRUosT0FBUSxDQUFDO0VBQ3hDLENBQUM7RUFFRHhCLFlBQVksQ0FBQ2dCLGNBQWMsR0FBRyxVQUFVUyxJQUFJLEVBQUc7SUFDN0MsT0FBTzNCLEVBQUUsQ0FBQytCLEtBQUssQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBRSxVQUFVLEdBQUdMLElBQUksR0FBRyxJQUFLLENBQUM7RUFDdEQsQ0FBQztFQUVELE9BQU96QixZQUFZO0FBQ3JCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtbG9hZGVyLWZhY3RvcnkuanM/ZjMwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGRQYXJzZXIgPSByZXF1aXJlKCcuL3RhYi1kZWxpbWV0ZWQtcGFyc2VyJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjeSwgbWFpblV0aWxpdGllcztcclxuXHJcbiAgZnVuY3Rpb24gbGF5b3V0TG9hZGVyKCBwYXJhbSApIHtcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICAgIG1haW5VdGlsaXRpZXMgPSBwYXJhbS5tYWluVXRpbGl0aWVzO1xyXG4gIH1cclxuXHJcbiAgbGF5b3V0TG9hZGVyLmxvYWQgPSBmdW5jdGlvbiggbGF5b3V0VGV4dCwgYnlOYW1lICkge1xyXG4gICAgdmFyIGxpbmVzID0gdGRQYXJzZXIuZ2V0TGluZXNBcnJheSggbGF5b3V0VGV4dCApO1xyXG4gICAgdmFyIHBvc01hcCA9IHt9O1xyXG5cclxuICAgIGxpbmVzLmZvckVhY2goIGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gICAgICB2YXIgdGFicyA9IHRkUGFyc2VyLmdldFRhYnNBcnJheSggbGluZSApO1xyXG5cclxuICAgICAgdmFyIG5vZGVJZDtcclxuXHJcbiAgICAgIGlmICggYnlOYW1lICkge1xyXG4gICAgICAgIHZhciBtYXRjaGluZ05vZGVzID0gbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lKCB0YWJzWyAwIF0gKTtcclxuICAgICAgICBpZiAoIG1hdGNoaW5nTm9kZXMubGVuZ3RoID09PSAwICkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWRlYWxseSB0aGVyZSBpcyBvbmx5IG9uZSBtYXRjaGluZyBub2RlXHJcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBvbmUgaW4gYW55IGNhc2VcclxuICAgICAgICBub2RlSWQgPSBtYXRjaGluZ05vZGVzLmlkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbm9kZUlkID0gdGFic1sgMCBdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcG9zWCA9IHBhcnNlRmxvYXQoIHRhYnNbIDEgXSApO1xyXG4gICAgICB2YXIgcG9zWSA9IHBhcnNlRmxvYXQoIHRhYnNbIDIgXSApO1xyXG5cclxuICAgICAgcG9zTWFwWyBub2RlSWQgXSA9IHsgeDogcG9zWCwgeTogcG9zWSB9O1xyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiAncHJlc2V0JyxcclxuICAgICAgcG9zaXRpb25zOiBwb3NNYXAsXHJcbiAgICAgIGZpdDogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgbWFpblV0aWxpdGllcy5wZXJmb3JtTGF5b3V0KCBvcHRpb25zICk7XHJcbiAgfTtcclxuXHJcbiAgbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lID0gZnVuY3Rpb24oIG5hbWUgKSB7XHJcbiAgICByZXR1cm4gY3kubm9kZXMoKS5maWx0ZXIoICdbbGFiZWw9XCInICsgbmFtZSArICdcIl0nICk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGxheW91dExvYWRlcjtcclxufTtcclxuIl0sIm5hbWVzIjpbInRkUGFyc2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjeSIsIm1haW5VdGlsaXRpZXMiLCJsYXlvdXRMb2FkZXIiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJsb2FkIiwibGF5b3V0VGV4dCIsImJ5TmFtZSIsImxpbmVzIiwiZ2V0TGluZXNBcnJheSIsInBvc01hcCIsImZvckVhY2giLCJsaW5lIiwidGFicyIsImdldFRhYnNBcnJheSIsIm5vZGVJZCIsIm1hdGNoaW5nTm9kZXMiLCJnZXROb2Rlc0J5TmFtZSIsImxlbmd0aCIsImlkIiwicG9zWCIsInBhcnNlRmxvYXQiLCJwb3NZIiwieCIsInkiLCJvcHRpb25zIiwibmFtZSIsInBvc2l0aW9ucyIsImZpdCIsInBlcmZvcm1MYXlvdXQiLCJub2RlcyIsImZpbHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/layout-loader-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  function layoutToText(param) {\n    cy = param.sbgnCyInstance.getCy();\n  }\n  layoutToText.convert = function (byName) {\n    var nodes = cy.nodes();\n    var lines = [];\n    nodes.map(function (node) {\n      var idOrName = byName ? node.data('label') : node.id();\n      var posX = node.position('x');\n      var posY = node.position('y');\n      var line = [idOrName, posX, posY].join('\\t');\n      lines.push(line);\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return layoutToText;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC10by10ZXh0LWZhY3RvcnkuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJsYXlvdXRUb1RleHQiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwiYnlOYW1lIiwibm9kZXMiLCJsaW5lcyIsIm1hcCIsIm5vZGUiLCJpZE9yTmFtZSIsImRhdGEiLCJpZCIsInBvc1giLCJwb3NpdGlvbiIsInBvc1kiLCJsaW5lIiwiam9pbiIsInB1c2giLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzPzA0ZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIGxheW91dFRvVGV4dCggcGFyYW0gKSB7XHJcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICBsYXlvdXRUb1RleHQuY29udmVydCA9IGZ1bmN0aW9uKCBieU5hbWUgKSB7XHJcbiAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xyXG4gICAgdmFyIGxpbmVzID0gW107XHJcblxyXG4gICAgbm9kZXMubWFwKCBmdW5jdGlvbiggbm9kZSApIHtcclxuICAgICAgdmFyIGlkT3JOYW1lID0gYnlOYW1lID8gbm9kZS5kYXRhKCdsYWJlbCcpIDogbm9kZS5pZCgpO1xyXG4gICAgICB2YXIgcG9zWCA9IG5vZGUucG9zaXRpb24oJ3gnKTtcclxuICAgICAgdmFyIHBvc1kgPSBub2RlLnBvc2l0aW9uKCd5Jyk7XHJcblxyXG4gICAgICB2YXIgbGluZSA9IFsgaWRPck5hbWUsIHBvc1gsIHBvc1kgXS5qb2luKCAnXFx0JyApO1xyXG4gICAgICBsaW5lcy5wdXNoKCBsaW5lICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIHRleHQgPSBsaW5lcy5qb2luKCAnXFxuJyApO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGxheW91dFRvVGV4dDtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUMxQixJQUFJQyxFQUFFO0VBRU4sU0FBU0MsWUFBWUEsQ0FBRUMsS0FBSyxFQUFHO0lBQzdCRixFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUVBSCxZQUFZLENBQUNJLE9BQU8sR0FBRyxVQUFVQyxNQUFNLEVBQUc7SUFDeEMsSUFBSUMsS0FBSyxHQUFHUCxFQUFFLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLElBQUlDLEtBQUssR0FBRyxFQUFFO0lBRWRELEtBQUssQ0FBQ0UsR0FBRyxDQUFFLFVBQVVDLElBQUksRUFBRztNQUMxQixJQUFJQyxRQUFRLEdBQUdMLE1BQU0sR0FBR0ksSUFBSSxDQUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUdGLElBQUksQ0FBQ0csRUFBRSxDQUFDLENBQUM7TUFDdEQsSUFBSUMsSUFBSSxHQUFHSixJQUFJLENBQUNLLFFBQVEsQ0FBQyxHQUFHLENBQUM7TUFDN0IsSUFBSUMsSUFBSSxHQUFHTixJQUFJLENBQUNLLFFBQVEsQ0FBQyxHQUFHLENBQUM7TUFFN0IsSUFBSUUsSUFBSSxHQUFHLENBQUVOLFFBQVEsRUFBRUcsSUFBSSxFQUFFRSxJQUFJLENBQUUsQ0FBQ0UsSUFBSSxDQUFFLElBQUssQ0FBQztNQUNoRFYsS0FBSyxDQUFDVyxJQUFJLENBQUVGLElBQUssQ0FBQztJQUNwQixDQUFFLENBQUM7SUFFSCxJQUFJRyxJQUFJLEdBQUdaLEtBQUssQ0FBQ1UsSUFBSSxDQUFFLElBQUssQ0FBQztJQUM3QixPQUFPRSxJQUFJO0VBQ2IsQ0FBQztFQUVELE9BQU9uQixZQUFZO0FBQ3JCLENBQUMifQ==\n//# sourceURL=webpack-internal:///./src/utilities/layout-to-text-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \r\n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\r\n */\n\nvar libUtilities = function libUtilities() {};\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9saWItdXRpbGl0aWVzLmpzP2JhYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogXHJcbiAqIFV0aWxpdHkgZmlsZSB0byBnZXQgYW5kIHNldCB0aGUgbGlicmFyaWVzIHRvIHdoaWNoIHNiZ252aXogaXMgZGVwZW5kZW50IGZyb20gYW55IGZpbGUuXHJcbiAqL1xyXG5cclxudmFyIGxpYlV0aWxpdGllcyA9IGZ1bmN0aW9uKCl7XHJcbn07XHJcblxyXG5saWJVdGlsaXRpZXMuc2V0TGlicyA9IGZ1bmN0aW9uKGxpYnMpIHtcclxuICB0aGlzLmxpYnMgPSBsaWJzO1xyXG59O1xyXG5cclxubGliVXRpbGl0aWVzLmdldExpYnMgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5saWJzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBsaWJVdGlsaXRpZXM7XHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFhLENBQzdCLENBQUM7QUFFREEsWUFBWSxDQUFDQyxPQUFPLEdBQUcsVUFBU0MsSUFBSSxFQUFFO0VBQ3BDLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0FBQ2xCLENBQUM7QUFFREYsWUFBWSxDQUFDRyxPQUFPLEdBQUcsWUFBVztFQUNoQyxPQUFPLElBQUksQ0FBQ0QsSUFBSTtBQUNsQixDQUFDO0FBRURFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTCxZQUFZIn0=\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\n/*\r\n * These are the main utilities to be directly utilized by the user interactions.\r\n * Idealy, this file is just required by index.js\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var elementUtilities, jsonToSbgnml, sbgnmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;\n  var cy, options;\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    optionUtilities = param.optionUtilities;\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n    layoutLoader = param.layoutLoader;\n    layoutToText = param.layoutToText;\n    options = optionUtilities.getOptions();\n  }\n  mainUtilities.beforePerformLayout = function () {\n    var parents = cy.nodes(':parent');\n    var edges = cy.edges();\n    cy.startBatch();\n\n    // graphUtilities.disablePorts();\n\n    // TODO do this by using extension API\n    // removes all bendpoints for all edges in cytoscape instance\n    for (var i = 0; i < edges.length; i++) {\n      var edge = edges[i];\n      edge.removeClass('edgebendediting-hasbendpoints');\n      edge.removeClass('edgecontrolediting-hascontrolpoints');\n      edge.removeClass('edgebendediting-hasmultiplebendpoints');\n      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');\n      edge.data('cyedgebendeditingDistances', []);\n      edge.data('cyedgebendeditingWeights', []);\n      edge.data('cyedgecontroleditingDistances', []);\n      edge.data('cyedgecontroleditingWeights', []);\n    }\n    parents.removeData('minWidth');\n    parents.removeData('minHeight');\n    parents.removeData('minWidthBiasLeft');\n    parents.removeData('minWidthBiasRight');\n    parents.removeData('minHeightBiasTop');\n    parents.removeData('minHeightBiasBottom');\n    cy.endBatch();\n    if (parents.length > 0) cy.style().update();\n  };\n\n  // Expand given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodesToExpand = expandCollapse.expandableNodes(nodes);\n    if (nodesToExpand.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expand\", {\n        nodes: nodesToExpand\n      });\n    } else {\n      expandCollapse.expand(nodes);\n    }\n  };\n\n  // Collapse given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapse\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapse(nodes);\n    }\n  };\n\n  // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var complexes = cy.nodes(\"[class^='complex']\");\n    if (expandCollapse.collapsibleNodes(complexes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: complexes\n      });\n    } else {\n      expandCollapse.collapseRecursively(complexes);\n    }\n  };\n\n  // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes().filter(\"[class^='complex']\"));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = cy.nodes(':visible');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapseRecursively(nodes);\n    }\n  };\n\n  // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Increase border width to show nodes with hidden neighbors\n  mainUtilities.thickenBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth + 2);\n    });\n    eles.data(\"thickBorder\", true);\n    return eles;\n  };\n  // Decrease border width when hidden neighbors of the nodes become visible\n  mainUtilities.thinBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth - 2);\n    });\n    eles.removeData(\"thickBorder\");\n    return eles;\n  };\n  mainUtilities.hideElesSimple = function (eles) {\n    var viewUtilities = cy.viewUtilities('get');\n    if (eles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(eles);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: eles\n      });\n      nodesWithHiddenNeighbor = eles.neighborhood(\":visible\").nodes().difference(eles).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.hideNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact.\n  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.elements();\n    var nodesToShow = elementUtilities.extendNodeList(nodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide);\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showEles = function (eles) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var hiddenEles = eles.filter(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"show\",\n        param: hiddenEles\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showAll = function () {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (cy.elements().length === cy.elements(':visible').length) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"show\",\n        param: cy.elements()\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(cy.elements());\n    }\n  };\n\n  // Removes the given elements in a simple way. Considers 'undoable' option.\n  mainUtilities.deleteElesSimple = function (eles) {\n    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteElesSimple\", {\n        eles: eles\n      });\n    } else {\n      eles.remove();\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.\n  // Considers 'undoable' option.\n  mainUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes();\n    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteNodesSmart\", {\n        firstTime: true,\n        eles: nodes\n      });\n    } else {\n      elementUtilities.deleteNodesSmart(nodes);\n    }\n  };\n  function isNeed2Highligth(eles2highligth) {\n    if (eles2highligth.length === 0) {\n      return false;\n    }\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClass = viewUtilities.getAllHighlightClasses()[0];\n    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');\n    if (highlightedEles.contains(eles2highligth)) {\n      return false;\n    }\n    return true;\n  }\n\n  // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightSelected = function (_eles) {\n    var elesToHighlight = _eles;\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightNeighbours = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Finds the elements whose label includes the given label and highlights processes of those elements.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.searchByLabel = function (label) {\n    if (label.length == 0) {\n      return;\n    }\n    var nodesToHighlight = cy.nodes(\":visible\").filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      if (ele.data(\"label\") && ele.data(\"label\").toLowerCase().indexOf(label) >= 0) {\n        return true;\n      }\n      return false;\n    });\n    if (nodesToHighlight.length == 0) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    // Use this line for smart search\n    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: nodesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(nodesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightProcesses = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.extendNodeList(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.removeHighlights = function () {\n    if (elementUtilities.noneIsNotHighlighted()) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"removeHighlights\");\n    } else {\n      viewUtilities.removeHighlights();\n    }\n    cy.style().update();\n  };\n  mainUtilities.loadLayoutData = function (layoutText, byName) {\n    layoutLoader.load(layoutText, byName);\n  };\n  mainUtilities.getLayoutText = function (byName) {\n    layoutToText.convert(byName);\n  };\n\n  // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter\n  // to a truthy value you can force an undable layout operation independant of 'undoable' option.\n  mainUtilities.performLayout = function (layoutOptions, notUndoable) {\n    if (!options.undoable || notUndoable) {\n      // 'notUndoable' flag can be used to have composite actions in undo/redo stack\n      // Things to do before performing layout\n      mainUtilities.beforePerformLayout();\n      var layout = cy.elements().filter(':visible').layout(layoutOptions);\n\n      // Check this for cytoscape.js backward compatibility\n      if (layout && layout.run) {\n        layout.run();\n      }\n    } else {\n      cy.undoRedo()[\"do\"](\"layout\", {\n        options: layoutOptions,\n        eles: cy.elements().filter(':visible')\n      });\n    }\n  };\n\n  // Creates an sbgnml file content from the exising graph and returns it.\n  mainUtilities.createSbgnml = function () {\n    return jsonToSbgnml.createSbgnml();\n  };\n  mainUtilities.createNwt = function () {\n    return jsonToNwt.createSbgnml();\n  };\n\n  // Converts given sbgnml data to a json object in a special format\n  // (http://js.cytoscape.org/#notation/elements-json) and returns it.\n  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {\n    return sbgnmlToJson.convert(data, urlParams);\n  };\n  mainUtilities.convertNwtToJson = function (data) {\n    return nwtToJson.convert(data);\n  };\n\n  // Create the qtip contents of the given node and returns it.\n  mainUtilities.getQtipContent = function (node) {\n    return elementUtilities.getQtipContent(node);\n  };\n\n  // Change option\n  mainUtilities.setShowComplexName = function (showComplexName) {\n    options.showComplexName = showComplexName;\n    // make change active by triggering data which will trigger style update\n    cy.nodes('[class^=\"complex\"]').forEach(function (ele) {\n      ele.trigger(\"data\");\n    });\n  };\n\n  /*\r\n   * Sets the ordering of the given nodes.\r\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\r\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\r\n   * used to set the distance between the node center and the ports. The default port distance is 60.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      var param = {\n        nodes: nodes,\n        ordering: ordering,\n        portDistance: portDistance\n      };\n      cy.undoRedo()[\"do\"](\"setPortsOrdering\", param);\n    }\n    cy.style().update();\n  };\n\n  /**\r\n   * Get map properties from SBGNML file\r\n   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event\r\n   * return: map properties as object\r\n   */\n  mainUtilities.getMapProperties = function () {\n    if (elementUtilities.fileFormat !== undefined) {\n      if (elementUtilities.fileFormat == 'sbgnml') return sbgnmlToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else {\n        console.log(\"File format mismatched!\");\n        return;\n      }\n    } else {\n      console.log(\"File format is not defined!\");\n      return;\n    }\n  };\n  mainUtilities.doValidation = function (file) {\n    return sbgnmlToJson.doValidation(file);\n  };\n  mainUtilities.setCompoundPadding = function (newPaddingValue) {\n    options.compoundPadding = newPaddingValue;\n    optionUtilities.extendOptions(options);\n  };\n  mainUtilities.getCompoundPadding = function () {\n    return options.compoundPadding;\n  };\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var sbgnmlToJson, elementUtilities;\n  function nwtToJson(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    elementUtilities = param.elementUtilities;\n  }\n  function strToSet(str, splitBy) {\n    var set = {};\n    var list = str ? str.split(splitBy) : [];\n    list.forEach(function (member) {\n      set[member] = true;\n    });\n    return set;\n  }\n  function getFirstByTagName(arc, tagName) {\n    var els = arc.getElementsByTagName(tagName);\n    var val = els.length > 0 ? els[0].innerHTML : null;\n    return val;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDSet': function pcIDSet(arc) {\n      var val = getFirstByTagName(arc, 'pcIDs');\n      return strToSet(val, /;| /);\n    },\n    'siteLocSet': function siteLocSet(arc) {\n      var val = getFirstByTagName(arc, 'siteLocations');\n      return strToSet(val, ';');\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(glyph) {\n      var val = getFirstByTagName(glyph, 'tooltip');\n      return val;\n    },\n    'infoboxes': function infoboxes(glyph, data) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(glyph) {\n          var val = getFirstByTagName(glyph, 'tooltip');\n          return val;\n        }\n      };\n      var infoboxGlyphs = glyph.getElementsByTagName('glyph');\n      for (var i = 0; i < infoboxGlyphs.length; i++) {\n        var infoboxGlyph = infoboxGlyphs[i];\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);\n          if (val) {\n            data.statesandinfos[i][propName] = val;\n          }\n        });\n      }\n    }\n  };\n  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {\n    elesData.forEach(function (obj) {\n      var data = obj.data;\n      if (filterFcn(data[\"class\"])) {\n        var xmlEle = getXMLEleById(xmlObject, data.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](xmlEle, data);\n          if (val) {\n            data[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function getElMap(graphData) {\n    var map = {\n      nodes: {},\n      edges: {},\n      infoboxes: {}\n    };\n    graphData.edges.forEach(function (edge) {\n      map.edges[edge.data.id] = edge;\n    });\n    graphData.nodes.forEach(function (node) {\n      map.nodes[node.data.id] = node;\n      var infoboxes = node.data.statesandinfos;\n      infoboxes.forEach(function (infobox) {\n        map.infoboxes[infobox.id] = infobox;\n      });\n    });\n    return map;\n  }\n  function applyExtraStylesData(graphData, xmlObject) {\n    var listOfStyles = xmlObject.querySelector('listOfStyles');\n    var styles = listOfStyles && listOfStyles.querySelectorAll('style');\n    if (!styles || styles.length === 0) {\n      return;\n    }\n    var attrToProp = {\n      'shapeName': 'shape-name'\n    };\n    var elMap = getElMap(graphData);\n    styles.forEach(function (style) {\n      var idList = style.getAttribute('idList').split(' ');\n      Object.keys(attrToProp).forEach(function (attrName) {\n        var g = style.querySelector('g');\n        var val = g.getAttribute(attrName);\n        if (val) {\n          var propName = attrToProp[attrName];\n          idList.forEach(function (id) {\n            if (elMap.nodes[id] || elMap.edges[id]) {\n              var el = elMap.nodes[id] || elMap.edges[id];\n              el.data[propName] = val;\n            } else if (elMap.infoboxes[id]) {\n              var el = elMap.infoboxes[id];\n              el.style[propName] = val;\n            }\n          });\n        }\n      });\n    });\n  }\n  nwtToJson.convert = function (xmlObject, urlParams) {\n    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);\n    var mapType = elementUtilities.mapType;\n    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      elementUtilities.fileFormat = 'nwt';\n      // extend edges data with sif specific features\n      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);\n      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);\n\n      // apply the style data that is not applied because of restrictions of libsbgn\n      applyExtraStylesData(graphData, xmlObject);\n    }\n    return graphData;\n  };\n  nwtToJson.mapPropertiesToObj = function () {\n    return sbgnmlToJson.mapPropertiesToObj();\n  };\n  return nwtToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/nwt-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\r\n *  Extend default options and get current options by using this file\r\n */\n\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer parent node on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // intial compound padding for all compound nodes \n    compoundPadding: function compoundPadding() {\n      return 0;\n    },\n    improveFlow: function improveFlow() {\n      return true;\n    },\n    // Whether to adjust node label font size automatically.\n    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')\n    // instead of doing it.\n    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {\n      return true;\n    },\n    // extra padding for compound nodes except for complexes\n    extraCompartmentPadding: 14,\n    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details\n    extraComplexPadding: 10,\n    // Wether to display the complex's labels, like compartments.\n    // Will also increase the paddings by extraCompoundPadding to make room for the name.\n    showComplexName: true,\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true\n  };\n  var optionUtilities = function optionUtilities(param) {};\n\n  // Extend the defaults options with the user options\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n    optionUtilities.options = result;\n    return options;\n  };\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwiaW1wcm92ZUZsb3ciLCJhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHkiLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJzaG93Q29tcGxleE5hbWUiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ1bmRvYWJsZSIsIm9wdGlvblV0aWxpdGllcyIsInBhcmFtIiwiZXh0ZW5kT3B0aW9ucyIsIm9wdGlvbnMiLCJyZXN1bHQiLCJwcm9wIiwiZ2V0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogIEV4dGVuZCBkZWZhdWx0IG9wdGlvbnMgYW5kIGdldCBjdXJyZW50IG9wdGlvbnMgYnkgdXNpbmcgdGhpcyBmaWxlXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgLy8gZGVmYXVsdCBvcHRpb25zXHJcbiAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgLy8gVGhlIHBhdGggb2YgY29yZSBsaWJyYXJ5IGltYWdlcyB3aGVuIHNiZ252aXogaXMgcmVxdWlyZWQgZnJvbSBucG0gYW5kIHRoZSBpbmRleCBodG1sXHJcbiAgICAvLyBmaWxlIGFuZCBub2RlX21vZHVsZXMgYXJlIHVuZGVyIHRoZSBzYW1lIGZvbGRlciB0aGVuIHVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGZpbmVcclxuICAgIGltZ1BhdGg6ICdub2RlX21vZHVsZXMvc2JnbnZpei9zcmMvaW1nJyxcclxuICAgIC8vIFdoZXRoZXIgdG8gZml0IGxhYmVscyB0byBub2Rlc1xyXG4gICAgZml0TGFiZWxzVG9Ob2RlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIC8vIGR5bmFtaWMgbGFiZWwgc2l6ZSBpdCBtYXkgYmUgJ3NtYWxsJywgJ3JlZ3VsYXInLCAnbGFyZ2UnXHJcbiAgICBkeW5hbWljTGFiZWxTaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAncmVndWxhcic7XHJcbiAgICB9LFxyXG4gICAgLy8gV2hldGhlciB0byBpbmZlciBwYXJlbnQgbm9kZSBvbiBsb2FkIFxyXG4gICAgaW5mZXJOZXN0aW5nT25Mb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvLyBpbnRpYWwgY29tcG91bmQgcGFkZGluZyBmb3IgYWxsIGNvbXBvdW5kIG5vZGVzIFxyXG4gICAgY29tcG91bmRQYWRkaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuICAgIGltcHJvdmVGbG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgLy8gV2hldGhlciB0byBhZGp1c3Qgbm9kZSBsYWJlbCBmb250IHNpemUgYXV0b21hdGljYWxseS5cclxuICAgIC8vIElmIHRoaXMgb3B0aW9uIHJldHVybiBmYWxzZSBkbyBub3QgYWRqdXN0IGxhYmVsIHNpemVzIGFjY29yZGluZyB0byBub2RlIGhlaWdodCB1c2VzIG5vZGUuZGF0YSgnZm9udC1zaXplJylcclxuICAgIC8vIGluc3RlYWQgb2YgZG9pbmcgaXQuXHJcbiAgICBhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICAvLyBleHRyYSBwYWRkaW5nIGZvciBjb21wb3VuZCBub2RlcyBleGNlcHQgZm9yIGNvbXBsZXhlc1xyXG4gICAgZXh0cmFDb21wYXJ0bWVudFBhZGRpbmc6IDE0LFxyXG5cclxuICAgIC8vZXh0cmEgcGFkZGluZyBmb3IgY29tcGxleCBjb21wb3VuZCBub2RlcywgcmVmZXIgdG8gZWxlbWVudFV0aWxpdGllcy5nZXRDb21wbGV4UGFkZGluZyBmdW5jdGlvbiB0byBzZWUgZGV0YWlsc1xyXG4gICAgZXh0cmFDb21wbGV4UGFkZGluZzogMTAsXHJcbiAgICAvLyBXZXRoZXIgdG8gZGlzcGxheSB0aGUgY29tcGxleCdzIGxhYmVscywgbGlrZSBjb21wYXJ0bWVudHMuXHJcbiAgICAvLyBXaWxsIGFsc28gaW5jcmVhc2UgdGhlIHBhZGRpbmdzIGJ5IGV4dHJhQ29tcG91bmRQYWRkaW5nIHRvIG1ha2Ugcm9vbSBmb3IgdGhlIG5hbWUuXHJcbiAgICBzaG93Q29tcGxleE5hbWU6IHRydWUsXHJcbiAgICAvLyBUaGUgc2VsZWN0b3Igb2YgdGhlIGNvbXBvbmVudCBjb250YWluaW5nIHRoZSBzYmduIG5ldHdvcmtcclxuICAgIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcclxuICAgIC8vIFdoZXRoZXIgdGhlIGFjdGlvbnMgYXJlIHVuZG9hYmxlLCByZXF1aXJlcyBjeXRvc2NhcGUtdW5kby1yZWRvIGV4dGVuc2lvblxyXG4gICAgdW5kb2FibGU6IHRydWVcclxuICB9O1xyXG5cclxuICB2YXIgb3B0aW9uVXRpbGl0aWVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgfTtcclxuXHJcbiAgLy8gRXh0ZW5kIHRoZSBkZWZhdWx0cyBvcHRpb25zIHdpdGggdGhlIHVzZXIgb3B0aW9uc1xyXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuXHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XHJcbiAgICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xyXG4gICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvblV0aWxpdGllcy5vcHRpb25zID0gcmVzdWx0O1xyXG5cclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG9wdGlvblV0aWxpdGllcy5vcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBvcHRpb25VdGlsaXRpZXM7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBQzNCO0VBQ0EsSUFBSUMsUUFBUSxHQUFHO0lBQ2I7SUFDQTtJQUNBQyxPQUFPLEVBQUUsOEJBQThCO0lBQ3ZDO0lBQ0FDLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFBLEVBQVk7TUFDNUIsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUNEQyxvQkFBb0IsRUFBRSxTQUFBQSxxQkFBQSxFQUFZO01BQ2hDLE9BQU8sS0FBSztJQUNkLENBQUM7SUFDRDtJQUNBQyxnQkFBZ0IsRUFBRSxTQUFBQSxpQkFBQSxFQUFZO01BQzVCLE9BQU8sU0FBUztJQUNsQixDQUFDO0lBQ0Q7SUFDQUMsa0JBQWtCLEVBQUUsU0FBQUEsbUJBQUEsRUFBWTtNQUM5QixPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0Q7SUFDQUMsZUFBZSxFQUFFLFNBQUFBLGdCQUFBLEVBQVk7TUFDM0IsT0FBTyxDQUFDO0lBQ1YsQ0FBQztJQUNEQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFZO01BQ3JCLE9BQU8sSUFBSTtJQUNmLENBQUM7SUFDRDtJQUNBO0lBQ0E7SUFDQUMsb0NBQW9DLEVBQUUsU0FBQUEscUNBQUEsRUFBVztNQUMvQyxPQUFPLElBQUk7SUFDYixDQUFDO0lBQ0Q7SUFDQUMsdUJBQXVCLEVBQUUsRUFBRTtJQUUzQjtJQUNBQyxtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCO0lBQ0E7SUFDQUMsZUFBZSxFQUFFLElBQUk7SUFDckI7SUFDQUMsd0JBQXdCLEVBQUUseUJBQXlCO0lBQ25EO0lBQ0FDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFFRCxJQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQWFDLEtBQUssRUFBRSxDQUN2QyxDQUFDOztFQUVEO0VBQ0FELGVBQWUsQ0FBQ0UsYUFBYSxHQUFHLFVBQVVDLE9BQU8sRUFBRTtJQUNqRCxJQUFJQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsS0FBSyxJQUFJQyxJQUFJLElBQUluQixRQUFRLEVBQUU7TUFDekJrQixNQUFNLENBQUNDLElBQUksQ0FBQyxHQUFHbkIsUUFBUSxDQUFDbUIsSUFBSSxDQUFDO0lBQy9CO0lBRUEsS0FBSyxJQUFJQSxJQUFJLElBQUlGLE9BQU8sRUFBRTtNQUN4QkMsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDRSxJQUFJLENBQUM7SUFDOUI7SUFFQUwsZUFBZSxDQUFDRyxPQUFPLEdBQUdDLE1BQU07SUFFaEMsT0FBT0QsT0FBTztFQUNoQixDQUFDO0VBRURILGVBQWUsQ0FBQ00sVUFBVSxHQUFHLFlBQVk7SUFDdkMsT0FBT04sZUFBZSxDQUFDRyxPQUFPO0VBQ2hDLENBQUM7RUFFRCxPQUFPSCxlQUFlO0FBQ3hCLENBQUMifQ==\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToCd(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToCd.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/sbgnml2cd\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(XMLHttpRequest) {\n        callback(null);\n      }\n    });\n  };\n  return sbgnmlToCd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1jZC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYmdubWxUb0NkIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciIsIlhNTEh0dHBSZXF1ZXN0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanM/ODNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gc2Jnbm1sVG9DZChwYXJhbSkge1xyXG4gICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xyXG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgICB9XHJcbiAgXHJcbiBcclxuICAgIHNiZ25tbFRvQ2QuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLCAgICAgICAgICAgICBcclxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9zYmdubWwyY2RcIixcclxuICAgICAgICAgICAgZGF0YTogeG1sLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2Jnbm1sVG9DZDtcclxuICBcclxuICB9XHJcbiAgXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRXhCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsVUFBVUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3pCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFVBQVUsQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBRTNDQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNGQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUUsMENBQTBDO01BQy9DQyxJQUFJLEVBQUVOLEdBQUc7TUFDVE8sT0FBTyxFQUFFLFNBQUFBLFFBQVVELElBQUksRUFBRTtRQUNyQkwsUUFBUSxDQUFDSyxJQUFJLENBQUM7TUFDbEIsQ0FBQztNQUNERSxLQUFLLEVBQUUsU0FBQUEsTUFBVUMsY0FBYyxFQUFFO1FBQzdCUixRQUFRLENBQUMsSUFBSSxDQUFDO01BQ2xCO0lBQ0osQ0FBQyxDQUFDO0VBR04sQ0FBQztFQUVELE9BQU9QLFVBQVU7QUFFbkIsQ0FBQyJ9\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-cd-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-gpml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-gpml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToGpml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToGpml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:GPML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToGpml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1ncG1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvR3BtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLWdwbWwtY29udmVydGVyLWZhY3RvcnkuanM/MDY3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYmdubWxUb0dwbWwocGFyYW0pIHtcclxuICAgICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzYmdubWxUb0dwbWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JHTi1NTDpHUE1MXCI7XHJcblxyXG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veG1sXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IHRydWUsIG1lc3NhZ2U6IGRhdGEsIGVycm9yOiBcIlwifSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2Jnbm1sVG9HcG1sO1xyXG5cclxufVxyXG4gICJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFFekIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDckM7RUFHQUosWUFBWSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7SUFDNUMsSUFBSUMsZ0JBQWdCLEdBQUcsc0VBQXNFO0lBRTdGLE9BQU9DLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ1ZDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRUosZ0JBQWdCO01BQ3JCSyxXQUFXLEVBQUUsaUJBQWlCO01BQzlCQyxJQUFJLEVBQUVSLEdBQUc7TUFDVFMsUUFBUSxFQUFFLE1BQU07TUFDaEJDLE9BQU8sRUFBRSxTQUFBQSxRQUFVRixJQUFJLEVBQUVHLFVBQVUsRUFBRUMsR0FBRyxFQUFFO1FBQ3RDLElBQUlBLEdBQUcsQ0FBQ0MsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUNwQlosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxLQUFLO1lBQUVDLEtBQUssRUFBRVAsSUFBSTtZQUFFUSxPQUFPLEVBQUUseUJBQXlCLEdBQUdKLEdBQUcsQ0FBQ0M7VUFBTSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxNQUFNO1VBQ0haLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsSUFBSTtZQUFFRSxPQUFPLEVBQUVSLElBQUk7WUFBRU8sS0FBSyxFQUFFO1VBQUUsQ0FBQyxDQUFDO1FBQ3REO01BQ0osQ0FBQztNQUNEQSxLQUFLLEVBQUUsU0FBQUEsTUFBVUEsTUFBSyxFQUFFO1FBQ3BCZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxNQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RCxDQUFDO01BQ0RDLElBQUksRUFBRSxTQUFBQSxLQUFVRixLQUFLLEVBQUU7UUFDbkJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLEtBQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hEO0lBQ0osQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELE9BQU90QixZQUFZO0FBRXZCLENBQUMifQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-gpml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _readOnlyError(name) { throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\"); }\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n  function sbgnmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n  sbgnmlToJson.insertedNodes = {};\n  sbgnmlToJson.map = undefined;\n  sbgnmlToJson.calculatedCompoundPadding = undefined;\n  sbgnmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == 'compartment') {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          'x': parseFloat(bbox.x),\n          'y': parseFloat(bbox.y),\n          'w': parseFloat(bbox.w),\n          'h': parseFloat(bbox.h),\n          'id': compartment.id\n        });\n      }\n    }\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n      return 0;\n    });\n    return compartments;\n  };\n  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n    return false;\n  };\n  sbgnmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h;\n    //if it is simple node return bbox\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has('extraInfo')) {\n      // if newt file then extrainfo on the compound node exists\n      var xml = ele.extension.get('extraInfo');\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result.extraInfo;\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\r\n       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\r\n         styles = this.map.extension.get('renderInformation').listOfStyles;\r\n         if(styles  !== undefined){\r\n           styles = styles.styles;\r\n         }\r\n       }\r\n      */\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\r\n       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n\n      var padding = this.calculateElementPadding(ele);\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false;\n      // Traverse the other children and update the extreme values\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode);\n        //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\r\n           borderWidth = childStyle[0].renderGroup.strokeWidth;\r\n         } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n        });\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2;\n      // The sizes of children bbox are determined by the difference between the extreme coordinates\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n      childrenBboxH = maxBottom - minTop + 2;\n\n      // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n        if (ele.minWidthBiasLeft < 0) {\n          ele.minWidthBiasLeft = 0;\n          ele.minWidthBiasRight = 100;\n        }\n        if (ele.minWidthBiasRight < 0) {\n          ele.minWidthBiasRight = 0;\n          ele.minWidthBiasLeft = 100;\n        }\n      }\n\n      // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n        if (ele.minHeightBiasTop < 0) {\n          ele.minHeightBiasTop = 0;\n          ele.minHeightBiasBottom = 100;\n        }\n        if (ele.minHeightBiasBottom < 0) {\n          ele.minHeightBiasBottom = 0;\n          ele.minHeightBiasTop = 100;\n        }\n      }\n\n      // set positions as center\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n    return bbox;\n  };\n  sbgnmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding;\n    // } \n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n      });\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n    return padding;\n  };\n  sbgnmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n    return children;\n  };\n  sbgnmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n\n    // if a biological activity node has no unit of info, it must be a BA plain\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable') {\n        continue;\n      }\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n      if (glyph.class_ === 'unit of information') {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case 'unspecified entity':\n              parent[\"class\"] = \"BA unspecified entity\";\n              break;\n            case 'simple chemical':\n              parent[\"class\"] = \"BA simple chemical\";\n              break;\n            case 'macromolecule':\n              parent[\"class\"] = \"BA macromolecule\";\n              break;\n            case 'nucleic acid feature':\n              parent[\"class\"] = \"BA nucleic acid feature\";\n              break;\n            case 'perturbation':\n              parent[\"class\"] = \"BA perturbing agent\";\n              break;\n            case 'complex':\n              parent[\"class\"] = \"BA complex\";\n              break;\n          }\n        }\n        infobox.label = {\n          'text': glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === 'state variable') {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      }\n      //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]);\n      //classes.StateVariable.setAnchorSide(infobox);\n      stateAndInfoArray.push(infobox);\n    }\n    return stateAndInfoArray;\n  };\n  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = '';\n\n      // add compartment according to geometry\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          'x': parseFloat(ele.bbox.x),\n          'y': parseFloat(ele.bbox.y),\n          'w': parseFloat(ele.bbox.w),\n          'h': parseFloat(ele.bbox.h),\n          'id': ele.id\n        };\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {};\n\n    // add id information\n    nodeObj.id = ele.id;\n    // add node bounding box information\n    nodeObj.bbox = self.bboxProp(ele);\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    }\n\n    // add class information\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    }\n    // add label information\n    nodeObj.label = ele.label && ele.label.text || undefined;\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    }\n    // add state and info box information\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj);\n    // adding parent information\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments);\n\n    // add language info, this will always be the mapType if not hybrid\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    }\n\n    // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n\n    // add clone information\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    }\n\n    // add port information\n    var ports = [];\n    var portElements = ele.ports;\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100;\n\n      // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      }\n\n      // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      }\n\n      // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"];\n    // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Multiply the bbox with the calculated ratio\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n\n  /**\r\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\r\n  */\n  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    }\n\n    // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0;\n    // handle controlled properties\n    for (var fullQualifier in resources) {\n      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    }\n    // handle custom properties\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n    return cyObject;\n  };\n  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id;\n\n    // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n    this.insertedNodes[elId] = true;\n    var self = this;\n    // add complex nodes here\n\n    var eleClass = ele.class_;\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n  sbgnmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n  sbgnmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n    return glyphs;\n  };\n  sbgnmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n    return arcs;\n  };\n  sbgnmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n  sbgnmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n    if (targetExists) {\n      targetNodeId = target;\n    }\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n    return anchorPointPositions;\n  };\n  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_;\n\n    // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n    var curveStyle = \"bezier\";\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n    var isSifMetaEdge;\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    }\n\n    // add language info, this will always be the mapType if not hybrid\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF';\n      }\n    }\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    }\n    // get all background image id references to their value\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    }\n\n    // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup;\n\n      // convert color references\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      }\n      // convert background image references\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n      var idList = style.idList.split(' ');\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      /*  'background-opacity': {\r\n         'converter': convertHexColor,\r\n         'extra-field': 'opacity'\r\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    }\n\n    // apply the style to list and overwrite the default style\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n        if (!memberStyle) {\n          return;\n        }\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n            setStyleProp(member, propName, fieldVal);\n          }\n        });\n\n        // if the member is a node\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n  sbgnmlToJson.mapPropertiesToObj = function () {\n    if (this.map.extension && this.map.extension.has('mapProperties')) {\n      // render extension was found\n      var xml = this.map.extension.get('mapProperties');\n      var obj;\n      parseString(xml, function (err, result) {\n        obj = result;\n      });\n      return obj;\n    } else {\n      return {\n        mapProperties: {\n          compoundPadding: mainUtilities.getCompoundPadding()\n        }\n      };\n    }\n  };\n  sbgnmlToJson.convert = function (xmlObject, urlParams) {\n    var self = this;\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n    elementUtilities.fileFormat = 'sbgnml';\n    var sbgn;\n    try {\n      var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n    var map;\n    if (sbgn.maps.length < 1) {\n      // empty sbgn\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      map = sbgn.maps[0]; // take first map of the file as the main map\n    }\n    this.map = map;\n    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);\n    var compartments = self.getAllCompartments(map.glyphs);\n    var glyphs = map.glyphs;\n    var arcs = map.arcs;\n    var i;\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n\n      // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments\n      // store glyph members of compartments here.\n      var compartmentRef = glyph.compartmentRef;\n      if (glyph.class_ === 'compartment') {\n        if (compartmentChildrenMap[glyph.id] === undefined) {\n          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;\n        }\n        glyph.glyphMembers = compartmentChildrenMap[glyph.id];\n      }\n      if (compartmentRef) {\n        if (compartmentChildrenMap[compartmentRef] === undefined) {\n          compartmentChildrenMap[compartmentRef] = [];\n        }\n        compartmentChildrenMap[compartmentRef].push(glyph);\n      }\n    }\n    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;\n    if (urlParams && urlParams.compoundPadding) {\n      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));\n    } else if (!map.extension) {\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        childNodes = glyph.glyphMembers.filter(function (child) {\n          return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n        });\n        if (childNodes.length > 0) {\n          // compound node\n          var hasMin = false;\n          for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            var childClass = childNode.class_;\n            if (childClass === \"source and sink\" || childClass === \"emptyset\") {\n              \"empty set\", _readOnlyError(\"childClass\");\n            }\n            var borderWidth = elementUtilities.getDefaultProperties(childClass)[\"border-width\"];\n            var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n              return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n            });\n            if (stateAndInfos.length > 0) {\n              for (var k = 0; k < stateAndInfos.length; k++) {\n                var stateBbox = stateAndInfos[k].bbox;\n                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;\n                  hasMin = true;\n                }\n                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;\n                  hasMin = true;\n                }\n              }\n            }\n            var childNodeBbox = childNode.bbox;\n            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;\n            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;\n            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;\n            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;\n            if (left < minDistanceToChildren) {\n              minDistanceToChildren = left;\n              hasMin = true;\n            }\n            if (right < minDistanceToChildren) {\n              minDistanceToChildren = right;\n              hasMin = true;\n            }\n            if (top < minDistanceToChildren) {\n              minDistanceToChildren = top;\n              hasMin = true;\n            }\n            if (bottom < minDistanceToChildren) {\n              minDistanceToChildren = bottom;\n              hasMin = true;\n            }\n          }\n          if (hasMin) {\n            if (glyph.class_ == \"complex\") {\n              var stateAndInfos = glyph.glyphMembers.filter(function (child) {\n                return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n              });\n              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {\n                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                var hasTopBottomInfo = false;\n                stateAndInfos.forEach(function (stateAndInfo) {\n                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {\n                    hasTopBottomInfo = true;\n                  }\n                });\n                if (hasTopBottomInfo) {\n                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                }\n              } else if (stateAndInfos.length > 0) {\n                minDistanceToChildren -= 2;\n              }\n            } else {\n              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;\n            }\n          }\n        }\n      }\n      minDistanceToChildren = Math.round(minDistanceToChildren);\n      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)\n      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {\n        newPadding = 0;\n      }\n      mainUtilities.setCompoundPadding(newPadding);\n    } else {\n      mainUtilities.setCompoundPadding(Number(self.mapPropertiesToObj().mapProperties.compoundPadding));\n    }\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);\n    }\n    for (i = 0; i < arcs.length; i++) {\n      var arc = arcs[i];\n      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);\n    }\n    if (map.extension && map.extension.has('renderInformation')) {\n      // render extension was found\n      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);\n    }\n    var cytoscapeJsGraph = {};\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    this.insertedNodes = {};\n    var shouldDisablePorts = false;\n    cytoscapeJsGraph.nodes.forEach(function (node) {\n      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {\n        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data[\"class\"]).width;\n        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data[\"class\"]).height;\n        // node.data.bbox.x = 15;     \n        // node.data.bbox.y = 10; \n      }\n      node.data.ports.forEach(function (port) {\n        if (isNaN(port.x) || isNaN(port.y)) {\n          shouldDisablePorts = true;\n        }\n      });\n    });\n    if (shouldDisablePorts) {\n      graphUtilities.disablePorts();\n    }\n    //getDefaultProperties\n    //elementUtilities.nodeTypes.forEach(function(type){\n    //  console.log(elementUtilities.getDefaultProperties(type));\n    //});\n\n    //console.log(cytoscapeJsGraph);\n    //console.log( elementUtilities.nodeTypes);\n    return cytoscapeJsGraph;\n  };\n  sbgnmlToJson.doValidation = function (xmlString) {\n    var errors = [];\n    try {\n      errors = libsbgnjs.Sbgn.doValidation(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not do validation. \" + err);\n    }\n    return errors;\n  };\n  return sbgnmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToSbml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToSbml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/xml; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1zYm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvU2JtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLXNibWwtY29udmVydGVyLWZhY3RvcnkuanM/NGVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYmdubWxUb1NibWwocGFyYW0pIHtcclxuICAgICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzYmdubWxUb1NibWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JHTi1NTDpTQk1MXCI7XHJcblxyXG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC94bWw7IGNoYXJzZXQ9VVRGLThcIixcclxuICAgICAgICAgICAgZGF0YTogeG1sLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGRhdGEsIG1lc3NhZ2U6IFwiSW52YWxpZCByZXNwb25zZSBjb2RlOiBcIiArIHhoci5zdGF0dXN9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzYmdubWxUb1NibWw7XHJcblxyXG59XHJcbiAgIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUV6QixJQUFJQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXRDLFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRTtJQUN6QkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFxQjtJQUMxQ0osZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNyQztFQUdBSixZQUFZLENBQUNLLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtJQUM1QyxJQUFJQyxnQkFBZ0IsR0FBRyxzRUFBc0U7SUFFN0YsT0FBT0MsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDVkMsSUFBSSxFQUFFLE1BQU07TUFDWkMsR0FBRyxFQUFFSixnQkFBZ0I7TUFDckJLLFdBQVcsRUFBRSx5QkFBeUI7TUFDdENDLElBQUksRUFBRVIsR0FBRztNQUNUUyxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsT0FBTyxFQUFFLFNBQUFBLFFBQVVGLElBQUksRUFBRUcsVUFBVSxFQUFFQyxHQUFHLEVBQUU7UUFDdEMsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLEtBQUssR0FBRyxFQUFFO1VBQ3BCWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLEtBQUs7WUFBRUMsS0FBSyxFQUFFUCxJQUFJO1lBQUVRLE9BQU8sRUFBRSx5QkFBeUIsR0FBR0osR0FBRyxDQUFDQztVQUFNLENBQUMsQ0FBQztRQUMzRixDQUFDLE1BQU07VUFDSFosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxJQUFJO1lBQUVFLE9BQU8sRUFBRVIsSUFBSTtZQUFFTyxLQUFLLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFDdEQ7TUFDSixDQUFDO01BQ0RBLEtBQUssRUFBRSxTQUFBQSxNQUFVQSxNQUFLLEVBQUU7UUFDcEJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLE1BQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hELENBQUM7TUFDREMsSUFBSSxFQUFFLFNBQUFBLEtBQVVGLEtBQUssRUFBRTtRQUNuQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsS0FBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQ7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsT0FBT3RCLFlBQVk7QUFFdkIsQ0FBQyJ9\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNibWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2JtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/NGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgZnVuY3Rpb24gc2JtbFRvU2Jnbm1sKHBhcmFtKSB7XHJcbiAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICB9XHJcblxyXG5cclxuICBzYm1sVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBjb252ZXJzaW9uQXBpVXJsID0gXCJodHRwczovL21pbmVydmEtc2VydmljZS5sY3NiLnVuaS5sdS9taW5lcnZhL2FwaS9jb252ZXJ0L1NCTUw6U0JHTi1NTFwiO1xyXG5cclxuICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICB1cmw6IGNvbnZlcnNpb25BcGlVcmwsXHJcbiAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94bWxcIixcclxuICAgICAgICAgIGRhdGE6IHhtbCxcclxuICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcclxuICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IHRydWUsIG1lc3NhZ2U6IGRhdGEsIGVycm9yOiBcIlwifSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgfSlcclxuICAgICAgXHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2JtbFRvU2Jnbm1sO1xyXG5cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRTFCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQzNCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFlBQVksQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBQzVDLElBQUlDLGdCQUFnQixHQUFHLHNFQUFzRTtJQUU3RixPQUFPQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNWQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUVKLGdCQUFnQjtNQUNyQkssV0FBVyxFQUFFLGlCQUFpQjtNQUM5QkMsSUFBSSxFQUFFUixHQUFHO01BQ1RTLFFBQVEsRUFBRSxNQUFNO01BQ2hCQyxPQUFPLEVBQUUsU0FBQUEsUUFBVUYsSUFBSSxFQUFFRyxVQUFVLEVBQUVDLEdBQUcsRUFBRTtRQUN0QyxJQUFJQSxHQUFHLENBQUNDLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDcEJaLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsS0FBSztZQUFFQyxLQUFLLEVBQUVQLElBQUk7WUFBRVEsT0FBTyxFQUFFLHlCQUF5QixHQUFHSixHQUFHLENBQUNDO1VBQU0sQ0FBQyxDQUFDO1FBQzNGLENBQUMsTUFBTTtVQUNIWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLElBQUk7WUFBRUUsT0FBTyxFQUFFUixJQUFJO1lBQUVPLEtBQUssRUFBRTtVQUFFLENBQUMsQ0FBQztRQUN0RDtNQUNKLENBQUM7TUFDREEsS0FBSyxFQUFFLFNBQUFBLE1BQVVBLE1BQUssRUFBRTtRQUNwQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsTUFBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQsQ0FBQztNQUNEQyxJQUFJLEVBQUUsU0FBQUEsS0FBVUYsS0FBSyxFQUFFO1FBQ25CZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxLQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RDtJQUNKLENBQUMsQ0FBQztFQUVOLENBQUM7RUFFRCxPQUFPdEIsWUFBWTtBQUVyQixDQUFDIn0=\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nfunction strToSet(str, splitBy) {\n  var set = {};\n  var list = str ? str.split(splitBy) : [];\n  list.forEach(function (member) {\n    set[member] = true;\n  });\n  return set;\n}\nfunction getEmptyGraphData() {\n  return {\n    nodes: [],\n    edges: []\n  };\n}\nmodule.exports = function () {\n  var elementUtilities;\n  function sifToJson(param) {\n    elementUtilities = param.elementUtilities;\n  }\n  sifToJson.initGraphVariables = function () {\n    sifToJson.graphData = getEmptyGraphData();\n    sifToJson.nameToNode = {};\n    sifToJson.keyToEdge = {};\n    // set of nodes that are connected to an edge\n    sifToJson.nodeWithSpecifiedClass = {};\n  };\n  sifToJson.defaultNodeType = 'SIF macromolecule';\n  sifToJson.mergeGraphData = function () {\n    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));\n  };\n  sifToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'sif';\n    elementUtilities.mapType = 'SIF';\n    sifToJson.initGraphVariables();\n    if (graphText == undefined) {\n      return sifToJson.graphData;\n    }\n    var lines = tdParser.getLinesArray(graphText.toString());\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n\n      // line represents a node\n      if (tabs.length === 1) {\n        var nodeName = tabs[0];\n        // create the node if does not exist yet\n        // if the node is just created it will have the default node class\n        sifToJson.getOrCreateNode(nodeName);\n      }\n      // line represents an edge and the connected nodes\n      else {\n        var srcName = tabs[0];\n        var edgeType = tabs[1];\n        var tgtName = tabs[2];\n        var pcIDSet = strToSet(tabs[3], /;| /);\n        var siteLocSet = strToSet(tabs[4], ';');\n        var srcClass = sifToJson.getNodeClass(edgeType, 'src');\n        var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt');\n\n        // create nodes if they do not exist yet\n        // if the node already exists the node type and so the default values\n        // will be updated\n        sifToJson.getOrCreateNode(srcName, srcClass);\n        sifToJson.getOrCreateNode(tgtName, tgtClass);\n\n        // create the edge if it does not exist yet\n        sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);\n      }\n    });\n    return sifToJson.mergeGraphData();\n  };\n  sifToJson.getNodeByName = function (name) {\n    return sifToJson.nameToNode[name];\n  };\n  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {\n    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n    return sifToJson.keyToEdge[key];\n  };\n  sifToJson.mapNodeToName = function (node, name) {\n    sifToJson.nameToNode[name] = node;\n  };\n  sifToJson.mapEdgeToKey = function (edge, key) {\n    sifToJson.keyToEdge[key] = edge;\n  };\n  sifToJson.calculateEdgeKey = function (src, type, tgt) {\n    return [src, type, tgt].join(' ');\n  };\n  sifToJson.getOrCreateNode = function (name, className) {\n    // save if class name parameter is set\n    var classNameSpecified = !!className;\n    className = className || sifToJson.defaultNodeType;\n    var node = sifToJson.getNodeByName(name);\n    var defaults = elementUtilities.getDefaultProperties(className);\n    var updateWithDefaults = function updateWithDefaults() {\n      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);\n      node.data.bbox.h = defaults.height;\n      if (elementUtilities.canHaveSBGNLabel(className)) {\n        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');\n        var fontSize;\n        var fontFamily = node.data['font-family'];\n        if (isDynamicLabel) {\n          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');\n          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n          var obj = {\n            height: node.data.bbox.h,\n            \"class\": className\n          };\n          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);\n        } else {\n          fontSize = node.data['font-size'];\n        }\n        var max = 250;\n        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {\n          max: max\n        });\n      } else {\n        node.data.bbox.w = defaults.width;\n      }\n    };\n    if (node == undefined) {\n      var uid = elementUtilities.generateNodeId();\n      node = {};\n      node.data = {\n        id: uid,\n        label: name,\n        \"class\": className,\n        bbox: {\n          x: 0,\n          y: 0\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      updateWithDefaults();\n      sifToJson.mapNodeToName(node, name);\n      sifToJson.graphData.nodes.push(node);\n    }\n    // if class name parameter is set and the already existing node has a different\n    // class name check if the existing node has a specified class or just used the\n    // default one because it was not coming from an edge.\n    // In first case give a warning and do not update the class,\n    // in second case update the class and the node data with defaults\n    else if (classNameSpecified && node.data[\"class\"] !== className) {\n      if (sifToJson.nodeWithSpecifiedClass[name]) {\n        console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data[\"class\"]);\n      } else {\n        node.data[\"class\"] = className;\n        updateWithDefaults();\n      }\n    }\n    if (classNameSpecified) {\n      sifToJson.nodeWithSpecifiedClass[name] = true;\n    }\n    return node;\n  };\n  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {\n    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);\n    if (edge == undefined) {\n      var uid = elementUtilities.generateEdgeId();\n      var source = sifToJson.getNodeByName(srcName).data.id;\n      var target = sifToJson.getNodeByName(tgtName).data.id;\n      edge = {};\n      edge.data = {\n        id: uid,\n        pcIDSet: pcIDSet,\n        siteLocSet: siteLocSet,\n        source: source,\n        target: target,\n        \"class\": type\n      };\n      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);\n      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n      sifToJson.mapEdgeToKey(edge, key);\n      sifToJson.graphData.edges.push(edge);\n    }\n    return edge;\n  };\n  sifToJson.getNodeClass = function (edgeType, role) {\n    var type;\n    switch (edgeType) {\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';\n        break;\n      case 'consumption-controled-by':\n      case 'chemical-affects':\n        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';\n        break;\n      case 'reacts-with':\n      case 'used-to-produce':\n        type = 'SIF simple chemical';\n        break;\n      default:\n        type = 'SIF macromolecule';\n        break;\n    }\n    return type;\n  };\n  sifToJson.getMapProperty = function (propName) {\n    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];\n  };\n  sifToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: {\n        dynamicLabelSize: 'large',\n        adjustNodeLabelFontSizeAutomatically: true\n      }\n    };\n  };\n  return sifToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sif-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function tdParser() {}\n;\ntdParser.getTabsArray = function (line) {\n  return line.split('\\t');\n};\ntdParser.getLinesArray = function (content) {\n  var separator = /\\r?\\n|\\r/;\n  var notEmpty = function notEmpty(line) {\n    return line !== '';\n  };\n  return content.split(separator).filter(notEmpty);\n};\nmodule.exports = tdParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3RhYi1kZWxpbWV0ZWQtcGFyc2VyLmpzIiwibmFtZXMiOlsidGRQYXJzZXIiLCJnZXRUYWJzQXJyYXkiLCJsaW5lIiwic3BsaXQiLCJnZXRMaW5lc0FycmF5IiwiY29udGVudCIsInNlcGFyYXRvciIsIm5vdEVtcHR5IiwiZmlsdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdGFiLWRlbGltZXRlZC1wYXJzZXIuanM/MGVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0ZFBhcnNlcigpIHtcclxufTtcclxuXHJcbnRkUGFyc2VyLmdldFRhYnNBcnJheSA9IGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gIHJldHVybiBsaW5lLnNwbGl0KCAnXFx0JyApO1xyXG59O1xyXG5cclxudGRQYXJzZXIuZ2V0TGluZXNBcnJheSA9IGZ1bmN0aW9uKCBjb250ZW50ICkge1xyXG4gIHZhciBzZXBhcmF0b3IgPSAvXFxyP1xcbnxcXHIvO1xyXG4gIHZhciBub3RFbXB0eSA9IGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gICAgcmV0dXJuIGxpbmUgIT09ICcnO1xyXG4gIH07XHJcbiAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoIHNlcGFyYXRvciApLmZpbHRlciggbm90RW1wdHkgKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gdGRQYXJzZXI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsUUFBUUEsQ0FBQSxFQUFHLENBQ3BCO0FBQUM7QUFFREEsUUFBUSxDQUFDQyxZQUFZLEdBQUcsVUFBVUMsSUFBSSxFQUFHO0VBQ3ZDLE9BQU9BLElBQUksQ0FBQ0MsS0FBSyxDQUFFLElBQUssQ0FBQztBQUMzQixDQUFDO0FBRURILFFBQVEsQ0FBQ0ksYUFBYSxHQUFHLFVBQVVDLE9BQU8sRUFBRztFQUMzQyxJQUFJQyxTQUFTLEdBQUcsVUFBVTtFQUMxQixJQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBYUwsSUFBSSxFQUFHO0lBQzlCLE9BQU9BLElBQUksS0FBSyxFQUFFO0VBQ3BCLENBQUM7RUFDRCxPQUFPRyxPQUFPLENBQUNGLEtBQUssQ0FBRUcsU0FBVSxDQUFDLENBQUNFLE1BQU0sQ0FBRUQsUUFBUyxDQUFDO0FBQ3RELENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdWLFFBQVEifQ==\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimeted-parser.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities;\n  function tdToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n  }\n  tdToJson.map = undefined;\n  tdToJson.edgeTypes = {\n    'positive influence': true,\n    'negative influence': true,\n    'unknown influence': true,\n    'necassary influence': true,\n    'logic arcs': true,\n    'equivalance arcs': true\n  };\n  tdToJson.nodeTypes = {\n    'biological activity': 'BA plain',\n    'macromolecule': 'BA macromolecule',\n    'complex': 'BA complex',\n    'simple chemical': 'BA simple chemical',\n    'unspecified entity': 'BA unspecified entity',\n    'nucleic acid feature': 'BA nucleic acid feature',\n    'perturbing agent': 'BA perturbing agent',\n    'phenotype': 'phenotype',\n    'compartment': 'compartment',\n    'submap': 'submap',\n    'tag': 'tag',\n    'and': 'and',\n    'or': 'or',\n    'not': 'not',\n    'delay': 'delay'\n  };\n  tdToJson.validateNodeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.nodeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.validateEdgeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.edgeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.convertTypeToClass = function (ele, type, isNode) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    ele.data[\"class\"] = isNode ? this.nodeTypes[_type] : _type;\n  };\n  tdToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: this.map.mapProperties\n    };\n  };\n\n  /**\r\n   * Adds states and infobox information to given node\r\n   * @param node : a node object\r\n   */\n  tdToJson.addInfoBox = function (node) {\n    var _class = node.data[\"class\"];\n    if (_class.startsWith(\"BA\") && _class != \"BA plain\") {\n      var unitOfInformation = classes.UnitOfInformation.construct();\n      unitOfInformation.parent = node.data.id;\n      // file format does not contain bbox information, hence define them below\n      unitOfInformation.bbox = {\n        x: 25,\n        y: -50,\n        w: 30,\n        h: 12\n      };\n      classes.UnitOfInformation.setAnchorSide(unitOfInformation);\n      node.data.statesandinfos = [unitOfInformation];\n    } else {\n      node.data.statesandinfos = [];\n    }\n  };\n  tdToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'td';\n    if (graphText === undefined) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      var map = {};\n      var nodes = []; //Holds nodes\n      var edges = []; //Holds edges\n      this.map = map;\n\n      //Define the line separator\n      // \\r\\n, \\n and \\r line separators\n      var separator = /\\r?\\n|\\r/;\n      var lines = graphText.toString().split(separator);\n      var graphDataIndex = 4; //graph data starts at index 4\n      var edgesStartIndex = -1; //unkown at the begining\n\n      var formatVersion = lines[0];\n      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {\n        throw \"Wrong file format!\";\n      }\n      if (formatVersion.length == 10) {\n        formatVersion = formatVersion + \" 1.0\"; //default 1.0\n      }\n      var title = lines[1];\n      var description = lines[2];\n      //Second element of the format version specifies map language\n      var mapLanguage = formatVersion.toString().split(\" \")[1];\n      elementUtilities.mapType = mapLanguage;\n      map.mapProperties = {};\n      map.mapProperties.mapDescription = description;\n      map.mapProperties.mapName = title;\n      //start to parse the graph\n      for (var i = graphDataIndex; i < lines.length; i++) {\n        //blank line indicates that nodes are finished\n        //so continue with edges\n        if (lines[i].length === 0 || lines[i] === \"\") {\n          while (lines[i] === \"\" && i < lines.length) {\n            i++;\n          }\n          edgesStartIndex = i + 2;\n          break;\n        }\n\n        //Parse the node data\n        var data = lines[i].toString().split('\\t'); //each data seperated by tab\n        var nodeName = data[0];\n\n        //If there is no blank line\n        if (nodeName.toString().toLowerCase() == '--edge_id') {\n          edgesStartIndex = i + 1;\n          break;\n        }\n        var nodeId = data[1];\n        var nodeType = data[2];\n        var parentID = data[3];\n        var posX = data.length > 4 ? data[4] : \"0\"; //if posX not given\n        var posY = data.length > 5 ? data[5] : \"0\"; //if posY not given\n        var nodeWidth = data.length > 6 ? data[6] : undefined;\n        var nodeHeight = data.length > 7 ? data[7] : undefined;\n\n        //add parsed Node\n        var newNode = {\n          group: 'nodes',\n          data: {\n            id: nodeId,\n            label: nodeName,\n            ports: [],\n            bbox: {\n              x: parseFloat(posX),\n              y: parseFloat(posY),\n              w: nodeWidth,\n              h: nodeHeight\n            }\n          }\n        };\n        if (this.validateNodeType(nodeType)) {\n          this.convertTypeToClass(newNode, nodeType, true);\n          this.addInfoBox(newNode);\n        } else {\n          throw \"Node type mismatched...\";\n        }\n        if (parentID != '-1') {\n          newNode.data.parent = parentID;\n        }\n        if (newNode.data[\"class\"]) {\n          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data[\"class\"]);\n          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {\n            var defaults = elementUtilities.getDefaultProperties(newNode.data[\"class\"]);\n            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;\n            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;\n          }\n        }\n        nodes.push(newNode);\n      }\n\n      //Start parsing edges\n      for (var i = edgesStartIndex; i < lines.length; i++) {\n        //EOF finish loop\n        if (lines[i].length === 0) {\n          break;\n        }\n        var data = lines[i].toString().split('\\t');\n        var edgeID = data[0];\n        var edgeSource = data[1];\n        var edgeTarget = data[2];\n        var edgeType = data[3];\n        var newEdge = {\n          group: 'edges',\n          data: {\n            id: edgeID,\n            source: edgeSource,\n            target: edgeTarget\n          }\n        };\n        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {\n          throw \"Edge Type mismatched...\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data[\"class\"]);\n        edges.push(newEdge);\n      }\n      var jsGraph = {};\n      jsGraph.nodes = nodes;\n      jsGraph.edges = edges;\n      return jsGraph;\n    }\n  };\n  return tdToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimited-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*\r\n * Text utilities for common usage\r\n */\n\nvar textUtilities = {\n  // same purpose as previous one, but with clearer responsibility\n  truncate: function truncate(text, font, width) {\n    text = text + \"\";\n    var context = document.createElement('canvas').getContext(\"2d\");\n    context.font = font;\n    // check trivial case first, when entire text is already small enough\n    if (context.measureText(text).width < width) {\n      return text;\n    } else {\n      var ellipsis = \"..\";\n      // if ellipsis alone is already too large\n      if (context.measureText(ellipsis).width > width) {\n        return \"\";\n      }\n      var finalLength; // this should always have a value after the loop\n      for (var i = 0; i < text.length; i++) {\n        var subtext = text.substring(0, i) + ellipsis;\n        if (context.measureText(subtext).width > width) {\n          // we're too far, take the previous index\n          finalLength = i > 0 ? i - 1 : 0;\n          break;\n        }\n      }\n      return text.substring(0, finalLength) + ellipsis;\n    }\n  },\n  // ensure that returned string follows xsd:ID standard\n  // should follow r'^[a-zA-Z_][\\w.-]*$'\n  getXMLValidId: function getXMLValidId(originalId) {\n    var newId = \"\";\n    var xmlValidRegex = /^[a-zA-Z_][\\w.-]*$/;\n    if (!xmlValidRegex.test(originalId)) {\n      // doesn't comply\n      newId = originalId;\n      newId = newId.replace(/[^\\w.-]/g, \"\");\n      if (!xmlValidRegex.test(newId)) {\n        // still doesn't comply\n        newId = \"_\" + newId;\n        if (!xmlValidRegex.test(newId)) {\n          // normally we should never enter this\n          // if for some obscure reason we still don't comply, throw error.\n          throw new Error(\"Can't make identifer comply to xsd:ID requirements: \" + newId);\n        }\n      }\n      return newId;\n    } else {\n      return originalId;\n    }\n  },\n  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {\n    var DEFAULT_MARGIN = 5;\n    var lines = content.split(\"\\n\");\n    var context = document.createElement('canvas').getContext('2d');\n    // should not make type check so '===' should not be used here\n    var shouldAppend = parseFloat(fontSize) == fontSize;\n    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;\n    context.font = validFontSize + ' ' + fontFamily;\n    var width = 0;\n    lines.forEach(function (line) {\n      var w = context.measureText(line).width;\n      if (w > width) {\n        width = w;\n      }\n    });\n    var margin = options && options.margin;\n    if (margin == null) {\n      margin = DEFAULT_MARGIN;\n    }\n    width += 2 * margin;\n    var min = options && options.min;\n    var max = options && options.max;\n    if (min != null && width < min) {\n      width = min;\n    } else if (max != null && width > max) {\n      width = max;\n    }\n    return width;\n  },\n  FromKebabToCamelCase: function FromKebabToCamelCase(input) {\n    return input.replace(/(-\\w)/g, function (m) {\n      return m[1].toUpperCase();\n    });\n  },\n  FromCamelToKebabCase: function FromCamelToKebabCase(input) {\n    return input.replace(/[\\w]([A-Z])/g, function (m) {\n      return m[0] + \"-\" + m[1];\n    }).toLowerCase();\n  }\n};\nmodule.exports = textUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/text-utilities.js\n");

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n* Commonly needed UI Utilities\r\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options;\n  function uiUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n  }\n  uiUtilities.startSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    if ($('.' + className).length === 0) {\n      var containerWidth = $(options.networkContainerSelector).width();\n      var containerHeight = $(options.networkContainerSelector).height();\n      $(options.networkContainerSelector + ':parent').prepend('<div style=\"position: absolute; z-index: 9999999; left: 45%; top: ' + containerHeight / 2 + 'px;\" class=\"' + className + '-wrapper\">' + '<div style=\"margin: 0 auto; margin-bottom: 5px; width:50px\"><i class=\"fa fa-spinner fa-spin fa-3x fa-fw ' + className + '\"></i></div>' + '<div style=\"width: 220px; height 20%\"><i class=\"' + className + '-text\">Take a sip of your coffee while you wait</i></div>' + '</div>');\n      $(\".\" + className + '-text').fadeOut(0);\n    }\n  };\n  uiUtilities.showSpinnerText = function (className) {\n    $(\".\" + className + '-text').fadeIn(0);\n  };\n  uiUtilities.endSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    if ($('.' + className + '-wrapper').length > 0) {\n      $('.' + className + '-wrapper').remove();\n    }\n  };\n  return uiUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VpLXV0aWxpdGllcy1mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMseURBQWlCLENBQUM7QUFDN0MsSUFBSUMsSUFBSSxHQUFHRixZQUFZLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLElBQUlDLE1BQU0sR0FBR0MsQ0FBQyxHQUFHSCxJQUFJLENBQUNFLE1BQU07QUFFNUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFFNUIsSUFBSUMsZUFBZTtFQUNuQixJQUFJQyxPQUFPO0VBRVgsU0FBU0MsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFO0lBQzNCSCxlQUFlLEdBQUdHLEtBQUssQ0FBQ0gsZUFBZTtJQUN2Q0MsT0FBTyxHQUFHRCxlQUFlLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0VBQ3hDO0VBRUFGLFdBQVcsQ0FBQ0csWUFBWSxHQUFHLFVBQVVDLFNBQVMsRUFBRTtJQUM5QyxJQUFJLENBQUNBLFNBQVMsRUFBRTtNQUNkQSxTQUFTLEdBQUcsZUFBZTtJQUM3QjtJQUVBLElBQUlULENBQUMsQ0FBQyxHQUFHLEdBQUdTLFNBQVMsQ0FBQyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ25DLElBQUlDLGNBQWMsR0FBR1gsQ0FBQyxDQUFDSSxPQUFPLENBQUNRLHdCQUF3QixDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO01BQ2hFLElBQUlDLGVBQWUsR0FBR2QsQ0FBQyxDQUFDSSxPQUFPLENBQUNRLHdCQUF3QixDQUFDLENBQUNHLE1BQU0sQ0FBQyxDQUFDO01BQ2xFZixDQUFDLENBQUNJLE9BQU8sQ0FBQ1Esd0JBQXdCLEdBQUcsU0FBUyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxvRUFBb0UsR0FBR0YsZUFBZSxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUNMLFNBQVMsR0FBQyxZQUFZLEdBQzFMLDBHQUEwRyxHQUFHQSxTQUFTLEdBQUcsY0FBYyxHQUN2SSxrREFBa0QsR0FBR0EsU0FBUyxHQUFHLDJEQUEyRCxHQUM1SCxRQUFRLENBQUM7TUFDVFQsQ0FBQyxDQUFDLEdBQUcsR0FBQ1MsU0FBUyxHQUFDLE9BQU8sQ0FBQyxDQUFDUSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JDO0VBQ0YsQ0FBQztFQUNEWixXQUFXLENBQUNhLGVBQWUsR0FBRyxVQUFTVCxTQUFTLEVBQ2hEO0lBQ0VULENBQUMsQ0FBQyxHQUFHLEdBQUNTLFNBQVMsR0FBQyxPQUFPLENBQUMsQ0FBQ1UsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNwQyxDQUFDO0VBQ0RkLFdBQVcsQ0FBQ2UsVUFBVSxHQUFHLFVBQVVYLFNBQVMsRUFBRTtJQUM1QyxJQUFJLENBQUNBLFNBQVMsRUFBRTtNQUNkQSxTQUFTLEdBQUcsZUFBZTtJQUM3QjtJQUVBLElBQUlULENBQUMsQ0FBQyxHQUFHLEdBQUdTLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUM5Q1YsQ0FBQyxDQUFDLEdBQUcsR0FBR1MsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDWSxNQUFNLENBQUMsQ0FBQztJQUMxQztFQUNGLENBQUM7RUFHRCxPQUFPaEIsV0FBVztBQUNuQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdWktdXRpbGl0aWVzLWZhY3RvcnkuanM/N2YzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qIENvbW1vbmx5IG5lZWRlZCBVSSBVdGlsaXRpZXNcclxuKi9cclxuXHJcbnZhciBsaWJVdGlsaXRpZXMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKTtcclxudmFyIGxpYnMgPSBsaWJVdGlsaXRpZXMuZ2V0TGlicygpO1xyXG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gdmFyIG9wdGlvblV0aWxpdGllcztcclxuIHZhciBvcHRpb25zO1xyXG5cclxuIGZ1bmN0aW9uIHVpVXRpbGl0aWVzIChwYXJhbSkge1xyXG4gICBvcHRpb25VdGlsaXRpZXMgPSBwYXJhbS5vcHRpb25VdGlsaXRpZXM7XHJcbiAgIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xyXG4gfVxyXG5cclxuIHVpVXRpbGl0aWVzLnN0YXJ0U3Bpbm5lciA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgaWYgKCFjbGFzc05hbWUpIHtcclxuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XHJcbiAgIH1cclxuXHJcbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgdmFyIGNvbnRhaW5lcldpZHRoID0gJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3Rvcikud2lkdGgoKTtcclxuICAgICB2YXIgY29udGFpbmVySGVpZ2h0ID0gJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3RvcikuaGVpZ2h0KCk7XHJcbiAgICAgJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3RvciArICc6cGFyZW50JykucHJlcGVuZCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogOTk5OTk5OTsgbGVmdDogNDUlOyB0b3A6ICcgKyBjb250YWluZXJIZWlnaHQgLyAyICsgJ3B4O1wiIGNsYXNzPVwiJytjbGFzc05hbWUrJy13cmFwcGVyXCI+JytcclxuICAgICAnPGRpdiBzdHlsZT1cIm1hcmdpbjogMCBhdXRvOyBtYXJnaW4tYm90dG9tOiA1cHg7IHdpZHRoOjUwcHhcIj48aSBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtc3BpbiBmYS0zeCBmYS1mdyAnICsgY2xhc3NOYW1lICsgJ1wiPjwvaT48L2Rpdj4nK1xyXG4gICAgICc8ZGl2IHN0eWxlPVwid2lkdGg6IDIyMHB4OyBoZWlnaHQgMjAlXCI+PGkgY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJy10ZXh0XCI+VGFrZSBhIHNpcCBvZiB5b3VyIGNvZmZlZSB3aGlsZSB5b3Ugd2FpdDwvaT48L2Rpdj4nK1xyXG4gICAgICc8L2Rpdj4nKTtcclxuICAgICAkKFwiLlwiK2NsYXNzTmFtZSsnLXRleHQnKS5mYWRlT3V0KDApXHJcbiAgIH1cclxuIH07XHJcbiB1aVV0aWxpdGllcy5zaG93U3Bpbm5lclRleHQgPSBmdW5jdGlvbihjbGFzc05hbWUpXHJcbiB7XHJcbiAgICQoXCIuXCIrY2xhc3NOYW1lKyctdGV4dCcpLmZhZGVJbigwKVxyXG4gfVxyXG4gdWlVdGlsaXRpZXMuZW5kU3Bpbm5lciA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgaWYgKCFjbGFzc05hbWUpIHtcclxuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XHJcbiAgIH1cclxuXHJcbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSArICctd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAkKCcuJyArIGNsYXNzTmFtZSArICctd3JhcHBlcicpLnJlbW92ZSgpO1xyXG4gICB9XHJcbiB9O1xyXG5cclxuXHJcbiByZXR1cm4gdWlVdGlsaXRpZXM7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJyZXF1aXJlIiwibGlicyIsImdldExpYnMiLCJqUXVlcnkiLCIkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvblV0aWxpdGllcyIsIm9wdGlvbnMiLCJ1aVV0aWxpdGllcyIsInBhcmFtIiwiZ2V0T3B0aW9ucyIsInN0YXJ0U3Bpbm5lciIsImNsYXNzTmFtZSIsImxlbmd0aCIsImNvbnRhaW5lcldpZHRoIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwid2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJoZWlnaHQiLCJwcmVwZW5kIiwiZmFkZU91dCIsInNob3dTcGlubmVyVGV4dCIsImZhZGVJbiIsImVuZFNwaW5uZXIiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/ui-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/*\r\n * This file exports the functions to be utilized in undoredo extension actions\r\n */\n\nmodule.exports = function () {\n  var elementUtilities;\n  var experimentalDataOverlay;\n  var mainUtilities;\n  var cy;\n  function undoRedoActionFunctions(param) {\n    elementUtilities = param.elementUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  undoRedoActionFunctions.deleteElesSimple = function (param) {\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.restoreEles = function (eles) {\n    var param = {};\n    param.eles = elementUtilities.restoreEles(eles);\n    return param;\n  };\n  undoRedoActionFunctions.deleteNodesSmart = function (param) {\n    if (param.firstTime) {\n      return elementUtilities.deleteNodesSmart(param.eles);\n    }\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.setPortsOrdering = function (param) {\n    var nodes = param.nodes;\n    var ordering = param.ordering;\n    var portDistance = param.portDistance;\n    var connectedEdges = nodes.connectedEdges();\n    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.\n    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.\n\n    // Fill node/edge prop maps for undo/redo actions\n\n    // Node prop map includes a copy of node ports\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var ports = node.data('ports');\n      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering\n      var portsCopy = ports.length === 2 ? [{\n        id: ports[0].id,\n        x: ports[0].x,\n        y: ports[0].y\n      }, {\n        id: ports[1].id,\n        x: ports[1].x,\n        y: ports[1].y\n      }] : [];\n      nodePropMap[node.id()] = {\n        ordering: currentOrdering,\n        ports: portsCopy\n      };\n    }\n\n    // Node prop map includes edge portsource and porttarget\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      edgePropMap[edge.id()] = {\n        portsource: edge.data('portsource'),\n        porttarget: edge.data('porttarget')\n      };\n    }\n    var result = {\n      nodes: nodes,\n      nodePropMap: nodePropMap,\n      edgePropMap: edgePropMap\n    };\n\n    // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges\n    if (param.firstTime) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      cy.startBatch();\n\n      // Go back to stored node ports state\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var portsToReturn = param.nodePropMap[node.id()].ports;\n        var orderingsToReturn = param.nodePropMap[node.id()].ordering;\n        node.data('ports', portsToReturn);\n        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering\n      }\n\n      // Go back to stored edge portsource/porttargets state\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        var props = param.edgePropMap[edge.id()];\n        edge.data('portsource', props.portsource);\n        edge.data('porttarget', props.porttarget);\n      }\n      cy.endBatch();\n    }\n    return result;\n  };\n  undoRedoActionFunctions.hideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.unhideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.hideAll = function () {\n    return experimentalDataOverlay.hideAll();\n  };\n  undoRedoActionFunctions.hideAllUndo = function (param) {\n    var invisibleFile = param.invisibleFile;\n    var invisibleExp = param.invisibleExp;\n    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);\n  };\n  undoRedoActionFunctions.unhideAll = function () {\n    return experimentalDataOverlay.unhideAll();\n  };\n  undoRedoActionFunctions.unhideAllUndo = function (param) {\n    var visibleFile = param.visibleFile;\n    var visibleExp = param.visibleExp;\n    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);\n  };\n  undoRedoActionFunctions.hideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideFile(fileName);\n  };\n  undoRedoActionFunctions.hideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var invisible = param.invisible;\n    return experimentalDataOverlay.hideFileUndo(fileName, invisible);\n  };\n  undoRedoActionFunctions.unhideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideFile(fileName);\n  };\n  undoRedoActionFunctions.unhideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var visible = param.visible;\n    return experimentalDataOverlay.unhideFileUndo(fileName, visible);\n  };\n  undoRedoActionFunctions.addExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    var isVisible = param.isVisible;\n    var values = param.values;\n    var groupArray = param.groupArray;\n    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);\n  };\n  undoRedoActionFunctions.removeExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    return experimentalDataOverlay.removeExp(fileName, expName);\n  };\n  undoRedoActionFunctions.addFile = function (param) {\n    var fileName = param.fileName;\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.removeFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.removeFile(fileName);\n  };\n  undoRedoActionFunctions.removeAll = function (param) {\n    return experimentalDataOverlay.removeAll();\n  };\n  undoRedoActionFunctions.restoreAll = function (param) {\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {\n    var result = mainUtilities.getCompoundPadding();\n    mainUtilities.setCompoundPadding(newPadding);\n    return result;\n  };\n  return undoRedoActionFunctions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VuZG8tcmVkby1hY3Rpb24tZnVuY3Rpb25zLWZhY3RvcnkuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZWxlbWVudFV0aWxpdGllcyIsImV4cGVyaW1lbnRhbERhdGFPdmVybGF5IiwibWFpblV0aWxpdGllcyIsImN5IiwidW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJkZWxldGVFbGVzU2ltcGxlIiwiZWxlcyIsInJlc3RvcmVFbGVzIiwiZGVsZXRlTm9kZXNTbWFydCIsImZpcnN0VGltZSIsInNldFBvcnRzT3JkZXJpbmciLCJub2RlcyIsIm9yZGVyaW5nIiwicG9ydERpc3RhbmNlIiwiY29ubmVjdGVkRWRnZXMiLCJub2RlUHJvcE1hcCIsImVkZ2VQcm9wTWFwIiwiaSIsImxlbmd0aCIsIm5vZGUiLCJwb3J0cyIsImRhdGEiLCJjdXJyZW50T3JkZXJpbmciLCJnZXRQb3J0c09yZGVyaW5nIiwicG9ydHNDb3B5IiwiaWQiLCJ4IiwieSIsImVkZ2UiLCJwb3J0c291cmNlIiwicG9ydHRhcmdldCIsInJlc3VsdCIsInN0YXJ0QmF0Y2giLCJwb3J0c1RvUmV0dXJuIiwib3JkZXJpbmdzVG9SZXR1cm4iLCJwcm9wcyIsImVuZEJhdGNoIiwiaGlkZUV4cCIsImV4cE5hbWUiLCJmaWxlTmFtZSIsInVuaGlkZUV4cCIsImhpZGVBbGwiLCJoaWRlQWxsVW5kbyIsImludmlzaWJsZUZpbGUiLCJpbnZpc2libGVFeHAiLCJ1bmhpZGVBbGwiLCJ1bmhpZGVBbGxVbmRvIiwidmlzaWJsZUZpbGUiLCJ2aXNpYmxlRXhwIiwidW5oaWRlRmlsZVVuZG8iLCJoaWRlRmlsZSIsImhpZGVGaWxlVW5kbyIsImludmlzaWJsZSIsInVuaGlkZUZpbGUiLCJ2aXNpYmxlIiwiYWRkRXhwIiwiaXNWaXNpYmxlIiwidmFsdWVzIiwiZ3JvdXBBcnJheSIsInJlbW92ZUV4cCIsImFkZEZpbGUiLCJwYXJzZWQiLCJncm91cGVkIiwidmlzaWJsZWYiLCJyZW1vdmVGaWxlIiwicmVtb3ZlQWxsIiwicmVzdG9yZUFsbCIsInNldENvbXBvdW5kUGFkZGluZyIsIm5ld1BhZGRpbmciLCJnZXRDb21wb3VuZFBhZGRpbmciXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL3NiZ252aXovLi9zcmMvdXRpbGl0aWVzL3VuZG8tcmVkby1hY3Rpb24tZnVuY3Rpb25zLWZhY3RvcnkuanM/NTZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBUaGlzIGZpbGUgZXhwb3J0cyB0aGUgZnVuY3Rpb25zIHRvIGJlIHV0aWxpemVkIGluIHVuZG9yZWRvIGV4dGVuc2lvbiBhY3Rpb25zXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIHZhciBlbGVtZW50VXRpbGl0aWVzO1xyXG4gIHZhciBleHBlcmltZW50YWxEYXRhT3ZlcmxheTtcclxuICB2YXIgbWFpblV0aWxpdGllcztcclxuICB2YXIgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zIChwYXJhbSkge1xyXG4gICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICBleHBlcmltZW50YWxEYXRhT3ZlcmxheSA9IHBhcmFtLmV4cGVyaW1lbnRhbERhdGFPdmVybGF5O1xyXG4gICAgbWFpblV0aWxpdGllcyA9IHBhcmFtLm1haW5VdGlsaXRpZXM7XHJcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5kZWxldGVFbGVzU2ltcGxlID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5kZWxldGVFbGVzU2ltcGxlKHBhcmFtLmVsZXMpO1xyXG4gIH07XHJcblxyXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJlc3RvcmVFbGVzID0gZnVuY3Rpb24gKGVsZXMpIHtcclxuICAgIHZhciBwYXJhbSA9IHt9O1xyXG4gICAgcGFyYW0uZWxlcyA9IGVsZW1lbnRVdGlsaXRpZXMucmVzdG9yZUVsZXMoZWxlcyk7XHJcbiAgICByZXR1cm4gcGFyYW07XHJcbiAgfTtcclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZGVsZXRlTm9kZXNTbWFydCA9IGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5kZWxldGVOb2Rlc1NtYXJ0KHBhcmFtLmVsZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlRWxlc1NpbXBsZShwYXJhbS5lbGVzKTtcclxuICB9O1xyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5zZXRQb3J0c09yZGVyaW5nID0gZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgIHZhciBub2RlcyA9IHBhcmFtLm5vZGVzO1xyXG4gICAgdmFyIG9yZGVyaW5nID0gcGFyYW0ub3JkZXJpbmc7XHJcbiAgICB2YXIgcG9ydERpc3RhbmNlID0gcGFyYW0ucG9ydERpc3RhbmNlO1xyXG4gICAgdmFyIGNvbm5lY3RlZEVkZ2VzID0gbm9kZXMuY29ubmVjdGVkRWRnZXMoKTtcclxuICAgIHZhciBub2RlUHJvcE1hcCA9IHt9OyAvLyBOb2RlIHByb3AgbWFwIGZvciBjdXJyZW50IHN0YXR1cyBvZiB0aGUgbm9kZXMgaXQgaXMgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHJlc3VsdCBtYXAuIEl0IGluY2x1ZGVzIG5vZGUgY3VycmVudCBwb3J0IG9yZGVyaW5nIGFuZCBjdXJyZW50IHBvcnRzLlxyXG4gICAgdmFyIGVkZ2VQcm9wTWFwID0ge307IC8vIEVkZ2UgcHJvcCBtYXAgZm9yIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBub2RlcyBpdCBpcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgcmVzdWx0IG1hcC4gSXQgaW5jbHVkZXMgZWRnZSBwb3J0c291cmNlIGFuZCBwb3J0dGFyZ2V0LlxyXG5cclxuICAgIC8vIEZpbGwgbm9kZS9lZGdlIHByb3AgbWFwcyBmb3IgdW5kby9yZWRvIGFjdGlvbnNcclxuXHJcbiAgICAvLyBOb2RlIHByb3AgbWFwIGluY2x1ZGVzIGEgY29weSBvZiBub2RlIHBvcnRzXHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgdmFyIHBvcnRzID0gbm9kZS5kYXRhKCdwb3J0cycpO1xyXG4gICAgICB2YXIgY3VycmVudE9yZGVyaW5nID0gZWxlbWVudFV0aWxpdGllcy5nZXRQb3J0c09yZGVyaW5nKG5vZGUpOyAvLyBHZXQgdGhlIGN1cnJlbnQgbm9kZSBwb3J0cyBvcmRlcmluZ1xyXG4gICAgICB2YXIgcG9ydHNDb3B5ID0gcG9ydHMubGVuZ3RoID09PSAyID8gWyB7IGlkOiBwb3J0c1swXS5pZCwgeDogcG9ydHNbMF0ueCwgeTogcG9ydHNbMF0ueSB9LCB7IGlkOiBwb3J0c1sxXS5pZCwgeDogcG9ydHNbMV0ueCwgeTogcG9ydHNbMV0ueSB9IF0gOiBbXTtcclxuICAgICAgbm9kZVByb3BNYXBbbm9kZS5pZCgpXSA9IHsgb3JkZXJpbmc6IGN1cnJlbnRPcmRlcmluZywgcG9ydHM6IHBvcnRzQ29weSB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vZGUgcHJvcCBtYXAgaW5jbHVkZXMgZWRnZSBwb3J0c291cmNlIGFuZCBwb3J0dGFyZ2V0XHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb25uZWN0ZWRFZGdlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgdmFyIGVkZ2UgPSBjb25uZWN0ZWRFZGdlc1tpXTtcclxuICAgICAgZWRnZVByb3BNYXBbZWRnZS5pZCgpXSA9IHsgcG9ydHNvdXJjZTogZWRnZS5kYXRhKCdwb3J0c291cmNlJyksIHBvcnR0YXJnZXQ6IGVkZ2UuZGF0YSgncG9ydHRhcmdldCcpIH07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgbm9kZXM6IG5vZGVzLFxyXG4gICAgICBub2RlUHJvcE1hcDogbm9kZVByb3BNYXAsXHJcbiAgICAgIGVkZ2VQcm9wTWFwOiBlZGdlUHJvcE1hcFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIGNhbGwgcmVsYXRlZCBtZXRob2QgZnJvbSBlbGVtZW50IHV0aWxpdGllcyBlbHNlIGdvIGJhY2sgdG8gdGhlIHN0b3JlZCBwcm9wcyBvZiBub2Rlcy9lZGdlc1xyXG4gICAgaWYgKCBwYXJhbS5maXJzdFRpbWUgKSB7XHJcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuc2V0UG9ydHNPcmRlcmluZyhub2Rlcywgb3JkZXJpbmcsIHBvcnREaXN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY3kuc3RhcnRCYXRjaCgpO1xyXG5cclxuICAgICAgLy8gR28gYmFjayB0byBzdG9yZWQgbm9kZSBwb3J0cyBzdGF0ZVxyXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xyXG4gICAgICAgIHZhciBwb3J0c1RvUmV0dXJuID0gcGFyYW0ubm9kZVByb3BNYXBbbm9kZS5pZCgpXS5wb3J0cztcclxuICAgICAgICB2YXIgb3JkZXJpbmdzVG9SZXR1cm4gPSBwYXJhbS5ub2RlUHJvcE1hcFtub2RlLmlkKCldLm9yZGVyaW5nO1xyXG4gICAgICAgIG5vZGUuZGF0YSgncG9ydHMnLCBwb3J0c1RvUmV0dXJuKTtcclxuICAgICAgICBub2RlLmRhdGEoJ3BvcnRzb3JkZXJpbmcnLCBvcmRlcmluZ3NUb1JldHVybik7IC8vIFVwZGF0ZSB0aGUgY2FjaGVkIHBvcnRzIG9yZGVyaW5nXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdvIGJhY2sgdG8gc3RvcmVkIGVkZ2UgcG9ydHNvdXJjZS9wb3J0dGFyZ2V0cyBzdGF0ZVxyXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb25uZWN0ZWRFZGdlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICB2YXIgZWRnZSA9IGNvbm5lY3RlZEVkZ2VzW2ldO1xyXG4gICAgICAgIHZhciBwcm9wcyA9IHBhcmFtLmVkZ2VQcm9wTWFwW2VkZ2UuaWQoKV07XHJcbiAgICAgICAgZWRnZS5kYXRhKCdwb3J0c291cmNlJywgcHJvcHMucG9ydHNvdXJjZSk7XHJcbiAgICAgICAgZWRnZS5kYXRhKCdwb3J0dGFyZ2V0JywgcHJvcHMucG9ydHRhcmdldCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGN5LmVuZEJhdGNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5oaWRlRXhwID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGV4cE5hbWUgPSBwYXJhbS5leHBOYW1lO1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaGlkZUV4cChmaWxlTmFtZSwgZXhwTmFtZSk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmhpZGVFeHAgPSBmdW5jdGlvbihwYXJhbSl7XHJcbiAgICB2YXIgZXhwTmFtZSA9IHBhcmFtLmV4cE5hbWU7XHJcbiAgICB2YXIgZmlsZU5hbWUgPSBwYXJhbS5maWxlTmFtZTtcclxuICAgIHJldHVybiBleHBlcmltZW50YWxEYXRhT3ZlcmxheS51bmhpZGVFeHAoZmlsZU5hbWUsIGV4cE5hbWUpO1xyXG4gIH1cclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuaGlkZUFsbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaGlkZUFsbCgpO1xyXG4gIH1cclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuaGlkZUFsbFVuZG8gPSBmdW5jdGlvbihwYXJhbSl7XHJcbiAgICB2YXIgaW52aXNpYmxlRmlsZSA9IHBhcmFtLmludmlzaWJsZUZpbGU7XHJcbiAgICB2YXIgaW52aXNpYmxlRXhwID0gcGFyYW0uaW52aXNpYmxlRXhwO1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhpZGVBbGxVbmRvKGludmlzaWJsZUZpbGUsIGludmlzaWJsZUV4cCk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy51bmhpZGVBbGwgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUFsbCgpO1xyXG4gIH1cclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMudW5oaWRlQWxsVW5kbyA9IGZ1bmN0aW9uKHBhcmFtKXtcclxuICAgIHZhciB2aXNpYmxlRmlsZSA9IHBhcmFtLnZpc2libGVGaWxlO1xyXG4gICAgdmFyIHZpc2libGVFeHAgPSBwYXJhbS52aXNpYmxlRXhwO1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnVuaGlkZUZpbGVVbmRvKHZpc2libGVGaWxlLCB2aXNpYmxlRXhwKTtcclxuICB9XHJcblxyXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLmhpZGVGaWxlID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuaGlkZUZpbGUoZmlsZU5hbWUpO1xyXG4gIH1cclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuaGlkZUZpbGVVbmRvID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICB2YXIgaW52aXNpYmxlID0gcGFyYW0uaW52aXNpYmxlO1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LmhpZGVGaWxlVW5kbyhmaWxlTmFtZSwgaW52aXNpYmxlKTtcclxuICB9XHJcblxyXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnVuaGlkZUZpbGUgPSBmdW5jdGlvbihwYXJhbSl7XHJcbiAgICB2YXIgZmlsZU5hbWUgPSBwYXJhbS5maWxlTmFtZTtcclxuICAgIHJldHVybiBleHBlcmltZW50YWxEYXRhT3ZlcmxheS51bmhpZGVGaWxlKGZpbGVOYW1lKTtcclxuICB9XHJcblxyXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnVuaGlkZUZpbGVVbmRvID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICB2YXIgdmlzaWJsZSA9IHBhcmFtLnZpc2libGU7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkudW5oaWRlRmlsZVVuZG8oZmlsZU5hbWUsIHZpc2libGUpO1xyXG4gIH1cclxuXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuYWRkRXhwID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICB2YXIgZXhwTmFtZSA9IHBhcmFtLmV4cE5hbWU7XHJcbiAgICB2YXIgaXNWaXNpYmxlID0gcGFyYW0uaXNWaXNpYmxlO1xyXG4gICAgdmFyIHZhbHVlcyA9IHBhcmFtLnZhbHVlcztcclxuICAgIHZhciBncm91cEFycmF5ID0gcGFyYW0uZ3JvdXBBcnJheTtcclxuICAgIHJldHVybiBleHBlcmltZW50YWxEYXRhT3ZlcmxheS5hZGRFeHAoZmlsZU5hbWUsIGV4cE5hbWUsIGlzVmlzaWJsZSwgdmFsdWVzLCBncm91cEFycmF5KTtcclxuICB9XHJcblxyXG4gIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zLnJlbW92ZUV4cCA9IGZ1bmN0aW9uKHBhcmFtKXtcclxuICAgIHZhciBmaWxlTmFtZSA9IHBhcmFtLmZpbGVOYW1lO1xyXG4gICAgdmFyIGV4cE5hbWUgPSBwYXJhbS5leHBOYW1lO1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlbW92ZUV4cChmaWxlTmFtZSwgZXhwTmFtZSk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5hZGRGaWxlID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICB2YXIgcGFyc2VkID0gcGFyYW0ucGFyc2VkO1xyXG4gICAgdmFyIGdyb3VwZWQgPSBwYXJhbS5ncm91cGVkO1xyXG4gICAgdmFyIHZpc2libGUgPSBwYXJhbS52aXNpYmxlO1xyXG4gICAgdmFyIHZpc2libGVmID0gcGFyYW0udmlzaWJsZWY7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkuYWRkRmlsZShmaWxlTmFtZSxwYXJzZWQsdmlzaWJsZSxncm91cGVkLCB2aXNpYmxlZik7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZW1vdmVGaWxlID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIGZpbGVOYW1lID0gcGFyYW0uZmlsZU5hbWU7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkucmVtb3ZlRmlsZShmaWxlTmFtZSk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZW1vdmVBbGwgPSBmdW5jdGlvbihwYXJhbSl7XHJcbiAgICByZXR1cm4gZXhwZXJpbWVudGFsRGF0YU92ZXJsYXkucmVtb3ZlQWxsKCk7XHJcbiAgfVxyXG5cclxuICB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucy5yZXN0b3JlQWxsID0gZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgdmFyIHBhcnNlZCA9IHBhcmFtLnBhcnNlZDtcclxuICAgIHZhciBncm91cGVkID0gcGFyYW0uZ3JvdXBlZDtcclxuICAgIHZhciB2aXNpYmxlID0gcGFyYW0udmlzaWJsZTtcclxuICAgIHZhciB2aXNpYmxlZiA9IHBhcmFtLnZpc2libGVmO1xyXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRhbERhdGFPdmVybGF5LnJlc3RvcmVBbGwocGFyc2VkLHZpc2libGUsZ3JvdXBlZCx2aXNpYmxlZilcclxuICB9XHJcbiAgXHJcbiAgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuc2V0Q29tcG91bmRQYWRkaW5nID0gZnVuY3Rpb24obmV3UGFkZGluZykge1xyXG4gICAgdmFyIHJlc3VsdCA9IG1haW5VdGlsaXRpZXMuZ2V0Q29tcG91bmRQYWRkaW5nKCk7ICAgXHJcbiAgICBtYWluVXRpbGl0aWVzLnNldENvbXBvdW5kUGFkZGluZyhuZXdQYWRkaW5nKTsgICBcclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9OyBcclxuXHJcbiAgcmV0dXJuIHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUUzQixJQUFJQyxnQkFBZ0I7RUFDcEIsSUFBSUMsdUJBQXVCO0VBQzNCLElBQUlDLGFBQWE7RUFDakIsSUFBSUMsRUFBRTtFQUVOLFNBQVNDLHVCQUF1QkEsQ0FBRUMsS0FBSyxFQUFFO0lBQ3ZDTCxnQkFBZ0IsR0FBR0ssS0FBSyxDQUFDTCxnQkFBZ0I7SUFDekNDLHVCQUF1QixHQUFHSSxLQUFLLENBQUNKLHVCQUF1QjtJQUN2REMsYUFBYSxHQUFHRyxLQUFLLENBQUNILGFBQWE7SUFDbkNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDQyxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBRUFILHVCQUF1QixDQUFDSSxnQkFBZ0IsR0FBRyxVQUFVSCxLQUFLLEVBQUU7SUFDMUQsT0FBT0wsZ0JBQWdCLENBQUNR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\n//# sourceURL=webpack-internal:///./src/utilities/undo-redo-action-functions-factory.js\n");

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\r\n* Lookup object for valid map properties.\r\n* In the future it could be combined with other similar properties/functions in a new file.\r\n*/\nmodule.exports = {\n  compoundPadding: true,\n  extraCompartmentPadding: true,\n  extraComplexPadding: true,\n  arrowScale: true,\n  showComplexName: true,\n  dynamicLabelSize: true,\n  inferNestingOnLoad: true,\n  fitLabelsToNodes: true,\n  fitLabelsToInfoboxes: true,\n  recalculateLayoutOnComplexityManagement: true,\n  rearrangeOnComplexityManagement: true,\n  animateOnDrawingChanges: true,\n  adjustNodeLabelFontSizeAutomatically: true,\n  enablePorts: true,\n  allowCompoundNodeResize: true,\n  mapColorScheme: true,\n  mapColorSchemeStyle: true,\n  mapName: true,\n  mapDescription: true,\n  enableSIFTopologyGrouping: true,\n  experimentDescription: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3ZhbGlkTWFwUHJvcGVydGllcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3VuZFBhZGRpbmciLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJhcnJvd1NjYWxlIiwic2hvd0NvbXBsZXhOYW1lIiwiZHluYW1pY0xhYmVsU2l6ZSIsImluZmVyTmVzdGluZ09uTG9hZCIsImZpdExhYmVsc1RvTm9kZXMiLCJmaXRMYWJlbHNUb0luZm9ib3hlcyIsInJlY2FsY3VsYXRlTGF5b3V0T25Db21wbGV4aXR5TWFuYWdlbWVudCIsInJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQiLCJhbmltYXRlT25EcmF3aW5nQ2hhbmdlcyIsImFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseSIsImVuYWJsZVBvcnRzIiwiYWxsb3dDb21wb3VuZE5vZGVSZXNpemUiLCJtYXBDb2xvclNjaGVtZSIsIm1hcENvbG9yU2NoZW1lU3R5bGUiLCJtYXBOYW1lIiwibWFwRGVzY3JpcHRpb24iLCJlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nIiwiZXhwZXJpbWVudERlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy92YWxpZE1hcFByb3BlcnRpZXMuanM/NGM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qIExvb2t1cCBvYmplY3QgZm9yIHZhbGlkIG1hcCBwcm9wZXJ0aWVzLlxyXG4qIEluIHRoZSBmdXR1cmUgaXQgY291bGQgYmUgY29tYmluZWQgd2l0aCBvdGhlciBzaW1pbGFyIHByb3BlcnRpZXMvZnVuY3Rpb25zIGluIGEgbmV3IGZpbGUuXHJcbiovXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNvbXBvdW5kUGFkZGluZzogdHJ1ZSxcclxuICBleHRyYUNvbXBhcnRtZW50UGFkZGluZzogdHJ1ZSxcclxuICBleHRyYUNvbXBsZXhQYWRkaW5nOiB0cnVlLFxyXG4gIGFycm93U2NhbGU6IHRydWUsXHJcbiAgc2hvd0NvbXBsZXhOYW1lOiB0cnVlLFxyXG4gIGR5bmFtaWNMYWJlbFNpemU6IHRydWUsXHJcbiAgaW5mZXJOZXN0aW5nT25Mb2FkOiB0cnVlLFxyXG4gIGZpdExhYmVsc1RvTm9kZXM6IHRydWUsXHJcbiAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IHRydWUsXHJcbiAgcmVjYWxjdWxhdGVMYXlvdXRPbkNvbXBsZXhpdHlNYW5hZ2VtZW50OiB0cnVlLFxyXG4gIHJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXHJcbiAgYW5pbWF0ZU9uRHJhd2luZ0NoYW5nZXM6IHRydWUsXHJcbiAgYWRqdXN0Tm9kZUxhYmVsRm9udFNpemVBdXRvbWF0aWNhbGx5OiB0cnVlLFxyXG4gIGVuYWJsZVBvcnRzOiB0cnVlLFxyXG4gIGFsbG93Q29tcG91bmROb2RlUmVzaXplOiB0cnVlLFxyXG4gIG1hcENvbG9yU2NoZW1lOiB0cnVlLFxyXG4gIG1hcENvbG9yU2NoZW1lU3R5bGU6IHRydWUsXHJcbiAgbWFwTmFtZTogdHJ1ZSxcclxuICBtYXBEZXNjcmlwdGlvbjogdHJ1ZSxcclxuICBlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nOiB0cnVlLFxyXG4gIGV4cGVyaW1lbnREZXNjcmlwdGlvbjogdHJ1ZVxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGVBQWUsRUFBRSxJQUFJO0VBQ3JCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxtQkFBbUIsRUFBRSxJQUFJO0VBQ3pCQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsZUFBZSxFQUFFLElBQUk7RUFDckJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLGtCQUFrQixFQUFFLElBQUk7RUFDeEJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLG9CQUFvQixFQUFFLElBQUk7RUFDMUJDLHVDQUF1QyxFQUFFLElBQUk7RUFDN0NDLCtCQUErQixFQUFFLElBQUk7RUFDckNDLHVCQUF1QixFQUFFLElBQUk7RUFDN0JDLG9DQUFvQyxFQUFFLElBQUk7RUFDMUNDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxjQUFjLEVBQUUsSUFBSTtFQUNwQkMsbUJBQW1CLEVBQUUsSUFBSTtFQUN6QkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLHlCQUF5QixFQUFFLElBQUk7RUFDL0JDLHFCQUFxQixFQUFFO0FBQ3pCLENBQUMifQ==\n//# sourceURL=webpack-internal:///./src/utilities/validMapProperties.js\n");

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*global window, global*/\nvar util = __webpack_require__(/*! util */ \"util\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nfunction now() { return new Date().getTime() }\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.console) {\n    console = __webpack_require__.g.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29uc29sZS1icm93c2VyaWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHFCQUFNLG9CQUFvQixxQkFBTTtBQUMzQyxjQUFjLHFCQUFNO0FBQ3BCLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vbm9kZV9tb2R1bGVzL2NvbnNvbGUtYnJvd3NlcmlmeS9pbmRleC5qcz9jZTI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdywgZ2xvYmFsKi9cbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIilcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpXG5mdW5jdGlvbiBub3coKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl0sXG4gICAgW2luZm8sIFwiaW5mb1wiXSxcbiAgICBbd2FybiwgXCJ3YXJuXCJdLFxuICAgIFtlcnJvciwgXCJlcnJvclwiXSxcbiAgICBbdGltZSwgXCJ0aW1lXCJdLFxuICAgIFt0aW1lRW5kLCBcInRpbWVFbmRcIl0sXG4gICAgW3RyYWNlLCBcInRyYWNlXCJdLFxuICAgIFtkaXIsIFwiZGlyXCJdLFxuICAgIFtjb25zb2xlQXNzZXJ0LCBcImFzc2VydFwiXVxuXVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IGZ1bmN0aW9uc1tpXVxuICAgIHZhciBmID0gdHVwbGVbMF1cbiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdXG5cbiAgICBpZiAoIWNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgY29uc29sZVtuYW1lXSA9IGZcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc29sZVxuXG5mdW5jdGlvbiBsb2coKSB7fVxuXG5mdW5jdGlvbiBpbmZvKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gd2FybigpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICB0aW1lc1tsYWJlbF0gPSBub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICBkZWxldGUgdGltZXNbbGFiZWxdXG4gICAgdmFyIGR1cmF0aW9uID0gbm93KCkgLSB0aW1lXG4gICAgY29uc29sZS5sb2cobGFiZWwgKyBcIjogXCIgKyBkdXJhdGlvbiArIFwibXNcIilcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLm5hbWUgPSBcIlRyYWNlXCJcbiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjaylcbn1cblxuZnVuY3Rpb24gZGlyKG9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChvYmplY3QpICsgXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gY29uc29sZUFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/console-browserify/index.js\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"sbgnviz","version":"6.0.1","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"jquery":"^2.2.4","file-saver":"^2.0.2","cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","tippy.js":"^3.4.0"},"dependencies":{"libsbgn.js":"github:sbgn/libsbgn.js#develop","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^2.2.4","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.7.0","webpack-node-externals":"^3.0.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});