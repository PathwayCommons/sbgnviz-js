/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var sbgnviz = function sbgnviz(_options) {\n    var libsbml = __webpack_require__(/*! libsbmljs_stable */ \"libsbmljs_stable\");\n    var libsbmlInstance = libsbml();\n    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n    var options = optionUtilities.extendOptions(_options);\n    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ \"./src/sbgn-extensions/sbgn-cy-instance-factory.js\")();\n\n    // Utilities whose functions will be exposed seperately\n    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ \"./src/utilities/ui-utilities-factory.js\")();\n    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ \"./src/utilities/file-utilities-factory.js\")();\n    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ \"./src/utilities/graph-utilities-factory.js\")();\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ \"./src/utilities/keyboard-input-utilities-factory.js\")(); // require keybord input utilities\n    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ \"./src/utilities/experimental-data-overlay.js\")();\n    // Utilities to be exposed as is\n    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ \"./src/utilities/undo-redo-action-functions-factory.js\")();\n\n    // Other utilities\n    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ \"./src/utilities/json-to-sbgnml-converter-factory.js\")();\n    var jsonToSbmlConverter = __webpack_require__(/*! ./utilities/json-to-sbml-converter-factory */ \"./src/utilities/json-to-sbml-converter-factory.js\")();\n    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ \"./src/utilities/json-to-nwt-converter-factory.js\")();\n    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ \"./src/utilities/sbgnml-to-json-converter-factory.js\")();\n    var sbmlToJsonConverter = __webpack_require__(/*! ./utilities/sbml-to-json-converter-factory */ \"./src/utilities/sbml-to-json-converter-factory.js\")();\n    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ \"./src/utilities/nwt-to-json-converter-factory.js\")();\n    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ \"./src/utilities/tab-delimited-to-json-converter-factory.js\")();\n    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ \"./src/utilities/sif-to-json-converter-factory.js\")();\n    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ \"./src/utilities/json-to-sif-converter-factory.js\")();\n    var classes = __webpack_require__(/*! ./utilities/classes */ \"./src/utilities/classes.js\");\n    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ \"./src/utilities/layout-loader-factory.js\")();\n    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ \"./src/utilities/layout-to-text-factory.js\")();\n    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ \"./src/utilities/cd-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ \"./src/utilities/sbgnml-to-cd-converter-factory.js\")();\n    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ \"./src/utilities/sbgnml-to-sbml-converter-factory.js\")();\n    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ \"./src/utilities/sbml-to-sbgnml-converter-factory.js\")();\n    var sbgnmlToGpmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-gpml-converter-factory */ \"./src/utilities/sbgnml-to-gpml-converter-factory.js\")();\n    var gpmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/gpml-to-sbgnml-converter-factory */ \"./src/utilities/gpml-to-sbgnml-converter-factory.js\")();\n    // Fill param object to use it utilities internally\n\n    param.optionUtilities = optionUtilities;\n    param.sbgnCyInstance = sbgnCyInstance;\n    param.uiUtilities = uiUtilities;\n    param.fileUtilities = fileUtilities;\n    param.graphUtilities = graphUtilities;\n    param.mainUtilities = mainUtilities;\n    param.keyboardInputUtilities = keyboardInputUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;\n    param.jsonToSbmlConverter = jsonToSbmlConverter;\n    param.jsonToNwtConverter = jsonToNwtConverter;\n    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;\n    param.sbmlToJsonConverter = sbmlToJsonConverter;\n    param.nwtToJsonConverter = nwtToJsonConverter;\n    param.tdToJsonConverter = tdToJsonConverter;\n    param.sifToJsonConverter = sifToJsonConverter;\n    param.classes = classes;\n    param.layoutLoader = layoutLoader;\n    param.layoutToText = layoutToText;\n    param.jsonToSifConverter = jsonToSifConverter;\n    param.cdToSbgnmlConverter = cdToSbgnmlConverter;\n    param.sbgnmlToCdConverter = sbgnmlToCdConverter;\n    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;\n    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;\n    param.sbgnmlToGpmlConverter = sbgnmlToGpmlConverter;\n    param.gpmlToSbgnmlConverter = gpmlToSbgnmlConverter;\n    param.experimentalDataOverlay = experimentalDataOverlay;\n    param.libsbmlInstance = libsbmlInstance;\n\n    // call constructors of objects with param\n\n    sbgnCyInstance(param);\n    optionUtilities(param);\n    uiUtilities(param);\n    fileUtilities(param);\n    graphUtilities(param);\n    mainUtilities(param);\n    keyboardInputUtilities(param);\n    elementUtilities(param);\n    undoRedoActionFunctions(param);\n    jsonToSbgnmlConverter(param);\n    jsonToSbmlConverter(param);\n    jsonToNwtConverter(param);\n    sbgnmlToJsonConverter(param);\n    sbmlToJsonConverter(param);\n    nwtToJsonConverter(param);\n    tdToJsonConverter(param);\n    sifToJsonConverter(param);\n    layoutLoader(param);\n    layoutToText(param);\n    jsonToSifConverter(param);\n    cdToSbgnmlConverter(param);\n    sbgnmlToCdConverter(param);\n    sbgnmlToSbmlConverter(param);\n    sbmlToSbgnmlConverter(param);\n    sbgnmlToGpmlConverter(param);\n    gpmlToSbgnmlConverter(param);\n    experimentalDataOverlay(param);\n\n    // set scratch pad for sbgnviz and init sbgnvizParams inside it\n    sbgnCyInstance.getCy().scratch('_sbgnviz', {});\n    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param;\n\n    // Expose the api\n    var api = {};\n\n    // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    //api.experimentalDataOverlay = experimentalDataOverlay;\n\n    //expose utility of experimental data-overlay\n    for (var prop in experimentalDataOverlay) {\n      api[prop] = experimentalDataOverlay[prop];\n    }\n\n    // Expose each main utility seperately\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in fileUtilities) {\n      api[prop] = fileUtilities[prop];\n    }\n\n    // Expose each file utility seperately\n    for (var prop in uiUtilities) {\n      api[prop] = uiUtilities[prop];\n    }\n\n    // Expose each sbgn graph utility seperately\n    for (var prop in graphUtilities) {\n      api[prop] = graphUtilities[prop];\n    }\n\n    // Expose get cy function to enable accessing related cy instance\n    api.getCy = sbgnCyInstance.getCy;\n\n    // Expose some utilities directly here\n    api.classes = classes;\n    api.tdParser = tdParser;\n    return api;\n  };\n  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ \"./src/utilities/validMapProperties.js\");\n  sbgnviz.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.tippy = _libs.tippy || Tippy;\n\n    // Set the libraries to access them from any file\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n    libUtilities.setLibs(libs);\n    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ \"./src/sbgn-extensions/sbgn-cy-renderer.js\");\n    sbgnRenderer();\n  };\n  if ( true && module.exports) {\n    module.exports = sbgnviz;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar Tippy = libs.tippy;\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;\n  var refreshPaddings, options, cy;\n  var sbgnCyInstance = function sbgnCyInstance(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n\n    // cy = param.sbgnCyInstance.getCy();\n\n    /*\r\n     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.\r\n     */\n    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {\n      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian\n      return {\n        x: radius * Math.cos(angleInRadian) + centerX,\n        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system\n      };\n    };\n\n    /*\r\n     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle\r\n     */\n    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {\n      var circleStr = \"\";\n      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration\n      var currentAngle = angleFrom; // current angle will be updated in each iteration\n\n      for (var i = 0; i < numOfPoints; i++) {\n        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);\n        currentAngle += stepSize;\n        circleStr += point.x + \" \" + point.y + \" \";\n      }\n      return circleStr;\n    };\n\n    /*\r\n     *  Generates a string representing processes/logical operators with ports.\r\n     *  lineHW: Half width of line through the circle to the intersection point\r\n     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)\r\n     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'\r\n     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'\r\n     */\n\n    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {\n      var polygonStr;\n      var numOfPoints = 30; // Number of points that both halves of circle will have\n      if (orientation === 'horizontal') {\n        var abovePoints, belowPoints;\n        if (type === 'circle') {\n          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);\n          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);\n        } else if (type === 'rectangle') {\n          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n        }\n        polygonStr = \"-1 -\" + lineHW + \" -\" + shapeHW + \" -\" + lineHW + \" \";\n        polygonStr += abovePoints;\n        polygonStr += shapeHW + \" -\" + lineHW + \" 1 -\" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \" + lineHW + \" \";\n        polygonStr += belowPoints;\n        polygonStr += \"-\" + shapeHW + \" \" + lineHW + \" -1 \" + lineHW;\n      } else {\n        var leftPoints, rightPoints;\n        if (type === 'circle') {\n          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);\n          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);\n        } else if (type === 'rectangle') {\n          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n        }\n        polygonStr = \"-\" + lineHW + \" -\" + 1 + \" -\" + lineHW + \" -\" + shapeHW + \" \";\n        polygonStr += leftPoints;\n        polygonStr += \"-\" + lineHW + \" \" + shapeHW + \" -\" + lineHW + \" 1 \" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \";\n        polygonStr += rightPoints;\n        polygonStr += lineHW + \" -\" + shapeHW + \" \" + lineHW + \" -1\";\n      }\n      return polygonStr;\n    };\n\n    // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file\n    function registerUndoRedoActions() {\n      // create or get the undo-redo instance\n      var ur = cy.undoRedo();\n\n      // register general actions\n      // register add remove actions\n      ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n      ur.action(\"deleteNodesSmart\", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);\n      ur.action(\"setPortsOrdering\", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering);\n\n      //experimental data ovarlay\n      ur.action(\"removeAll\", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);\n      ur.action(\"hideExperiment\", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);\n      ur.action(\"unhideExperiment\", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);\n      ur.action(\"hideFile\", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);\n      ur.action(\"unhideFile\", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);\n      ur.action(\"removeExperiment\", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);\n      ur.action(\"removeFile\", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);\n      ur.action(\"expButtonChange\", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);\n      ur.action(\"fileButtonChangeHide\", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);\n      ur.action(\"fileButtonChangeUnHide\", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide);\n\n      //ur.action(\"expButtonUnhide\", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);\n      //ur.action(\"parseData\", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);\n    }\n    function showTooltip(event) {\n      var node = event.target || event.cyTarget;\n      var canHaveTooltip = function canHaveTooltip(node) {\n        return elementUtilities.isSIFNode(node) || node.data(\"tooltip\") !== null;\n      };\n      if (!canHaveTooltip(node)) {\n        return;\n      }\n      var ref; // used only for positioning\n      var pos = event.position || event.cyPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);\n      var tooltipContent;\n      if (!infobox) {\n        tooltipContent = node.data('tooltip');\n        if (tooltipContent == undefined || tooltipContent == '') {\n          return;\n        }\n        ref = node.popperRef();\n      } else {\n        tooltipContent = infobox['tooltip'];\n        if (tooltipContent == undefined) {\n          return;\n        }\n        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);\n        var modelW = infobox.bbox.w;\n        var modelH = infobox.bbox.h;\n        var renderedW = modelW * zoom;\n        var renderedH = modelH * zoom;\n        modelPos.x -= modelW / 2;\n        modelPos.y -= modelH / 2;\n        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);\n        var renderedDims = {\n          w: renderedW,\n          h: renderedH\n        };\n        ref = node.popperRef({\n          renderedPosition: function renderedPosition() {\n            return renderedPos;\n          },\n          renderedDimensions: function renderedDimensions() {\n            return renderedDims;\n          }\n        });\n      }\n      var placement = infobox ? infobox.anchorSide : 'bottom';\n      var destroyTippy;\n      var tippy = Tippy.one(ref, {\n        content: function () {\n          var content = document.createElement('div');\n          content.style['font-size'] = 12 * zoom + 'px';\n          content.innerHTML = tooltipContent;\n          return content;\n        }(),\n        trigger: 'manual',\n        hideOnClick: true,\n        arrow: true,\n        placement: placement,\n        onHidden: function onHidden() {\n          cy.off('pan zoom', destroyTippy);\n          node.off('position', destroyTippy);\n          cy.off('tapdrag', destroyTippy);\n        }\n      });\n      destroyTippy = function destroyTippy() {\n        tippy.destroy();\n      };\n      cy.on('pan zoom', destroyTippy);\n      node.on('position', destroyTippy);\n      cy.on('tapdrag', destroyTippy);\n      setTimeout(function () {\n        return tippy.show();\n      }, 250);\n    }\n    function bindCyEvents() {\n      cy.on('tapdragover', 'node', function (event) {\n        var waitDuration = 200;\n        var nodeTapdragout;\n        var currEvent = event;\n        var node = currEvent.target || currEvent.cyTarget;\n        var inQueue = true;\n        var clearNodeEvent = function clearNodeEvent() {\n          if (nodeTapdragout) {\n            node.off('tapdragout', nodeTapdragout);\n          }\n          if (nodeTapdrag) {\n            node.off('tapdrag', nodeTapdrag);\n          }\n        };\n        var getShowTooltipAsycn = function getShowTooltipAsycn() {\n          return setTimeout(function () {\n            showTooltip(currEvent);\n            inQueue = false;\n          }, waitDuration);\n        };\n        var showTooltipAsycn = getShowTooltipAsycn();\n        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {\n          clearTimeout(showTooltipAsycn);\n          clearNodeEvent();\n        });\n        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {\n          currEvent = e;\n          if (!inQueue) {\n            showTooltipAsycn = getShowTooltipAsycn();\n            inQueue = true;\n          }\n        });\n      });\n      cy.on('tapend', 'node', function (event) {\n        cy.style().update();\n      });\n      cy.on(\"expandcollapse.beforecollapse\", \"node\", function (event) {\n        var node = this;\n        //The children info of complex nodes should be shown when they are collapsed\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          //The node is being collapsed store infolabel to use it later\n          var infoLabel = elementUtilities.getInfoLabel(node);\n          node._private.data.infoLabel = infoLabel;\n        }\n      });\n      cy.on(\"expandcollapse.aftercollapse\", \"node\", function (event) {\n        var node = this;\n        // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we\n        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).\n        cy.startBatch();\n        var bbox = node.data('bbox');\n        bbox.w = 36;\n        bbox.h = 36;\n        node.data('bbox', bbox);\n        cy.endBatch();\n      });\n      cy.on(\"expandcollapse.beforeexpand\", \"node\", function (event) {\n        var node = this;\n        node.removeData(\"infoLabel\");\n      });\n      cy.on(\"expandcollapse.afterexpand\", \"node\", function (event) {\n        var node = this;\n        cy.nodes().updateCompoundBounds();\n        if (!options.recalculateOnComplexityManagement) {\n          cy.style().update();\n        }\n        //Don't show children info when the complex node is expanded\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          node.removeStyle('content');\n        }\n      });\n      cy.on(\"beforeDo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports = ports;\n          args.viewport = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n          if (name == \"layout\") mainUtilities.beforePerformLayout();\n        }\n      });\n      cy.on(\"beforeRedo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterDo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements;\n          res.ports = args.ports;\n          res.viewport = args.viewport;\n        }\n      });\n      cy.on(\"afterRedo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on(\"beforeUndo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n          var allElements = parents.concat(simples); // all elements\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterUndo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on('layoutstop', function (event) {\n        /*\r\n        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.\r\n        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.\r\n        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')\r\n        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'\r\n        */\n        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {\n          // 3000 nodes/edges check is for performance improvement\n          if (graphUtilities.portsEnabled === true && !(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n            elementUtilities.changePortsOrientationAfterLayout();\n          }\n        }\n      });\n      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {\n        // if the event is not triggered for this cy instance return directly\n        if (_cy != cy) {\n          return;\n        }\n        var _setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {\n          if (cyInstance == undefined) return;\n          if (node.data().infoboxCalculated) {\n            return;\n          } else if (node.isParent()) {\n            node.children().forEach(function (childNode) {\n              _setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);\n            });\n          }\n          node.data(\"infoboxCalculated\", true);\n          node.data('auxunitlayouts', {});\n          // for each statesandinfos\n\n          var correctInfoBoxCoord = true;\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;\n          }\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {\n              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);\n              statesandinfos.bbox.x = cordResult.x;\n              statesandinfos.bbox.y = cordResult.y;\n              statesandinfos.isDisplayed = true;\n              var location = statesandinfos.anchorSide; // top bottom right left\n              var layouts = node.data('auxunitlayouts');\n              if (!layouts[location]) {\n                // layout doesn't exist yet for this location\n                layouts[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              // populate the layout of this side\n              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed\n            } else {\n              if (!node.data('auxunitlayouts')) {\n                // ensure minimal initialization\n                node.data('auxunitlayouts', {});\n              }\n              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);\n              if (!node.data('auxunitlayouts')[location]) {\n                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n              var layout = node.data('auxunitlayouts')[location];\n              statesandinfos.anchorSide = location;\n              switch (location) {\n                case \"top\":\n                  statesandinfos.bbox.y = 0;\n                  break;\n                case \"bottom\":\n                  statesandinfos.bbox.y = 100;\n                  break;\n                case \"left\":\n                  statesandinfos.bbox.x = 0;\n                  break;\n                case \"right\":\n                  statesandinfos.bbox.x = 100;\n                  break;\n              }\n              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);\n            }\n          }\n          if (isLayoutRequired === true) {\n            var locations = classes.AuxUnitLayout.checkFit(node, cy);\n            if (locations !== undefined && locations.length > 0) {\n              classes.AuxUnitLayout.fitUnits(node, cy, locations);\n            }\n          }\n        };\n        // list all entitytypes andstore them in the global scratch\n        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned\n\n        // assign statesandinfos to their layout\n        cy.style().update();\n        // cy.startBatch();\n\n        // this check is for performance improvement\n        if (!(cy.nodes().length > 3000 || cy.edges().length > 3000)) {\n          cy.nodes().forEach(function (node) {\n            _setCompoundInfoboxes(node, isLayoutRequired, cy);\n          });\n        }\n        if (callback) {\n          callback();\n        }\n\n        //cy.endBatch();\n      });\n    }\n    var selectionColor = '#89898a';\n    var sbgnStyleSheet = cytoscape.stylesheet().selector(\"node\").css({\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'text-opacity': 1,\n      'opacity': 1,\n      'padding': 0\n    }).selector(\"node[class]\").css({\n      'shape': function shape(ele) {\n        return elementUtilities.getCyShape(ele);\n      },\n      'content': function content(ele) {\n        return elementUtilities.getElementContent(ele);\n      },\n      'font-size': function fontSize(ele) {\n        // If node labels are expected to be adjusted automatically or element cannot have label\n        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()\n        // else return ele.data('font-size')\n        var opt = options.adjustNodeLabelFontSizeAutomatically;\n        var adjust = typeof opt === 'function' ? opt() : opt;\n        if (!adjust && ele.data('font-size') != undefined) {\n          return ele.data('font-size');\n        }\n        return elementUtilities.getLabelTextSize(ele);\n      }\n    }).selector(\"node[class][font-family]\").style({\n      'font-family': function fontFamily(ele) {\n        return ele.data('font-family');\n      }\n    }).selector(\"node[class][font-style]\").style({\n      'font-style': function fontStyle(ele) {\n        return ele.data('font-style');\n      }\n    }).selector(\"node[class][font-weight]\").style({\n      'font-weight': function fontWeight(ele) {\n        return ele.data('font-weight');\n      }\n    }).selector(\"node[class][color]\").style({\n      'color': function color(ele) {\n        return ele.data('color');\n      }\n    }).selector(\"node[class][background-color]\").style({\n      'background-color': function backgroundColor(ele) {\n        return ele.data('background-color');\n      }\n    }).selector(\"node[class][background-opacity]\").style({\n      'background-opacity': function backgroundOpacity(ele) {\n        return ele.data('background-opacity');\n      }\n    }).selector(\"node[class][border-width]\").style({\n      'border-width': function borderWidth(ele) {\n        return ele.data('border-width');\n      }\n    }).selector(\"node[class][border-color]\").style({\n      'border-color': function borderColor(ele) {\n        return ele.data('border-color');\n      }\n    }).selector(\"node[class][text-wrap]\").style({\n      'text-wrap': function textWrap(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return 'ellipsis';\n        }\n        return ele.data('text-wrap');\n      }\n    }).selector(\"node\").style({\n      'text-max-width': function textMaxWidth(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n        if (isFit) {\n          return ele.width();\n        }\n        return '1000px';\n      }\n    }).selector(\"edge[class][line-color]\").style({\n      'line-color': function lineColor(ele) {\n        return ele.data('line-color');\n      },\n      'source-arrow-color': function sourceArrowColor(ele) {\n        return ele.data('line-color');\n      },\n      'target-arrow-color': function targetArrowColor(ele) {\n        return ele.data('line-color');\n      }\n    }).selector(\"edge[class][width]\").style({\n      'width': function width(ele) {\n        return ele.data('width');\n      }\n    }).selector(\"node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process'],[class='truncated process'],[class='unknown logical operator']\").css({\n      'shape-polygon-points': function shapePolygonPoints(ele) {\n        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us\n          var port = ele.data('ports')[0];\n          // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'\n          var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n          // The half width of the actual shape discluding the ports\n          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x);\n          // Get the class of the node\n          var _class = ele.data('class');\n          // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'\n          var type = _class.endsWith('process') ? 'rectangle' : 'circle';\n\n          // Generate a polygon string with above parameters and return it\n          return generateShapeWithPortString(0.01, shapeHW, type, orientation);\n        }\n\n        // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug\n        return '-1 -1 1 1 1 0';\n      }\n    }).selector(\"node[class='perturbing agent']\").css({\n      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'\n    }).selector(\"node[class='tag']\").css({\n      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'\n    }).selector(\"node:parent[class^='complex']\") // start with complex\n    .css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': elementUtilities.getComplexMargin,\n      'padding': elementUtilities.getComplexPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node[class='compartment']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='compartment']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node[class='submap']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='submap'],[class='topology group']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node:childless[bbox]\").css({\n      'width': 'data(bbox.w)',\n      'height': 'data(bbox.h)'\n    }).selector(\"node:parent[minHeight]\").css({\n      'min-height': function minHeight(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minHeight');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minHeightBiasTop]\").css({\n      'min-height-bias-top': function minHeightBiasTop(ele) {\n        var min = parseFloat(ele.data('minHeightBiasTop'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minHeightBiasBottom]\").css({\n      'min-height-bias-bottom': function minHeightBiasBottom(ele) {\n        var min = parseFloat(ele.data('minHeightBiasBottom'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidth]\").css({\n      'min-width': function minWidth(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minWidth');\n        }\n        return 0;\n      }\n    }).selector(\"node:parent[minWidthBiasLeft]\").css({\n      'min-width-bias-left': function minWidthBiasLeft(ele) {\n        var min = parseFloat(ele.data('minWidthBiasLeft'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidthBiasRight]\").css({\n      'min-width-bias-right': function minWidthBiasRight(ele) {\n        var min = parseFloat(ele.data('minWidthBiasRight'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node.cy-expand-collapse-collapsed-node\").css({\n      'border-style': 'dashed'\n    })\n    //   .selector(\"node:selected\")\n    //   .css({\n    //     'border-color': selectionColor,\n    //     'target-arrow-color': '#000',\n    // \t'text-outline-color': '#000',\n    // \t'border-width': function(ele){\n    // \t\treturn Math.max(parseFloat(ele.data('border-width')) + 2, 3);\n    // \t  }\n    //   })\n    .selector(\"node:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '14'\n    }).selector(\"edge\").css({\n      'curve-style': 'bezier',\n      'target-arrow-fill': function targetArrowFill(ele) {\n        return elementUtilities.getCyTargetArrowFill(ele);\n      },\n      'source-arrow-fill': 'hollow',\n      'text-border-color': function textBorderColor(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'color': function color(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n        return ele.css('line-color');\n      },\n      'arrow-scale': 1.25\n    }).selector(\"edge.cy-expand-collapse-meta-edge\").css({\n      'line-color': '#C4C4C4',\n      'source-arrow-color': '#C4C4C4',\n      'target-arrow-color': '#C4C4C4'\n    })\n    //   .selector(\"edge:selected\")\n    //   .css({\n    //     'line-color': selectionColor,\n    //     'source-arrow-color': selectionColor,\n    // \t'target-arrow-color': selectionColor,\n    // \t'width': function(ele){\n    // \t\treturn Math.max(parseFloat(ele.data('width')) + 2, 3);\n    // \t  }\n    //   })\n    .selector(\"edge:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '8'\n    }).selector(\"edge[cardinality > 0]\").css({\n      'text-rotation': 'autorotate',\n      'text-background-shape': 'rectangle',\n      'text-border-opacity': '1',\n      'text-border-width': '1',\n      'text-background-color': 'white',\n      'text-background-opacity': '1'\n    }).selector(\"edge[class='consumption'][cardinality > 0]\").css({\n      'source-label': function sourceLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'source-text-margin-y': '-10',\n      'source-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class='production'][cardinality > 0]\").css({\n      'target-label': function targetLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'target-text-margin-y': '-10',\n      'target-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class]\").css({\n      'target-arrow-shape': function targetArrowShape(ele) {\n        return elementUtilities.getCyArrowShape(ele);\n      },\n      'source-arrow-shape': 'none',\n      'source-endpoint': function sourceEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'source');\n      },\n      'target-endpoint': function targetEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'target');\n      },\n      'line-style': function lineStyle(ele) {\n        return elementUtilities.getArrayLineStyle(ele);\n      },\n      'line-dash-pattern': function lineDashPattern(ele) {\n        return elementUtilities.getArrayLineDashStyle(ele);\n      }\n    }).selector(\"core\").css({\n      'selection-box-color': selectionColor,\n      'selection-box-opacity': '0.2',\n      'selection-box-border-color': selectionColor\n    });\n    var sbgnNetworkContainer = $(options.networkContainerSelector);\n\n    // create and init cytoscape:\n    cytoscape({\n      container: sbgnNetworkContainer,\n      style: sbgnStyleSheet,\n      showOverlay: false,\n      minZoom: 0.125,\n      maxZoom: 16,\n      boxSelectionEnabled: true,\n      motionBlur: true,\n      wheelSensitivity: 0.1,\n      ready: function ready() {\n        cy = this;\n        // If undoable register undo/redo actions\n        if (options.undoable) {\n          registerUndoRedoActions();\n        }\n        bindCyEvents();\n      }\n    });\n  };\n  sbgnCyInstance.getCy = function () {\n    return cy;\n  };\n  return sbgnCyInstance;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-instance-factory.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Render sbgn specific shapes which are not supported by cytoscape.js core\r\n */\n\nvar libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar cyMath = math = cytoscape.math;\nvar cyBaseNodeShapes = cytoscape.baseNodeShapes;\nvar cyStyleProperties = cytoscape.styleProperties;\nvar classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var $$ = cytoscape;\n\n  /*\r\n  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz\r\n  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke\r\n  * border more than once as they would have infoboxes, multimers etc.\r\n  * Extends the style properties of node with the given ones then strokes the border.\r\n  * Would needed to be slightly updated during cytoscape upgrades if related function in\r\n  * Cytoscape.js is updated. Information about where is the related function is located\r\n  * can be found in the file that list the changes done in ivis cytoscape fork.\r\n  */\n  $$.sbgn.drawBorder = function (_ref) {\n    var context = _ref.context,\n      node = _ref.node,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      borderStyle = _ref.borderStyle,\n      borderOpacity = _ref.borderOpacity;\n    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));\n    if (borderWidth > 0) {\n      var parentOpacity = node && node.effectiveOpacity() || 1;\n      borderStyle = borderStyle || node && node.css('border-style');\n      borderColor = borderColor || node && node.css('border-color');\n      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;\n      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];\n      var initialProps = {};\n      propsToRestore.forEach(function (propName) {\n        initialProps[propName] = context[propName];\n      });\n      context.lineWidth = borderWidth;\n      context.lineCap = 'butt';\n      context.strokeStyle = borderColor;\n      context.globalAlpha = borderOpacity;\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n      context.stroke();\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        context.stroke();\n        context.globalCompositeOperation = gco;\n      }\n\n      // reset in case we changed the border style\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n      propsToRestore.forEach(function (propName) {\n        context[propName] = initialProps[propName];\n      });\n    }\n  };\n\n  // Taken from cytoscape.js and modified\n  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n\n    //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n  var drawProteinPath = $$.sbgn.drawProtein = function (context, x, y, width, height, activePadding1) {\n    var halfWidth = (width + activePadding1) / 2;\n    var halfHeight = (height + activePadding1) / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n\n    //context.clearRect(0, 0, width, height);\n    //context.beginPath()\n  };\n  var drawReceptorPath = $$.sbgn.drawReceptor = function (context, x, y, width, height, activePadding1) {\n    var halfPadding = activePadding1 ? activePadding1 / 2 : 0;\n    //var points= [-1, -1,   0, -0.5,   1, -1,   1, 0.5,   0, 1,   -1,  0.5 ];\n    var halfW = width / 2;\n    var halfH = height / 2;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(x + halfW * -1 - halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 0, y + halfH * -0.5 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * -1 - 3 * halfPadding / 2);\n    context.lineTo(x + halfW * 1 + halfPadding, y + halfH * 0.5 + halfPadding);\n    context.lineTo(x + halfW * 0, y + halfH * 1 + 3 * halfPadding / 2);\n    context.lineTo(x + halfW * -1 - halfPadding, y + halfH * 0.5 + halfPadding);\n    context.closePath();\n  };\n  var drawRoundedDrugPath = $$.sbgn.drawRoundedDrug = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath();\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    var halfWidthInner = width / 2 - 5;\n    var halfHeightInner = height / 2 - 5;\n    var cornerRadius = Math.min(halfWidthInner, halfHeightInner);\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeightInner);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidthInner, y - halfHeightInner, x + halfWidthInner, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidthInner, y + halfHeightInner, x, y + halfHeightInner, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidthInner, y + halfHeightInner, x - halfWidthInner, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidthInner, y - halfHeightInner, x, y - halfHeightInner, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeightInner);\n    context.closePath();\n  };\n\n  // Taken from cytoscape.js\n  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {\n    var halfW = width / 2;\n    var halfH = height / 2;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n    context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n    }\n    context.closePath();\n  };\n  var sbgnShapes = $$.sbgn.sbgnShapes = {\n    'empty set': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'macromolecule': true,\n    'simple chemical': true,\n    'biological activity': true,\n    'compartment': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'receptor': true,\n    'ion': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true,\n    'degradation': true\n  };\n  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'gene': true,\n    'rna': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'complex sbml': true\n  };\n  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {\n    'simple chemical': true,\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true,\n    'protein': true,\n    'receptor': true,\n    'truncated protein': true,\n    'ion channel': true,\n    'complex sbml': true,\n    'gene': true,\n    'rna': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'phenotype sbml': true,\n    'drug': true,\n    'ion': true,\n    'degradation': true\n  };\n  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {\n    'macromolecule': true,\n    'complex': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'phenotype sbml': true,\n    'complex sbml': true,\n    'protein': true\n  };\n  var canBeActiveShapes = $$.sbgn.canBeActiveShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true\n  };\n  var canBeHypotheticalShapes = $$.sbgn.canBeHypotheticalShapes = {\n    'protein': true,\n    'complex sbml': true,\n    'receptor': true,\n    'ion channel': true,\n    'truncated protein': true,\n    'gene': true,\n    'rna': true,\n    'phenotype sbml': true,\n    'ion': true,\n    'simple molecule': true,\n    'unknown molecule': true,\n    'drug': true,\n    'degradation': true\n  };\n  cyMath.calculateDistance = function (point1, point2) {\n    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);\n    return Math.sqrt(distance);\n  };\n  $$.sbgn.colors = {\n    clone: \"#838383\"\n  };\n  $$.sbgn.getDefaultComplexCornerLength = function () {\n    return 24;\n  };\n  $$.sbgn.getDefaultGeneCornerLength = function () {\n    return 24;\n  };\n  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {\n    var layouts = node.data('auxunitlayouts');\n    for (var side in layouts) {\n      var layout = layouts[side];\n      classes.AuxUnitLayout.draw(layout, node.cy(), context);\n    }\n    context.beginPath();\n    context.closePath();\n  };\n  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {\n    switch (shapeName) {\n      case 'roundrectangle':\n        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);\n        break;\n      case 'bottomroundrectangle':\n        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);\n        break;\n      case 'ellipse':\n        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n        break;\n      case 'complex':\n        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);\n        break;\n      case 'perturbing agent':\n        var points = $$.sbgn.generatePerturbingAgentPoints();\n        drawPolygonPath(context, x, y, width, height, points);\n        break;\n      case 'rectangle':\n        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n        break;\n      case 'stadium':\n        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));\n        break;\n    }\n  };\n\n  // $$.sbgn.AfShapeArgsFn = function (self){\n  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data(\"class\")];\n  // }\n\n  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {\n    //check rectangle at top\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {\n      return true;\n    }\n\n    //check rectangle at bottom\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {\n      return true;\n    }\n\n    //check ellipses\n    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {\n      x -= centerX;\n      y -= centerY;\n      x /= width / 2 + padding;\n      y /= height / 2 + padding;\n      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;\n    };\n\n    // Check bottom right quarter circle\n    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n\n    // Check bottom left quarter circle\n    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n    return false;\n  };\n\n  //we need to force opacity to 1 since we might have state and info boxes.\n  //having opaque nodes which have state and info boxes gives unpleasent results.\n  $$.sbgn.forceOpacityToOne = function (node, context) {\n    var parentOpacity = node.effectiveOpacity();\n    if (parentOpacity === 0) {\n      return;\n    }\n    context.fillStyle = \"rgba(\" + node._private.style[\"background-color\"].value[0] + \",\" + node._private.style[\"background-color\"].value[1] + \",\" + node._private.style[\"background-color\"].value[2] + \",\" + 1 * node.css('opacity') * parentOpacity + \")\";\n  };\n  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath();\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {\n    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);\n    context.fill();\n  };\n  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX;\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX;\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n  ;\n  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {\n    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);\n  };\n  $$.sbgn.drawBarrel = function (context, x, y, width, height) {\n    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {\n    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  // The old draw implementation for nucleic acid feature\n  // now only used for clone marker drawing of nucleic acid feature\n  // and macromolecule shapes because 'bottomroundrectangle' function\n  // of cytoscape.js did not fit well for this purpose.\n  // Did not change the name yet directly as drawNucAcidFeatureClone etc.\n  // because it actually draws a nucleic acid feature in a different way.\n  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {\n    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var left = centerX - halfWidth,\n      right = centerX + halfWidth;\n    var bottom = centerY - halfHeight,\n      top = centerY + halfHeight;\n    context.beginPath();\n    context.moveTo(left, bottom);\n    context.lineTo(right, bottom);\n    context.lineTo(right, centerY);\n    context.arcTo(right, top, centerX, top, cornerRadius);\n    context.arcTo(left, top, left, centerY, cornerRadius);\n    context.lineTo(left, bottom);\n    context.closePath();\n    context.fill();\n  };\n\n  /*\r\n   * Code taken from https://jsperf.com/string-prototype-endswith\r\n   * Direct implementation seems to work better.\r\n   * Using this improves isMultimer() performance.\r\n   * Makes it take 0.1 or 0.2% less time from the whole\r\n   * loading process, down from ~0.4% initially.\r\n   */\n  function endsWith(str, pattern) {\n    for (var i = pattern.length, l = str.length; i--;) {\n      if (str.charAt(--l) != pattern.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  $$.sbgn.isMultimer = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && endsWith(sbgnClass, \"multimer\")) return true;\n    return false;\n  };\n  $$.sbgn.isActive = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.startsWith(\"active\")) return true;\n    return false;\n  };\n  $$.sbgn.isHypothetical = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && sbgnClass.includes(\"hypothetical\")) return true;\n    return false;\n  };\n\n  //this function is created to have same corner length when\n  //complex's width or height is changed\n  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {\n    //cp stands for corner proportion\n    var cpX = Math.min(cornerLength, 0.5 * width) / width;\n    var cpY = Math.min(cornerLength, 0.5 * height) / height;\n    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];\n    return complexPoints;\n  };\n  $$.sbgn.generateGeneShapePoints = function (width, height) {\n    return [-1, -1, 1, -1, 1, 1, -1, 1];\n  };\n  $$.sbgn.generateRNAShapePoints = function (width, height) {\n    return [-1, 0.8, 0.5, 0.8, 1, -0.8, -0.5, -0.8];\n  };\n  $$.sbgn.generateReceptorShapePoints = function (width, height) {\n    return [-1, -1, 0, -0.5, 1, -1, 1, 0.5, 0, 1, -1, 0.5];\n  };\n  $$.sbgn.generatePerturbingAgentPoints = function () {\n    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];\n  };\n  $$.sbgn.getDefaultMultimerPadding = function () {\n    return 5;\n  };\n  $$.sbgn.getDefaultActivePadding = function () {\n    return 5;\n  };\n\n  // draw background image of nodes\n  $$.sbgn.drawImage = function (context, imgObj) {\n    if (imgObj) {\n      context.clip();\n      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);\n      context.restore();\n    }\n  };\n  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment', 'gene', 'simple molecule', 'unknown molecule', 'drug', 'truncated protein', 'ion', 'ion channel', 'rna', 'phenotype sbml', 'receptor', 'complex sbml', 'protein', 'degradation');\n  $$.sbgn.registerSbgnNodeShapes = function () {\n    function generateDrawFcn(_ref2) {\n      var plainDrawFcn = _ref2.plainDrawFcn,\n        extraDrawFcn = _ref2.extraDrawFcn,\n        canBeMultimer = _ref2.canBeMultimer,\n        cloneMarkerFcn = _ref2.cloneMarkerFcn,\n        canBeActive = _ref2.canBeActive,\n        canBeHypothetical = _ref2.canBeHypothetical,\n        canHaveInfoBox = _ref2.canHaveInfoBox,\n        multimerPadding = _ref2.multimerPadding,\n        activePadding = _ref2.activePadding;\n      return function (context, node, imgObj) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var bgOpacity = node.css('background-opacity');\n        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker;\n\n        //Ion channel is dran differently when it is active\n        if (node._private.data[\"class\"].startsWith('active ion channel') || node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawOpenIonChannel;\n        }\n        if (node._private.data[\"class\"].startsWith('ion channel') || node._private.data[\"class\"].startsWith('hypothetical ion channel')) {\n          plainDrawFcn = $$.sbgn.drawIonChannel;\n        }\n\n        //This is where the multimer is drawn\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n\n          //If the node is also hypothetical\n          if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n            // $$.sbgn.drawImage( context, imgObj );\n            borderStyle = 'dashed';\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            });\n            //$$.sbgn.drawImage( context, imgObj );\n            context.beginPath();\n          } else {\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n          if (isCloned) {\n            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);\n          }\n\n          //If the node is also active\n          if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n            //add multimer shape\n            plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height, true, activePadding);\n            borderStyle = 'dashed';\n            context.setLineDash([3, 6]);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node,\n              borderStyle: borderStyle\n            });\n            if (extraDrawFcn) {\n              extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width + activePadding, height + activePadding);\n              $$.sbgn.drawBorder({\n                context: context,\n                node: node\n              });\n            }\n          }\n        }\n\n        //This is where the active is drawn\n        if (canBeActive && $$.sbgn.isActive(node) && !node._private.data[\"class\"].startsWith('active ion channel') && !node._private.data[\"class\"].startsWith('active hypothetical ion channel')) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height, true, activePadding);\n          borderStyle = 'dashed';\n          context.setLineDash([3, 6]);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          });\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width + activePadding, height + activePadding);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        }\n\n        //This is where the active is drawn\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          //add multimer shape\n          plainDrawFcn(context, centerX, centerY, width, height);\n          borderStyle = 'dashed';\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node,\n            borderStyle: borderStyle\n          });\n          // $$.sbgn.drawImage( context, imgObj );\n          context.beginPath();\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX, centerY, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n        }\n        if (!(canBeHypothetical && $$.sbgn.isHypothetical(node))) {\n          plainDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawImage(context, imgObj);\n        }\n        $$.sbgn.drawBorder({\n          context: context,\n          node: node\n        });\n        if (extraDrawFcn) {\n          extraDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n        }\n        if (isCloned) {\n          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);\n        }\n        if (canHaveInfoBox) {\n          var oldStyle = context.fillStyle;\n          $$.sbgn.forceOpacityToOne(node, context);\n          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);\n          context.fillStyle = oldStyle;\n        }\n      };\n    }\n    function generateIntersectLineFcn(_ref3) {\n      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,\n        canBeMultimer = _ref3.canBeMultimer,\n        cloneMarkerFcn = _ref3.cloneMarkerFcn,\n        canBeActive = _ref3.canBeActive,\n        canBeHypothetical = _ref3.canBeHypothetical,\n        canHaveInfoBox = _ref3.canHaveInfoBox,\n        multimerPadding = _ref3.multimerPadding,\n        activePadding = _ref3.activePadding;\n      return function (node, x, y) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var padding = borderWidth / 2;\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var intersections = [];\n        if (canHaveInfoBox) {\n          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);\n          intersections = intersections.concat(stateAndInfoIntersectLines);\n        }\n        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n        intersections = intersections.concat(nodeIntersectLines);\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);\n          intersections = intersections.concat(multimerIntersectionLines);\n        }\n        if (canBeActive && $$.sbgn.isActive(node)) {\n          var activeIntersectionLines = plainIntersectLineFcn(centerX + activePadding, centerY + activePadding, width, height, x, y, padding);\n          intersections = intersections.concat(activeIntersectionLines);\n        }\n        if (canBeHypothetical && $$.sbgn.isHypothetical(node)) {\n          var hypotheticalIntersectionLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n          intersections = intersections.concat(hypotheticalIntersectionLines);\n        }\n        return $$.sbgn.closestIntersectionPoint([x, y], intersections);\n      };\n    }\n    function generateCheckPointFcn(_ref4) {\n      var plainCheckPointFcn = _ref4.plainCheckPointFcn,\n        canBeMultimer = _ref4.canBeMultimer,\n        cloneMarkerFcn = _ref4.cloneMarkerFcn,\n        canBeActive = _ref4.canBeActive,\n        canBeHypothetical = _ref4.canBeHypothetical,\n        canHaveInfoBox = _ref4.canHaveInfoBox,\n        multimerPadding = _ref4.multimerPadding,\n        activePadding = _ref4.activePadding;\n      return function (x, y, node, threshold) {\n        threshold = threshold || 0;\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth + 2 * threshold;\n        var height = node.outerHeight() - borderWidth + 2 * threshold;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var padding = borderWidth / 2;\n        var nodeCheck = function nodeCheck() {\n          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n        var stateAndInfoCheck = function stateAndInfoCheck() {\n          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);\n        };\n        var multimerCheck = function multimerCheck() {\n          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);\n        };\n        var activeCheck = function activeCheck() {\n          return canBeActive && $$.sbgn.isActive(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + activePadding, centerY + activePadding);\n        };\n        var hypotheticalCheck = function hypotheticalCheck() {\n          return canBeHypothetical && $$.sbgn.isHypothetical(node) && plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n        return nodeCheck() || stateAndInfoCheck() || multimerCheck() || activeCheck() || hypotheticalCheck();\n      };\n    }\n    var shapeNames = [\"simple chemical\", \"macromolecule\", \"complex\", \"nucleic acid feature\", \"empty set\", \"biological activity\", \"compartment\", \"oldCompartment\", \"gene\", \"simple molecule\", 'receptor', 'complex sbml', \"unknown molecule\", \"drug\", \"ion\", \"truncated protein\", \"ion channel\", \"rna\", \"phenotype sbml\", \"protein\", \"degradation\"];\n    shapeNames.forEach(function (shapeName) {\n      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];\n      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];\n      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];\n      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];\n      var canBeActive = $$.sbgn.canBeActiveShapes[shapeName];\n      var canBeHypothetical = $$.sbgn.canBeHypotheticalShapes[shapeName];\n      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];\n      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];\n      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();\n      var activePadding = $$.sbgn.getDefaultActivePadding();\n      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];\n      var draw = generateDrawFcn({\n        plainDrawFcn: plainDrawFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding,\n        extraDrawFcn: extraDrawFcn\n      });\n      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({\n        plainIntersectLineFcn: plainIntersectLineFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainIntersectLineFcn;\n      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({\n        plainCheckPointFcn: plainCheckPointFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canBeActive: canBeActive,\n        canBeHypothetical: canBeHypothetical,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      }) : plainCheckPointFcn;\n      var shape = {\n        draw: draw,\n        intersectLine: intersectLine,\n        checkPoint: checkPoint,\n        multimerPadding: multimerPadding,\n        activePadding: activePadding\n      };\n      cyBaseNodeShapes[shapeName] = shape;\n    });\n  };\n  $$.sbgn.drawEllipse = function (context, x, y, width, height) {\n    //$$.sbgn.drawEllipsePath(context, x, y, width, height);\n    //context.fill();\n    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawTruncatedProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n    var halfPadding = activePadding ? activePadding / 2 : 0;\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x, y - halfHeight - halfPadding);\n    //Draw a line till right top\n    context.lineTo(x + halfWidth + halfPadding, y - halfHeight - halfPadding);\n    //Draw a line to middle right\n    context.lineTo(x + halfWidth + halfPadding, y + 2 * halfHeight / 3 + 2 * halfPadding);\n    //Draw a line inner\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight / 3 + 2 * halfPadding);\n    //Draw a line to bottom right\n    context.lineTo(x + 2 * halfWidth / 3 + halfPadding, y + halfHeight + halfPadding);\n    //Draw a line to bottom middle\n    context.lineTo(x, y + halfHeight + halfPadding);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth - halfPadding, y + halfHeight + halfPadding, x - halfWidth - halfPadding, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth - halfPadding, y - halfHeight - halfPadding, x, y - halfHeight - halfPadding, cornerRadius);\n    context.closePath();\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x + halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x / 2 + halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x + halfWidth / 4, y - halfHeight);\n\n    // Start at top middle\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n  $$.sbgn.drawOpenIonChannel = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    // Start at top middle\n    context.moveTo(x - halfWidth / 2, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x, y - halfHeight, x, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x, y + halfHeight, x - halfWidth / 2, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x - halfWidth, y - halfHeight, x + halfWidth / 2, y - halfHeight, cornerRadius);\n    // Join line\n    context.lineTo(x - halfWidth / 2, y - halfHeight);\n\n    // Start at top middle\n    context.moveTo(x + 3 * halfWidth / 4, y - halfHeight);\n    // Arc from middle top to right side\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);\n    // Arc from right side to bottom\n    context.arcTo(x + halfWidth, y + halfHeight, x + 3 * halfWidth / 4, y + halfHeight, cornerRadius);\n    // Arc from bottom to left side\n    context.arcTo(x + halfWidth / 2, y + halfHeight, x + halfWidth / 2, y, cornerRadius);\n    // Arc from left side to topBorder\n    context.arcTo(x + halfWidth / 2, y - halfHeight, x + 3 * halfWidth / 4, y - halfHeight, cornerRadius);\n    // Join line\n    //context.lineTo( x, y - halfHeight );\n\n    context.closePath();\n    context.fill();\n  };\n  $$.sbgn.drawComplex = function (context, x, y, width, height, isActive, cornerLength) {\n    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();\n    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawGene = function (context, x, y, width, height, isActive) {\n    cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawRNA = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateRNAShapePoints(width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawPhenotype = function (context, x, y, width, height) {\n    cyBaseNodeShapes['hexagon'].draw(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.drawReceptor = function (context, x, y, width, height, isActive, activePadding) {\n    drawReceptorPath(context, x, y, width, height, activePadding);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {\n    var points = cyMath.generateUnitNgonPoints(4, 0);\n    context.beginPath();\n    var scaleX = width * Math.sqrt(2) / 2,\n      scaleY = height * Math.sqrt(2) / 2;\n    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);\n    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);\n    context.closePath();\n  };\n  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateBiologicalActivityPoints();\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height, isActive) {\n    drawRoundRectanglePath(context, x, y, width, height);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawProtein = function (context, x, y, width, height, isActive, activePadding) {\n    var activePadding1 = activePadding || 0;\n    drawProteinPath(context, x, y, width, height, activePadding1);\n    if (!isActive) {\n      context.fill();\n    }\n  };\n  $$.sbgn.drawRoundedDrug = function (context, x, y, width, height) {\n    drawRoundedDrugPath(context, x, y, width, height);\n    context.fill();\n  };\n  $$.sbgn.generateNucleicAcidPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateBiologicalActivityPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.generateCompartmentPoints = function () {\n    return math.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n  $$.sbgn.plainDraw = {\n    \"simple chemical\": $$.sbgn.drawSimpleChemical,\n    \"macromolecule\": $$.sbgn.drawRoundRectangle,\n    \"complex\": $$.sbgn.drawComplex,\n    \"nucleic acid feature\": $$.sbgn.drawBottomRoundRectangle,\n    \"empty set\": $$.sbgn.drawEllipse,\n    \"biological activity\": $$.sbgn.drawBiologicalActivity,\n    \"compartment\": $$.sbgn.drawBarrel,\n    \"oldCompartment\": $$.sbgn.drawRoundRectangle,\n    \"gene\": $$.sbgn.drawGene,\n    \"rna\": $$.sbgn.drawRNA,\n    \"simple molecule\": $$.sbgn.drawEllipse,\n    \"unknown molecule\": $$.sbgn.drawEllipse,\n    \"drug\": $$.sbgn.drawRoundedDrug,\n    \"ion\": $$.sbgn.drawEllipse,\n    \"truncated protein\": $$.sbgn.drawTruncatedProtein,\n    \"ion channel\": $$.sbgn.drawIonChannel,\n    \"phenotype sbml\": $$.sbgn.drawPhenotype,\n    \"receptor\": $$.sbgn.drawReceptor,\n    \"complex sbml\": $$.sbgn.drawComplex,\n    \"protein\": $$.sbgn.drawProtein,\n    \"degradation\": $$.sbgn.drawEllipse\n  };\n\n  // To define an extra drawing for the node that is rendered at the very end,\n  // even after the node background image is drawn.\n  // E.g. cross lines of \"empty set\" nodes.\n  $$.sbgn.extraDraw = {\n    \"empty set\": $$.sbgn.drawCrossLine,\n    \"degradation\": $$.sbgn.drawCrossLine\n  };\n  $$.sbgn.plainIntersectLine = {\n    \"simple chemical\": function simple_chemical(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"macromolecule\": function macromolecule(centerX, centerY, width, height, x, y, padding) {\n      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);\n    },\n    \"complex\": function complex(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"nucleic acid feature\": function nucleic_acid_feature(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"empty set\": function empty_set(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"degradation\": function degradation(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"biological activity\": function biological_activity(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateBiologicalActivityPoints();\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"compartment\": function compartment(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"barrel\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"oldCompartment\": function oldCompartment(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"protein\": function protein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"gene\": function gene(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"rectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"rna\": function rna(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateRNAShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"receptor\": function receptor(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateReceptorShapePoints(width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"ion channel\": function ion_channel(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"truncated protein\": function truncated_protein(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    },\n    \"ion\": function ion(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"simple molecule\": function simple_molecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"unknown molecule\": function unknown_molecule(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"drug\": function drug(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"phenotype sbml\": function phenotype_sbml(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"complex sbml\": function complex_sbml(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    }\n  };\n  $$.sbgn.plainCheckPoint = {\n    \"simple chemical\": function simple_chemical(x, y, padding, width, height, centerX, centerY) {\n      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n      var halfWidth = width / 2;\n      var halfHeight = height / 2;\n      //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n      var cornerRadius = Math.min(halfWidth, halfHeight);\n      //var cornerRadius = math.getRoundRectangleRadius( width, height );\n      var diam = cornerRadius * 2;\n\n      // Check hBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check vBox\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      }\n\n      // Check top left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check top right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom right quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      // Check bottom left quarter circle\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n      return false;\n      //return cyBaseNodeShapes[\"ellipse\"].checkPoint( x, y, padding, width, height, centerX, centerY );\n    },\n    \"macromolecule\": function macromolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"complex\": function complex(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"complex sbml\": function complex_sbml(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"nucleic acid feature\": function nucleic_acid_feature(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"empty set\": function empty_set(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"degradation\": function degradation(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"biological activity\": function biological_activity(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"rectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"compartment\": function compartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"barrel\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"oldCompartment\": function oldCompartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"gene\": function gene(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"simple molecule\": function simple_molecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"unknown molecule\": function unknown_molecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"drug\": function drug(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion\": function ion(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"truncated protein\": function truncated_protein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"ion channel\": function ion_channel(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"rna\": function rna(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"phenotype sbml\": function phenotype_sbml(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"receptor\": function receptor(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"protein\": function protein(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    }\n  };\n  $$.sbgn.cloneMarker = {\n    \"simple chemical\": function simple_chemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerRadius = Math.min(width / 2, height / 2);\n        var firstCircleCenterX = centerX - width / 2 + cornerRadius;\n        var firstCircleCenterY = centerY;\n        var secondCircleCenterX = centerX + width / 2 - cornerRadius;\n        var secondCircleCenterY = centerY;\n        var bottomCircleCenterX = centerX;\n        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;\n        if (width < height) {\n          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        } else {\n          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        }\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n        var cloneX = centerX;\n        var cloneY = centerY + 3 / 4 * cornerRadius;\n        var cloneWidth = width - 2 * cornerRadius;\n        var cloneHeight = cornerRadius / 2;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"nucleic acid feature\": function nucleic_acid_feature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cloneWidth = width;\n        var cloneHeight = height / 4;\n        var cloneX = centerX;\n        var cloneY = centerY + 3 * height / 8;\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"macromolecule\": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      $$.sbgn.cloneMarker[\"nucleic acid feature\"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);\n    },\n    \"complex\": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();\n        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;\n        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;\n        var cloneWidth = width;\n        var cloneHeight = height * cpY / 2;\n        var cloneX = centerX;\n        var cloneY = centerY + height / 2 - cloneHeight / 2;\n        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    }\n  };\n  $$.sbgn.closestIntersectionPoint = function (point, intersections) {\n    if (intersections.length <= 0) return [];\n    var closestIntersection = [];\n    var minDistance = Number.MAX_VALUE;\n    for (var i = 0; i < intersections.length; i = i + 2) {\n      var checkPoint = [intersections[i], intersections[i + 1]];\n      var distance = cyMath.calculateDistance(point, checkPoint);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestIntersection = checkPoint;\n      }\n    }\n    return closestIntersection;\n  };\n  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {\n    // var nodeX = node._private.position.x;\n    // var nodeY = node._private.position.y;\n    // var width = node.width();\n    // var height = node.height();\n    // var padding = parseInt(node.css('border-width')) / 2;\n\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var straightLineIntersections;\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    }\n\n    // Check intersections with arc segments, we have only two arcs for\n    //nucleic acid features\n    var arcIntersections;\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n    return []; // if nothing\n  };\n\n  //this function gives the intersections of any line with the upper half of perturbing agent\n  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX - halfWidth / 2;\n      var rightEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX + halfWidth / 2;\n      var leftEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n    return straightLineIntersections;\n  };\n\n  //this function gives the intersections of any line with a round rectangle\n  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n\n    // Check intersections with straight line segments\n    var straightLineIntersections = [];\n    // Top segment, left to right\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Right segment, top to bottom\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Bottom segment, left to right\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Left segment, top to bottom\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n\n    // Check intersections with arc segments\n    var arcIntersections;\n\n    // Top Left\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Top Right\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Right\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n\n    // Bottom Left\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);\n\n      // Ensure the intersection is on the desired quarter of the circle\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n    if (straightLineIntersections.length > 0) return straightLineIntersections;\n    return []; // if nothing\n  };\n  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {\n    var w = width / 2 + padding;\n    var h = height / 2 + padding;\n    var an = centerX;\n    var bn = centerY;\n    var d = [x2 - x1, y2 - y1];\n    var m = d[1] / d[0];\n    var n = -1 * m * x2 + y2;\n    var a = h * h + w * w * m * m;\n    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;\n    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;\n    var discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n      return [];\n    }\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    var xMin = Math.min(t1, t2);\n    var xMax = Math.max(t1, t2);\n    var yMin = m * xMin - m * x2 + y2;\n    var yMax = m * xMax - m * x2 + y2;\n    return [xMin, yMin, xMax, yMax];\n  };\n  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {\n    var centerX = node._private.position.x;\n    var centerY = node._private.position.y;\n    var padding = parseInt(node.css('border-width')) / 2;\n    var stateAndInfos = node._private.data.statesandinfos;\n    var intersections = [];\n    for (var i = 0; i < stateAndInfos.length; i++) {\n      var state = stateAndInfos[i];\n      if (!state.isDisplayed) {\n        continue;\n      }\n      var infoBoxWidth = state.bbox.w;\n      var infoBoxHeight = state.bbox.h;\n      var currIntersections = null;\n      if (state.clazz == \"state variable\") {\n        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"residue variable\") {\n        var coord = classes.ResidueVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"binding region\") {\n        var coord = classes.BindingRegion.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"unit of information\") {\n        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());\n        if (node.data(\"class\") == \"BA macromolecule\" || node.data(\"class\") == \"BA nucleic acid feature\" || node.data(\"class\") == \"BA complex\") {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);\n        } else if (node.data(\"class\") == \"BA unspecified entity\") {\n          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else if (node.data(\"class\") == \"BA simple chemical\") {\n          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);\n        } else if (node.data(\"class\") == \"BA perturbing agent\") {\n          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);\n        }\n      }\n      intersections = intersections.concat(currIntersections);\n    }\n    return intersections;\n  };\n  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {\n    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);\n  };\n  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {\n    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {\n      return true;\n    }\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-renderer.js\n");

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function cdToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  cdToSbgnml.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/cd2sbgnml\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(_error) {\n        callback(null);\n      }\n    });\n  };\n  return cdToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2NkLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJjZFRvU2Jnbm1sIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvY2QtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzPzU2ODMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gY2RUb1NiZ25tbChwYXJhbSkge1xyXG4gICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xyXG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgICB9XHJcbiAgXHJcbiBcclxuICAgIGNkVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cDovL3dlYi5uZXd0ZWRpdG9yLm9yZzo4MDgwL2NkMnNiZ25tbFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB4bWwsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjZFRvU2Jnbm1sO1xyXG4gIFxyXG4gIH1cclxuICBcclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBRUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFFeEIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxVQUFVQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFHQUosVUFBVSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFDQyxRQUFRLEVBQUU7SUFFekNDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ0hDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRSwwQ0FBMEM7TUFDL0NDLElBQUksRUFBRU4sR0FBRztNQUNUTyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBWUQsSUFBSSxFQUFFO1FBQ3JCTCxRQUFRLENBQUNLLElBQUksQ0FBQztNQUNsQixDQUFDO01BQ0RFLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFZQSxNQUFLLEVBQUU7UUFDdkJQLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFDZjtJQUNKLENBQUMsQ0FBQztFQUNOLENBQUM7RUFFRCxPQUFPUCxVQUFVO0FBRW5CLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/cd-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\n// var optionUtilities = require('./option-utilities');\n// var options = optionUtilities.getOptions();\nvar truncate = (__webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\").truncate);\n// only functions not depending on the instances can be used in this way\n// e.g. elementUtilities.generateStateVarId()\nvar elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\nvar ns = {};\n\n// Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.\n// It refers to the object that could be refered by 'this' while there was prototyping in these classes.\n// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'\n// parameter and in this case 'mainObj' can be considered as `the object to be copied`\n\n// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.\n\n// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.\n// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.\n\n// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation\n// classes. While calling a method of AuxiliaryUnit class that method should be called from\n// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the\n// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'\n// method for the auxilary unit object.\n\nvar getAuxUnitClass = function getAuxUnitClass(unit) {\n  // Unit parameter may pass the unit itself or the type of the unit check it\n  var unitType = typeof unit === 'string' ? unit : unit.clazz;\n  // Retrieve and return unit class according to the unit type\n  var className = '';\n  switch (unitType) {\n    case \"state variable\":\n      className = \"StateVariable\";\n      break;\n    case \"residue variable\":\n      className = \"ResidueVariable\";\n      break;\n    case \"binding region\":\n      className = \"BindingRegion\";\n      break;\n    case \"unit of information\":\n      className = \"UnitOfInformation\";\n      break;\n  }\n\n  //var className = unitType === 'state variable' ? 'StateVariable' : 'residue variable'? \"ResidueVariable\":'UnitOfInformation';\n  return ns[className];\n};\nns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method\n\nvar AuxiliaryUnit = {};\n\n// -------------- AuxiliaryUnit -------------- //\n// constructs a new auxiliary unit object and returns it\nAuxiliaryUnit.construct = function (parent) {\n  var obj = {};\n  AuxiliaryUnit.setParentRef(obj, parent);\n  obj.id = null;\n  obj.bbox = null;\n  obj.anchorSide = null;\n  obj.isDisplayed = false;\n  obj.style = null;\n  return obj;\n};\nAuxiliaryUnit.getParent = function (mainObj, cy) {\n  var parent = mainObj.parent;\n  // If parent variable stores the id of parent instead of the actual parent get the actual parent by id\n  if (typeof parent === 'string') {\n    return cy.getElementById(parent);\n  }\n  return parent;\n};\nAuxiliaryUnit.setParentRef = function (mainObj, newParent) {\n  if (mainObj && newParent) {\n    // Reference to id instead of the node itself to avaoid circular reference\n    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();\n  }\n};\nAuxiliaryUnit.checkPoint = function (x, y, node, threshold) {\n  var centerX = node._private.position.x;\n  var centerY = node._private.position.y;\n  var padding = parseInt(node.css('border-width')) / 2;\n  var stateAndInfos = node._private.data.statesandinfos;\n  var cyBaseNodeShapes = cytoscape.baseNodeShapes;\n  //    threshold = parseFloat(threshold);\n\n  for (var i = 0; i < stateAndInfos.length; i++) {\n    var state = stateAndInfos[i];\n    if (!state.isDisplayed) {\n      continue;\n    }\n    var stateWidth = parseFloat(state.bbox.w) + threshold;\n    var stateHeight = parseFloat(state.bbox.h) + threshold;\n    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());\n    var stateCenterX = coord.x;\n    var stateCenterY = coord.y;\n    var checkPoint;\n    if (state.clazz == \"state variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"unit of information\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"residue variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"binding region\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    }\n    if (checkPoint == true) {\n      return state;\n    }\n  }\n  return null;\n};\n\n/*\r\n * Return a new AuxiliaryUnit object. A new parent reference and new id can\r\n * optionnally be passed.\r\n */\nAuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {\n  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();\n  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  AuxiliaryUnit.setParentRef(newUnit, parentToSet);\n  newUnit.id = newId ? newId : mainObj.id;\n  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);\n  newUnit.coordType = mainObj.coordType;\n  newUnit.anchorSide = mainObj.anchorSide;\n  newUnit.isDisplayed = mainObj.isDisplayed;\n  newUnit.style = mainObj.style;\n  return newUnit;\n};\n\n// draw the auxiliary unit at its position\nAuxiliaryUnit.draw = function (mainObj, cy, context) {\n  var unitClass = getAuxUnitClass(mainObj);\n  var coords = unitClass.getAbsoluteCoord(mainObj, cy);\n  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);\n  if (unitClass.hasText(mainObj, cy)) {\n    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);\n  }\n  mainObj.isDisplayed = true;\n};\n\n// to be implemented by children\nAuxiliaryUnit.getText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.hasText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\nAuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {\n  var style = mainObj.style;\n  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);\n  var tmp_ctxt = context.fillStyle;\n  context.fillStyle = style['background-color'];\n  context.fill();\n  context.fillStyle = tmp_ctxt;\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var borderStyle = style.dashed ? 'dashed' : undefined;\n  var borderWidth = style['border-width'];\n  // Selected nodes have a specific border color so infobox should have the same\n  // border color when the node is selected. May need to be updated if style of\n  // selected nodes is updated in a different way.\n  var borderColor = parent.selected() ? null : style['border-color'];\n  cytoscape.sbgn.drawBorder({\n    context: context,\n    node: parent,\n    borderStyle: borderStyle,\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  });\n};\n\n// draw the statesOrInfo's label at given position\nAuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {\n  // access the sbgnvizParams set for cy\n  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();\n  var unitClass = getAuxUnitClass(mainObj);\n  var parent = unitClass.getParent(mainObj, cy);\n  var style = mainObj.style;\n\n  // part of : $$.sbgn.drawText(context, textProp);\n  // save style before modification\n  var oldFont = context.font;\n  var oldStyle = context.fillStyle;\n  var oldOpacity = context.globalAlpha;\n  context.font = style['font-style'] + \" \" + style['font-weight'] + \" \" + style['font-size'] + \"px \" + style['font-family'];\n  context.fillStyle = style['font-color'];\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?\n\n  var text;\n  if (options.fitLabelsToInfoboxes()) {\n    // here we memoize the truncated text into _textCache,\n    // as it is not something that changes so much\n    text = unitClass.getText(mainObj, cy);\n    var key = text + context.font + mainObj.bbox.w;\n    if (mainObj._textCache && mainObj._textCache[key]) {\n      text = mainObj._textCache[key];\n    } else {\n      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);\n      if (!mainObj._textCache) {\n        mainObj._textCache = {};\n      }\n      mainObj._textCache[key] = text;\n    }\n  } else {\n    text = unitClass.getText(mainObj, cy);\n  }\n  context.fillText(text, centerX, centerY);\n\n  // restore saved style\n  context.fillStyle = oldStyle;\n  context.font = oldFont;\n  context.globalAlpha = oldOpacity;\n};\nAuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  /* if(parent.data().complexCalculatedPadding){\r\n    padding = Number(parent.data().complexCalculatedPadding);\r\n    //delete parent._private.data.complexCalculatedPadding;\r\n  }else{\r\n    padding = parent.padding();\r\n  } */\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\")); //parent.data()['border-width'];\n  var position = parent.position();\n  if (mainObj === undefined || parent === undefined || position === undefined) {\n    return;\n  }\n  var borderWidth = parent.data()[\"border-width\"];\n  if (borderWidth === undefined) {\n    return;\n  }\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  // due to corner of barrel shaped compartment shift absX to right\n  /*  if (parent.data(\"class\") == \"compartment\"){\r\n       absX += parent.outerWidth() * 0.1;\r\n   } */\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  var absX, absY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n\n  /*  if (parent.data(\"class\") == \"compartment\"){\r\n     absX += parent.outerWidth() * 0.1;\r\n   }; */\n  return {\n    x: absX,\n    y: absY\n  };\n};\nAuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {\n  if (mainObj === undefined) {\n    return;\n  }\n  if (parentNode !== undefined) {\n    var parent = parentNode;\n  } else {\n    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  }\n  var position = parent.position();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var padding = parent.padding();\n  /*  if(parent.data().complexCalculatedPadding){\r\n     padding = Number(parent.data().complexCalculatedPadding)\r\n   }else{\r\n     padding = parent.padding();\r\n   } */\n\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n\n  /* if (parent.data(\"class\") == \"compartment\"){\r\n    absX -= parent.outerWidth() * 0.1;\r\n  } */\n\n  var relX, relY;\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);\n    relY = mainObj.anchorSide == \"top\" ? 0 : 100;\n  } else {\n    relX = mainObj.anchorSide == \"left\" ? 0 : 100;\n    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);\n  }\n  relX = relX < 0 ? 0 : relX;\n  relX = relX > 100 ? 100 : relX;\n  relY = relY < 0 ? 0 : relY;\n  relY = relY > 100 ? 100 : relY;\n  return {\n    x: relX,\n    y: relY\n  };\n};\nAuxiliaryUnit.setAnchorSide = function (mainObj, node) {\n  var thisX = mainObj.bbox.x;\n  var thisY = mainObj.bbox.y;\n  var thisH = mainObj.bbox.h;\n  var thisW = mainObj.bbox.w;\n  var width, height, padding;\n  if (node.data(\"originalW\")) {\n    width = node.data(\"originalW\");\n    padding = 0;\n  } else {\n    width = node.width();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  if (node.data(\"originalH\")) {\n    height = node.data(\"originalH\");\n    padding = 0;\n  } else {\n    height = node.height();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n  var parentX = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').x : node.position().x;\n  var parentY = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').y : node.position().y;\n  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));\n  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));\n  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));\n  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));\n  var centerX = Number((thisX + thisW / 2).toFixed(2));\n  var centerY = Number((thisY + thisH / 2).toFixed(2));\n  if (centerY == parentY1) {\n    mainObj.anchorSide = \"top\";\n  } else if (centerY == parentY2) {\n    mainObj.anchorSide = \"bottom\";\n  } else if (centerX == parentX1) {\n    mainObj.anchorSide = \"left\";\n  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {\n    mainObj.anchorSide = \"right\";\n  } else {\n    return false;\n  }\n  return true;\n};\nAuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {\n  // add state var to the parent's statesandinfos\n  if (typeof index != \"undefined\") {\n    // specific index provided (for undo/redo consistency)\n    parentNode.data('statesandinfos').splice(index, 0, mainObj);\n  } else {\n    parentNode.data('statesandinfos').push(mainObj);\n  }\n  if (!parentNode.data('auxunitlayouts')) {\n    // ensure minimal initialization\n    parentNode.data('auxunitlayouts', {});\n  }\n  if (!location) {\n    // location not provided, need to define it automatically\n    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);\n  } else if (location === 'left' || location === 'right') {\n    location = AuxUnitLayout.selectNextAvailableLeftRight(parentNode, cy);\n  }\n  // here we are sure to have a location even if it was not provided as argument\n  // get or create the necessary layout\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var layout = parentNode.data('auxunitlayouts')[location];\n  mainObj.anchorSide = location;\n  switch (location) {\n    case \"top\":\n      mainObj.bbox.y = 0;\n      break;\n    case \"bottom\":\n      mainObj.bbox.y = 100;\n      break;\n    case \"left\":\n      mainObj.bbox.x = 0;\n      break;\n    case \"right\":\n      mainObj.bbox.x = 100;\n      break;\n  }\n  // add stateVar to layout, precomputing of relative coords will be triggered accordingly\n  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);\n  return insertedPosition;\n};\nAuxiliaryUnit.removeFromParent = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];\n  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);\n  if (AuxUnitLayout.isEmpty(parentLayout)) {\n    delete parent.data('auxunitlayouts')[mainObj.anchorSide];\n  }\n  var statesandinfos = parent.data('statesandinfos');\n  var index = statesandinfos.indexOf(mainObj);\n  statesandinfos.splice(index, 1);\n};\nAuxiliaryUnit.getPositionIndex = function (mainObj, cy) {\n  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);\n};\nns.AuxiliaryUnit = AuxiliaryUnit;\n// -------------- END AuxiliaryUnit -------------- //\n\n// -------------- StateVariable -------------- //\n/**\r\n * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)\r\n */\n\nvar StateVariable = {};\n\n// StateVariable extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  StateVariable[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\nStateVariable.construct = function (value, stateVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.state = {};\n  obj.state.value = value;\n  obj.state.variable = null;\n  obj.stateVariableDefinition = stateVariableDefinition;\n  obj.clazz = \"state variable\";\n  return obj;\n};\nStateVariable.getText = function (mainObj) {\n  var stateValue = mainObj.state.value || '';\n  var stateVariable = mainObj.state.variable ? \"@\" + mainObj.state.variable : \"\";\n  return stateValue + stateVariable;\n};\nStateVariable.hasText = function (mainObj) {\n  return mainObj.state.value && mainObj.state.value != \"\" || mainObj.state.variable && mainObj.state.variable != \"\";\n};\n\n/*this function is called upon creation of state variable and it returns the location information of the added state variable\r\n*/\nStateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new state var of info\n  var stateVar = StateVariable.construct();\n  StateVariable.setParentRef(stateVar, parentNode);\n  stateVar.value = value;\n  stateVar.variable = variable;\n  stateVar.state = {\n    value: value,\n    variable: variable\n  };\n  stateVar.bbox = bbox;\n  stateVar.style = style;\n  if (id) {\n    stateVar.id = id;\n  }\n  // link to layout\n  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);\n  return {\n    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),\n    location: stateVar.anchorSide,\n    position: position\n  };\n};\nStateVariable.remove = function (mainObj, cy) {\n  var position = StateVariable.getPositionIndex(mainObj, cy);\n  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  StateVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"state variable\",\n    state: {\n      value: mainObj.state.value,\n      variable: mainObj.state.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nStateVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);\n  newStateVar.state = jQuery.extend(true, {}, mainObj.state);\n  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;\n  newStateVar.clazz = mainObj.clazz;\n  return newStateVar;\n};\nns.StateVariable = StateVariable;\n// -------------- END StateVariable -------------- //\n\n// -------------- ResidueVariable -------------- //\n/**\r\n * This is for CellDesigner palette\r\n */\n\nvar ResidueVariable = {};\n\n// ResidueVariable extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  ResidueVariable[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a residue variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\nResidueVariable.construct = function (value, residueVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.residue = {};\n  obj.residue.variable = null;\n  obj.residueVariableDefinition = residueVariableDefinition;\n  obj.clazz = \"residue variable\";\n  return obj;\n};\nResidueVariable.getText = function (mainObj) {\n  var residueVariable = mainObj.residue.variable || '';\n  return residueVariable;\n};\nResidueVariable.hasText = function (mainObj) {\n  return mainObj.residue.variable && mainObj.residue.variable != \"\";\n};\n\n/*this function is called upon creation of residue variable and it returns the location information of the added residue variable\r\n*/\nResidueVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new residue var of info\n  var residueVar = ResidueVariable.construct();\n  ResidueVariable.setParentRef(residueVar, parentNode);\n  residueVar.variable = variable;\n  residueVar.residue = {\n    value: value,\n    variable: variable\n  };\n  residueVar.bbox = bbox;\n  residueVar.style = style;\n  if (id) {\n    residueVar.id = id;\n  }\n  // link to layout\n  position = ResidueVariable.addToParent(residueVar, cy, parentNode, location, position, index);\n  return {\n    index: ResidueVariable.getParent(residueVar, cy).data('statesandinfos').indexOf(residueVar),\n    location: residueVar.anchorSide,\n    position: position\n  };\n};\nResidueVariable.remove = function (mainObj, cy) {\n  var position = ResidueVariable.getPositionIndex(mainObj, cy);\n  var index = ResidueVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  ResidueVariable.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"residue variable\",\n    residue: {\n      variable: mainObj.residue.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nResidueVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newResidueVar = AuxiliaryUnit.copy(mainObj, cy, ResidueVariable.construct(), newParent, newId);\n  newResidueVar.residue = jQuery.extend(true, {}, mainObj.residue);\n  newResidueVar.ResidueVariableDefinition = mainObj.ResidueVariableDefinition;\n  newStanewResidueVarteVar.clazz = mainObj.clazz;\n  return newResidueVar;\n};\nns.ResidueVariable = ResidueVariable;\n// -------------- END ResidueVariable -------------- //\n\n// -------------- BindingRegion -------------- //\n/**\r\n * This is for CellDesigner palette\r\n */\n\nvar BindingRegion = {};\n\n// BindingRegion extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  BindingRegion[prop] = AuxiliaryUnit[prop];\n}\n\n// Construct a binding region object by extending default behaviours of a AuxiliaryUnit object and returns that object\nBindingRegion.construct = function (bindingRegionDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.region = {};\n  obj.region.variable = null;\n  obj.bindingRegionDefinition = bindingRegionDefinition;\n  obj.clazz = \"binding region\";\n  return obj;\n};\nBindingRegion.getText = function (mainObj) {\n  var bindingRegion = mainObj.region.variable || '';\n  return bindingRegion;\n};\nBindingRegion.hasText = function (mainObj) {\n  return mainObj.region.variable && mainObj.region.variable != \"\";\n};\n\n/*this function is called upon creation of binding region and it returns the location information of the added binding region\r\n*/\nBindingRegion.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new binding region of info\n  var bindingRegion = BindingRegion.construct();\n  BindingRegion.setParentRef(bindingRegion, parentNode);\n  bindingRegion.variable = variable;\n  bindingRegion.region = {\n    value: value,\n    variable: variable\n  };\n  bindingRegion.bbox = bbox;\n  bindingRegion.style = style;\n  if (id) {\n    bindingRegion.id = id;\n  }\n  // link to layout\n  position = BindingRegion.addToParent(bindingRegion, cy, parentNode, \"left\", position, index);\n  return {\n    index: BindingRegion.getParent(bindingRegion, cy).data('statesandinfos').indexOf(bindingRegion),\n    location: bindingRegion.anchorSide,\n    position: position\n  };\n};\nBindingRegion.remove = function (mainObj, cy) {\n  var position = BindingRegion.getPositionIndex(mainObj, cy);\n  var index = BindingRegion.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  BindingRegion.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"binding region\",\n    region: {\n      variable: mainObj.region.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nBindingRegion.copy = function (mainObj, cy, newParent, newId) {\n  var newBindingRegion = AuxiliaryUnit.copy(mainObj, cy, BindingRegion.construct(), newParent, newId);\n  newBindingRegion.region = jQuery.extend(true, {}, mainObj.region);\n  newBindingRegion.BindingRegionDefinition = mainObj.BindingRegionDefinition;\n  newBindingRegion.clazz = mainObj.clazz;\n  return newBindingRegion;\n};\nns.BindingRegion = BindingRegion;\n// -------------- END BindingRegion -------------- //\n\n// -------------- UnitOfInformation -------------- //\n/**\r\n * parent can be an EPN, compartment or subunit\r\n */\n\nvar UnitOfInformation = {};\n\n// UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it\nfor (var prop in AuxiliaryUnit) {\n  UnitOfInformation[prop] = AuxiliaryUnit[prop];\n}\n\n// Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object\nUnitOfInformation.construct = function (value, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateUnitOfInfoId();\n  obj.label = {\n    text: value\n  }; // from legacy code, contains {text: }\n  obj.clazz = \"unit of information\";\n  return obj;\n};\nUnitOfInformation.getText = function (mainObj) {\n  return mainObj.label.text;\n};\nUnitOfInformation.hasText = function (mainObj) {\n  return mainObj.label.text && mainObj.label.text != \"\";\n};\n\n/**\r\n * Creates a unit of info and links everything accordingly\r\n * @param parentNode - the cytoscape element hosting the unit of information\r\n * @param value - its text\r\n * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)\r\n * @param [position] - its position in the order of elements placed on the same location\r\n * @param [index] - its index in the statesandinfos list\r\n */\nUnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {\n  // create the new unit of info\n  var unit = UnitOfInformation.construct(value, parentNode);\n  unit.bbox = bbox;\n  unit.style = style;\n  if (id) {\n    unit.id = id;\n  }\n  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);\n  return {\n    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),\n    location: unit.anchorSide,\n    position: position\n  };\n};\nUnitOfInformation.remove = function (mainObj, cy) {\n  var position = UnitOfInformation.getPositionIndex(mainObj, cy);\n  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  UnitOfInformation.removeFromParent(mainObj, cy);\n  return {\n    clazz: \"unit of information\",\n    label: {\n      text: mainObj.label.text\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\nUnitOfInformation.copy = function (mainObj, cy, newParent, newId) {\n  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);\n  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);\n  newUnitOfInfo.clazz = mainObj.clazz;\n  return newUnitOfInfo;\n};\nns.UnitOfInformation = UnitOfInformation;\n// -------------- END UnitOfInformation -------------- //\n\n// -------------- EntityType -------------- //\n/**\r\n * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType\r\n * This class will hold the information regarding state variable, that are shared between all myosins\r\n */\n\nvar EntityType = {};\n\n// Constructs an EntityType object and returns it\nEntityType.construct = function (name, EPN) {\n  var obj = {};\n  obj.name = name; // normally the same as its EPNs\n  obj.stateVariableDefinitions = []; // 0 or many shared state definitions\n  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\nEntityType.createNewDefinitionFor = function (mainObj, stateVar) {\n  var newDefinition = StateVariableDefinition.construct();\n  newDefinition.entityType = mainObj;\n  newDefinition.stateVariables.push(stateVar);\n  stateVar.stateVariableDefinition = newDefinition;\n  stateVar.parent.data('entityType', mainObj);\n  mainObj.stateVariableDefinitions.push(newDefinition);\n};\nEntityType.assignStateVariable = function (mainObj, stateVar) {\n  // first trivial case, no stateDefinition yet for this entityType, so this is a new one\n  if (mainObj.stateVariableDefinitions.length == 0) {\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  } else {\n    // if definitions are already present, we need to match those to the current stateVariable\n    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {\n      var matchStateDef = mainObj.stateVariableDefinitions[i];\n      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {\n        matchStateDef.stateVariables.push(stateVar);\n        stateVar.stateVariableDefinition = matchStateDef;\n        stateVar.parent.data('entityType', mainObj);\n        return;\n      }\n    }\n    // if nothing was matched among the current stateVarDef of this entityType, create new one\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  }\n};\nns.EntityType = EntityType;\n// -------------- END EntityType -------------- //\n\n// -------------- StateVariableDefinition -------------- //\n/**\r\n * The state variable definition is something shared across different EPNs\r\n * The concerned EPNs are linked through the entitype reference\r\n */\n\nvar StateVariableDefinition = {};\n\n// Constructs a new StateVariableDefinition object and returns it\nStateVariableDefinition.construct = function (name, entityType) {\n  var obj = {};\n  obj.name = name;\n  obj.entityType = entityType; // reference to owning entity type\n  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist\n  return obj;\n};\n\n/**\r\n * returns an array of elements that share this state definition\r\n */\nStateVariableDefinition.getConcernedEPNs = function (mainObj) {\n  return mainObj.entityType.EPNs;\n};\n\n/**\r\n * Guess if the provided stateVariable belongs to this stateVarDefinition\r\n * We consider it does, if either the statevar.value or statevar.variable are matching one\r\n * if the statevar in the set of the StateVarDef\r\n * This is because we normally compare only stateVariables from the same entityType\r\n */\nStateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {\n  for (var i = 0; i < mainObj.stateVariables.length; i++) {\n    var matchStateVar = mainObj.stateVariables[i];\n    // Don't match a stateVar against another one from the same element.\n    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions\n    if (matchStateVar.parent === stateVar.parent) {\n      continue;\n    }\n    // normal sure case. Example:\n    // P T134 - undefined T134\n    // P undef - P undef\n    if (\n    //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||\n    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {\n      return true;\n    }\n    // more subtle case, with empty stateVar. Look only at value and discard variable\n    // example: undef undef - P undef\n    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {\n      return true;\n    }\n  }\n  return false;\n};\nns.StateVariableDefinition = StateVariableDefinition;\n// -------------- END StateVariableDefinition -------------- //\n\n// -------------- AuxUnitLayout -------------- //\n/**\r\n * Responsible for laying out the auxiliary units contained on a same edge\r\n */\n\nvar AuxUnitLayout = {};\nAuxUnitLayout.construct = function (parentNode, location, alignment) {\n  var obj = {};\n  obj.units = [];\n  obj.location = location;\n  obj.alignment = alignment || \"left\"; // this was intended to be used, but it isn't for now\n  AuxUnitLayout.setParentNodeRef(obj, parentNode);\n  obj.renderLengthCache = [];\n  obj.lengthUsed = 0;\n\n  // specific rules for the layout\n  if (parentNode.data('class') == \"simple chemical\") {\n    obj.outerMargin = 3;\n  }\n  return obj;\n};\nAuxUnitLayout.getParentNode = function (mainObj, cy) {\n  var parentNode = mainObj.parentNode;\n\n  // If parentNode is id of parent node rather than being itself get the parent node by that id\n  if (typeof parentNode === 'string') {\n    return cy.getElementById(parentNode);\n  }\n  return parentNode;\n};\nAuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {\n  if (mainObj && parentNode) {\n    // Keep id of parent node to avaoid circular references\n    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();\n  }\n};\n\n/**\r\n * outerMargin: the left and right space left between the side of the node, and the first (and last) box\r\n * unitGap: the space between the auxiliary units\r\n * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,\r\n * forcing a minimum size for the node\r\n * maxUnitDisplayed: show at most this amount of units, even when there is enough space\r\n *\r\n * These options can be defined at the instance level. If it is found in an instance, then it\r\n * takes precedence. If not found, the following class' values are used.\r\n */\nAuxUnitLayout.outerMargin = 5;\nAuxUnitLayout.unitGap = 5;\nAuxUnitLayout.currentTopUnitGap = 5;\nAuxUnitLayout.currentBottomUnitGap = 5;\nAuxUnitLayout.currentLeftUnitGap = 5;\nAuxUnitLayout.currentRightUnitGap = 5;\nAuxUnitLayout.alwaysShowAuxUnits = true;\nAuxUnitLayout.maxUnitDisplayed = -1;\nAuxUnitLayout.lastPos = -1;\nAuxUnitLayout.update = function (mainObj, cy) {\n  //AuxUnitLayout.precomputeCoords(mainObj, cy);\n};\nAuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {\n  if (typeof position != \"undefined\") {\n    mainObj.units.splice(position, 0, unit);\n  } else {\n    mainObj.units.push(unit);\n    position = mainObj.units.length - 1;\n  }\n  if (preComputed === undefined || preComputed === false) {\n    AuxUnitLayout.computeCoords(mainObj, cy, unit);\n    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n    var locations = AuxUnitLayout.checkFit(parentNode, cy);\n    if (locations.filter(function (loc) {\n      return loc == mainObj.location;\n    }).length > 0) {\n      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);\n    }\n  }\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  //AuxUnitLayout.update(mainObj, cy, true);\n  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\r\n    // set a minimum size according to both sides on the same orientation\r\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\r\n    // need to resize the parent in case the space was too small\r\n    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);\r\n  }*/\n  //cy.style().update(); // <- was it really necessary ?\n  return position;\n};\nAuxUnitLayout.computeCoords = function (mainObj, cy, unit) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var location = mainObj.location;\n  var node = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (location === \"top\" || location === \"bottom\") {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n      // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  } //We don't have the right or left addition cases yet -- Now we have it\n  else {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n      // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  }\n};\nAuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {\n  var index = mainObj.units.indexOf(unit);\n  mainObj.units.splice(index, 1);\n  //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  /*AuxUnitLayout.update(mainObj, cy, true);\r\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\r\n    // set a minimum size according to both sides on the same orientation\r\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\r\n  }*/\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  parentNode.data('border-width', parentNode.data('border-width'));\n};\n\n/**\r\n * reorder boxes using their defined positions. From left to right and top to bottom.\r\n * this ensures that their order in the layout's list corresponds to the reality of the map.\r\n */\nAuxUnitLayout.reorderFromPositions = function (mainObj, cy) {\n  mainObj.units.sort(function (a, b) {\n    if (mainObj.location == \"top\" || mainObj.location == \"bottom\") {\n      if (a.bbox.x < b.bbox.x) {\n        return -1;\n      }\n      if (a.bbox.x > b.bbox.x) {\n        return 1;\n      }\n    } else {\n      if (a.bbox.y < b.bbox.y) {\n        return -1;\n      }\n      if (a.bbox.y > b.bbox.y) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n  /*AuxUnitLayout.updateLengthCache(mainObj, cy);\r\n  AuxUnitLayout.update(mainObj, cy, true);*/\n};\n\n/**\r\n * use a cached list to determine what is the length needed to draw x aux units.\r\n * can then be compared against the parent node's dimensions, to decide how many\r\n * aux units to draw.\r\n */\nAuxUnitLayout.updateLengthCache = function (mainObj, cy) {\n  mainObj.renderLengthCache = [0];\n  var previous = AuxUnitLayout.getOuterMargin(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var currentLength;\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      currentLength = mainObj.units[i].bbox.w;\n    } else {\n      currentLength = mainObj.units[i].bbox.h;\n    }\n    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));\n    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);\n  }\n};\n\n/**\r\n * Use the cached precomputed lengths to decide how many units we are capable of drawing,\r\n * considering the size of the parent node.\r\n * The number returned says: we are able to draw the N first units of the lists.\r\n * Unused for now.\r\n */\nAuxUnitLayout.getDrawableUnitAmount = function (mainObj) {\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // bypass all this\n    return mainObj.units.length;\n  }\n\n  // get the length of the side on which we draw\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n  // loop over the cached precomputed lengths\n  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {\n    if (mainObj.renderLengthCache[i] > availableSpace) {\n      // stop if we overflow\n      return i - 1;\n    }\n  }\n  return mainObj.units.length;\n};\nAuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {\n  // get the length of the side on which we draw\n\n  var availableSpace;\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n    // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners\n    if (AuxUnitLayout.getParentNode(mainObj, cy).data(\"class\") == \"compartment\") availableSpace *= 0.8;\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  }\n\n  // there is always n+1 elements in the cachedLength for n units\n  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);\n  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?\n    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) // is there no limit? or are we under that limit?\n    || alwaysShowAuxUnits) {\n      // do we always want to show everything regardless?\n      mainObj.units[i].isDisplayed = true;\n    } else {\n      mainObj.units[i].isDisplayed = false;\n    }\n  }\n};\nAuxUnitLayout.getUsedWidth = function (node, tb) {\n  var units = tb.units;\n  var totalWidth = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalWidth += units[i].bbox.w;\n  }\n  return totalWidth;\n};\nAuxUnitLayout.getUsedHeight = function (node, tb) {\n  var units = tb.units;\n  var totalHeight = 0;\n  for (var i = 0; i < units.length; i++) {\n    totalHeight += units[i].bbox.h;\n  }\n  return totalHeight;\n};\nAuxUnitLayout.getUsedLengthTB = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.getUsedLengthLR = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\nAuxUnitLayout.setCurrentGap = function (location, value) {\n  if (location === \"top\") {\n    AuxUnitLayout.currentTopUnitGap = value;\n  } else if (location === \"bottom\") {\n    AuxUnitLayout.currentBottomUnitGap = value;\n  } else if (location === \"right\") {\n    AuxUnitLayout.currentRightUnitGap = value;\n  } else {\n    AuxUnitLayout.currentLeftUnitGap = value;\n  }\n};\nAuxUnitLayout.getCurrentGap = function (location) {\n  if (location === \"top\") {\n    return AuxUnitLayout.currentTopUnitGap;\n  } else if (location === \"bottom\") {\n    return AuxUnitLayout.currentBottomUnitGap;\n  } else if (location === \"right\") {\n    return AuxUnitLayout.currentRightUnitGap;\n  } else {\n    return AuxUnitLayout.currentLeftUnitGap;\n  }\n};\nAuxUnitLayout.checkFit = function (node, cy, forceCheck) {\n  var fitLocations = [];\n  for (var location in node.data('auxunitlayouts')) {\n    if (forceCheck !== undefined && location !== forceCheck) {\n      continue;\n    }\n    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {\n      fitLocations.push(location);\n      continue;\n    }\n    var unit = node.data('auxunitlayouts')[location];\n    var units = unit.units;\n    if (units.length === 0) {\n      continue;\n    }\n    var firstUnit = units[0];\n    var lastUnit = units[units.length - 1];\n    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);\n    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n    var gap = AuxUnitLayout.getCurrentGap(location);\n    var padding = node.padding();\n    if (units.length > 0) {\n      //For any case of removal\n      if (location === \"top\" || location === \"bottom\") {\n        var parentX1 = node.position().x - node.width() / 2 - padding;\n        var parentX2 = node.position().x + node.width() / 2 + padding;\n        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;\n        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;\n        if (parentX2 < lastX2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {\r\n            fitLocations.push(location);\r\n        } */\n      } else {\n        var parentY1 = node.position().y - node.height() / 2 - padding;\n        var parentY2 = node.position().y + node.height() / 2 + padding;\n        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;\n        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;\n        if (parentY2 < lastY2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {\r\n            fitLocations.push(location);\r\n        } */\n      }\n    }\n  }\n  return fitLocations;\n};\nAuxUnitLayout.setIdealGap = function (node, location) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var estimatedGap;\n  var auxUnit = node.data('auxunitlayouts')[location];\n  if (auxUnit === undefined) {\n    return 0;\n  }\n  if (auxUnit.units.length <= 0 || !auxUnit.units) {\n    return 0;\n  }\n  var units = auxUnit.units;\n  if (location === \"top\" || location === \"bottom\") {\n    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n\n    //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.w + estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } else {\n    //Find total left length\n    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n    //Compare the side lengths\n    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    }\n    //Else scale by using available space, reducing margins and gaps.\n    //Check if new gap is enough to fit\n    var usedLength = estimatedGap;\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.h + estimatedGap;\n    }\n    //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n  }\n  AuxUnitLayout.setCurrentGap(location, estimatedGap);\n};\nAuxUnitLayout.fitUnits = function (node, cy, locations) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentX2 = position.x + parentWidth / 2 + padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var parentY2 = position.y + parentHeight / 2 + padding;\n\n  //Get Parent node and find parent width\n\n  var estimatedGap;\n  for (var index = 0; index < locations.length; index++) {\n    var location = locations[index];\n    var auxUnit = node.data('auxunitlayouts')[location];\n    if (auxUnit === undefined) {\n      continue;\n    }\n    if (auxUnit.units.length <= 0 || !auxUnit.units) {\n      continue;\n    }\n    var units = auxUnit.units;\n    if (location === \"top\" || location === \"bottom\") {\n      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n\n      //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.w + estimatedGap;\n      }\n      AuxUnitLayout.setCurrentGap(location, estimatedGap);\n    } else {\n      //Find total left length\n      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit);\n      //Compare the side lengths\n      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      }\n      //Else scale by using available space, reducing margins and gaps.\n      //Check if new gap is enough to fit\n      var usedLength = estimatedGap;\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.h + estimatedGap;\n      }\n      //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n    }\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  }\n\n  //TODO find a way to elimate this redundancy to update info-box positions\n  node.data('border-width', node.data('border-width'));\n};\n\n// Calculate total length used in a side\n// TODO find a way to refactor, remove ugliness of top-bottom/left-right.\nAuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);\n  var finalLengthUsed = lengthUsed;\n  var unitGap = AuxUnitLayout.getUnitGap(mainObj);\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  for (var i = 0; i < mainObj.units.length; i++) {\n    // change the coordinate system of the auxiliary unit according to the chosen layout\n    var auxUnit = mainObj.units[i];\n    if (auxUnit.coordType != \"relativeToSide\" || doForceUpdate) {\n      if (auxUnit.coordType == \"relativeToCenter\" || doForceUpdate) {\n        if (AuxUnitLayout.isTorB(mainObj)) {\n          //auxUnit.bbox.y = 0;\n          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;\n        } else {\n          //auxUnit.bbox.x = 0;\n          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;\n        }\n      }\n      auxUnit.coordType = \"relativeToSide\";\n    }\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      //auxUnit.bbox.y = 0;\n      lengthUsed += auxUnit.bbox.w + unitGap;\n    } else {\n      //auxUnit.bbox.x = 0;\n      lengthUsed += auxUnit.bbox.h + unitGap;\n    }\n    if (auxUnit.isDisplayed) {\n      finalLengthUsed = lengthUsed;\n    }\n  }\n  // adjust the length, should be composed of outerMargin on the end, not unitGap\n  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);\n  mainObj.lengthUsed = finalLengthUsed;\n};\nAuxUnitLayout.draw = function (mainObj, cy, context) {\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var auxUnit = mainObj.units[i];\n    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);\n  }\n};\nAuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {\n  var location = unit.anchorSide;\n  var posX = unit.bbox.x;\n  var posY = unit.bbox.y;\n  if (!parentNode.data('auxunitlayouts')[oldLocation]) {\n    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);\n  }\n  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];\n  var deleteUnits = oldAuxUnit.units;\n\n  //Delete from old location\n  var deleteIndex;\n  for (var i = 0; i < deleteUnits.length; i++) {\n    if (deleteUnits[i] === unit) {\n      deleteIndex = i;\n      break;\n    }\n  }\n  deleteUnits.splice(deleteIndex, 1);\n  //If new is not constructed contruct interval\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];\n  var insertUnits = insertAuxUnit.units;\n  var index = 0;\n  //Insert into new unit array\n  if (location === \"top\" || location === \"bottom\") {\n    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {\n      index++;\n    }\n  } else {\n    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {\n      index++;\n    }\n  }\n  insertUnits.splice(index, 0, unit);\n};\nAuxUnitLayout.isEmpty = function (mainObj) {\n  return mainObj.units.length == 0;\n};\nAuxUnitLayout.unitCount = function (mainObj) {\n  return mainObj.units.length;\n};\nAuxUnitLayout.unitLength = function (mainObj) {\n  var units = mainObj.units;\n  var rightMostPoint = 0;\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n    if (box.x + box.w / 2 > rightMostPoint) {\n      rightMostPoint = box.x + box.w / 2;\n    }\n  }\n  return rightMostPoint;\n};\nAuxUnitLayout.unitLengthRightLeft = function (mainObj) {\n  var units = mainObj.units;\n  var topMostPoint = 0;\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n    if (box.y + box.h / 2 > topMostPoint) {\n      topMostPoint = box.y + box.h / 2;\n    }\n  }\n  return topMostPoint;\n};\n\n//Get Unit Gaps\nAuxUnitLayout.getCurrentTopGap = function () {\n  return AuxUnitLayout.currentTopUnitGap;\n};\nAuxUnitLayout.getCurrentBottomGap = function () {\n  return AuxUnitLayout.currentBottomUnitGap;\n};\nAuxUnitLayout.getCurrentLeftGap = function () {\n  return AuxUnitLayout.currentLeftUnitGap;\n};\nAuxUnitLayout.getCurrentRightGap = function () {\n  return AuxUnitLayout.currentRightUnitGap;\n};\n\n/**\r\n * Auto choose the next layout. To add a new aux unit, for example.\r\n */\nAuxUnitLayout.selectNextAvailable = function (node) {\n  var top = node.data('auxunitlayouts').top;\n  var bottom = node.data('auxunitlayouts').bottom;\n  var resultLocation = \"top\";\n  // start by adding on top if free\n  if (!top || AuxUnitLayout.isEmpty(top)) {\n    resultLocation = \"top\";\n  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {\n    resultLocation = \"bottom\";\n  } else {\n    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {\n      resultLocation = \"top\";\n    } else {\n      resultLocation = \"bottom\";\n    }\n  }\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n  return resultLocation;\n};\nAuxUnitLayout.selectNextAvailableLeftRight = function (node) {\n  var left = node.data('auxunitlayouts').left;\n  var right = node.data('auxunitlayouts').right;\n  var resultLocation = \"left\";\n  // start by adding on left if free\n  if (!left || AuxUnitLayout.isEmpty(left)) {\n    resultLocation = \"left\";\n  } else if (!right || AuxUnitLayout.isEmpty(right)) {\n    resultLocation = \"right\";\n  } else {\n    // choose the side (left or right) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLengthRightLeft(left) <= AuxUnitLayout.unitLengthRightLeft(right)) {\n      resultLocation = \"left\";\n    } else {\n      resultLocation = \"right\";\n    }\n  }\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n  return resultLocation;\n};\nAuxUnitLayout.resizeParent = function (mainObj, cy, length) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    if (parentNode.data('bbox').w < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"centerright\", parentNode]);\n      parentNode.data('bbox').w = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"centerright\", parentNode]);\n    }\n  } else {\n    if (parentNode.data('bbox').h < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"bottomcenter\", parentNode]);\n      parentNode.data('bbox').h = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"bottomcenter\", parentNode]);\n    }\n  }\n};\nAuxUnitLayout.isTorB = function (mainObj) {\n  return mainObj.location == \"top\" || mainObj.location == \"bottom\";\n};\nAuxUnitLayout.isLorR = function (mainObj) {\n  return mainObj.location == \"left\" || mainObj.location == \"right\";\n};\nAuxUnitLayout.setParentMinLength = function (mainObj, cy) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  var parentLayouts = parentNode.data('auxunitlayouts');\n  switch (mainObj.location) {\n    case \"top\":\n      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;\n      break;\n    case \"bottom\":\n      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;\n      break;\n    case \"left\":\n      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;\n      break;\n    case \"right\":\n      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;\n      break;\n  }\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));\n  } else {\n    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));\n  }\n};\nAuxUnitLayout.getOuterMargin = function (mainObj) {\n  if (typeof mainObj.outerMargin !== \"undefined\" && mainObj.outerMargin !== null) {\n    return mainObj.outerMargin;\n  } else {\n    return AuxUnitLayout.outerMargin;\n  }\n};\nAuxUnitLayout.getUnitGap = function (mainObj) {\n  if (typeof mainObj.unitGap !== \"undefined\" && mainObj.unitGap !== null) {\n    return mainObj.unitGap;\n  } else {\n    return AuxUnitLayout.unitGap;\n  }\n};\nAuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\" && mainObj.alwaysShowAuxUnits !== null) {\n    return mainObj.alwaysShowAuxUnits;\n  } else {\n    return AuxUnitLayout.alwaysShowAuxUnits;\n  }\n};\nAuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\" && mainObj.maxUnitDisplayed !== null) {\n    return mainObj.maxUnitDisplayed;\n  } else {\n    return AuxUnitLayout.maxUnitDisplayed;\n  }\n};\n\n/*\r\n *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.\r\n */\nAuxUnitLayout.copy = function (mainObj, cy, newParent) {\n  var newLayout = AuxUnitLayout.construct(newParent);\n  // Copying the same reference to units would be inconsistent.\n  // Duplicating owned units goes beyonnd the scope, because we need to assign\n  // ids that are tied to the global cound of units of a node.\n  // So duplicating units is something that should be properly done outside of this function.\n  // TODO that is a bit dirty, find a nice modular way to arrange that\n  newLayout.units = [];\n  newLayout.location = mainObj.location;\n  newLayout.alignment = mainObj.alignment;\n  AuxUnitLayout.setParentNodeRef(newLayout, newParent);\n  newLayout.renderLengthCache = mainObj.renderLengthCache;\n  newLayout.lengthUsed = mainObj.lengthUsed;\n  if (typeof mainObj.outerMargin !== \"undefined\") {\n    newLayout.outerMargin = mainObj.outerMargin;\n  }\n  if (typeof mainObj.unitGap !== \"undefined\") {\n    newLayout.unitGap = mainObj.unitGap;\n  }\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\") {\n    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;\n  }\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\") {\n    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;\n  }\n  return newLayout;\n};\nns.AuxUnitLayout = AuxUnitLayout;\n// -------------- END AuxUnitLayout -------------- //\n\nmodule.exports = ns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVMsQ0FBQ2pHLGlCQUFpQixHQUFHM0ssT0FBTyxDQUFDMkssaUJBQWlCO0VBQ3ZEaUcsU0FBUyxDQUFDaEcsVUFBVSxHQUFHNUssT0FBTyxDQUFDNEssVUFBVTtFQUN6QyxJQUFHLE9BQU81SyxPQUFPLENBQUM2SyxXQUFXLEtBQUssV0FBVyxFQUFFO0lBQzdDK0YsU0FBUyxDQUFDL0YsV0FBVyxHQUFHN0ssT0FBTyxDQUFDNkssV0FBVztFQUM3QztFQUNBLElBQUcsT0FBTzdLLE9BQU8sQ0FBQytLLE9BQU8sS0FBSyxXQUFXLEVBQUU7SUFDekM2RixTQUFTLENBQUM3RixPQUFPLEdBQUcvSyxPQUFPLENBQUMrSyxPQUFPO0VBQ3JDO0VBQ0EsSUFBRyxPQUFPL0ssT0FBTyxDQUFDb0wsa0JBQWtCLEtBQUssV0FBVyxFQUFFO0lBQ3BEd0YsU0FBUyxDQUFDeEYsa0JBQWtCLEdBQUdwTCxPQUFPLENBQUNvTCxrQkFBa0I7RUFDM0Q7RUFDQSxJQUFHLE9BQU9wTCxPQUFPLENBQUNxTCxnQkFBZ0IsS0FBSyxXQUFXLEVBQUU7SUFDbER1RixTQUFTLENBQUN2RixnQkFBZ0IsR0FBR3JMLE9BQU8sQ0FBQ3FMLGdCQUFnQjtFQUN2RDtFQUNBLE9BQU91RixTQUFTO0FBQ2xCLENBQUM7QUFFRDdSLEVBQUUsQ0FBQ2dJLGFBQWEsR0FBR0EsYUFBYTtBQUNoQzs7QUFFQThKLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHL1IsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3NiZ252aXovLi9zcmMvdXRpbGl0aWVzL2NsYXNzZXMuanM/ZGQ5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxudmFyIGxpYnMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcclxudmFyIGpRdWVyeSA9ICQgPSBsaWJzLmpRdWVyeTtcclxudmFyIGN5dG9zY2FwZSA9IGxpYnMuY3l0b3NjYXBlO1xyXG4vLyB2YXIgb3B0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9vcHRpb24tdXRpbGl0aWVzJyk7XHJcbi8vIHZhciBvcHRpb25zID0gb3B0aW9uVXRpbGl0aWVzLmdldE9wdGlvbnMoKTtcclxudmFyIHRydW5jYXRlID0gcmVxdWlyZSgnLi90ZXh0LXV0aWxpdGllcycpLnRydW5jYXRlO1xyXG4vLyBvbmx5IGZ1bmN0aW9ucyBub3QgZGVwZW5kaW5nIG9uIHRoZSBpbnN0YW5jZXMgY2FuIGJlIHVzZWQgaW4gdGhpcyB3YXlcclxuLy8gZS5nLiBlbGVtZW50VXRpbGl0aWVzLmdlbmVyYXRlU3RhdGVWYXJJZCgpXHJcbnZhciBlbGVtZW50VXRpbGl0aWVzID0gcmVxdWlyZSgnLi9lbGVtZW50LXV0aWxpdGllcy1mYWN0b3J5JykoKTtcclxuXHJcbnZhciBucyA9IHt9O1xyXG5cclxuLy8gS2VlcCBpbiBtaW5kIHRoYXQgZm9yIGVhY2ggbWV0aG9kICdtYWluT2JqJyBwYXJhbWV0ZXIgcmVmZXJzIHRvIHRoZSBtYWluIG9iamVjdCBmb3Igd2hpY2ggdGhlIG9wZXJhdGlvbiB3aWxsIGJlIGRvbmUuXHJcbi8vIEl0IHJlZmVycyB0byB0aGUgb2JqZWN0IHRoYXQgY291bGQgYmUgcmVmZXJlZCBieSAndGhpcycgd2hpbGUgdGhlcmUgd2FzIHByb3RvdHlwaW5nIGluIHRoZXNlIGNsYXNzZXMuXHJcbi8vIEZvciBleGFtcGxlIEF1eGlsaWFyeVVuaXQuY29weShtYWluT2JqLCBleGlzdGluZ0luc3RhbmNlLCBuZXdQYXJlbnQsIG5ld0lkKSBjb3BpZXMgdGhlIHZhcmlhYmxlIHBhc3NlZCBieSAnbWFpbk9iaidcclxuLy8gcGFyYW1ldGVyIGFuZCBpbiB0aGlzIGNhc2UgJ21haW5PYmonIGNhbiBiZSBjb25zaWRlcmVkIGFzIGB0aGUgb2JqZWN0IHRvIGJlIGNvcGllZGBcclxuXHJcbi8vIFRoZSBvbGQgY29uc3RydWN0b3JzIGFyZSByZXBsYWNlZCBieSAnY29uc3RydWN0KCknIG1ldGhvZHMgd2hpbGUgcmVtb3ZpbmcgcHJvdG90eXBpbmcgZnJvbSB0aGUgY2xhc3Nlcy5cclxuXHJcbi8vICdBdXhpbGlhcnlVbml0JyBhbmQgJ0F1eFVuaXRMYXlvdXQnIG9iamVjdHMga2VlcCB0aGUgaWQgb2YgdGhlaXIgcGFyZW50IG5vZGVzIGluc3RlYWQgb2YgdGhlIG5vZGVzIHRoZW1zZWx2ZXMgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcy5cclxuLy8gVG8gbWFpbnRhaW4gdGhpcyBwcm9wZXJ0eSByZWxhdGVkIG1ldGhvZHMgdG8gZ2V0IGFuZCBzZXQgcGFyZW50IG5vZGVzIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgZGlyZWN0bHkgYWNjZXNzaW5nIHRoZSBwYXJlbnQgb2JqZWN0LlxyXG5cclxuLy8gQWxzbywgdGhlcmUgaXMgYSBwYXJlbnQtY2hpbGQgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIEF1eGlsaWFyeVVuaXQgY2xhc3MgYW5kIFN0YXRlVmFyaWFibGUgYW5kIFVuaXRPZkluZm9ybWF0aW9uXHJcbi8vIGNsYXNzZXMuIFdoaWxlIGNhbGxpbmcgYSBtZXRob2Qgb2YgQXV4aWxpYXJ5VW5pdCBjbGFzcyB0aGF0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGZyb21cclxuLy8gdGhlIGFjdHVhbCBjbGFzcyBvZiByZWxhdGVkIGF1eGlsYXJ5IHVuaXQgKFdvdWxkIGJlIFN0YXRlVmFyaWFibGUgb3IgVW5pdE9mSW5mb3JtYXRpb24uIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnQgY29uZmxpY3Rpb25zIHdoZW4gdGhlXHJcbi8vIG1ldGhvZHMgb2YgQXV4aWxpYXJ5VW5pdCBjbGFzcyBpcyBvdmVycmlkZW4gYnkgdGhlc2UgY2xhc3NlcykuIFRoYXQgY2xhc3MgY2FuIGJlIG9idGFpbmVkIGJ5IGNhbGxpbmcgJ2dldEF1eFVuaXRDbGFzcyhtYWluT2JqKSdcclxuLy8gbWV0aG9kIGZvciB0aGUgYXV4aWxhcnkgdW5pdCBvYmplY3QuXHJcblxyXG52YXIgZ2V0QXV4VW5pdENsYXNzID0gZnVuY3Rpb24odW5pdCkge1xyXG4gIC8vIFVuaXQgcGFyYW1ldGVyIG1heSBwYXNzIHRoZSB1bml0IGl0c2VsZiBvciB0aGUgdHlwZSBvZiB0aGUgdW5pdCBjaGVjayBpdFxyXG4gIHZhciB1bml0VHlwZSA9IHR5cGVvZiB1bml0ID09PSAnc3RyaW5nJyA/IHVuaXQgOiB1bml0LmNsYXp6O1xyXG4gIC8vIFJldHJpZXZlIGFuZCByZXR1cm4gdW5pdCBjbGFzcyBhY2NvcmRpbmcgdG8gdGhlIHVuaXQgdHlwZVxyXG4gIHZhciBjbGFzc05hbWUgPSAnJ1xyXG4gIHN3aXRjaCAodW5pdFR5cGUpIHtcclxuICAgIGNhc2UgXCJzdGF0ZSB2YXJpYWJsZVwiOlxyXG4gICAgICBjbGFzc05hbWUgPSBcIlN0YXRlVmFyaWFibGVcIjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwicmVzaWR1ZSB2YXJpYWJsZVwiOlxyXG4gICAgICBjbGFzc05hbWUgPSBcIlJlc2lkdWVWYXJpYWJsZVwiO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJiaW5kaW5nIHJlZ2lvblwiOlxyXG4gICAgICBjbGFzc05hbWUgPSBcIkJpbmRpbmdSZWdpb25cIjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwidW5pdCBvZiBpbmZvcm1hdGlvblwiOlxyXG4gICAgICBjbGFzc05hbWUgPSBcIlVuaXRPZkluZm9ybWF0aW9uXCI7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuXHJcbiAgLy92YXIgY2xhc3NOYW1lID0gdW5pdFR5cGUgPT09ICdzdGF0ZSB2YXJpYWJsZScgPyAnU3RhdGVWYXJpYWJsZScgOiAncmVzaWR1ZSB2YXJpYWJsZSc/IFwiUmVzaWR1ZVZhcmlhYmxlXCI6J1VuaXRPZkluZm9ybWF0aW9uJztcclxuICByZXR1cm4gbnNbY2xhc3NOYW1lXTtcclxufTtcclxuXHJcbm5zLmdldEF1eFVuaXRDbGFzcyA9IGdldEF1eFVuaXRDbGFzczsgLy8gRXhwb3NlIGdldEF1eFVuaXRDbGFzcyBtZXRob2RcclxuXHJcbnZhciBBdXhpbGlhcnlVbml0ID0ge307XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLSBBdXhpbGlhcnlVbml0IC0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vIGNvbnN0cnVjdHMgYSBuZXcgYXV4aWxpYXJ5IHVuaXQgb2JqZWN0IGFuZCByZXR1cm5zIGl0XHJcbkF1eGlsaWFyeVVuaXQuY29uc3RydWN0ID0gZnVuY3Rpb24ocGFyZW50KSB7XHJcbiAgdmFyIG9iaiA9IHt9O1xyXG5cclxuICBBdXhpbGlhcnlVbml0LnNldFBhcmVudFJlZihvYmosIHBhcmVudCk7XHJcblxyXG4gIG9iai5pZCA9IG51bGw7XHJcbiAgb2JqLmJib3ggPSBudWxsOyAgXHJcbiAgb2JqLmFuY2hvclNpZGUgPSBudWxsO1xyXG4gIG9iai5pc0Rpc3BsYXllZCA9IGZhbHNlO1xyXG4gIG9iai5zdHlsZSA9IG51bGw7XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbkF1eGlsaWFyeVVuaXQuZ2V0UGFyZW50ID0gZnVuY3Rpb24obWFpbk9iaiwgY3kpIHtcclxuICB2YXIgcGFyZW50ID0gbWFpbk9iai5wYXJlbnQ7XHJcbiAgLy8gSWYgcGFyZW50IHZhcmlhYmxlIHN0b3JlcyB0aGUgaWQgb2YgcGFyZW50IGluc3RlYWQgb2YgdGhlIGFjdHVhbCBwYXJlbnQgZ2V0IHRoZSBhY3R1YWwgcGFyZW50IGJ5IGlkXHJcbiAgaWYgKHR5cGVvZiBwYXJlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICByZXR1cm4gY3kuZ2V0RWxlbWVudEJ5SWQocGFyZW50KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwYXJlbnQ7XHJcbn07XHJcblxyXG5BdXhpbGlhcnlVbml0LnNldFBhcmVudFJlZiA9IGZ1bmN0aW9uKG1haW5PYmosIG5ld1BhcmVudCkge1xyXG4gIGlmIChtYWluT2JqICYmIG5ld1BhcmVudCkge1xyXG4gICAgLy8gUmVmZXJlbmNlIHRvIGlkIGluc3RlYWQgb2YgdGhlIG5vZGUgaXRzZWxmIHRvIGF2YW9pZCBjaXJjdWxhciByZWZlcmVuY2VcclxuICAgIG1haW5PYmoucGFyZW50ID0gdHlwZW9mIG5ld1BhcmVudCA9PT0gJ3N0cmluZycgPyBuZXdQYXJlbnQgOiBuZXdQYXJlbnQuaWQoKTtcclxuICB9XHJcbn1cclxuXHJcbkF1eGlsaWFyeVVuaXQuY2hlY2tQb2ludCA9IGZ1bmN0aW9uKHgsIHksIG5vZGUsIHRocmVzaG9sZCkge1xyXG4gIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xyXG4gIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xyXG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XHJcbiAgdmFyIHN0YXRlQW5kSW5mb3MgPSBub2RlLl9wcml2YXRlLmRhdGEuc3RhdGVzYW5kaW5mb3M7XHJcbiAgdmFyIGN5QmFzZU5vZGVTaGFwZXMgPSBjeXRvc2NhcGUuYmFzZU5vZGVTaGFwZXM7XHJcbi8vICAgIHRocmVzaG9sZCA9IHBhcnNlRmxvYXQodGhyZXNob2xkKTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZUFuZEluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgc3RhdGUgPSBzdGF0ZUFuZEluZm9zW2ldO1xyXG5cclxuICAgIGlmICghc3RhdGUuaXNEaXNwbGF5ZWQpIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHN0YXRlV2lkdGggPSBwYXJzZUZsb2F0KHN0YXRlLmJib3gudykgKyB0aHJlc2hvbGQ7XHJcbiAgICB2YXIgc3RhdGVIZWlnaHQgPSBwYXJzZUZsb2F0KHN0YXRlLmJib3guaCkgKyB0aHJlc2hvbGQ7XHJcbiAgICB2YXIgY29vcmQgPSBBdXhpbGlhcnlVbml0LmdldEFic29sdXRlQ29vcmQoc3RhdGUsIG5vZGUuY3koKSk7XHJcbiAgICB2YXIgc3RhdGVDZW50ZXJYID0gY29vcmQueDtcclxuICAgIHZhciBzdGF0ZUNlbnRlclkgPSBjb29yZC55O1xyXG4gICAgdmFyIGNoZWNrUG9pbnQ7XHJcblxyXG4gICAgaWYgKHN0YXRlLmNsYXp6ID09IFwic3RhdGUgdmFyaWFibGVcIikge1xyXG4gICAgICBjaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcImVsbGlwc2VcIl0uY2hlY2tQb2ludChcclxuICAgICAgICAgICAgICB4LCB5LCBwYWRkaW5nLCBzdGF0ZVdpZHRoLCBzdGF0ZUhlaWdodCwgc3RhdGVDZW50ZXJYLCBzdGF0ZUNlbnRlclkpO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5jbGF6eiA9PSBcInVuaXQgb2YgaW5mb3JtYXRpb25cIikge1xyXG4gICAgICBjaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcInJvdW5kcmVjdGFuZ2xlXCJdLmNoZWNrUG9pbnQoXHJcbiAgICAgICAgICAgICAgeCwgeSwgcGFkZGluZywgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZKTtcclxuICAgIH1lbHNlIGlmKCBzdGF0ZS5jbGF6eiA9PSBcInJlc2lkdWUgdmFyaWFibGVcIikge1xyXG4gICAgICBjaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcImVsbGlwc2VcIl0uY2hlY2tQb2ludChcclxuICAgICAgICAgICAgICB4LCB5LCBwYWRkaW5nLCBzdGF0ZVdpZHRoLCBzdGF0ZUhlaWdodCwgc3RhdGVDZW50ZXJYLCBzdGF0ZUNlbnRlclkpO31cclxuICAgIGVsc2UgaWYoIHN0YXRlLmNsYXp6ID09IFwiYmluZGluZyByZWdpb25cIikge1xyXG4gICAgICBjaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcInJvdW5kcmVjdGFuZ2xlXCJdLmNoZWNrUG9pbnQoXHJcbiAgICAgICAgICAgICAgeCwgeSwgcGFkZGluZywgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZKTt9XHJcblxyXG4gICAgaWYgKGNoZWNrUG9pbnQgPT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcbi8qXHJcbiAqIFJldHVybiBhIG5ldyBBdXhpbGlhcnlVbml0IG9iamVjdC4gQSBuZXcgcGFyZW50IHJlZmVyZW5jZSBhbmQgbmV3IGlkIGNhblxyXG4gKiBvcHRpb25uYWxseSBiZSBwYXNzZWQuXHJcbiAqL1xyXG5BdXhpbGlhcnlVbml0LmNvcHkgPSBmdW5jdGlvbiAobWFpbk9iaiwgY3ksIGV4aXN0aW5nSW5zdGFuY2UsIG5ld1BhcmVudCwgbmV3SWQpIHtcclxuICB2YXIgbmV3VW5pdCA9IGV4aXN0aW5nSW5zdGFuY2UgPyBleGlzdGluZ0luc3RhbmNlIDogQXV4aWxpYXJ5VW5pdC5jb25zdHJ1Y3QoKTtcclxuXHJcbiAgdmFyIHBhcmVudFRvU2V0ID0gbmV3UGFyZW50IHx8IGdldEF1eFVuaXRDbGFzcyhtYWluT2JqKS5nZXRQYXJlbnQobWFpbk9iaiwgY3kpO1xyXG4gIEF1eGlsaWFyeVVuaXQuc2V0UGFyZW50UmVmKG5ld1VuaXQsIHBhcmVudFRvU2V0KTtcclxuXHJcbiAgbmV3VW5pdC5pZCA9IG5ld0lkID8gbmV3SWQgOiBtYWluT2JqLmlkO1xyXG4gIG5ld1VuaXQuYmJveCA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIG1haW5PYmouYmJveCk7XHJcbiAgbmV3VW5pdC5jb29yZFR5cGUgPSBtYWluT2JqLmNvb3JkVHlwZTtcclxuICBuZXdVbml0LmFuY2hvclNpZGUgPSBtYWluT2JqLmFuY2hvclNpZGU7XHJcbiAgbmV3VW5pdC5pc0Rpc3BsYXllZCA9IG1haW5PYmouaXNEaXNwbGF5ZWQ7XHJcbiAgbmV3VW5pdC5zdHlsZSA9IG1haW5PYmouc3R5bGU7XHJcbiAgcmV0dXJuIG5ld1VuaXQ7XHJcbn07XHJcblxyXG4vLyBkcmF3IHRoZSBhdXhpbGlhcnkgdW5pdCBhdCBpdHMgcG9zaXRpb25cclxuQXV4aWxpYXJ5VW5pdC5kcmF3ID0gZnVuY3Rpb24obWFpbk9iaiwgY3ksIGNvbnRleHQpIHtcclxuICB2YXIgdW5pdENsYXNzID0gZ2V0QXV4VW5pdENsYXNzKG1haW5PYmopO1xyXG4gIHZhciBjb29yZHMgPSB1bml0Q2xhc3MuZ2V0QWJzb2x1dGVDb29yZChtYWluT2JqLCBjeSk7XHJcblxyXG4gIHVuaXRDbGFzcy5kcmF3U2hhcGUobWFpbk9iaiwgY3ksIGNvbnRleHQsIGNvb3Jkcy54LCBjb29yZHMueSk7XHJcbiAgaWYgKHVuaXRDbGFzcy5oYXNUZXh0KG1haW5PYmosIGN5KSkge1xyXG4gICAgdW5pdENsYXNzLmRyYXdUZXh0KG1haW5PYmosIGN5LCBjb250ZXh0LCBjb29yZHMueCwgY29vcmRzLnkpO1xyXG4gIH1cclxuICBtYWluT2JqLmlzRGlzcGxheWVkID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIHRvIGJlIGltcGxlbWVudGVkIGJ5IGNoaWxkcmVuXHJcbkF1eGlsaWFyeVVuaXQuZ2V0VGV4dCA9IGZ1bmN0aW9uKG1haW5PYmosIGN5KSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiQWJzdHJhY3QgbWV0aG9kIVwiKTtcclxufTtcclxuQXV4aWxpYXJ5VW5pdC5oYXNUZXh0ID0gZnVuY3Rpb24obWFpbk9iaiwgY3kpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdCBtZXRob2QhXCIpO1xyXG59O1xyXG5BdXhpbGlhcnlVbml0LmRyYXdTaGFwZSA9IGZ1bmN0aW9uKG1haW5PYmosIGN5LCBjb250ZXh0LCB4LCB5KSB7XHJcbiAgdmFyIHN0eWxlID0gbWFpbk9iai5zdHlsZTtcclxuICBjeXRvc2NhcGUuc2Jnbi5kcmF3SW5mb0JveChjb250ZXh0LCB4LCB5LCBtYWluT2JqLmJib3gudywgbWFpbk9iai5iYm94LmgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlWydzaGFwZS1uYW1lJ10pO1xyXG5cclxuICB2YXIgdG1wX2N0eHQgPSBjb250ZXh0LmZpbGxTdHlsZTtcclxuICBjb250ZXh0LmZpbGxTdHlsZSA9IHN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ107XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgY29udGV4dC5maWxsU3R5bGUgPSB0bXBfY3R4dDtcclxuXHJcbiAgdmFyIHBhcmVudCA9IGdldEF1eFVuaXRDbGFzcyhtYWluT2JqKS5nZXRQYXJlbnQobWFpbk9iaiwgY3kpO1xyXG4gIHZhciBib3JkZXJTdHlsZSA9IHN0eWxlLmRhc2hlZCA/ICdkYXNoZWQnIDogdW5kZWZpbmVkO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHN0eWxlWydib3JkZXItd2lkdGgnXTtcclxuICAvLyBTZWxlY3RlZCBub2RlcyBoYXZlIGEgc3BlY2lmaWMgYm9yZGVyIGNvbG9yIHNvIGluZm9ib3ggc2hvdWxkIGhhdmUgdGhlIHNhbWVcclxuICAvLyBib3JkZXIgY29sb3Igd2hlbiB0aGUgbm9kZSBpcyBzZWxlY3RlZC4gTWF5IG5lZWQgdG8gYmUgdXBkYXRlZCBpZiBzdHlsZSBvZlxyXG4gIC8vIHNlbGVjdGVkIG5vZGVzIGlzIHVwZGF0ZWQgaW4gYSBkaWZmZXJlbnQgd2F5LlxyXG4gIHZhciBib3JkZXJDb2xvciA9IHBhcmVudC5zZWxlY3RlZCgpID8gbnVsbCA6IHN0eWxlWydib3JkZXItY29sb3InXTtcclxuICBjeXRvc2NhcGUuc2Jnbi5kcmF3Qm9yZGVyKCB7IGNvbnRleHQsIG5vZGU6IHBhcmVudCwgYm9yZGVyU3R5bGUsIGJvcmRlckNvbG9yLCBib3JkZXJXaWR0aCB9ICk7XHJcbn07XHJcblxyXG4vLyBkcmF3IHRoZSBzdGF0ZXNPckluZm8ncyBsYWJlbCBhdCBnaXZlbiBwb3NpdGlvblxyXG5BdXhpbGlhcnlVbml0LmRyYXdUZXh0ID0gZnVuY3Rpb24obWFpbk9iaiwgY3ksIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclkpIHtcclxuICAvLyBhY2Nlc3MgdGhlIHNiZ252aXpQYXJhbXMgc2V0IGZvciBjeVxyXG4gIHZhciBvcHRpb25zID0gY3kuc2NyYXRjaCgnX3NiZ252aXonKS5zYmdudml6UGFyYW1zLm9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zKCk7XHJcbiAgdmFyIHVuaXRDbGFzcyA9IGdldEF1eFVuaXRDbGFzcyhtYWluT2JqKTtcclxuICB2YXIgcGFyZW50ID0gdW5pdENsYXNzLmdldFBhcmVudChtYWluT2JqLCBjeSk7XHJcbiAgdmFyIHN0eWxlID0gbWFpbk9iai5zdHlsZTtcclxuXHJcbiAgLy8gcGFydCBvZiA6ICQkLnNiZ24uZHJhd1RleHQoY29udGV4dCwgdGV4dFByb3ApO1xyXG4gIC8vIHNhdmUgc3R5bGUgYmVmb3JlIG1vZGlmaWNhdGlvblxyXG4gIHZhciBvbGRGb250ID0gY29udGV4dC5mb250O1xyXG4gIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xyXG4gIHZhciBvbGRPcGFjaXR5ID0gY29udGV4dC5nbG9iYWxBbHBoYTtcclxuXHJcbiAgY29udGV4dC5mb250ID0gc3R5bGVbJ2ZvbnQtc3R5bGUnXSArIFwiIFwiICsgc3R5bGVbJ2ZvbnQtd2VpZ2h0J10gKyBcIiBcIlxyXG4gICAgICAgICAgICAgICAgICArIHN0eWxlWydmb250LXNpemUnXSArIFwicHggXCIgKyBzdHlsZVsnZm9udC1mYW1pbHknXTtcclxuICBjb250ZXh0LmZpbGxTdHlsZSA9IHN0eWxlWydmb250LWNvbG9yJ107XHJcbiAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gIGNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuICBjb250ZXh0Lmdsb2JhbEFscGhhID0gcGFyZW50LmNzcygndGV4dC1vcGFjaXR5JykgKiBwYXJlbnQuY3NzKCdvcGFjaXR5Jyk7IC8vID9cclxuXHJcbiAgdmFyIHRleHQ7XHJcbiAgaWYob3B0aW9ucy5maXRMYWJlbHNUb0luZm9ib3hlcygpKXtcclxuICAgIC8vIGhlcmUgd2UgbWVtb2l6ZSB0aGUgdHJ1bmNhdGVkIHRleHQgaW50byBfdGV4dENhY2hlLFxyXG4gICAgLy8gYXMgaXQgaXMgbm90IHNvbWV0aGluZyB0aGF0IGNoYW5nZXMgc28gbXVjaFxyXG4gICAgdGV4dCA9IHVuaXRDbGFzcy5nZXRUZXh0KG1haW5PYmosIGN5KTtcclxuICAgIHZhciBrZXkgPSB0ZXh0ICsgY29udGV4dC5mb250ICsgbWFpbk9iai5iYm94Lnc7XHJcbiAgICBpZihtYWluT2JqLl90ZXh0Q2FjaGUgJiYgbWFpbk9iai5fdGV4dENhY2hlW2tleV0pIHtcclxuICAgICAgdGV4dCA9IG1haW5PYmouX3RleHRDYWNoZVtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRleHQgPSB0cnVuY2F0ZSh1bml0Q2xhc3MuZ2V0VGV4dChtYWluT2JqLCBjeSksIGNvbnRleHQuZm9udCwgbWFpbk9iai5iYm94LncpO1xyXG4gICAgICBpZighbWFpbk9iai5fdGV4dENhY2hlKSB7XHJcbiAgICAgICAgbWFpbk9iai5fdGV4dENhY2hlID0ge307XHJcbiAgICAgIH1cclxuICAgICAgbWFpbk9iai5fdGV4dENhY2hlW2tleV0gPSB0ZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHRleHQgPSB1bml0Q2xhc3MuZ2V0VGV4dChtYWluT2JqLCBjeSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIGNlbnRlclgsIGNlbnRlclkpO1xyXG5cclxuICAvLyByZXN0b3JlIHNhdmVkIHN0eWxlXHJcbiAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcclxuICBjb250ZXh0LmZvbnQgPSBvbGRGb250O1xyXG4gIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvbGRPcGFjaXR5O1xyXG59O1xyXG5cclxuQXV4aWxpYXJ5VW5pdC5nZXRBYnNvbHV0ZUNvb3JkID0gZnVuY3Rpb24obWFpbk9iaiwgY3kpIHtcclxuICBcclxuICAgIHZhciBwYXJlbnQgPSBnZXRBdXhVbml0Q2xhc3MobWFpbk9iaikuZ2V0UGFyZW50KG1haW5PYmosIGN5KTtcclxuICAgIHZhciBwb3NpdGlvbiA9IHBhcmVudC5wb3NpdGlvbigpO1xyXG4gICAgdmFyIHBhZGRpbmcgPSBwYXJlbnQucGFkZGluZygpO1xyXG4gICAgLyogaWYocGFyZW50LmRhdGEoKS5jb21wbGV4Q2FsY3VsYXRlZFBhZGRpbmcpe1xyXG4gICAgICBwYWRkaW5nID0gTnVtYmVyKHBhcmVudC5kYXRhKCkuY29tcGxleENhbGN1bGF0ZWRQYWRkaW5nKTtcclxuICAgICAgLy9kZWxldGUgcGFyZW50Ll9wcml2YXRlLmRhdGEuY29tcGxleENhbGN1bGF0ZWRQYWRkaW5nO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIHBhZGRpbmcgPSBwYXJlbnQucGFkZGluZygpO1xyXG4gICAgfSAqL1xyXG4gICAgdmFyIHBhcmVudFdpZHRoID0gcGFyZW50LndpZHRoKCk7XHJcbiAgICB2YXIgcGFyZW50SGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpO1xyXG4gICAgdmFyIGJvcmRlcldpZHRoID0gTnVtYmVyKHBhcmVudC5jc3MoXCJib3JkZXItd2lkdGhcIikucmVwbGFjZShcInB4XCIsXCJcIikpOy8vcGFyZW50LmRhdGEoKVsnYm9yZGVyLXdpZHRoJ107XHJcbiAgICB2YXIgcG9zaXRpb24gPSBwYXJlbnQucG9zaXRpb24oKTtcclxuICAgIGlmIChtYWluT2JqID09PSB1bmRlZmluZWQgfHwgcGFyZW50ID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgYm9yZGVyV2lkdGggPSBwYXJlbnQuZGF0YSgpW1wiYm9yZGVyLXdpZHRoXCJdO1xyXG4gICAgaWYgKCBib3JkZXJXaWR0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGFic1ggLCBhYnNZO1xyXG4gICAgaWYgKG1haW5PYmouYW5jaG9yU2lkZSA9PSBcInRvcFwiIHx8IG1haW5PYmouYW5jaG9yU2lkZSA9PSBcImJvdHRvbVwiKSB7ICAgIFxyXG4gICAgICBcclxuICAgICAgYWJzWCA9ICgobWFpbk9iai5iYm94LnggKiAocGFyZW50Lm91dGVyV2lkdGgoKSAtIGJvcmRlcldpZHRoKSkgLyAxMDApICsgKHBvc2l0aW9uLnggLSBwYXJlbnRXaWR0aC8yIC0gcGFkZGluZyk7XHJcbiAgICAgIGFic1kgPSBtYWluT2JqLmFuY2hvclNpZGUgPT0gXCJ0b3BcIiA/IHBvc2l0aW9uLnkgLSBwYXJlbnRIZWlnaHQvMiAtIHBhZGRpbmcgOiBwb3NpdGlvbi55ICsgcGFyZW50SGVpZ2h0LzIgKyBwYWRkaW5nIDtcclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgfVxyXG4gICAgZWxzZSB7ICAgXHJcbiAgICAgIGFic1kgPSAoKG1haW5PYmouYmJveC55ICogKHBhcmVudC5vdXRlckhlaWdodCgpIC0gYm9yZGVyV2lkdGgpKSAvIDEwMCkgKyAocG9zaXRpb24ueSAtIHBhcmVudEhlaWdodC8yIC0gcGFkZGluZyk7XHJcbiAgICAgIGFic1ggPSBtYWluT2JqLmFuY2hvclNpZGUgPT0gXCJsZWZ0XCIgPyBwb3NpdGlvbi54IC0gcGFyZW50V2lkdGgvMiAtIHBhZGRpbmcgOnBvc2l0aW9uLnggKyBwYXJlbnRXaWR0aC8yICsgcGFkZGluZzsgIFxyXG4gICAgICBcclxuICAgIH1cclxuXHJcbiAgLy8gZHVlIHRvIGNvcm5lciBvZiBiYXJyZWwgc2hhcGVkIGNvbXBhcnRtZW50IHNoaWZ0IGFic1ggdG8gcmlnaHRcclxuIC8qICBpZiAocGFyZW50LmRhdGEoXCJjbGFzc1wiKSA9PSBcImNvbXBhcnRtZW50XCIpe1xyXG4gICAgICBhYnNYICs9IHBhcmVudC5vdXRlcldpZHRoKCkgKiAwLjE7XHJcbiAgfSAqL1xyXG5cclxuICByZXR1cm4ge3g6IGFic1gsIHk6IGFic1l9O1xyXG4gIFxyXG59O1xyXG5cclxuQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9BYnNvbHV0ZUNvb3JkID0gZnVuY3Rpb24obWFpbk9iaiwgcmVsWCwgcmVsWSwgY3kpIHtcclxuICB2YXIgcGFyZW50ID0gZ2V0QXV4VW5pdENsYXNzKG1haW5PYmopLmdldFBhcmVudChtYWluT2JqLCBjeSk7XHJcbiAgdmFyIHBvc2l0aW9uID0gcGFyZW50LnBvc2l0aW9uKCk7XHJcbiAgdmFyIHBhZGRpbmcgPSBwYXJlbnQucGFkZGluZygpO1xyXG4gIHZhciBwYXJlbnRXaWR0aCA9IHBhcmVudC53aWR0aCgpO1xyXG4gIHZhciBwYXJlbnRIZWlnaHQgPSBwYXJlbnQuaGVpZ2h0KCk7XHJcbiAgdmFyIGJvcmRlcldpZHRoID0gTnVtYmVyKHBhcmVudC5jc3MoXCJib3JkZXItd2lkdGhcIikucmVwbGFjZShcInB4XCIsXCJcIikpO1xyXG5cclxuXHJcbiAgdmFyIGFic1ggLCBhYnNZO1xyXG4gIGlmIChtYWluT2JqLmFuY2hvclNpZGUgPT0gXCJ0b3BcIiB8fCBtYWluT2JqLmFuY2hvclNpZGUgPT0gXCJib3R0b21cIikgeyAgICBcclxuICAgXHJcbiAgICBhYnNYID0gKChyZWxYICogKHBhcmVudC5vdXRlcldpZHRoKCkgLSBib3JkZXJXaWR0aCkpIC8gMTAwKSArIChwb3NpdGlvbi54IC0gcGFyZW50V2lkdGgvMiAtIHBhZGRpbmcpO1xyXG4gICAgYWJzWSA9IG1haW5PYmouYW5jaG9yU2lkZSA9PSBcInRvcFwiID8gcG9zaXRpb24ueSAtIHBhcmVudEhlaWdodC8yIC0gcGFkZGluZyA6IHBvc2l0aW9uLnkgKyBwYXJlbnRIZWlnaHQvMiArIHBhZGRpbmc7XHJcbiAgIFxyXG4gICBcclxuICB9XHJcbiAgZWxzZSB7ICAgXHJcbiAgICAgYWJzWSA9ICgocmVsWSAqIChwYXJlbnQub3V0ZXJIZWlnaHQoKSAtIGJvcmRlcldpZHRoKSkgLyAxMDApICsgKHBvc2l0aW9uLnkgLSBwYXJlbnRIZWlnaHQvMiAtIHBhZGRpbmcpO1xyXG4gICAgIGFic1ggPSBtYWluT2JqLmFuY2hvclNpZGUgPT0gXCJsZWZ0XCIgPyBwb3NpdGlvbi54IC0gcGFyZW50V2lkdGgvMiAtIHBhZGRpbmcgOnBvc2l0aW9uLnggKyBwYXJlbnRXaWR0aC8yICsgcGFkZGluZzsgICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAvKiAgaWYgKHBhcmVudC5kYXRhKFwiY2xhc3NcIikgPT0gXCJjb21wYXJ0bWVudFwiKXtcclxuICAgIGFic1ggKz0gcGFyZW50Lm91dGVyV2lkdGgoKSAqIDAuMTtcclxuICB9OyAqL1xyXG4gIHJldHVybiB7eDogYWJzWCwgeTogYWJzWX07IFxyXG59O1xyXG5cclxuQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9SZWxhdGl2ZUNvb3JkID0gZnVuY3Rpb24obWFpbk9iaiwgYWJzWCwgYWJzWSwgY3ksIHBhcmVudE5vZGUpe1xyXG4gIGlmIChtYWluT2JqID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKHBhcmVudE5vZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgdmFyIHBhcmVudCA9IHBhcmVudE5vZGU7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdmFyIHBhcmVudCA9IGdldEF1eFVuaXRDbGFzcyhtYWluT2JqKS5nZXRQYXJlbnQobWFpbk9iaiwgY3kpO1xyXG4gIH1cclxuICB2YXIgcG9zaXRpb24gPSBwYXJlbnQucG9zaXRpb24oKTtcclxuICB2YXIgcGFyZW50V2lkdGggPSBwYXJlbnQud2lkdGgoKTtcclxuICB2YXIgcGFyZW50SGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpO1xyXG4gIHZhciBwYWRkaW5nID0gcGFyZW50LnBhZGRpbmcoKTtcclxuIC8qICBpZihwYXJlbnQuZGF0YSgpLmNvbXBsZXhDYWxjdWxhdGVkUGFkZGluZyl7XHJcbiAgICBwYWRkaW5nID0gTnVtYmVyKHBhcmVudC5kYXRhKCkuY29tcGxleENhbGN1bGF0ZWRQYWRkaW5nKVxyXG4gIH1lbHNle1xyXG4gICAgcGFkZGluZyA9IHBhcmVudC5wYWRkaW5nKCk7XHJcbiAgfSAqL1xyXG4gXHJcbiBcclxuIFxyXG4gXHJcbiAgdmFyIGJvcmRlcldpZHRoID0gTnVtYmVyKHBhcmVudC5jc3MoXCJib3JkZXItd2lkdGhcIikucmVwbGFjZShcInB4XCIsXCJcIikpO1xyXG5cclxuXHJcbiAgLyogaWYgKHBhcmVudC5kYXRhKFwiY2xhc3NcIikgPT0gXCJjb21wYXJ0bWVudFwiKXtcclxuICAgIGFic1ggLT0gcGFyZW50Lm91dGVyV2lkdGgoKSAqIDAuMTtcclxuICB9ICovXHJcblxyXG4gIHZhciByZWxYICwgcmVsWTtcclxuICBpZiAobWFpbk9iai5hbmNob3JTaWRlID09IFwidG9wXCIgfHwgbWFpbk9iai5hbmNob3JTaWRlID09IFwiYm90dG9tXCIpIHtcclxuICAgIFxyXG4gICBcclxuICAgIHJlbFggPSAoKGFic1ggLSAocG9zaXRpb24ueCAtIHBhcmVudFdpZHRoLzIgLSBwYWRkaW5nKSkgKiAxMDAgKS8gKHBhcmVudC5vdXRlcldpZHRoKCkgLSBib3JkZXJXaWR0aCk7XHJcbiAgICByZWxZID0gbWFpbk9iai5hbmNob3JTaWRlID09IFwidG9wXCIgPyAwIDogMTAwO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgXHJcbiAgICByZWxYID0gbWFpbk9iai5hbmNob3JTaWRlID09IFwibGVmdFwiID8gMCA6IDEwMDtcclxuICAgIHJlbFkgPSAoKGFic1kgLSAocG9zaXRpb24ueSAtIHBhcmVudEhlaWdodC8yIC0gcGFkZGluZykpICogMTAwKSAvIChwYXJlbnQub3V0ZXJIZWlnaHQoKSAtIGJvcmRlcldpZHRoKTtcclxuICAgXHJcbiAgfVxyXG4gIHJlbFggPSByZWxYIDwgMCA/IDAgOiByZWxYO1xyXG4gIHJlbFggPSByZWxYID4gMTAwID8gMTAwIDogcmVsWDtcclxuICByZWxZID0gcmVsWSA8IDAgPyAwIDogcmVsWTtcclxuICByZWxZID0gcmVsWSA+IDEwMCA/IDEwMCA6IHJlbFk7XHJcblxyXG4gIFxyXG4gIHJldHVybiB7eDogcmVsWCwgeTogcmVsWX07XHJcbiAgXHJcbiAgXHJcbn07XHJcblxyXG5BdXhpbGlhcnlVbml0LnNldEFuY2hvclNpZGUgPSBmdW5jdGlvbihtYWluT2JqLCBub2RlKSB7XHJcblxyXG4gIHZhciB0aGlzWCA9IG1haW5PYmouYmJveC54O1xyXG4gIHZhciB0aGlzWSA9IG1haW5PYmouYmJveC55O1xyXG4gIHZhciB0aGlzSCA9IG1haW5PYmouYmJveC5oO1xyXG4gIHZhciB0aGlzVyA9IG1haW5PYmouYmJveC53O1xyXG4gIHZhciB3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nO1xyXG4gIGlmKG5vZGUuZGF0YShcIm9yaWdpbmFsV1wiKSl7XHJcbiAgICB3aWR0aCA9IG5vZGUuZGF0YShcIm9yaWdpbmFsV1wiKTsgICAgXHJcbiAgICBwYWRkaW5nID0gMDtcclxuICB9ZWxzZXtcclxuICAgIHdpZHRoID0gbm9kZS53aWR0aCgpO1xyXG4gICAgcGFkZGluZyA9IG5vZGUuZGF0YSgnY2xhc3MnKSA9PSBcImNvbXBsZXhcIiA/IE51bWJlcihub2RlLmRhdGEoKS5jb21wbGV4Q2FsY3VsYXRlZFBhZGRpbmcpIDogbm9kZS5wYWRkaW5nKCk7XHJcbiAgfVxyXG5cclxuICBpZihub2RlLmRhdGEoXCJvcmlnaW5hbEhcIikpe1xyXG4gICAgaGVpZ2h0ID0gbm9kZS5kYXRhKFwib3JpZ2luYWxIXCIpOyAgICBcclxuICAgIHBhZGRpbmcgPSAwO1xyXG4gIH1lbHNle1xyXG4gICAgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcclxuICAgIHBhZGRpbmcgPSBub2RlLmRhdGEoJ2NsYXNzJykgPT0gXCJjb21wbGV4XCIgPyBOdW1iZXIobm9kZS5kYXRhKCkuY29tcGxleENhbGN1bGF0ZWRQYWRkaW5nKSA6IG5vZGUucGFkZGluZygpO1xyXG4gIH1cclxuICBcclxuICB2YXIgcGFyZW50WCA9IChub2RlLmRhdGEoJ2NsYXNzJykgPT0gXCJjb21wYXJ0bWVudFwiIHx8IG5vZGUuZGF0YSgnY2xhc3MnKSA9PSBcImNvbXBsZXhcIikgPyBub2RlLmRhdGEoJ2Jib3gnKS54IDogbm9kZS5wb3NpdGlvbigpLng7XHJcbiAgdmFyIHBhcmVudFkgPSAobm9kZS5kYXRhKCdjbGFzcycpID09IFwiY29tcGFydG1lbnRcIiB8fCBub2RlLmRhdGEoJ2NsYXNzJykgPT0gXCJjb21wbGV4XCIpID8gbm9kZS5kYXRhKCdiYm94JykueSA6IG5vZGUucG9zaXRpb24oKS55O1xyXG4gIHZhciBwYXJlbnRYMSA9IE51bWJlcigocGFyZW50WCAtIHdpZHRoIC8gMiAtIHBhZGRpbmcpLnRvRml4ZWQoMikpO1xyXG4gIHZhciBwYXJlbnRYMiA9IE51bWJlcigocGFyZW50WCt3aWR0aC8yICsgcGFkZGluZykudG9GaXhlZCgyKSk7XHJcbiAgdmFyIHBhcmVudFkxID0gTnVtYmVyKChwYXJlbnRZIC0gaGVpZ2h0LyAyIC0gcGFkZGluZykudG9GaXhlZCgyKSk7XHJcbiAgdmFyIHBhcmVudFkyID0gTnVtYmVyKChwYXJlbnRZICsgaGVpZ2h0LyAyKyBwYWRkaW5nKS50b0ZpeGVkKDIpKTtcclxuICB2YXIgY2VudGVyWCA9IE51bWJlcigodGhpc1grdGhpc1cvMikudG9GaXhlZCgyKSk7XHJcbiAgdmFyIGNlbnRlclkgPSBOdW1iZXIoKHRoaXNZK3RoaXNILzIpLnRvRml4ZWQoMikpO1xyXG5cclxuICBpZiAoY2VudGVyWSA9PXBhcmVudFkxKXtcclxuICAgIG1haW5PYmouYW5jaG9yU2lkZSA9IFwidG9wXCI7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKGNlbnRlclkgPT0gcGFyZW50WTIpIHtcclxuICAgIG1haW5PYmouYW5jaG9yU2lkZSA9IFwiYm90dG9tXCI7XHJcbiAgfVxyXG4gIGVsc2UgaWYoY2VudGVyWCA9PSBwYXJlbnRYMSkge1xyXG4gICAgbWFpbk9iai5hbmNob3JTaWRlID0gXCJsZWZ0XCI7XHJcbiAgfVxyXG4gIGVsc2UgaWYoKGNlbnRlclggIDw9ICAocGFyZW50WDIgKyAyKSkgICYmIChjZW50ZXJYICA+PSAgKHBhcmVudFgyIC0gMikpICl7XHJcbiAgICBtYWluT2JqLmFuY2hvclNpZGUgPSBcInJpZ2h0XCI7XHJcbiAgfWVsc2V7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG5BdXhpbGlhcnlVbml0LmFkZFRvUGFyZW50ID0gZnVuY3Rpb24gKG1haW5PYmosIGN5LCBwYXJlbnROb2RlLCBsb2NhdGlvbiwgcG9zaXRpb24sIGluZGV4KSB7XHJcblxyXG4gIC8vIGFkZCBzdGF0ZSB2YXIgdG8gdGhlIHBhcmVudCdzIHN0YXRlc2FuZGluZm9zXHJcbiAgaWYodHlwZW9mIGluZGV4ICE9IFwidW5kZWZpbmVkXCIpIHsgLy8gc3BlY2lmaWMgaW5kZXggcHJvdmlkZWQgKGZvciB1bmRvL3JlZG8gY29uc2lzdGVuY3kpXHJcbiAgICBwYXJlbnROb2RlLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykuc3BsaWNlKGluZGV4LCAwLCBtYWluT2JqKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBwYXJlbnROb2RlLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykucHVzaChtYWluT2JqKTtcclxuICB9XHJcblxyXG4gIGlmKCFwYXJlbnROb2RlLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJykpIHsgLy8gZW5zdXJlIG1pbmltYWwgaW5pdGlhbGl6YXRpb25cclxuICAgIHBhcmVudE5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnLCB7fSk7XHJcbiAgfVxyXG4gIGlmKCFsb2NhdGlvbikgeyAvLyBsb2NhdGlvbiBub3QgcHJvdmlkZWQsIG5lZWQgdG8gZGVmaW5lIGl0IGF1dG9tYXRpY2FsbHlcclxuICAgIGxvY2F0aW9uID0gQXV4VW5pdExheW91dC5zZWxlY3ROZXh0QXZhaWxhYmxlKHBhcmVudE5vZGUsIGN5KTtcclxuICB9ZWxzZSBpZihsb2NhdGlvbiA9PT0gJ2xlZnQnIHx8IGxvY2F0aW9uID09PSAncmlnaHQnKVxyXG4gIHtcclxuICAgIGxvY2F0aW9uID0gQXV4VW5pdExheW91dC5zZWxlY3ROZXh0QXZhaWxhYmxlTGVmdFJpZ2h0KHBhcmVudE5vZGUsIGN5KTtcclxuICB9XHJcbiAgLy8gaGVyZSB3ZSBhcmUgc3VyZSB0byBoYXZlIGEgbG9jYXRpb24gZXZlbiBpZiBpdCB3YXMgbm90IHByb3ZpZGVkIGFzIGFyZ3VtZW50XHJcbiAgLy8gZ2V0IG9yIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5IGxheW91dFxyXG4gIGlmKCFwYXJlbnROb2RlLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJylbbG9jYXRpb25dKSB7XHJcbiAgICBwYXJlbnROb2RlLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJylbbG9jYXRpb25dID0gQXV4VW5pdExheW91dC5jb25zdHJ1Y3QocGFyZW50Tm9kZSwgbG9jYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgdmFyIGxheW91dCA9IHBhcmVudE5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtsb2NhdGlvbl07XHJcbiAgbWFpbk9iai5hbmNob3JTaWRlID0gbG9jYXRpb247XHJcbiAgc3dpdGNoKGxvY2F0aW9uKSB7XHJcbiAgICBjYXNlIFwidG9wXCI6IG1haW5PYmouYmJveC55ID0gMDsgYnJlYWs7XHJcbiAgICBjYXNlIFwiYm90dG9tXCI6IG1haW5PYmouYmJveC55ID0gMTAwOyBicmVhaztcclxuICAgIGNhc2UgXCJsZWZ0XCI6IG1haW5PYmouYmJveC54ID0gMDsgYnJlYWs7XHJcbiAgICBjYXNlIFwicmlnaHRcIjogbWFpbk9iai5iYm94LnggPSAxMDA7IGJyZWFrO1xyXG4gIH1cclxuICAvLyBhZGQgc3RhdGVWYXIgdG8gbGF5b3V0LCBwcmVjb21wdXRpbmcgb2YgcmVsYXRpdmUgY29vcmRzIHdpbGwgYmUgdHJpZ2dlcmVkIGFjY29yZGluZ2x5XHJcbiAgdmFyIGluc2VydGVkUG9zaXRpb24gPSBBdXhVbml0TGF5b3V0LmFkZEF1eFVuaXQobGF5b3V0LCBjeSwgbWFpbk9iaiwgcG9zaXRpb24pO1xyXG4gIHJldHVybiBpbnNlcnRlZFBvc2l0aW9uO1xyXG59XHJcblxyXG5BdXhpbGlhcnlVbml0LnJlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiAobWFpbk9iaiwgY3kpIHtcclxuICB2YXIgcGFyZW50ID0gZ2V0QXV4VW5pdENsYXNzKG1haW5PYmopLmdldFBhcmVudChtYWluT2JqLCBjeSk7XHJcbiAgdmFyIHBhcmVudExheW91dCA9IHBhcmVudC5kYXRhKCdhdXh1bml0bGF5b3V0cycpW21haW5PYmouYW5jaG9yU2lkZV07XHJcbiAgQXV4VW5pdExheW91dC5yZW1vdmVBdXhVbml0KHBhcmVudExheW91dCwgY3ksIG1haW5PYmopO1xyXG4gIGlmIChBdXhVbml0TGF5b3V0LmlzRW1wdHkocGFyZW50TGF5b3V0KSl7XHJcbiAgICBkZWxldGUgcGFyZW50LmRhdGEoJ2F1eHVuaXRsYXlvdXRzJylbbWFpbk9iai5hbmNob3JTaWRlXTtcclxuICB9XHJcbiAgdmFyIHN0YXRlc2FuZGluZm9zID0gcGFyZW50LmRhdGEoJ3N0YXRlc2FuZGluZm9zJyk7XHJcbiAgdmFyIGluZGV4ICA9IHN0YXRlc2FuZGluZm9zLmluZGV4T2YobWFpbk9iaik7XHJcbiAgc3RhdGVzYW5kaW5mb3Muc3BsaWNlKGluZGV4LCAxKTtcclxufTtcclxuXHJcbkF1eGlsaWFyeVVuaXQuZ2V0UG9zaXRpb25JbmRleCA9IGZ1bmN0aW9uKG1haW5PYmosIGN5KSB7XHJcbiAgcmV0dXJuIGdldEF1eFVuaXRDbGFzcyhtYWluT2JqKS5nZXRQYXJlbnQobWFpbk9iaiwgY3kpLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJylbbWFpbk9iai5hbmNob3JTaWRlXS51bml0cy5pbmRleE9mKG1haW5PYmopO1xyXG59O1xyXG5cclxubnMuQXV4aWxpYXJ5VW5pdCA9IEF1eGlsaWFyeVVuaXQ7XHJcbi8vIC0tLS0tLS0tLS0tLS0tIEVORCBBdXhpbGlhcnlVbml0IC0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLSBTdGF0ZVZhcmlhYmxlIC0tLS0tLS0tLS0tLS0tIC8vXHJcbi8qKlxyXG4gKiBwYXJlbnQgaGFzIHRvIGJlIGEgc3RhdGVmdWwgRVBOIChjb21wbGV4LCBtYWNyb21vbGVjdWxlIG9yIG51Y2xlaWMgYWNpZClcclxuICovXHJcblxyXG52YXIgU3RhdGVWYXJpYWJsZSA9IHt9O1xyXG5cclxuLy8gU3RhdGVWYXJpYWJsZSBleHRlbmRzIEF1eGlsaWFyeVVuaXQgYnkgaW5oZXJpdGluZyBlYWNoIHN0YXRpYyBwcm9wZXJ0eSBvZiBpdFxyXG5mb3IgKHZhciBwcm9wIGluIEF1eGlsaWFyeVVuaXQpIHtcclxuICBTdGF0ZVZhcmlhYmxlW3Byb3BdID0gQXV4aWxpYXJ5VW5pdFtwcm9wXTtcclxufVxyXG5cclxuLy8gQ29uc3RydWN0IGEgc3RhdGUgdmFyaWFibGUgb2JqZWN0IGJ5IGV4dGVuZGluZyBkZWZhdWx0IGJlaGF2aW91cnMgb2YgYSBBdXhpbGlhcnlVbml0IG9iamVjdCBhbmQgcmV0dXJucyB0aGF0IG9iamVjdFxyXG5TdGF0ZVZhcmlhYmxlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBzdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbiwgcGFyZW50LCBpZCkge1xyXG4gIHZhciBvYmogPSBBdXhpbGlhcnlVbml0LmNvbnN0cnVjdChwYXJlbnQpO1xyXG4gIG9iai5pZCA9IGlkIHx8IGVsZW1lbnRVdGlsaXRpZXMuZ2VuZXJhdGVTdGF0ZVZhcklkKCk7XHJcbiAgb2JqLnN0YXRlID0ge307XHJcbiAgb2JqLnN0YXRlLnZhbHVlID0gdmFsdWU7XHJcbiAgb2JqLnN0YXRlLnZhcmlhYmxlID0gbnVsbDtcclxuICBvYmouc3RhdGVWYXJpYWJsZURlZmluaXRpb24gPSBzdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbjtcclxuICBvYmouY2xhenogPSBcInN0YXRlIHZhcmlhYmxlXCI7XHJcblxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG5TdGF0ZVZhcmlhYmxlLmdldFRleHQgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgdmFyIHN0YXRlVmFsdWUgPSBtYWluT2JqLnN0YXRlLnZhbHVlIHx8ICcnO1xyXG4gIHZhciBzdGF0ZVZhcmlhYmxlID0gbWFpbk9iai5zdGF0ZS52YXJpYWJsZSA/IFwiQFwiICsgbWFpbk9iai5zdGF0ZS52YXJpYWJsZSA6IFwiXCI7XHJcblxyXG4gIHJldHVybiBzdGF0ZVZhbHVlICsgc3RhdGVWYXJpYWJsZTtcclxufTtcclxuXHJcblN0YXRlVmFyaWFibGUuaGFzVGV4dCA9IGZ1bmN0aW9uKG1haW5PYmopIHtcclxuICByZXR1cm4gKG1haW5PYmouc3RhdGUudmFsdWUgJiYgbWFpbk9iai5zdGF0ZS52YWx1ZSAhPSBcIlwiKSB8fCAobWFpbk9iai5zdGF0ZS52YXJpYWJsZSAmJiBtYWluT2JqLnN0YXRlLnZhcmlhYmxlICE9IFwiXCIpO1xyXG59O1xyXG5cclxuLyp0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB1cG9uIGNyZWF0aW9uIG9mIHN0YXRlIHZhcmlhYmxlIGFuZCBpdCByZXR1cm5zIHRoZSBsb2NhdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgYWRkZWQgc3RhdGUgdmFyaWFibGVcclxuKi9cclxuU3RhdGVWYXJpYWJsZS5jcmVhdGUgPSBmdW5jdGlvbihwYXJlbnROb2RlLCBjeSwgdmFsdWUsIHZhcmlhYmxlLCBiYm94LCBsb2NhdGlvbiwgcG9zaXRpb24sIHN0eWxlLCBpbmRleCwgaWQpIHtcclxuICAvLyBjcmVhdGUgdGhlIG5ldyBzdGF0ZSB2YXIgb2YgaW5mb1xyXG4gIHZhciBzdGF0ZVZhciA9IFN0YXRlVmFyaWFibGUuY29uc3RydWN0KCk7XHJcbiAgU3RhdGVWYXJpYWJsZS5zZXRQYXJlbnRSZWYoc3RhdGVWYXIsIHBhcmVudE5vZGUpO1xyXG5cclxuICBzdGF0ZVZhci52YWx1ZSA9IHZhbHVlO1xyXG4gIHN0YXRlVmFyLnZhcmlhYmxlID0gdmFyaWFibGU7XHJcbiAgc3RhdGVWYXIuc3RhdGUgPSB7dmFsdWU6IHZhbHVlLCB2YXJpYWJsZTogdmFyaWFibGV9O1xyXG4gIHN0YXRlVmFyLmJib3ggPSBiYm94O1xyXG4gIHN0YXRlVmFyLnN0eWxlID0gc3R5bGU7XHJcbiAgaWYgKCBpZCApIHtcclxuICAgIHN0YXRlVmFyLmlkID0gaWQ7XHJcbiAgfVxyXG4gIC8vIGxpbmsgdG8gbGF5b3V0XHJcbiAgcG9zaXRpb24gPSBTdGF0ZVZhcmlhYmxlLmFkZFRvUGFyZW50KHN0YXRlVmFyLCBjeSwgcGFyZW50Tm9kZSwgbG9jYXRpb24sIHBvc2l0aW9uLCBpbmRleCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGluZGV4OiBTdGF0ZVZhcmlhYmxlLmdldFBhcmVudChzdGF0ZVZhciwgY3kpLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykuaW5kZXhPZihzdGF0ZVZhciksXHJcbiAgICBsb2NhdGlvbjogc3RhdGVWYXIuYW5jaG9yU2lkZSxcclxuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxyXG4gIH1cclxuXHJcbn07XHJcblxyXG5TdGF0ZVZhcmlhYmxlLnJlbW92ZSA9IGZ1bmN0aW9uIChtYWluT2JqLCBjeSkge1xyXG4gIHZhciBwb3NpdGlvbiA9IFN0YXRlVmFyaWFibGUuZ2V0UG9zaXRpb25JbmRleChtYWluT2JqLCBjeSk7XHJcbiAgdmFyIGluZGV4ID0gU3RhdGVWYXJpYWJsZS5nZXRQYXJlbnQobWFpbk9iaiwgY3kpLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykuaW5kZXhPZihtYWluT2JqKTtcclxuICBTdGF0ZVZhcmlhYmxlLnJlbW92ZUZyb21QYXJlbnQobWFpbk9iaiwgY3kpO1xyXG4gIHJldHVybiB7XHJcbiAgICBjbGF6ejogXCJzdGF0ZSB2YXJpYWJsZVwiLFxyXG4gICAgc3RhdGU6IHtcclxuICAgICAgdmFsdWU6IG1haW5PYmouc3RhdGUudmFsdWUsXHJcbiAgICAgIHZhcmlhYmxlOiBtYWluT2JqLnN0YXRlLnZhcmlhYmxlXHJcbiAgICB9LFxyXG4gICAgYmJveDoge1xyXG4gICAgICB3OiBtYWluT2JqLmJib3gudyxcclxuICAgICAgaDogbWFpbk9iai5iYm94LmhcclxuICAgIH0sXHJcbiAgICBsb2NhdGlvbjogbWFpbk9iai5hbmNob3JTaWRlLFxyXG4gICAgcG9zaXRpb246IHBvc2l0aW9uLFxyXG4gICAgaW5kZXg6IGluZGV4LFxyXG4gICAgc3R5bGUgOiBtYWluT2JqLnN0eWxlXHJcbiAgfTtcclxufTtcclxuXHJcblN0YXRlVmFyaWFibGUuY29weSA9IGZ1bmN0aW9uKG1haW5PYmosIGN5LCBuZXdQYXJlbnQsIG5ld0lkKSB7XHJcbiAgdmFyIG5ld1N0YXRlVmFyID0gQXV4aWxpYXJ5VW5pdC5jb3B5KG1haW5PYmosIGN5LCBTdGF0ZVZhcmlhYmxlLmNvbnN0cnVjdCgpLCBuZXdQYXJlbnQsIG5ld0lkKTtcclxuICBuZXdTdGF0ZVZhci5zdGF0ZSA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIG1haW5PYmouc3RhdGUpO1xyXG4gIG5ld1N0YXRlVmFyLnN0YXRlVmFyaWFibGVEZWZpbml0aW9uID0gbWFpbk9iai5zdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbjtcclxuICBuZXdTdGF0ZVZhci5jbGF6eiA9IG1haW5PYmouY2xheno7XHJcbiAgcmV0dXJuIG5ld1N0YXRlVmFyO1xyXG59O1xyXG5cclxubnMuU3RhdGVWYXJpYWJsZSA9IFN0YXRlVmFyaWFibGU7XHJcbi8vIC0tLS0tLS0tLS0tLS0tIEVORCBTdGF0ZVZhcmlhYmxlIC0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0gUmVzaWR1ZVZhcmlhYmxlIC0tLS0tLS0tLS0tLS0tIC8vXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGZvciBDZWxsRGVzaWduZXIgcGFsZXR0ZVxyXG4gKi9cclxuXHJcbiB2YXIgUmVzaWR1ZVZhcmlhYmxlID0ge307XHJcblxyXG4gLy8gUmVzaWR1ZVZhcmlhYmxlIGV4dGVuZHMgQXV4aWxpYXJ5VW5pdCBieSBpbmhlcml0aW5nIGVhY2ggc3RhdGljIHByb3BlcnR5IG9mIGl0XHJcbiBmb3IgKHZhciBwcm9wIGluIEF1eGlsaWFyeVVuaXQpIHtcclxuICBSZXNpZHVlVmFyaWFibGVbcHJvcF0gPSBBdXhpbGlhcnlVbml0W3Byb3BdO1xyXG4gfVxyXG4gXHJcbiAvLyBDb25zdHJ1Y3QgYSByZXNpZHVlIHZhcmlhYmxlIG9iamVjdCBieSBleHRlbmRpbmcgZGVmYXVsdCBiZWhhdmlvdXJzIG9mIGEgQXV4aWxpYXJ5VW5pdCBvYmplY3QgYW5kIHJldHVybnMgdGhhdCBvYmplY3RcclxuIFJlc2lkdWVWYXJpYWJsZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbih2YWx1ZSwgcmVzaWR1ZVZhcmlhYmxlRGVmaW5pdGlvbiwgcGFyZW50LCBpZCkge1xyXG4gICB2YXIgb2JqID0gQXV4aWxpYXJ5VW5pdC5jb25zdHJ1Y3QocGFyZW50KTtcclxuICAgb2JqLmlkID0gaWQgfHwgZWxlbWVudFV0aWxpdGllcy5nZW5lcmF0ZVN0YXRlVmFySWQoKTtcclxuICAgb2JqLnJlc2lkdWUgPSB7fTtcclxuICAgb2JqLnJlc2lkdWUudmFyaWFibGUgPSBudWxsO1xyXG4gICBvYmoucmVzaWR1ZVZhcmlhYmxlRGVmaW5pdGlvbiA9IHJlc2lkdWVWYXJpYWJsZURlZmluaXRpb247XHJcbiAgIG9iai5jbGF6eiA9IFwicmVzaWR1ZSB2YXJpYWJsZVwiO1xyXG4gXHJcbiAgIHJldHVybiBvYmo7XHJcbiB9O1xyXG4gXHJcbiBSZXNpZHVlVmFyaWFibGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKG1haW5PYmopIHtcclxuICAgdmFyIHJlc2lkdWVWYXJpYWJsZSA9IG1haW5PYmoucmVzaWR1ZS52YXJpYWJsZSB8fCAnJztcclxuIFxyXG4gICByZXR1cm4gcmVzaWR1ZVZhcmlhYmxlO1xyXG4gfTtcclxuIFxyXG4gUmVzaWR1ZVZhcmlhYmxlLmhhc1RleHQgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgIHJldHVybiAgKG1haW5PYmoucmVzaWR1ZS52YXJpYWJsZSAmJiBtYWluT2JqLnJlc2lkdWUudmFyaWFibGUgIT0gXCJcIik7XHJcbiB9O1xyXG4gXHJcbiAvKnRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHVwb24gY3JlYXRpb24gb2YgcmVzaWR1ZSB2YXJpYWJsZSBhbmQgaXQgcmV0dXJucyB0aGUgbG9jYXRpb24gaW5mb3JtYXRpb24gb2YgdGhlIGFkZGVkIHJlc2lkdWUgdmFyaWFibGVcclxuICovXHJcbiBSZXNpZHVlVmFyaWFibGUuY3JlYXRlID0gZnVuY3Rpb24ocGFyZW50Tm9kZSwgY3ksIHZhbHVlLCB2YXJpYWJsZSwgYmJveCwgbG9jYXRpb24sIHBvc2l0aW9uLCBzdHlsZSwgaW5kZXgsIGlkKSB7XHJcbiAgIC8vIGNyZWF0ZSB0aGUgbmV3IHJlc2lkdWUgdmFyIG9mIGluZm9cclxuICAgdmFyIHJlc2lkdWVWYXIgPSBSZXNpZHVlVmFyaWFibGUuY29uc3RydWN0KCk7XHJcbiAgIFJlc2lkdWVWYXJpYWJsZS5zZXRQYXJlbnRSZWYocmVzaWR1ZVZhciwgcGFyZW50Tm9kZSk7XHJcbiBcclxuICAgcmVzaWR1ZVZhci52YXJpYWJsZSA9IHZhcmlhYmxlO1xyXG4gICByZXNpZHVlVmFyLnJlc2lkdWUgPSB7dmFsdWU6IHZhbHVlLCB2YXJpYWJsZTogdmFyaWFibGV9O1xyXG4gICByZXNpZHVlVmFyLmJib3ggPSBiYm94O1xyXG4gICByZXNpZHVlVmFyLnN0eWxlID0gc3R5bGU7XHJcbiAgIGlmICggaWQgKSB7XHJcbiAgICByZXNpZHVlVmFyLmlkID0gaWQ7XHJcbiAgIH1cclxuICAgLy8gbGluayB0byBsYXlvdXRcclxuICAgcG9zaXRpb24gPSBSZXNpZHVlVmFyaWFibGUuYWRkVG9QYXJlbnQocmVzaWR1ZVZhciwgY3ksIHBhcmVudE5vZGUsIGxvY2F0aW9uLCBwb3NpdGlvbiwgaW5kZXgpO1xyXG4gICByZXR1cm4ge1xyXG4gICAgIGluZGV4OiBSZXNpZHVlVmFyaWFibGUuZ2V0UGFyZW50KHJlc2lkdWVWYXIsIGN5KS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmluZGV4T2YocmVzaWR1ZVZhciksXHJcbiAgICAgbG9jYXRpb246IHJlc2lkdWVWYXIuYW5jaG9yU2lkZSxcclxuICAgICBwb3NpdGlvbjogcG9zaXRpb25cclxuICAgfVxyXG4gXHJcbiB9O1xyXG4gXHJcbiBSZXNpZHVlVmFyaWFibGUucmVtb3ZlID0gZnVuY3Rpb24gKG1haW5PYmosIGN5KSB7XHJcbiAgIHZhciBwb3NpdGlvbiA9IFJlc2lkdWVWYXJpYWJsZS5nZXRQb3NpdGlvbkluZGV4KG1haW5PYmosIGN5KTtcclxuICAgdmFyIGluZGV4ID0gUmVzaWR1ZVZhcmlhYmxlLmdldFBhcmVudChtYWluT2JqLCBjeSkuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKS5pbmRleE9mKG1haW5PYmopO1xyXG4gICBSZXNpZHVlVmFyaWFibGUucmVtb3ZlRnJvbVBhcmVudChtYWluT2JqLCBjeSk7XHJcbiAgIHJldHVybiB7XHJcbiAgICAgY2xheno6IFwicmVzaWR1ZSB2YXJpYWJsZVwiLFxyXG4gICAgIHJlc2lkdWU6IHtcclxuICAgICAgIHZhcmlhYmxlOiBtYWluT2JqLnJlc2lkdWUudmFyaWFibGVcclxuICAgICB9LFxyXG4gICAgIGJib3g6IHtcclxuICAgICAgIHc6IG1haW5PYmouYmJveC53LFxyXG4gICAgICAgaDogbWFpbk9iai5iYm94LmhcclxuICAgICB9LFxyXG4gICAgIGxvY2F0aW9uOiBtYWluT2JqLmFuY2hvclNpZGUsXHJcbiAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxyXG4gICAgIGluZGV4OiBpbmRleCxcclxuICAgICBzdHlsZSA6IG1haW5PYmouc3R5bGVcclxuICAgfTtcclxuIH07XHJcbiBcclxuIFJlc2lkdWVWYXJpYWJsZS5jb3B5ID0gZnVuY3Rpb24obWFpbk9iaiwgY3ksIG5ld1BhcmVudCwgbmV3SWQpIHtcclxuICAgdmFyIG5ld1Jlc2lkdWVWYXIgPSBBdXhpbGlhcnlVbml0LmNvcHkobWFpbk9iaiwgY3ksIFJlc2lkdWVWYXJpYWJsZS5jb25zdHJ1Y3QoKSwgbmV3UGFyZW50LCBuZXdJZCk7XHJcbiAgIG5ld1Jlc2lkdWVWYXIucmVzaWR1ZSA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIG1haW5PYmoucmVzaWR1ZSk7XHJcbiAgIG5ld1Jlc2lkdWVWYXIuUmVzaWR1ZVZhcmlhYmxlRGVmaW5pdGlvbiA9IG1haW5PYmouUmVzaWR1ZVZhcmlhYmxlRGVmaW5pdGlvbjtcclxuICAgbmV3U3RhbmV3UmVzaWR1ZVZhcnRlVmFyLmNsYXp6ID0gbWFpbk9iai5jbGF6ejtcclxuICAgcmV0dXJuIG5ld1Jlc2lkdWVWYXI7XHJcbiB9O1xyXG4gXHJcbiBucy5SZXNpZHVlVmFyaWFibGUgPSBSZXNpZHVlVmFyaWFibGU7XHJcbiAvLyAtLS0tLS0tLS0tLS0tLSBFTkQgUmVzaWR1ZVZhcmlhYmxlIC0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuIC8vIC0tLS0tLS0tLS0tLS0tIEJpbmRpbmdSZWdpb24gLS0tLS0tLS0tLS0tLS0gLy9cclxuLyoqXHJcbiAqIFRoaXMgaXMgZm9yIENlbGxEZXNpZ25lciBwYWxldHRlXHJcbiAqL1xyXG5cclxuIHZhciBCaW5kaW5nUmVnaW9uID0ge307XHJcblxyXG4gLy8gQmluZGluZ1JlZ2lvbiBleHRlbmRzIEF1eGlsaWFyeVVuaXQgYnkgaW5oZXJpdGluZyBlYWNoIHN0YXRpYyBwcm9wZXJ0eSBvZiBpdFxyXG4gZm9yICh2YXIgcHJvcCBpbiBBdXhpbGlhcnlVbml0KSB7XHJcbiAgQmluZGluZ1JlZ2lvbltwcm9wXSA9IEF1eGlsaWFyeVVuaXRbcHJvcF07XHJcbiB9XHJcbiBcclxuIC8vIENvbnN0cnVjdCBhIGJpbmRpbmcgcmVnaW9uIG9iamVjdCBieSBleHRlbmRpbmcgZGVmYXVsdCBiZWhhdmlvdXJzIG9mIGEgQXV4aWxpYXJ5VW5pdCBvYmplY3QgYW5kIHJldHVybnMgdGhhdCBvYmplY3RcclxuIEJpbmRpbmdSZWdpb24uY29uc3RydWN0ID0gZnVuY3Rpb24oIGJpbmRpbmdSZWdpb25EZWZpbml0aW9uLCBwYXJlbnQsIGlkKSB7XHJcbiAgIHZhciBvYmogPSBBdXhpbGlhcnlVbml0LmNvbnN0cnVjdChwYXJlbnQpO1xyXG4gICBvYmouaWQgPSBpZCB8fCBlbGVtZW50VXRpbGl0aWVzLmdlbmVyYXRlU3RhdGVWYXJJZCgpO1xyXG4gICBvYmoucmVnaW9uID0ge307XHJcbiAgIG9iai5yZWdpb24udmFyaWFibGUgPSBudWxsO1xyXG4gICBvYmouYmluZGluZ1JlZ2lvbkRlZmluaXRpb24gPSBiaW5kaW5nUmVnaW9uRGVmaW5pdGlvbjtcclxuICAgb2JqLmNsYXp6ID0gXCJiaW5kaW5nIHJlZ2lvblwiO1xyXG4gXHJcbiAgIHJldHVybiBvYmo7XHJcbiB9O1xyXG4gXHJcbiBCaW5kaW5nUmVnaW9uLmdldFRleHQgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgIHZhciBiaW5kaW5nUmVnaW9uID0gbWFpbk9iai5yZWdpb24udmFyaWFibGUgfHwgJyc7XHJcbiBcclxuICAgcmV0dXJuIGJpbmRpbmdSZWdpb247XHJcbiB9O1xyXG4gXHJcbiBCaW5kaW5nUmVnaW9uLmhhc1RleHQgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgIHJldHVybiAgKG1haW5PYmoucmVnaW9uLnZhcmlhYmxlICYmIG1haW5PYmoucmVnaW9uLnZhcmlhYmxlICE9IFwiXCIpO1xyXG4gfTtcclxuIFxyXG4gLyp0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB1cG9uIGNyZWF0aW9uIG9mIGJpbmRpbmcgcmVnaW9uIGFuZCBpdCByZXR1cm5zIHRoZSBsb2NhdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgYWRkZWQgYmluZGluZyByZWdpb25cclxuICovXHJcbiBCaW5kaW5nUmVnaW9uLmNyZWF0ZSA9IGZ1bmN0aW9uKHBhcmVudE5vZGUsIGN5LCB2YWx1ZSwgdmFyaWFibGUsIGJib3gsIGxvY2F0aW9uLCBwb3NpdGlvbiwgc3R5bGUsIGluZGV4LCBpZCkge1xyXG4gICAvLyBjcmVhdGUgdGhlIG5ldyBiaW5kaW5nIHJlZ2lvbiBvZiBpbmZvXHJcbiAgIHZhciBiaW5kaW5nUmVnaW9uID0gQmluZGluZ1JlZ2lvbi5jb25zdHJ1Y3QoKTtcclxuICAgQmluZGluZ1JlZ2lvbi5zZXRQYXJlbnRSZWYoYmluZGluZ1JlZ2lvbiwgcGFyZW50Tm9kZSk7XHJcbiBcclxuICAgYmluZGluZ1JlZ2lvbi52YXJpYWJsZSA9IHZhcmlhYmxlO1xyXG4gICBiaW5kaW5nUmVnaW9uLnJlZ2lvbiA9IHt2YWx1ZTogdmFsdWUsIHZhcmlhYmxlOiB2YXJpYWJsZX07XHJcbiAgIGJpbmRpbmdSZWdpb24uYmJveCA9IGJib3g7XHJcbiAgIGJpbmRpbmdSZWdpb24uc3R5bGUgPSBzdHlsZTtcclxuICAgaWYgKCBpZCApIHtcclxuICAgIGJpbmRpbmdSZWdpb24uaWQgPSBpZDtcclxuICAgfVxyXG4gICAvLyBsaW5rIHRvIGxheW91dFxyXG4gICBwb3NpdGlvbiA9IEJpbmRpbmdSZWdpb24uYWRkVG9QYXJlbnQoYmluZGluZ1JlZ2lvbiwgY3ksIHBhcmVudE5vZGUsIFwibGVmdFwiLCBwb3NpdGlvbiwgaW5kZXgpO1xyXG4gICByZXR1cm4ge1xyXG4gICAgIGluZGV4OiBCaW5kaW5nUmVnaW9uLmdldFBhcmVudChiaW5kaW5nUmVnaW9uLCBjeSkuZGF0YSgnc3RhdGVzYW5kaW5mb3MnKS5pbmRleE9mKGJpbmRpbmdSZWdpb24pLFxyXG4gICAgIGxvY2F0aW9uOiBiaW5kaW5nUmVnaW9uLmFuY2hvclNpZGUsXHJcbiAgICAgcG9zaXRpb246IHBvc2l0aW9uXHJcbiAgIH1cclxuIFxyXG4gfTtcclxuIFxyXG4gQmluZGluZ1JlZ2lvbi5yZW1vdmUgPSBmdW5jdGlvbiAobWFpbk9iaiwgY3kpIHtcclxuICAgdmFyIHBvc2l0aW9uID0gQmluZGluZ1JlZ2lvbi5nZXRQb3NpdGlvbkluZGV4KG1haW5PYmosIGN5KTtcclxuICAgdmFyIGluZGV4ID0gQmluZGluZ1JlZ2lvbi5nZXRQYXJlbnQobWFpbk9iaiwgY3kpLmRhdGEoJ3N0YXRlc2FuZGluZm9zJykuaW5kZXhPZihtYWluT2JqKTtcclxuICAgQmluZGluZ1JlZ2lvbi5yZW1vdmVGcm9tUGFyZW50KG1haW5PYmosIGN5KTtcclxuICAgcmV0dXJuIHtcclxuICAgICBjbGF6ejogXCJiaW5kaW5nIHJlZ2lvblwiLFxyXG4gICAgIHJlZ2lvbjoge1xyXG4gICAgICAgdmFyaWFibGU6IG1haW5PYmoucmVnaW9uLnZhcmlhYmxlXHJcbiAgICAgfSxcclxuICAgICBiYm94OiB7XHJcbiAgICAgICB3OiBtYWluT2JqLmJib3gudyxcclxuICAgICAgIGg6IG1haW5PYmouYmJveC5oXHJcbiAgICAgfSxcclxuICAgICBsb2NhdGlvbjogbWFpbk9iai5hbmNob3JTaWRlLFxyXG4gICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcclxuICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgc3R5bGUgOiBtYWluT2JqLnN0eWxlXHJcbiAgIH07XHJcbiB9O1xyXG4gXHJcbiBCaW5kaW5nUmVnaW9uLmNvcHkgPSBmdW5jdGlvbihtYWluT2JqLCBjeSwgbmV3UGFyZW50LCBuZXdJZCkge1xyXG4gICB2YXIgbmV3QmluZGluZ1JlZ2lvbiA9IEF1eGlsaWFyeVVuaXQuY29weShtYWluT2JqLCBjeSwgQmluZGluZ1JlZ2lvbi5jb25zdHJ1Y3QoKSwgbmV3UGFyZW50LCBuZXdJZCk7XHJcbiAgIG5ld0JpbmRpbmdSZWdpb24ucmVnaW9uID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgbWFpbk9iai5yZWdpb24pO1xyXG4gICBuZXdCaW5kaW5nUmVnaW9uLkJpbmRpbmdSZWdpb25EZWZpbml0aW9uID0gbWFpbk9iai5CaW5kaW5nUmVnaW9uRGVmaW5pdGlvbjtcclxuICAgbmV3QmluZGluZ1JlZ2lvbi5jbGF6eiA9IG1haW5PYmouY2xheno7XHJcbiAgIHJldHVybiBuZXdCaW5kaW5nUmVnaW9uO1xyXG4gfTtcclxuIFxyXG4gbnMuQmluZGluZ1JlZ2lvbiA9IEJpbmRpbmdSZWdpb247XHJcbiAvLyAtLS0tLS0tLS0tLS0tLSBFTkQgQmluZGluZ1JlZ2lvbiAtLS0tLS0tLS0tLS0tLSAvL1xyXG4gXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLSBVbml0T2ZJbmZvcm1hdGlvbiAtLS0tLS0tLS0tLS0tLSAvL1xyXG4vKipcclxuICogcGFyZW50IGNhbiBiZSBhbiBFUE4sIGNvbXBhcnRtZW50IG9yIHN1YnVuaXRcclxuICovXHJcblxyXG52YXIgVW5pdE9mSW5mb3JtYXRpb24gPSB7fTtcclxuXHJcbi8vIFVuaXRPZkluZm9ybWF0aW9uIGV4dGVuZHMgQXV4aWxpYXJ5VW5pdCBieSBpbmhlcml0aW5nIGVhY2ggc3RhdGljIHByb3BlcnR5IG9mIGl0XHJcbmZvciAodmFyIHByb3AgaW4gQXV4aWxpYXJ5VW5pdCkge1xyXG4gIFVuaXRPZkluZm9ybWF0aW9uW3Byb3BdID0gQXV4aWxpYXJ5VW5pdFtwcm9wXTtcclxufVxyXG5cclxuLy8gQ29uc3RydWN0cyBhIFVuaXRPZkluZm9ybWF0aW9uIG9iamVjdCBieSBleHRlbmRpbmcgcHJvcGVydGllcyBvZiBhbiBBdXhpbGlhcnlVbml0IG9iamVjdCBhbmQgcmV0dXJuIHRoYXQgb2JqZWN0XHJcblVuaXRPZkluZm9ybWF0aW9uLmNvbnN0cnVjdCA9IGZ1bmN0aW9uKHZhbHVlLCBwYXJlbnQsIGlkKSB7XHJcbiAgdmFyIG9iaiA9IEF1eGlsaWFyeVVuaXQuY29uc3RydWN0KHBhcmVudCk7XHJcbiAgb2JqLmlkID0gaWQgfHwgZWxlbWVudFV0aWxpdGllcy5nZW5lcmF0ZVVuaXRPZkluZm9JZCgpO1xyXG4gIG9iai5sYWJlbCA9IHt0ZXh0OiB2YWx1ZX07IC8vIGZyb20gbGVnYWN5IGNvZGUsIGNvbnRhaW5zIHt0ZXh0OiB9XHJcbiAgb2JqLmNsYXp6ID0gXCJ1bml0IG9mIGluZm9ybWF0aW9uXCI7XHJcblxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG5Vbml0T2ZJbmZvcm1hdGlvbi5nZXRUZXh0ID0gZnVuY3Rpb24obWFpbk9iaikge1xyXG4gIHJldHVybiBtYWluT2JqLmxhYmVsLnRleHQ7XHJcbn07XHJcblxyXG5Vbml0T2ZJbmZvcm1hdGlvbi5oYXNUZXh0ID0gZnVuY3Rpb24obWFpbk9iaikge1xyXG4gIHJldHVybiBtYWluT2JqLmxhYmVsLnRleHQgJiYgbWFpbk9iai5sYWJlbC50ZXh0ICE9IFwiXCI7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHVuaXQgb2YgaW5mbyBhbmQgbGlua3MgZXZlcnl0aGluZyBhY2NvcmRpbmdseVxyXG4gKiBAcGFyYW0gcGFyZW50Tm9kZSAtIHRoZSBjeXRvc2NhcGUgZWxlbWVudCBob3N0aW5nIHRoZSB1bml0IG9mIGluZm9ybWF0aW9uXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIGl0cyB0ZXh0XHJcbiAqIEBwYXJhbSBbbG9jYXRpb25dIC0gdGhlIHNpZGUgd2hlcmUgaXQgd2lsbCBiZSBwbGFjZWQgdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0IG9yIHVuZGVmaW5lZCAoYXV0byBwbGFjZW1lbnQpXHJcbiAqIEBwYXJhbSBbcG9zaXRpb25dIC0gaXRzIHBvc2l0aW9uIGluIHRoZSBvcmRlciBvZiBlbGVtZW50cyBwbGFjZWQgb24gdGhlIHNhbWUgbG9jYXRpb25cclxuICogQHBhcmFtIFtpbmRleF0gLSBpdHMgaW5kZXggaW4gdGhlIHN0YXRlc2FuZGluZm9zIGxpc3RcclxuICovXHJcblVuaXRPZkluZm9ybWF0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIChwYXJlbnROb2RlLCBjeSwgdmFsdWUsIGJib3gsIGxvY2F0aW9uLCBwb3NpdGlvbiwgc3R5bGUsIGluZGV4LCBpZCkge1xyXG4gIC8vIGNyZWF0ZSB0aGUgbmV3IHVuaXQgb2YgaW5mb1xyXG4gIHZhciB1bml0ID0gVW5pdE9mSW5mb3JtYXRpb24uY29uc3RydWN0KHZhbHVlLCBwYXJlbnROb2RlKTtcclxuICB1bml0LmJib3ggPSBiYm94O1xyXG4gIHVuaXQuc3R5bGUgPSBzdHlsZTtcclxuICBpZiAoIGlkICkge1xyXG4gICAgdW5pdC5pZCA9IGlkO1xyXG4gIH1cclxuXHJcbiAgcG9zaXRpb24gPSBVbml0T2ZJbmZvcm1hdGlvbi5hZGRUb1BhcmVudCh1bml0LCBjeSwgcGFyZW50Tm9kZSwgbG9jYXRpb24sIHBvc2l0aW9uLCBpbmRleCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpbmRleDogVW5pdE9mSW5mb3JtYXRpb24uZ2V0UGFyZW50KHVuaXQsIGN5KS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmluZGV4T2YodW5pdCksXHJcbiAgICBsb2NhdGlvbjogdW5pdC5hbmNob3JTaWRlLFxyXG4gICAgcG9zaXRpb246IHBvc2l0aW9uXHJcbiAgfVxyXG59O1xyXG5cclxuVW5pdE9mSW5mb3JtYXRpb24ucmVtb3ZlID0gZnVuY3Rpb24gKG1haW5PYmosIGN5KSB7XHJcbiAgdmFyIHBvc2l0aW9uID0gVW5pdE9mSW5mb3JtYXRpb24uZ2V0UG9zaXRpb25JbmRleChtYWluT2JqLCBjeSk7XHJcbiAgdmFyIGluZGV4ID0gVW5pdE9mSW5mb3JtYXRpb24uZ2V0UGFyZW50KG1haW5PYmosIGN5KS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmluZGV4T2YobWFpbk9iaik7XHJcbiAgVW5pdE9mSW5mb3JtYXRpb24ucmVtb3ZlRnJvbVBhcmVudChtYWluT2JqLCBjeSk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGNsYXp6OiBcInVuaXQgb2YgaW5mb3JtYXRpb25cIixcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIHRleHQ6IG1haW5PYmoubGFiZWwudGV4dFxyXG4gICAgfSxcclxuICAgIGJib3g6IHtcclxuICAgICAgdzogbWFpbk9iai5iYm94LncsXHJcbiAgICAgIGg6IG1haW5PYmouYmJveC5oXHJcbiAgICB9LFxyXG4gICAgbG9jYXRpb246IG1haW5PYmouYW5jaG9yU2lkZSxcclxuICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcclxuICAgIGluZGV4OiBpbmRleCxcclxuICAgIHN0eWxlOiBtYWluT2JqLnN0eWxlXHJcbiAgfTtcclxufTtcclxuXHJcblVuaXRPZkluZm9ybWF0aW9uLmNvcHkgPSBmdW5jdGlvbihtYWluT2JqLCBjeSwgbmV3UGFyZW50LCBuZXdJZCkge1xyXG4gIHZhciBuZXdVbml0T2ZJbmZvID0gQXV4aWxpYXJ5VW5pdC5jb3B5KG1haW5PYmosIGN5LCBVbml0T2ZJbmZvcm1hdGlvbi5jb25zdHJ1Y3QoKSwgbmV3UGFyZW50LCBuZXdJZCk7XHJcbiAgbmV3VW5pdE9mSW5mby5sYWJlbCA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIG1haW5PYmoubGFiZWwpO1xyXG4gIG5ld1VuaXRPZkluZm8uY2xhenogPSBtYWluT2JqLmNsYXp6O1xyXG4gIHJldHVybiBuZXdVbml0T2ZJbmZvO1xyXG59O1xyXG5cclxubnMuVW5pdE9mSW5mb3JtYXRpb24gPSBVbml0T2ZJbmZvcm1hdGlvbjtcclxuLy8gLS0tLS0tLS0tLS0tLS0gRU5EIFVuaXRPZkluZm9ybWF0aW9uIC0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLSBFbnRpdHlUeXBlIC0tLS0tLS0tLS0tLS0tIC8vXHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiB0aGUgRVBOLCBmb3IgZXhhbXBsZSB0aGVyZSBjYW4gYmUgc2V2ZXJhbHMgbXlvc2luIEVQTiwgYnV0IG9ubHkgb25lIG15b3NpbiBFbnRpdHlUeXBlXHJcbiAqIFRoaXMgY2xhc3Mgd2lsbCBob2xkIHRoZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgc3RhdGUgdmFyaWFibGUsIHRoYXQgYXJlIHNoYXJlZCBiZXR3ZWVuIGFsbCBteW9zaW5zXHJcbiAqL1xyXG5cclxudmFyIEVudGl0eVR5cGUgPSB7fTtcclxuXHJcbi8vIENvbnN0cnVjdHMgYW4gRW50aXR5VHlwZSBvYmplY3QgYW5kIHJldHVybnMgaXRcclxuRW50aXR5VHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbihuYW1lLCBFUE4pIHtcclxuICB2YXIgb2JqID0ge307XHJcbiAgb2JqLm5hbWUgPSBuYW1lOyAvLyBub3JtYWxseSB0aGUgc2FtZSBhcyBpdHMgRVBOc1xyXG4gIG9iai5zdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbnMgPSBbXTsgLy8gMCBvciBtYW55IHNoYXJlZCBzdGF0ZSBkZWZpbml0aW9uc1xyXG4gIG9iai5FUE5zID0gW107IC8vIHRoZXJlIHNob3VsZCBhbHdheXMgYmUgYXQgbGVhc3QgMSBlbGVtZW50LCBlbHNlIG5vIHJlYXNvbiB0byBleGlzdFxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG5FbnRpdHlUeXBlLmNyZWF0ZU5ld0RlZmluaXRpb25Gb3IgPSBmdW5jdGlvbiAobWFpbk9iaiwgc3RhdGVWYXIpIHtcclxuICB2YXIgbmV3RGVmaW5pdGlvbiA9IFN0YXRlVmFyaWFibGVEZWZpbml0aW9uLmNvbnN0cnVjdCgpO1xyXG4gIG5ld0RlZmluaXRpb24uZW50aXR5VHlwZSA9IG1haW5PYmo7XHJcbiAgbmV3RGVmaW5pdGlvbi5zdGF0ZVZhcmlhYmxlcy5wdXNoKHN0YXRlVmFyKTtcclxuXHJcbiAgc3RhdGVWYXIuc3RhdGVWYXJpYWJsZURlZmluaXRpb24gPSBuZXdEZWZpbml0aW9uO1xyXG4gIHN0YXRlVmFyLnBhcmVudC5kYXRhKCdlbnRpdHlUeXBlJywgbWFpbk9iaik7XHJcbiAgbWFpbk9iai5zdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbnMucHVzaChuZXdEZWZpbml0aW9uKTtcclxufTtcclxuXHJcbkVudGl0eVR5cGUuYXNzaWduU3RhdGVWYXJpYWJsZSA9IGZ1bmN0aW9uIChtYWluT2JqLCBzdGF0ZVZhcikge1xyXG4gIC8vIGZpcnN0IHRyaXZpYWwgY2FzZSwgbm8gc3RhdGVEZWZpbml0aW9uIHlldCBmb3IgdGhpcyBlbnRpdHlUeXBlLCBzbyB0aGlzIGlzIGEgbmV3IG9uZVxyXG4gIGlmIChtYWluT2JqLnN0YXRlVmFyaWFibGVEZWZpbml0aW9ucy5sZW5ndGggPT0gMCkge1xyXG4gICAgRW50aXR5VHlwZS5jcmVhdGVOZXdEZWZpbml0aW9uRm9yKG1haW5PYmosIHN0YXRlVmFyKTtcclxuICB9XHJcbiAgZWxzZSB7IC8vIGlmIGRlZmluaXRpb25zIGFyZSBhbHJlYWR5IHByZXNlbnQsIHdlIG5lZWQgdG8gbWF0Y2ggdGhvc2UgdG8gdGhlIGN1cnJlbnQgc3RhdGVWYXJpYWJsZVxyXG4gICAgZm9yKHZhciBpPTA7IGkgPCBtYWluT2JqLnN0YXRlVmFyaWFibGVEZWZpbml0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgbWF0Y2hTdGF0ZURlZiA9IG1haW5PYmouc3RhdGVWYXJpYWJsZURlZmluaXRpb25zW2ldO1xyXG4gICAgICBpZiAoU3RhdGVWYXJpYWJsZURlZmluaXRpb24ubWF0Y2hTdGF0ZVZhcmlhYmxlKG1hdGNoU3RhdGVEZWYsIHN0YXRlVmFyKSl7XHJcbiAgICAgICAgbWF0Y2hTdGF0ZURlZi5zdGF0ZVZhcmlhYmxlcy5wdXNoKHN0YXRlVmFyKTtcclxuICAgICAgICBzdGF0ZVZhci5zdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbiA9IG1hdGNoU3RhdGVEZWY7XHJcbiAgICAgICAgc3RhdGVWYXIucGFyZW50LmRhdGEoJ2VudGl0eVR5cGUnLCBtYWluT2JqKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGlmIG5vdGhpbmcgd2FzIG1hdGNoZWQgYW1vbmcgdGhlIGN1cnJlbnQgc3RhdGVWYXJEZWYgb2YgdGhpcyBlbnRpdHlUeXBlLCBjcmVhdGUgbmV3IG9uZVxyXG4gICAgRW50aXR5VHlwZS5jcmVhdGVOZXdEZWZpbml0aW9uRm9yKG1haW5PYmosIHN0YXRlVmFyKTtcclxuICB9XHJcbn07XHJcblxyXG5ucy5FbnRpdHlUeXBlID0gRW50aXR5VHlwZTtcclxuLy8gLS0tLS0tLS0tLS0tLS0gRU5EIEVudGl0eVR5cGUgLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tIFN0YXRlVmFyaWFibGVEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tIC8vXHJcbi8qKlxyXG4gKiBUaGUgc3RhdGUgdmFyaWFibGUgZGVmaW5pdGlvbiBpcyBzb21ldGhpbmcgc2hhcmVkIGFjcm9zcyBkaWZmZXJlbnQgRVBOc1xyXG4gKiBUaGUgY29uY2VybmVkIEVQTnMgYXJlIGxpbmtlZCB0aHJvdWdoIHRoZSBlbnRpdHlwZSByZWZlcmVuY2VcclxuICovXHJcblxyXG52YXIgU3RhdGVWYXJpYWJsZURlZmluaXRpb24gPSB7fTtcclxuXHJcbi8vIENvbnN0cnVjdHMgYSBuZXcgU3RhdGVWYXJpYWJsZURlZmluaXRpb24gb2JqZWN0IGFuZCByZXR1cm5zIGl0XHJcblN0YXRlVmFyaWFibGVEZWZpbml0aW9uLmNvbnN0cnVjdCA9IGZ1bmN0aW9uKG5hbWUsIGVudGl0eVR5cGUpIHtcclxuICB2YXIgb2JqID0ge307XHJcbiAgb2JqLm5hbWUgPSBuYW1lO1xyXG4gIG9iai5lbnRpdHlUeXBlID0gZW50aXR5VHlwZTsgLy8gcmVmZXJlbmNlIHRvIG93bmluZyBlbnRpdHkgdHlwZVxyXG4gIG9iai5zdGF0ZVZhcmlhYmxlcyA9IFtdOyAvLyB0aGVyZSBzaG91bGQgYWx3YXlzIGJlIGF0IGxlYXN0IDEgZWxlbWVudCwgZWxzZSBubyByZWFzb24gdG8gZXhpc3RcclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgdGhhdCBzaGFyZSB0aGlzIHN0YXRlIGRlZmluaXRpb25cclxuICovXHJcblN0YXRlVmFyaWFibGVEZWZpbml0aW9uLmdldENvbmNlcm5lZEVQTnMgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgcmV0dXJuIG1haW5PYmouZW50aXR5VHlwZS5FUE5zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEd1ZXNzIGlmIHRoZSBwcm92aWRlZCBzdGF0ZVZhcmlhYmxlIGJlbG9uZ3MgdG8gdGhpcyBzdGF0ZVZhckRlZmluaXRpb25cclxuICogV2UgY29uc2lkZXIgaXQgZG9lcywgaWYgZWl0aGVyIHRoZSBzdGF0ZXZhci52YWx1ZSBvciBzdGF0ZXZhci52YXJpYWJsZSBhcmUgbWF0Y2hpbmcgb25lXHJcbiAqIGlmIHRoZSBzdGF0ZXZhciBpbiB0aGUgc2V0IG9mIHRoZSBTdGF0ZVZhckRlZlxyXG4gKiBUaGlzIGlzIGJlY2F1c2Ugd2Ugbm9ybWFsbHkgY29tcGFyZSBvbmx5IHN0YXRlVmFyaWFibGVzIGZyb20gdGhlIHNhbWUgZW50aXR5VHlwZVxyXG4gKi9cclxuU3RhdGVWYXJpYWJsZURlZmluaXRpb24ubWF0Y2hTdGF0ZVZhcmlhYmxlID0gZnVuY3Rpb24obWFpbk9iaiwgc3RhdGVWYXIpIHtcclxuICBmb3IodmFyIGk9MDsgaSA8IG1haW5PYmouc3RhdGVWYXJpYWJsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBtYXRjaFN0YXRlVmFyID0gbWFpbk9iai5zdGF0ZVZhcmlhYmxlc1tpXTtcclxuICAgIC8vIERvbid0IG1hdGNoIGEgc3RhdGVWYXIgYWdhaW5zdCBhbm90aGVyIG9uZSBmcm9tIHRoZSBzYW1lIGVsZW1lbnQuXHJcbiAgICAvLyBJZiAyIHN0YXRldmFyIG9uIHRoZSBzYW1lIGVsZW1lbnQsIHRoZW4gdGhleSBoYXZlIHRvIGJlbG9uZyB0byAyIGRpZmZlcmVudCBzdGF0ZVZhckRlZmluaXRpb25zXHJcbiAgICBpZihtYXRjaFN0YXRlVmFyLnBhcmVudCA9PT0gc3RhdGVWYXIucGFyZW50KSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgLy8gbm9ybWFsIHN1cmUgY2FzZS4gRXhhbXBsZTpcclxuICAgIC8vIFAgVDEzNCAtIHVuZGVmaW5lZCBUMTM0XHJcbiAgICAvLyBQIHVuZGVmIC0gUCB1bmRlZlxyXG4gICAgaWYgKC8vKG1hdGNoU3RhdGVWYXIudmFsdWUgJiYgc3RhdGVWYXIudmFsdWUgJiYgbWF0Y2hTdGF0ZVZhci52YWx1ZSA9PSBzdGF0ZVZhci52YWx1ZSApIHx8XHJcbiAgICAgICAgKG1hdGNoU3RhdGVWYXIudmFyaWFibGUgJiYgc3RhdGVWYXIudmFyaWFibGUgJiYgbWF0Y2hTdGF0ZVZhci52YXJpYWJsZSA9PSBzdGF0ZVZhci52YXJpYWJsZSkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBtb3JlIHN1YnRsZSBjYXNlLCB3aXRoIGVtcHR5IHN0YXRlVmFyLiBMb29rIG9ubHkgYXQgdmFsdWUgYW5kIGRpc2NhcmQgdmFyaWFibGVcclxuICAgIC8vIGV4YW1wbGU6IHVuZGVmIHVuZGVmIC0gUCB1bmRlZlxyXG4gICAgZWxzZSBpZiAoKCFtYXRjaFN0YXRlVmFyLnZhcmlhYmxlICYmICFzdGF0ZVZhci52YXJpYWJsZSkgJiYgKG1hdGNoU3RhdGVWYXIudmFsdWUgfHwgc3RhdGVWYXIudmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5ucy5TdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbiA9IFN0YXRlVmFyaWFibGVEZWZpbml0aW9uO1xyXG4vLyAtLS0tLS0tLS0tLS0tLSBFTkQgU3RhdGVWYXJpYWJsZURlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tIEF1eFVuaXRMYXlvdXQgLS0tLS0tLS0tLS0tLS0gLy9cclxuLyoqXHJcbiAqIFJlc3BvbnNpYmxlIGZvciBsYXlpbmcgb3V0IHRoZSBhdXhpbGlhcnkgdW5pdHMgY29udGFpbmVkIG9uIGEgc2FtZSBlZGdlXHJcbiAqL1xyXG5cclxudmFyIEF1eFVuaXRMYXlvdXQgPSB7fTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuY29uc3RydWN0ID0gZnVuY3Rpb24ocGFyZW50Tm9kZSwgbG9jYXRpb24sIGFsaWdubWVudCkge1xyXG4gIHZhciBvYmogPSB7fTtcclxuICBvYmoudW5pdHMgPSBbXTtcclxuICBvYmoubG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICBvYmouYWxpZ25tZW50ID0gYWxpZ25tZW50IHx8IFwibGVmdFwiOyAvLyB0aGlzIHdhcyBpbnRlbmRlZCB0byBiZSB1c2VkLCBidXQgaXQgaXNuJ3QgZm9yIG5vd1xyXG4gIEF1eFVuaXRMYXlvdXQuc2V0UGFyZW50Tm9kZVJlZihvYmosIHBhcmVudE5vZGUpO1xyXG5cclxuICBvYmoucmVuZGVyTGVuZ3RoQ2FjaGUgPSBbXTtcclxuICBvYmoubGVuZ3RoVXNlZCA9IDA7XHJcblxyXG4gIC8vIHNwZWNpZmljIHJ1bGVzIGZvciB0aGUgbGF5b3V0XHJcbiAgaWYocGFyZW50Tm9kZS5kYXRhKCdjbGFzcycpID09IFwic2ltcGxlIGNoZW1pY2FsXCIpIHtcclxuICAgIG9iai5vdXRlck1hcmdpbiA9IDM7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5nZXRQYXJlbnROb2RlID0gZnVuY3Rpb24obWFpbk9iaiwgY3kpIHtcclxuICB2YXIgcGFyZW50Tm9kZSA9IG1haW5PYmoucGFyZW50Tm9kZTtcclxuXHJcbiAgLy8gSWYgcGFyZW50Tm9kZSBpcyBpZCBvZiBwYXJlbnQgbm9kZSByYXRoZXIgdGhhbiBiZWluZyBpdHNlbGYgZ2V0IHRoZSBwYXJlbnQgbm9kZSBieSB0aGF0IGlkXHJcbiAgaWYgKHR5cGVvZiBwYXJlbnROb2RlID09PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIGN5LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGUpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyZW50Tm9kZTtcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuc2V0UGFyZW50Tm9kZVJlZiA9IGZ1bmN0aW9uKG1haW5PYmosIHBhcmVudE5vZGUpIHtcclxuICBpZiAobWFpbk9iaiAmJiBwYXJlbnROb2RlKSB7XHJcbiAgICAvLyBLZWVwIGlkIG9mIHBhcmVudCBub2RlIHRvIGF2YW9pZCBjaXJjdWxhciByZWZlcmVuY2VzXHJcbiAgICBtYWluT2JqLnBhcmVudE5vZGUgPSB0eXBlb2YgcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycgPyBwYXJlbnROb2RlIDogcGFyZW50Tm9kZS5pZCgpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIG91dGVyTWFyZ2luOiB0aGUgbGVmdCBhbmQgcmlnaHQgc3BhY2UgbGVmdCBiZXR3ZWVuIHRoZSBzaWRlIG9mIHRoZSBub2RlLCBhbmQgdGhlIGZpcnN0IChhbmQgbGFzdCkgYm94XHJcbiAqIHVuaXRHYXA6IHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBhdXhpbGlhcnkgdW5pdHNcclxuICogYWx3YXlzU2hvd0F1eFVuaXRzOiBieXBhc3NlcyBhbnkgbGltaXQgb2YgdW5pdHMgZGlzcGxheWVkLCBhbmQgcHJldmVudCB1bml0cyBmcm9tIGRpc2FwcGVhcmluZyxcclxuICogZm9yY2luZyBhIG1pbmltdW0gc2l6ZSBmb3IgdGhlIG5vZGVcclxuICogbWF4VW5pdERpc3BsYXllZDogc2hvdyBhdCBtb3N0IHRoaXMgYW1vdW50IG9mIHVuaXRzLCBldmVuIHdoZW4gdGhlcmUgaXMgZW5vdWdoIHNwYWNlXHJcbiAqXHJcbiAqIFRoZXNlIG9wdGlvbnMgY2FuIGJlIGRlZmluZWQgYXQgdGhlIGluc3RhbmNlIGxldmVsLiBJZiBpdCBpcyBmb3VuZCBpbiBhbiBpbnN0YW5jZSwgdGhlbiBpdFxyXG4gKiB0YWtlcyBwcmVjZWRlbmNlLiBJZiBub3QgZm91bmQsIHRoZSBmb2xsb3dpbmcgY2xhc3MnIHZhbHVlcyBhcmUgdXNlZC5cclxuICovXHJcbkF1eFVuaXRMYXlvdXQub3V0ZXJNYXJnaW4gPSA1O1xyXG5BdXhVbml0TGF5b3V0LnVuaXRHYXAgPSA1O1xyXG5BdXhVbml0TGF5b3V0LmN1cnJlbnRUb3BVbml0R2FwID0gNTtcclxuQXV4VW5pdExheW91dC5jdXJyZW50Qm90dG9tVW5pdEdhcCA9IDU7XHJcbkF1eFVuaXRMYXlvdXQuY3VycmVudExlZnRVbml0R2FwID0gNTtcclxuQXV4VW5pdExheW91dC5jdXJyZW50UmlnaHRVbml0R2FwID0gNTtcclxuQXV4VW5pdExheW91dC5hbHdheXNTaG93QXV4VW5pdHMgPSB0cnVlO1xyXG5BdXhVbml0TGF5b3V0Lm1heFVuaXREaXNwbGF5ZWQgPSAtMTtcclxuQXV4VW5pdExheW91dC5sYXN0UG9zID0gLTE7XHJcblxyXG5BdXhVbml0TGF5b3V0LnVwZGF0ZSA9IGZ1bmN0aW9uKG1haW5PYmosIGN5KSB7XHJcbiAgLy9BdXhVbml0TGF5b3V0LnByZWNvbXB1dGVDb29yZHMobWFpbk9iaiwgY3kpO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5hZGRBdXhVbml0ID0gZnVuY3Rpb24obWFpbk9iaiwgY3ksIHVuaXQsIHBvc2l0aW9uLCBwcmVDb21wdXRlZCkge1xyXG4gIGlmKHR5cGVvZiBwb3NpdGlvbiAhPSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICBtYWluT2JqLnVuaXRzLnNwbGljZShwb3NpdGlvbiwgMCwgdW5pdCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgbWFpbk9iai51bml0cy5wdXNoKHVuaXQpO1xyXG4gICAgcG9zaXRpb24gPSBtYWluT2JqLnVuaXRzLmxlbmd0aCAtIDE7XHJcbiAgfVxyXG4gIGlmIChwcmVDb21wdXRlZCA9PT0gdW5kZWZpbmVkIHx8IHByZUNvbXB1dGVkID09PSBmYWxzZSkge1xyXG4gICAgQXV4VW5pdExheW91dC5jb21wdXRlQ29vcmRzKG1haW5PYmosIGN5LCB1bml0KTtcclxuICAgIHZhciBwYXJlbnROb2RlID0gQXV4VW5pdExheW91dC5nZXRQYXJlbnROb2RlKG1haW5PYmosIGN5KTtcclxuICAgIHZhciBsb2NhdGlvbnMgPSBBdXhVbml0TGF5b3V0LmNoZWNrRml0KHBhcmVudE5vZGUsY3kpO1xyXG4gICAgaWYobG9jYXRpb25zLmZpbHRlcihmdW5jdGlvbihsb2Mpe3JldHVybiBsb2MgPT0gbWFpbk9iai5sb2NhdGlvbn0pLmxlbmd0aCA+IDApe1xyXG4gICAgICBBdXhVbml0TGF5b3V0LmZpdFVuaXRzKHBhcmVudE5vZGUsY3ksIFttYWluT2JqLmxvY2F0aW9uXSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gIH1cclxuICAvL0F1eFVuaXRMYXlvdXQudXBkYXRlTGVuZ3RoQ2FjaGUobWFpbk9iaiwgY3kpO1xyXG4gIC8vQXV4VW5pdExheW91dC51cGRhdGUobWFpbk9iaiwgY3ksIHRydWUpO1xyXG4gIC8qaWYgKEF1eFVuaXRMYXlvdXQuZ2V0QWx3YXlzU2hvd0F1eFVuaXRzKG1haW5PYmopKSB7XHJcbiAgICAvLyBzZXQgYSBtaW5pbXVtIHNpemUgYWNjb3JkaW5nIHRvIGJvdGggc2lkZXMgb24gdGhlIHNhbWUgb3JpZW50YXRpb25cclxuICAgIEF1eFVuaXRMYXlvdXQuc2V0UGFyZW50TWluTGVuZ3RoKG1haW5PYmosIGN5KTtcclxuICAgIC8vIG5lZWQgdG8gcmVzaXplIHRoZSBwYXJlbnQgaW4gY2FzZSB0aGUgc3BhY2Ugd2FzIHRvbyBzbWFsbFxyXG4gICAgQXV4VW5pdExheW91dC5yZXNpemVQYXJlbnQobWFpbk9iaiwgY3ksIG1haW5PYmoubGVuZ3RoVXNlZCk7XHJcbiAgfSovXHJcbiAgLy9jeS5zdHlsZSgpLnVwZGF0ZSgpOyAvLyA8LSB3YXMgaXQgcmVhbGx5IG5lY2Vzc2FyeSA/XHJcbiAgcmV0dXJuIHBvc2l0aW9uO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5jb21wdXRlQ29vcmRzID0gZnVuY3Rpb24obWFpbk9iaiwgY3ksIHVuaXQpe1xyXG4gIEF1eFVuaXRMYXlvdXQuc2V0RGlzcGxheWVkVW5pdHMobWFpbk9iaiwgY3kpO1xyXG4gIHZhciBsb2NhdGlvbiA9IG1haW5PYmoubG9jYXRpb247XHJcbiAgdmFyIG5vZGUgPSBBdXhVbml0TGF5b3V0LmdldFBhcmVudE5vZGUobWFpbk9iaiwgY3kpO1xyXG4gIGlmIChsb2NhdGlvbiA9PT0gXCJ0b3BcIiB8fCBsb2NhdGlvbiA9PT0gXCJib3R0b21cIikge1xyXG4gICAgdmFyIHBvc2l0aW9uID0gbm9kZS5wb3NpdGlvbigpO1xyXG4gICAgdmFyIHBhcmVudFdpZHRoID0gbm9kZS5kYXRhKCdiYm94JykudztcclxuICAgIHZhciBwYWRkaW5nID0gbm9kZS5wYWRkaW5nKCk7XHJcbiAgICB2YXIgcGFyZW50V2lkdGggPSBub2RlLndpZHRoKCk7XHJcbiAgICB2YXIgcGFyZW50SGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcclxuICAgIHZhciBwYXJlbnRYMSA9IHBvc2l0aW9uLnggLSBwYXJlbnRXaWR0aC8yIC0gcGFkZGluZztcclxuICAgIHZhciBwYXJlbnRYMiA9IHBvc2l0aW9uLnggKyBwYXJlbnRXaWR0aC8yICsgcGFkZGluZztcclxuICAgIHZhciBwYXJlbnRZMSA9IHBvc2l0aW9uLnkgLSBwYXJlbnRIZWlnaHQvMiAtIHBhZGRpbmc7XHJcbiAgICB2YXIgcGFyZW50WTIgPSBwb3NpdGlvbi55ICsgcGFyZW50SGVpZ2h0LzIgKyBwYWRkaW5nO1xyXG5cclxuICAgIGlmIChtYWluT2JqLnVuaXRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBcclxuICAgICAgdmFyIHJlbGF0aXZlQ29vcmRzID0gQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9SZWxhdGl2ZUNvb3JkKHVuaXQsIHVuaXQuYmJveC53LzIgKyAocGFyZW50WDEpICsgQXV4VW5pdExheW91dC5nZXRDdXJyZW50R2FwKGxvY2F0aW9uKSwgKHBhcmVudFkxKSArIEF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudEdhcChsb2NhdGlvbiksIGN5KTtcclxuICAgICAgdW5pdC5iYm94LnggPSByZWxhdGl2ZUNvb3Jkcy54IDtcclxuICAgICAgdW5pdC5iYm94LnkgPSByZWxhdGl2ZUNvb3Jkcy55O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhciBsYXN0VW5pdCA9IG1haW5PYmoudW5pdHNbbWFpbk9iai51bml0cy5sZW5ndGggLSAyXTsvL0dldCB0aGUgcG9zaXRpb24gb2YgdGhlIGxhc3QgdW5pdFxyXG4gICAgICB2YXIgbGFzdFVuaXRBYnNDb3JkID0gQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9BYnNvbHV0ZUNvb3JkKGxhc3RVbml0LCBsYXN0VW5pdC5iYm94LngsIGxhc3RVbml0LmJib3gueSwgY3kpO1xyXG4gICAgICB2YXIgcmVsYXRpdmVDb29yZHMgPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb1JlbGF0aXZlQ29vcmQodW5pdCwgdW5pdC5iYm94LncvMisgbGFzdFVuaXRBYnNDb3JkLnggKyBsYXN0VW5pdC5iYm94LncvMiArIEF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudEdhcChsb2NhdGlvbiksIChwYXJlbnRZMSkgKyBBdXhVbml0TGF5b3V0LmdldEN1cnJlbnRHYXAobG9jYXRpb24pLCBjeSk7XHJcbiAgICAgIHVuaXQuYmJveC54ID0gcmVsYXRpdmVDb29yZHMueCA7XHJcbiAgICAgIHVuaXQuYmJveC55ID0gcmVsYXRpdmVDb29yZHMueTtcclxuICAgICAvLyB1bml0LmJib3gueCA9IG1haW5PYmoudW5pdHNbbGFzdFVuaXRdLmJib3gueCArICBtYWluT2JqLnVuaXRzW2xhc3RVbml0XS5iYm94LncvMiArIHVuaXQuYmJveC53LzIgKyBBdXhVbml0TGF5b3V0LmdldEN1cnJlbnRHYXAobG9jYXRpb24pO1xyXG4gICAgfVxyXG4gICAgdW5pdC5iYm94LnkgPSAobG9jYXRpb24gPT09IFwidG9wXCIpID8gMCA6IDEwMDtcclxuICB9Ly9XZSBkb24ndCBoYXZlIHRoZSByaWdodCBvciBsZWZ0IGFkZGl0aW9uIGNhc2VzIHlldCAtLSBOb3cgd2UgaGF2ZSBpdFxyXG4gIGVsc2VcclxuICB7XHJcbiAgICB2YXIgcG9zaXRpb24gPSBub2RlLnBvc2l0aW9uKCk7XHJcbiAgICB2YXIgcGFyZW50V2lkdGggPSBub2RlLmRhdGEoJ2Jib3gnKS53O1xyXG4gICAgdmFyIHBhZGRpbmcgPSBub2RlLnBhZGRpbmcoKTtcclxuICAgIHZhciBwYXJlbnRXaWR0aCA9IG5vZGUud2lkdGgoKTtcclxuICAgIHZhciBwYXJlbnRIZWlnaHQgPSBub2RlLmhlaWdodCgpO1xyXG4gICAgdmFyIHBhcmVudFgxID0gcG9zaXRpb24ueCAtIHBhcmVudFdpZHRoLzIgLSBwYWRkaW5nO1xyXG4gICAgdmFyIHBhcmVudFgyID0gcG9zaXRpb24ueCArIHBhcmVudFdpZHRoLzIgKyBwYWRkaW5nO1xyXG4gICAgdmFyIHBhcmVudFkxID0gcG9zaXRpb24ueSAtIHBhcmVudEhlaWdodC8yIC0gcGFkZGluZztcclxuICAgIHZhciBwYXJlbnRZMiA9IHBvc2l0aW9uLnkgKyBwYXJlbnRIZWlnaHQvMiArIHBhZGRpbmc7XHJcblxyXG4gICAgaWYgKG1haW5PYmoudW5pdHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHZhciByZWxhdGl2ZUNvb3JkcyA9IEF1eGlsaWFyeVVuaXQuY29udmVydFRvUmVsYXRpdmVDb29yZCh1bml0LCB1bml0LmJib3gudy8yICsgKHBhcmVudFgxKSArIEF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudEdhcChsb2NhdGlvbiksIChwYXJlbnRZMSkgKyBBdXhVbml0TGF5b3V0LmdldEN1cnJlbnRHYXAobG9jYXRpb24pLCBjeSk7XHJcbiAgICAgIHVuaXQuYmJveC54ID0gcmVsYXRpdmVDb29yZHMueCA7XHJcbiAgICAgIHVuaXQuYmJveC55ID0gcmVsYXRpdmVDb29yZHMueTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YXIgbGFzdFVuaXQgPSBtYWluT2JqLnVuaXRzW21haW5PYmoudW5pdHMubGVuZ3RoIC0gMl07Ly9HZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBsYXN0IHVuaXRcclxuICAgICAgdmFyIGxhc3RVbml0QWJzQ29yZCA9IEF1eGlsaWFyeVVuaXQuY29udmVydFRvQWJzb2x1dGVDb29yZChsYXN0VW5pdCwgbGFzdFVuaXQuYmJveC54LCBsYXN0VW5pdC5iYm94LnksIGN5KTtcclxuICAgICAgdmFyIHJlbGF0aXZlQ29vcmRzID0gQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9SZWxhdGl2ZUNvb3JkKHVuaXQsIHVuaXQuYmJveC53LzIrIGxhc3RVbml0QWJzQ29yZC54ICsgbGFzdFVuaXQuYmJveC53LzIgKyBBdXhVbml0TGF5b3V0LmdldEN1cnJlbnRHYXAobG9jYXRpb24pLCAocGFyZW50WTEpICsgQXV4VW5pdExheW91dC5nZXRDdXJyZW50R2FwKGxvY2F0aW9uKSwgY3kpO1xyXG4gICAgICB1bml0LmJib3gueCA9IHJlbGF0aXZlQ29vcmRzLnggO1xyXG4gICAgICB1bml0LmJib3gueSA9IHJlbGF0aXZlQ29vcmRzLnk7XHJcbiAgICAgLy8gdW5pdC5iYm94LnggPSBtYWluT2JqLnVuaXRzW2xhc3RVbml0XS5iYm94LnggKyAgbWFpbk9iai51bml0c1tsYXN0VW5pdF0uYmJveC53LzIgKyB1bml0LmJib3gudy8yICsgQXV4VW5pdExheW91dC5nZXRDdXJyZW50R2FwKGxvY2F0aW9uKTtcclxuICAgIH1cclxuICAgIHVuaXQuYmJveC55ID0gKGxvY2F0aW9uID09PSBcInRvcFwiKSA/IDAgOiAxMDA7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQucmVtb3ZlQXV4VW5pdCA9IGZ1bmN0aW9uKG1haW5PYmosIGN5LCB1bml0KSB7XHJcbiAgdmFyIGluZGV4ID0gbWFpbk9iai51bml0cy5pbmRleE9mKHVuaXQpO1xyXG4gIG1haW5PYmoudW5pdHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAvL0F1eFVuaXRMYXlvdXQudXBkYXRlTGVuZ3RoQ2FjaGUobWFpbk9iaiwgY3kpO1xyXG4gIC8qQXV4VW5pdExheW91dC51cGRhdGUobWFpbk9iaiwgY3ksIHRydWUpO1xyXG4gIGlmIChBdXhVbml0TGF5b3V0LmdldEFsd2F5c1Nob3dBdXhVbml0cyhtYWluT2JqKSkge1xyXG4gICAgLy8gc2V0IGEgbWluaW11bSBzaXplIGFjY29yZGluZyB0byBib3RoIHNpZGVzIG9uIHRoZSBzYW1lIG9yaWVudGF0aW9uXHJcbiAgICBBdXhVbml0TGF5b3V0LnNldFBhcmVudE1pbkxlbmd0aChtYWluT2JqLCBjeSk7XHJcbiAgfSovXHJcbiAgdmFyIHBhcmVudE5vZGUgPSBBdXhVbml0TGF5b3V0LmdldFBhcmVudE5vZGUobWFpbk9iaiwgY3kpO1xyXG5cclxuICAvL1RPRE8gZmluZCBhIHdheSB0byBlbGltYXRlIHRoaXMgcmVkdW5kYW5jeSB0byB1cGRhdGUgaW5mby1ib3ggcG9zaXRpb25zXHJcbiAgcGFyZW50Tm9kZS5kYXRhKCdib3JkZXItd2lkdGgnLCBwYXJlbnROb2RlLmRhdGEoJ2JvcmRlci13aWR0aCcpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZW9yZGVyIGJveGVzIHVzaW5nIHRoZWlyIGRlZmluZWQgcG9zaXRpb25zLiBGcm9tIGxlZnQgdG8gcmlnaHQgYW5kIHRvcCB0byBib3R0b20uXHJcbiAqIHRoaXMgZW5zdXJlcyB0aGF0IHRoZWlyIG9yZGVyIGluIHRoZSBsYXlvdXQncyBsaXN0IGNvcnJlc3BvbmRzIHRvIHRoZSByZWFsaXR5IG9mIHRoZSBtYXAuXHJcbiAqL1xyXG5BdXhVbml0TGF5b3V0LnJlb3JkZXJGcm9tUG9zaXRpb25zID0gZnVuY3Rpb24obWFpbk9iaiwgY3kpIHtcclxuICBtYWluT2JqLnVuaXRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgaWYobWFpbk9iai5sb2NhdGlvbiA9PSBcInRvcFwiIHx8IG1haW5PYmoubG9jYXRpb24gPT0gXCJib3R0b21cIikge1xyXG4gICAgICBpZiAoYS5iYm94LnggPCBiLmJib3gueCkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYS5iYm94LnggPiBiLmJib3gueCkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYgKGEuYmJveC55IDwgYi5iYm94LnkpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGEuYmJveC55ID4gYi5iYm94LnkpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfSk7XHJcbiAgLypBdXhVbml0TGF5b3V0LnVwZGF0ZUxlbmd0aENhY2hlKG1haW5PYmosIGN5KTtcclxuICBBdXhVbml0TGF5b3V0LnVwZGF0ZShtYWluT2JqLCBjeSwgdHJ1ZSk7Ki9cclxufTtcclxuXHJcbi8qKlxyXG4gKiB1c2UgYSBjYWNoZWQgbGlzdCB0byBkZXRlcm1pbmUgd2hhdCBpcyB0aGUgbGVuZ3RoIG5lZWRlZCB0byBkcmF3IHggYXV4IHVuaXRzLlxyXG4gKiBjYW4gdGhlbiBiZSBjb21wYXJlZCBhZ2FpbnN0IHRoZSBwYXJlbnQgbm9kZSdzIGRpbWVuc2lvbnMsIHRvIGRlY2lkZSBob3cgbWFueVxyXG4gKiBhdXggdW5pdHMgdG8gZHJhdy5cclxuICovXHJcbkF1eFVuaXRMYXlvdXQudXBkYXRlTGVuZ3RoQ2FjaGUgPSBmdW5jdGlvbihtYWluT2JqLCBjeSkge1xyXG4gIG1haW5PYmoucmVuZGVyTGVuZ3RoQ2FjaGUgPSBbMF07XHJcbiAgdmFyIHByZXZpb3VzID0gQXV4VW5pdExheW91dC5nZXRPdXRlck1hcmdpbihtYWluT2JqKTtcclxuICBmb3IodmFyIGk9MDsgaSA8IG1haW5PYmoudW5pdHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjdXJyZW50TGVuZ3RoO1xyXG4gICAgaWYoQXV4VW5pdExheW91dC5pc1RvckIobWFpbk9iaikpIHtcclxuICAgICAgY3VycmVudExlbmd0aCA9IG1haW5PYmoudW5pdHNbaV0uYmJveC53O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN1cnJlbnRMZW5ndGggPSBtYWluT2JqLnVuaXRzW2ldLmJib3guaDtcclxuICAgIH1cclxuICAgIG1haW5PYmoucmVuZGVyTGVuZ3RoQ2FjaGUucHVzaChwcmV2aW91cyArIGN1cnJlbnRMZW5ndGggKyBBdXhVbml0TGF5b3V0LmdldE91dGVyTWFyZ2luKG1haW5PYmopKTtcclxuICAgIHByZXZpb3VzICs9IGN1cnJlbnRMZW5ndGggKyBBdXhVbml0TGF5b3V0LmdldFVuaXRHYXAobWFpbk9iaik7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVzZSB0aGUgY2FjaGVkIHByZWNvbXB1dGVkIGxlbmd0aHMgdG8gZGVjaWRlIGhvdyBtYW55IHVuaXRzIHdlIGFyZSBjYXBhYmxlIG9mIGRyYXdpbmcsXHJcbiAqIGNvbnNpZGVyaW5nIHRoZSBzaXplIG9mIHRoZSBwYXJlbnQgbm9kZS5cclxuICogVGhlIG51bWJlciByZXR1cm5lZCBzYXlzOiB3ZSBhcmUgYWJsZSB0byBkcmF3IHRoZSBOIGZpcnN0IHVuaXRzIG9mIHRoZSBsaXN0cy5cclxuICogVW51c2VkIGZvciBub3cuXHJcbiAqL1xyXG5BdXhVbml0TGF5b3V0LmdldERyYXdhYmxlVW5pdEFtb3VudCA9IGZ1bmN0aW9uKG1haW5PYmopIHtcclxuICBpZihBdXhVbml0TGF5b3V0LmdldEFsd2F5c1Nob3dBdXhVbml0cyhtYWluT2JqKSkge1xyXG4gICAgLy8gYnlwYXNzIGFsbCB0aGlzXHJcbiAgICByZXR1cm4gbWFpbk9iai51bml0cy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvLyBnZXQgdGhlIGxlbmd0aCBvZiB0aGUgc2lkZSBvbiB3aGljaCB3ZSBkcmF3XHJcbiAgdmFyIGF2YWlsYWJsZVNwYWNlO1xyXG4gIGlmIChBdXhVbml0TGF5b3V0LmlzVG9yQihtYWluT2JqKSkge1xyXG4gICAgYXZhaWxhYmxlU3BhY2UgPSBBdXhVbml0TGF5b3V0LmdldFBhcmVudE5vZGUobWFpbk9iaiwgY3kpLm91dGVyV2lkdGgoKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBhdmFpbGFibGVTcGFjZSA9IEF1eFVuaXRMYXlvdXQuZ2V0UGFyZW50Tm9kZShtYWluT2JqLCBjeSkub3V0ZXJIZWlnaHQoKTtcclxuICB9XHJcbiAgLy8gbG9vcCBvdmVyIHRoZSBjYWNoZWQgcHJlY29tcHV0ZWQgbGVuZ3Roc1xyXG4gIGZvcih2YXIgaT0wOyBpIDwgbWFpbk9iai5yZW5kZXJMZW5ndGhDYWNoZS5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYobWFpbk9iai5yZW5kZXJMZW5ndGhDYWNoZVtpXSA+IGF2YWlsYWJsZVNwYWNlKSB7XHJcbiAgICAgIC8vIHN0b3AgaWYgd2Ugb3ZlcmZsb3dcclxuICAgICAgcmV0dXJuIGkgLSAxO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbWFpbk9iai51bml0cy5sZW5ndGg7XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LnNldERpc3BsYXllZFVuaXRzID0gZnVuY3Rpb24gKG1haW5PYmosIGN5KSB7XHJcbiAgLy8gZ2V0IHRoZSBsZW5ndGggb2YgdGhlIHNpZGUgb24gd2hpY2ggd2UgZHJhd1xyXG5cclxuICB2YXIgYXZhaWxhYmxlU3BhY2U7XHJcbiAgaWYgKEF1eFVuaXRMYXlvdXQuaXNUb3JCKG1haW5PYmopKSB7XHJcbiAgICBhdmFpbGFibGVTcGFjZSA9IEF1eFVuaXRMYXlvdXQuZ2V0UGFyZW50Tm9kZShtYWluT2JqLCBjeSkub3V0ZXJXaWR0aCgpO1xyXG4gICAgLy8gZHVlIHRvIGNvcm5lciBvZiBiYXJyZWwgc2hhcGVkIGNvbXBhcnRtZW50IGRlY3JlYXNlIGF2YWlsYWJsZVNwYWNlIC0tIG5vIGluZm9ib3ggb24gY29ybmVyc1xyXG4gICAgaWYgKEF1eFVuaXRMYXlvdXQuZ2V0UGFyZW50Tm9kZShtYWluT2JqLCBjeSkuZGF0YShcImNsYXNzXCIpID09IFwiY29tcGFydG1lbnRcIilcclxuICAgICAgICBhdmFpbGFibGVTcGFjZSAqPSAwLjg7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgYXZhaWxhYmxlU3BhY2UgPSBBdXhVbml0TGF5b3V0LmdldFBhcmVudE5vZGUobWFpbk9iaiwgY3kpLm91dGVySGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICAvLyB0aGVyZSBpcyBhbHdheXMgbisxIGVsZW1lbnRzIGluIHRoZSBjYWNoZWRMZW5ndGggZm9yIG4gdW5pdHNcclxuICB2YXIgYWx3YXlzU2hvd0F1eFVuaXRzID0gQXV4VW5pdExheW91dC5nZXRBbHdheXNTaG93QXV4VW5pdHMobWFpbk9iaik7XHJcbiAgdmFyIG1heFVuaXREaXNwbGF5ZWQgPSBBdXhVbml0TGF5b3V0LmdldE1heFVuaXREaXNwbGF5ZWQobWFpbk9iaik7XHJcbiAgZm9yKHZhciBpPTA7IGkgPCBtYWluT2JqLnVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZigobWFpbk9iai5yZW5kZXJMZW5ndGhDYWNoZVtpKzFdIDw9IGF2YWlsYWJsZVNwYWNlIC8vIGRvIHdlIGhhdmUgZW5vdWdoIHNwYWNlP1xyXG4gICAgICAmJiAobWF4VW5pdERpc3BsYXllZCA9PSAtMSB8fCBpIDwgbWF4VW5pdERpc3BsYXllZCkpIC8vIGlzIHRoZXJlIG5vIGxpbWl0PyBvciBhcmUgd2UgdW5kZXIgdGhhdCBsaW1pdD9cclxuICAgICAgfHwgYWx3YXlzU2hvd0F1eFVuaXRzKSB7IC8vIGRvIHdlIGFsd2F5cyB3YW50IHRvIHNob3cgZXZlcnl0aGluZyByZWdhcmRsZXNzP1xyXG4gICAgICBtYWluT2JqLnVuaXRzW2ldLmlzRGlzcGxheWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBtYWluT2JqLnVuaXRzW2ldLmlzRGlzcGxheWVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbkF1eFVuaXRMYXlvdXQuZ2V0VXNlZFdpZHRoID0gZnVuY3Rpb24obm9kZSwgdGIpe1xyXG4gIHZhciB1bml0cyA9IHRiLnVuaXRzO1xyXG4gIHZhciB0b3RhbFdpZHRoID0gMDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB0b3RhbFdpZHRoICs9IHVuaXRzW2ldLmJib3gudztcclxuICB9XHJcbiAgcmV0dXJuIHRvdGFsV2lkdGg7XHJcbn1cclxuXHJcbkF1eFVuaXRMYXlvdXQuZ2V0VXNlZEhlaWdodCA9IGZ1bmN0aW9uKG5vZGUsIHRiKXtcclxuICB2YXIgdW5pdHMgPSB0Yi51bml0cztcclxuICB2YXIgdG90YWxIZWlnaHQgPSAwO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pdHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHRvdGFsSGVpZ2h0ICs9IHVuaXRzW2ldLmJib3guaDtcclxuICB9XHJcbiAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xyXG59XHJcblxyXG5BdXhVbml0TGF5b3V0LmdldFVzZWRMZW5ndGhUQiA9IGZ1bmN0aW9uKG5vZGUsIHRiKXtcclxuICB2YXIgdW5pdHMgPSB0Yi51bml0cztcclxuICByZXR1cm4gQXV4VW5pdExheW91dC5nZXRVc2VkV2lkdGgobm9kZSwgdGIpICsgKHVuaXRzLmxlbmd0aCArICAxKSAqIEF1eFVuaXRMYXlvdXQudW5pdEdhcDsgLy9PbmUgZ2FwIGZvciBsZWZ0bW9zdCBvdXRlciBtYXJnaW5cclxufVxyXG5cclxuQXV4VW5pdExheW91dC5nZXRVc2VkTGVuZ3RoTFIgPSBmdW5jdGlvbihub2RlLCB0Yil7XHJcbiAgdmFyIHVuaXRzID0gdGIudW5pdHM7XHJcbiAgcmV0dXJuIEF1eFVuaXRMYXlvdXQuZ2V0VXNlZEhlaWdodChub2RlLCB0YikgKyAodW5pdHMubGVuZ3RoICsgIDEpICogQXV4VW5pdExheW91dC51bml0R2FwOyAvL09uZSBnYXAgZm9yIGxlZnRtb3N0IG91dGVyIG1hcmdpblxyXG59XHJcblxyXG5BdXhVbml0TGF5b3V0LnNldEN1cnJlbnRHYXAgPSBmdW5jdGlvbiAobG9jYXRpb24sIHZhbHVlKXtcclxuICBpZiAobG9jYXRpb24gPT09IFwidG9wXCIpIHtcclxuICAgIEF1eFVuaXRMYXlvdXQuY3VycmVudFRvcFVuaXRHYXAgPSB2YWx1ZTtcclxuICB9XHJcbiAgZWxzZSBpZiAobG9jYXRpb24gPT09IFwiYm90dG9tXCIpIHtcclxuICAgIEF1eFVuaXRMYXlvdXQuY3VycmVudEJvdHRvbVVuaXRHYXAgPSB2YWx1ZTtcclxuICB9XHJcbiAgZWxzZSBpZiAobG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgQXV4VW5pdExheW91dC5jdXJyZW50UmlnaHRVbml0R2FwID0gdmFsdWU7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgQXV4VW5pdExheW91dC5jdXJyZW50TGVmdFVuaXRHYXAgPSB2YWx1ZTtcclxuICB9XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LmdldEN1cnJlbnRHYXAgPSBmdW5jdGlvbiAobG9jYXRpb24pe1xyXG4gIGlmIChsb2NhdGlvbiA9PT0gXCJ0b3BcIikge1xyXG4gICAgcmV0dXJuIEF1eFVuaXRMYXlvdXQuY3VycmVudFRvcFVuaXRHYXA7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKGxvY2F0aW9uID09PSBcImJvdHRvbVwiKSB7XHJcbiAgICByZXR1cm4gQXV4VW5pdExheW91dC5jdXJyZW50Qm90dG9tVW5pdEdhcDtcclxuICB9XHJcbiAgZWxzZSBpZiAobG9jYXRpb24gPT09IFwicmlnaHRcIikge1xyXG4gICAgcmV0dXJuIEF1eFVuaXRMYXlvdXQuY3VycmVudFJpZ2h0VW5pdEdhcDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICByZXR1cm4gQXV4VW5pdExheW91dC5jdXJyZW50TGVmdFVuaXRHYXA7XHJcbiAgfVxyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5jaGVja0ZpdCA9IGZ1bmN0aW9uIChub2RlLCBjeSwgZm9yY2VDaGVjayl7XHJcbiAgdmFyIGZpdExvY2F0aW9ucyA9IFtdO1xyXG4gIGZvcih2YXIgbG9jYXRpb24gaW4gbm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpKSB7XHJcbiAgICBpZiAoZm9yY2VDaGVjayAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uICE9PSBmb3JjZUNoZWNrKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKEF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudEdhcChsb2NhdGlvbikgPCBBdXhVbml0TGF5b3V0LnVuaXRHYXApIHtcclxuICAgICAgZml0TG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIHZhciB1bml0ID0gbm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpW2xvY2F0aW9uXTtcclxuICAgIHZhciB1bml0cyA9IHVuaXQudW5pdHM7XHJcbiAgICBpZiAodW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpcnN0VW5pdCA9IHVuaXRzWzBdO1xyXG4gICAgdmFyIGxhc3RVbml0ID0gdW5pdHNbdW5pdHMubGVuZ3RoLTFdO1xyXG4gICAgdmFyIGNvb3Jkc0ZpcnN0ID0gQXV4aWxpYXJ5VW5pdC5jb252ZXJ0VG9BYnNvbHV0ZUNvb3JkKGZpcnN0VW5pdCwgZmlyc3RVbml0LmJib3gueCwgZmlyc3RVbml0LmJib3gueSwgY3kpO1xyXG4gICAgdmFyIGNvb3Jkc0xhc3QgPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb0Fic29sdXRlQ29vcmQobGFzdFVuaXQsIGxhc3RVbml0LmJib3gueCwgbGFzdFVuaXQuYmJveC55LCBjeSk7XHJcbiAgICB2YXIgZ2FwID0gQXV4VW5pdExheW91dC5nZXRDdXJyZW50R2FwKGxvY2F0aW9uKTtcclxuICAgIHZhciBwYWRkaW5nID0gbm9kZS5wYWRkaW5nKCk7XHJcbiAgICBpZiAodW5pdHMubGVuZ3RoID4gMCkgeyAvL0ZvciBhbnkgY2FzZSBvZiByZW1vdmFsXHJcbiAgICAgIGlmIChsb2NhdGlvbiA9PT0gXCJ0b3BcIiB8fCBsb2NhdGlvbiA9PT0gXCJib3R0b21cIikge1xyXG4gICAgICAgIHZhciBwYXJlbnRYMSA9IG5vZGUucG9zaXRpb24oKS54IC0gbm9kZS53aWR0aCgpLzIgLSBwYWRkaW5nO1xyXG4gICAgICAgIHZhciBwYXJlbnRYMiA9IG5vZGUucG9zaXRpb24oKS54ICsgbm9kZS53aWR0aCgpLzIgKyBwYWRkaW5nO1xyXG4gICAgICAgIHZhciBmaXJzdFgxID0gY29vcmRzRmlyc3QueCAtIGZpcnN0VW5pdC5iYm94LncvMjtcclxuICAgICAgICB2YXIgbGFzdFgyID0gY29vcmRzTGFzdC54ICsgbGFzdFVuaXQuYmJveC53LzI7XHJcblxyXG4gICAgICAgIGlmKHBhcmVudFgyIDwgbGFzdFgyICsgZ2FwKXtcclxuICAgICAgICAgIGZpdExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBpZiAocGFyZW50WDEgKyBnYXAgPiBmaXJzdFgxIHx8IHBhcmVudFgyIC0gZ2FwIDwgbGFzdFgyKSB7XHJcbiAgICAgICAgICAgIGZpdExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcclxuICAgICAgICB9ICovXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHBhcmVudFkxID0gbm9kZS5wb3NpdGlvbigpLnkgLSBub2RlLmhlaWdodCgpLzIgLSBwYWRkaW5nO1xyXG4gICAgICAgIHZhciBwYXJlbnRZMiA9IG5vZGUucG9zaXRpb24oKS55ICsgbm9kZS5oZWlnaHQoKS8yICsgcGFkZGluZztcclxuICAgICAgICB2YXIgZmlyc3RZMSA9IGNvb3Jkc0ZpcnN0LnkgLSBmaXJzdFVuaXQuYmJveC5oLzI7XHJcbiAgICAgICAgdmFyIGxhc3RZMiA9IGNvb3Jkc0xhc3QueSArIGxhc3RVbml0LmJib3guaC8yO1xyXG4gICAgICAgIGlmKHBhcmVudFkyIDwgbGFzdFkyICsgZ2FwKXtcclxuICAgICAgICAgIGZpdExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBpZiAocGFyZW50WTEgKyBnYXAgPiBmaXJzdFkxIHx8IHBhcmVudFkyIC0gZ2FwIDwgbGFzdFkyKSB7XHJcbiAgICAgICAgICAgIGZpdExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcclxuICAgICAgICB9ICovXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZpdExvY2F0aW9ucztcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuc2V0SWRlYWxHYXAgPSBmdW5jdGlvbihub2RlLCBsb2NhdGlvbil7XHJcblxyXG4gIHZhciBwYXJlbnRXaWR0aCA9IG5vZGUud2lkdGgoKTtcclxuICB2YXIgcGFyZW50SGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcclxuICB2YXIgcGFkZGluZyA9IG5vZGUucGFkZGluZygpO1xyXG4gIHZhciBwb3NpdGlvbiA9IG5vZGUucG9zaXRpb24oKTtcclxuICB2YXIgcGFyZW50WDEgPSBwb3NpdGlvbi54IC0gcGFyZW50V2lkdGgvMiAtIHBhZGRpbmc7XHJcbiAgdmFyIHBhcmVudFkxID0gcG9zaXRpb24ueSAtIHBhcmVudEhlaWdodC8yIC0gcGFkZGluZztcclxuICB2YXIgZXN0aW1hdGVkR2FwO1xyXG4gICBcclxuICAgIHZhciBhdXhVbml0ID0gbm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpW2xvY2F0aW9uXTtcclxuICAgIGlmIChhdXhVbml0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAoYXV4VW5pdC51bml0cy5sZW5ndGggPD0gMCB8fCAhYXV4VW5pdC51bml0cykge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIHZhciB1bml0cyA9IGF1eFVuaXQudW5pdHM7XHJcbiAgICBcclxuICAgIGlmICggbG9jYXRpb24gPT09IFwidG9wXCIgfHwgbG9jYXRpb24gPT09IFwiYm90dG9tXCIpIHtcclxuICAgICAgdXNlZExlbmd0aCA9IEF1eFVuaXRMYXlvdXQuZ2V0VXNlZExlbmd0aFRCKG5vZGUsIGF1eFVuaXQpO1xyXG4gICAgICB2YXIgdG90YWxXaWR0aCA9IEF1eFVuaXRMYXlvdXQuZ2V0VXNlZFdpZHRoKG5vZGUsIGF1eFVuaXQpO1xyXG4gICAgICBlc3RpbWF0ZWRHYXAgPSAocGFyZW50V2lkdGggKyAyKiBwYWRkaW5nIC0gdG90YWxXaWR0aCkgLyAodW5pdHMubGVuZ3RoICsgMSk7XHJcbiAgICAgIGlmIChlc3RpbWF0ZWRHYXAgPiBBdXhVbml0TGF5b3V0LnVuaXRHYXApIHtcclxuICAgICAgICBlc3RpbWF0ZWRHYXAgPSBBdXhVbml0TGF5b3V0LnVuaXRHYXA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vdmFyIGZpcnN0UG9zaXRpb24gPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb1JlbGF0aXZlQ29vcmQodW5pdHNbMF0sIHVuaXRbMF0uYmJveC53LzIgKyAocGFyZW50WDEpICsgZXN0aW1hdGVkR2FwLCAocGFyZW50WTEpICsgZXN0aW1hdGVkR2FwLCB1bmRlZmluZWQsIG5vZGUpOy8vUG9zaXRpb24gb2YgdGhlIGZpcnN0IHVuaXRcclxuICAgICAgXHJcbiAgICAgIHZhciB1c2VkTGVuZ3RoID0gZXN0aW1hdGVkR2FwO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlQ29yZCA9IEF1eGlsaWFyeVVuaXQuY29udmVydFRvUmVsYXRpdmVDb29yZCh1bml0c1tpXSwgcGFyZW50WDEgK3VzZWRMZW5ndGggKyB1bml0c1tpXS5iYm94LncvMiwgKHBhcmVudFkxKSAsIHVuZGVmaW5lZCwgbm9kZSk7XHJcbiAgICAgICAgdW5pdHNbaV0uYmJveC54ID0gcmVsYXRpdmVDb3JkLng7XHJcbiAgICAgICAgdW5pdHNbaV0uYmJveC55ID0gcmVsYXRpdmVDb3JkLnk7XHJcbiAgICAgICAgdXNlZExlbmd0aCArPSB1bml0c1tpXS5iYm94LncrIGVzdGltYXRlZEdhcDsgICAgICAgXHJcbiAgICAgICBcclxuICAgICAgfVxyXG4gICAgICBBdXhVbml0TGF5b3V0LnNldEN1cnJlbnRHYXAobG9jYXRpb24sIGVzdGltYXRlZEdhcCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy9GaW5kIHRvdGFsIGxlZnQgbGVuZ3RoXHJcbiAgICAgIHVzZWRMZW5ndGggPSBBdXhVbml0TGF5b3V0LmdldFVzZWRMZW5ndGhMUihub2RlLCBhdXhVbml0KTtcclxuICAgICAgLy9Db21wYXJlIHRoZSBzaWRlIGxlbmd0aHNcclxuICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gQXV4VW5pdExheW91dC5nZXRVc2VkSGVpZ2h0KG5vZGUsIGF1eFVuaXQpO1xyXG4gICAgICBlc3RpbWF0ZWRHYXAgPSAocGFyZW50SGVpZ2h0ICsgMiogcGFkZGluZyAtIHRvdGFsSGVpZ2h0KSAvICh1bml0cy5sZW5ndGggKyAxKTtcclxuICAgICAgaWYgKGVzdGltYXRlZEdhcCA+IEF1eFVuaXRMYXlvdXQudW5pdEdhcCkge1xyXG4gICAgICAgIGVzdGltYXRlZEdhcCA9IEF1eFVuaXRMYXlvdXQudW5pdEdhcDtcclxuICAgICAgfVxyXG4gICAgICAvL0Vsc2Ugc2NhbGUgYnkgdXNpbmcgYXZhaWxhYmxlIHNwYWNlLCByZWR1Y2luZyBtYXJnaW5zIGFuZCBnYXBzLlxyXG4gICAgICAvL0NoZWNrIGlmIG5ldyBnYXAgaXMgZW5vdWdoIHRvIGZpdFxyXG4gICAgICB2YXIgdXNlZExlbmd0aCA9IGVzdGltYXRlZEdhcDtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZUNvcmQgPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb1JlbGF0aXZlQ29vcmQodW5pdHNbaV0sIHBhcmVudFgxICwgKHBhcmVudFkxKSArIHVzZWRMZW5ndGggKyB1bml0c1tpXS5iYm94LmgvMiwgdW5kZWZpbmVkLCBub2RlKTtcclxuICAgICAgICB1bml0c1tpXS5iYm94LnggPSByZWxhdGl2ZUNvcmQueDtcclxuICAgICAgICB1bml0c1tpXS5iYm94LnkgPSByZWxhdGl2ZUNvcmQueTtcclxuICAgICAgICB1c2VkTGVuZ3RoICs9IHVuaXRzW2ldLmJib3guaCsgZXN0aW1hdGVkR2FwO1xyXG4gICAgICB9XHJcbiAgICAgIC8vQXV4VW5pdExheW91dC5jdXJyZW50TGVmdFVuaXRHYXAgPSBlc3RpbWF0ZWRHYXA7XHJcbiAgICB9XHJcbiAgICBBdXhVbml0TGF5b3V0LnNldEN1cnJlbnRHYXAobG9jYXRpb24sIGVzdGltYXRlZEdhcCk7XHJcbiAgXHJcbn1cclxuQXV4VW5pdExheW91dC5maXRVbml0cyA9IGZ1bmN0aW9uIChub2RlLCBjeSwgbG9jYXRpb25zKSB7XHJcblxyXG4gIHZhciBwYXJlbnRXaWR0aCA9IG5vZGUud2lkdGgoKTtcclxuICB2YXIgcGFyZW50SGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcclxuICB2YXIgcGFkZGluZyA9IG5vZGUucGFkZGluZygpO1xyXG4gIHZhciBwb3NpdGlvbiA9IG5vZGUucG9zaXRpb24oKTtcclxuICB2YXIgcGFyZW50WDEgPSBwb3NpdGlvbi54IC0gcGFyZW50V2lkdGgvMiAtIHBhZGRpbmc7XHJcbiAgdmFyIHBhcmVudFgyID0gcG9zaXRpb24ueCArIHBhcmVudFdpZHRoLzIgKyBwYWRkaW5nO1xyXG4gIHZhciBwYXJlbnRZMSA9IHBvc2l0aW9uLnkgLSBwYXJlbnRIZWlnaHQvMiAtIHBhZGRpbmc7XHJcbiAgdmFyIHBhcmVudFkyID0gcG9zaXRpb24ueSArIHBhcmVudEhlaWdodC8yICsgcGFkZGluZztcclxuXHJcbiAgLy9HZXQgUGFyZW50IG5vZGUgYW5kIGZpbmQgcGFyZW50IHdpZHRoXHJcbiAgXHJcbiAgdmFyIGVzdGltYXRlZEdhcDtcclxuXHJcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxvY2F0aW9ucy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgIHZhciBsb2NhdGlvbiA9IGxvY2F0aW9uc1tpbmRleF07XHJcbiAgICB2YXIgYXV4VW5pdCA9IG5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtsb2NhdGlvbl07XHJcbiAgICBpZiAoYXV4VW5pdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGF1eFVuaXQudW5pdHMubGVuZ3RoIDw9IDAgfHwgIWF1eFVuaXQudW5pdHMpIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICB2YXIgdW5pdHMgPSBhdXhVbml0LnVuaXRzO1xyXG4gICAgXHJcbiAgICBpZiAoIGxvY2F0aW9uID09PSBcInRvcFwiIHx8IGxvY2F0aW9uID09PSBcImJvdHRvbVwiKSB7XHJcbiAgICAgIHVzZWRMZW5ndGggPSBBdXhVbml0TGF5b3V0LmdldFVzZWRMZW5ndGhUQihub2RlLCBhdXhVbml0KTtcclxuICAgICAgdmFyIHRvdGFsV2lkdGggPSBBdXhVbml0TGF5b3V0LmdldFVzZWRXaWR0aChub2RlLCBhdXhVbml0KTtcclxuICAgICAgZXN0aW1hdGVkR2FwID0gKHBhcmVudFdpZHRoICsgMipwYWRkaW5nIC0gdG90YWxXaWR0aCkgLyAodW5pdHMubGVuZ3RoICsgMSk7XHJcbiAgICAgIGlmIChlc3RpbWF0ZWRHYXAgPiBBdXhVbml0TGF5b3V0LnVuaXRHYXApIHtcclxuICAgICAgICBlc3RpbWF0ZWRHYXAgPSBBdXhVbml0TGF5b3V0LnVuaXRHYXA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vdmFyIGZpcnN0UG9zaXRpb24gPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb1JlbGF0aXZlQ29vcmQodW5pdHNbMF0sIHVuaXRbMF0uYmJveC53LzIgKyAocGFyZW50WDEpICsgZXN0aW1hdGVkR2FwLCAocGFyZW50WTEpICsgZXN0aW1hdGVkR2FwLCB1bmRlZmluZWQsIG5vZGUpOy8vUG9zaXRpb24gb2YgdGhlIGZpcnN0IHVuaXRcclxuICAgICAgXHJcbiAgICAgIHZhciB1c2VkTGVuZ3RoID0gZXN0aW1hdGVkR2FwO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlQ29yZCA9IEF1eGlsaWFyeVVuaXQuY29udmVydFRvUmVsYXRpdmVDb29yZCh1bml0c1tpXSwgcGFyZW50WDEgK3VzZWRMZW5ndGggKyB1bml0c1tpXS5iYm94LncvMiwgKHBhcmVudFkxKSAsIHVuZGVmaW5lZCwgbm9kZSk7XHJcbiAgICAgICAgdW5pdHNbaV0uYmJveC54ID0gcmVsYXRpdmVDb3JkLng7XHJcbiAgICAgICAgdW5pdHNbaV0uYmJveC55ID0gcmVsYXRpdmVDb3JkLnk7XHJcbiAgICAgICAgdXNlZExlbmd0aCArPSB1bml0c1tpXS5iYm94LncrIGVzdGltYXRlZEdhcDsgICAgICAgXHJcbiAgICAgICBcclxuICAgICAgfVxyXG4gICAgICBBdXhVbml0TGF5b3V0LnNldEN1cnJlbnRHYXAobG9jYXRpb24sIGVzdGltYXRlZEdhcCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy9GaW5kIHRvdGFsIGxlZnQgbGVuZ3RoXHJcbiAgICAgIHVzZWRMZW5ndGggPSBBdXhVbml0TGF5b3V0LmdldFVzZWRMZW5ndGhMUihub2RlLCBhdXhVbml0KTtcclxuICAgICAgLy9Db21wYXJlIHRoZSBzaWRlIGxlbmd0aHNcclxuICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gQXV4VW5pdExheW91dC5nZXRVc2VkSGVpZ2h0KG5vZGUsIGF1eFVuaXQpO1xyXG4gICAgICBlc3RpbWF0ZWRHYXAgPSAocGFyZW50SGVpZ2h0ICsgMipwYWRkaW5nICAtIHRvdGFsSGVpZ2h0KSAvICh1bml0cy5sZW5ndGggKyAxKTtcclxuICAgICAgaWYgKGVzdGltYXRlZEdhcCA+IEF1eFVuaXRMYXlvdXQudW5pdEdhcCkge1xyXG4gICAgICAgIGVzdGltYXRlZEdhcCA9IEF1eFVuaXRMYXlvdXQudW5pdEdhcDtcclxuICAgICAgfVxyXG4gICAgICAvL0Vsc2Ugc2NhbGUgYnkgdXNpbmcgYXZhaWxhYmxlIHNwYWNlLCByZWR1Y2luZyBtYXJnaW5zIGFuZCBnYXBzLlxyXG4gICAgICAvL0NoZWNrIGlmIG5ldyBnYXAgaXMgZW5vdWdoIHRvIGZpdFxyXG4gICAgICB2YXIgdXNlZExlbmd0aCA9IGVzdGltYXRlZEdhcDtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZUNvcmQgPSBBdXhpbGlhcnlVbml0LmNvbnZlcnRUb1JlbGF0aXZlQ29vcmQodW5pdHNbaV0sIHBhcmVudFgxICwgKHBhcmVudFkxKSArIHVzZWRMZW5ndGggKyB1bml0c1tpXS5iYm94LmgvMiwgdW5kZWZpbmVkLCBub2RlKTtcclxuICAgICAgICB1bml0c1tpXS5iYm94LnggPSByZWxhdGl2ZUNvcmQueDtcclxuICAgICAgICB1bml0c1tpXS5iYm94LnkgPSByZWxhdGl2ZUNvcmQueTtcclxuICAgICAgICB1c2VkTGVuZ3RoICs9IHVuaXRzW2ldLmJib3guaCsgZXN0aW1hdGVkR2FwO1xyXG4gICAgICB9XHJcbiAgICAgIC8vQXV4VW5pdExheW91dC5jdXJyZW50TGVmdFVuaXRHYXAgPSBlc3RpbWF0ZWRHYXA7XHJcbiAgICB9XHJcbiAgICBBdXhVbml0TGF5b3V0LnNldEN1cnJlbnRHYXAobG9jYXRpb24sIGVzdGltYXRlZEdhcCk7XHJcbiAgfVxyXG5cclxuICAvL1RPRE8gZmluZCBhIHdheSB0byBlbGltYXRlIHRoaXMgcmVkdW5kYW5jeSB0byB1cGRhdGUgaW5mby1ib3ggcG9zaXRpb25zXHJcbiAgbm9kZS5kYXRhKCdib3JkZXItd2lkdGgnLCBub2RlLmRhdGEoJ2JvcmRlci13aWR0aCcpKTtcclxuXHJcbn07XHJcblxyXG5cclxuLy8gQ2FsY3VsYXRlIHRvdGFsIGxlbmd0aCB1c2VkIGluIGEgc2lkZVxyXG4vLyBUT0RPIGZpbmQgYSB3YXkgdG8gcmVmYWN0b3IsIHJlbW92ZSB1Z2xpbmVzcyBvZiB0b3AtYm90dG9tL2xlZnQtcmlnaHQuXHJcbkF1eFVuaXRMYXlvdXQucHJlY29tcHV0ZUNvb3JkcyA9IGZ1bmN0aW9uIChtYWluT2JqLCBjeSwgZG9Gb3JjZVVwZGF0ZSkge1xyXG4gIEF1eFVuaXRMYXlvdXQuc2V0RGlzcGxheWVkVW5pdHMobWFpbk9iaiwgY3kpO1xyXG4gIHZhciBsZW5ndGhVc2VkID0gQXV4VW5pdExheW91dC5nZXRPdXRlck1hcmdpbihtYWluT2JqKTtcclxuICB2YXIgZmluYWxMZW5ndGhVc2VkID0gbGVuZ3RoVXNlZDtcclxuICB2YXIgdW5pdEdhcCA9IEF1eFVuaXRMYXlvdXQuZ2V0VW5pdEdhcChtYWluT2JqKTtcclxuICB2YXIgcGFyZW50Tm9kZSA9IEF1eFVuaXRMYXlvdXQuZ2V0UGFyZW50Tm9kZShtYWluT2JqLCBjeSk7XHJcblxyXG4gIGZvcih2YXIgaT0wOyBpIDwgbWFpbk9iai51bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgLy8gY2hhbmdlIHRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgYXV4aWxpYXJ5IHVuaXQgYWNjb3JkaW5nIHRvIHRoZSBjaG9zZW4gbGF5b3V0XHJcbiAgICB2YXIgYXV4VW5pdCA9IG1haW5PYmoudW5pdHNbaV07XHJcbiAgICBpZiAoYXV4VW5pdC5jb29yZFR5cGUgIT0gXCJyZWxhdGl2ZVRvU2lkZVwiIHx8IGRvRm9yY2VVcGRhdGUpIHtcclxuICAgICAgaWYgKGF1eFVuaXQuY29vcmRUeXBlID09IFwicmVsYXRpdmVUb0NlbnRlclwiIHx8IGRvRm9yY2VVcGRhdGUpIHtcclxuICAgICAgICBpZihBdXhVbml0TGF5b3V0LmlzVG9yQihtYWluT2JqKSkge1xyXG4gICAgICAgICAgLy9hdXhVbml0LmJib3gueSA9IDA7XHJcbiAgICAgICAgICBhdXhVbml0LmJib3gueCA9IGxlbmd0aFVzZWQgKyBhdXhVbml0LmJib3gudyAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgLy9hdXhVbml0LmJib3gueCA9IDA7XHJcbiAgICAgICAgICBhdXhVbml0LmJib3gueSA9IGxlbmd0aFVzZWQgKyBhdXhVbml0LmJib3guaCAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGF1eFVuaXQuY29vcmRUeXBlID0gXCJyZWxhdGl2ZVRvU2lkZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKEF1eFVuaXRMYXlvdXQuaXNUb3JCKG1haW5PYmopKSB7XHJcbiAgICAgIC8vYXV4VW5pdC5iYm94LnkgPSAwO1xyXG4gICAgICBsZW5ndGhVc2VkICs9IGF1eFVuaXQuYmJveC53ICsgdW5pdEdhcDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAvL2F1eFVuaXQuYmJveC54ID0gMDtcclxuICAgICAgbGVuZ3RoVXNlZCArPSBhdXhVbml0LmJib3guaCArIHVuaXRHYXA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoYXV4VW5pdC5pc0Rpc3BsYXllZCkge1xyXG4gICAgICBmaW5hbExlbmd0aFVzZWQgPSBsZW5ndGhVc2VkO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBhZGp1c3QgdGhlIGxlbmd0aCwgc2hvdWxkIGJlIGNvbXBvc2VkIG9mIG91dGVyTWFyZ2luIG9uIHRoZSBlbmQsIG5vdCB1bml0R2FwXHJcbiAgZmluYWxMZW5ndGhVc2VkID0gZmluYWxMZW5ndGhVc2VkIC0gdW5pdEdhcCArIEF1eFVuaXRMYXlvdXQuZ2V0T3V0ZXJNYXJnaW4obWFpbk9iaik7XHJcblxyXG4gIG1haW5PYmoubGVuZ3RoVXNlZCA9IGZpbmFsTGVuZ3RoVXNlZDtcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuZHJhdyA9IGZ1bmN0aW9uIChtYWluT2JqLCBjeSwgY29udGV4dCkge1xyXG4gIGZvcih2YXIgaT0wOyBpIDwgbWFpbk9iai51bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGF1eFVuaXQgPSBtYWluT2JqLnVuaXRzW2ldO1xyXG4gICAgICBnZXRBdXhVbml0Q2xhc3MoYXV4VW5pdCkuZHJhdyhhdXhVbml0LCBjeSwgY29udGV4dCk7XHJcbiAgfVxyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5tb2RpZnlVbml0cyA9IGZ1bmN0aW9uKHBhcmVudE5vZGUsIHVuaXQsIG9sZExvY2F0aW9uLCBjeSl7XHJcbiAgdmFyIGxvY2F0aW9uID0gdW5pdC5hbmNob3JTaWRlO1xyXG4gIHZhciBwb3NYID0gdW5pdC5iYm94Lng7XHJcbiAgdmFyIHBvc1kgPSB1bml0LmJib3gueTtcclxuICBpZiAoIXBhcmVudE5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtvbGRMb2NhdGlvbl0pIHtcclxuICAgIHBhcmVudE5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtvbGRMb2NhdGlvbl0gPSBBdXhVbml0TGF5b3V0LmNvbnN0cnVjdChwYXJlbnROb2RlLCBvbGRMb2NhdGlvbik7XHJcbiAgfVxyXG4gIHZhciBvbGRBdXhVbml0ID0gcGFyZW50Tm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpW29sZExvY2F0aW9uXTtcclxuICB2YXIgZGVsZXRlVW5pdHMgPSBvbGRBdXhVbml0LnVuaXRzO1xyXG5cclxuICAvL0RlbGV0ZSBmcm9tIG9sZCBsb2NhdGlvblxyXG4gIHZhciBkZWxldGVJbmRleDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0ZVVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZihkZWxldGVVbml0c1tpXSA9PT0gdW5pdCkge1xyXG4gICAgICBkZWxldGVJbmRleCA9IGk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICBkZWxldGVVbml0cy5zcGxpY2UoZGVsZXRlSW5kZXgsIDEpO1xyXG4gIC8vSWYgbmV3IGlzIG5vdCBjb25zdHJ1Y3RlZCBjb250cnVjdCBpbnRlcnZhbFxyXG4gIGlmICghcGFyZW50Tm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpW2xvY2F0aW9uXSkge1xyXG4gICAgcGFyZW50Tm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpW2xvY2F0aW9uXSA9IEF1eFVuaXRMYXlvdXQuY29uc3RydWN0KHBhcmVudE5vZGUsIGxvY2F0aW9uKTtcclxuICB9XHJcbiAgdmFyIGluc2VydEF1eFVuaXQgPSBpbnNlcnRVbml0cyA9IHBhcmVudE5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKVtsb2NhdGlvbl07XHJcbiAgdmFyIGluc2VydFVuaXRzID0gaW5zZXJ0QXV4VW5pdC51bml0cztcclxuXHJcbiAgdmFyIGluZGV4ID0gMDtcclxuICAvL0luc2VydCBpbnRvIG5ldyB1bml0IGFycmF5XHJcbiAgaWYgKGxvY2F0aW9uID09PSBcInRvcFwiIHx8IGxvY2F0aW9uID09PSBcImJvdHRvbVwiKSB7XHJcbiAgICB3aGlsZSAoIGluc2VydFVuaXRzW2luZGV4XSAhPT0gdW5kZWZpbmVkICYmIHBvc1ggPiBpbnNlcnRVbml0c1tpbmRleF0uYmJveC54KSB7XHJcbiAgICAgIGluZGV4Kys7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgd2hpbGUgKCBpbnNlcnRVbml0c1tpbmRleF0gIT09IHVuZGVmaW5lZCAmJiBwb3NZID4gaW5zZXJ0VW5pdHNbaW5kZXhdLmJib3gueSkge1xyXG4gICAgICBpbmRleCsrO1xyXG4gICAgfVxyXG4gIH1cclxuICBpbnNlcnRVbml0cy5zcGxpY2UoaW5kZXgsIDAsIHVuaXQpO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5pc0VtcHR5ID0gZnVuY3Rpb24obWFpbk9iaikge1xyXG4gIHJldHVybiBtYWluT2JqLnVuaXRzLmxlbmd0aCA9PSAwO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC51bml0Q291bnQgPSBmdW5jdGlvbihtYWluT2JqKSB7XHJcbiAgcmV0dXJuIG1haW5PYmoudW5pdHMubGVuZ3RoO1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC51bml0TGVuZ3RoID0gZnVuY3Rpb24obWFpbk9iaikge1xyXG4gIHZhciB1bml0cyA9IG1haW5PYmoudW5pdHM7XHJcbiAgdmFyIHJpZ2h0TW9zdFBvaW50ID0gMDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgYm94ID0gdW5pdHNbaV0uYmJveDtcclxuICAgIGlmIChib3gueCArIGJveC53IC8gMiA+IHJpZ2h0TW9zdFBvaW50KXtcclxuICAgICAgcmlnaHRNb3N0UG9pbnQgPSBib3gueCArIGJveC53IC8gMjtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJpZ2h0TW9zdFBvaW50O1xyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC51bml0TGVuZ3RoUmlnaHRMZWZ0ID0gZnVuY3Rpb24obWFpbk9iaikge1xyXG4gIHZhciB1bml0cyA9IG1haW5PYmoudW5pdHM7XHJcbiAgdmFyIHRvcE1vc3RQb2ludCA9IDA7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGJveCA9IHVuaXRzW2ldLmJib3g7XHJcbiAgICBpZiAoYm94LnkgKyBib3guaCAvIDIgPiB0b3BNb3N0UG9pbnQpe1xyXG4gICAgICB0b3BNb3N0UG9pbnQgPSBib3gueSsgYm94LmggLyAyO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdG9wTW9zdFBvaW50O1xyXG59O1xyXG5cclxuLy9HZXQgVW5pdCBHYXBzXHJcbkF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudFRvcEdhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgcmV0dXJuIEF1eFVuaXRMYXlvdXQuY3VycmVudFRvcFVuaXRHYXA7XHJcbn1cclxuXHJcbkF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudEJvdHRvbUdhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgcmV0dXJuIEF1eFVuaXRMYXlvdXQuY3VycmVudEJvdHRvbVVuaXRHYXA7XHJcbn1cclxuXHJcbkF1eFVuaXRMYXlvdXQuZ2V0Q3VycmVudExlZnRHYXAgPSBmdW5jdGlvbigpe1xyXG4gIHJldHVybiBBdXhVbml0TGF5b3V0LmN1cnJlbnRMZWZ0VW5pdEdhcDtcclxufVxyXG5cclxuQXV4VW5pdExheW91dC5nZXRDdXJyZW50UmlnaHRHYXAgPSBmdW5jdGlvbigpe1xyXG4gIHJldHVybiBBdXhVbml0TGF5b3V0LmN1cnJlbnRSaWdodFVuaXRHYXA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdXRvIGNob29zZSB0aGUgbmV4dCBsYXlvdXQuIFRvIGFkZCBhIG5ldyBhdXggdW5pdCwgZm9yIGV4YW1wbGUuXHJcbiAqL1xyXG5BdXhVbml0TGF5b3V0LnNlbGVjdE5leHRBdmFpbGFibGUgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdmFyIHRvcCA9IG5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKS50b3A7XHJcbiAgdmFyIGJvdHRvbSA9IG5vZGUuZGF0YSgnYXV4dW5pdGxheW91dHMnKS5ib3R0b207XHJcbiAgdmFyIHJlc3VsdExvY2F0aW9uID0gXCJ0b3BcIjtcclxuICAvLyBzdGFydCBieSBhZGRpbmcgb24gdG9wIGlmIGZyZWVcclxuICBpZighdG9wIHx8IEF1eFVuaXRMYXlvdXQuaXNFbXB0eSh0b3ApKSB7XHJcbiAgICByZXN1bHRMb2NhdGlvbiA9IFwidG9wXCI7XHJcbiAgfVxyXG4gIGVsc2UgaWYoIWJvdHRvbSB8fCBBdXhVbml0TGF5b3V0LmlzRW1wdHkoYm90dG9tKSkge1xyXG4gICAgcmVzdWx0TG9jYXRpb24gPSBcImJvdHRvbVwiO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIC8vIGNob29zZSB0aGUgc2lkZSAodG9wIG9yIGJvdHRvbSkgdGhhdCBoYXMgdGhlIG1vc3Qgc3BhY2UgYXZhaWxhYmxlIHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IGluZm9ib3hcclxuICAgIGlmKEF1eFVuaXRMYXlvdXQudW5pdExlbmd0aCh0b3ApIDw9IEF1eFVuaXRMYXlvdXQudW5pdExlbmd0aChib3R0b20pKSB7XHJcbiAgICAgIHJlc3VsdExvY2F0aW9uID0gXCJ0b3BcIjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXN1bHRMb2NhdGlvbiA9IFwiYm90dG9tXCI7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEF1eFVuaXRMYXlvdXQubGFzdFBvcyA9IHJlc3VsdExvY2F0aW9uOyAvL1NldCBsYXN0IHVzZWQgcG9zaXRpb25cclxuICByZXR1cm4gcmVzdWx0TG9jYXRpb247XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LnNlbGVjdE5leHRBdmFpbGFibGVMZWZ0UmlnaHQgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgdmFyIGxlZnQgPSBub2RlLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJykubGVmdDtcclxuICB2YXIgcmlnaHQgPSBub2RlLmRhdGEoJ2F1eHVuaXRsYXlvdXRzJykucmlnaHQ7XHJcbiAgdmFyIHJlc3VsdExvY2F0aW9uID0gXCJsZWZ0XCI7XHJcbiAgLy8gc3RhcnQgYnkgYWRkaW5nIG9uIGxlZnQgaWYgZnJlZVxyXG4gIGlmKCFsZWZ0IHx8IEF1eFVuaXRMYXlvdXQuaXNFbXB0eShsZWZ0KSkge1xyXG4gICAgcmVzdWx0TG9jYXRpb24gPSBcImxlZnRcIjtcclxuICB9XHJcbiAgZWxzZSBpZighcmlnaHQgfHwgQXV4VW5pdExheW91dC5pc0VtcHR5KHJpZ2h0KSkge1xyXG4gICAgcmVzdWx0TG9jYXRpb24gPSBcInJpZ2h0XCI7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgLy8gY2hvb3NlIHRoZSBzaWRlIChsZWZ0IG9yIHJpZ2h0KSB0aGF0IGhhcyB0aGUgbW9zdCBzcGFjZSBhdmFpbGFibGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSByaWdodG1vc3QgaW5mb2JveFxyXG4gICAgaWYoQXV4VW5pdExheW91dC51bml0TGVuZ3RoUmlnaHRMZWZ0KGxlZnQpIDw9IEF1eFVuaXRMYXlvdXQudW5pdExlbmd0aFJpZ2h0TGVmdChyaWdodCkpIHtcclxuICAgICAgcmVzdWx0TG9jYXRpb24gPSBcImxlZnRcIjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXN1bHRMb2NhdGlvbiA9IFwicmlnaHRcIjtcclxuICAgIH1cclxuICB9XHJcbiAgQXV4VW5pdExheW91dC5sYXN0UG9zID0gcmVzdWx0TG9jYXRpb247IC8vU2V0IGxhc3QgdXNlZCBwb3NpdGlvblxyXG4gIHJldHVybiByZXN1bHRMb2NhdGlvbjtcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQucmVzaXplUGFyZW50ID0gZnVuY3Rpb24gKG1haW5PYmosIGN5LCBsZW5ndGgpIHtcclxuICB2YXIgcGFyZW50Tm9kZSA9IEF1eFVuaXRMYXlvdXQuZ2V0UGFyZW50Tm9kZShtYWluT2JqLCBjeSk7XHJcbiAgaWYoQXV4VW5pdExheW91dC5pc1RvckIobWFpbk9iaikpIHtcclxuICAgIGlmKHBhcmVudE5vZGUuZGF0YSgnYmJveCcpLncgPCBsZW5ndGgpIHtcclxuICAgICAgY3kudHJpZ2dlcihcIm5vZGVlZGl0aW5nLnJlc2l6ZXN0YXJ0XCIsIFtcImNlbnRlcnJpZ2h0XCIsIHBhcmVudE5vZGVdKTtcclxuICAgICAgcGFyZW50Tm9kZS5kYXRhKCdiYm94JykudyA9IGxlbmd0aDtcclxuICAgICAgY3kudHJpZ2dlcihcIm5vZGVlZGl0aW5nLnJlc2l6ZWVuZFwiLCBbXCJjZW50ZXJyaWdodFwiLCBwYXJlbnROb2RlXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgaWYocGFyZW50Tm9kZS5kYXRhKCdiYm94JykuaCA8IGxlbmd0aCkge1xyXG4gICAgICBjeS50cmlnZ2VyKFwibm9kZWVkaXRpbmcucmVzaXplc3RhcnRcIiwgW1wiYm90dG9tY2VudGVyXCIsIHBhcmVudE5vZGVdKTtcclxuICAgICAgcGFyZW50Tm9kZS5kYXRhKCdiYm94JykuaCA9IGxlbmd0aDtcclxuICAgICAgY3kudHJpZ2dlcihcIm5vZGVlZGl0aW5nLnJlc2l6ZWVuZFwiLCBbXCJib3R0b21jZW50ZXJcIiwgcGFyZW50Tm9kZV0pO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuaXNUb3JCID0gZnVuY3Rpb24gKG1haW5PYmopIHtcclxuICByZXR1cm4gbWFpbk9iai5sb2NhdGlvbiA9PSBcInRvcFwiIHx8IG1haW5PYmoubG9jYXRpb24gPT0gXCJib3R0b21cIjtcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuaXNMb3JSID0gZnVuY3Rpb24gKG1haW5PYmopIHtcclxuICByZXR1cm4gbWFpbk9iai5sb2NhdGlvbiA9PSBcImxlZnRcIiB8fCBtYWluT2JqLmxvY2F0aW9uID09IFwicmlnaHRcIjtcclxufTtcclxuXHJcbkF1eFVuaXRMYXlvdXQuc2V0UGFyZW50TWluTGVuZ3RoID0gZnVuY3Rpb24gKG1haW5PYmosIGN5KSB7XHJcbiAgdmFyIHBhcmVudE5vZGUgPSBBdXhVbml0TGF5b3V0LmdldFBhcmVudE5vZGUobWFpbk9iaiwgY3kpO1xyXG4gIHZhciBwYXJlbnRMYXlvdXRzID0gcGFyZW50Tm9kZS5kYXRhKCdhdXh1bml0bGF5b3V0cycpO1xyXG4gIHN3aXRjaChtYWluT2JqLmxvY2F0aW9uKSB7XHJcbiAgICBjYXNlIFwidG9wXCI6XHJcbiAgICAgIHZhciBjb21wYXJlVmFsID0gcGFyZW50TGF5b3V0cy5ib3R0b20gPyBwYXJlbnRMYXlvdXRzLmJvdHRvbS5sZW5ndGhVc2VkIDogMDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiYm90dG9tXCI6XHJcbiAgICAgIHZhciBjb21wYXJlVmFsID0gcGFyZW50TGF5b3V0cy50b3AgPyBwYXJlbnRMYXlvdXRzLnRvcC5sZW5ndGhVc2VkIDogMDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICB2YXIgY29tcGFyZVZhbCA9IHBhcmVudExheW91dHMucmlnaHQgPyBwYXJlbnRMYXlvdXRzLnJpZ2h0Lmxlbmd0aFVzZWQgOiAwO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICB2YXIgY29tcGFyZVZhbCA9IHBhcmVudExheW91dHMubGVmdCA/IHBhcmVudExheW91dHMubGVmdC5sZW5ndGhVc2VkIDogMDtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG4gIGlmKEF1eFVuaXRMYXlvdXQuaXNUb3JCKG1haW5PYmopKSB7XHJcbiAgICBwYXJlbnROb2RlLmRhdGEoJ3Jlc2l6ZU1pbldpZHRoJywgTWF0aC5tYXgobWFpbk9iai5sZW5ndGhVc2VkLCBjb21wYXJlVmFsKSk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgcGFyZW50Tm9kZS5kYXRhKCdyZXNpemVNaW5IZWlnaHQnLCBNYXRoLm1heChtYWluT2JqLmxlbmd0aFVzZWQsIGNvbXBhcmVWYWwpKTtcclxuICB9XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LmdldE91dGVyTWFyZ2luID0gZnVuY3Rpb24gKG1haW5PYmopIHtcclxuICBpZih0eXBlb2YgbWFpbk9iai5vdXRlck1hcmdpbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtYWluT2JqLm91dGVyTWFyZ2luICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbWFpbk9iai5vdXRlck1hcmdpbjtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICByZXR1cm4gQXV4VW5pdExheW91dC5vdXRlck1hcmdpbjtcclxuICB9XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LmdldFVuaXRHYXAgPSBmdW5jdGlvbiAobWFpbk9iaikge1xyXG4gIGlmKHR5cGVvZiBtYWluT2JqLnVuaXRHYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgbWFpbk9iai51bml0R2FwICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbWFpbk9iai51bml0R2FwO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHJldHVybiBBdXhVbml0TGF5b3V0LnVuaXRHYXA7XHJcbiAgfVxyXG59O1xyXG5cclxuQXV4VW5pdExheW91dC5nZXRBbHdheXNTaG93QXV4VW5pdHMgPSBmdW5jdGlvbiAobWFpbk9iaikge1xyXG4gIGlmKHR5cGVvZiBtYWluT2JqLmFsd2F5c1Nob3dBdXhVbml0cyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtYWluT2JqLmFsd2F5c1Nob3dBdXhVbml0cyAhPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG1haW5PYmouYWx3YXlzU2hvd0F1eFVuaXRzO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHJldHVybiBBdXhVbml0TGF5b3V0LmFsd2F5c1Nob3dBdXhVbml0cztcclxuICB9XHJcbn07XHJcblxyXG5BdXhVbml0TGF5b3V0LmdldE1heFVuaXREaXNwbGF5ZWQgPSBmdW5jdGlvbiAobWFpbk9iaikge1xyXG4gIGlmKHR5cGVvZiBtYWluT2JqLm1heFVuaXREaXNwbGF5ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgbWFpbk9iai5tYXhVbml0RGlzcGxheWVkICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbWFpbk9iai5tYXhVbml0RGlzcGxheWVkO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHJldHVybiBBdXhVbml0TGF5b3V0Lm1heFVuaXREaXNwbGF5ZWQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLypcclxuICogIER1cGxpY2F0ZSBhIGxheW91dC4gRG9lc24ndCBjb3B5IHRoZSB1bml0cyBhdHRyaWJ1dGUsIHJlc2V0IGl0IGluc3RlYWQuXHJcbiAqL1xyXG5BdXhVbml0TGF5b3V0LmNvcHkgPSBmdW5jdGlvbihtYWluT2JqLCBjeSwgbmV3UGFyZW50KSB7XHJcbiAgdmFyIG5ld0xheW91dCA9IEF1eFVuaXRMYXlvdXQuY29uc3RydWN0KG5ld1BhcmVudCk7XHJcbiAgLy8gQ29weWluZyB0aGUgc2FtZSByZWZlcmVuY2UgdG8gdW5pdHMgd291bGQgYmUgaW5jb25zaXN0ZW50LlxyXG4gIC8vIER1cGxpY2F0aW5nIG93bmVkIHVuaXRzIGdvZXMgYmV5b25uZCB0aGUgc2NvcGUsIGJlY2F1c2Ugd2UgbmVlZCB0byBhc3NpZ25cclxuICAvLyBpZHMgdGhhdCBhcmUgdGllZCB0byB0aGUgZ2xvYmFsIGNvdW5kIG9mIHVuaXRzIG9mIGEgbm9kZS5cclxuICAvLyBTbyBkdXBsaWNhdGluZyB1bml0cyBpcyBzb21ldGhpbmcgdGhhdCBzaG91bGQgYmUgcHJvcGVybHkgZG9uZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24uXHJcbiAgLy8gVE9ETyB0aGF0IGlzIGEgYml0IGRpcnR5LCBmaW5kIGEgbmljZSBtb2R1bGFyIHdheSB0byBhcnJhbmdlIHRoYXRcclxuICBuZXdMYXlvdXQudW5pdHMgPSBbXTtcclxuICBuZXdMYXlvdXQubG9jYXRpb24gPSBtYWluT2JqLmxvY2F0aW9uO1xyXG4gIG5ld0xheW91dC5hbGlnbm1lbnQgPSBtYWluT2JqLmFsaWdubWVudDtcclxuICBBdXhVbml0TGF5b3V0LnNldFBhcmVudE5vZGVSZWYobmV3TGF5b3V0LCBuZXdQYXJlbnQpO1xyXG4gIG5ld0xheW91dC5yZW5kZXJMZW5ndGhDYWNoZSA9IG1haW5PYmoucmVuZGVyTGVuZ3RoQ2FjaGU7XHJcbiAgbmV3TGF5b3V0Lmxlbmd0aFVzZWQgPSBtYWluT2JqLmxlbmd0aFVzZWQ7XHJcbiAgaWYodHlwZW9mIG1haW5PYmoub3V0ZXJNYXJnaW4gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIG5ld0xheW91dC5vdXRlck1hcmdpbiA9IG1haW5PYmoub3V0ZXJNYXJnaW47XHJcbiAgfVxyXG4gIGlmKHR5cGVvZiBtYWluT2JqLnVuaXRHYXAgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIG5ld0xheW91dC51bml0R2FwID0gbWFpbk9iai51bml0R2FwO1xyXG4gIH1cclxuICBpZih0eXBlb2YgbWFpbk9iai5hbHdheXNTaG93QXV4VW5pdHMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIG5ld0xheW91dC5hbHdheXNTaG93QXV4VW5pdHMgPSBtYWluT2JqLmFsd2F5c1Nob3dBdXhVbml0cztcclxuICB9XHJcbiAgaWYodHlwZW9mIG1haW5PYmoubWF4VW5pdERpc3BsYXllZCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgbmV3TGF5b3V0Lm1heFVuaXREaXNwbGF5ZWQgPSBtYWluT2JqLm1heFVuaXREaXNwbGF5ZWQ7XHJcbiAgfVxyXG4gIHJldHVybiBuZXdMYXlvdXQ7XHJcbn07XHJcblxyXG5ucy5BdXhVbml0TGF5b3V0ID0gQXV4VW5pdExheW91dDtcclxuLy8gLS0tLS0tLS0tLS0tLS0gRU5EIEF1eFVuaXRMYXlvdXQgLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbnM7XHJcbiJdLCJuYW1lcyI6WyJsaWJzIiwicmVxdWlyZSIsImdldExpYnMiLCJqUXVlcnkiLCIkIiwiY3l0b3NjYXBlIiwidHJ1bmNhdGUiLCJlbGVtZW50VXRpbGl0aWVzIiwibnMiLCJnZXRBdXhVbml0Q2xhc3MiLCJ1bml0IiwidW5pdFR5cGUiLCJjbGF6eiIsImNsYXNzTmFtZSIsIkF1eGlsaWFyeVVuaXQiLCJjb25zdHJ1Y3QiLCJwYXJlbnQiLCJvYmoiLCJzZXRQYXJlbnRSZWYiLCJpZCIsImJib3giLCJhbmNob3JTaWRlIiwiaXNEaXNwbGF5ZWQiLCJzdHlsZSIsImdldFBhcmVudCIsIm1haW5PYmoiLCJjeSIsImdldEVsZW1lbnRCeUlkIiwibmV3UGFyZW50IiwiY2hlY2tQb2ludCIsIngiLCJ5Iiwibm9kZSIsInRocmVzaG9sZCIsImNlbnRlclgiLCJfcHJpdmF0ZSIsInBvc2l0aW9uIiwiY2VudGVyWSIsInBhZGRpbmciLCJwYXJzZUludCIsImNzcyIsInN0YXRlQW5kSW5mb3MiLCJkYXRhIiwic3RhdGVzYW5kaW5mb3MiLCJjeUJhc2VOb2RlU2hhcGVzIiwiYmFzZU5vZGVTaGFwZXMiLCJpIiwibGVuZ3RoIiwic3RhdGUiLCJzdGF0ZVdpZHRoIiwicGFyc2VGbG9hdCIsInciLCJzdGF0ZUhlaWdodCIsImgiLCJjb29yZCIsImdldEFic29sdXRlQ29vcmQiLCJzdGF0ZUNlbnRlclgiLCJzdGF0ZUNlbnRlclkiLCJjb3B5IiwiZXhpc3RpbmdJbnN0YW5jZSIsIm5ld0lkIiwibmV3VW5pdCIsInBhcmVudFRvU2V0IiwiZXh0ZW5kIiwiY29vcmRUeXBlIiwiZHJhdyIsImNvbnRleHQiLCJ1bml0Q2xhc3MiLCJjb29yZHMiLCJkcmF3U2hhcGUiLCJoYXNUZXh0IiwiZHJhd1RleHQiLCJnZXRUZXh0IiwiRXJyb3IiLCJzYmduIiwiZHJhd0luZm9Cb3giLCJ0bXBfY3R4dCIsImZpbGxTdHlsZSIsImZpbGwiLCJib3JkZXJTdHlsZSIsImRhc2hlZCIsInVuZGVmaW5lZCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJzZWxlY3RlZCIsImRyYXdCb3JkZXIiLCJvcHRpb25zIiwic2NyYXRjaCIsInNiZ252aXpQYXJhbXMiLCJvcHRpb25VdGlsaXRpZXMiLCJnZXRPcHRpb25zIiwib2xkRm9udCIsImZvbnQiLCJvbGRTdHlsZSIsIm9sZE9wYWNpdHkiLCJnbG9iYWxBbHBoYSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInRleHQiLCJmaXRMYWJlbHNUb0luZm9ib3hlcyIsImtleSIsIl90ZXh0Q2FjaGUiLCJmaWxsVGV4dCIsInBhcmVudFdpZHRoIiwid2lkdGgiLCJwYXJlbnRIZWlnaHQiLCJoZWlnaHQiLCJOdW1iZXIiLCJyZXBsYWNlIiwiYWJzWCIsImFic1kiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJjb252ZXJ0VG9BYnNvbHV0ZUNvb3JkIiwicmVsWCIsInJlbFkiLCJjb252ZXJ0VG9SZWxhdGl2ZUNvb3JkIiwicGFyZW50Tm9kZSIsInNldEFuY2hvclNpZGUiLCJ0aGlzWCIsInRoaXNZIiwidGhpc0giLCJ0aGlzVyIsImNvbXBsZXhDYWxjdWxhdGVkUGFkZGluZyIsInBhcmVudFgiLCJwYXJlbnRZIiwicGFyZW50WDEiLCJ0b0ZpeGVkIiwicGFyZW50WDIiLCJwYXJlbnRZMSIsInBhcmVudFkyIiwiYWRkVG9QYXJlbnQiLCJsb2NhdGlvbiIsImluZGV4Iiwic3BsaWNlIiwicHVzaCIsIkF1eFVuaXRMYXlvdXQiLCJzZWxlY3ROZXh0QXZhaWxhYmxlIiwic2VsZWN0TmV4dEF2YWlsYWJsZUxlZnRSaWdodCIsImxheW91dCIsImluc2VydGVkUG9zaXRpb24iLCJhZGRBdXhVbml0IiwicmVtb3ZlRnJvbVBhcmVudCIsInBhcmVudExheW91dCIsInJlbW92ZUF1eFVuaXQiLCJpc0VtcHR5IiwiaW5kZXhPZiIsImdldFBvc2l0aW9uSW5kZXgiLCJ1bml0cyIsIlN0YXRlVmFyaWFibGUiLCJwcm9wIiwidmFsdWUiLCJzdGF0ZVZhcmlhYmxlRGVmaW5pdGlvbiIsImdlbmVyYXRlU3RhdGVWYXJJZCIsInZhcmlhYmxlIiwic3RhdGVWYWx1ZSIsInN0YXRlVmFyaWFibGUiLCJjcmVhdGUiLCJzdGF0ZVZhciIsInJlbW92ZSIsIm5ld1N0YXRlVmFyIiwiUmVzaWR1ZVZhcmlhYmxlIiwicmVzaWR1ZVZhcmlhYmxlRGVmaW5pdGlvbiIsInJlc2lkdWUiLCJyZXNpZHVlVmFyaWFibGUiLCJyZXNpZHVlVmFyIiwibmV3UmVzaWR1ZVZhciIsIlJlc2lkdWVWYXJpYWJsZURlZmluaXRpb24iLCJuZXdTdGFuZXdSZXNpZHVlVmFydGVWYXIiLCJCaW5kaW5nUmVnaW9uIiwiYmluZGluZ1JlZ2lvbkRlZmluaXRpb24iLCJyZWdpb24iLCJiaW5kaW5nUmVnaW9uIiwibmV3QmluZGluZ1JlZ2lvbiIsIkJpbmRpbmdSZWdpb25EZWZpbml0aW9uIiwiVW5pdE9mSW5mb3JtYXRpb24iLCJnZW5lcmF0ZVVuaXRPZkluZm9JZCIsImxhYmVsIiwibmV3VW5pdE9mSW5mbyIsIkVudGl0eVR5cGUiLCJuYW1lIiwiRVBOIiwic3RhdGVWYXJpYWJsZURlZmluaXRpb25zIiwiRVBOcyIsImNyZWF0ZU5ld0RlZmluaXRpb25Gb3IiLCJuZXdEZWZpbml0aW9uIiwiU3RhdGVWYXJpYWJsZURlZmluaXRpb24iLCJlbnRpdHlUeXBlIiwic3RhdGVWYXJpYWJsZXMiLCJhc3NpZ25TdGF0ZVZhcmlhYmxlIiwibWF0Y2hTdGF0ZURlZiIsIm1hdGNoU3RhdGVWYXJpYWJsZSIsImdldENvbmNlcm5lZEVQTnMiLCJtYXRjaFN0YXRlVmFyIiwiYWxpZ25tZW50Iiwic2V0UGFyZW50Tm9kZVJlZiIsInJlbmRlckxlbmd0aENhY2hlIiwibGVuZ3RoVXNlZCIsIm91dGVyTWFyZ2luIiwiZ2V0UGFyZW50Tm9kZSIsInVuaXRHYXAiLCJjdXJyZW50VG9wVW5pdEdhcCIsImN1cnJlbnRCb3R0b21Vbml0R2FwIiwiY3VycmVudExlZnRVbml0R2FwIiwiY3VycmVudFJpZ2h0VW5pdEdhcCIsImFsd2F5c1Nob3dBdXhVbml0cyIsIm1heFVuaXREaXNwbGF5ZWQiLCJsYXN0UG9zIiwidXBkYXRlIiwicHJlQ29tcHV0ZWQiLCJjb21wdXRlQ29vcmRzIiwibG9jYXRpb25zIiwiY2hlY2tGaXQiLCJmaWx0ZXIiLCJsb2MiLCJmaXRVbml0cyIsInNldERpc3BsYXllZFVuaXRzIiwicmVsYXRpdmVDb29yZHMiLCJnZXRDdXJyZW50R2FwIiwibGFzdFVuaXQiLCJsYXN0VW5pdEFic0NvcmQiLCJyZW9yZGVyRnJvbVBvc2l0aW9ucyIsInNvcnQiLCJhIiwiYiIsInVwZGF0ZUxlbmd0aENhY2hlIiwicHJldmlvdXMiLCJnZXRPdXRlck1hcmdpbiIsImN1cnJlbnRMZW5ndGgiLCJpc1RvckIiLCJnZXRVbml0R2FwIiwiZ2V0RHJhd2FibGVVbml0QW1vdW50IiwiZ2V0QWx3YXlzU2hvd0F1eFVuaXRzIiwiYXZhaWxhYmxlU3BhY2UiLCJnZXRNYXhVbml0RGlzcGxheWVkIiwiZ2V0VXNlZFdpZHRoIiwidGIiLCJ0b3RhbFdpZHRoIiwiZ2V0VXNlZEhlaWdodCIsInRvdGFsSGVpZ2h0IiwiZ2V0VXNlZExlbmd0aFRCIiwiZ2V0VXNlZExlbmd0aExSIiwic2V0Q3VycmVudEdhcCIsImZvcmNlQ2hlY2siLCJmaXRMb2NhdGlvbnMiLCJmaXJzdFVuaXQiLCJjb29yZHNGaXJzdCIsImNvb3Jkc0xhc3QiLCJnYXAiLCJmaXJzdFgxIiwibGFzdFgyIiwiZmlyc3RZMSIsImxhc3RZMiIsInNldElkZWFsR2FwIiwiZXN0aW1hdGVkR2FwIiwiYXV4VW5pdCIsInVzZWRMZW5ndGgiLCJyZWxhdGl2ZUNvcmQiLCJwcmVjb21wdXRlQ29vcmRzIiwiZG9Gb3JjZVVwZGF0ZSIsImZpbmFsTGVuZ3RoVXNlZCIsIm1vZGlmeVVuaXRzIiwib2xkTG9jYXRpb24iLCJwb3NYIiwicG9zWSIsIm9sZEF1eFVuaXQiLCJkZWxldGVVbml0cyIsImRlbGV0ZUluZGV4IiwiaW5zZXJ0QXV4VW5pdCIsImluc2VydFVuaXRzIiwidW5pdENvdW50IiwidW5pdExlbmd0aCIsInJpZ2h0TW9zdFBvaW50IiwiYm94IiwidW5pdExlbmd0aFJpZ2h0TGVmdCIsInRvcE1vc3RQb2ludCIsImdldEN1cnJlbnRUb3BHYXAiLCJnZXRDdXJyZW50Qm90dG9tR2FwIiwiZ2V0Q3VycmVudExlZnRHYXAiLCJnZXRDdXJyZW50UmlnaHRHYXAiLCJ0b3AiLCJib3R0b20iLCJyZXN1bHRMb2NhdGlvbiIsImxlZnQiLCJyaWdodCIsInJlc2l6ZVBhcmVudCIsInRyaWdnZXIiLCJpc0xvclIiLCJzZXRQYXJlbnRNaW5MZW5ndGgiLCJwYXJlbnRMYXlvdXRzIiwiY29tcGFyZVZhbCIsIk1hdGgiLCJtYXgiLCJuZXdMYXlvdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/classes.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\r\n * Common utilities for elements includes both general utilities and sbgn specific utilities\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var optionUtilities, graphUtilities;\n  var options;\n  var cy;\n  function elementUtilities(param) {\n    // Init params to be accessed by elementUtilities\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  var inArray = function inArray(value, arr) {\n    return $.inArray(value, arr) !== -1;\n  };\n\n  // initialize map type\n  elementUtilities.mapType = \"PD\";\n  elementUtilities.fileFormat = undefined;\n  elementUtilities.PD = {}; // namespace for all PD specific stuff\n  elementUtilities.AF = {}; // namespace for all AF specific stuff\n  elementUtilities.SIF = {}; // namespace for all SIF specific stuff\n  elementUtilities.SBML = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.graphTopologyLocked = false;\n\n  // see http://stackoverflow.com/a/8809472\n  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)\n  // don't comply with xsd:SID type that must not begin with a number\n  elementUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n    if (typeof performance !== \"undefined\" && typeof performance.now === \"function\") {\n      d += performance.now(); //use high-precision timer if available\n    }\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n  elementUtilities.generateNodeId = function () {\n    return \"nwtN_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateEdgeId = function () {\n    return \"nwtE_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateStateVarId = function () {\n    return \"nwtSV_\" + elementUtilities.generateUUID();\n  };\n  elementUtilities.generateUnitOfInfoId = function () {\n    return \"nwtUOI_\" + elementUtilities.generateUUID();\n  };\n\n  /*\r\n    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated\r\n    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft\r\n    only the following things have been changed from 2.0 (this version is not clear on connectivity):\r\n     - empty set has no limit on its edge count\r\n     - logic operators can be source and target\r\n     - limit of 1 catalysis and 1 necessary stimulation on a process\r\n      for each edge class and nodeclass define 2 cases:\r\n     - node can be a source of this edge -> asSource\r\n     - node can be a target of this edge -> asTarget\r\n    for both cases, tells if it is allowed and what is the limit of edges allowed.\r\n    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).\r\n    Consider undefined things as false/unallowed -> whitelist behavior.\r\n      the nodes/edges class listed below are those used in the program.\r\n    For instance \"compartment\" isn't a node in SBGN specs.\r\n  */\n  elementUtilities.PD.connectivityConstraints = {\n    consumption: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    production: {\n      macromolecule: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unspecified entity\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      complex: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    modulation: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    stimulation: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    catalysis: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    inhibition: {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      }\n    },\n    \"equivalence arc\": {\n      macromolecule: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      complex: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n\n  /* AF node connectivity rules\r\n   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015\r\n   *   Section 3.3.1: Activity Nodes connectivity definition\r\n   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265\r\n   */\n  elementUtilities.AF.connectivityConstraints = {\n    \"positive influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      delay: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {},\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {}\n      },\n      submap: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      delay: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"equivalence arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      phenotype: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      tag: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      submap: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      delay: {\n        asSource: {},\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SIF.connectivityConstraints = {\n    \"controls-state-change-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-transport-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-phosphorylation-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-expression-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis-precedes\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"in-complex-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"interacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"neighbor-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"consumption-controled-by\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"controls-production-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"controls-transport-of-chemical\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"chemical-affects\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"reacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"used-to-produce\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    activates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    inhibits: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    phosphorylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    dephosphorylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"upregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"downregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"activates-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    acetylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    deacetylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    methylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    demethylates: {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SBML.connectivityConstraints = {\n    consumption: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    production: {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    modulation: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    stimulation: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    catalysis: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    inhibition: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    trigger: {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    transport: {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {}\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"unknown inhibition\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown catalysis\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"transcription consumption\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"transcription production\": {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"translation consumption\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      process: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"translation production\": {\n      protein: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      dissociation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      and: {\n        asSource: {},\n        asTarget: {}\n      },\n      or: {\n        asSource: {},\n        asTarget: {}\n      },\n      not: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"positive influence sbml\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced modulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced stimulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"reduced trigger\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown negative influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown positive influence\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced stimulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced modulation\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"unknown reduced trigger\": {\n      protein: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unknown molecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      gene: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      compartment: {\n        asSource: {},\n        asTarget: {}\n      },\n      rna: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      degradation: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      drug: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"truncated protein\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"ion channel\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      receptor: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      ion: {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      process: {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"truncated process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype sbml\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      association: {\n        asSource: {},\n        asTarget: {}\n      },\n      dissociation: {\n        asSource: {},\n        asTarget: {}\n      },\n      and: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      or: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      not: {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"unknown logical operator\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.logicalOperatorTypes = [\"and\", \"or\", \"not\", \"delay\", \"unknown logical operator\"];\n  elementUtilities.processTypes = [\"process\", \"omitted process\", \"uncertain process\", \"truncated process\", \"association\", \"dissociation\", \"phenotype\"];\n  elementUtilities.biologicalActivityTypes = [\"biological activity\", \"BA plain\", \"BA unspecified entity\", \"BA simple chemical\", \"BA macromolecule\", \"BA nucleic acid feature\", \"BA perturbing agent\", \"BA complex\"];\n  elementUtilities.epnTypes = [\"macromolecule\", \"nucleic acid feature\", \"simple chemical\", \"empty set\", \"unspecified entity\", \"perturbing agent\", \"complex\", \"protein\", \"nucleic acid feature multimer\", \"macromolecule multimer\", \"simple chemical multimer\", \"complex multimer\"];\n  elementUtilities.sifTypes = [\"SIF macromolecule\", \"SIF simple chemical\"];\n  elementUtilities.otherNodeTypes = [\"compartment\", \"tag\", \"submap\", \"topology group\"];\n  elementUtilities.sbmlType = [\"gene\", \"rna\", \"simple molecule\", \"unknown molecule\", \"drug\", \"ion\", \"protein\", \"truncated protein\", \"ion channel\", \"receptor\", \"phenotype sbml\", \"complex sbml\", \"protein\", \"degradation\"];\n  elementUtilities.sbmlTypeMultimer = [\"gene multimer\", \"rna multimer\", \"ion channel multimer\", \"receptor multimer\", \"truncated protein multimer\", \"ion multimer\", \"simple molecule multimer\", \"unknown molecule multimer\", \"drug multimer\", \"complex multimer\", \"phenotype sbml multimer\", \"receptor multimer\", \"complex sbml multimer\", \"protein multimer\"];\n  elementUtilities.sbmlTypeActive = [\"active protein\", \"active receptor\", \"active ion channel\", \"active truncated protein\", \"active complex sbml\"];\n  elementUtilities.sbmlTypeHypothetical = [\"hypothetical protein\", \"hypothetical receptor\", \"hypothetical truncated protein\", \"hypothetical ion channel\", \"hypothetical gene\", \"hypothetical rna\", \"hypothetical phenotype sbml\", \"hypothetical ion\", \"hypothetical uknown molecule\", \"hypothetical drug\", \"hypothetical complex sbml\", \"hypothetical degradation\"];\n  elementUtilities.sbmlTypeActiveHypothetical = [\"active hypothetical protein\", \"active hypothetical receptor\", \"active hypothetical truncated protein\", \"hypothetical ion channel\", \"active hypothetical complex sbml\"];\n  elementUtilities.sbmlTypeActiveMultimer = [\"active protein multimer\", \"active receptor multimer\", \"active ion channel multimer\", \"active truncated protein multimer\", \"active complex multimer\"];\n  elementUtilities.sbmlTypeHypotheticalMultimer = [\"hypothetical protein multimer\", \"hypothetical receptor multimer\", \"hypothetical truncated protein multimer\", \"hypothetical ion channel multimer\", \"hypothetical gene multimer\", \"hypothetical rna multimer\", \"hypothetical phenotype sbml multimer\", \"hypothetical ion multimer\", \"hypothetical uknown molecule multimer\", \"hypothetical drug multimer\", \"hypothetical complex sbml  multimer\", \"hypothetical degradation  multimer\"];\n  elementUtilities.sbmlTypeActiveHypotheticalMultimer = [\"active hypothetical protein multimer\", \"active hypothetical receptor multimer\", \"active hypothetical ion channel multimer\", \"active hypothetical truncated protein multimer\", \"active hypothetical complex multimer\"];\n\n  //elementUtilities.sbmlTypeHypothetical = [''] //Do I need this?\n  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.sbmlType).concat(elementUtilities.sbmlTypeMultimer).concat(elementUtilities.sbmlTypeActive).concat(elementUtilities.sbmlTypeHypothetical).concat(elementUtilities.sbmlTypeActiveHypothetical).concat(elementUtilities.sbmlTypeActiveMultimer).concat(elementUtilities.sbmlTypeHypotheticalMultimer).concat(elementUtilities.sbmlTypeActiveHypotheticalMultimer);\n  elementUtilities.compoundNodeTypes = [\"complex\", \"compartment\", \"submap\"];\n  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();\n  elementUtilities.sifEdgeTypes = [\"neighbor-of\", \"interacts-with\", \"in-complex-with\", \"controls-state-change-of\", \"controls-transport-of\", \"controls-phosphorylation-of\", \"catalysis-precedes\", \"controls-expression-of\", \"consumption-controled-by\", \"controls-production-of\", \"controls-transport-of-chemical\", \"chemical-affects\", \"reacts-with\", \"used-to-produce\", \"phosphorylates\", \"dephosphorylates\", \"upregulates-expression\", \"downregulates-expression\", \"activates\", \"inhibits\", \"activates-gtpase\", \"inhibits-gtpase\", \"acetylates\", \"deacetylates\", \"methylates\", \"demethylates\"];\n  elementUtilities.edgeTypes = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\", \"unknown influence\", \"positive influence\", \"negative influence\", \"controls-state-change-of\", \"controls-transport-of\", \"controls-phosphorylation-of\", \"controls-expression-of\", \"catalysis-precedes\", \"in-complex-with\", \"interacts-with\", \"neighbor-of\", \"consumption-controled-by\", \"controls-production-of\", \"controls-transport-of-chemical\", \"chemical-affects\", \"reacts-with\", \"used-to-produce\", \"activates\", \"inhibits\", \"phosphorylates\", \"dephosphorylates\", \"upregulates-expression\", \"downregulates-expression\", \"activates-gtpase\", \"inhibits-gtpase\", \"acetylates\", \"deacetylates\", \"methylates\", \"demethylates\", \"trigger\", \"transport\", \"unknown inhibition\", \"unknown catalysis\", \"transcription consumption\", \"transcription production\", \"translation consumption\", \"translation production\", \"negative influence\", \"positive influence sbml\", \"reduced modulation\", \"reduced stimulation\", \"reduced trigger\", \"unknown negative influence\", \"unknown positive influence\", \"unknown reduced stimulation\", \"unknown reduced modulation\", \"unknown reduced trigger\"];\n  elementUtilities.undirectedEdgeTypes = [\"in-complex-with\", \"interacts-with\", \"neighbor-of\", \"logic arc\", \"equivalence arc\"];\n  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);\n\n  /*\r\n   * Get sbgnclass of the given element. If the parameter is a string return it\r\n   * by assuming that it is the sbgnclass itself.\r\n   */\n  elementUtilities.getSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n    var sbgnclass = typeof ele === \"string\" ? ele : ele.data(\"class\");\n    return sbgnclass;\n  };\n\n  /*\r\n   * Get sbgn class omitting the multimer information\r\n   */\n  elementUtilities.getPureSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n    return elementUtilities.getSbgnClass(ele).replace(\" multimer\", \"\").replace(\"active \", \"\").replace(\"hypothetical \", \"\");\n  };\n\n  /*\r\n   * Returns if the elements with the given parent class can be parent of the elements with the given node class\r\n   */\n  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {\n    // If nodeClass and parentClass params are elements itselves instead of their class names handle it\n    var nodeClass = typeof _nodeClass !== \"string\" ? _nodeClass.data(\"class\") : _nodeClass;\n    var parentClass = _parentClass != undefined && typeof _parentClass !== \"string\" ? _parentClass.data(\"class\") : _parentClass;\n    if (parentClass == undefined || parentClass === \"compartment\" || parentClass === \"submap\") {\n      // Compartments, submaps and the root can include any type of nodes\n      return true;\n    } else if (parentClass.startsWith(\"complex\") && (!node || node.connectedEdges().length == 0 ||\n    // Complexes can only include EPNs which do not have edges\n    elementUtilities.mapType == \"HybridAny\" || elementUtilities.mapType == \"HybridSbgn\")) {\n      // When map type is unknown, allow complexes to include EPNs with edges\n      return elementUtilities.isEPNClass(nodeClass);\n    }\n    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass\n  };\n\n  // Get common properties of given elements. Returns null if the given element list is empty or the\n  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.\n  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the\n  // property name then use what that function returns.\n  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {\n    if (elements.length == 0) {\n      return null;\n    }\n    var isFunction;\n    // If we are not comparing the properties directly users can specify a function as well\n    if (typeof propertyName === \"function\") {\n      isFunction = true;\n    }\n\n    // Use data as default\n    if (!isFunction && !dataOrCss) {\n      dataOrCss = \"data\";\n    }\n    var getVal = function getVal(index) {\n      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);\n      return val;\n    };\n    var value = getVal(0);\n    for (var i = 1; i < elements.length; i++) {\n      if (getVal(i) != value) {\n        return null;\n      }\n    }\n    return value;\n  };\n\n  // Returns if the function returns a truthy value for all of the given elements.\n  elementUtilities.trueForAllElements = function (elements, fcn) {\n    for (var i = 0; i < elements.length; i++) {\n      if (!fcn(elements[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Returns whether the give element can have sbgncardinality\n  elementUtilities.canHaveSBGNCardinality = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"consumption\" || sbgnclass == \"production\";\n  };\n\n  // Returns whether the give element can have sbgnlabel\n  elementUtilities.canHaveSBGNLabel = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != \"and\" && sbgnclass != \"or\" && sbgnclass != \"not\" && sbgnclass != \"delay\" && sbgnclass != \"unknown logical operator\" && sbgnclass != \"association\" && sbgnclass != \"dissociation\" && sbgnclass != \"empty set\" && !sbgnclass.endsWith(\"process\");\n  };\n\n  // Returns whether the give element have unit of information\n  elementUtilities.canHaveUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"simple chemical\" || sbgnclass == \"macromolecule\" || sbgnclass == \"nucleic acid feature\" || sbgnclass == \"complex\" || sbgnclass == \"simple chemical multimer\" || sbgnclass == \"macromolecule multimer\" || sbgnclass == \"nucleic acid feature multimer\" || sbgnclass == \"complex multimer\" || sbgnclass.startsWith(\"BA\") && sbgnclass != \"BA plain\" || sbgnclass == \"compartment\" || sbgnclass == \"SIF macromolecule\" || sbgnclass == \"SIF simple chemical\" || sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\" || sbgnclass == \"complex sbml\" || sbgnclass == \"complex sbml multimer\" || sbgnclass == \"active complex sbml\" || sbgnclass == \"hypothetical complex sbml\" || sbgnclass == \"active complex sbml multimer\" || sbgnclass == \"hypothetical complex sbml multimer\" || sbgnclass == \"active hypothetical complex sbml\" || sbgnclass == \"active hypothetical complex sbml multimer\" || sbgnclass == \"gene\" || sbgnclass == \"gene multimer\" || sbgnclass == \"hypothetical gene\" || sbgnclass == \"hypothetical gene multimer\" || sbgnclass == \"rna\" || sbgnclass == \"rna multimer\" || sbgnclass == \"hypothetical rna\" || sbgnclass == \"hypothetical rna multimer\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"phenotype sbml multimer\" || sbgnclass == \"hypothetical phenotype sbml\" || sbgnclass == \"hypothetical phenotype sbml multimer\" || sbgnclass == \"ion\" || sbgnclass == \"ion multimer\" || sbgnclass == \"hypothetical ion\" || sbgnclass == \"hypothetical ion multimer\" || sbgnclass == \"simple molecule\" || sbgnclass == \"simple molecule multimer\" || sbgnclass == \"hypothetical simple molecule\" || sbgnclass == \"hypothetical simple molecule multimer\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"unknown molecule multimer\" || sbgnclass == \"hypothetical unknown molecule\" || sbgnclass == \"hypothetical unknown molecule multimer\" || sbgnclass == \"drug\" || sbgnclass == \"drug multimer\" || sbgnclass == \"hypothetical drug\" || sbgnclass == \"hypothetical drug multimer\" || sbgnclass == \"degradation\" || sbgnclass == \"degradation multimer\" || sbgnclass == \"hypothetical degradation\" || sbgnclass == \"hypothetical degradation multimer\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given element can have more than one units of information\n  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"gene\" || sbgnclass == \"rna\" || sbgnclass == \"simple molecule\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"drug\" || sbgnclass == \"protein\" || sbgnclass == \"truncated protein\" || sbgnclass == \"ion channel\" || sbgnclass == \"receptor\" || sbgnclass == \"ion\" || sbgnclass == \"empty set\" || sbgnclass == \"complex sbml\") {\n      return false;\n    }\n    return !sbgnclass.startsWith(\"BA\");\n  };\n\n  // Returns whether the given element can have more than one units of information\n  elementUtilities.canHaveOneUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"gene\" || sbgnclass == \"rna\" || sbgnclass == \"simple molecule\" || sbgnclass == \"unknown molecule\" || sbgnclass == \"phenotype sbml\" || sbgnclass == \"drug\" || sbgnclass == \"protein\" || sbgnclass == \"truncated protein\" || sbgnclass == \"ion channel\" || sbgnclass == \"receptor\" || sbgnclass == \"ion\" || sbgnclass == \"degradation\" || sbgnclass == \"complex sbml\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the give element have state variable\n  elementUtilities.canHaveStateVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"macromolecule\" || sbgnclass == \"nucleic acid feature\" || sbgnclass == \"complex\" || sbgnclass == \"macromolecule multimer\" || sbgnclass == \"nucleic acid feature multimer\" || sbgnclass == \"complex multimer\") {\n      return true;\n    }\n    return false;\n  };\n  elementUtilities.canHaveResidueVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\") {\n      return true;\n    }\n    return false;\n  };\n  elementUtilities.canHaveBindingRegion = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    if (sbgnclass == \"protein\" || sbgnclass == \"protein multimer\" || sbgnclass == \"active protein\" || sbgnclass == \"hypothetical protein\" || sbgnclass == \"active protein multimer\" || sbgnclass == \"hypothetical protein multimer\" || sbgnclass == \"active hypothetical protein\" || sbgnclass == \"active hypothetical protein multimer\" || sbgnclass == \"receptor\" || sbgnclass == \"receptor multimer\" || sbgnclass == \"active receptor\" || sbgnclass == \"hypothetical receptor\" || sbgnclass == \"active receptor multimer\" || sbgnclass == \"hypothetical receptor multimer\" || sbgnclass == \"active hypothetical receptor\" || sbgnclass == \"active hypothetical receptor multimer\" || sbgnclass == \"ion channel\" || sbgnclass == \"ion channel multimer\" || sbgnclass == \"active ion channel\" || sbgnclass == \"hypothetical ion channel\" || sbgnclass == \"active ion channel multimer\" || sbgnclass == \"hypothetical ion channel multimer\" || sbgnclass == \"active hypothetical ion channel\" || sbgnclass == \"active hypothetical ion channel multimer\" || sbgnclass == \"truncated protein\" || sbgnclass == \"truncated protein multimer\" || sbgnclass == \"active truncated protein\" || sbgnclass == \"hypothetical truncated protein\" || sbgnclass == \"active truncated protein multimer\" || sbgnclass == \"hypothetical truncated protein multimer\" || sbgnclass == \"active hypothetical truncated protein\" || sbgnclass == \"active hypothetical truncated protein multimer\") {\n      return true;\n    }\n    return false;\n  };\n\n  // Returns whether the given ele should be square in shape\n  elementUtilities.mustBeSquare = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass.indexOf(\"process\") != -1 || sbgnclass == \"empty set\" || sbgnclass == \"and\" || sbgnclass == \"or\" || sbgnclass == \"not\" || sbgnclass == \"unknown logical operator\" || sbgnclass == \"association\" || sbgnclass == \"dissociation\" || sbgnclass == \"delay\";\n  };\n\n  // Returns whether any of the given nodes must not be in square shape\n  elementUtilities.someMustNotBeSquare = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!elementUtilities.mustBeSquare(node.data(\"class\"))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeCloned = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      \"unspecified entity\": true,\n      macromolecule: true,\n      complex: true,\n      \"nucleic acid feature\": true,\n      \"simple chemical\": true,\n      \"perturbing agent\": true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  // Returns whether the gives element can be cloned\n  elementUtilities.canBeMultimer = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({\n      macromolecule: true,\n      complex: true,\n      \"nucleic acid feature\": true,\n      \"simple chemical\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true,\n      gene: true,\n      rna: true,\n      ion: true,\n      \"simple molecule\": true,\n      \"unknown molecule\": true,\n      drug: true\n    }, \"complex\", true), \"phenotype sbml\", true), \"receptor\", true), \"complex sbml\", true), \"protein\", true);\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.canBeActive = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      protein: true,\n      \"complex sbml\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.canBeHypothetical = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      protein: true,\n      \"complex sbml\": true,\n      receptor: true,\n      \"ion channel\": true,\n      \"truncated protein\": true,\n      gene: true,\n      rna: true,\n      \"phenotype sbml\": true,\n      ion: true,\n      \"simple molecule\": true,\n      \"unknown molecule\": true,\n      drug: true,\n      degradation: true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n  elementUtilities.isBiologicalActivity = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);\n  };\n  elementUtilities.isSIFNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifTypes);\n  };\n  elementUtilities.isSIFEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);\n  };\n  elementUtilities.isUndirectedEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);\n  };\n  elementUtilities.isDirectedEdge = function (ele) {\n    return !elementUtilities.isUndirectedEdge(ele);\n  };\n\n  // Returns whether the given element is an EPN\n  elementUtilities.isEPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.epnTypes);\n  };\n\n  // Returns whether the given element is a PN\n  elementUtilities.isPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.processTypes);\n  };\n\n  // Returns wether the given element or string is of the special empty set/empty set class\n  elementUtilities.isEmptySetClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"empty set\";\n  };\n\n  // Returns whether the given element is a logical operator\n  elementUtilities.isLogicalOperator = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);\n  };\n\n  // Returns whether the class of given element is a equivalance class\n  elementUtilities.convenientToEquivalence = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"tag\" || sbgnclass == \"terminal\";\n  };\n  elementUtilities.isLogicArc = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'logic arc';\n  };\n  elementUtilities.isProcessNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"process\" || sbgnclass == \"omitted process\" || sbgnclass == \"uncertain process\" || sbgnclass == \"truncated process\" || sbgnclass == \"association\" || sbgnclass == \"dissociation\";\n  };\n\n  // Returns whether the class of given element is a modulation arc as defined in PD specs\n  elementUtilities.isModulationArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"modulation\" || sbgnclass == \"stimulation\" || sbgnclass == \"catalysis\" || sbgnclass == \"inhibition\" || sbgnclass == \"necessary stimulation\" || sbgnclass == \"unknown catalysis\" || sbgnclass == \"unknown inhibition\" || sbgnclass == \"trigger\";\n  };\n\n  // Returns whether the class of given element is an arc of AF specs except logical arc\n  elementUtilities.isAFArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"positive influence\" || sbgnclass == \"negative influence\" || sbgnclass == \"unknown influence\" || sbgnclass == \"necessary stimulation\";\n  };\n  elementUtilities.isSBMLArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == \"positive influence sbml\" || sbgnclass == \"unknown positive influence\" || sbgnclass == \"unknown negative influence\" || sbgnclass == \"reduced stimulation\" || sbgnclass == \"unknown reduced stimulation\" || sbgnclass == \"reduced modulation\" || sbgnclass == \"unknown reduced modulation\" || sbgnclass == \"reduced trigger\" || sbgnclass == \"unknown reduced trigger\";\n  };\n\n  // Returns whether the given element or elements with the given class can have ports.\n  elementUtilities.canHavePorts = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != \"phenotype\" && sbgnclass != \"delay\" && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));\n  };\n\n  // Section Start\n  // General Element Utilities\n\n  //this method returns the nodes non of whose ancestors is not in given nodes\n  elementUtilities.getTopMostNodes = function (nodes) {\n    var nodesMap = {};\n    for (var i = 0; i < nodes.length; i++) {\n      nodesMap[nodes[i].id()] = true;\n    }\n    var roots = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      var parent = ele.parent()[0];\n      while (parent != null) {\n        if (nodesMap[parent.id()]) {\n          return false;\n        }\n        parent = parent.parent()[0];\n      }\n      return true;\n    });\n    return roots;\n  };\n\n  //This method checks if all of the given nodes have the same parent assuming that the size\n  //of  nodes is not 0\n  elementUtilities.allHaveTheSameParent = function (nodes) {\n    if (nodes.length == 0) {\n      return true;\n    }\n    var parent = nodes[0].data(\"parent\");\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (node.data(\"parent\") != parent) {\n        return false;\n      }\n    }\n    return true;\n  };\n  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {\n    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);\n    for (var i = 0; i < topMostNodes.length; i++) {\n      var node = topMostNodes[i];\n      var oldX = node.position(\"x\");\n      var oldY = node.position(\"y\");\n      node.position({\n        x: oldX + positionDiff.x,\n        y: oldY + positionDiff.y\n      });\n      var children = node.children();\n      this.moveNodes(positionDiff, children, true);\n    }\n  };\n  elementUtilities.convertToModelPosition = function (renderedPosition) {\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    var x = (renderedPosition.x - pan.x) / zoom;\n    var y = (renderedPosition.y - pan.y) / zoom;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {\n    pan = pan || cy.pan();\n    zoom = zoom || cy.zoom();\n    var res = {};\n    [\"x\", \"y\"].forEach(function (dim) {\n      res[dim] = modelPos[dim] * zoom + pan[dim];\n    });\n    return res;\n  };\n\n  // Section End\n  // General Element Utilities\n\n  // Section Start\n  // Element Filtering Utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.getProcessesOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    selectedEles = this.extendNodeList(selectedEles);\n    return selectedEles;\n  };\n  elementUtilities.getNeighboursOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);\n    return elesToHighlight;\n  };\n  elementUtilities.getNeighboursOfNodes = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    nodes = nodes.add(nodes.parents(\"node[class^='complex']\"));\n    nodes = nodes.add(nodes.descendants());\n    var neighborhoodEles = nodes.neighborhood();\n    var elesToReturn = nodes.add(neighborhoodEles);\n    elesToReturn = elesToReturn.add(elesToReturn.descendants());\n    return elesToReturn;\n  };\n  elementUtilities.extendNodeList = function (nodesToShow) {\n    var self = this;\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants());\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.parents());\n    //add complex children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n\n    // var processes = nodesToShow.nodes(\"node[class='process']\");\n    // var nonProcesses = nodesToShow.nodes(\"node[class!='process']\");\n    // var neighborProcesses = nonProcesses.neighborhood(\"node[class='process']\");\n\n    extendNodeTypes = [\"process\", \"omitted process\", \"uncertain process\", \"truncated process\", \"association\", \"dissociation\", \"phenotype\", \"and\", \"or\", \"not\", \"delay\", \"unknown logical operator\"];\n\n    //Here, logical operators are also considered as processes, since they also get inputs and outputs\n    var processes = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var nonProcesses = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    //For AF support, subject to change\n    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(\":hidden\")).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    nodesToShow = nodesToShow.add(processes.neighborhood());\n    nodesToShow = nodesToShow.add(neighborProcesses);\n    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());\n    nodesToShow = nodesToShow.add(neighborNonProcesses);\n    neighborProcesses.neighborhood().forEach(function (ele) {\n      if (inArray(ele._private.data[\"class\"], extendNodeTypes)) {\n        nodesToShow = nodesToShow.add(ele.neighborhood());\n      }\n    });\n\n    //add parents\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents());\n    //add children\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n    return nodesToShow;\n  };\n  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {\n    nodesToFilter = this.extendNodeList(nodesToFilter);\n    var nodesToShow = allNodes.not(nodesToFilter);\n    nodesToShow = this.extendNodeList(nodesToShow);\n    return nodesToShow;\n  };\n  elementUtilities.getProcessesOfNodes = function (nodes) {\n    return this.extendNodeList(nodes);\n  };\n\n  // general utilities\n\n  elementUtilities.noneIsNotHighlighted = function () {\n    var viewUtilities = cy.viewUtilities(\"get\");\n    var highlightClasses = viewUtilities.getAllHighlightClasses();\n    for (var i = 0; i < highlightClasses.length; i++) {\n      if (cy.$(\".\" + highlightClasses[i]).is(\":visible\")) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Section End\n  // Element Filtering Utilities\n\n  // Section Start\n  // Add remove utilities\n\n  // SBGN specific utilities\n\n  elementUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes();\n    cy.elements().unselect();\n    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);\n    var nodesNotToKeep = allNodes.not(nodesToKeep);\n    return nodesNotToKeep.remove();\n  };\n  elementUtilities.deleteElesSimple = function (eles) {\n    cy.elements().unselect();\n    return eles.remove();\n  };\n\n  // general utilities\n\n  elementUtilities.restoreEles = function (eles) {\n    eles.restore();\n    return eles;\n  };\n\n  // Section End\n  // Add remove utilities\n\n  // Section Start\n  // Stylesheet helpers\n\n  // SBGN specific utilities\n\n  elementUtilities.getArrayLineStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    switch (sbgnclass) {\n      case \"controls-expression-of\":\n      case \"upregulates-expression\":\n      case \"downregulates-expression\":\n      case \"unknown inhibition\":\n      case \"unknown catalysis\":\n      case \"transcription consumption\":\n      case \"transcription production\":\n      case \"translation consumption\":\n      case \"translation production\":\n      case \"unknown negative influence\":\n      case \"unknown positive influence\":\n      case \"unknown reduced stimulation\":\n      case \"unknown reduced modulation\":\n      case \"unknown reduced trigger\":\n        return \"dashed\";\n      default:\n        return \"solid\";\n    }\n  };\n  elementUtilities.getArrayLineDashStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    switch (sbgnclass) {\n      case \"transcription consumption\":\n      case \"transcription production\":\n        return [20, 10, 2, 5, 2, 10];\n      case \"translation consumption\":\n      case \"translation production\":\n        return [15, 7, 2, 7];\n      default:\n        return [6, 3];\n    }\n  };\n  elementUtilities.getCyShape = function (ele) {\n    var _class = ele.data(\"class\");\n    // Get rid of rectangle postfix to have the actual node class\n    if (_class.endsWith(\" multimer\")) {\n      _class = _class.replace(\" multimer\", \"\");\n    }\n    if (_class.startsWith(\"active \")) {\n      _class = _class.replace(\"active \", \"\");\n    }\n    if (_class.includes(\"hypothetical\")) {\n      _class = _class.replace(\"hypothetical \", \"\");\n    }\n    if (_class == \"compartment\") {\n      return \"compartment\";\n    }\n    if (_class == \"phenotype\") {\n      return \"hexagon\";\n    }\n    if (_class == \"perturbing agent\" || _class == \"tag\") {\n      return \"polygon\";\n    }\n    if (_class == \"SIF macromolecule\") {\n      return \"macromolecule\";\n    }\n    if (_class == \"SIF simple chemical\") {\n      return \"simple chemical\";\n    }\n    if (_class.startsWith(\"BA\")) {\n      return \"biological activity\";\n    }\n    if (_class == \"submap\" || _class == \"topology group\") {\n      return \"rectangle\";\n    }\n\n    // We need to define new node shapes with their class names for these nodes\n    if (_class == \"empty set\" || _class == \"nucleic acid feature\" || _class == \"macromolecule\" || _class == \"simple chemical\" || _class == \"complex\" || _class == \"biological activity\" || _class == \"cule\" || _class == \"gene\" || _class == \"unknown molecule\" || _class == \"drug\" || _class == \"ion\" || _class == \"truncated protein\" || _class == \"ion channel\" || _class == \"rna\" || _class == \"simple molecule\" || _class == \"phenotype sbml\" || _class == \"receptor\" || _class == \"complex sbml\" || _class == \"protein\" || _class == \"degradation\") {\n      return _class;\n    }\n\n    // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles\n    // conditionally.\n    if (this.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled === true && ele.data(\"ports\").length === 2) {\n        return \"polygon\"; // The node has ports represent it by polygon\n      } else if (_class == \"process\" || _class == \"omitted process\" || _class == \"uncertain process\" || _class == \"truncated process\") {\n        return \"rectangle\"; // If node has no port and has one of these classes it should be in a rectangle shape\n      }\n      return \"ellipse\"; // Other nodes with no port should be in an ellipse shape\n    }\n\n    // The remaining nodes are supposed to be in ellipse shape\n    return \"ellipse\";\n  };\n  elementUtilities.getCyTargetArrowFill = function (ele) {\n    var _class = ele.data(\"class\");\n    if (_class == \"inhibition\" || _class == \"negative influence\" || _class == \"production\" || _class == \"transport\" || _class == \"transcription production\" || _class == \"translation production\" || _class == \"unknown inhibition\" || _class == \"unknown negative influence\" || _class == \"unknown positive influence\" || _class == \"positive influence sbml\" || elementUtilities.isSIFEdge(_class)) {\n      return \"filled\";\n    }\n    return \"hollow\";\n  };\n  elementUtilities.getCyArrowShape = function (ele) {\n    var _class = ele.data(\"class\");\n    switch (_class) {\n      case \"necessary stimulation\":\n      case \"trigger\":\n      case \"reduced trigger\":\n      case \"transport\":\n      case \"reduced trigger\":\n      case \"unknown reduced trigger\":\n        return \"triangle-cross\";\n      case \"inhibition\":\n      case \"negative influence\":\n      case \"inhibits\":\n      case \"downregulates-expression\":\n      case \"dephosphorylates\":\n      case \"inhibits-gtpase\":\n      case \"deacetylates\":\n      case \"demethylates\":\n      case \"unknown inhibition\":\n      case \"unknown negative influence\":\n        return \"tee\";\n      case \"catalysis\":\n      case \"unknown catalysis\":\n        return \"circle\";\n      case \"stimulation\":\n      case \"production\":\n      case \"positive influence\":\n      case \"activates\":\n      case \"phosphorylates\":\n      case \"upregulates-expression\":\n      case \"controls-state-change-of\":\n      case \"chemical-affects\":\n      case \"controls-transport-of\":\n      case \"controls-phosphorylation-of\":\n      case \"controls-expression-of\":\n      case \"catalysis-precedes\":\n      case \"consumption-controled-by\":\n      case \"controls-production-of\":\n      case \"controls-transport-of-chemical\":\n      case \"used-to-produce\":\n      case \"activates-gtpase\":\n      case \"acetylates\":\n      case \"methylates\":\n      case \"transcription production\":\n      case \"translation production\":\n      case \"reduced stimulation\":\n      case \"unknown reduced stimulation\":\n        return \"triangle\";\n      case \"positive influence sbml\":\n      case \"unknown positive influence\":\n        return \"vee\";\n      case \"modulation\":\n      case \"unknown influence\":\n      case \"reduced modulation\":\n      case \"unknown reduced modulation\":\n        return \"diamond\";\n      default:\n        return \"none\";\n    }\n  };\n  elementUtilities.getElementContent = function (ele) {\n    var _language = ele.data(\"language\");\n    var _class = ele.data(\"class\");\n    if (_class.endsWith(\" multimer\")) {\n      _class = _class.replace(\" multimer\", \"\");\n    }\n    if (_class.startsWith(\"active \")) {\n      _class = _class.replace(\"active \", \"\");\n    }\n    if (_class.includes(\"hypothetical\")) {\n      _class = _class.replace(\"hypothetical \", \"\");\n    }\n    var content = \"\";\n    if (_class == \"macromolecule\" || _class == \"simple chemical\" || _class == \"phenotype\" || _class == \"unspecified entity\" || _class == \"nucleic acid feature\" || _class == \"perturbing agent\" || _class == \"tag\" || _class == \"biological activity\" || _class.startsWith(\"BA\") || _class == \"submap\" || _class == \"SIF macromolecule\" || _class == \"SIF simple chemical\" || _class == \"protein\" || _class == \"receptor\" || _class == \"truncated protein\" || _class == \"ion channel\" || _class == \"complex sbml\" || _class == \"gene\" || _class == \"rna\" || _class == \"simple molecule\" || _class == \"unknown molecule\" || _class == \"phenotype sbml\" || _class == \"drug\" || _class == \"ion\") {\n      content = ele.data(\"label\") ? ele.data(\"label\") : \"\";\n    } else if (_class == \"compartment\") {\n      content = ele.data(\"label\") ? ele.data(\"label\") : \"\";\n    } else if (_class == \"complex\") {\n      if (ele.children().length == 0 || options.showComplexName) {\n        if (ele.data(\"label\")) {\n          content = ele.data(\"label\");\n        } else if (ele.data(\"infoLabel\")) {\n          content = ele.data(\"infoLabel\");\n        } else {\n          content = \"\";\n        }\n      } else {\n        content = \"\";\n      }\n    } else if (_class == \"and\") {\n      content = \"AND\";\n    } else if (_class == \"or\") {\n      content = \"OR\";\n    } else if (_class == \"not\") {\n      content = \"NOT\";\n    } else if (_class == \"unknown logical operator\") {\n      content = \"?\";\n    } else if (_class == \"omitted process\") {\n      if (_language == \"PD\") content = \"\\\\\\\\\";else content = \"//\";\n    } else if (_class == \"uncertain process\") {\n      content = \"?\";\n    } else if (_class == \"truncated process\") {\n      content = \"N\";\n    } else if (_class == \"dissociation\") {\n      content = \"o\";\n    } else if (_class == \"delay\") {\n      content = \"\\u03C4\"; // tau\n    }\n    var textWidth = ele.outerWidth() || ele.data(\"bbox\").w;\n    var textProp = {\n      label: content,\n      width: _class == \"perturbing agent\" ? textWidth / 2 : textWidth\n    };\n    return textProp.label;\n  };\n  elementUtilities.getLabelTextSize = function (ele) {\n    var _class = ele.data(\"class\");\n    // These types of nodes cannot have label but this is statement is needed as a workaround\n    if (_class === \"association\") {\n      return 20;\n    }\n    if (this.canHavePorts(_class)) {\n      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators\n\n      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes\n      if (_class === \"dissociation\") {\n        coeff = 2;\n      } else if (_class.endsWith(\"process\")) {\n        coeff = 1.5;\n      }\n      var ports = ele.data(\"ports\");\n      if (graphUtilities.portsEnabled === true && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? \"vertical\" : \"horizontal\";\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === \"vertical\" ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)\n      }\n      return this.getDynamicLabelTextSize(ele, coeff);\n    }\n    if (_class === \"delay\") {\n      return this.getDynamicLabelTextSize(ele, 2);\n    }\n    return this.getDynamicLabelTextSize(ele);\n  };\n  elementUtilities.getStateVarShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveStateVariable(ele)) {\n      return null;\n    }\n    return [\"stadium\"];\n  };\n  elementUtilities.getResidueShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveResidueVariable(ele)) {\n      return null;\n    }\n    return [\"stadium\"];\n  };\n  elementUtilities.getBindingRegionShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveBindingRegion(ele)) {\n      return null;\n    }\n    return [\"rectangle\"];\n  };\n  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {\n    var type = elementUtilities.getPureSbgnClass(ele);\n    if (!elementUtilities.canHaveUnitOfInformation(type)) {\n      return null;\n    }\n    var opts = null;\n    if (elementUtilities.isSIFNode(type)) {\n      opts = [\"rectangle\", \"stadium\"];\n    } else if (elementUtilities.isBiologicalActivity(type)) {\n      switch (type) {\n        case \"BA macromolecule\":\n          opts = [\"roundrectangle\"];\n          break;\n        case \"BA nucleic acid feature\":\n          opts = [\"bottomroundrectangle\"];\n          break;\n        case \"BA unspecified entity\":\n          opts = [\"ellipse\"];\n          break;\n        case \"BA complex\":\n          opts = [\"complex\"];\n          break;\n        case \"BA perturbing agent\":\n          opts = [\"perturbing agent\"];\n          break;\n        case \"BA simple chemical\":\n          opts = [\"stadium\"];\n          break;\n        default:\n          break;\n      }\n    } else {\n      opts = [\"rectangle\"];\n    }\n    return opts;\n  };\n  elementUtilities.getCardinalityDistance = function (ele) {\n    var srcPos = ele.source().position();\n    var tgtPos = ele.target().position();\n    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));\n    return distance * 0.25;\n  };\n  elementUtilities.getInfoLabel = function (node) {\n    /* Info label of a collapsed node cannot be changed if\r\n     * the node is collapsed return the already existing info label of it\r\n     */\n    if (node._private.data.collapsedChildren != null) {\n      return node._private.data.infoLabel;\n    }\n\n    /*\r\n     * If the node is simple then it's infolabel is equal to it's label\r\n     */\n    if (node.children() == null || node.children().length == 0) {\n      return node._private.data.label;\n    }\n    var children = node.children();\n    var infoLabel = \"\";\n    /*\r\n     * Get the info label of the given node by it's children info recursively\r\n     */\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      var childInfo = this.getInfoLabel(child);\n      if (childInfo == null || childInfo == \"\") {\n        continue;\n      }\n      if (infoLabel != \"\") {\n        infoLabel += \":\";\n      }\n      infoLabel += childInfo;\n    }\n\n    //return info label\n    return infoLabel;\n  };\n  elementUtilities.getQtipContent = function (node) {\n    /* Check the label of the node if it is not valid\r\n     * then check the infolabel if it is also not valid do not show qtip\r\n     */\n    var label = node.data(\"label\");\n    if (label == null || label == \"\") {\n      label = this.getInfoLabel(node);\n    }\n    if (label == null || label == \"\") {\n      return;\n    }\n    var contentHtml = \"<b style='text-align:center;font-size:16px;'>\" + label + \"</b>\";\n    var statesandinfos = node._private.data.statesandinfos;\n    for (var i = 0; i < statesandinfos.length; i++) {\n      var sbgnstateandinfo = statesandinfos[i];\n      if (sbgnstateandinfo.clazz == \"state variable\") {\n        var value = sbgnstateandinfo.state.value;\n        var variable = sbgnstateandinfo.state.variable;\n        var stateLabel = variable == null /*|| typeof stateVariable === undefined */ ? value : value + \"@\" + variable;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"unit of information\") {\n        var stateLabel = sbgnstateandinfo.label.text;\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"residue variable\") {\n        var variable = sbgnstateandinfo.residue.variable;\n        var residueLabel = variable;\n        if (residueLabel == null) {\n          residueLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + residueLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"binding region\") {\n        var variable = sbgnstateandinfo.region.variable;\n        var regionLabel = variable;\n        if (regionLabel == null) {\n          regionLabel = \"\";\n        }\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + regionLabel + \"</div>\";\n      }\n    }\n    return contentHtml;\n  };\n\n  // general utilities\n\n  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {\n    var map = {\n      small: 0.75,\n      regular: 1,\n      large: 1.25\n    };\n    return map[dynamicLabelSize];\n  };\n  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {\n    var sbgnclass, h;\n\n    // ele can either be node itself or an object that has class and height fields\n    if (ele.isNode && ele.isNode()) {\n      sbgnclass = ele.data(\"class\");\n      h = ele.height();\n    } else {\n      sbgnclass = ele[\"class\"];\n      h = ele[\"height\"];\n    }\n    var dynamicLabelSize = options.dynamicLabelSize;\n    dynamicLabelSize = typeof dynamicLabelSize === \"function\" ? dynamicLabelSize.call() : dynamicLabelSize;\n    if (dynamicLabelSizeCoefficient === undefined) {\n      if (dynamicLabelSize == \"small\") {\n        if (sbgnclass.startsWith(\"complex\")) return 10;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 12;\n      } else if (dynamicLabelSize == \"regular\") {\n        if (sbgnclass.startsWith(\"complex\")) return 11;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 14;\n      } else if (dynamicLabelSize == \"large\") {\n        if (sbgnclass.startsWith(\"complex\")) return 12;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 16;\n      }\n      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n    }\n    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;\n    return textHeight;\n  };\n\n  /*\r\n   * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.\r\n   */\n  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {\n    var portId = sourceOrTarget === \"source\" ? edge.data(\"portsource\") : edge.data(\"porttarget\");\n    if (portId == null || !graphUtilities.portsEnabled) {\n      return \"outside-to-node\"; // If there is no portsource return the default value which is 'outside-to-node'\n    }\n    var endNode = sourceOrTarget === \"source\" ? edge.source() : edge.target();\n    var ports = endNode.data(\"ports\");\n    var port;\n    for (var i = 0; i < ports.length; i++) {\n      if (ports[i].id === portId) {\n        port = ports[i];\n      }\n    }\n    if (port === undefined) {\n      return \"outside-to-node\"; // If port is not found return the default value which is 'outside-to-node'\n    }\n    var x, y;\n    // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center\n    if (port.x != 0) {\n      x = Math.sign(port.x) * 50;\n      y = 0;\n    } else {\n      x = 0;\n      y = Math.sign(port.y) * 50;\n    }\n    return \"\" + x + \"% \" + y + \"%\";\n  };\n\n  /*\r\n   * Return ordering of ports of a node.\r\n   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'\r\n   */\n  elementUtilities.getPortsOrdering = function (node) {\n    // Return the cached portsordering if exists\n    if (node.data(\"portsordering\")) {\n      return node.data(\"portsordering\");\n    }\n    var ports = node.data(\"ports\");\n    if (ports.length !== 2) {\n      node.data(\"portsordering\", \"none\"); // Cache the ports ordering\n      return \"none\"; // Nodes are supposed to have 2 nodes or none\n    }\n\n    /*\r\n     * Retursn if the given portId is porttarget of any of the given edges.\r\n     * These edges are expected to be the edges connected to the node associated with that port.\r\n     */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"porttarget\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.\n    var orientation = ports[0].x === 0 ? \"vertical\" : \"horizontal\";\n    // We need the connected edges of the node to find out if a port is an input port or an output port\n    var connectedEdges = node.connectedEdges();\n    var portsordering;\n    if (orientation === \"horizontal\") {\n      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative\n      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'\n      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {\n        portsordering = \"L-to-R\";\n      } else {\n        portsordering = \"R-to-L\";\n      }\n    } else {\n      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative\n      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'\n      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {\n        portsordering = \"T-to-B\";\n      } else {\n        portsordering = \"B-to-T\";\n      }\n    }\n\n    // Cache the portsordering and return it.\n    node.data(\"portsordering\", portsordering);\n    return portsordering;\n  };\n\n  /*\r\n   * Sets the ordering of the given nodes.\r\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\r\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\r\n   * used to set the distance between the node center and the ports. The default port distance is 60.\r\n   */\n  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    /*\r\n     * Returns if the given portId is porttarget of any of the given edges.\r\n     * These edges are expected to be the edges connected to the node associated with that port.\r\n     */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"porttarget\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /*\r\n     * Returns if the given portId is portsource of any of the given edges.\r\n     * These edges are expected to be the edges connected to the node associated with that port.\r\n     */\n    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data(\"portsource\") === portId) {\n          return true;\n        }\n      }\n      return false;\n    };\n    portDistance = portDistance ? portDistance : 70; // The default port distance is 60\n\n    cy.startBatch();\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node\n\n      // If the current ordering is already equal to the desired ordering pass this node directly\n      if (ordering === currentOrdering) {\n        continue;\n      }\n      if (ordering === \"none\") {\n        // If the ordering is 'none' remove the ports of the node\n        elementUtilities.removePorts(node);\n      } else if (currentOrdering === \"none\") {\n        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.\n        elementUtilities.addPorts(node, ordering, portDistance);\n      } else {\n        // Else change the ordering by altering node 'ports'\n        var ports = node.data(\"ports\"); // Ports of the node\n        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one\n        var dist = currentOrdering === \"none\" ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);\n        var connectedEdges = node.connectedEdges(); // The edges connected to the node\n        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges\n\n        // Determine the portsource and porttarget\n        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {\n          porttarget = ports[0];\n          portsource = ports[1];\n        } else {\n          porttarget = ports[1];\n          portsource = ports[0];\n        }\n        if (ordering === \"L-to-R\") {\n          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port\n          porttarget.x = -1 * dist;\n          portsource.x = dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === \"R-to-L\") {\n          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port\n          porttarget.x = dist;\n          portsource.x = -1 * dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === \"T-to-B\") {\n          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = -1 * dist;\n          portsource.y = dist;\n        } else {\n          //if ordering is 'B-to-T'\n          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = dist;\n          portsource.y = -1 * dist;\n        }\n      }\n      node.data(\"ports\", ports); // Reset the node ports\n    }\n    nodes.data(\"portsordering\", ordering); // Update the cached orderings of the nodes\n    cy.endBatch();\n  };\n\n  /*\r\n   * Add ports to the given node, with given ordering and port distance.\r\n   */\n  elementUtilities.addPorts = function (node, ordering, portDistance) {\n    var firstPortId = node.id() + \".1\"; // Id of first port\n    var secondPortId = node.id() + \".2\"; // Id of seconf port\n    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one\n    var firstPort = {\n      id: firstPortId\n    };\n    // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one\n    var secondPort = {\n      id: secondPortId\n    };\n\n    // Complete port objects according to ordering\n    if (ordering === \"L-to-R\" || ordering === \"R-to-L\") {\n      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one\n      firstPort.x = -1 * portDistance;\n      secondPort.x = portDistance;\n      firstPort.y = 0;\n      secondPort.y = 0;\n    } else {\n      // If ordering is 'T-to-B' or 'B-to-T'\n      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one\n      firstPort.y = -1 * portDistance;\n      secondPort.y = portDistance;\n      firstPort.x = 0;\n      secondPort.x = 0;\n    }\n    var fromLorT = ordering === \"L-to-R\" || ordering === \"T-to-B\"; // Check if ordering starts from left or top\n    var ports = [firstPort, secondPort]; // Ports array for the node\n    var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n    cy.startBatch();\n    node.data(\"ports\", ports);\n\n    // Reset the portsource and porttarget for each edge connected to the node\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      var edgeClass = edge.data(\"class\");\n      /*\r\n       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)\r\n       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.\r\n       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,\r\n       * else it is vice versa.\r\n       *\r\n       */\n      if (edge.data(\"target\") === node.id()) {\n        if (edgeClass === \"production\" || this.isModulationArcClass(edgeClass)) {\n          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)\n        }\n        if (fromLorT) {\n          edge.data(\"porttarget\", firstPortId);\n        } else {\n          edge.data(\"porttarget\", secondPortId);\n        }\n      } else {\n        if (edgeClass === \"consumption\") {\n          continue; // consumpiton edge cannot be connected to any port of source node\n        }\n        if (fromLorT) {\n          edge.data(\"portsource\", secondPortId);\n        } else {\n          edge.data(\"portsource\", firstPortId);\n        }\n      }\n    }\n    cy.endBatch();\n  };\n\n  /*\r\n   * Remove the ports of the given node\r\n   */\n  elementUtilities.removePorts = function (node) {\n    var connectedEdges = node.connectedEdges();\n    var nodeId = node.id();\n    cy.startBatch();\n\n    // Reset portsource or porttarget of the connected edges to the node id\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      if (edge.data(\"source\") === nodeId) {\n        edge.data(\"portsource\", nodeId);\n      } else {\n        edge.data(\"porttarget\", nodeId);\n      }\n    }\n    node.data(\"ports\", []); // Clear ports data\n\n    cy.endBatch();\n  };\n  elementUtilities.changePortsOrientationAfterLayout = function () {\n    //Check all processes and logical operators with ports\n    cy.nodes().forEach(function (ele) {\n      if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\" || ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n        if (ele.data(\"ports\").length === 2) {\n          var bestOrientation = elementUtilities.changePortsOrientation(ele);\n          elementUtilities.setPortsOrdering(ele, bestOrientation);\n          // If improve-flow is checked we do the swaping of simple nodes with each other\n          var improveFlow = options.improveFlow;\n          improveFlow = typeof improveFlow === \"function\" ? improveFlow.call() : improveFlow;\n          if (improveFlow) {\n            elementUtilities.postChangePortsOrientation(ele, bestOrientation);\n          }\n        }\n      }\n    });\n    cy.style().update();\n  };\n\n  /*\r\n   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.\r\n   */\n  elementUtilities.changePortsOrientation = function (ele) {\n    var processId = ele.id();\n    var orientation = {\n      \"L-to-R\": 0,\n      \"R-to-L\": 0,\n      \"T-to-B\": 0,\n      \"B-to-T\": 0\n    };\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\"); // Holds edges who have the input port as a target\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Holds edges who have the output port as a source\n    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports\n    if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\") {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"consumption\") {\n          var source = cy.getElementById(edge.data(\"source\")); //Holds the element from the other side of edge\n          var simple = false; //Checks if it is a simple node - connected with only 1 edge\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"L-to-R\", \"R-to-L\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"T-to-B\", \"B-to-T\", \"y\", simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"production\") {\n          var target = cy.getElementById(edge.data(\"target\"));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"R-to-L\", \"L-to-R\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"B-to-T\", \"T-to-B\", \"y\", simple);\n        }\n      });\n    } else if (ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"logic arc\") {\n          var source = cy.getElementById(edge.data(\"source\"));\n          var simple = false;\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"L-to-R\", \"R-to-L\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, \"T-to-B\", \"B-to-T\", \"y\", simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data(\"class\") === \"modulation\" || edge.data(\"class\") === \"stimulation\" || edge.data(\"class\") === \"catalysis\" || edge.data(\"class\") === \"inhibition\" || edge.data(\"class\") === \"necessary stimulation\" || edge.data(\"class\") === \"logic arc\") {\n          var target = cy.getElementById(edge.data(\"target\"));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"R-to-L\", \"L-to-R\", \"x\", simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, \"B-to-T\", \"T-to-B\", \"y\", simple);\n        }\n      });\n    }\n    //Calculates the best orientation from all orientation scores\n    var bestOrientation = \"L-to-R\";\n    var bestScore = orientation[\"L-to-R\"]; //The score of the best orientation is always positive\n    for (var property in orientation) {\n      if (orientation[property] > bestScore) {\n        bestScore = orientation[property];\n        bestOrientation = property;\n      }\n    }\n    return bestOrientation;\n  };\n\n  /*\r\n   This function calculates the scores for each orientation\r\n   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,\r\n   uncertain process, association, dissociation, logical operator\r\n   @param other - is the other node, and based on its position scores are given to orientations\r\n   @param orientation - holds scores for each orientation\r\n   @param firstOrientation - can be L-to-R or T-to-B\r\n   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)\r\n   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)\r\n   @param simple - checks if 'other' node is simple node (with degree 1)\r\n   */\n  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {\n    var coeff = 0.5;\n    var score = 2;\n    if (simple) score = 1; // If it is a simple node, its score should affect less\n    var nodeWidthOrHeight = 0;\n    if (pos === \"x\") nodeWidthOrHeight = ele.width() / 2;else if (pos === \"y\") nodeWidthOrHeight = ele.height() / 2;\n    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {\n      orientation[firstOrientation] += score;\n      orientation[oppositeOrientation] -= score;\n    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] -= score;\n      orientation[oppositeOrientation] += score;\n    }\n  };\n\n  /*\r\n  After a process is oriented, for each simple node that is on the wrong side of the port,\r\n  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.\r\n  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1\r\n  */\n  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {\n    var processId = ele.id();\n    var inputPort = []; // Holds all simple nodes connected with input port\n    var outputPort = []; // Holds all simple nodes connected with output port\n    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\");\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\");\n    // Checks simple nodes and add them to one of the arrays mentioned above\n    if (ele.data(\"class\") === \"process\" || ele.data(\"class\") === \"omitted process\" || ele.data(\"class\") === \"truncated process\" || ele.data(\"class\") === \"uncertain process\" || ele.data(\"class\") === \"association\" || ele.data(\"class\") === \"dissociation\") {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data(\"source\"));\n        if (!source.isParent()) {\n          if (edge.data(\"class\") === \"consumption\") {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data(\"target\"));\n        if (!target.isParent()) {\n          if (edge.data(\"class\") === \"production\") {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } else if (ele.data(\"class\") === \"and\" || ele.data(\"class\") === \"or\" || ele.data(\"class\") === \"not\" || ele.data(\"class\") === \"unknown logical operator\") {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data(\"source\"));\n        if (!source.isParent()) {\n          if (edge.data(\"class\") === \"logic arc\") {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data(\"target\"));\n        if (!target.isParent()) {\n          if (edge.data(\"class\") === \"modulation\" || edge.data(\"class\") === \"stimulation\" || edge.data(\"class\") === \"catalysis\" || edge.data(\"class\") === \"inhibition\" || edge.data(\"class\") === \"necessary stimulation\" || edge.data(\"class\") === \"logic arc\") {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    }\n    //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side\n    inputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    outputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    notConnectedToPort.sort(function (a, b) {\n      return a.score - b.score;\n    });\n    //First we check for direct swaping between nodes from different ports positioned to the wrong side\n    var minLength = inputPort.length;\n    if (outputPort.length < minLength) minLength = outputPort.length;\n    for (i = 0; i < minLength; i++) {\n      var inputPortEle = inputPort.pop();\n      var outputPortEle = outputPort.pop();\n      //Checks if free nodes belong to the same compound\n      var firstNode = cy.getElementById(inputPortEle.id);\n      var secondNode = cy.getElementById(outputPortEle.id);\n      if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n        continue;\n      }\n      elementUtilities.swapElements(inputPortEle, outputPortEle);\n    }\n    /*\r\n       After that we iterate over each element of effector nodes and see the scores it produces by swaping\r\n       with nodes connected to input or output ports\r\n       */\n    for (i = notConnectedToPort.length - 1; i >= 0; i--) {\n      var effector = notConnectedToPort[i];\n      if (outputPort.length > 0) {\n        var firstOutput = outputPort[outputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstOutput.id);\n        if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstOutput);\n        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);\n        if (firstOutputScore > firstOutput.score) {\n          outputPort.pop();\n        } else elementUtilities.swapElements(effector, firstOutput); //swap back\n      } else if (inputPort.length > 0) {\n        var firstInput = inputPort[inputPort.length - 1];\n        //Checks if free nodes belong to the same compound\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstInput.id);\n        if (firstNode.data(\"parent\") !== secondNode.data(\"parent\")) {\n          continue;\n        }\n        elementUtilities.swapElements(effector, firstInput);\n        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);\n        if (firstInputScore > firstInput.score) {\n          inputPort.pop();\n        } else elementUtilities.swapElements(effector, firstInput);\n      }\n    }\n  };\n\n  /*\r\n   * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays\r\n   * */\n  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {\n    if (other.connectedEdges().length === 1) {\n      var nodeScore;\n      var obj = {};\n      if (connectedTo === \"notConnected\") {\n        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));\n        obj[\"id\"] = other.id();\n        obj[\"score\"] = nodeScore;\n        array.push(obj);\n      } else {\n        if (connectedTo === \"input\") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === \"output\") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);\n        if (nodeScore < 0) {\n          //if it is in the wrong side we add it to the input array\n          obj[\"id\"] = other.id();\n          obj[\"score\"] = nodeScore;\n          array.push(obj);\n        }\n      }\n    }\n  };\n\n  /*\r\n  This function calculates the score of a node based on its position with respect to a process/logical operator\r\n  @param ele - is the node with the ports. It can be process,omitted process,\r\n  uncertain process, association, dissociation, logical operator\r\n  @param other - is the other node, and based on its position score of a node is calculated\r\n  @param orientation - A string which holds current best orientation\r\n  */\n  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {\n    var coeff = 0.5;\n    var score = 1;\n    if (orientation === \"L-to-R\" || orientation === \"R-to-L\") {\n      var nodeWidth = ele.width() / 2;\n      if (other.position(\"x\") < ele.position(\"x\") - nodeWidth) {\n        if (orientation === \"L-to-R\") return score;else if (orientation === \"R-to-L\") return -score;\n      } else if (other.position(\"x\") >= ele.position(\"x\") - nodeWidth && other.position(\"x\") <= ele.position(\"x\") + nodeWidth) {\n        if (orientation === \"L-to-R\") return (ele.position(\"x\") - other.position(\"x\")) / nodeWidth * coeff;else if (orientation === \"R-to-L\") return -(ele.position(\"x\") - other.position(\"x\")) / nodeWidth * coeff;\n      } else if (other.position(\"x\") > ele.position(\"x\") + nodeWidth) {\n        if (orientation === \"L-to-R\") return -score;else if (orientation === \"R-to-L\") return score;\n      }\n    }\n    if (orientation === \"T-to-B\" || orientation === \"B-to-T\") {\n      var nodeHeight = ele.height() / 2;\n      if (other.position(\"y\") < ele.position(\"y\") - nodeHeight) {\n        if (orientation === \"T-to-B\") return score;else if (orientation === \"B-to-T\") return -score;\n      } else if (other.position(\"y\") >= ele.position(\"y\") - nodeHeight && other.position(\"y\") <= ele.position(\"y\") + nodeHeight) {\n        if (orientation === \"T-to-B\") return (ele.position(\"y\") - other.position(\"y\")) / nodeHeight * coeff;else if (orientation === \"B-to-T\") return -(ele.position(\"y\") - other.position(\"y\")) / nodeHeight * coeff;\n      } else if (other.position(\"y\") > ele.position(\"y\") + nodeHeight) {\n        if (orientation === \"T-to-B\") return -score;else if (orientation === \"B-to-T\") return score;\n      }\n    }\n  };\n\n  /*\r\n  Swaps the positions of 2 elements\r\n  */\n  elementUtilities.swapElements = function (firstEle, secondEle) {\n    var firstNode = cy.getElementById(firstEle.id);\n    var secondNode = cy.getElementById(secondEle.id);\n    var tempx = firstNode.position(\"x\");\n    var tempy = firstNode.position(\"y\");\n    firstNode.position(\"x\", secondNode.position(\"x\"));\n    firstNode.position(\"y\", secondNode.position(\"y\"));\n    secondNode.position(\"x\", tempx);\n    secondNode.position(\"y\", tempy);\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexPadding = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var padding = graphUtilities.getCompoundPaddings();\n    padding = padding < 5 ? 5 : padding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele)) {\n      padding += options.extraComplexPadding * 0.5;\n      // if there is something on the bottom side\n\n      if (ele.data(\"auxunitlayouts\") && ele.data(\"auxunitlayouts\").bottom && ele.data(\"auxunitlayouts\").bottom.units.length > 0) {\n        padding += options.extraComplexPadding * 0.5;\n      } else {\n        for (var i = 0; i < ele.data(\"statesandinfos\").length; i++) {\n          var statesandinfos = ele.data(\"statesandinfos\")[i];\n          var thisY = statesandinfos.bbox.y;\n          var thisH = statesandinfos.bbox.h;\n          var parentY = ele.data(\"class\") == \"compartment\" || ele.data(\"class\") == \"complex\" ? ele.data(\"bbox\").y : ele.position().y;\n          var height = ele.data(\"originalH\") ? ele.data(\"originalH\") : ele.height();\n          var parentY2 = Number((parentY + height / 2).toFixed(2));\n          var centerY = Number((thisY + thisH / 2).toFixed(2));\n          if (centerY == parentY2) {\n            padding += options.extraComplexPadding * 0.5;\n            break;\n          }\n        }\n      }\n    }\n    // for the case where the padding is the tightest, we need a bit of extra space\n    // to avoid touching the infoboxes of the complex\n    else {\n      if (ele.data(\"statesandinfos\").length > 0) {\n        padding += 2;\n      }\n    }\n    return padding;\n  };\n\n  // used for handling the variable property of complexes\n  elementUtilities.getComplexMargin = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var margin = -1 * options.extraComplexPadding;\n    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data(\"auxunitlayouts\") &&\n    // check if there is something on the bottom side\n    ele.data(\"auxunitlayouts\").bottom && ele.data(\"auxunitlayouts\").bottom.units.length > 0) {\n      margin -= options.extraComplexPadding * 0.5;\n    }\n    if (ele.css(\"font-size\") == \"14px\") margin -= 2;\n    return margin;\n  };\n\n  // Set clone marker status of given nodes to the given status.\n  elementUtilities.setCloneMarkerStatus = function (node, status) {\n    if (status) node.data(\"clonemarker\", true);else node.removeData(\"clonemarker\");\n    if (node.data(\"class\") !== \"unspecified entity\" && node.data(\"class\") !== \"perturbing agent\") return;\n    var bgObj = {\n      \"background-image\": \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\",\n      \"background-position-x\": \"50%\",\n      \"background-position-y\": \"100%\",\n      \"background-width\": \"100%\",\n      \"background-height\": \"25%\",\n      \"background-fit\": \"none\",\n      \"background-image-opacity\": \"0\"\n    };\n    var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n    var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n    var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n    var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n    var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n    var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n    var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n    if (status) {\n      var index = imgs.indexOf(bgObj[\"background-image\"]);\n      // Already exists; Make opacity non-zero\n      if (index > -1) opacities[index] = node.css(\"background-opacity\");else {\n        imgs.push(bgObj[\"background-image\"]);\n        xPos.push(bgObj[\"background-position-x\"]);\n        yPos.push(bgObj[\"background-position-y\"]);\n        widths.push(bgObj[\"background-width\"]);\n        heights.push(bgObj[\"background-height\"]);\n        fits.push(bgObj[\"background-fit\"]);\n        opacities.push(node.css(\"background-opacity\"));\n      }\n    } else {\n      var index = imgs.indexOf(bgObj[\"background-image\"]);\n      // Already exists; Make opacity zero\n      if (index > -1) opacities[index] = \"0\";\n    }\n    node.data(\"background-image\", imgs.join(\" \"));\n    node.data(\"background-position-x\", xPos.join(\" \"));\n    node.data(\"background-position-y\", yPos.join(\" \"));\n    node.data(\"background-width\", widths.join(\" \"));\n    node.data(\"background-height\", heights.join(\" \"));\n    node.data(\"background-fit\", fits.join(\" \"));\n    node.data(\"background-image-opacity\", opacities.join(\" \"));\n  };\n\n  // Section End\n  // Stylesheet helpers\n\n  var defaultProperties = {};\n  var getDefaultNodeProperties = function getDefaultNodeProperties() {\n    return {\n      \"border-width\": 1.25,\n      \"border-color\": \"#555555\",\n      \"background-color\": \"#ffffff\",\n      \"background-opacity\": 1,\n      \"background-image-opacity\": 1,\n      \"text-wrap\": \"wrap\",\n      \"border-style\": \"solid\"\n    };\n  };\n  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {\n    return {\n      \"line-color\": \"#555555\",\n      width: 1.25\n    };\n  };\n  var getDefaultProcessSize = function getDefaultProcessSize() {\n    return {\n      width: 20,\n      height: 20\n    };\n  };\n  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {\n    return {\n      width: 30,\n      height: 30\n    };\n  };\n  var getDefaultBASize = function getDefaultBASize() {\n    return {\n      width: 60,\n      height: 30\n    };\n  };\n  var defaultSifEdgeColorMap = {\n    \"neighbor-of\": \"#FC002C\",\n    \"interacts-with\": \"#B57261\",\n    \"in-complex-with\": \"#B4987A\",\n    \"controls-state-change-of\": \"#B4E1CD\",\n    \"controls-transport-of\": \"#F0E7C8\",\n    \"controls-phosphorylation-of\": \"#D970A1\",\n    \"catalysis-precedes\": \"#8EC3ED\",\n    \"controls-expression-of\": \"#6A0F30\",\n    \"consumption-controled-by\": \"#A9A9F7\",\n    \"controls-production-of\": \"#2D5207\",\n    \"controls-transport-of-chemical\": \"#3F00FF\",\n    \"chemical-affects\": \"#D95F23\",\n    \"reacts-with\": \"#4E214B\",\n    \"used-to-produce\": \"#FF2F07\",\n    phosphorylates: \"#43A93C\",\n    dephosphorylates: \"#CD4F32\",\n    \"upregulates-expression\": \"#43A93C\",\n    \"downregulates-expression\": \"#CD4F32\",\n    activates: \"#32D849\",\n    inhibits: \"#4886A5\",\n    \"activates-gtpase\": \"#468DE3\",\n    \"inhibits-gtpase\": \"#C364BF\",\n    acetylates: \"#55B1B6\",\n    deacetylates: \"#EE5F78\",\n    methylates: \"#B0B03D\",\n    demethylates: \"#DB6F21\"\n  };\n  var defaultSizeMap = {\n    macromolecule: {\n      width: 60,\n      height: 30\n    },\n    protein: {\n      width: 60,\n      height: 30\n    },\n    \"nucleic acid feature\": {\n      width: 60,\n      height: 30\n    },\n    \"simple chemical\": {\n      width: 30,\n      height: 30\n    },\n    \"empty set\": {\n      width: 22,\n      height: 22\n    },\n    degradation: {\n      width: 22,\n      height: 22\n    },\n    phenotype: {\n      width: 60,\n      height: 30\n    },\n    \"unspecified entity\": {\n      width: 60,\n      height: 30\n    },\n    \"perturbing agent\": {\n      width: 60,\n      height: 30\n    },\n    complex: {\n      width: 44,\n      height: 44\n    },\n    compartment: {\n      width: 80,\n      height: 80\n    },\n    submap: {\n      width: 80,\n      height: 80\n    },\n    tag: {\n      width: 35,\n      height: 35\n    },\n    \"SIF macromolecule\": {\n      width: 60,\n      height: 30\n    },\n    \"SIF simple chemical\": {\n      width: 30,\n      height: 30\n    },\n    \"topology group\": {\n      width: 44,\n      height: 44\n    },\n    gene: {\n      width: 50,\n      height: 30\n    },\n    rna: {\n      width: 50,\n      height: 44\n    },\n    \"simple-molecule\": {\n      width: 30,\n      height: 30\n    },\n    \"unknown molecule\": {\n      width: 60,\n      height: 30\n    },\n    ion: {\n      width: 30,\n      height: 30\n    },\n    drug: {\n      width: 60,\n      height: 40\n    },\n    // phenotype: {\n    //   width: 30,\n    //   height: 30,\n    // },\n    \"simple molecule\": {\n      width: 50,\n      height: 40\n    },\n    \"truncated protein\": {\n      width: 60,\n      height: 40\n    },\n    \"ion channel\": {\n      width: 60,\n      height: 40\n    },\n    receptor: {\n      width: 60,\n      height: 40\n    },\n    \"phenotype sbml\": {\n      width: 50,\n      height: 50\n    },\n    \"complex sbml\": {\n      width: 44,\n      height: 44\n    }\n  };\n  elementUtilities.processTypes.forEach(function (type) {\n    // phenotype has a different default size\n    if (type == \"phenotype\") {\n      return;\n    }\n    defaultSizeMap[type] = getDefaultProcessSize();\n  });\n  elementUtilities.logicalOperatorTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultLogicalOperatorSize();\n  });\n  elementUtilities.biologicalActivityTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultBASize();\n  });\n  var getDefaultSize = function getDefaultSize(type) {\n    return defaultSizeMap[type];\n  };\n  var getDefaultFontProperties = function getDefaultFontProperties() {\n    return {\n      \"font-size\": 11,\n      \"font-family\": \"Helvetica\",\n      \"font-style\": \"normal\",\n      \"font-weight\": \"normal\",\n      color: \"#000\"\n    };\n  };\n  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {\n    return {\n      \"font-size\": getDefaultInfoboxFontSize(nodeClass, infoboxType),\n      \"font-family\": \"Arial\",\n      \"font-style\": \"normal\",\n      \"font-weight\": \"normal\",\n      \"font-color\": \"#0f0f0f\",\n      \"border-width\": 1,\n      \"border-style\": \"solid\",\n      \"border-color\": \"#555555\",\n      \"background-color\": \"#ffffff\",\n      \"shape-name\": getDefaultInfoboxShapeName(nodeClass, infoboxType),\n      width: getDefaultInfoboxSize(nodeClass, infoboxType).w,\n      height: getDefaultInfoboxSize(nodeClass, infoboxType).h\n    };\n  };\n  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {\n    var fontsize = 9;\n    if (nodeClass === \"SIF macromolecule\" || nodeClass === \"SIF simple chemical\") {\n      fontsize = 11;\n    }\n    return fontsize;\n  };\n  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {\n    var w = 12,\n      h = 12;\n    if (nodeClass === \"SIF macromolecule\" || nodeClass === \"SIF simple chemical\") {\n      w = 15;\n      h = 15;\n    }\n    return {\n      w: w,\n      h: h\n    };\n  };\n  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {\n    if (infoboxType === \"state variable\" || infoboxType === \"residue variable\") {\n      return \"stadium\";\n    }\n    if (elementUtilities.isSIFNode(nodeClass)) {\n      if (infoboxType === \"unit of information\" || infoboxType === \"binding region\") {\n        if (nodeClass == \"SIF macromolecule\") {\n          return \"stadium\";\n        }\n        return \"rectangle\";\n      }\n    } else {\n      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);\n      return list[0];\n    }\n  };\n  elementUtilities.nodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));\n    if (elementUtilities.canHaveStateVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, \"state variable\");\n      defaultProperties[type][\"state variable\"] = props;\n    }\n    if (elementUtilities.canHaveResidueVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, \"residue variable\");\n      defaultProperties[type][\"residue variable\"] = props;\n    }\n    if (elementUtilities.canHaveBindingRegion(type)) {\n      var props = getDefaultInfoboxProperties(type, \"binding region\");\n      defaultProperties[type][\"binding region\"] = props;\n    }\n    if (elementUtilities.canHaveUnitOfInformation(type)) {\n      var props = getDefaultInfoboxProperties(type, \"unit of information\");\n      defaultProperties[type][\"unit of information\"] = props;\n    }\n  });\n  elementUtilities.compoundNodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend(defaultProperties[type], {\n      \"background-opacity\": 0.5\n    });\n  });\n  $.extend(defaultProperties[\"association\"], {\n    \"background-color\": \"#707070\"\n  });\n  $.extend(defaultProperties[\"unknown molecule\"], {\n    \"background-color\": \"#707070\"\n  });\n  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat([\"phenotype\"]).concat(elementUtilities.sbmlType).forEach(function (type) {\n    $.extend(defaultProperties[type], getDefaultFontProperties());\n  });\n  $.extend(defaultProperties[\"submap\"], {\n    \"font-size\": 14,\n    \"border-width\": 2.25\n  });\n  $.extend(defaultProperties[\"compartment\"], {\n    \"font-size\": 14,\n    \"border-width\": 3.25\n  });\n  elementUtilities.edgeTypes.forEach(function (type) {\n    defaultProperties[type] = getDefaultEdgeProperties();\n    if (defaultSifEdgeColorMap[type]) {\n      defaultProperties[type][\"line-color\"] = defaultSifEdgeColorMap[type];\n    }\n  });\n  function getProp(props, name) {\n    var prop = props[name];\n    if (_typeof(prop) !== null && _typeof(prop) === \"object\") {\n      return $.extend({}, prop);\n    }\n    return prop;\n  }\n  function extendDataWithClassDefaults(data, className, propsToSkip) {\n    if (!className) {\n      return;\n    }\n    var defaultProps = elementUtilities.getDefaultProperties(className);\n    Object.keys(defaultProps).forEach(function (name) {\n      if (!propsToSkip || !propsToSkip[name]) {\n        data[name] = getProp(defaultProps, name);\n      }\n    });\n  }\n  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {\n    // list of properties to skip\n    var propsToSkip = {\n      width: true,\n      height: true,\n      \"state variable\": true,\n      \"residue variable\": true,\n      \"binding region\": true,\n      \"unit of information\": true,\n      multimer: true,\n      clonemarker: true,\n      \"ports-ordering\": true,\n      active: true,\n      hypothetical: true\n    };\n    extendDataWithClassDefaults(data, className, propsToSkip);\n  };\n  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {\n    extendDataWithClassDefaults(data, className);\n  };\n\n  // get infobox properties and filter the ones related to style only\n  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {\n    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);\n    var infoboxStyle = $.extend({}, defaultProps[infoboxType]);\n\n    // width and height are belonging to bbox object rather than style object\n    var nonStyleProps = [\"width\", \"height\"];\n    nonStyleProps.forEach(function (propName) {\n      delete infoboxStyle[propName];\n    });\n    return infoboxStyle;\n  };\n  elementUtilities.getDefaultProperties = function (sbgnclass) {\n    if (sbgnclass == undefined) {\n      return defaultProperties;\n    }\n    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass);\n\n    // init default properties for the class if not initialized yet\n    if (defaultProperties[pureClass] == null) {\n      defaultProperties[pureClass] = {};\n    }\n    return defaultProperties[pureClass];\n  };\n  elementUtilities.setDefaultProperties = function (sbgnclass, props) {\n    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);\n  };\n  elementUtilities.lockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = true;\n    if (cy.expandCollapse) {\n      cy.expandCollapse(\"get\").disableCue();\n    }\n  };\n  elementUtilities.unlockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = false;\n    if (cy.expandCollapse) {\n      cy.expandCollapse(\"get\").enableCue();\n    }\n  };\n  elementUtilities.isGraphTopologyLocked = function () {\n    return elementUtilities.graphTopologyLocked;\n  };\n  elementUtilities.languageToMapType = function (lang) {\n    switch (lang) {\n      case \"process description\":\n        return \"PD\";\n      case \"activity flow\":\n        return \"AF\";\n      case \"sif\":\n        return \"SIF\";\n      case \"sbml\":\n        return \"SBML\";\n      case \"hybrid sbgn\":\n        return \"HybridSbgn\";\n      default:\n        return \"HybridAny\";\n    }\n  };\n  elementUtilities.mapTypeToLanguage = function (mapType) {\n    switch (mapType) {\n      case \"PD\":\n        return \"process description\";\n      case \"AF\":\n        return \"activity flow\";\n      case \"SIF\":\n        return \"sif\";\n      case \"SBML\":\n        return \"sbml\";\n      case \"HybridSbgn\":\n        return \"hybrid sbgn\";\n      default:\n        return \"hybrid any\";\n    }\n  };\n  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {\n    var expandCollapse = cy.expandCollapse(\"get\");\n    var collapsedChildren = cy.collection();\n    var collapsedNodes = nodes.filter(\".cy-expand-collapse-collapsed-node\");\n    collapsedNodes.forEach(function (n) {\n      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));\n    });\n    return collapsedChildren;\n  };\n  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {\n    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);\n  };\n  return elementUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  var parsedDataMap;\n  var visibleDataMapByExp;\n  var groupedDataMap;\n  var visibleFiles;\n  var colorMap;\n  var allVis;\n  var fileDescription;\n  var fileTitle;\n  function experimentalDataOverlay(param) {\n    // Init\n    cy = param.sbgnCyInstance.getCy();\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    colorMap = {};\n    allVis = true;\n    fileDescription = {};\n    fileTitle = {};\n  }\n  experimentalDataOverlay.getName = function () {\n    return fname;\n  };\n  experimentalDataOverlay.getDesc = function () {\n    return fdesc;\n  };\n  experimentalDataOverlay.getGroupedDataMap = function () {\n    return groupedDataMap;\n  };\n  experimentalDataOverlay.getParsedDataMap = function () {\n    return parsedDataMap;\n  };\n  experimentalDataOverlay.getVisibleData = function () {\n    return visibleDataMapByExp;\n  };\n  experimentalDataOverlay.hideAll = function () {\n    var invisibleExp = {};\n    var invisibleFile = {};\n    allVis = false;\n    for (var i in groupedDataMap) {\n      if (visibleFiles[i]) {\n        visibleFiles[i] = false;\n        invisibleFile[i] = false;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n          invisibleExp[fileName + '?' + expName] = false;\n          visibleDataMapByExp[fileName + '?' + expName] = false;\n        }\n      }\n    }\n    this.showData();\n    params = {\n      invisibleFile: invisibleFile,\n      invisibleExp: invisibleExp\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {\n    for (var j in invisibleFile) {\n      visibleFiles[j] = true;\n    }\n    for (var _j in invisibleExp) {\n      visibleDataMapByExp[_j] = true;\n    }\n    allVis = true;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.unhideAll = function () {\n    var visibleExp = {};\n    var visibleFile = {};\n    allVis = true;\n    for (var i in visibleFiles) {\n      if (!visibleFiles[i]) {\n        visibleFiles[i] = true;\n        visibleFile[i] = true;\n      }\n    }\n    for (var fileName in groupedDataMap) {\n      if (groupedDataMap[fileName] == undefined) {\n        return;\n      }\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n        if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n          visibleExp[fileName + '?' + expName] = true;\n          visibleDataMapByExp[fileName + '?' + expName] = true;\n        }\n      }\n    }\n    this.showData();\n    return {\n      visibleExp: visibleExp,\n      visibleFile: visibleFile\n    };\n  };\n  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {\n    for (var j in visibleFile) {\n      visibleFiles[j] = false;\n    }\n    for (var _j2 in visibleExp) {\n      visibleDataMapByExp[_j2] = false;\n    }\n    allVis = false;\n    this.showData();\n    return;\n  };\n  experimentalDataOverlay.removeAll = function () {\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i in visibleDataMapByExp) {\n      visible[_i] = visibleDataMapByExp[_i];\n    }\n    for (var _i2 in visibleFiles) {\n      visiblef[_i2] = visibleFiles[_i2];\n    }\n    for (var _i3 in groupedDataMap) {\n      if (!grouped[_i3]) {\n        grouped[_i3] = [];\n      }\n      for (var _j3 in groupedDataMap[_i3]) {\n        grouped[_i3].push(groupedDataMap[_i3][_j3]);\n      }\n    }\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    this.showData();\n    params = {\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    return params;\n  };\n  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {};\n    return param;\n  };\n  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {\n    visibleDataMapByExp[fileName + '?' + expName] = isVisible;\n    groupedDataMap[fileName] = groupArray;\n    for (var i in values) {\n      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];\n    }\n    var params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {\n      fileName: fileName\n    };\n    return param;\n  };\n  experimentalDataOverlay.removeExp = function (fileName, expName) {\n    var isVisible = false;\n    var values = {};\n    var groupArray = [];\n    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {\n      isVisible = visibleDataMapByExp[fileName + '?' + expName];\n      delete visibleDataMapByExp[fileName + '?' + expName];\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      for (var i in groupedDataMap[fileName]) {\n        groupArray[i] = groupedDataMap[fileName][i];\n      }\n      //groupArray = groupedDataMap[fileName];\n      var index = groupedDataMap[fileName].indexOf(expName);\n      if (index != -1) {\n        delete groupedDataMap[fileName][index];\n      }\n    }\n    for (var _i4 in parsedDataMap) {\n      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {\n        if (!(_i4 in values)) {\n          values[_i4] = {};\n        }\n        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];\n        delete parsedDataMap[_i4][fileName + '?' + expName];\n      }\n    }\n    if (groupedDataMap[fileName] != undefined) {\n      var count = 0;\n      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {\n        if (!groupedDataMap[fileName][_i5]) count++;\n      }\n      if (count == groupedDataMap[fileName].length) {\n        delete groupedDataMap[fileName];\n      }\n    }\n    params = {\n      fileName: fileName,\n      expName: expName,\n      isVisible: isVisible,\n      values: values,\n      groupArray: groupArray\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.removeFile = function (fileName) {\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i6 in visibleDataMapByExp) {\n      visible[_i6] = visibleDataMapByExp[_i6];\n    }\n    for (var _i7 in visibleFiles) {\n      visiblef[_i7] = visibleFiles[_i7];\n    }\n    for (var _i8 in groupedDataMap) {\n      if (!grouped[_i8]) {\n        grouped[_i8] = [];\n      }\n      for (var _j4 in groupedDataMap[_i8]) {\n        grouped[_i8].push(groupedDataMap[_i8][_j4]);\n      }\n    }\n    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {\n      var expName = groupedDataMap[fileName][_j5];\n      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];\n      for (var _i9 in parsedDataMap) {\n        delete parsedDataMap[_i9][fileName + '?' + expName];\n      }\n    }\n    delete groupedDataMap[fileName];\n    var params = {\n      fileName: fileName,\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    this.showData();\n    var k = 0;\n    for (var _i10 in groupedDataMap) {\n      k++;\n    }\n    if (k == 0) {\n      groupedDataMap = {};\n    }\n    return params;\n  };\n  experimentalDataOverlay.hideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = false;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.hideFile = function (fileName) {\n    visibleFiles[fileName] = false;\n    var invisible = {};\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n        invisible[fileName + '?' + expName] = false;\n        visibleDataMapByExp[fileName + '?' + expName] = false;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      invisible: invisible\n    };\n    return params;\n  };\n  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {\n    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;\n    for (var j in invisible) {\n      visibleDataMapByExp[j] = true;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.unhideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = true;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.unhideFile = function (fileName) {\n    var visible = {};\n    visibleFiles[fileName] = true;\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n      if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n        visibleDataMapByExp[fileName + '?' + expName] = true;\n        visible[fileName + '?' + expName] = true;\n      }\n    }\n    this.showData();\n    params = {\n      fileName: fileName,\n      visible: visible\n    };\n    return params;\n  };\n  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {\n    visibleFiles[fileName] = false;\n    for (var j in visible) {\n      visibleDataMapByExp[j] = false;\n    }\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n  experimentalDataOverlay.countVisibleDataByExp = function () {\n    // Count the genomic data that will be displayed on nodes' body\n    var dataBoxCount = 0;\n    for (var exp in visibleDataMapByExp) {\n      if (visibleDataMapByExp[exp]) {\n        dataBoxCount++;\n      }\n    }\n    return dataBoxCount;\n  };\n  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {\n    var dataBoxCount = this.countVisibleDataByExp();\n    var values = [];\n    // Experimental data overlay part !\n    // const dataURI = 'data:image/svg+xml;utf8,'\n    var svgNameSpace = 'http://www.w3.org/2000/svg';\n    var nodeLabel = ele.data('label');\n    var reqWidth = ele.outerWidth();\n    var reqHeight = ele.outerHeight();\n    var overlayRecBoxW = reqWidth;\n    var overlayRecBoxH = reqHeight;\n    var svg = document.createElementNS(svgNameSpace, 'svg');\n    // It seems this should be set according to the node size !\n    svg.setAttribute('width', reqWidth);\n    svg.setAttribute('height', reqHeight);\n    // This is important you need to include this to succesfully render in cytoscape.js!\n    svg.setAttribute('xmlns', svgNameSpace);\n\n    // Overlay Data Rect\n    var overLayRectBBox = {\n      w: overlayRecBoxW,\n      h: overlayRecBoxH,\n      x: 0,\n      y: 0\n    };\n    var frequencyData = parsedDataMap[nodeLabel];\n    var maxDataBoxCount = /*(genomicDataBoxCount > 3) ? 3:*/dataBoxCount;\n    var counter = 0;\n    for (var i in groupedDataMap) {\n      for (var j in groupedDataMap[i]) {\n        var fileName = i;\n        var expName = groupedDataMap[i][j];\n        if (!visibleDataMapByExp[fileName + '?' + expName]) {\n          continue;\n        }\n        if (frequencyData[fileName + '?' + expName] !== undefined) {\n          values.push(frequencyData[fileName + '?' + expName]);\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);\n        } else {\n          values.push(\"-\");\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);\n        }\n\n        //  draw separator line between data rectangles\n        if (counter < maxDataBoxCount - 1) {\n          var overlayRect = document.createElementNS(svgNameSpace, 'line');\n          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y1', overLayRectBBox.y);\n          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);\n          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');\n          svg.appendChild(overlayRect);\n        }\n        counter++;\n      }\n    }\n    tooltip.content = \"(\" + values.join(\",\") + \")\";\n    function interpolateColor(color1, color2, factor) {\n      var result = color1.slice();\n      for (var i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n      }\n      return result;\n    }\n    ;\n    function decideColor(percent, fileName) {\n      var sorted = [];\n      for (var _i11 in colorMap[fileName]) {\n        sorted.push(_i11);\n      }\n      sorted.sort();\n      var prev = sorted[0];\n      var next = sorted[sorted.length - 1];\n      if (percent < prev || percent > next) {\n        return {\n          r: 210,\n          g: 210,\n          b: 210\n        };\n      }\n      for (var k in sorted) {\n        var i = sorted[k];\n        if (i == percent) {\n          return {\n            r: colorMap[fileName][i][0],\n            g: colorMap[fileName][i][1],\n            b: colorMap[fileName][i][2]\n          };\n        } else if (i > percent) {\n          next = i;\n          break;\n        } else {\n          prev = i;\n        }\n      }\n      var steps = 1 / (next - prev);\n      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));\n      return {\n        r: res[0],\n        g: res[1],\n        b: res[2]\n      };\n    }\n    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {\n      var colorString = '';\n      if (percent) {\n        var color = decideColor(parseInt(percent), fileName);\n        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')';\n        // Rectangle Part\n        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect.setAttribute('x', x);\n        _overlayRect.setAttribute('y', y);\n        _overlayRect.setAttribute('width', w);\n        _overlayRect.setAttribute('height', h);\n        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect);\n      } else {\n        colorString = 'rgb(210,210,210)';\n\n        // Rectangle Part\n        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');\n        _overlayRect2.setAttribute('x', x);\n        _overlayRect2.setAttribute('y', y);\n        _overlayRect2.setAttribute('width', w);\n        _overlayRect2.setAttribute('height', h);\n        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n        parentSVG.appendChild(_overlayRect2);\n      }\n    }\n    return svg;\n  };\n  experimentalDataOverlay.showData = function () {\n    var self = this;\n    var nodeCollection = cy.collection();\n    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter(\"node\");\n    var collapsedChildrenNotParent = cy.collection();\n    var parentSet = new Set(); // parent ids of collapsed children\n    collapsedChildren.forEach(function (node) {\n      parentSet.add(node.parent().id());\n    });\n    // filter parent nodes from collapsed children\n    collapsedChildren.forEach(function (node) {\n      if (!parentSet.has(node.id())) {\n        // this means removed node is not parent\n        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);\n      }\n    });\n    var expandableNodes = cy.expandCollapse('get').expandableNodes();\n    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);\n    cy.batch(function () {\n      nodeCollection.forEach(function (node) {\n        var nodeLabel = node.data('label');\n        var imageURI = 'data:image/svg+xml;utf8,';\n        if (nodeLabel in parsedDataMap && !node.isParent()) {\n          var tooltip = {\n            content: ''\n          };\n          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);\n          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {\n            // var tooltip = \"(\" + Object.values(parsedDataMap[nodeLabel]).join(\",\") + \")\";\n            node.data(\"tooltip\", tooltip.content);\n          } else {\n            node.data('tooltip', '');\n          }\n          node.data('background-image', imageURI), node.data('background-position-x', '100%');\n          node.data('background-position-y', '100%');\n          node.data('background-width', '100%');\n          node.data('background-height', '100%');\n          node.data('background-fit', 'contain');\n          node.data('background-image-opacity', '1');\n        } else {\n          node.data('background-image', \"\");\n          node.data('tooltip', '');\n        }\n      });\n    });\n  };\n  experimentalDataOverlay.hexToRgb = function (hex) {\n    if (hex[0] == '#') {\n      hex = hex.substring(1);\n    } else {\n      return;\n    }\n    var bigint = parseInt(hex, 16);\n    var r = bigint >> 16 & 255;\n    var g = bigint >> 8 & 255;\n    var b = bigint & 255;\n    return [r, g, b];\n  };\n  experimentalDataOverlay.isHex = function (hex) {\n    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';\n  };\n  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {\n    parsedDataMap = parsedDataMap || {};\n    visibleDataMapByExp = visibleDataMapByExp || {};\n    groupedDataMap = groupedDataMap || {};\n    colorMap = colorMap || {};\n    var experiments = [];\n    var colors = {};\n    if (fileName in groupedDataMap && !sampleExperiment) {\n      return;\n    } else if (fileName in groupedDataMap && sampleExperiment) {\n      this.removeAll();\n    }\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    var colorm = {};\n    var fileD = {};\n    var fileN = {};\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n    for (var _i12 in visibleDataMapByExp) {\n      visible[_i12] = visibleDataMapByExp[_i12];\n    }\n    for (var _i13 in visibleFiles) {\n      visiblef[_i13] = visibleFiles[_i13];\n    }\n    for (var _i14 in groupedDataMap) {\n      if (!grouped[_i14]) {\n        grouped[_i14] = [];\n      }\n      for (var _j6 in groupedDataMap[_i14]) {\n        grouped[_i14].push(groupedDataMap[_i14][_j6]);\n      }\n    }\n    for (var _i15 in colorMap) {\n      colorm[_i15] = colorMap[_i15];\n    }\n    for (var _i16 in visibleFiles) {\n      fileD[_i16] = fileDescription[_i16];\n    }\n    for (var _i17 in visibleFiles) {\n      fileN[_i17] = fileTitle[_i17];\n    }\n    var intregex = \"^(-?)(0|([1-9][0-9]*))(\\\\.[0-9]+)?$\";\n    var version = '1.0';\n    var clr = false;\n    // By lines\n    var lines = data.split('\\n');\n    if (lines.length < 2) {\n      errorCallback();\n      return \"Error\";\n    }\n    var k = 0;\n    var upto = 4;\n    if (lines.length < 4) {\n      upto = lines.length;\n    }\n    for (var _i18 = 0; _i18 < upto; _i18++) {\n      if (lines[_i18].substring(0, 7) == 'version') {\n        k++;\n        var metaLines = lines[_i18].split('\\t');\n        if (metaLines[1] && metaLines[1].length > 1) {\n          version = metaLines[1];\n        } else {\n          fileDescription = fileD;\n          fileTitle = fileN;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 4) == 'name') {\n        k++;\n        var _metaLines = lines[_i18].split('\\t');\n        if (_metaLines[1] && _metaLines[1].length > 1) {\n          fileTitle[fileName] = _metaLines[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 11) == 'description') {\n        k++;\n        var _metaLines2 = lines[_i18].split('\\t');\n        if (_metaLines2[1] && _metaLines2[1].length > 1) {\n          fileDescription[fileName] = _metaLines2[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n      if (lines[_i18].substring(0, 5) == 'color') {\n        clr = true;\n        k++;\n        var _metaLines3 = lines[_i18].split('\\t');\n        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {\n          errorCallback();\n          return \"Error\";\n        }\n        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {\n          var hex = _metaLines3[t + 1];\n          if (t == _metaLines3.length - 2) {\n            hex = hex.trim();\n          }\n          if (_metaLines3[t] == \"min\" || _metaLines3[t] == \"max\") {\n            if (this.isHex(hex)) {\n              colors[_metaLines3[t]] = this.hexToRgb(hex);\n            }\n          } else if (parseInt(_metaLines3[t]) != NaN) {\n            if (this.isHex(hex)) {\n              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);\n            } else {\n              fileTitle = fileN;\n              fileDescription = fileD;\n              colorMap = colorm;\n              version = \"1.0\";\n              errorCallback();\n              return \"Error\";\n            }\n          } else {\n            fileTitle = fileN;\n            fileDescription = fileD;\n            colorMap = colorm;\n            version = \"1.0\";\n            errorCallback();\n            return \"Error\";\n          }\n        }\n      }\n    }\n\n    //default colors\n    if (!clr) {\n      colors[-100] = this.hexToRgb('#0000ff');\n      colors[100] = this.hexToRgb('#ff0000');\n      colors[0] = this.hexToRgb('#ffffff');\n    }\n\n    // First line is meta data !\n    var metaLineColumns = lines[k].split('\\t');\n\n    // Parse experiment types\n    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {\n      if (_i19 == metaLineColumns.length - 1) {\n        var trimmed = metaLineColumns[_i19].trim();\n        experiments.push(trimmed);\n      } else experiments.push(metaLineColumns[_i19]);\n      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;\n      if (groupedDataMap[fileName] === undefined) {\n        groupedDataMap[fileName] = [];\n      }\n      groupedDataMap[fileName].push(experiments[_i19 - 1]);\n    }\n    visibleFiles[fileName] = true;\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE;\n\n    // parse genomic data\n    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {\n      // EOF check\n      if (lines[_i20].length === 0) {\n        break;\n      }\n      // Split each line by tab and parse genomic data content\n      var lineContent = lines[_i20].split('\\t');\n      var eleSymbol = lineContent[0];\n\n      // If current gene entry is not  in genomic data map create new map\n      if (!(eleSymbol in parsedDataMap)) {\n        parsedDataMap[eleSymbol] = {};\n      }\n\n      // Add each entry of genomic data\n      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {\n        if (_j7 == lineContent.length - 1) {\n          lineContent[_j7] = lineContent[_j7].trim();\n        }\n        if (lineContent[_j7].match(intregex)) {\n          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];\n        } else {\n          parsedDataMap = parsed;\n          visibleDataMapByExp = visible;\n          groupedDataMap = grouped;\n          colorMap = colorm;\n          visibleFiles = visiblef;\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          errorCallback();\n          return \"Error\";\n        }\n        if (lineContent[_j7] > max) {\n          max = lineContent[_j7];\n        }\n        if (lineContent[_j7] < min) {\n          min = lineContent[_j7];\n        }\n      }\n    }\n    if (colors['min']) {\n      var colorvalue = colors['min'];\n      delete colors['min'];\n      colors[min] = colorvalue;\n    }\n    if (colors['max']) {\n      var colorvalue = colors['max'];\n      delete colors['max'];\n      colors[max] = colorvalue;\n    }\n    colorMap[fileName] = colors;\n    var params = {\n      fileName: fileName\n    };\n    this.showData();\n    return params;\n  };\n  experimentalDataOverlay.getExperimentalData = function () {\n    return {\n      visibleDataMapByExp: visibleDataMapByExp,\n      visibleFiles: visibleFiles,\n      fileDescription: fileDescription,\n      allVis: allVis,\n      fileTitle: fileTitle,\n      parsedDataMap: parsedDataMap\n    };\n  };\n  return experimentalDataOverlay;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/experimental-data-overlay.js\n");

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/*\r\n* File Utilities: To be used on read/write file operation\r\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar saveAs = libs.saveAs;\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  // Helper functions Start\n  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n  function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n  function loadTextDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/text');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseText;\n  }\n  function loadXMLDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhttp.overrideMimeType('application/xml');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseXML;\n  }\n\n  // Should this be exposed or should this be moved to the helper functions section?\n  function textToXmlObject(text) {\n    if (window.ActiveXObject) {\n      var doc = new ActiveXObject('Microsoft.XMLDOM');\n      doc.async = 'false';\n      doc.loadXML(text);\n    } else {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(text, 'text/xml');\n    }\n    return doc;\n  }\n  // Helper functions End\n\n  var sbgnmlToJson, sbmlToJson, jsonToSbgnml, jsonToSbml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml;\n  var updateGraph;\n  var options, cy;\n  function fileUtilities(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToSbml = param.jsonToSbmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    jsonToSif = param.jsonToSifConverter;\n    uiUtilities = param.uiUtilities;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    layoutToText = param.layoutToText;\n    graphUtilities = param.graphUtilities;\n    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n    sbgnmlToCd = param.sbgnmlToCdConverter;\n    cdToSbgnml = param.cdToSbgnmlConverter;\n    sbgnmlToSbml = param.sbgnmlToSbmlConverter;\n    sbmlToSbgnml = param.sbmlToSbgnmlConverter;\n    gpmlToSbgnml = param.gpmlToSbgnmlConverter;\n    sbgnmlToGpml = param.sbgnmlToGpmlConverter;\n  }\n  fileUtilities.loadXMLDoc = loadXMLDoc;\n  fileUtilities.textToXmlObject = textToXmlObject;\n  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var pngContent = cy.png({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var pngContent = cy.png({\n        scale: scale || 3,\n        full: true,\n        bg: bg\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      pngContent = cy.png({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/png\"), filename || \"network.png\");\n  };\n  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {\n    if (maxWidth || maxHeight) {\n      var jpgContent = cy.jpg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        quality: quality\n      });\n    } else {\n      var jpgContent = cy.jpg({\n        scale: scale || 3,\n        full: true,\n        bg: bg,\n        quality: quality\n      });\n    }\n\n    // this is to remove the beginning of the pngContent: data:img/png;base64,\n    var b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n\n    // lower quality when response is empty\n    if (!b64data || b64data === \"\") {\n      jpgContent = cy.jpg({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n    }\n    saveAs(b64toBlob(b64data, \"image/jpg\"), filename || \"network.jpg\");\n  };\n  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var svgContent = cy.svg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var svgContent = cy.svg({\n        scale: scale || 1,\n        full: true,\n        bg: bg\n      });\n    }\n    saveAs(new Blob([svgContent], {\n      type: \"image/svg+xml;charset=utf-8\"\n    }), filename || \"network.svg\");\n  };\n  fileUtilities.loadSample = function (filename, folderpath, callback) {\n    var file = (folderpath || 'sample-app/samples/') + filename;\n    uiUtilities.startSpinner(\"load-spinner\");\n    // Users may want to do customized things while a sample is being loaded\n    // Trigger an event for this purpose and specify the 'filename' as an event parameter\n    $(document).trigger(\"sbgnvizLoadSample\", [filename, cy]); // Aliases for sbgnvizLoadSampleStart\n    $(document).trigger(\"sbgnvizLoadSampleStart\", [filename, cy]);\n    var text = loadTextDoc(file);\n    var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n      });\n      text = text.replace(renderInfoStringCopy, renderInfoString);\n    }\n    var xmlObject = textToXmlObject(text);\n    setTimeout(function () {\n      updateGraph(nwtToJson.convert(xmlObject));\n      fileUtilities.collapseMarkedNodes();\n      uiUtilities.endSpinner(\"load-spinner\");\n      $(document).trigger(\"sbgnvizLoadSampleEnd\", [filename, cy]); // Trigger an event signaling that a sample is loaded\n      if (typeof callback !== 'undefined') {\n        callback();\n      }\n    }, 0);\n  };\n  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {\n    var convert = function convert(text) {\n      return sifToJson.convert(text);\n    };\n    var runLayout = function runLayout() {\n      if (layoutBy) {\n        if (typeof layoutBy === 'function') {\n          layoutBy();\n        } else {\n          var layout = cy.layout(layoutBy);\n\n          // for backward compatibility need to make this if check\n          if (layout && layout.run) {\n            layout.run();\n          }\n        }\n      }\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);\n  };\n  fileUtilities.loadTDFile = function functionName(file, callback) {\n    var convert = function convert(text) {\n      return tdToJson.convert(text);\n    };\n    fileUtilities.loadFile(file, convert, undefined, callback);\n  };\n  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {\n    var convert = function convert(text) {\n      return sbgnmlToJson.convert(textToXmlObject(text));\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n  fileUtilities.loadFileToLocal = function (file, callback1, callback2, urlParams, callback3) {\n    // console.log(file);\n    // console.log(callback1,);\n    // console.log(callback2);\n    // console.log(urlParams);\n    // console.log(callback3);\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes, undefined, callback3);\n  };\n  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  // collapse the nodes whose collapse data field is set\n  fileUtilities.collapseMarkedNodes = function () {\n    // collapse nodes\n    var nodesToCollapse = cy.nodes(\"[collapse]\");\n    if (nodesToCollapse.length > 0) {\n      cy.expandCollapse('get').collapse(nodesToCollapse, {\n        layoutBy: null\n      });\n      nodesToCollapse.forEach(function (ele, i, eles) {\n        ele.position(ele.data(\"positionBeforeSaving\"));\n      });\n      nodesToCollapse.removeData(\"positionBeforeSaving\");\n    }\n  };\n\n  /*\r\n    callback is a function remotely defined to add specific behavior that isn't implemented here.\r\n    it is completely optional.\r\n    signature: callback(textXml)\r\n  */\n\n  //  file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes,undefined,callback3\n  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4, toLocalorGraph) {\n    var self = this;\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var textType = /text.*/;\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var text = this.result;\n      var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n      if (matchResult != null) {\n        var imagesElementMatch = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        var imagesElement;\n        if (imagesElementMatch != null) {\n          imagesElement = imagesElementMatch[0];\n        }\n        var renderInfoString = matchResult[0];\n        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n        var regex = /\\s([\\S]+)([\\s]*)=/g;\n        var result;\n        var matches = [];\n        while (result = regex.exec(renderInfoString)) {\n          matches.push(result[0]);\n        }\n        ;\n        matches.forEach(function (match) {\n          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n        });\n        text = text.replace(renderInfoStringCopy, renderInfoString);\n        var imagesElementMatchDirty = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        if (imagesElementMatchDirty != null) {\n          text = text.replace(imagesElementMatchDirty[0], imagesElement);\n        }\n      }\n      setTimeout(function () {\n        if (typeof callback1 !== 'undefined') callback1(text);\n        var cyGraph;\n        try {\n          cyGraph = convertFcn(text);\n          // Users may want to do customized things while an external file is being loaded\n          // Trigger an event for this purpose and specify the 'filename' as an event parameter\n          $(document).trigger(\"sbgnvizLoadFile\", [file.name, cy]); // Aliases for sbgnvizLoadFileStart\n          $(document).trigger(\"sbgnvizLoadFileStart\", [file.name, cy]);\n        } catch (err) {\n          uiUtilities.endSpinner(\"load-file-spinner\");\n          console.log(err);\n          if (typeof callback2 !== 'undefined') callback2();\n          return;\n        }\n        if (toLocalorGraph !== undefined) {\n          toLocalorGraph(cyGraph);\n        } else {\n          updateGraph(cyGraph);\n        }\n        if (typeof callback3 !== 'undefined') {\n          callback3();\n        }\n        uiUtilities.endSpinner(\"load-file-spinner\");\n        $(document).trigger(\"sbgnvizLoadFileEnd\", [file.name, cy]); // Trigger an event signaling that a file is loaded\n\n        if (typeof callback4 !== 'undefined') {\n          callback4();\n        }\n      }, 0);\n    };\n    reader.readAsText(file);\n  };\n  fileUtilities.loadSBGNMLText = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n          case 2:\n            _context.next = 4;\n            return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n          case 4:\n            uiUtilities.endSpinner(\"load-file-spinner\");\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  fileUtilities.loadSBMLText = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(textData, tileInfoBoxes, filename, cy, urlParams) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return updateGraph(sbmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n          case 2:\n            _context2.next = 4;\n            return $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n          case 4:\n            uiUtilities.endSpinner(\"load-file-spinner\");\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x6, _x7, _x8, _x9, _x10) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsSbgnmlForSBML = function (filename, errorCallback) {\n    // We have sbml map typed nodes and edges in the cytoscape graph and we want to export to sbgnml\n    // Create sbml file first, then get the sbgnml from the Minerva conversion service\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var sbgnText = jsonToSbml.createSbml(filename);\n    //convert sbml to sbgnml\n    this.convertSbmlToSbgnml(sbgnText, function (data) {\n      if (!data.result) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-file-spinner\");\n    }.bind(this));\n  };\n\n  // supported versions are either 0.2 or 0.3\n  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = jsonToSbgnml.createSbgnml();\n    this.convertSbgnmlToCD(sbgnml, function (data) {\n      if (data == null) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      // this.convertCDToSbgnml(e.target.result, function(data){\n      cdToSbgnml.convert(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsSbml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToSbml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.saveSbmlForSBML = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    try {\n      var sbgnText = jsonToSbml.createSbml(filename);\n      var blob = new Blob([sbgnText], {\n        type: \"text/plain;charset=utf-8;\"\n      });\n      saveAs(blob, filename);\n    } catch (err) {\n      errorCallback();\n    }\n    uiUtilities.endSpinner(\"load-spinner\");\n  };\n  fileUtilities.hasLayoutSBML = function (file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      var layoutFound = false;\n      reader.onload = function (e) {\n        var text = this.result;\n        var matchResult = text.match(/<[^>]*listOfLayouts[^>]*>[\\s\\S]*<\\/[^>]*listOfLayouts[^>]*>/);\n        if (matchResult != null) {\n          layoutFound = true;\n        }\n        resolve(layoutFound);\n      };\n      reader.onerror = function () {\n        reject(new Error(\"Failed to read the file\"));\n      };\n      reader.readAsText(file);\n    });\n  };\n  fileUtilities.loadSbmlForSBML = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file, callback1, callback2, layoutBy) {\n      var convert, runLayout, layoutFound;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            convert = function convert(text) {\n              var converted = sbmlToJson.convert(text);\n              return converted;\n            };\n            runLayout = function runLayout() {\n              if (layoutBy) {\n                if (typeof layoutBy === 'function') {\n                  layoutBy();\n                } else {\n                  var layout = cy.layout(layoutBy);\n\n                  // for backward compatibility need to make this if check\n                  if (layout && layout.run) {\n                    layout.run();\n                  }\n                }\n              }\n              cy.fit(cy.elements(\":visible\"), 20);\n            };\n            _context3.next = 4;\n            return fileUtilities.hasLayoutSBML(file);\n          case 4:\n            layoutFound = _context3.sent;\n            if (layoutFound) {\n              fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes, undefined);\n            } else {\n              fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes, runLayout);\n            }\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x11, _x12, _x13, _x14) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  fileUtilities.loadSbml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      this.convertSbmlToSbgnml(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.saveAsGpml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToGpml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n  fileUtilities.loadGpml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      gpmlToSbgnml.convert(e.target.result, function (data) {\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n    reader.readAsText(file);\n  };\n  fileUtilities.convertSbgn = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return sbgnmlText;\n  };\n  fileUtilities.exportLayoutData = function (filename, byName) {\n    var layoutText = layoutToText.convert(byName);\n    var blob = new Blob([layoutText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.saveAsPlainSif = function (filename) {\n    var text = jsonToSif.convert();\n    var blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.convertSbmlTextToJson = function (sbgnmlText) {\n    return sbmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.convertSifTextToJson = function (sifText) {\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.createJsonFromSBGN = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml();\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n  fileUtilities.createJsonFromSBML = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(); //SBML\n    var converted_ = sbmlToJson.convert(textToXmlObject(sbgnmlText));\n    return converted_;\n  };\n  fileUtilities.createJsonFromSif = function () {\n    var sifText = jsonToSif.convert();\n    return sifToJson.convert(sifText);\n  };\n  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {\n    return sbgnmlToCd.convert(sbgnml, callback);\n  };\n  fileUtilities.convertCDToSbgnml = function (xml, callback) {\n    return cdToSbgnml.convert(xml, callback);\n  };\n  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {\n    return sbgnmlToSbml.convert(sbgnml, callback);\n  };\n  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {\n    return sbmlToSbgnml.convert(sbml, callback);\n  };\n  fileUtilities.convertGpmlToSbgnml = function (gpml, callback) {\n    return gpmlToSbgnml.convert(gpml, callback);\n  };\n  fileUtilities.convertSbgnmlToGpml = function (sbgnml, callback) {\n    return sbgnmlToGpml.convert(sbgnml, callback);\n  };\n  return fileUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/file-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/gpml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/gpml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function gpmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  gpmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-dev.lcsb.uni.lu/minerva/api/convert/GPML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return gpmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2dwbWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImdwbWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvZ3BtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/YmEwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgZnVuY3Rpb24gZ3BtbFRvU2Jnbm1sKHBhcmFtKSB7XHJcbiAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICB9XHJcblxyXG5cclxuICBncG1sVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBjb252ZXJzaW9uQXBpVXJsID0gXCJodHRwczovL21pbmVydmEtZGV2Lmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvR1BNTDpTQkdOLU1MXCI7XHJcblxyXG4gICAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcclxuICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3htbFwiLFxyXG4gICAgICAgICAgZGF0YTogeG1sLFxyXG4gICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xyXG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogdHJ1ZSwgbWVzc2FnZTogZGF0YSwgZXJyb3I6IFwiXCJ9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmYWlsOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICB9KVxyXG4gICAgICBcclxuICB9XHJcblxyXG4gIHJldHVybiBncG1sVG9TYmdubWw7XHJcblxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFFMUIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDM0JKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFHQUosWUFBWSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7SUFDNUMsSUFBSUMsZ0JBQWdCLEdBQUcsa0VBQWtFO0lBRXpGLE9BQU9DLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ1ZDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRUosZ0JBQWdCO01BQ3JCSyxXQUFXLEVBQUUsaUJBQWlCO01BQzlCQyxJQUFJLEVBQUVSLEdBQUc7TUFDVFMsUUFBUSxFQUFFLE1BQU07TUFDaEJDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFZRixJQUFJLEVBQUVHLFVBQVUsRUFBRUMsR0FBRyxFQUFFO1FBQ3RDLElBQUlBLEdBQUcsQ0FBQ0MsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUNwQlosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxLQUFLO1lBQUVDLEtBQUssRUFBRVAsSUFBSTtZQUFFUSxPQUFPLEVBQUUseUJBQXlCLEdBQUdKLEdBQUcsQ0FBQ0M7VUFBTSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxNQUFNO1VBQ0haLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsSUFBSTtZQUFFRSxPQUFPLEVBQUVSLElBQUk7WUFBRU8sS0FBSyxFQUFFO1VBQUUsQ0FBQyxDQUFDO1FBQ3REO01BQ0osQ0FBQztNQUNEQSxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBWUEsTUFBSyxFQUFFO1FBQ3BCZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxNQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RCxDQUFDO01BQ0RDLElBQUksRUFBRSxTQUFOQSxJQUFJQSxDQUFZRixLQUFLLEVBQUU7UUFDbkJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLEtBQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hEO0lBQ0osQ0FBQyxDQUFDO0VBRU4sQ0FBQztFQUVELE9BQU90QixZQUFZO0FBRXJCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/gpml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Common utilities for sbgnviz graphs\r\n */\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options, cy;\n  function graphUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    elementUtilities = param.elementUtilities;\n    options = optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  // TODO make these initial values user options instead of hardcoding them here\n  graphUtilities.portsEnabled = true;\n  graphUtilities.compoundSizesConsidered = true;\n  graphUtilities.disablePorts = function () {\n    graphUtilities.portsEnabled = false;\n    cy.style().update();\n  };\n  graphUtilities.enablePorts = function () {\n    graphUtilities.portsEnabled = true;\n    cy.style().update();\n  };\n  graphUtilities.arePortsEnabled = function () {\n    return graphUtilities.portsEnabled;\n  };\n  graphUtilities.considerCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = true;\n    cy.style().update();\n  };\n  graphUtilities.omitCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = false;\n    cy.style().update();\n  };\n  graphUtilities.areCompoundSizesConsidered = function () {\n    return graphUtilities.compoundSizesConsidered == true;\n  };\n  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {\n    var isLayoutRequired;\n    if (layoutOptions === undefined) {\n      isLayoutRequired = false;\n    } else {\n      isLayoutRequired = true;\n    }\n    $(document).trigger(\"updateGraphStart\", cy);\n    // Reset undo/redo stack and buttons when a new graph is loaded\n    if (options.undoable) {\n      cy.undoRedo().reset();\n      //    this.resetUndoRedoButtons();\n    }\n    cy.startBatch();\n    // clear data\n    cy.remove(\"*\");\n    cy.add(cyGraph);\n\n    //add position information to data for preset layout\n    var positionMap = {};\n    cy.nodes().not(\":parent\").forEach(function (node) {\n      var xPos = node.data(\"bbox\").x;\n      var yPos = node.data(\"bbox\").y;\n      positionMap[node.data(\"id\")] = {\n        x: xPos,\n        y: yPos\n      };\n    });\n    cy.nodes().forEach(function (node) {\n      // assign correct parents to info boxes\n      var statesandinfos = node.data(\"statesandinfos\");\n      for (var j = 0; j < statesandinfos.length; j++) {\n        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);\n      }\n    });\n\n    // change parent of PNClass nodes based on neighbor majority if inferNestingOnLoad is enabled and node has no parent\n    if (options.inferNestingOnLoad) {\n      cy.nodes().forEach(function (node) {\n        if (elementUtilities.isPNClass(node) && node.parent().length == 0) {\n          var processParentMap = new Map();\n          node.neighborhood().nodes().forEach(function (neighbor) {\n            if (processParentMap.has(neighbor.parent().id())) processParentMap.set(neighbor.parent().id(), processParentMap.get(neighbor.parent().id()) + 1);else processParentMap.set(neighbor.parent().id(), 1);\n          });\n          // find the max occurrence\n          var max_count = 0,\n            result = null;\n          processParentMap.forEach(function (value, key) {\n            if (max_count < value || max_count == value && result == undefined) {\n              result = key;\n              max_count = value;\n            }\n          });\n          node.move({\n            parent: result\n          });\n        }\n      });\n    }\n\n    //this.refreshPaddings(); // Recalculates/refreshes the compound paddings\n    cy.endBatch();\n    if (isLayoutRequired) {\n      var preferences = {};\n      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {\n        preferences.quality = \"draft\";\n      }\n      preferences.animate = false;\n      preferences.randomize = true;\n      preferences = $.extend({}, layoutOptions, preferences);\n      var layout = cy.layout(preferences);\n    } else {\n      var layout = cy.layout({\n        name: \"preset\",\n        positions: positionMap,\n        fit: true,\n        padding: 20\n      });\n    }\n\n    // Check this for cytoscape.js backward compatibility\n    if (layout && layout.run) {\n      layout.run();\n    }\n    var performLayout = function performLayout() {\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n    // Update the style\n    cy.style().update();\n    // Initilize the anchor points once the elements are created\n    if (cy.edgeEditing && cy.edgeEditing(\"initialized\")) {\n      cy.edgeEditing(\"get\").initAnchorPoints(cy.edges());\n    }\n    $(document).trigger(\"updateGraphEnd\", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);\n    if (callback) callback();\n  };\n  graphUtilities.calculatePaddings = function (paddingPercent) {\n    //As default use the compound padding value\n    if (!paddingPercent) {\n      var compoundPadding = options.compoundPadding;\n      paddingPercent = typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n    }\n    var nodes = cy.nodes();\n    var total = 0;\n    var numOfSimples = 0;\n    for (var i = 0; i < nodes.length; i++) {\n      var theNode = nodes[i];\n      if (theNode.children() == null || theNode.children().length == 0) {\n        total += Number(theNode.width());\n        total += Number(theNode.height());\n        numOfSimples++;\n      }\n    }\n    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));\n    if (calc_padding < 5) {\n      calc_padding = 5;\n    }\n    return calc_padding;\n  };\n  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {\n    // this.calculatedPaddings is not working here\n    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out\n    //graphUtilities.calculatedPaddings = this.calculatePaddings();\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n    //return graphUtilities.calculatedPaddings;\n  };\n  graphUtilities.getCompoundPaddings = function () {\n    // Return calculated paddings in case of that data is invalid return 5\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === \"function\" ? compoundPadding.call() : compoundPadding;\n\n    //return graphUtilities.calculatedPaddings || 5;\n  };\n  return graphUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2dyYXBoLXV0aWxpdGllcy1mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsNkNBQVcsQ0FBQztBQUNsQyxJQUFJQyxZQUFZLEdBQUdELG1CQUFPLENBQUMseURBQWlCLENBQUM7QUFDN0MsSUFBSUUsSUFBSSxHQUFHRCxZQUFZLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLElBQUlDLE1BQU0sR0FBSUMsQ0FBQyxHQUFHSCxJQUFJLENBQUNFLE1BQU87QUFFOUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFDM0IsSUFBSUMsZUFBZTtFQUNuQixJQUFJQyxPQUFPLEVBQUVDLEVBQUU7RUFFZixTQUFTQyxjQUFjQSxDQUFDQyxLQUFLLEVBQUU7SUFDN0JKLGVBQWUsR0FBR0ksS0FBSyxDQUFDSixlQUFlO0lBQ3ZDSyxnQkFBZ0IsR0FBR0QsS0FBSyxDQUFDQyxnQkFBZ0I7SUFDekNKLE9BQU8sR0FBR0QsZUFBZSxDQUFDTSxVQUFVLENBQUMsQ0FBQztJQUN0Q0osRUFBRSxHQUFHRSxLQUFLLENBQUNHLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7O0VBRUE7RUFDQUwsY0FBYyxDQUFDTSxZQUFZLEdBQUcsSUFBSTtFQUNsQ04sY0FBYyxDQUFDTyx1QkFBdUIsR0FBRyxJQUFJO0VBRTdDUCxjQUFjLENBQUNRLFlBQVksR0FBRyxZQUFZO0lBQ3hDUixjQUFjLENBQUNNLFlBQVksR0FBRyxLQUFLO0lBRW5DUCxFQUFFLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0VBQ3JCLENBQUM7RUFFRFYsY0FBYyxDQUFDVyxXQUFXLEdBQUcsWUFBWTtJQUN2Q1gsY0FBYyxDQUFDTSxZQUFZLEdBQUcsSUFBSTtJQUVsQ1AsRUFBRSxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUNyQixD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QyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ2hFd0MsS0FBSyxJQUFJSyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNoQ04sS0FBSyxJQUFJSyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqQ04sWUFBWSxFQUFFO01BQ2hCO0lBQ0Y7SUFFQSxJQUFJTyxZQUFZLEdBQ2JYLGNBQWMsR0FBRyxHQUFHLEdBQUlZLElBQUksQ0FBQ0MsS0FBSyxDQUFDVixLQUFLLElBQUksQ0FBQyxHQUFHQyxZQUFZLENBQUMsQ0FBQztJQUNqRSxJQUFJTyxZQUFZLEdBQUcsQ0FBQyxFQUFFO01BQ3BCQSxZQUFZLEdBQUcsQ0FBQztJQUNsQjtJQUVBLE9BQU9BLFlBQVk7RUFDckIsQ0FBQztFQUVEM0YsY0FBYyxDQUFDOEYsbUJBQW1CLEdBQUc5RixjQUFjLENBQUMrRixlQUFlLEdBQ2pFLFlBQVk7SUFDVjtJQUNBO0lBQ0E7SUFDQSxJQUFJZCxlQUFlLEdBQUduRixPQUFPLENBQUNtRixlQUFlO0lBQzdDLE9BQU8sT0FBT0EsZUFBZSxLQUFLLFVBQVUsR0FDeENBLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsR0FDdEJELGVBQWU7SUFDbkI7RUFDRixDQUFDO0VBRUhqRixjQUFjLENBQUNnRyxtQkFBbUIsR0FBRyxZQUFZO0lBQy9DO0lBQ0EsSUFBSWYsZUFBZSxHQUFHbkYsT0FBTyxDQUFDbUYsZUFBZTtJQUM3QyxPQUFPLE9BQU9BLGVBQWUsS0FBSyxVQUFVLEdBQ3hDQSxlQUFlLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQ3RCRCxlQUFlOztJQUVuQjtFQUNGLENBQUM7RUFFRCxPQUFPakYsY0FBYztBQUN2QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvZ3JhcGgtdXRpbGl0aWVzLWZhY3RvcnkuanM/M2JmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb21tb24gdXRpbGl0aWVzIGZvciBzYmdudml6IGdyYXBoc1xyXG4gKi9cclxuXHJcbnZhciBjbGFzc2VzID0gcmVxdWlyZShcIi4vY2xhc3Nlc1wiKTtcclxudmFyIGxpYlV0aWxpdGllcyA9IHJlcXVpcmUoXCIuL2xpYi11dGlsaXRpZXNcIik7XHJcbnZhciBsaWJzID0gbGliVXRpbGl0aWVzLmdldExpYnMoKTtcclxudmFyIGpRdWVyeSA9ICgkID0gbGlicy5qUXVlcnkpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIG9wdGlvblV0aWxpdGllcztcclxuICB2YXIgb3B0aW9ucywgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIGdyYXBoVXRpbGl0aWVzKHBhcmFtKSB7XHJcbiAgICBvcHRpb25VdGlsaXRpZXMgPSBwYXJhbS5vcHRpb25VdGlsaXRpZXM7XHJcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcclxuICAgIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBtYWtlIHRoZXNlIGluaXRpYWwgdmFsdWVzIHVzZXIgb3B0aW9ucyBpbnN0ZWFkIG9mIGhhcmRjb2RpbmcgdGhlbSBoZXJlXHJcbiAgZ3JhcGhVdGlsaXRpZXMucG9ydHNFbmFibGVkID0gdHJ1ZTtcclxuICBncmFwaFV0aWxpdGllcy5jb21wb3VuZFNpemVzQ29uc2lkZXJlZCA9IHRydWU7XHJcblxyXG4gIGdyYXBoVXRpbGl0aWVzLmRpc2FibGVQb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgZ3JhcGhVdGlsaXRpZXMuZW5hYmxlUG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgZ3JhcGhVdGlsaXRpZXMuYXJlUG9ydHNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZDtcclxuICB9O1xyXG5cclxuICBncmFwaFV0aWxpdGllcy5jb25zaWRlckNvbXBvdW5kU2l6ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBncmFwaFV0aWxpdGllcy5jb21wb3VuZFNpemVzQ29uc2lkZXJlZCA9IHRydWU7XHJcbiAgICBjeS5zdHlsZSgpLnVwZGF0ZSgpO1xyXG4gIH07XHJcblxyXG4gIGdyYXBoVXRpbGl0aWVzLm9taXRDb21wb3VuZFNpemVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZ3JhcGhVdGlsaXRpZXMuY29tcG91bmRTaXplc0NvbnNpZGVyZWQgPSBmYWxzZTtcclxuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgZ3JhcGhVdGlsaXRpZXMuYXJlQ29tcG91bmRTaXplc0NvbnNpZGVyZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZ3JhcGhVdGlsaXRpZXMuY29tcG91bmRTaXplc0NvbnNpZGVyZWQgPT0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBncmFwaFV0aWxpdGllcy51cGRhdGVHcmFwaCA9IGZ1bmN0aW9uIChcclxuICAgIGN5R3JhcGgsXHJcbiAgICBjYWxsYmFjayxcclxuICAgIGxheW91dE9wdGlvbnMsXHJcbiAgICB0aWxlSW5mb0JveGVzXHJcbiAgKSB7XHJcbiAgICB2YXIgaXNMYXlvdXRSZXF1aXJlZDtcclxuICAgIGlmIChsYXlvdXRPcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgaXNMYXlvdXRSZXF1aXJlZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaXNMYXlvdXRSZXF1aXJlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgJChkb2N1bWVudCkudHJpZ2dlcihcInVwZGF0ZUdyYXBoU3RhcnRcIiwgY3kpO1xyXG4gICAgLy8gUmVzZXQgdW5kby9yZWRvIHN0YWNrIGFuZCBidXR0b25zIHdoZW4gYSBuZXcgZ3JhcGggaXMgbG9hZGVkXHJcbiAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xyXG4gICAgICBjeS51bmRvUmVkbygpLnJlc2V0KCk7XHJcbiAgICAgIC8vICAgIHRoaXMucmVzZXRVbmRvUmVkb0J1dHRvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjeS5zdGFydEJhdGNoKCk7XHJcbiAgICAvLyBjbGVhciBkYXRhXHJcbiAgICBjeS5yZW1vdmUoXCIqXCIpO1xyXG4gICAgY3kuYWRkKGN5R3JhcGgpO1xyXG5cclxuICAgIC8vYWRkIHBvc2l0aW9uIGluZm9ybWF0aW9uIHRvIGRhdGEgZm9yIHByZXNldCBsYXlvdXRcclxuICAgIHZhciBwb3NpdGlvbk1hcCA9IHt9O1xyXG4gICAgY3kubm9kZXMoKVxyXG4gICAgICAubm90KFwiOnBhcmVudFwiKVxyXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHZhciB4UG9zID0gbm9kZS5kYXRhKFwiYmJveFwiKS54O1xyXG4gICAgICAgIHZhciB5UG9zID0gbm9kZS5kYXRhKFwiYmJveFwiKS55O1xyXG4gICAgICAgIHBvc2l0aW9uTWFwW25vZGUuZGF0YShcImlkXCIpXSA9IHsgeDogeFBvcywgeTogeVBvcyB9O1xyXG4gICAgICB9KTtcclxuICAgIGN5Lm5vZGVzKCkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAvLyBhc3NpZ24gY29ycmVjdCBwYXJlbnRzIHRvIGluZm8gYm94ZXNcclxuICAgICAgdmFyIHN0YXRlc2FuZGluZm9zID0gbm9kZS5kYXRhKFwic3RhdGVzYW5kaW5mb3NcIik7XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RhdGVzYW5kaW5mb3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBjbGFzc2VzXHJcbiAgICAgICAgICAuZ2V0QXV4VW5pdENsYXNzKHN0YXRlc2FuZGluZm9zW2pdKVxyXG4gICAgICAgICAgLnNldFBhcmVudFJlZihzdGF0ZXNhbmRpbmZvc1tqXSwgbm9kZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGNoYW5nZSBwYXJlbnQgb2YgUE5DbGFzcyBub2RlcyBiYXNlZCBvbiBuZWlnaGJvciBtYWpvcml0eSBpZiBpbmZlck5lc3RpbmdPbkxvYWQgaXMgZW5hYmxlZCBhbmQgbm9kZSBoYXMgbm8gcGFyZW50XHJcbiAgICBpZiAob3B0aW9ucy5pbmZlck5lc3RpbmdPbkxvYWQpIHtcclxuICAgICAgY3kubm9kZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnRVdGlsaXRpZXMuaXNQTkNsYXNzKG5vZGUpICYmIG5vZGUucGFyZW50KCkubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgIHZhciBwcm9jZXNzUGFyZW50TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgbm9kZVxyXG4gICAgICAgICAgICAubmVpZ2hib3Job29kKClcclxuICAgICAgICAgICAgLm5vZGVzKClcclxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5laWdoYm9yKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3NQYXJlbnRNYXAuaGFzKG5laWdoYm9yLnBhcmVudCgpLmlkKCkpKVxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1BhcmVudE1hcC5zZXQoXHJcbiAgICAgICAgICAgICAgICAgIG5laWdoYm9yLnBhcmVudCgpLmlkKCksXHJcbiAgICAgICAgICAgICAgICAgIHByb2Nlc3NQYXJlbnRNYXAuZ2V0KG5laWdoYm9yLnBhcmVudCgpLmlkKCkpICsgMVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBlbHNlIHByb2Nlc3NQYXJlbnRNYXAuc2V0KG5laWdoYm9yLnBhcmVudCgpLmlkKCksIDEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIC8vIGZpbmQgdGhlIG1heCBvY2N1cnJlbmNlXHJcbiAgICAgICAgICB2YXIgbWF4X2NvdW50ID0gMCxcclxuICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgIHByb2Nlc3NQYXJlbnRNYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgbWF4X2NvdW50IDwgdmFsdWUgfHxcclxuICAgICAgICAgICAgICAobWF4X2NvdW50ID09IHZhbHVlICYmIHJlc3VsdCA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGtleTtcclxuICAgICAgICAgICAgICBtYXhfY291bnQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBub2RlLm1vdmUoe1xyXG4gICAgICAgICAgICBwYXJlbnQ6IHJlc3VsdCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy90aGlzLnJlZnJlc2hQYWRkaW5ncygpOyAvLyBSZWNhbGN1bGF0ZXMvcmVmcmVzaGVzIHRoZSBjb21wb3VuZCBwYWRkaW5nc1xyXG4gICAgY3kuZW5kQmF0Y2goKTtcclxuXHJcbiAgICBpZiAoaXNMYXlvdXRSZXF1aXJlZCkge1xyXG4gICAgICB2YXIgcHJlZmVyZW5jZXMgPSB7fTtcclxuICAgICAgaWYgKGN5Lm5vZGVzKCkubGVuZ3RoID4gMzAwMCB8fCBjeS5lZGdlcygpLmxlbmd0aCA+IDMwMDApIHtcclxuICAgICAgICBwcmVmZXJlbmNlcy5xdWFsaXR5ID0gXCJkcmFmdFwiO1xyXG4gICAgICB9XHJcbiAgICAgIHByZWZlcmVuY2VzLmFuaW1hdGUgPSBmYWxzZTtcclxuICAgICAgcHJlZmVyZW5jZXMucmFuZG9taXplID0gdHJ1ZTtcclxuICAgICAgcHJlZmVyZW5jZXMgPSAkLmV4dGVuZCh7fSwgbGF5b3V0T3B0aW9ucywgcHJlZmVyZW5jZXMpO1xyXG4gICAgICB2YXIgbGF5b3V0ID0gY3kubGF5b3V0KHByZWZlcmVuY2VzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBsYXlvdXQgPSBjeS5sYXlvdXQoe1xyXG4gICAgICAgIG5hbWU6IFwicHJlc2V0XCIsXHJcbiAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbk1hcCxcclxuICAgICAgICBmaXQ6IHRydWUsXHJcbiAgICAgICAgcGFkZGluZzogMjAsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIHRoaXMgZm9yIGN5dG9zY2FwZS5qcyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgICBpZiAobGF5b3V0ICYmIGxheW91dC5ydW4pIHtcclxuICAgICAgbGF5b3V0LnJ1bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBwZXJmb3JtTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBjeS5maXQoY3kuZWxlbWVudHMoXCI6dmlzaWJsZVwiKSwgMjApO1xyXG4gICAgfTtcclxuICAgIC8vIFVwZGF0ZSB0aGUgc3R5bGVcclxuICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XHJcbiAgICAvLyBJbml0aWxpemUgdGhlIGFuY2hvciBwb2ludHMgb25jZSB0aGUgZWxlbWVudHMgYXJlIGNyZWF0ZWRcclxuICAgIGlmIChjeS5lZGdlRWRpdGluZyAmJiBjeS5lZGdlRWRpdGluZyhcImluaXRpYWxpemVkXCIpKSB7XHJcbiAgICAgIGN5LmVkZ2VFZGl0aW5nKFwiZ2V0XCIpLmluaXRBbmNob3JQb2ludHMoY3kuZWRnZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgJChkb2N1bWVudCkudHJpZ2dlcihcInVwZGF0ZUdyYXBoRW5kXCIsIFtcclxuICAgICAgY3ksXHJcbiAgICAgIGlzTGF5b3V0UmVxdWlyZWQgfHwgdGlsZUluZm9Cb3hlcyxcclxuICAgICAgcGVyZm9ybUxheW91dCxcclxuICAgIF0pO1xyXG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gIH07XHJcblxyXG4gIGdyYXBoVXRpbGl0aWVzLmNhbGN1bGF0ZVBhZGRpbmdzID0gZnVuY3Rpb24gKHBhZGRpbmdQZXJjZW50KSB7XHJcbiAgICAvL0FzIGRlZmF1bHQgdXNlIHRoZSBjb21wb3VuZCBwYWRkaW5nIHZhbHVlXHJcbiAgICBpZiAoIXBhZGRpbmdQZXJjZW50KSB7XHJcbiAgICAgIHZhciBjb21wb3VuZFBhZGRpbmcgPSBvcHRpb25zLmNvbXBvdW5kUGFkZGluZztcclxuICAgICAgcGFkZGluZ1BlcmNlbnQgPVxyXG4gICAgICAgIHR5cGVvZiBjb21wb3VuZFBhZGRpbmcgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgICAgPyBjb21wb3VuZFBhZGRpbmcuY2FsbCgpXHJcbiAgICAgICAgICA6IGNvbXBvdW5kUGFkZGluZztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuICAgIHZhciBudW1PZlNpbXBsZXMgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgdGhlTm9kZSA9IG5vZGVzW2ldO1xyXG4gICAgICBpZiAodGhlTm9kZS5jaGlsZHJlbigpID09IG51bGwgfHwgdGhlTm9kZS5jaGlsZHJlbigpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgdG90YWwgKz0gTnVtYmVyKHRoZU5vZGUud2lkdGgoKSk7XHJcbiAgICAgICAgdG90YWwgKz0gTnVtYmVyKHRoZU5vZGUuaGVpZ2h0KCkpO1xyXG4gICAgICAgIG51bU9mU2ltcGxlcysrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNhbGNfcGFkZGluZyA9XHJcbiAgICAgIChwYWRkaW5nUGVyY2VudCAvIDEwMCkgKiBNYXRoLmZsb29yKHRvdGFsIC8gKDIgKiBudW1PZlNpbXBsZXMpKTtcclxuICAgIGlmIChjYWxjX3BhZGRpbmcgPCA1KSB7XHJcbiAgICAgIGNhbGNfcGFkZGluZyA9IDU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNhbGNfcGFkZGluZztcclxuICB9O1xyXG5cclxuICBncmFwaFV0aWxpdGllcy5yZWNhbGN1bGF0ZVBhZGRpbmdzID0gZ3JhcGhVdGlsaXRpZXMucmVmcmVzaFBhZGRpbmdzID1cclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gdGhpcy5jYWxjdWxhdGVkUGFkZGluZ3MgaXMgbm90IHdvcmtpbmcgaGVyZVxyXG4gICAgICAvLyBUT0RPOiByZXBsYWNlIHRoaXMgcmVmZXJlbmNlIHdpdGggdGhpcy5jYWxjdWxhdGVkUGFkZGluZ3Mgb25jZSB0aGUgcmVhc29uIGlzIGZpZ3VyZWQgb3V0XHJcbiAgICAgIC8vZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlZFBhZGRpbmdzID0gdGhpcy5jYWxjdWxhdGVQYWRkaW5ncygpO1xyXG4gICAgICB2YXIgY29tcG91bmRQYWRkaW5nID0gb3B0aW9ucy5jb21wb3VuZFBhZGRpbmc7XHJcbiAgICAgIHJldHVybiB0eXBlb2YgY29tcG91bmRQYWRkaW5nID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IGNvbXBvdW5kUGFkZGluZy5jYWxsKClcclxuICAgICAgICA6IGNvbXBvdW5kUGFkZGluZztcclxuICAgICAgLy9yZXR1cm4gZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlZFBhZGRpbmdzO1xyXG4gICAgfTtcclxuXHJcbiAgZ3JhcGhVdGlsaXRpZXMuZ2V0Q29tcG91bmRQYWRkaW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFJldHVybiBjYWxjdWxhdGVkIHBhZGRpbmdzIGluIGNhc2Ugb2YgdGhhdCBkYXRhIGlzIGludmFsaWQgcmV0dXJuIDVcclxuICAgIHZhciBjb21wb3VuZFBhZGRpbmcgPSBvcHRpb25zLmNvbXBvdW5kUGFkZGluZztcclxuICAgIHJldHVybiB0eXBlb2YgY29tcG91bmRQYWRkaW5nID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgPyBjb21wb3VuZFBhZGRpbmcuY2FsbCgpXHJcbiAgICAgIDogY29tcG91bmRQYWRkaW5nO1xyXG5cclxuICAgIC8vcmV0dXJuIGdyYXBoVXRpbGl0aWVzLmNhbGN1bGF0ZWRQYWRkaW5ncyB8fCA1O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBncmFwaFV0aWxpdGllcztcclxufTtcclxuIl0sIm5hbWVzIjpbImNsYXNzZXMiLCJyZXF1aXJlIiwibGliVXRpbGl0aWVzIiwibGlicyIsImdldExpYnMiLCJqUXVlcnkiLCIkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvblV0aWxpdGllcyIsIm9wdGlvbnMiLCJjeSIsImdyYXBoVXRpbGl0aWVzIiwicGFyYW0iLCJlbGVtZW50VXRpbGl0aWVzIiwiZ2V0T3B0aW9ucyIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJwb3J0c0VuYWJsZWQiLCJjb21wb3VuZFNpemVzQ29uc2lkZXJlZCIsImRpc2FibGVQb3J0cyIsInN0eWxlIiwidXBkYXRlIiwiZW5hYmxlUG9ydHMiLCJhcmVQb3J0c0VuYWJsZWQiLCJjb25zaWRlckNvbXBvdW5kU2l6ZXMiLCJvbWl0Q29tcG91bmRTaXplcyIsImFyZUNvbXBvdW5kU2l6ZXNDb25zaWRlcmVkIiwidXBkYXRlR3JhcGgiLCJjeUdyYXBoIiwiY2FsbGJhY2siLCJsYXlvdXRPcHRpb25zIiwidGlsZUluZm9Cb3hlcyIsImlzTGF5b3V0UmVxdWlyZWQiLCJ1bmRlZmluZWQiLCJkb2N1bWVudCIsInRyaWdnZXIiLCJ1bmRvYWJsZSIsInVuZG9SZWRvIiwicmVzZXQiLCJzdGFydEJhdGNoIiwicmVtb3ZlIiwiYWRkIiwicG9zaXRpb25NYXAiLCJub2RlcyIsIm5vdCIsImZvckVhY2giLCJub2RlIiwieFBvcyIsImRhdGEiLCJ4IiwieVBvcyIsInkiLCJzdGF0ZXNhbmRpbmZvcyIsImoiLCJsZW5ndGgiLCJnZXRBdXhVbml0Q2xhc3MiLCJzZXRQYXJlbnRSZWYiLCJpbmZlck5lc3RpbmdPbkxvYWQiLCJpc1BOQ2xhc3MiLCJwYXJlbnQiLCJwcm9jZXNzUGFyZW50TWFwIiwiTWFwIiwibmVpZ2hib3Job29kIiwibmVpZ2hib3IiLCJoYXMiLCJpZCIsInNldCIsImdldCIsIm1heF9jb3VudCIsInJlc3VsdCIsInZhbHVlIiwia2V5IiwibW92ZSIsImVuZEJhdGNoIiwicHJlZmVyZW5jZXMiLCJlZGdlcyIsInF1YWxpdHkiLCJhbmltYXRlIiwicmFuZG9taXplIiwiZXh0ZW5kIiwibGF5b3V0IiwibmFtZSIsInBvc2l0aW9ucyIsImZpdCIsInBhZGRpbmciLCJydW4iLCJwZXJmb3JtTGF5b3V0IiwiZWxlbWVudHMiLCJlZGdlRWRpdGluZyIsImluaXRBbmNob3JQb2ludHMiLCJjYWxjdWxhdGVQYWRkaW5ncyIsInBhZGRpbmdQZXJjZW50IiwiY29tcG91bmRQYWRkaW5nIiwiY2FsbCIsInRvdGFsIiwibnVtT2ZTaW1wbGVzIiwiaSIsInRoZU5vZGUiLCJjaGlsZHJlbiIsIk51bWJlciIsIndpZHRoIiwiaGVpZ2h0IiwiY2FsY19wYWRkaW5nIiwiTWF0aCIsImZsb29yIiwicmVjYWxjdWxhdGVQYWRkaW5ncyIsInJlZnJlc2hQYWRkaW5ncyIsImdldENvbXBvdW5kUGFkZGluZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/graph-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function jsonToNwt(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function setToStr(set) {\n    if (set) {\n      return Object.keys(set).join(';');\n    }\n    return null;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDs': function pcIDs(edge) {\n      return setToStr(edge.data('pcIDSet'));\n    },\n    'siteLocations': function siteLocations(edge) {\n      return setToStr(edge.data('siteLocSet'));\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(node) {\n      return node.data('tooltip');\n    },\n    'infoboxes': function infoboxes(node, obj) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(infobox) {\n          return infobox.tooltip;\n        }\n      };\n      var infoboxes = node.data('statesandinfos');\n      var glyphs = obj.glyph;\n      infoboxes.forEach(function (infobox, i) {\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infobox);\n          if (val) {\n            glyphs[i][propName] = val;\n          }\n        });\n      });\n    }\n  };\n\n  // objects consist of arcs or gylphs\n  function extendObjectsData(objs, filterFcn, propHandlerMap) {\n    if (!objs) {\n      return;\n    }\n    objs.forEach(function (obj) {\n      if (filterFcn(obj.$[\"class\"])) {\n        var ele = cy.getElementById(obj.$.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](ele, obj);\n          if (val) {\n            obj[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function extendStylesData(toExtend, extendFrom) {\n    if (!toExtend || !extendFrom) {\n      return;\n    }\n    var styleNames = ['shapeName'];\n    var styleMap = {};\n    Object.keys(extendFrom).forEach(function (key) {\n      styleNames.forEach(function (name) {\n        var el = extendFrom[key];\n        var props = el && el.properties;\n        if (props && props[name]) {\n          var val = props[name];\n          var idList = el.idList;\n          idList.forEach(function (id) {\n            styleMap[id] = styleMap[id] || {};\n            styleMap[id][name] = val;\n          });\n        }\n      });\n    });\n    toExtend.forEach(function (style) {\n      var idList = style.$.idList.split(' ');\n      styleNames.forEach(function (name) {\n        var val = null;\n        idList.forEach(function (id) {\n          var currVal = styleMap[id] && styleMap[id][name];\n          if (currVal === undefined) {\n            return;\n          }\n          if (val == null) {\n            val = currVal;\n          } else if (val !== currVal) {\n            console.warn('Shape name of some glyphs defined multiple times in render information!');\n          }\n        });\n        if (val !== null) {\n          style.g.$[name] = val;\n        }\n      });\n    });\n  }\n  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn' && elementUtilities.mapType !== 'SBML') {\n      var map = jsObj.map[0];\n      var arcs = map.arc;\n      var glyphs = map.glyph;\n      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);\n      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);\n      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;\n      var appStyles = renderInfo && renderInfo.styles;\n      extendStylesData(jsObjStyles, appStyles);\n    }\n    return jsObj;\n  };\n  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n  return jsonToNwt;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-nwt-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar renderExtension = libsbgnjs.render;\nvar annot = libsbgnjs.annot;\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"nwt:mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"nwt:extraInfo\"\n});\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n\n  /*\r\n      takes renderInfo as an optional argument. It contains all the information needed to save\r\n      the style and colors to the render extension. See newt/app-utilities getAllStyles()\r\n      Structure: {\r\n          background: the map background color,\r\n          colors: {\r\n            validXmlValue: color_id\r\n            ...\r\n          },\r\n          styles: {\r\n              styleKey1: {\r\n                  idList: list of the nodes ids that have this style\r\n                  properties: {\r\n                      fontSize: ...\r\n                      fill: ...\r\n                      ...\r\n                  }\r\n              }\r\n              styleKey2: ...\r\n              ...\r\n          }\r\n      }\r\n  */\n  function jsonToSbgnml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  /*\r\n   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.\r\n   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.\r\n   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.\r\n   TODO implement 0.3 changes when submap support is fully there.\r\n   */\n  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var _this = this;\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return function (edges) {\n      var self = _this;\n      var mapID = textUtilities.getXMLValidId(filename);\n      var hasExtension = false;\n      var hasRenderExtension = false;\n      var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;\n      _this.nodes = nodes || cy.nodes();\n      _this.edges = edges || cy.edges();\n      var id = [];\n      var i = 0;\n      _this.nodes.forEach(function (node) {\n        return function () {\n          id[i] = node._private.data.id;\n          i++;\n        };\n      });\n      var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(_this.nodes);\n      _this.allCollapsedNodes = collapsedChildren.filter(\"node\");\n      _this.allCollapsedEdges = collapsedChildren.filter(\"edge\");\n      if (typeof renderInfo !== 'undefined') {\n        hasExtension = true;\n        hasRenderExtension = true;\n      }\n      if (typeof version === 'undefined') {\n        // default if not specified\n        version = \"0.3\";\n      }\n\n      // check version validity\n      if (version !== \"0.2\" && version !== \"0.3\" && version !== \"plain\" && version !== \"plain3\") {\n        console.error(\"Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: \" + version);\n        return \"Error\";\n      }\n      var mapLanguage = elementUtilities.mapTypeToLanguage(mapType);\n\n      //add headers\n      xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n      var versionNo;\n      if (version === \"plain\") {\n        versionNo = \"0.2\";\n      } else if (version === \"plain3\") {\n        versionNo = \"0.3\";\n      } else {\n        versionNo = version;\n      }\n      //var versionNo = (version === \"plain\") ? \"0.2\" : version;\n      var sbgn = new libsbgnjs.Sbgn({\n        xmlns: 'http://sbgn.org/libsbgn/' + versionNo\n      });\n      var map;\n      if (version === \"0.3\" || version === \"plain3\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage,\n          id: mapID\n        });\n      } else if (version === \"0.2\" || version === \"plain\") {\n        var map = new libsbgnjs.Map({\n          language: mapLanguage\n        });\n      }\n      if (hasExtension) {\n        // extension is there\n        var extension = new libsbgnjs.Extension();\n        if (hasRenderExtension) {\n          extension.add(self.getRenderExtensionSbgnml(renderInfo));\n        }\n        map.setExtension(extension);\n        if (mapProperties) {\n          delete mapProperties.experimentDescription;\n          mapProperties.$ = {\n            \"xmlns:nwt\": \"https://newteditor.org/\"\n          };\n          var xml = mapPropertiesBuilder.buildObject(mapProperties);\n          map.extension.add(xml);\n        }\n      } else if (mapProperties) {\n        map.setExtension(new libsbgnjs.Extension());\n        mapProperties.$ = {\n          \"xmlns:nwt\": \"https://newteditor.org/\"\n        };\n        var xml = mapPropertiesBuilder.buildObject(mapProperties);\n        map.extension.add(xml);\n      }\n\n      // get all glyphs\n      var glyphList = [];\n      // be careful that :visible is also used during recursive search of nodes\n      // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.\n      var self = _this;\n      _this.nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        if (jsonToSbgnml.childOfNone(ele, self.nodes)) {\n          var vis = true;\n          if (hidden) vis = id.includes(ele._private.data.id);\n          glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, vis)); // returns potentially more than 1 glyph\n        }\n      });\n      // add them to the map\n      for (var i = 0; i < glyphList.length; i++) {\n        if (version === \"plain\" && !hidden) glyphList[i].extension = null;\n        if (glyphList[i] != undefined) map.addGlyph(glyphList[i]);\n      }\n      // get all arcs\n      var edges = _this.allCollapsedEdges.union(_this.edges);\n      edges.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var arc = self.getArcSbgnml(ele, version, hidden);\n        if (version === \"plain\" && (!hidden || hidden && ele.visible())) arc.extension = null;\n        map.addArc(arc);\n      });\n      sbgn.addMap(map);\n      return sbgn.buildJsObj();\n    }(edges);\n  };\n  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var hidden = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges, hidden);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n\n  // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js\n  jsonToSbgnml.buildString = function (obj) {\n    var xmlString = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    }).buildObject(obj);\n\n    // change naming convention from Camel Case (variableName) to Kebab case (variable-name)\n    var matchResult = xmlString.match(\"<renderInformation[^]*</renderInformation>\");\n    if (matchResult != null) {\n      var imagesElementMatch = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      var imagesElement;\n      if (imagesElementMatch != null) {\n        imagesElement = imagesElementMatch[0];\n      }\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n      ;\n      matches.forEach(function (match) {\n        if (match != \" idList=\") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));\n      });\n      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);\n      var imagesElementMatchDirty = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      if (imagesElementMatchDirty != null) {\n        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);\n      }\n    }\n\n    /* \tdirty hack needed to solve the newline char encoding problem\r\n    \txml2js doesn't encode \\n as &#xA; we need to do it manually\r\n    */\n    var re = /<label text=\"((.|\\n+)+?)\"/gm;\n    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {\n      return '<label text=\"' + p1.replace(/\\n/g, \"&#xA;\") + '\"';\n    });\n    var xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    /*\r\n      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.\r\n      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.\r\n      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported\r\n      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.\r\n    */\n    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace(\"<sbgn \\n  xmlns=\\\"http://sbgn.org/libsbgn\", \"<sbgn xmlns=\\\"http://sbgn.org/libsbgn\");\n    return xmlHeader + xmlbody;\n  };\n\n  // see createSbgnml for info on the structure of renderInfo\n  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {\n    // initialize the main container\n    var renderInformation = new renderExtension.RenderInformation({\n      id: 'renderInformation',\n      backgroundColor: renderInfo.background,\n      programName: pkgName,\n      programVersion: pkgVersion\n    });\n\n    // populate list of colors\n    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();\n    for (var color in renderInfo.colors) {\n      var colorDefinition = new renderExtension.ColorDefinition({\n        id: renderInfo.colors[color],\n        value: color\n      });\n      listOfColorDefinitions.addColorDefinition(colorDefinition);\n    }\n    renderInformation.setListOfColorDefinitions(listOfColorDefinitions);\n\n    // populate list of background images\n    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();\n    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {\n      for (var img in renderInfo.images) {\n        var backgroundImage = new renderExtension.BackgroundImage({\n          id: renderInfo.images[img],\n          value: img\n        });\n        listOfBackgroundImages.addBackgroundImage(backgroundImage);\n      }\n    }\n    renderInformation.setListOfBackgroundImages(listOfBackgroundImages);\n\n    // populates styles\n    var listOfStyles = new renderExtension.ListOfStyles();\n    for (var key in renderInfo.styles) {\n      var style = renderInfo.styles[key];\n      var properties = {};\n      for (var prop in style.properties) {\n        if (style.properties[prop] !== '') {\n          properties[prop] = style.properties[prop];\n        }\n      }\n      var xmlStyle = new renderExtension.Style({\n        id: textUtilities.getXMLValidId(key),\n        idList: style.idList.join(' ')\n      });\n      var g = new renderExtension.RenderGroup(properties);\n      xmlStyle.setRenderGroup(g);\n      listOfStyles.addStyle(xmlStyle);\n    }\n    renderInformation.setListOfStyles(listOfStyles);\n    return renderInformation;\n  };\n  jsonToSbgnml.getAnnotationExtension = function (cyElement) {\n    var annotations = cyElement.data('annotations');\n    var annotExt = new annot.Annotation();\n    var rdfElement = new annot.RdfElement();\n    for (var annotID in annotations) {\n      var currentAnnot = annotations[annotID];\n\n      // check validity of annotation\n      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {\n        continue;\n      }\n\n      // check if uncontrolled vocabulary\n      if (currentAnnot.selectedRelation == \"sio:SIO_000223\") {\n        var obj = {};\n        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;\n        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);\n      } else {\n        var obj = {};\n        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;\n        rdfElement.addResource('#' + cyElement.data('id'), obj);\n      }\n    }\n    annotExt.setRdfElement(rdfElement);\n    return annotExt;\n  };\n  jsonToSbgnml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var self = this;\n    var nodeClass = node._private.data[\"class\"];\n    var glyphList = [];\n    if (!visible && !node.visible()) return;\n    if (nodeClass.startsWith('BA')) {\n      nodeClass = \"biological activity\";\n    }\n\n    // Workaround: In application we use 'empty set' class but SBGN-ML files \n    // use 'source and sink' so we read and write as 'source and sink'\n    if (nodeClass === \"empty set\") {\n      nodeClass = \"source and sink\";\n    }\n    var glyph = new libsbgnjs.Glyph({\n      id: node._private.data.id,\n      class_: nodeClass\n    });\n\n    // assign compartmentRef\n    if (node.parent() && node.parent().length > 0) {\n      if (nodeClass === \"compartment\") {\n        var parent = node.parent();\n        glyph.compartmentRef = node._private.data.parent;\n      } else {\n        var parent = node.parent()[0];\n        if (parent._private.data[\"class\"] == \"compartment\" || parent._private.data[\"class\"] === 'complex sbml') glyph.compartmentRef = parent._private.data.id;\n      }\n    }\n\n    // misc information\n    var label = node._private.data.label;\n    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({\n      text: label\n    }));\n    //add clone information\n    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType());\n    //add bbox information\n    glyph.setBbox(this.addGlyphBbox(node));\n    if (node.isParent() || node.data()[\"class\"] == 'topology group' || node.data()[\"class\"] == 'submap' || node.data()[\"class\"] == 'complex' || node.data()[\"class\"] == 'compartment') {\n      var extraInfo = {};\n      extraInfo.w = node.width();\n      extraInfo.h = node.height();\n      extraInfo.minW = Number(node.css(\"min-width\").replace(\"px\", \"\"));\n      extraInfo.minH = Number(node.css(\"min-height\").replace(\"px\", \"\"));\n      extraInfo.WLBias = Number(node.css(\"min-width-bias-left\").replace(\"px\", \"\"));\n      extraInfo.WRBias = Number(node.css(\"min-width-bias-right\").replace(\"px\", \"\"));\n      extraInfo.HTBias = Number(node.css(\"min-height-bias-top\").replace(\"px\", \"\"));\n      extraInfo.HBBias = Number(node.css(\"min-height-bias-bottom\").replace(\"px\", \"\"));\n      glyph.setExtension(new libsbgnjs.Extension());\n      extraInfo.$ = {\n        \"xmlns:nwt\": \"https://newteditor.org/\"\n      };\n      var extraInfoXml = compoundExtensionBuilder.buildObject(extraInfo);\n      glyph.extension.add(extraInfoXml);\n    }\n\n    //add port information\n    var ports = node._private.data.ports;\n    for (var i = 0; i < ports.length; i++) {\n      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal';\n      // This is the ratio of the area occupied for ports over the whole shape\n      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50;\n\n      // Divide the node sizes by the ratio because that sizes includes ports as well\n      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;\n      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;\n      glyph.addPort(new libsbgnjs.Port({\n        id: ports[i].id,\n        x: x,\n        y: y\n      }));\n    }\n    //add state and info box information\n    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {\n      var boxGlyph = node._private.data.statesandinfos[i];\n      var statesandinfosId = boxGlyph.id;\n      if (boxGlyph.clazz === \"state variable\") {\n        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"unit of information\") {\n        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"residue variable\") {\n        glyph.addGlyphMember(this.addResidueBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"binding region\") {\n        glyph.addGlyphMember(this.addBindingBoxGlyph(boxGlyph, statesandinfosId, node));\n      }\n    }\n    // check for annotations\n    if (version !== \"plain\" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {\n      var extension = self.getOrCreateExtension(glyph);\n      var annotExt = self.getAnnotationExtension(node);\n      extension.add(annotExt);\n    }\n    // add glyph members that are not state variables or unit of info: subunits\n    if (nodeClass === \"complex\" || nodeClass === \"complex multimer\" || nodeClass === \"submap\" || nodeClass === \"topology group\" || nodeClass == \"active protein\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      if (node.data('collapsedChildren')) {\n        var collapsedChildren = node.data('collapsedChildren');\n        children = children.union(collapsedChildren);\n      }\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        var glyphMemberList = self.getGlyphSbgnml(ele, version, visible);\n        for (var i = 0; i < glyphMemberList.length; i++) {\n          glyph.addGlyphMember(glyphMemberList[i]);\n        }\n      });\n    }\n    var sbgnvizExtString = \"\";\n    var hasNewtExt = false;\n\n    // add info for collapsed nodes\n    if (node.data('collapsedChildren')) {\n      sbgnvizExtString += \"<collapsed/>\";\n      sbgnvizExtString += \"<positionBeforeSaving x='\" + node.position().x + \"' y='\" + node.position().y + \"'/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for hidden nodes\n    if (node.hidden()) {\n      sbgnvizExtString += \"<hidden/>\";\n      hasNewtExt = true;\n    }\n\n    // add info for nodes which has hidden neighbour\n    if (node.data(\"thickBorder\")) {\n      sbgnvizExtString += \"<hasHiddenNeighbour/>\";\n      hasNewtExt = true;\n    }\n\n    // add string to a new extension for this glyph\n    if (hasNewtExt) {\n      var extension = self.getOrCreateExtension(glyph);\n      extension.add(\"<sbgnviz>\" + sbgnvizExtString + \"</sbgnviz>\");\n    }\n\n    // current glyph is done\n    glyphList.push(glyph);\n\n    // keep going with all the included glyphs\n    if (nodeClass === \"compartment\" || nodeClass === 'complex sbml') {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version, visible));\n      });\n    }\n    return glyphList;\n  };\n\n  // element: a libsbgn.js glyph or edge object\n  jsonToSbgnml.getOrCreateExtension = function (element) {\n    var extension;\n    if (element.extension) {\n      // an extension is already there for this element\n      extension = element.extension;\n    } else {\n      extension = new libsbgnjs.Extension();\n      element.setExtension(extension);\n    }\n    return extension;\n  };\n  jsonToSbgnml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var self = this;\n    //Temporary hack to resolve \"undefined\" arc source and targets\n    var arcTarget = edge._private.data.porttarget;\n    var arcSource = edge._private.data.portsource;\n    if (hidden && !edge.visible()) return;\n    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;\n    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;\n    var arcId = edge._private.data.id;\n    var arc = new libsbgnjs.Arc({\n      id: arcId,\n      source: arcSource,\n      target: arcTarget,\n      class_: edge._private.data[\"class\"]\n    });\n    arc.setStart(new libsbgnjs.StartType({\n      x: edge._private.rscratch.startX,\n      y: edge._private.rscratch.startY\n    }));\n\n    // Export anchor points if edgeEditingExtension is registered\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);\n      if (typeof segpts !== 'undefined') {\n        if (segpts.length > 0) {\n          for (var i = 0; segpts && i < segpts.length; i = i + 2) {\n            var anchorX = segpts[i];\n            var anchorY = segpts[i + 1];\n            arc.addNext(new libsbgnjs.NextType({\n              x: anchorX,\n              y: anchorY\n            }));\n          }\n        }\n      }\n    }\n    arc.setEnd(new libsbgnjs.EndType({\n      x: edge._private.rscratch.endX,\n      y: edge._private.rscratch.endY\n    }));\n    var cardinality = edge._private.data.cardinality;\n    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {\n      var edgebBox = edge.boundingBox({\n        includeLabels: true,\n        includeNodes: false,\n        includeEdges: false,\n        includeOverlays: false\n      });\n      arc.addGlyph(new libsbgnjs.Glyph({\n        id: arc.id + '_card',\n        class_: 'stoichiometry',\n        label: new libsbgnjs.Label({\n          text: cardinality\n        }),\n        bbox: new libsbgnjs.Bbox({\n          x: edgebBox.x1,\n          y: edgebBox.y1,\n          w: edgebBox.w,\n          h: edgebBox.h\n        }) // dummy bbox, needed for format compliance\n      }));\n    }\n    // check for annotations\n    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {\n      var extension = self.getOrCreateExtension(arc);\n      var annotExt = this.getAnnotationExtension(edge);\n      extension.add(annotExt);\n    }\n\n    // add info for hidden edges\n    if (edge.hidden()) {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sbgnviz><hidden/></sbgnviz>\");\n    }\n\n    // add info about edge type\n    // since curve style is not standard we shouldn't have it for either version\n    if (edge.css('curve-style') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<curveStyle>\" + edge.css('curve-style') + \"</curveStyle>\");\n    }\n    if (edge.data('sif-meta') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sifMetaEdge>true</sifMetaEdge>\");\n    }\n    return arc;\n  };\n  jsonToSbgnml.addGlyphBbox = function (node) {\n    var padding = node.padding();\n    var borderWidth = Number(node.css(\"border-width\").replace(\"px\", \"\"));\n    var _class = node.data('class');\n    var width = node.outerWidth() - borderWidth;\n    var height = node.outerHeight() - borderWidth;\n    // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (node.data('ports').length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = node.data('ports')[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports\n        width /= ratio;\n        height /= ratio;\n      }\n    }\n    var x = node.position().x - width / 2;\n    var y = node.position().y - height / 2;\n    //var x =node._private.position.x - width/2 - padding;    \n    //var y = node._private.position.y - height/2 - padding;\n    //var x = node._private.position.x - width/2;\n    //var y = node._private.position.y - height/2;\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: width,\n      h: height\n    });\n  };\n  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {\n    boxBbox = boxGlyph.bbox;\n    var borderWidth = node.data()['border-width'];\n    var padding = node.padding();\n    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);\n    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2);\n    //var x = boxBbox.x / 100 * node.width();\n    //var y = boxBbox.y / 100 * node.height();\n\n    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);\n    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: boxBbox.w,\n      h: boxBbox.h\n    });\n  };\n  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'state variable'\n    });\n    var state = new libsbgnjs.StateType();\n    if (typeof node.state.value != 'undefined') state.value = node.state.value;\n    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;\n    glyph.setState(state);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addBindingBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'binding region'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.region.variable != 'undefined') label.text = node.region.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addResidueBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'residue variable'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.residue.variable != 'undefined') label.text = node.residue.variable;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'unit of information'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.label.text != 'undefined') label.text = node.label.text;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n\n    // assign correct entity tag for AF case\n    var entityName = null;\n    switch (mainGlyph._private.data[\"class\"]) {\n      case 'BA unspecified entity':\n        entityName = \"unspecified entity\";\n        break;\n      case 'BA simple chemical':\n        entityName = \"simple chemical\";\n        break;\n      case 'BA macromolecule':\n        entityName = \"macromolecule\";\n        break;\n      case 'BA nucleic acid feature':\n        entityName = \"nucleic acid feature\";\n        break;\n      case 'BA perturbing agent':\n        entityName = \"perturbation\";\n        break;\n      case 'BA complex':\n        entityName = \"complex\";\n        break;\n    }\n    // entity tag aren't always there, only for AF\n    // but we still need to keep this information for unknown map type\n    if (entityName) {\n      glyph.setEntity(new libsbgnjs.EntityType({\n        name: entityName\n      }));\n    }\n    return glyph;\n  };\n  jsonToSbgnml.childOfNone = function (ele, nodes) {\n    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;\n  };\n  return jsonToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/json-to-sbml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar libsbml = __webpack_require__(/*! libsbmljs_stable */ \"libsbmljs_stable\");\nvar libsbmlInstance = libsbml();\nvar pkgVersion = (__webpack_require__(/*! ../../package.json */ \"./package.json\").version); // need info about sbgnviz to put in xml\nvar pkgName = (__webpack_require__(/*! ../../package.json */ \"./package.json\").name);\nvar prettyprint = (__webpack_require__(/*! pretty-data */ \"pretty-data\").pd);\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"nwt:mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"nwt:extraInfo\"\n});\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n  var nodesToSbo = {\n    \"rna\": 278,\n    \"complex sbml\": 253,\n    \"hypothetical complex\": 289,\n    \"degradation\": 291,\n    \"drug\": 298,\n    \"gene\": 243,\n    \"protein\": 252,\n    \"ion\": 327,\n    \"ion channel\": 284,\n    \"phenotype sbml\": 358,\n    \"receptor\": 244,\n    \"simple molecule\": 247,\n    \"truncated protein\": 248,\n    \"unknown molecule\": 285,\n    \"and\": 173,\n    \"or\": 174,\n    \"not\": 238,\n    \"unknown logical operator\": 398\n  };\n  var reducedNotationEdge = {\n    \"positive influence sbml\": 171,\n    \"negative influence\": 407,\n    \"reduced modulation\": 344,\n    \"reduced stimulation\": 411,\n    \"reduced trigger\": 168,\n    \"unknown negative influence\": 169,\n    \"unknown positive influence\": 172,\n    \"unknown reduced stimulation\": 170,\n    \"unknown reduced modulation\": 342,\n    \"unknown reduced trigger\": 205\n  };\n  var modifierNotationEdge = {\n    \"modulation\": 594,\n    \"stimulation\": 459,\n    \"catalysis\": 13,\n    \"inhibition\": 537,\n    \"trigger\": 461,\n    \"unknown inhibition\": 536,\n    \"unknown catalysis\": 462\n  };\n  var twoOrThreeEdge = {\n    \"consumption\": 1,\n    \"production\": 1,\n    \"transport\": 1,\n    \"transcription consumptio\": 1,\n    \"transcription production\": 1,\n    \"translation consumption\": 1,\n    \"translation production\": 1\n  };\n  function jsonToSbml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  jsonToSbml.createSbml = function (filename) {\n    var jsObj = jsonToSbml.buildJsObj(filename);\n    return jsObj;\n  };\n\n  /*\r\n      Here are the role strings:\r\n      1 - substrate, 2 - product, 3 - sidesubstrate, 4 - sideproduct, 5 - modifier\r\n      6 - activator, 7 - inhibitor\r\n  */\n\n  jsonToSbml.buildJsObj = function (filename) {\n    var edges = cy.edges();\n    var nodes = cy.nodes();\n    var sbmlDoc = new libsbmlInstance.SBMLDocument(3, 2);\n    var model = sbmlDoc.createModel();\n    model.setId('model1');\n\n    // Layout Information\n    sbmlDoc.enablePackage(libsbmlInstance.LayoutExtension.prototype.getXmlnsL3V1V1(), 'layout', true);\n    sbmlDoc.setPackageRequired('layout', false);\n    var layoutPlugin = libsbmlInstance.castObject(model.findPlugin('layout'), libsbmlInstance.LayoutModelPlugin);\n    var layout = layoutPlugin.createLayout();\n    layout.setId(\"layout_1\");\n    var dim = layout.getDimensions();\n    var box = cy.elements().boundingBox();\n    dim.setWidth(box.w);\n    dim.setHeight(box.h);\n\n    // Create compartment\n    for (var i = 0; i < nodes.length; i++) {\n      var nodeClass = nodes[i]._private.data[\"class\"];\n      if (nodeClass !== \"compartment\") continue;\n      var comp = model.createCompartment();\n      var compId = nodes[i]._private.data.id.replace(/-/g, \"_\");\n      comp.setId(compId);\n      comp.setSize(1);\n      comp.setConstant(true);\n      if (nodes[i]._private.data.label) comp.setName(nodes[i]._private.data.label);\n\n      // Add Layout Info for Compartment\n      var glyph = layout.createCompartmentGlyph();\n      glyph.setId(compId + '_glyph');\n      glyph.setCompartmentId(compId);\n      var _box = {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n      };\n      _box.x = nodes[i].position().x;\n      _box.y = nodes[i].position().y;\n      _box.w = nodes[i].width();\n      _box.h = nodes[i].height();\n      var bb = glyph.getBoundingBox();\n      bb.setX(_box.x - _box.w / 2);\n      bb.setY(_box.y - _box.h / 2);\n      bb.width = _box.w;\n      bb.height = _box.h;\n    }\n\n    // Set species\n    var infoId = 1;\n    var defaultNeeded = false;\n    for (var _i = 0; _i < nodes.length; _i++) {\n      var nodeClass = nodes[_i]._private.data[\"class\"];\n      var active = false,\n        hypothetical = false,\n        multimer = false;\n      if (nodeClass.includes('active')) {\n        nodeClass = nodeClass.replace('active', '');\n        active = true;\n      }\n      if (nodeClass.includes('hypothetical')) {\n        nodeClass = nodeClass.replace('hypothetical', '');\n        hypothetical = true;\n      }\n      if (nodeClass.includes('multimer')) {\n        nodeClass = nodeClass.replace('multimer', '');\n        multimer = true;\n      }\n      nodeClass = nodeClass.trim();\n      if (!jsonToSbml.isSpecies(nodeClass)) continue;\n      var newSpecies = model.createSpecies();\n      if (nodesToSbo[nodeClass]) {\n        newSpecies.setSBOTerm(nodesToSbo[nodeClass]);\n      }\n      var parent = nodes[_i].parent();\n      while (parent.length > 0 && parent.data('class') !== 'compartment') {\n        parent = parent.parent();\n      }\n      if (parent.length > 0 && parent.data('class') === 'compartment') {\n        newSpecies.setCompartment(parent.id().replace(/-/g, \"_\"));\n      } else {\n        defaultNeeded = true;\n        newSpecies.setCompartment('default');\n      }\n      newSpecies.setHasOnlySubstanceUnits(false);\n      newSpecies.setConstant(true);\n      newSpecies.setBoundaryCondition(true);\n      var new_id = nodes[_i].id();\n      var newStr = new_id.replace(/-/g, \"_\"); //Replacing - with _ because libsml doesn't allow - in id\n      newSpecies.setId(newStr);\n      if (nodes[_i]._private.data.label) {\n        newSpecies.setName(nodes[_i]._private.data.label);\n      }\n\n      // Add Layout Info for Species\n      var _glyph = layout.createSpeciesGlyph();\n      _glyph.setId(newStr + '_glyph');\n      _glyph.setSpeciesId(newStr);\n      var _box2 = {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n      };\n      var _bb = _glyph.getBoundingBox();\n      _box2.x = nodes[_i].position().x;\n      _box2.y = nodes[_i].position().y;\n      _box2.w = nodes[_i].width();\n      _box2.h = nodes[_i].height();\n      _bb.setX(_box2.x - _box2.w / 2);\n      _bb.setY(_box2.y - _box2.h / 2);\n      _bb.width = _box2.w;\n      _bb.height = _box2.h;\n\n      // Add State Info for Species as Annotation\n      if (!active && !hypothetical && !multimer && nodes[_i].data('statesandinfos').length == 0) continue;\n      var annotationString = '<nwt:extension xmlns:nwt=\"https://newteditor.org/\">';\n      annotationString += '<nwt:info nwt:multimer=\"' + multimer + '\" nwt:active=\"' + active + '\" nwt:hypothetical=\"' + hypothetical + '\" nwt:infoid=\"info_' + infoId + '\" nwt:id=\"' + newSpecies.getId() + '\">';\n      var _iterator = _createForOfIteratorHelper(nodes[_i].data('statesandinfos')),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          var boundingBox = item.bbox;\n          var absoluteCoords = classes.AuxiliaryUnit.getAbsoluteCoord(item, cy);\n          var boundingBoxStr = 'nwt:x=\"' + (absoluteCoords.x - boundingBox.w / 2) + '\" nwt:y=\"' + (absoluteCoords.y - boundingBox.h / 2) + '\" nwt:w=\"' + boundingBox.w + '\" nwt:h=\"' + boundingBox.h + '\"';\n          if (item.clazz == \"residue variable\") {\n            annotationString += '<nwt:residuevariable ' + boundingBoxStr + '>' + item.residue.variable + '</nwt:residuevariable>';\n          } else if (item.clazz == \"binding region\") {\n            annotationString += '<nwt:bindingregion ' + boundingBoxStr + '>' + item.region.variable + '</nwt:bindingregion>';\n          } else if (item.clazz == \"unit of information\") {\n            annotationString += '<nwt:unitinfo ' + boundingBoxStr + '>' + item.label.text + '</nwt:unitinfo>';\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      annotationString += '</nwt:info>';\n      annotationString += '</nwt:extension>';\n      infoId += 1;\n      newSpecies.setAnnotation(annotationString);\n    }\n\n    // The right hand side of -> denotes the type in the syntax below.\n    // Building process array: {process: processNode -> cy node, sources: [sourceEdges] -> list[cy edge], \n    //                      targets: [targetEdges]: list[cy edge], modifiers: [modifierEdges] -> list[cy edge]}\n    var processes = [];\n    nodes.forEach(function (ele, i) {\n      var eleClass = ele.data('class').replace('active', '').replace('hypothetical', '').replace('multimer', '').trim();\n      if (!jsonToSbml.isProcessNode(eleClass)) return;\n      var connectedEdges = ele.connectedEdges();\n      var sources = [],\n        targets = [],\n        modifiers = [];\n      var eleId = ele.id();\n      connectedEdges.forEach(function (edge) {\n        if (edge.source().id() == eleId) {\n          targets.push(edge);\n          return;\n        }\n        if (jsonToSbml.isModifier(edge.data('class'))) {\n          if (!jsonToSbml.isLogicalOperatorNode(edge.source().data('class'))) modifiers.push(edge);\n          return;\n        }\n        sources.push(edge);\n      });\n      processes.push({\n        \"process\": ele,\n        \"sources\": sources,\n        \"targets\": targets,\n        \"modifiers\": modifiers\n      });\n    });\n    var _iterator2 = _createForOfIteratorHelper(processes.entries()),\n      _step2;\n    try {\n      var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            i = _step2$value[0],\n            processArray = _step2$value[1];\n          var process = processArray.process;\n          var processClass = process.data('class');\n          var processId = process.id().replace(/-/g, '_');\n          rxn = model.createReaction();\n          rxn.setId('process_' + processId);\n          rxn.setReversible(false);\n\n          // Parent Info\n          var parent = process.parent();\n          while (parent.length > 0 && parent.data('class') !== 'compartment') {\n            parent = parent.parent();\n          }\n          if (parent.length > 0 && parent.data('class') === 'compartment') {\n            rxn.setCompartment(parent.id().replace(/-/g, \"_\"));\n          } else {\n            defaultNeeded = true;\n            rxn.setCompartment('default');\n          }\n          var _iterator4 = _createForOfIteratorHelper(processArray.sources),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var sourceEdge = _step4.value;\n              var _sourceId = sourceEdge.source().id().replace(/-/g, '_');\n              var spr1 = rxn.createReactant();\n              spr1.setSpecies(_sourceId);\n              spr1.setConstant(true);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          var _iterator5 = _createForOfIteratorHelper(processArray.targets),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var targetEdge = _step5.value;\n              var _targetId = targetEdge.target().id().replace(/-/g, '_');\n              var spr2 = rxn.createProduct();\n              spr2.setSpecies(_targetId);\n              spr2.setConstant(true);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          var _iterator6 = _createForOfIteratorHelper(processArray.modifiers),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var modifierEdge = _step6.value;\n              var _modifierId = modifierEdge.source().id().replace(/-/g, '_');\n              var _modifier = rxn.createModifier();\n              _modifier.setSpecies(_modifierId);\n              _modifier.setSBOTerm(modifierNotationEdge[modifierEdge.data('class')]);\n            }\n\n            //Set sbo term for reaction\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          var sourceEdgeClass = 'undefined',\n            targetEdgeClass = 'undefined';\n          if (processArray.sources[0]) sourceEdgeClass = processArray.sources[0].data('class');\n          if (processArray.targets[0]) targetEdgeClass = processArray.targets[0].data('class');\n          if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"process\") rxn.setSBOTerm(176);else if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"omitted process\") rxn.setSBOTerm(397);else if ((sourceEdgeClass == \"consumption\" || sourceEdgeClass == \"undefined\") && (targetEdgeClass == \"production\" || targetEdgeClass == \"undefined\") && processClass == \"uncertain process\") rxn.setSBOTerm(396);else if (processClass == \"truncated process\") rxn.setSBOTerm(178);else if (processClass == \"association\") rxn.setSBOTerm(177);else if (processClass == \"dissociation\") rxn.setSBOTerm(180);else if (sourceEdgeClass == \"transcription consumption\" || targetEdgeClass == \"transcription production\") rxn.setSBOTerm(183);else if (sourceEdgeClass == \"translation consumption\" || targetEdgeClass == \"translation production\") rxn.setSBOTerm(184);else if (targetEdgeClass == \"transport\") rxn.setSBOTerm(185);else rxn.setSBOTerm(176);\n\n          // Add Layout Info for Processes\n          var glyph = layout.createReactionGlyph();\n          glyph.setId(\"process_\" + (i + 1));\n          glyph.setReactionId(rxn.getId());\n          lineSegment = glyph.createLineSegment();\n          bbox = process.data('bbox');\n          bbox.x = process.position().x;\n          bbox.y = process.position().y;\n          ports1 = process.data('ports')[0], ports2 = process.data('ports')[1];\n          var direction = \"L-to-R\";\n          var portZeroIsInput = false,\n            portOneIsInput = false;\n          process.connectedEdges().forEach(function (ele) {\n            if (portZeroIsInput || portOneIsInput || !ele.data('porttarget')) return;\n            portZeroIsInput = ele.data('porttarget').endsWith('.1');\n            portOneIsInput = ele.data('porttarget').endsWith('.2');\n          });\n          if (portZeroIsInput && ports1.x < 0 || portOneIsInput && ports1.x > 0) direction = \"L-to-R\";else if (portZeroIsInput && ports1.x > 0 || portOneIsInput && ports1.x < 0) direction = \"R-to-L\";else if (portZeroIsInput && ports1.y < 0 || portOneIsInput && ports1.y > 0) direction = \"T-to-B\";else if (portZeroIsInput && ports1.y > 0 || portOneIsInput && ports1.y < 0) direction = \"B-to-T\";\n          var startX, startY, endX, endY;\n          if (direction == \"L-to-R\") {\n            startX = bbox.x - bbox.w / 2;\n            startY = bbox.y;\n            endX = bbox.x + bbox.w / 2;\n            endY = bbox.y;\n          } else if (direction == \"R-to-L\") {\n            startX = bbox.x + bbox.w / 2;\n            startY = bbox.y;\n            endX = bbox.x - bbox.w / 2;\n            endY = bbox.y;\n          } else if (direction == \"B-to-T\") {\n            startX = bbox.x;\n            startY = bbox.y + bbox.h / 2;\n            endX = bbox.x;\n            endY = bbox.y - bbox.h / 2;\n          } else {\n            startX = bbox.x;\n            startY = bbox.y - bbox.h / 2;\n            endX = bbox.x;\n            endY = bbox.y + bbox.h / 2;\n          }\n          start = lineSegment.getStart();\n          start.setX(startX);\n          start.setY(startY);\n          end = lineSegment.getEnd();\n          end.setX(endX);\n          end.setY(endY);\n          for (var j = 0; j < processArray.sources.length; j++) {\n            var substrate = processArray.sources[j];\n            var substrateId = substrate.source().id().replace(/-/g, '_');\n            var referenceGlyph = glyph.createSpeciesReferenceGlyph();\n            referenceGlyph.setSpeciesGlyphId(substrateId + '_glyph');\n            referenceGlyph.setRole(1);\n            referenceGlyph.setId(\"substrate_\" + (i + 1) + \"_\" + (j + 1));\n            lineSegment = referenceGlyph.createLineSegment();\n            lineStart = substrate.sourceEndpoint();\n            lineEnd = substrate.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n          for (var _j = 0; _j < processArray.targets.length; _j++) {\n            var product = processArray.targets[_j];\n            var productId = product.target().id().replace(/-/g, '_');\n            var _referenceGlyph = glyph.createSpeciesReferenceGlyph();\n            _referenceGlyph.setSpeciesGlyphId(productId + '_glyph');\n            _referenceGlyph.setRole(2);\n            _referenceGlyph.setId(\"product_\" + (i + 1) + \"_\" + (_j + 1));\n            lineSegment = _referenceGlyph.createLineSegment();\n            lineStart = product.sourceEndpoint();\n            lineEnd = product.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n          for (var _j2 = 0; _j2 < processArray.modifiers.length; _j2++) {\n            var modifier = processArray.modifiers[_j2];\n            var modifierId = modifier.source().id().replace(/-/g, '_');\n            var _referenceGlyph2 = glyph.createSpeciesReferenceGlyph();\n            _referenceGlyph2.setSpeciesGlyphId(modifierId + '_glyph');\n            _referenceGlyph2.setRole(5);\n            _referenceGlyph2.setId(\"modifier_\" + (i + 1) + \"_\" + (_j2 + 1));\n            lineSegment = _referenceGlyph2.createLineSegment();\n            lineStart = modifier.sourceEndpoint();\n            lineEnd = modifier.targetEndpoint();\n            start = lineSegment.getStart();\n            start.setX(lineStart.x);\n            start.setY(lineStart.y);\n            end = lineSegment.getEnd();\n            end.setX(lineEnd.x);\n            end.setY(lineEnd.y);\n          }\n        },\n        rxn,\n        lineSegment,\n        bbox,\n        ports1,\n        ports2,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end,\n        lineSegment,\n        lineStart,\n        lineEnd,\n        start,\n        end;\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        _loop();\n      }\n\n      // Add default compartment\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    if (defaultNeeded) {\n      var defaultCompartment = model.createCompartment();\n      defaultCompartment.setId('default');\n      defaultCompartment.setSize(1);\n      defaultCompartment.setConstant(true);\n    }\n\n    // Building reduced process array: {edge: edge arc -> cy edge, source: source node -> cy node, \n    //                      target: target node: cy node}\n    var reducedProcesses = [];\n    edges.forEach(function (ele) {\n      if (!jsonToSbml.isReducedArc(ele.data('class'))) {\n        return;\n      }\n      if (jsonToSbml.isLogicalOperatorNode(ele.source().data('class'))) {\n        return;\n      }\n      reducedProcesses.push({\n        edge: ele,\n        source: ele.source(),\n        target: ele.target()\n      });\n    });\n    var _iterator3 = _createForOfIteratorHelper(reducedProcesses.entries()),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n          _i2 = _step3$value[0],\n          reducedProcessArray = _step3$value[1];\n        var edgeId = reducedProcessArray.edge.id().replace(/-/g, '_');\n        var sourceId = reducedProcessArray.source.id().replace(/-/g, '_');\n        var targetId = reducedProcessArray.target.id().replace(/-/g, '_');\n        var _rxn = model.createReaction();\n        _rxn.setId('reduced_' + edgeId);\n        _rxn.setSBOTerm(reducedNotationEdge[reducedProcessArray.edge.data('class')]);\n        var spr1 = _rxn.createReactant();\n        spr1.setSpecies(sourceId);\n        var spr2 = _rxn.createProduct();\n        spr2.setSpecies(targetId);\n\n        // Layout Info for Reduced Process\n        var _glyph2 = layout.createReactionGlyph();\n        _glyph2.setId(\"reduced_\" + (_i2 + 1));\n        _glyph2.setReactionId(_rxn.getId());\n\n        // Modifier\n        var referenceGlyph = _glyph2.createSpeciesReferenceGlyph();\n        referenceGlyph.setSpeciesGlyphId(sourceId + '_glyph');\n        referenceGlyph.setRole(5);\n        referenceGlyph.setId(\"reduced_modulator_\" + (_i2 + 1));\n        var lineSegment = referenceGlyph.createLineSegment();\n        var lineStart = reducedProcessArray.edge.sourceEndpoint();\n        var lineEnd = reducedProcessArray.edge.targetEndpoint();\n        var start = lineSegment.getStart();\n        start.setX(lineStart.x);\n        start.setY(lineStart.y);\n        var end = lineSegment.getEnd();\n        end.setX(lineEnd.x);\n        end.setY(lineEnd.y);\n\n        // Product\n        var referenceGlyph2 = _glyph2.createSpeciesReferenceGlyph();\n        referenceGlyph2.setSpeciesGlyphId(+'_glyph');\n        referenceGlyph2.setRole(5);\n        referenceGlyph2.setId(\"reduced_product_\" + (_i2 + 1));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    var writer = new libsbmlInstance.SBMLWriter();\n    var serializedSBML = writer.writeSBMLToString(sbmlDoc);\n    libsbmlInstance.destroy(sbmlDoc);\n    libsbmlInstance.destroy(writer);\n    return serializedSBML;\n  };\n  jsonToSbml.buildReactions = function (model) {};\n  jsonToSbml.isProcessNode = function (nodeClass) {\n    return nodeClass.endsWith(\"process\") || nodeClass == \"association\" || nodeClass == \"dissociation\";\n  };\n  jsonToSbml.isLogicalOperatorNode = function (nodeClass) {\n    return nodeClass == \"and\" || nodeClass == \"not\" || nodeClass == \"or\" || nodeClass == \"unknown logical operator\";\n  };\n  jsonToSbml.isSpecies = function (nodeClass) {\n    return !jsonToSbml.isLogicalOperatorNode(nodeClass) && !jsonToSbml.isProcessNode(nodeClass) && nodeClass != \"compartment\";\n  };\n  jsonToSbml.isModifier = function (edgeClass) {\n    if (modifierNotationEdge[edgeClass]) return true;\n    return false;\n  };\n  jsonToSbml.isReducedArc = function (edgeClass) {\n    if (reducedNotationEdge[edgeClass]) return true;\n    return false;\n  };\n  jsonToSbml.buildString = function (obj) {};\n  jsonToSbml.getRenderExtensionSbgnml = function (renderInfo) {};\n  jsonToSbml.getAnnotationExtension = function (cyElement) {};\n  jsonToSbml.getGlyphSbgnml = function (node, version) {\n    var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  };\n  jsonToSbml.getOrCreateExtension = function (element) {};\n  jsonToSbml.getArcSbgnml = function (edge, version) {\n    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  };\n  jsonToSbml.addGlyphBbox = function (node) {};\n  jsonToSbml.addStateAndInfoBbox = function (node, boxGlyph) {};\n  jsonToSbml.addStateBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addBindingBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addResidueBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.addInfoBoxGlyph = function (node, id, mainGlyph) {};\n  jsonToSbml.childOfNone = function (ele, nodes) {};\n  return jsonToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var elementUtilities, cy;\n  function jsonToSif(param) {\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  function isValidEnd(node) {\n    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';\n  }\n  jsonToSif.convert = function () {\n    var lines = [];\n    var edges = cy.edges().filter(function (edge) {\n      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());\n    });\n    var nodes = cy.nodes().filter(function (node) {\n      return elementUtilities.isSIFNode(node);\n    });\n    nodes = nodes.not(edges.connectedNodes());\n    var setToStr = function setToStr(set) {\n      if (!set) {\n        return '';\n      }\n      return Object.keys(set).join(';');\n    };\n    var getLabel = function getLabel(node) {\n      return node.data('label');\n    };\n    var isValidLabel = function isValidLabel(label) {\n      return !!label;\n    };\n    edges.forEach(function (edge) {\n      var srcNames, tgtNames;\n      var getNames = function getNames(node) {\n        var names;\n        if (node.isParent()) {\n          names = node.children().map(getLabel);\n        } else {\n          names = [getLabel(node)];\n        }\n        return names && names.filter(isValidLabel);\n      };\n      var srcNames = getNames(edge.source());\n      var tgtNames = getNames(edge.target());\n      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {\n        return;\n      }\n      var type = edge.data('class');\n      var pcIDSet = edge.data('pcIDSet');\n      var siteLocSet = edge.data('siteLocSet');\n      var pcIDs = setToStr(pcIDSet);\n      var siteLocations = setToStr(siteLocSet);\n      srcNames.forEach(function (srcName) {\n        tgtNames.forEach(function (tgtName) {\n          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\\t');\n          lines.push(line);\n        });\n      });\n    });\n    nodes.forEach(function (node) {\n      var label = getLabel(node);\n      if (label) {\n        lines.push(label);\n      }\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return jsonToSif;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2lmLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsImpzb25Ub1NpZiIsInBhcmFtIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImlzVmFsaWRFbmQiLCJub2RlIiwiaXNTSUZOb2RlIiwiZGF0YSIsImNvbnZlcnQiLCJsaW5lcyIsImVkZ2VzIiwiZmlsdGVyIiwiZWRnZSIsImlzU0lGRWRnZSIsInNvdXJjZSIsInRhcmdldCIsIm5vZGVzIiwibm90IiwiY29ubmVjdGVkTm9kZXMiLCJzZXRUb1N0ciIsInNldCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiZ2V0TGFiZWwiLCJpc1ZhbGlkTGFiZWwiLCJsYWJlbCIsImZvckVhY2giLCJzcmNOYW1lcyIsInRndE5hbWVzIiwiZ2V0TmFtZXMiLCJuYW1lcyIsImlzUGFyZW50IiwiY2hpbGRyZW4iLCJtYXAiLCJsZW5ndGgiLCJ0eXBlIiwicGNJRFNldCIsInNpdGVMb2NTZXQiLCJwY0lEcyIsInNpdGVMb2NhdGlvbnMiLCJzcmNOYW1lIiwidGd0TmFtZSIsImxpbmUiLCJwdXNoIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvanNvbi10by1zaWYtY29udmVydGVyLWZhY3RvcnkuanM/NzQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIgZWxlbWVudFV0aWxpdGllcywgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIGpzb25Ub1NpZihwYXJhbSkge1xyXG4gICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc1ZhbGlkRW5kKG5vZGUpIHtcclxuICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGTm9kZSggbm9kZSApIHx8IG5vZGUuZGF0YSgnY2xhc3MnKSA9PSAndG9wb2xvZ3kgZ3JvdXAnO1xyXG4gIH1cclxuXHJcbiAganNvblRvU2lmLmNvbnZlcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBsaW5lcyA9IFtdO1xyXG5cclxuICAgIHZhciBlZGdlcyA9IGN5LmVkZ2VzKCkuZmlsdGVyKCBmdW5jdGlvbiggZWRnZSApIHtcclxuICAgICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuaXNTSUZFZGdlKCBlZGdlIClcclxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnNvdXJjZSgpIClcclxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnRhcmdldCgpICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIG5vZGVzID0gY3kubm9kZXMoKS5maWx0ZXIoIGZ1bmN0aW9uKCBub2RlICkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5pc1NJRk5vZGUoIG5vZGUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBub2RlcyA9IG5vZGVzLm5vdCggZWRnZXMuY29ubmVjdGVkTm9kZXMoKSApO1xyXG5cclxuICAgIHZhciBzZXRUb1N0ciA9IGZ1bmN0aW9uKHNldCkge1xyXG4gICAgICBpZiAoIXNldCkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNldCkuam9pbignOycpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2V0TGFiZWwgPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHJldHVybiBub2RlLmRhdGEoJ2xhYmVsJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBpc1ZhbGlkTGFiZWwgPSBmdW5jdGlvbihsYWJlbCl7XHJcbiAgICAgIHJldHVybiAhIWxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGVkZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBlZGdlICkge1xyXG4gICAgICB2YXIgc3JjTmFtZXMsIHRndE5hbWVzO1xyXG5cclxuICAgICAgdmFyIGdldE5hbWVzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHZhciBuYW1lcztcclxuXHJcbiAgICAgICAgaWYgKG5vZGUuaXNQYXJlbnQoKSkge1xyXG4gICAgICAgICAgbmFtZXMgPSAgbm9kZS5jaGlsZHJlbigpLm1hcCggZ2V0TGFiZWwgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWVzID0gWyBnZXRMYWJlbChub2RlKSBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWVzICYmIG5hbWVzLmZpbHRlciggaXNWYWxpZExhYmVsICk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgc3JjTmFtZXMgPSBnZXROYW1lcyhlZGdlLnNvdXJjZSgpKTtcclxuICAgICAgdmFyIHRndE5hbWVzID0gZ2V0TmFtZXMoZWRnZS50YXJnZXQoKSk7XHJcblxyXG4gICAgICBpZiAoICFzcmNOYW1lcyB8fCAhdGd0TmFtZXMgfHwgc3JjTmFtZXMubGVuZ3RoID09IDAgfHwgdGd0TmFtZXMubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdHlwZSA9IGVkZ2UuZGF0YSgnY2xhc3MnKTtcclxuICAgICAgdmFyIHBjSURTZXQgPSBlZGdlLmRhdGEoJ3BjSURTZXQnKTtcclxuICAgICAgdmFyIHNpdGVMb2NTZXQgPSBlZGdlLmRhdGEoJ3NpdGVMb2NTZXQnKTtcclxuICAgICAgdmFyIHBjSURzID0gc2V0VG9TdHIoIHBjSURTZXQgKTtcclxuICAgICAgdmFyIHNpdGVMb2NhdGlvbnMgPSBzZXRUb1N0ciggc2l0ZUxvY1NldCApO1xyXG5cclxuICAgICAgc3JjTmFtZXMuZm9yRWFjaCggc3JjTmFtZSA9PiB7XHJcbiAgICAgICAgdGd0TmFtZXMuZm9yRWFjaCggdGd0TmFtZSA9PiB7XHJcbiAgICAgICAgICB2YXIgbGluZSA9IFsgc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSwgcGNJRHMsIHNpdGVMb2NhdGlvbnMgXS5qb2luKCAnXFx0JyApO1xyXG4gICAgICAgICAgbGluZXMucHVzaCggbGluZSApO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIG5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBub2RlICkge1xyXG4gICAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbCggbm9kZSApO1xyXG5cclxuICAgICAgaWYgKCBsYWJlbCApIHtcclxuICAgICAgICBsaW5lcy5wdXNoKCBsYWJlbCApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIHRleHQgPSBsaW5lcy5qb2luKCAnXFxuJyApO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGpzb25Ub1NpZjtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUUxQixJQUFJQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV4QixTQUFTQyxTQUFTQSxDQUFDQyxLQUFLLEVBQUU7SUFDeEJILGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbkM7RUFFQSxTQUFTQyxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7SUFDeEIsT0FBT1AsZ0JBQWdCLENBQUNRLFNBQVMsQ0FBRUQsSUFBSyxDQUFDLElBQUlBLElBQUksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQjtFQUNyRjtFQUVBUCxTQUFTLENBQUNRLE9BQU8sR0FBRyxZQUFXO0lBQzdCLElBQUlDLEtBQUssR0FBRyxFQUFFO0lBRWQsSUFBSUMsS0FBSyxHQUFHWCxFQUFFLENBQUNXLEtBQUssQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBRSxVQUFVQyxJQUFJLEVBQUc7TUFDOUMsT0FBT2QsZ0JBQWdCLENBQUNlLFNBQVMsQ0FBRUQsSUFBSyxDQUFDLElBQ3BDUixVQUFVLENBQUVRLElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUUsQ0FBQyxJQUMzQlYsVUFBVSxDQUFFUSxJQUFJLENBQUNHLE1BQU0sQ0FBQyxDQUFFLENBQUM7SUFDbEMsQ0FBRSxDQUFDO0lBRUgsSUFBSUMsS0FBSyxHQUFHakIsRUFBRSxDQUFDaUIsS0FBSyxDQUFDLENBQUMsQ0FBQ0wsTUFBTSxDQUFFLFVBQVVOLElBQUksRUFBRztNQUM5QyxPQUFPUCxnQkFBZ0IsQ0FBQ1EsU0FBUyxDQUFFRCxJQUFLLENBQUM7SUFDM0MsQ0FBRSxDQUFDO0lBRUhXLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxHQUFHLENBQUVQLEtBQUssQ0FBQ1EsY0FBYyxDQUFDLENBQUUsQ0FBQztJQUUzQyxJQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBWUMsR0FBRyxFQUFFO01BQzNCLElBQUksQ0FBQ0EsR0FBRyxFQUFFO1FBQ1IsT0FBTyxFQUFFO01BQ1g7TUFFQSxPQUFPQyxNQUFNLENBQUNDLElBQUksQ0FBQ0YsR0FBRyxDQUFDLENBQUNHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFZbkIsSUFBSSxFQUFFO01BQzVCLE9BQU9BLElBQUksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSWtCLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFZQyxLQUFLLEVBQUM7TUFDaEMsT0FBTyxDQUFDLENBQUNBLEtBQUs7SUFDaEIsQ0FBQztJQUVEaEIsS0FBSyxDQUFDaUIsT0FBTyxDQUFFLFVBQVVmLElBQUksRUFBRztNQUM5QixJQUFJZ0IsUUFBUSxFQUFFQyxRQUFRO01BRXRCLElBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFZekIsSUFBSSxFQUFFO1FBQzVCLElBQUkwQixLQUFLO1FBRVQsSUFBSTFCLElBQUksQ0FBQzJCLFFBQVEsQ0FBQyxDQUFDLEVBQUU7VUFDbkJELEtBQUssR0FBSTFCLElBQUksQ0FBQzRCLFFBQVEsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBRVYsUUFBUyxDQUFDO1FBQzFDLENBQUMsTUFDSTtVQUNETyxLQUFLLEdBQUcsQ0FBRVAsUUFBUSxDQUFDbkIsSUFBSSxDQUFDLENBQUU7UUFDOUI7UUFFQSxPQUFPMEIsS0FBSyxJQUFJQSxLQUFLLENBQUNwQixNQUFNLENBQUVjLFlBQWEsQ0FBQztNQUM5QyxDQUFDO01BRUQsSUFBSUcsUUFBUSxHQUFHRSxRQUFRLENBQUNsQixJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDLENBQUM7TUFDdEMsSUFBSWUsUUFBUSxHQUFHQyxRQUFRLENBQUNsQixJQUFJLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUM7TUFFdEMsSUFBSyxDQUFDYSxRQUFRLElBQUksQ0FBQ0MsUUFBUSxJQUFJRCxRQUFRLENBQUNPLE1BQU0sSUFBSSxDQUFDLElBQUlOLFFBQVEsQ0FBQ00sTUFBTSxJQUFJLENBQUMsRUFBRztRQUM1RTtNQUNGO01BRUEsSUFBSUMsSUFBSSxHQUFHeEIsSUFBSSxDQUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDO01BQzdCLElBQUk4QixPQUFPLEdBQUd6QixJQUFJLENBQUNMLElBQUksQ0FBQyxTQUFTLENBQUM7TUFDbEMsSUFBSStCLFVBQVUsR0FBRzFCLElBQUksQ0FBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQztNQUN4QyxJQUFJZ0MsS0FBSyxHQUFHcEIsUUFBUSxDQUFFa0IsT0FBUSxDQUFDO01BQy9CLElBQUlHLGFBQWEsR0FBR3JCLFFBQVEsQ0FBRW1CLFVBQVcsQ0FBQztNQUUxQ1YsUUFBUSxDQUFDRCxPQUFPLENBQUUsVUFBQWMsT0FBTyxFQUFJO1FBQzNCWixRQUFRLENBQUNGLE9BQU8sQ0FBRSxVQUFBZSxPQUFPLEVBQUk7VUFDM0IsSUFBSUMsSUFBSSxHQUFHLENBQUVGLE9BQU8sRUFBRUwsSUFBSSxFQUFFTSxPQUFPLEVBQUVILEtBQUssRUFBRUMsYUFBYSxDQUFFLENBQUNqQixJQUFJLENBQUUsSUFBSyxDQUFDO1VBQ3hFZCxLQUFLLENBQUNtQyxJQUFJLENBQUVELElBQUssQ0FBQztRQUNwQixDQUFFLENBQUM7TUFDTCxDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7SUFFSDNCLEtBQUssQ0FBQ1csT0FBTyxDQUFFLFVBQVV0QixJQUFJLEVBQUc7TUFDOUIsSUFBSXFCLEtBQUssR0FBR0YsUUFBUSxDQUFFbkIsSUFBSyxDQUFDO01BRTVCLElBQUtxQixLQUFLLEVBQUc7UUFDWGpCLEtBQUssQ0FBQ21DLElBQUksQ0FBRWxCLEtBQU0sQ0FBQztNQUNyQjtJQUNGLENBQUUsQ0FBQztJQUVILElBQUltQixJQUFJLEdBQUdwQyxLQUFLLENBQUNjLElBQUksQ0FBRSxJQUFLLENBQUM7SUFDN0IsT0FBT3NCLElBQUk7RUFDYixDQUFDO0VBRUQsT0FBTzdDLFNBQVM7QUFDbEIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sif-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Listen document for keyboard inputs and exports the utilities that it makes use of\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  function keyboardInputUtilities(param) {\n    // Listen to events on network container\n    $(document).on('keydown', '.integer-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isIntegerFieldInput(value, e);\n    });\n    $(document).on('keydown', '.float-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isFloatFieldInput(value, e);\n    });\n    $(document).on('change', '.integer-input,.float-input', function (e) {\n      var min = $(this).attr('min');\n      var max = $(this).attr('max');\n      var value = parseFloat($(this).val());\n      if (min != null) {\n        min = parseFloat(min);\n      }\n      if (max != null) {\n        max = parseFloat(max);\n      }\n      if (min != null && value < min) {\n        value = min;\n      } else if (max != null && value > max) {\n        value = max;\n      }\n      if (isNaN(value)) {\n        if (min != null) {\n          value = min;\n        } else if (max != null) {\n          value = max;\n        } else {\n          value = 0;\n        }\n      }\n      $(this).val(\"\" + value);\n    });\n  }\n  keyboardInputUtilities.isNumberKey = function (e) {\n    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;\n  };\n  keyboardInputUtilities.isDotKey = function (e) {\n    return e.keyCode === 190;\n  };\n  keyboardInputUtilities.isMinusSignKey = function (e) {\n    return e.keyCode === 109 || e.keyCode === 189;\n  };\n  keyboardInputUtilities.isLeftKey = function (e) {\n    return e.keyCode === 37;\n  };\n  keyboardInputUtilities.isRightKey = function (e) {\n    return e.keyCode === 39;\n  };\n  keyboardInputUtilities.isBackspaceKey = function (e) {\n    return e.keyCode === 8;\n  };\n  keyboardInputUtilities.isTabKey = function (e) {\n    return e.keyCode === 9;\n  };\n  keyboardInputUtilities.isEnterKey = function (e) {\n    return e.keyCode === 13;\n  };\n  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {\n    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);\n  };\n  keyboardInputUtilities.isFloatFieldInput = function (value, e) {\n    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);\n  };\n  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {\n    return e.ctrlKey || e.metaKey;\n  };\n  return keyboardInputUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/keyboard-input-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nmodule.exports = function () {\n  var cy, mainUtilities;\n  function layoutLoader(param) {\n    cy = param.sbgnCyInstance.getCy();\n    mainUtilities = param.mainUtilities;\n  }\n  layoutLoader.load = function (layoutText, byName) {\n    var lines = tdParser.getLinesArray(layoutText);\n    var posMap = {};\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n      var nodeId;\n      if (byName) {\n        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);\n        if (matchingNodes.length === 0) {\n          return;\n        }\n\n        // ideally there is only one matching node\n        // use the first one in any case\n        nodeId = matchingNodes.id();\n      } else {\n        nodeId = tabs[0];\n      }\n      var posX = parseFloat(tabs[1]);\n      var posY = parseFloat(tabs[2]);\n      posMap[nodeId] = {\n        x: posX,\n        y: posY\n      };\n    });\n    var options = {\n      name: 'preset',\n      positions: posMap,\n      fit: false\n    };\n    mainUtilities.performLayout(options);\n  };\n  layoutLoader.getNodesByName = function (name) {\n    return cy.nodes().filter('[label=\"' + name + '\"]');\n  };\n  return layoutLoader;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC1sb2FkZXItZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsdUVBQXdCLENBQUM7QUFFaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVc7RUFDMUIsSUFBSUMsRUFBRSxFQUFFQyxhQUFhO0VBRXJCLFNBQVNDLFlBQVlBLENBQUVDLEtBQUssRUFBRztJQUM3QkgsRUFBRSxHQUFHRyxLQUFLLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDakNKLGFBQWEsR0FBR0UsS0FBSyxDQUFDRixhQUFhO0VBQ3JDO0VBRUFDLFlBQVksQ0FBQ0ksSUFBSSxHQUFHLFVBQVVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBQ2pELElBQUlDLEtBQUssR0FBR2IsUUFBUSxDQUFDYyxhQUFhLENBQUVILFVBQVcsQ0FBQztJQUNoRCxJQUFJSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWZGLEtBQUssQ0FBQ0csT0FBTyxDQUFFLFVBQVVDLElBQUksRUFBRztNQUM5QixJQUFJQyxJQUFJLEdBQUdsQixRQUFRLENBQUNtQixZQUFZLENBQUVGLElBQUssQ0FBQztNQUV4QyxJQUFJRyxNQUFNO01BRVYsSUFBS1IsTUFBTSxFQUFHO1FBQ1osSUFBSVMsYUFBYSxHQUFHZixZQUFZLENBQUNnQixjQUFjLENBQUVKLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztRQUM1RCxJQUFLRyxhQUFhLENBQUNFLE1BQU0sS0FBSyxDQUFDLEVBQUc7VUFDaEM7UUFDRjs7UUFFQTtRQUNBO1FBQ0FILE1BQU0sR0FBR0MsYUFBYSxDQUFDRyxFQUFFLENBQUMsQ0FBQztNQUM3QixDQUFDLE1BQ0k7UUFDSEosTUFBTSxHQUFHRixJQUFJLENBQUUsQ0FBQyxDQUFFO01BQ3BCO01BRUEsSUFBSU8sSUFBSSxHQUFHQyxVQUFVLENBQUVSLElBQUksQ0FBRSxDQUFDLENBQUcsQ0FBQztNQUNsQyxJQUFJUyxJQUFJLEdBQUdELFVBQVUsQ0FBRVIsSUFBSSxDQUFFLENBQUMsQ0FBRyxDQUFDO01BRWxDSCxNQUFNLENBQUVLLE1BQU0sQ0FBRSxHQUFHO1FBQUVRLENBQUMsRUFBRUgsSUFBSTtRQUFFSSxDQUFDLEVBQUVGO01BQUssQ0FBQztJQUN6QyxDQUFFLENBQUM7SUFFSCxJQUFJRyxPQUFPLEdBQUc7TUFDWkMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsU0FBUyxFQUFFakIsTUFBTTtNQUNqQmtCLEdBQUcsRUFBRTtJQUNQLENBQUM7SUFFRDVCLGFBQWEsQ0FBQzZCLGFBQWEsQ0FBRUosT0FBUSxDQUFDO0VBQ3hDLENBQUM7RUFFRHhCLFlBQVksQ0FBQ2dCLGNBQWMsR0FBRyxVQUFVUyxJQUFJLEVBQUc7SUFDN0MsT0FBTzNCLEVBQUUsQ0FBQytCLEtBQUssQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBRSxVQUFVLEdBQUdMLElBQUksR0FBRyxJQUFLLENBQUM7RUFDdEQsQ0FBQztFQUVELE9BQU96QixZQUFZO0FBQ3JCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtbG9hZGVyLWZhY3RvcnkuanM/ZjMwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGRQYXJzZXIgPSByZXF1aXJlKCcuL3RhYi1kZWxpbWV0ZWQtcGFyc2VyJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjeSwgbWFpblV0aWxpdGllcztcclxuXHJcbiAgZnVuY3Rpb24gbGF5b3V0TG9hZGVyKCBwYXJhbSApIHtcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICAgIG1haW5VdGlsaXRpZXMgPSBwYXJhbS5tYWluVXRpbGl0aWVzO1xyXG4gIH1cclxuXHJcbiAgbGF5b3V0TG9hZGVyLmxvYWQgPSBmdW5jdGlvbiggbGF5b3V0VGV4dCwgYnlOYW1lICkge1xyXG4gICAgdmFyIGxpbmVzID0gdGRQYXJzZXIuZ2V0TGluZXNBcnJheSggbGF5b3V0VGV4dCApO1xyXG4gICAgdmFyIHBvc01hcCA9IHt9O1xyXG5cclxuICAgIGxpbmVzLmZvckVhY2goIGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gICAgICB2YXIgdGFicyA9IHRkUGFyc2VyLmdldFRhYnNBcnJheSggbGluZSApO1xyXG5cclxuICAgICAgdmFyIG5vZGVJZDtcclxuXHJcbiAgICAgIGlmICggYnlOYW1lICkge1xyXG4gICAgICAgIHZhciBtYXRjaGluZ05vZGVzID0gbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lKCB0YWJzWyAwIF0gKTtcclxuICAgICAgICBpZiAoIG1hdGNoaW5nTm9kZXMubGVuZ3RoID09PSAwICkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWRlYWxseSB0aGVyZSBpcyBvbmx5IG9uZSBtYXRjaGluZyBub2RlXHJcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBvbmUgaW4gYW55IGNhc2VcclxuICAgICAgICBub2RlSWQgPSBtYXRjaGluZ05vZGVzLmlkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbm9kZUlkID0gdGFic1sgMCBdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcG9zWCA9IHBhcnNlRmxvYXQoIHRhYnNbIDEgXSApO1xyXG4gICAgICB2YXIgcG9zWSA9IHBhcnNlRmxvYXQoIHRhYnNbIDIgXSApO1xyXG5cclxuICAgICAgcG9zTWFwWyBub2RlSWQgXSA9IHsgeDogcG9zWCwgeTogcG9zWSB9O1xyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICBuYW1lOiAncHJlc2V0JyxcclxuICAgICAgcG9zaXRpb25zOiBwb3NNYXAsXHJcbiAgICAgIGZpdDogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgbWFpblV0aWxpdGllcy5wZXJmb3JtTGF5b3V0KCBvcHRpb25zICk7XHJcbiAgfTtcclxuXHJcbiAgbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lID0gZnVuY3Rpb24oIG5hbWUgKSB7XHJcbiAgICByZXR1cm4gY3kubm9kZXMoKS5maWx0ZXIoICdbbGFiZWw9XCInICsgbmFtZSArICdcIl0nICk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGxheW91dExvYWRlcjtcclxufTtcclxuIl0sIm5hbWVzIjpbInRkUGFyc2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjeSIsIm1haW5VdGlsaXRpZXMiLCJsYXlvdXRMb2FkZXIiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJsb2FkIiwibGF5b3V0VGV4dCIsImJ5TmFtZSIsImxpbmVzIiwiZ2V0TGluZXNBcnJheSIsInBvc01hcCIsImZvckVhY2giLCJsaW5lIiwidGFicyIsImdldFRhYnNBcnJheSIsIm5vZGVJZCIsIm1hdGNoaW5nTm9kZXMiLCJnZXROb2Rlc0J5TmFtZSIsImxlbmd0aCIsImlkIiwicG9zWCIsInBhcnNlRmxvYXQiLCJwb3NZIiwieCIsInkiLCJvcHRpb25zIiwibmFtZSIsInBvc2l0aW9ucyIsImZpdCIsInBlcmZvcm1MYXlvdXQiLCJub2RlcyIsImZpbHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/layout-loader-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  function layoutToText(param) {\n    cy = param.sbgnCyInstance.getCy();\n  }\n  layoutToText.convert = function (byName) {\n    var nodes = cy.nodes();\n    var lines = [];\n    nodes.map(function (node) {\n      var idOrName = byName ? node.data('label') : node.id();\n      var posX = node.position('x');\n      var posY = node.position('y');\n      var line = [idOrName, posX, posY].join('\\t');\n      lines.push(line);\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n  return layoutToText;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xheW91dC10by10ZXh0LWZhY3RvcnkuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJsYXlvdXRUb1RleHQiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwiYnlOYW1lIiwibm9kZXMiLCJsaW5lcyIsIm1hcCIsIm5vZGUiLCJpZE9yTmFtZSIsImRhdGEiLCJpZCIsInBvc1giLCJwb3NpdGlvbiIsInBvc1kiLCJsaW5lIiwiam9pbiIsInB1c2giLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzPzA0ZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgY3k7XHJcblxyXG4gIGZ1bmN0aW9uIGxheW91dFRvVGV4dCggcGFyYW0gKSB7XHJcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICBsYXlvdXRUb1RleHQuY29udmVydCA9IGZ1bmN0aW9uKCBieU5hbWUgKSB7XHJcbiAgICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xyXG4gICAgdmFyIGxpbmVzID0gW107XHJcblxyXG4gICAgbm9kZXMubWFwKCBmdW5jdGlvbiggbm9kZSApIHtcclxuICAgICAgdmFyIGlkT3JOYW1lID0gYnlOYW1lID8gbm9kZS5kYXRhKCdsYWJlbCcpIDogbm9kZS5pZCgpO1xyXG4gICAgICB2YXIgcG9zWCA9IG5vZGUucG9zaXRpb24oJ3gnKTtcclxuICAgICAgdmFyIHBvc1kgPSBub2RlLnBvc2l0aW9uKCd5Jyk7XHJcblxyXG4gICAgICB2YXIgbGluZSA9IFsgaWRPck5hbWUsIHBvc1gsIHBvc1kgXS5qb2luKCAnXFx0JyApO1xyXG4gICAgICBsaW5lcy5wdXNoKCBsaW5lICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIHRleHQgPSBsaW5lcy5qb2luKCAnXFxuJyApO1xyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGxheW91dFRvVGV4dDtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUMxQixJQUFJQyxFQUFFO0VBRU4sU0FBU0MsWUFBWUEsQ0FBRUMsS0FBSyxFQUFHO0lBQzdCRixFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUVBSCxZQUFZLENBQUNJLE9BQU8sR0FBRyxVQUFVQyxNQUFNLEVBQUc7SUFDeEMsSUFBSUMsS0FBSyxHQUFHUCxFQUFFLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLElBQUlDLEtBQUssR0FBRyxFQUFFO0lBRWRELEtBQUssQ0FBQ0UsR0FBRyxDQUFFLFVBQVVDLElBQUksRUFBRztNQUMxQixJQUFJQyxRQUFRLEdBQUdMLE1BQU0sR0FBR0ksSUFBSSxDQUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUdGLElBQUksQ0FBQ0csRUFBRSxDQUFDLENBQUM7TUFDdEQsSUFBSUMsSUFBSSxHQUFHSixJQUFJLENBQUNLLFFBQVEsQ0FBQyxHQUFHLENBQUM7TUFDN0IsSUFBSUMsSUFBSSxHQUFHTixJQUFJLENBQUNLLFFBQVEsQ0FBQyxHQUFHLENBQUM7TUFFN0IsSUFBSUUsSUFBSSxHQUFHLENBQUVOLFFBQVEsRUFBRUcsSUFBSSxFQUFFRSxJQUFJLENBQUUsQ0FBQ0UsSUFBSSxDQUFFLElBQUssQ0FBQztNQUNoRFYsS0FBSyxDQUFDVyxJQUFJLENBQUVGLElBQUssQ0FBQztJQUNwQixDQUFFLENBQUM7SUFFSCxJQUFJRyxJQUFJLEdBQUdaLEtBQUssQ0FBQ1UsSUFBSSxDQUFFLElBQUssQ0FBQztJQUM3QixPQUFPRSxJQUFJO0VBQ2IsQ0FBQztFQUVELE9BQU9uQixZQUFZO0FBQ3JCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/layout-to-text-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \r\n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\r\n */\n\nvar libUtilities = function libUtilities() {};\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9saWItdXRpbGl0aWVzLmpzP2JhYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogXHJcbiAqIFV0aWxpdHkgZmlsZSB0byBnZXQgYW5kIHNldCB0aGUgbGlicmFyaWVzIHRvIHdoaWNoIHNiZ252aXogaXMgZGVwZW5kZW50IGZyb20gYW55IGZpbGUuXHJcbiAqL1xyXG5cclxudmFyIGxpYlV0aWxpdGllcyA9IGZ1bmN0aW9uKCl7XHJcbn07XHJcblxyXG5saWJVdGlsaXRpZXMuc2V0TGlicyA9IGZ1bmN0aW9uKGxpYnMpIHtcclxuICB0aGlzLmxpYnMgPSBsaWJzO1xyXG59O1xyXG5cclxubGliVXRpbGl0aWVzLmdldExpYnMgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5saWJzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBsaWJVdGlsaXRpZXM7XHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFhLENBQzdCLENBQUM7QUFFREEsWUFBWSxDQUFDQyxPQUFPLEdBQUcsVUFBU0MsSUFBSSxFQUFFO0VBQ3BDLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0FBQ2xCLENBQUM7QUFFREYsWUFBWSxDQUFDRyxPQUFPLEdBQUcsWUFBVztFQUNoQyxPQUFPLElBQUksQ0FBQ0QsSUFBSTtBQUNsQixDQUFDO0FBRURFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTCxZQUFZIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * These are the main utilities to be directly utilized by the user interactions.\r\n * Idealy, this file is just required by index.js\r\n */\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var elementUtilities, jsonToSbgnml, sbgnmlToJson, sbmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;\n  var cy, options;\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToSbml = param.jsonToSbmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    sbmlToJson = param.sbmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    optionUtilities = param.optionUtilities;\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n    layoutLoader = param.layoutLoader;\n    layoutToText = param.layoutToText;\n    options = optionUtilities.getOptions();\n  }\n  mainUtilities.beforePerformLayout = function () {\n    var parents = cy.nodes(':parent');\n    var edges = cy.edges();\n    cy.startBatch();\n\n    // graphUtilities.disablePorts();\n\n    // TODO do this by using extension API\n    // removes all bendpoints for all edges in cytoscape instance\n    for (var i = 0; i < edges.length; i++) {\n      var edge = edges[i];\n      edge.removeClass('edgebendediting-hasbendpoints');\n      edge.removeClass('edgecontrolediting-hascontrolpoints');\n      edge.removeClass('edgebendediting-hasmultiplebendpoints');\n      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');\n      edge.data('cyedgebendeditingDistances', []);\n      edge.data('cyedgebendeditingWeights', []);\n      edge.data('cyedgecontroleditingDistances', []);\n      edge.data('cyedgecontroleditingWeights', []);\n    }\n    parents.removeData('minWidth');\n    parents.removeData('minHeight');\n    parents.removeData('minWidthBiasLeft');\n    parents.removeData('minWidthBiasRight');\n    parents.removeData('minHeightBiasTop');\n    parents.removeData('minHeightBiasBottom');\n    cy.endBatch();\n    if (parents.length > 0) cy.style().update();\n  };\n\n  // Expand given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodesToExpand = expandCollapse.expandableNodes(nodes);\n    if (nodesToExpand.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expand\", {\n        nodes: nodesToExpand\n      });\n    } else {\n      expandCollapse.expand(nodes);\n    }\n  };\n\n  // Collapse given nodes. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapse\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapse(nodes);\n    }\n  };\n\n  // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var complexes = cy.nodes(\"[class^='complex']\");\n    if (expandCollapse.collapsibleNodes(complexes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: complexes\n      });\n    } else {\n      expandCollapse.collapseRecursively(complexes);\n    }\n  };\n\n  // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes().filter(\"[class^='complex']\"));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.collapseAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = cy.nodes(':visible');\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapseRecursively(nodes);\n    }\n  };\n\n  // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.\n  mainUtilities.expandAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // Get expandCollapse api\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));\n    if (nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  };\n\n  // Increase border width to show nodes with hidden neighbors\n  mainUtilities.thickenBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth + 2);\n    });\n    eles.data(\"thickBorder\", true);\n    return eles;\n  };\n  // Decrease border width when hidden neighbors of the nodes become visible\n  mainUtilities.thinBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth - 2);\n    });\n    eles.removeData(\"thickBorder\");\n    return eles;\n  };\n  mainUtilities.hideElesSimple = function (eles) {\n    var viewUtilities = cy.viewUtilities('get');\n    if (eles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(eles);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: eles\n      });\n      nodesWithHiddenNeighbor = eles.neighborhood(\":visible\").nodes().difference(eles).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.hideNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact.\n  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.elements();\n    var nodesToShow = elementUtilities.extendNodeList(nodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide);\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showEles = function (eles) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var hiddenEles = eles.filter(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"show\",\n        param: hiddenEles\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  };\n\n  // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.showAll = function () {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (cy.elements().length === cy.elements(':visible').length) {\n      return;\n    }\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder);\n\n      // Batching\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"show\",\n        param: cy.elements()\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(cy.elements());\n    }\n  };\n\n  // Removes the given elements in a simple way. Considers 'undoable' option.\n  mainUtilities.deleteElesSimple = function (eles) {\n    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteElesSimple\", {\n        eles: eles\n      });\n    } else {\n      eles.remove();\n    }\n  };\n\n  // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.\n  // Considers 'undoable' option.\n  mainUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes();\n    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteNodesSmart\", {\n        firstTime: true,\n        eles: nodes\n      });\n    } else {\n      elementUtilities.deleteNodesSmart(nodes);\n    }\n  };\n  function isNeed2Highligth(eles2highligth) {\n    if (eles2highligth.length === 0) {\n      return false;\n    }\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClass = viewUtilities.getAllHighlightClasses()[0];\n    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');\n    if (highlightedEles.contains(eles2highligth)) {\n      return false;\n    }\n    return true;\n  }\n\n  // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightSelected = function (_eles) {\n    var elesToHighlight = _eles;\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightNeighbours = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Finds the elements whose label includes the given label and highlights processes of those elements.\n  // Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.searchByLabel = function (label) {\n    if (label.length == 0) {\n      return;\n    }\n    var nodesToHighlight = cy.nodes(\":visible\").filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      if (ele.data(\"label\") && ele.data(\"label\").toLowerCase().indexOf(label) >= 0) {\n        return true;\n      }\n      return false;\n    });\n    if (nodesToHighlight.length == 0) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    // Use this line for smart search\n    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: nodesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(nodesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.highlightProcesses = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n    var elesToHighlight = elementUtilities.extendNodeList(nodes);\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n    cy.elements().unselect();\n  };\n\n  // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.\n  mainUtilities.removeHighlights = function () {\n    if (elementUtilities.noneIsNotHighlighted()) {\n      return;\n    }\n\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"removeHighlights\");\n    } else {\n      viewUtilities.removeHighlights();\n    }\n    cy.style().update();\n  };\n  mainUtilities.loadLayoutData = function (layoutText, byName) {\n    layoutLoader.load(layoutText, byName);\n  };\n  mainUtilities.getLayoutText = function (byName) {\n    layoutToText.convert(byName);\n  };\n\n  // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter\n  // to a truthy value you can force an undable layout operation independant of 'undoable' option.\n  mainUtilities.performLayout = function (layoutOptions, notUndoable) {\n    if (!options.undoable || notUndoable) {\n      // 'notUndoable' flag can be used to have composite actions in undo/redo stack\n      // Things to do before performing layout\n      mainUtilities.beforePerformLayout();\n      var layout = cy.elements().filter(':visible').layout(layoutOptions);\n\n      // Check this for cytoscape.js backward compatibility\n      if (layout && layout.run) {\n        layout.run();\n      }\n    } else {\n      cy.undoRedo()[\"do\"](\"layout\", {\n        options: layoutOptions,\n        eles: cy.elements().filter(':visible')\n      });\n    }\n  };\n\n  // Creates an sbgnml file content from the exising graph and returns it.\n  mainUtilities.createSbgnml = function () {\n    return jsonToSbgnml.createSbgnml();\n  };\n  mainUtilities.createNwt = function () {\n    return jsonToNwt.createSbgnml();\n  };\n\n  // Converts given sbgnml data to a json object in a special format\n  // (http://js.cytoscape.org/#notation/elements-json) and returns it.\n  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {\n    return sbgnmlToJson.convert(data, urlParams);\n  };\n  mainUtilities.convertSbmlToJson = function (data, urlParams) {\n    var converted2 = sbmlToJson.convert(data, urlParams);\n    return converted2;\n  };\n  mainUtilities.convertNwtToJson = function (data) {\n    return nwtToJson.convert(data);\n  };\n\n  // Create the qtip contents of the given node and returns it.\n  mainUtilities.getQtipContent = function (node) {\n    return elementUtilities.getQtipContent(node);\n  };\n\n  // Change option\n  mainUtilities.setShowComplexName = function (showComplexName) {\n    options.showComplexName = showComplexName;\n    // make change active by triggering data which will trigger style update\n    cy.nodes('[class^=\"complex\"]').forEach(function (ele) {\n      ele.trigger(\"data\");\n    });\n  };\n\n  /*\r\n   * Sets the ordering of the given nodes.\r\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\r\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\r\n   * used to set the distance between the node center and the ports. The default port distance is 60.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      var param = {\n        nodes: nodes,\n        ordering: ordering,\n        portDistance: portDistance\n      };\n      cy.undoRedo()[\"do\"](\"setPortsOrdering\", param);\n    }\n    cy.style().update();\n  };\n\n  /**\r\n   * Get map properties from SBGNML file\r\n   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event\r\n   * return: map properties as object\r\n   */\n  mainUtilities.getMapProperties = function () {\n    if (elementUtilities.fileFormat !== undefined) {\n      if (elementUtilities.fileFormat == 'sbgnml') {\n        //this.showNodesSmart\n        return sbgnmlToJson.mapPropertiesToObj();\n      } else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sbml') return sbmlToJson.mapPropertiesToObj();else {\n        return;\n      }\n    } else {\n      return;\n    }\n  };\n  mainUtilities.doValidation = function (file) {\n    return sbgnmlToJson.doValidation(file);\n  };\n  mainUtilities.setCompoundPadding = function (newPaddingValue) {\n    options.compoundPadding = newPaddingValue;\n    optionUtilities.extendOptions(options);\n  };\n  mainUtilities.getCompoundPadding = function () {\n    return options.compoundPadding;\n  };\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var sbgnmlToJson, elementUtilities;\n  function nwtToJson(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    elementUtilities = param.elementUtilities;\n  }\n  function strToSet(str, splitBy) {\n    var set = {};\n    var list = str ? str.split(splitBy) : [];\n    list.forEach(function (member) {\n      set[member] = true;\n    });\n    return set;\n  }\n  function getFirstByTagName(arc, tagName) {\n    var els = arc.getElementsByTagName(tagName);\n    var val = els.length > 0 ? els[0].innerHTML : null;\n    return val;\n  }\n  var sifEdgePropHandlerMap = {\n    'pcIDSet': function pcIDSet(arc) {\n      var val = getFirstByTagName(arc, 'pcIDs');\n      return strToSet(val, /;| /);\n    },\n    'siteLocSet': function siteLocSet(arc) {\n      var val = getFirstByTagName(arc, 'siteLocations');\n      return strToSet(val, ';');\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(glyph) {\n      var val = getFirstByTagName(glyph, 'tooltip');\n      return val;\n    },\n    'infoboxes': function infoboxes(glyph, data) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(glyph) {\n          var val = getFirstByTagName(glyph, 'tooltip');\n          return val;\n        }\n      };\n      var infoboxGlyphs = glyph.getElementsByTagName('glyph');\n      for (var i = 0; i < infoboxGlyphs.length; i++) {\n        var infoboxGlyph = infoboxGlyphs[i];\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);\n          if (val) {\n            data.statesandinfos[i][propName] = val;\n          }\n        });\n      }\n    }\n  };\n  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {\n    elesData.forEach(function (obj) {\n      var data = obj.data;\n      if (filterFcn(data[\"class\"])) {\n        var xmlEle = getXMLEleById(xmlObject, data.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](xmlEle, data);\n          if (val) {\n            data[propName] = val;\n          }\n        });\n      }\n    });\n  }\n  function getElMap(graphData) {\n    var map = {\n      nodes: {},\n      edges: {},\n      infoboxes: {}\n    };\n    graphData.edges.forEach(function (edge) {\n      map.edges[edge.data.id] = edge;\n    });\n    graphData.nodes.forEach(function (node) {\n      map.nodes[node.data.id] = node;\n      var infoboxes = node.data.statesandinfos;\n      infoboxes.forEach(function (infobox) {\n        map.infoboxes[infobox.id] = infobox;\n      });\n    });\n    return map;\n  }\n  function applyExtraStylesData(graphData, xmlObject) {\n    var listOfStyles = xmlObject.querySelector('listOfStyles');\n    var styles = listOfStyles && listOfStyles.querySelectorAll('style');\n    if (!styles || styles.length === 0) {\n      return;\n    }\n    var attrToProp = {\n      'shapeName': 'shape-name'\n    };\n    var elMap = getElMap(graphData);\n    styles.forEach(function (style) {\n      var idList = style.getAttribute('idList').split(' ');\n      Object.keys(attrToProp).forEach(function (attrName) {\n        var g = style.querySelector('g');\n        var val = g.getAttribute(attrName);\n        if (val) {\n          var propName = attrToProp[attrName];\n          idList.forEach(function (id) {\n            if (elMap.nodes[id] || elMap.edges[id]) {\n              var el = elMap.nodes[id] || elMap.edges[id];\n              el.data[propName] = val;\n            } else if (elMap.infoboxes[id]) {\n              var el = elMap.infoboxes[id];\n              el.style[propName] = val;\n            }\n          });\n        }\n      });\n    });\n  }\n  nwtToJson.convert = function (xmlObject, urlParams) {\n    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);\n    var mapType = elementUtilities.mapType;\n    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      elementUtilities.fileFormat = 'nwt';\n      // extend edges data with sif specific features\n      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);\n      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);\n\n      // apply the style data that is not applied because of restrictions of libsbgn\n      applyExtraStylesData(graphData, xmlObject);\n    }\n    return graphData;\n  };\n  nwtToJson.mapPropertiesToObj = function () {\n    return sbgnmlToJson.mapPropertiesToObj();\n  };\n  return nwtToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/nwt-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\r\n *  Extend default options and get current options by using this file\r\n */\n\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer parent node on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // intial compound padding for all compound nodes \n    compoundPadding: function compoundPadding() {\n      return 0;\n    },\n    improveFlow: function improveFlow() {\n      return true;\n    },\n    // Whether to adjust node label font size automatically.\n    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')\n    // instead of doing it.\n    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {\n      return true;\n    },\n    // extra padding for compound nodes except for complexes\n    extraCompartmentPadding: 14,\n    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details\n    extraComplexPadding: 10,\n    // Wether to display the complex's labels, like compartments.\n    // Will also increase the paddings by extraCompoundPadding to make room for the name.\n    showComplexName: true,\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true\n  };\n  var optionUtilities = function optionUtilities(param) {};\n\n  // Extend the defaults options with the user options\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n    optionUtilities.options = result;\n    return options;\n  };\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwiaW1wcm92ZUZsb3ciLCJhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHkiLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJzaG93Q29tcGxleE5hbWUiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ1bmRvYWJsZSIsIm9wdGlvblV0aWxpdGllcyIsInBhcmFtIiwiZXh0ZW5kT3B0aW9ucyIsIm9wdGlvbnMiLCJyZXN1bHQiLCJwcm9wIiwiZ2V0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogIEV4dGVuZCBkZWZhdWx0IG9wdGlvbnMgYW5kIGdldCBjdXJyZW50IG9wdGlvbnMgYnkgdXNpbmcgdGhpcyBmaWxlXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgLy8gZGVmYXVsdCBvcHRpb25zXHJcbiAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgLy8gVGhlIHBhdGggb2YgY29yZSBsaWJyYXJ5IGltYWdlcyB3aGVuIHNiZ252aXogaXMgcmVxdWlyZWQgZnJvbSBucG0gYW5kIHRoZSBpbmRleCBodG1sXHJcbiAgICAvLyBmaWxlIGFuZCBub2RlX21vZHVsZXMgYXJlIHVuZGVyIHRoZSBzYW1lIGZvbGRlciB0aGVuIHVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGZpbmVcclxuICAgIGltZ1BhdGg6ICdub2RlX21vZHVsZXMvc2JnbnZpei9zcmMvaW1nJyxcclxuICAgIC8vIFdoZXRoZXIgdG8gZml0IGxhYmVscyB0byBub2Rlc1xyXG4gICAgZml0TGFiZWxzVG9Ob2RlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIC8vIGR5bmFtaWMgbGFiZWwgc2l6ZSBpdCBtYXkgYmUgJ3NtYWxsJywgJ3JlZ3VsYXInLCAnbGFyZ2UnXHJcbiAgICBkeW5hbWljTGFiZWxTaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAncmVndWxhcic7XHJcbiAgICB9LFxyXG4gICAgLy8gV2hldGhlciB0byBpbmZlciBwYXJlbnQgbm9kZSBvbiBsb2FkIFxyXG4gICAgaW5mZXJOZXN0aW5nT25Mb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvLyBpbnRpYWwgY29tcG91bmQgcGFkZGluZyBmb3IgYWxsIGNvbXBvdW5kIG5vZGVzIFxyXG4gICAgY29tcG91bmRQYWRkaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuICAgIGltcHJvdmVGbG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgLy8gV2hldGhlciB0byBhZGp1c3Qgbm9kZSBsYWJlbCBmb250IHNpemUgYXV0b21hdGljYWxseS5cclxuICAgIC8vIElmIHRoaXMgb3B0aW9uIHJldHVybiBmYWxzZSBkbyBub3QgYWRqdXN0IGxhYmVsIHNpemVzIGFjY29yZGluZyB0byBub2RlIGhlaWdodCB1c2VzIG5vZGUuZGF0YSgnZm9udC1zaXplJylcclxuICAgIC8vIGluc3RlYWQgb2YgZG9pbmcgaXQuXHJcbiAgICBhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICAvLyBleHRyYSBwYWRkaW5nIGZvciBjb21wb3VuZCBub2RlcyBleGNlcHQgZm9yIGNvbXBsZXhlc1xyXG4gICAgZXh0cmFDb21wYXJ0bWVudFBhZGRpbmc6IDE0LFxyXG5cclxuICAgIC8vZXh0cmEgcGFkZGluZyBmb3IgY29tcGxleCBjb21wb3VuZCBub2RlcywgcmVmZXIgdG8gZWxlbWVudFV0aWxpdGllcy5nZXRDb21wbGV4UGFkZGluZyBmdW5jdGlvbiB0byBzZWUgZGV0YWlsc1xyXG4gICAgZXh0cmFDb21wbGV4UGFkZGluZzogMTAsXHJcbiAgICAvLyBXZXRoZXIgdG8gZGlzcGxheSB0aGUgY29tcGxleCdzIGxhYmVscywgbGlrZSBjb21wYXJ0bWVudHMuXHJcbiAgICAvLyBXaWxsIGFsc28gaW5jcmVhc2UgdGhlIHBhZGRpbmdzIGJ5IGV4dHJhQ29tcG91bmRQYWRkaW5nIHRvIG1ha2Ugcm9vbSBmb3IgdGhlIG5hbWUuXHJcbiAgICBzaG93Q29tcGxleE5hbWU6IHRydWUsXHJcbiAgICAvLyBUaGUgc2VsZWN0b3Igb2YgdGhlIGNvbXBvbmVudCBjb250YWluaW5nIHRoZSBzYmduIG5ldHdvcmtcclxuICAgIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcclxuICAgIC8vIFdoZXRoZXIgdGhlIGFjdGlvbnMgYXJlIHVuZG9hYmxlLCByZXF1aXJlcyBjeXRvc2NhcGUtdW5kby1yZWRvIGV4dGVuc2lvblxyXG4gICAgdW5kb2FibGU6IHRydWVcclxuICB9O1xyXG5cclxuICB2YXIgb3B0aW9uVXRpbGl0aWVzID0gZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgfTtcclxuXHJcbiAgLy8gRXh0ZW5kIHRoZSBkZWZhdWx0cyBvcHRpb25zIHdpdGggdGhlIHVzZXIgb3B0aW9uc1xyXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuXHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XHJcbiAgICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xyXG4gICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvblV0aWxpdGllcy5vcHRpb25zID0gcmVzdWx0O1xyXG5cclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG9wdGlvblV0aWxpdGllcy5vcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBvcHRpb25VdGlsaXRpZXM7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBQzNCO0VBQ0EsSUFBSUMsUUFBUSxHQUFHO0lBQ2I7SUFDQTtJQUNBQyxPQUFPLEVBQUUsOEJBQThCO0lBQ3ZDO0lBQ0FDLGdCQUFnQixFQUFFLFNBQWxCQSxnQkFBZ0JBLENBQUEsRUFBYztNQUM1QixPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0RDLG9CQUFvQixFQUFFLFNBQXRCQSxvQkFBb0JBLENBQUEsRUFBYztNQUNoQyxPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0Q7SUFDQUMsZ0JBQWdCLEVBQUUsU0FBbEJBLGdCQUFnQkEsQ0FBQSxFQUFjO01BQzVCLE9BQU8sU0FBUztJQUNsQixDQUFDO0lBQ0Q7SUFDQUMsa0JBQWtCLEVBQUUsU0FBcEJBLGtCQUFrQkEsQ0FBQSxFQUFjO01BQzlCLE9BQU8sS0FBSztJQUNkLENBQUM7SUFDRDtJQUNBQyxlQUFlLEVBQUUsU0FBakJBLGVBQWVBLENBQUEsRUFBYztNQUMzQixPQUFPLENBQUM7SUFDVixDQUFDO0lBQ0RDLFdBQVcsRUFBRSxTQUFiQSxXQUFXQSxDQUFBLEVBQWM7TUFDckIsT0FBTyxJQUFJO0lBQ2YsQ0FBQztJQUNEO0lBQ0E7SUFDQTtJQUNBQyxvQ0FBb0MsRUFBRSxTQUF0Q0Esb0NBQW9DQSxDQUFBLEVBQWE7TUFDL0MsT0FBTyxJQUFJO0lBQ2IsQ0FBQztJQUNEO0lBQ0FDLHVCQUF1QixFQUFFLEVBQUU7SUFFM0I7SUFDQUMsbUJBQW1CLEVBQUUsRUFBRTtJQUN2QjtJQUNBO0lBQ0FDLGVBQWUsRUFBRSxJQUFJO0lBQ3JCO0lBQ0FDLHdCQUF3QixFQUFFLHlCQUF5QjtJQUNuRDtJQUNBQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBRUQsSUFBSUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFhQyxLQUFLLEVBQUUsQ0FDdkMsQ0FBQzs7RUFFRDtFQUNBRCxlQUFlLENBQUNFLGFBQWEsR0FBRyxVQUFVQyxPQUFPLEVBQUU7SUFDakQsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLEtBQUssSUFBSUMsSUFBSSxJQUFJbkIsUUFBUSxFQUFFO01BQ3pCa0IsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBR25CLFFBQVEsQ0FBQ21CLElBQUksQ0FBQztJQUMvQjtJQUVBLEtBQUssSUFBSUEsSUFBSSxJQUFJRixPQUFPLEVBQUU7TUFDeEJDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLEdBQUdGLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDO0lBQzlCO0lBRUFMLGVBQWUsQ0FBQ0csT0FBTyxHQUFHQyxNQUFNO0lBRWhDLE9BQU9ELE9BQU87RUFDaEIsQ0FBQztFQUVESCxlQUFlLENBQUNNLFVBQVUsR0FBRyxZQUFZO0lBQ3ZDLE9BQU9OLGVBQWUsQ0FBQ0csT0FBTztFQUNoQyxDQUFDO0VBRUQsT0FBT0gsZUFBZTtBQUN4QixDQUFDIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToCd(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToCd.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/sbgnml2cd\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(XMLHttpRequest) {\n        callback(null);\n      }\n    });\n  };\n  return sbgnmlToCd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1jZC1jb252ZXJ0ZXItZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYmdubWxUb0NkIiwicGFyYW0iLCJqc29uVG9TYmdubWxDb252ZXJ0ZXIiLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsInhtbCIsImNhbGxiYWNrIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciIsIlhNTEh0dHBSZXF1ZXN0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanM/ODNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gc2Jnbm1sVG9DZChwYXJhbSkge1xyXG4gICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xyXG4gICAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XHJcbiAgICB9XHJcbiAgXHJcbiBcclxuICAgIHNiZ25tbFRvQ2QuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLCAgICAgICAgICAgICBcclxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9zYmdubWwyY2RcIixcclxuICAgICAgICAgICAgZGF0YTogeG1sLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2Jnbm1sVG9DZDtcclxuICBcclxuICB9XHJcbiAgXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBRXhCLElBQUlDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLEVBQUU7RUFFdEMsU0FBU0MsVUFBVUEsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3pCSixZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXFCO0lBQzFDSixnQkFBZ0IsR0FBR0csS0FBSyxDQUFDSCxnQkFBZ0I7SUFDekNDLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFjLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBR0FKLFVBQVUsQ0FBQ0ssT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0lBRTNDQyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUNGQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxHQUFHLEVBQUUsMENBQTBDO01BQy9DQyxJQUFJLEVBQUVOLEdBQUc7TUFDVE8sT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQVlELElBQUksRUFBRTtRQUNyQkwsUUFBUSxDQUFDSyxJQUFJLENBQUM7TUFDbEIsQ0FBQztNQUNERSxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBWUMsY0FBYyxFQUFFO1FBQzdCUixRQUFRLENBQUMsSUFBSSxDQUFDO01BQ2xCO0lBQ0osQ0FBQyxDQUFDO0VBR04sQ0FBQztFQUVELE9BQU9QLFVBQVU7QUFFbkIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-cd-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-gpml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-gpml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToGpml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToGpml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:GPML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"application/xml\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToGpml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1ncG1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvR3BtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLWdwbWwtY29udmVydGVyLWZhY3RvcnkuanM/MDY3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYmdubWxUb0dwbWwocGFyYW0pIHtcclxuICAgICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzYmdubWxUb0dwbWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JHTi1NTDpHUE1MXCI7XHJcblxyXG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veG1sXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcclxuICAgICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IHRydWUsIG1lc3NhZ2U6IGRhdGEsIGVycm9yOiBcIlwifSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFpbDogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2Jnbm1sVG9HcG1sO1xyXG5cclxufVxyXG4gICJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFFekIsSUFBSUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRUMsRUFBRTtFQUV0QyxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDekJKLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBcUI7SUFDMUNKLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUFnQjtJQUN6Q0MsRUFBRSxHQUFHRSxLQUFLLENBQUNFLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDckM7RUFHQUosWUFBWSxDQUFDSyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7SUFDNUMsSUFBSUMsZ0JBQWdCLEdBQUcsc0VBQXNFO0lBRTdGLE9BQU9DLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQ1ZDLElBQUksRUFBRSxNQUFNO01BQ1pDLEdBQUcsRUFBRUosZ0JBQWdCO01BQ3JCSyxXQUFXLEVBQUUsaUJBQWlCO01BQzlCQyxJQUFJLEVBQUVSLEdBQUc7TUFDVFMsUUFBUSxFQUFFLE1BQU07TUFDaEJDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFZRixJQUFJLEVBQUVHLFVBQVUsRUFBRUMsR0FBRyxFQUFFO1FBQ3RDLElBQUlBLEdBQUcsQ0FBQ0MsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUNwQlosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxLQUFLO1lBQUVDLEtBQUssRUFBRVAsSUFBSTtZQUFFUSxPQUFPLEVBQUUseUJBQXlCLEdBQUdKLEdBQUcsQ0FBQ0M7VUFBTSxDQUFDLENBQUM7UUFDM0YsQ0FBQyxNQUFNO1VBQ0haLFFBQVEsQ0FBQztZQUFDYSxNQUFNLEVBQUUsSUFBSTtZQUFFRSxPQUFPLEVBQUVSLElBQUk7WUFBRU8sS0FBSyxFQUFFO1VBQUUsQ0FBQyxDQUFDO1FBQ3REO01BQ0osQ0FBQztNQUNEQSxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBWUEsTUFBSyxFQUFFO1FBQ3BCZCxRQUFRLENBQUM7VUFBQ2EsTUFBTSxFQUFFLEtBQUs7VUFBRUMsS0FBSyxFQUFFQSxNQUFLO1VBQUVDLE9BQU8sRUFBRTtRQUFFLENBQUMsQ0FBQztNQUN4RCxDQUFDO01BQ0RDLElBQUksRUFBRSxTQUFOQSxJQUFJQSxDQUFZRixLQUFLLEVBQUU7UUFDbkJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLEtBQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hEO0lBQ0osQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELE9BQU90QixZQUFZO0FBRXZCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-gpml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n  function sbgnmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n  sbgnmlToJson.insertedNodes = {};\n  sbgnmlToJson.map = undefined;\n  sbgnmlToJson.calculatedCompoundPadding = undefined;\n  sbgnmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == 'compartment') {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          'x': parseFloat(bbox.x),\n          'y': parseFloat(bbox.y),\n          'w': parseFloat(bbox.w),\n          'h': parseFloat(bbox.h),\n          'id': compartment.id\n        });\n      }\n    }\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n      return 0;\n    });\n    return compartments;\n  };\n  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n    return false;\n  };\n  sbgnmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h;\n    //if it is simple node return bbox\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has('nwt:extraInfo')) {\n      // if newt file then extrainfo on the compound node exists\n\n      if (ele.extension.has('nwt:extraInfo')) {\n        var extensionString = 'nwt:extraInfo';\n      } else if (ele.extension.has('extraInfo')) {\n        var extensionString = 'extraInfo';\n      }\n      var xml = ele.extension.get(extensionString);\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result[extensionString];\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\r\n       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\r\n         styles = this.map.extension.get('renderInformation').listOfStyles;\r\n         if(styles  !== undefined){\r\n           styles = styles.styles;\r\n         }\r\n       }\r\n      */\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\r\n       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n\n      var padding = this.calculateElementPadding(ele);\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false;\n      // Traverse the other children and update the extreme values\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode);\n        //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\r\n           borderWidth = childStyle[0].renderGroup.strokeWidth;\r\n         } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n        });\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2;\n      // The sizes of children bbox are determined by the difference between the extreme coordinates\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n      childrenBboxH = maxBottom - minTop + 2;\n\n      // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n        if (ele.minWidthBiasLeft < 0) {\n          ele.minWidthBiasLeft = 0;\n          ele.minWidthBiasRight = 100;\n        }\n        if (ele.minWidthBiasRight < 0) {\n          ele.minWidthBiasRight = 0;\n          ele.minWidthBiasLeft = 100;\n        }\n      }\n\n      // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n        if (ele.minHeightBiasTop < 0) {\n          ele.minHeightBiasTop = 0;\n          ele.minHeightBiasBottom = 100;\n        }\n        if (ele.minHeightBiasBottom < 0) {\n          ele.minHeightBiasBottom = 0;\n          ele.minHeightBiasTop = 100;\n        }\n      }\n\n      // set positions as center\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n    return bbox;\n  };\n  sbgnmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers;\n    //exclude state variables and units of information from child members\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"binding region\" && child.class_ != \"residue variable\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding;\n    // } \n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"binding region\" || child.class_ == \"residue variable\";\n      });\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n    return padding;\n  };\n  sbgnmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n    return children;\n  };\n  sbgnmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n\n    // if a biological activity node has no unit of info, it must be a BA plain\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable' && glyph.class_ !== 'residue variable' && glyph.class_ !== 'binding region') {\n        continue;\n      }\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n      if (glyph.class_ === 'unit of information') {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case 'unspecified entity':\n              parent[\"class\"] = \"BA unspecified entity\";\n              break;\n            case 'simple chemical':\n              parent[\"class\"] = \"BA simple chemical\";\n              break;\n            case 'macromolecule':\n              parent[\"class\"] = \"BA macromolecule\";\n              break;\n            case 'nucleic acid feature':\n              parent[\"class\"] = \"BA nucleic acid feature\";\n              break;\n            case 'perturbation':\n              parent[\"class\"] = \"BA perturbing agent\";\n              break;\n            case 'complex':\n              parent[\"class\"] = \"BA complex\";\n              break;\n          }\n        }\n        infobox.label = {\n          'text': glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === 'state variable') {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      } else if (glyph.class_ === 'residue variable') {\n        infobox = classes.ResidueVariable.construct(undefined, undefined, infoboxId);\n        infobox.residue.variable = glyph.label && glyph.label.text || undefined;\n      } else if (glyph.class_ === 'binding region') {\n        infobox = classes.BindingRegion.construct(undefined, undefined, infoboxId);\n        infobox.region.variable = glyph.label && glyph.label.text || undefined;\n      }\n\n      //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]);\n      //classes.StateVariable.setAnchorSide(infobox);\n      stateAndInfoArray.push(infobox);\n    }\n    return stateAndInfoArray;\n  };\n  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = '';\n\n      // add compartment according to geometry\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          'x': parseFloat(ele.bbox.x),\n          'y': parseFloat(ele.bbox.y),\n          'w': parseFloat(ele.bbox.w),\n          'h': parseFloat(ele.bbox.h),\n          'id': ele.id\n        };\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {};\n\n    // add id information\n    nodeObj.id = ele.id;\n    // add node bounding box information\n    nodeObj.bbox = self.bboxProp(ele);\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    }\n\n    // add class information\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    }\n    // add label information\n    nodeObj.label = ele.label && ele.label.text || undefined;\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    }\n    // add state and info box information\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj);\n    // adding parent information\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments);\n\n    // add language info, this will always be the mapType if not hybrid\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD'; //Need to add SBML here\n      }\n    }\n\n    // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n\n    // add clone information\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    }\n\n    // add port information\n    var ports = [];\n    var portElements = ele.ports;\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100;\n\n      // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      }\n\n      // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      }\n\n      // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"];\n    // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal';\n        // This is the ratio of the area occupied with ports over without ports\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        // Multiply the bbox with the calculated ratio\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n\n  /**\r\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\r\n  */\n  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    }\n\n    // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0;\n    // handle controlled properties\n    for (var fullQualifier in resources) {\n      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    }\n    // handle custom properties\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n    return cyObject;\n  };\n  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id;\n\n    // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n    this.insertedNodes[elId] = true;\n    var self = this;\n    // add complex nodes here\n\n    var eleClass = ele.class_;\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information' && glyphClass !== 'residue variable' && glyphClass !== 'binding region') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n  sbgnmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n  sbgnmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n    return glyphs;\n  };\n  sbgnmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n    return arcs;\n  };\n  sbgnmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n  sbgnmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n    if (targetExists) {\n      targetNodeId = target;\n    }\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n    return anchorPointPositions;\n  };\n  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_;\n\n    // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n    var curveStyle = \"bezier\";\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n    var isSifMetaEdge;\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    }\n\n    // add language info, this will always be the mapType if not hybrid\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF' || mapType == 'SBML') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF'; // Need to add SBML\n      }\n    }\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    }\n    // get all background image id references to their value\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    }\n\n    // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup;\n\n      // convert color references\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      }\n      // convert background image references\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n      var idList = style.idList.split(' ');\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      /*  'background-opacity': {\r\n         'converter': convertHexColor,\r\n         'extra-field': 'opacity'\r\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    }\n\n    // apply the style to list and overwrite the default style\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n        if (!memberStyle) {\n          return;\n        }\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n            setStyleProp(member, propName, fieldVal);\n          }\n        });\n\n        // if the member is a node\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n  sbgnmlToJson.mapPropertiesToObj = function () {\n    if (this.map.extension) {\n      // render extension was found\n      var extensionName;\n      if (this.map.extension.has('nwt:mapProperties')) {\n        extensionName = 'nwt:mapProperties';\n      } else if (this.map.extension.has('mapProperties')) {\n        extensionName = 'mapProperties';\n      }\n      var xml = this.map.extension.get(extensionName);\n      var obj;\n      parseString(xml, function (err, result) {\n        obj = result;\n      });\n      return obj;\n    } else {\n      return {\n        mapProperties: {\n          compoundPadding: mainUtilities.getCompoundPadding()\n        }\n      };\n    }\n  };\n  sbgnmlToJson.convert = function (xmlObject, urlParams) {\n    var self = this;\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n    elementUtilities.fileFormat = 'sbgnml';\n    var sbgn;\n    try {\n      var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n    var map;\n    if (sbgn.maps.length < 1) {\n      // empty sbgn\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      map = sbgn.maps[0]; // take first map of the file as the main map\n    }\n    this.map = map;\n    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);\n    var compartments = self.getAllCompartments(map.glyphs);\n    var glyphs = map.glyphs;\n    var arcs = map.arcs;\n    var i;\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n\n      // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments\n      // store glyph members of compartments here.\n      var compartmentRef = glyph.compartmentRef;\n      if (glyph.class_ === 'compartment') {\n        if (compartmentChildrenMap[glyph.id] === undefined) {\n          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;\n        }\n        glyph.glyphMembers = compartmentChildrenMap[glyph.id];\n      }\n      if (compartmentRef) {\n        if (compartmentChildrenMap[compartmentRef] === undefined) {\n          compartmentChildrenMap[compartmentRef] = [];\n        }\n        compartmentChildrenMap[compartmentRef].push(glyph);\n      }\n    }\n    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;\n    if (urlParams && urlParams.compoundPadding) {\n      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));\n    } else if (!map.extension) {\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        childNodes = glyph.glyphMembers.filter(function (child) {\n          return child.class_ != \"state variable\" && child.class_ != \"unit of information\" && child.class_ != \"residue variable\" && child.class_ != \"binding region\";\n        });\n        if (childNodes.length > 0) {\n          // compound node\n          var hasMin = false;\n          for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            var childClass = childNode.class_;\n            if (childClass === \"source and sink\" || childClass === \"emptyset\") {\n              childClass = \"empty set\";\n            }\n            var borderWidth = elementUtilities.getDefaultProperties(childClass)[\"border-width\"];\n            var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n              return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n            });\n            if (stateAndInfos.length > 0) {\n              for (var k = 0; k < stateAndInfos.length; k++) {\n                var stateBbox = stateAndInfos[k].bbox;\n                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;\n                  hasMin = true;\n                }\n                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;\n                  hasMin = true;\n                }\n                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;\n                  hasMin = true;\n                }\n              }\n            }\n            var childNodeBbox = childNode.bbox;\n            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;\n            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;\n            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;\n            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;\n            if (left < minDistanceToChildren) {\n              minDistanceToChildren = left;\n              hasMin = true;\n            }\n            if (right < minDistanceToChildren) {\n              minDistanceToChildren = right;\n              hasMin = true;\n            }\n            if (top < minDistanceToChildren) {\n              minDistanceToChildren = top;\n              hasMin = true;\n            }\n            if (bottom < minDistanceToChildren) {\n              minDistanceToChildren = bottom;\n              hasMin = true;\n            }\n          }\n          if (hasMin) {\n            if (glyph.class_ == \"complex\") {\n              var stateAndInfos = glyph.glyphMembers.filter(function (child) {\n                return child.class_ == \"state variable\" || child.class_ == \"unit of information\" || child.class_ == \"residue variable\" || child.class_ == \"binding region\";\n              });\n              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {\n                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                var hasTopBottomInfo = false;\n                stateAndInfos.forEach(function (stateAndInfo) {\n                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {\n                    hasTopBottomInfo = true;\n                  }\n                });\n                if (hasTopBottomInfo) {\n                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                }\n              } else if (stateAndInfos.length > 0) {\n                minDistanceToChildren -= 2;\n              }\n            } else {\n              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;\n            }\n          }\n        }\n      }\n      minDistanceToChildren = Math.round(minDistanceToChildren);\n      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)\n      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {\n        newPadding = 0;\n      }\n      mainUtilities.setCompoundPadding(newPadding);\n    } else {\n      var compoundPadding = 10;\n      //check if self.mapPropertiesToObj() has the 'nwt:mapProperties' field\n      if (this.map.extension.has('nwt:mapProperties')) {\n        compoundPadding = Number(self.mapPropertiesToObj()['nwt:mapProperties'].compoundPadding);\n      } else if (this.map.extension.has('mapProperties')) {\n        compoundPadding = Number(self.mapPropertiesToObj()['mapProperties'].compoundPadding);\n      }\n      mainUtilities.setCompoundPadding(compoundPadding);\n    }\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);\n    }\n    for (i = 0; i < arcs.length; i++) {\n      var arc = arcs[i];\n      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);\n    }\n    if (map.extension && map.extension.has('renderInformation')) {\n      // render extension was found\n      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);\n    }\n    var cytoscapeJsGraph = {};\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    this.insertedNodes = {};\n    var shouldDisablePorts = false;\n    cytoscapeJsGraph.nodes.forEach(function (node) {\n      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {\n        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data[\"class\"]).width;\n        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data[\"class\"]).height;\n        // node.data.bbox.x = 15;     \n        // node.data.bbox.y = 10; \n      }\n      node.data.ports.forEach(function (port) {\n        if (isNaN(port.x) || isNaN(port.y)) {\n          shouldDisablePorts = true;\n        }\n      });\n    });\n    if (shouldDisablePorts) {\n      graphUtilities.disablePorts();\n    }\n    return cytoscapeJsGraph;\n  };\n  sbgnmlToJson.doValidation = function (xmlString) {\n    var errors = [];\n    try {\n      errors = libsbgnjs.Sbgn.doValidation(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not do validation. \" + err);\n    }\n    return errors;\n  };\n  return sbgnmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbgnmlToSbml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbgnmlToSbml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/plain; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbgnmlToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ25tbC10by1zYm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNiZ25tbFRvU2JtbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2Jnbm1sLXRvLXNibWwtY29udmVydGVyLWZhY3RvcnkuanM/NGVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYmdubWxUb1NibWwocGFyYW0pIHtcclxuICAgICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XHJcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzYmdubWxUb1NibWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JHTi1NTDpTQk1MXCI7XHJcblxyXG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB4bWwsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcInRleHRcIixcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIHhocikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZGF0YSwgbWVzc2FnZTogXCJJbnZhbGlkIHJlc3BvbnNlIGNvZGU6IFwiICsgeGhyLnN0YXR1c30pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiB0cnVlLCBtZXNzYWdlOiBkYXRhLCBlcnJvcjogXCJcIn0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNiZ25tbFRvU2JtbDtcclxuXHJcbn1cclxuICBcclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUV6QixJQUFJQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXRDLFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRTtJQUN6QkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFxQjtJQUMxQ0osZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNyQztFQUdBSixZQUFZLENBQUNLLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtJQUM1QyxJQUFJQyxnQkFBZ0IsR0FBRyxzRUFBc0U7SUFFN0YsT0FBT0MsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDVkMsSUFBSSxFQUFFLE1BQU07TUFDWkMsR0FBRyxFQUFFSixnQkFBZ0I7TUFDckJLLFdBQVcsRUFBRSwyQkFBMkI7TUFDeENDLElBQUksRUFBRVIsR0FBRztNQUNUUyxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQVlGLElBQUksRUFBRUcsVUFBVSxFQUFFQyxHQUFHLEVBQUU7UUFDdEMsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLEtBQUssR0FBRyxFQUFFO1VBQ3BCWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLEtBQUs7WUFBRUMsS0FBSyxFQUFFUCxJQUFJO1lBQUVRLE9BQU8sRUFBRSx5QkFBeUIsR0FBR0osR0FBRyxDQUFDQztVQUFNLENBQUMsQ0FBQztRQUMzRixDQUFDLE1BQU07VUFDSFosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxJQUFJO1lBQUVFLE9BQU8sRUFBRVIsSUFBSTtZQUFFTyxLQUFLLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFDdEQ7TUFDSixDQUFDO01BQ0RBLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFZQSxNQUFLLEVBQUU7UUFDcEJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLE1BQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hELENBQUM7TUFDREMsSUFBSSxFQUFFLFNBQU5BLElBQUlBLENBQVlGLEtBQUssRUFBRTtRQUNuQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsS0FBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQ7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsT0FBT3RCLFlBQVk7QUFFdkIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-json-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbml-to-json-converter-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities, libsbmlInstance;\n  var resultJson = [];\n  var speciesCompartmentMap = new Map();\n  var layout;\n  function sbmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    libsbmlInstance = param.libsbmlInstance;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n  var sboToNodeClass = {\n    278: \"rna\",\n    253: \"complex sbml\",\n    289: \"hypothetical complex\",\n    291: \"degradation\",\n    298: \"drug\",\n    243: \"gene\",\n    252: \"protein\",\n    327: \"ion\",\n    284: \"ion channel\",\n    358: \"phenotype sbml\",\n    244: \"receptor\",\n    247: \"simple molecule\",\n    248: \"truncated protein\",\n    285: \"unknown molecule\",\n    173: \"and\",\n    174: \"or\",\n    238: \"not\",\n    398: \"unknown logical operator\"\n  };\n  var sboToEdgeClass = {\n    536: \"unknown inhibition\",\n    462: \"unknown catalysis\",\n    171: \"positive influence sbml\",\n    407: \"negative influence\",\n    344: \"reduced modulation\",\n    411: \"reduced stimulation\",\n    168: \"reduced trigger\",\n    169: \"unknown negative influence\",\n    172: \"unknown positive influence\",\n    170: \"unknown reduced stimulation\",\n    342: \"unknown reduced modulation\",\n    205: \"unknown reduced trigger\",\n    594: \"modulation\",\n    459: \"stimulation\",\n    13: \"catalysis\",\n    537: \"inhibition\",\n    461: \"trigger\",\n    185: \"transport\"\n  };\n\n  //Set of modifiers\n  var modifiers = new Set();\n  modifiers.add(\"catalysis\");\n  modifiers.add(\"inhibition\");\n  modifiers.add(\"modulation\");\n  modifiers.add(\"stimulation\");\n  modifiers.add(\"trigger\");\n  modifiers.add(\"unknown catalysis\");\n  modifiers.add(\"unknown inhibition\");\n  var sboTwoEdgeOneNodeClass = {\n    176: [\"consumption\", \"process\", \"production\"],\n    //state transition\n    396: [\"consumption\", \"uncertain process\", \"production\"],\n    //Unknown transition\n    183: [\"transcription consumption\", \"process\", \"transcription production\"],\n    //Transcription\n    184: [\"translation consumption\", \"process\", \"translation production\"],\n    //Translation\n    185: [\"consumption\", \"process\", \"transport\"],\n    //Transport\n    397: [\"consumption\", \"omitted process\", \"production\"] //Known transition omitted\n  };\n  var sboAssociationDissociation = {\n    177: [\"consumption\", \"consumption\", \"association\", \"consumption\", \"process\", \"production\"],\n    //Heterodimer association\n    180: [\"consumption\", \"process\", \"consumption\", \"dissociation\", \"production\", \"production\"],\n    //Dissociation\n    178: [\"consumption\", \"truncated process\", \"consumption\", \"production\", \"production\"] //Truncation,\n  };\n  sbmlToJson.convert = function (xmlString, urlParams) {\n    var self = this;\n    var cytoscapeJsGraph = {};\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n    elementUtilities.fileFormat = 'sbml';\n    var model = null;\n    elementUtilities.mapType = 'SBML';\n    var reader = new libsbmlInstance.SBMLReader();\n    var doc = reader.readSBMLFromString(xmlString);\n    model = doc.getModel();\n    var plugin;\n    try {\n      plugin = model.findPlugin('layout');\n    } catch (err) {\n      plugin = undefined;\n    }\n    var layoutplugin;\n    if (plugin) {\n      layoutplugin = libsbmlInstance.castObject(plugin, libsbmlInstance.LayoutModelPlugin);\n      layout = layoutplugin.layouts[0];\n    }\n\n    // add compartments, species and reactions\n    var compartmentBoundingBoxes = new Map();\n    var containerNodeMap = new Map();\n    sbmlToJson.addCompartments(model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap);\n    sbmlToJson.addSpecies(model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap);\n    sbmlToJson.addReactions(model, cytoscapeJsEdges, cytoscapeJsNodes);\n    sbmlToJson.fixCompartmentBiases(model, cytoscapeJsNodes, compartmentBoundingBoxes);\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n    if (layout) sbmlToJson.inferNestingOnLoadSBML(cytoscapeJsNodes, containerNodeMap);\n    var result = resultJson;\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    resultJson = [];\n    speciesCompartmentMap = new Map();\n    return cytoscapeJsGraph;\n  };\n\n  // add compartment nodes\n  sbmlToJson.addCompartments = function (model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap) {\n    compartmentMap = new Map();\n    for (var i = 0; i < model.getNumCompartments(); i++) {\n      var compartment = model.getCompartment(i);\n      compartmentMap.set(compartment.getId(), i);\n      if (compartment.getId() !== \"default\") {\n        var compartmentData = {\n          \"id\": compartment.getId(),\n          \"label\": compartment.getName(),\n          \"class\": \"compartment\"\n        };\n        resultJson.push({\n          \"data\": compartmentData,\n          \"group\": \"nodes\",\n          \"classes\": \"compartment\"\n        });\n      }\n      if (!compartmentBoundingBoxes.has(compartment.getId())) {\n        compartmentBoundingBoxes.set(compartment.getId(), {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 0\n        });\n      }\n    }\n    sbmlToJson.addJSCompartments(compartmentMap, resultJson, cytoscapeJsNodes, containerNodeMap);\n  };\n  sbmlToJson.addJSCompartments = function (compartmentMap, resultJson, cytoscapeJsNodes, containerNodeMap) {\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group == 'nodes' && resultJson[i].classes == \"compartment\") {\n        var nodeObj = {};\n        var styleObj = {};\n        var tempBbox = {};\n        nodeObj[\"class\"] = \"compartment\";\n        if (layout) {\n          var compartmentGlyph = layout.getCompartmentGlyph(compartmentMap.get(resultJson[i].data.id));\n          var boundingBox = compartmentGlyph.getBoundingBox();\n          tempBbox.x = boundingBox.x + boundingBox.width / 2;\n          tempBbox.y = boundingBox.y + boundingBox.height / 2;\n          tempBbox.w = boundingBox.width;\n          tempBbox.h = boundingBox.height;\n          nodeObj.minWidth = boundingBox.width;\n          nodeObj.minHeight = boundingBox.height;\n        } else {\n          tempBbox.x = 0;\n          tempBbox.y = 0;\n          tempBbox.w = 60;\n          tempBbox.h = 60;\n        }\n        nodeObj.id = resultJson[i].data.id;\n        nodeObj.bbox = tempBbox;\n        nodeObj.label = resultJson[i].data.label;\n        nodeObj.statesandinfos = [];\n        nodeObj.ports = [];\n        if (resultJson[i].data.parent) nodeObj.parent = resultJson[i].data.parent;\n        containerNodeMap.set(nodeObj.id, {\n          x1: nodeObj.bbox.x - nodeObj.bbox.w / 2,\n          y1: nodeObj.bbox.y - nodeObj.bbox.h / 2,\n          x2: nodeObj.bbox.x + nodeObj.bbox.w / 2,\n          y2: nodeObj.bbox.y + nodeObj.bbox.h / 2,\n          area: nodeObj.bbox.w * nodeObj.bbox.h\n        });\n        var cytoscapeJsNode = {\n          data: nodeObj,\n          style: styleObj\n        };\n        elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n        cytoscapeJsNodes.push(cytoscapeJsNode);\n      }\n    }\n  };\n\n  // add species nodes\n  sbmlToJson.addSpecies = function (model, cytoscapeJsNodes, compartmentBoundingBoxes, containerNodeMap) {\n    var _loop = function _loop() {\n        var species = model.getSpecies(i);\n        var active = false,\n          hypothetical = false,\n          multimer = false;\n        var bindingRegion = [],\n          residueVariable = [],\n          unitOfInfo = [];\n        parseString(species.getAnnotationString(), function (err, result) {\n          if (!result || !result.annotation[\"nwt:extension\"]) return;\n          var stateBooleans = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0].$;\n          active = stateBooleans[\"nwt:active\"] == \"true\" ? true : false;\n          hypothetical = stateBooleans[\"nwt:hypothetical\"] == \"true\" ? true : false;\n          multimer = stateBooleans[\"nwt:multimer\"] == \"true\" ? true : false;\n          bindingRegion = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:bindingregion\"] || [];\n          residueVariable = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:residuevariable\"] || [];\n          unitOfInfo = result.annotation[\"nwt:extension\"][0][\"nwt:info\"][0][\"nwt:unitinfo\"] || [];\n        });\n        speciesCompartmentMap.set(species.getId(), species.getCompartment());\n        sboTerm = species.getSBOTerm();\n        var speciesData = {\n          \"id\": species.getId(),\n          \"label\": species.getName() || \" \",\n          \"parent\": species.getCompartment(),\n          \"sboTerm\": species.getSBOTerm(),\n          \"active\": active,\n          \"multimer\": multimer,\n          \"hypothetical\": hypothetical,\n          \"bindingRegion\": bindingRegion,\n          \"residueVariable\": residueVariable,\n          \"unitOfInfo\": unitOfInfo\n        };\n        resultJson.push({\n          \"data\": speciesData,\n          \"group\": \"nodes\",\n          \"classes\": \"species\"\n        });\n      },\n      sboTerm;\n    for (var i = 0; i < model.getNumSpecies(); i++) {\n      _loop();\n    }\n    var speciesGlyphIdSpeciesIdMap = new Map();\n    if (layout) {\n      // traverse species\n      for (var _i = 0; _i < layout.getNumSpeciesGlyphs(); _i++) {\n        var specGlyph = layout.specglyphs[_i];\n        speciesGlyphIdSpeciesIdMap.set(specGlyph.getSpeciesId(), _i);\n      }\n    }\n    //Now create different model\n    sbmlToJson.addJSNodes(resultJson, cytoscapeJsNodes, speciesGlyphIdSpeciesIdMap, compartmentBoundingBoxes, containerNodeMap);\n  };\n  sbmlToJson.addJSNodes = function (resultJson, cytoscapeJsNodes, speciesGlyphIdSpeciesIdMap, compartmentBoundingBoxes, containerNodeMap) {\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group != 'nodes' || resultJson[i].classes != 'species') continue;\n      var nodeObj = {};\n      var styleObj = {};\n      var tempBbox = {};\n      if (layout) {\n        specGlyphId = speciesGlyphIdSpeciesIdMap.get(resultJson[i].data.id);\n        var speciesGlyph = layout.specglyphs[specGlyphId];\n        var bbox = speciesGlyph.getBoundingBox();\n        tempBbox.x = bbox.x + bbox.width / 2;\n        tempBbox.y = bbox.y + bbox.height / 2;\n        tempBbox.w = bbox.width;\n        tempBbox.h = bbox.height;\n      } else {\n        tempBbox.x = 0;\n        tempBbox.y = 0;\n        tempBbox.w = 50;\n        tempBbox.h = 30;\n      }\n      var sboTerm = resultJson[i].data.sboTerm;\n      if (sboToNodeClass[sboTerm]) {\n        nodeObj[\"class\"] = sboToNodeClass[sboTerm];\n      } else {\n        nodeObj[\"class\"] = \"simple molecule\";\n        tempBbox.w = 50;\n        tempBbox.h = 30;\n      }\n\n      //Check if node should have same height and same width\n      if (!layout && sbmlToJson.mustBeSquare(nodeObj[\"class\"]) && !sbmlToJson.complexOrPhenotype(nodeObj[\"class\"])) {\n        tempBbox.w = 20;\n        tempBbox.h = 20;\n      } else if (!layout && sbmlToJson.mustBeSquare(nodeObj[\"class\"]) && sbmlToJson.complexOrPhenotype(nodeObj[\"class\"])) {\n        tempBbox.w = 50;\n        tempBbox.h = 50;\n      }\n      nodeObj.id = resultJson[i].data.id;\n      nodeObj.bbox = tempBbox;\n      nodeObj.label = resultJson[i].data.label;\n      nodeObj.statesandinfos = [];\n      nodeObj.ports = [];\n      nodeObj.parent = resultJson[i].data.parent;\n      if (sboTerm == 253) containerNodeMap.set(nodeObj.id, {\n        x1: nodeObj.bbox.x - nodeObj.bbox.w / 2,\n        y1: nodeObj.bbox.y - nodeObj.bbox.h / 2,\n        x2: nodeObj.bbox.x + nodeObj.bbox.w / 2,\n        y2: nodeObj.bbox.y + nodeObj.bbox.h / 2,\n        area: nodeObj.bbox.w * nodeObj.bbox.h\n      });\n      sbmlToJson.updateCompartmentBox(compartmentBoundingBoxes, nodeObj.parent, tempBbox);\n\n      // State and Info Boxes\n      var bindingRegions = resultJson[i].data.bindingRegion;\n      var _iterator = _createForOfIteratorHelper(bindingRegions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var region = _step.value;\n          var infoBox = classes.BindingRegion.construct(undefined, resultJson[i].data.id, undefined);\n          infoBox.region.variable = region._;\n          infoBox.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"binding region\");\n          infoBox.bbox = {\n            'x': parseFloat(region.$['nwt:x']),\n            'y': parseFloat(region.$['nwt:y']),\n            'w': parseFloat(region.$['nwt:w']),\n            'h': parseFloat(region.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(infoBox);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var residueVariables = resultJson[i].data.residueVariable;\n      var _iterator2 = _createForOfIteratorHelper(residueVariables),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var residue = _step2.value;\n          var _infoBox = classes.ResidueVariable.construct(undefined, undefined, resultJson[i].data.id, undefined);\n          _infoBox.residue.variable = residue._;\n          _infoBox.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"residue variable\");\n          _infoBox.bbox = {\n            'x': parseFloat(residue.$['nwt:x']),\n            'y': parseFloat(residue.$['nwt:y']),\n            'w': parseFloat(residue.$['nwt:w']),\n            'h': parseFloat(residue.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(_infoBox);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var unitsOfInformation = resultJson[i].data.unitOfInfo;\n      var _iterator3 = _createForOfIteratorHelper(unitsOfInformation),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var unit = _step3.value;\n          var _infoBox2 = classes.UnitOfInformation.construct(undefined, resultJson[i].data.id, undefined);\n          _infoBox2.label.text = unit._;\n          _infoBox2.style = elementUtilities.getDefaultInfoboxStyle(nodeObj[\"class\"], \"unit of information\");\n          _infoBox2.bbox = {\n            'x': parseFloat(unit.$['nwt:x']),\n            'y': parseFloat(unit.$['nwt:y']),\n            'w': parseFloat(unit.$['nwt:w']),\n            'h': parseFloat(unit.$['nwt:h'])\n          };\n          nodeObj.statesandinfos.push(_infoBox2);\n        }\n\n        // Add status info\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (resultJson[i].data.hypothetical) nodeObj[\"class\"] = \"hypothetical \" + nodeObj[\"class\"];\n      if (resultJson[i].data.active) nodeObj[\"class\"] = \"active \" + nodeObj[\"class\"];\n      if (resultJson[i].data.multimer) nodeObj[\"class\"] = nodeObj[\"class\"] + \" multimer\";\n      var cytoscapeJsNode = {\n        data: nodeObj,\n        style: styleObj\n      };\n      elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n      cytoscapeJsNodes.push(cytoscapeJsNode);\n    }\n  };\n  sbmlToJson.fixCompartmentBiases = function (model, cytoscapeJsNodes, compartmentBoundingBoxes) {\n    for (var i = 0; i < cytoscapeJsNodes.length; i++) {\n      if (cytoscapeJsNodes[i].data[\"class\"] !== 'compartment') continue;\n      var leftMargin = -(cytoscapeJsNodes[i].data.bbox.x - cytoscapeJsNodes[i].data.bbox.w / 2) + compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).x1 - 1.625;\n      var rightMargin = cytoscapeJsNodes[i].data.bbox.x + cytoscapeJsNodes[i].data.bbox.w / 2 - compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).x2 - 1.625;\n      var topMargin = -(cytoscapeJsNodes[i].data.bbox.y - cytoscapeJsNodes[i].data.bbox.h / 2) + compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).y1 - 1.625;\n      var bottomMargin = cytoscapeJsNodes[i].data.bbox.y + cytoscapeJsNodes[i].data.bbox.h / 2 - compartmentBoundingBoxes.get(cytoscapeJsNodes[i].data.id).y2 - 1.625;\n      if (leftMargin + rightMargin != 0) {\n        cytoscapeJsNodes[i].data.minWidthBiasLeft = leftMargin / (leftMargin + rightMargin) * 100;\n        cytoscapeJsNodes[i].data.minWidthBiasRight = rightMargin / (leftMargin + rightMargin) * 100;\n      }\n      if (topMargin + bottomMargin != 0) {\n        cytoscapeJsNodes[i].data.minHeightBiasTop = topMargin / (topMargin + bottomMargin) * 100;\n        cytoscapeJsNodes[i].data.minHeightBiasBottom = bottomMargin / (topMargin + bottomMargin) * 100;\n      }\n    }\n  };\n  sbmlToJson.inferNestingOnLoadSBML = function (cytoscapeJsNodes, containerNodeMap) {\n    var contains = function contains(a, b) {\n      // box a containts box b\n      return a.x1 <= b.x1 && a.y1 <= b.y1 && a.x2 >= b.x2 && a.y2 >= b.y2;\n    };\n    var areaSortedContainerMap = new Map(_toConsumableArray(containerNodeMap.entries()).sort(function (a, b) {\n      return a[1].area - b[1].area;\n    }));\n    var _loop2 = function _loop2(i) {\n      var boundingBox = {\n        x1: cytoscapeJsNodes[i].data.bbox.x - cytoscapeJsNodes[i].data.bbox.w / 2,\n        y1: cytoscapeJsNodes[i].data.bbox.y - cytoscapeJsNodes[i].data.bbox.h / 2,\n        x2: cytoscapeJsNodes[i].data.bbox.x + cytoscapeJsNodes[i].data.bbox.w / 2,\n        y2: cytoscapeJsNodes[i].data.bbox.y + cytoscapeJsNodes[i].data.bbox.h / 2\n      };\n      var isFound = false;\n      areaSortedContainerMap.forEach(function (value, key) {\n        if (key == cytoscapeJsNodes[i].data.id) return;\n        if (contains(value, boundingBox) && !isFound) {\n          cytoscapeJsNodes[i].data.parent = key;\n          isFound = true;\n          return;\n        }\n      });\n    };\n    for (var i = 0; i < cytoscapeJsNodes.length; i++) {\n      _loop2(i);\n    }\n  };\n  sbmlToJson.mustBeSquare = function (className) {\n    return className == \"ion\" || className == \"degradation\" || className == \"complex sbml\" || className == \"phenotype sbml\";\n  };\n  sbmlToJson.complexOrPhenotype = function (className) {\n    return className == \"complex sbml\" || className == \"phenotype sbml\";\n  };\n  sbmlToJson.getDataOfNode = function (nodeId) {\n    for (var i = 0; i < resultJson.length; i++) {\n      var currentObj = resultJson[i];\n      if (currentObj.group =  true && currentObj.classes == \"species\" && currentObj.data.id == nodeId) {\n        return currentObj.data;\n      }\n    }\n  };\n  //Check if the source and target is in a common compartment\n  //If so returns that compartment id\n  sbmlToJson.checkSourceTargetInCompartement = function (sourceId, targetId) {\n    var sourceData = sbmlToJson.getDataOfNode(sourceId);\n    var targetData = sbmlToJson.getDataOfNode(targetId);\n    if (sourceData.parent == targetData.parent) {\n      return sourceData.parent;\n    } else {\n      return null;\n    }\n  };\n\n  //This function checks if a process nodes has both source and target\n  sbmlToJson.checkIfTargetAndSourceExist = function (processId, resultJson) {\n    var hasSource = false;\n    var hasTarget = false;\n    for (var i = 0; i < resultJson.length; i++) {\n      var currentObj = resultJson[i];\n      if (currentObj.group = \"edges\") {\n        if (currentObj.data.source == processId) {\n          hasTarget = true;\n        }\n        if (currentObj.data.target == processId) {\n          hasSource = true;\n        }\n      }\n    }\n    if (hasSource && hasTarget) {\n      return;\n    }\n    if (!hasSource) {\n      var degradation = {\n        \"id\": 'degradation' + processId,\n        \"class\": \"degradation\"\n      };\n      degradation.width = 15;\n      degradation.height = 15;\n      resultJson.push({\n        \"data\": degradation,\n        \"group\": \"nodes\",\n        \"classes\": \"degradation\"\n      });\n      var reactantEdgeData = {\n        \"id\": 'degradation_' + processId,\n        \"source\": 'degradation' + processId,\n        \"target\": processId,\n        \"class\": \"consumption\"\n      };\n      resultJson.push({\n        \"data\": reactantEdgeData,\n        \"group\": \"edges\",\n        \"classes\": \"forDegradation\"\n      });\n    }\n    if (!hasTarget) {\n      var _degradation = {\n        \"id\": 'degradation' + processId,\n        \"class\": \"degradation\"\n      };\n      _degradation.width = 15;\n      _degradation.height = 15;\n      resultJson.push({\n        \"data\": _degradation,\n        \"group\": \"nodes\",\n        \"classes\": \"degradation\"\n      });\n      var _reactantEdgeData = {\n        \"id\": 'degradation_' + processId,\n        \"source\": processId,\n        \"target\": 'degradation' + processId,\n        \"class\": \"production\"\n      };\n      resultJson.push({\n        \"data\": _reactantEdgeData,\n        \"group\": \"edges\",\n        \"classes\": \"forDegradation\"\n      });\n    }\n  };\n  sbmlToJson.addReactions = function (model, cytoscapeJsEdges, cytoscapeJsNodes) {\n    for (var i = 0; i < model.getNumReactions(); i++) {\n      var reaction = model.getReaction(i);\n      var reactionParentMap = new Map();\n      var edgeClass1 = null;\n      var edgeClass2 = null;\n      var nodeClass = null;\n      var reducedNotation = false;\n      var logicalBoolean = false;\n\n      //Map sbo term if exists\n      var sboTermReaction = reaction.getSBOTerm();\n      if (sboToEdgeClass[sboTermReaction]) {\n        edgeClass1 = sboToEdgeClass[sboTermReaction];\n        reducedNotation = true;\n      } else if (sboTwoEdgeOneNodeClass[sboTermReaction]) {\n        edgeClass1 = sboTwoEdgeOneNodeClass[sboTermReaction][0];\n        nodeClass = sboTwoEdgeOneNodeClass[sboTermReaction][1];\n        edgeClass2 = sboTwoEdgeOneNodeClass[sboTermReaction][2];\n      } else if (sboTermReaction == 177) {\n        nodeClass = \"association\";\n      } else if (sboTermReaction == 180) {\n        nodeClass = \"dissociation\";\n      } else if (sboTermReaction == 178) {\n        nodeClass = 'truncated process';\n      } else if (sboTermReaction == 231)\n        //231 stand for boolean logic reactions in CD but does not specify which one. And logical gate will be used for default\n        {\n          logicalBoolean = true;\n          nodeClass = 'and';\n        } else if (sboTermReaction == 173) {\n        logicalBoolean = true;\n        nodeClass = 'and';\n      } else if (sboTermReaction == 174) {\n        logicalBoolean = true;\n        nodeClass = 'or';\n      } else if (sboTermReaction == 238) {\n        logicalBoolean = true;\n        nodeClass = 'not';\n      } else if (sboTermReaction == 398) {\n        logicalBoolean = true;\n        nodeClass = 'unknown logical operator';\n      } else {\n        edgeClass1 = \"consumption\";\n        nodeClass = \"process\";\n        edgeClass2 = \"production\";\n      }\n      if (reducedNotation) {\n        var reactant = reaction.getReactant(0);\n        var product = reaction.getProduct(0);\n        var edgeData = {\n          \"id\": reactant.getSpecies() + '_' + reaction.getId(),\n          \"source\": reactant.getSpecies(),\n          \"target\": product.getSpecies(),\n          \"class\": edgeClass1\n        };\n        resultJson.push({\n          \"data\": edgeData,\n          \"group\": \"edges\",\n          \"classes\": \"reducedNotation\"\n        });\n        continue;\n      }\n      if (logicalBoolean) {\n        //Get parents\n        var _parent = reaction.getCompartment();\n\n        //Add boolean logic node\n        var boolNode = {\n          \"id\": nodeClass + \"_\" + reaction.getId(),\n          \"label\": \"\",\n          \"parent\": _parent,\n          \"class\": nodeClass\n        };\n        boolNode.width = 15;\n        boolNode.height = 15;\n        resultJson.push({\n          \"data\": boolNode,\n          \"group\": \"nodes\",\n          \"classes\": \"boolean\"\n        });\n        for (var j = 0; j < reaction.getNumReactants(); j++) {\n          var _reactant = reaction.getReactant(j);\n          var _reactantEdgeData2 = {\n            \"id\": _reactant.getSpecies() + '_' + reaction.getId(),\n            \"source\": _reactant.getSpecies(),\n            \"target\": nodeClass + \"_\" + reaction.getId(),\n            \"class\": \"consumption\"\n          };\n          resultJson.push({\n            \"data\": _reactantEdgeData2,\n            \"group\": \"edges\",\n            \"classes\": \"reactantEdge\"\n          });\n        }\n        var _product = reaction.getProduct(0);\n        var reactantEdgeData = {\n          \"id\": _product.getSpecies() + '_' + reaction.getId(),\n          \"source\": nodeClass + \"_\" + reaction.getId(),\n          \"target\": _product.getSpecies(),\n          \"class\": \"reduced trigger\"\n        };\n        resultJson.push({\n          \"data\": reactantEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"reactantEdge\"\n        });\n        continue;\n      }\n\n      // add reactant->reaction edges\n      for (var _j = 0; _j < reaction.getNumReactants(); _j++) {\n        var _reactant2 = reaction.getReactant(_j);\n        var _reactantEdgeData3 = {\n          \"id\": _reactant2.getSpecies() + '_' + reaction.getId(),\n          \"source\": _reactant2.getSpecies(),\n          \"target\": reaction.getId()\n        };\n        if (edgeClass1) _reactantEdgeData3[\"class\"] = edgeClass1;\n        resultJson.push({\n          \"data\": _reactantEdgeData3,\n          \"group\": \"edges\",\n          \"classes\": \"reactantEdge\"\n        });\n\n        // collect possible parent info\n        var speciesCompartment = speciesCompartmentMap.get(_reactant2.getSpecies());\n        if (reactionParentMap.has(speciesCompartment)) reactionParentMap.set(speciesCompartment, reactionParentMap.get(speciesCompartment) + 1);else reactionParentMap.set(speciesCompartment, 1);\n      }\n\n      // add reaction->product edges\n      for (var k = 0; k < reaction.getNumProducts(); k++) {\n        var _product2 = reaction.getProduct(k);\n        var productEdgeData = {\n          \"id\": reaction.getId() + '_' + _product2.getSpecies(),\n          \"source\": reaction.getId(),\n          \"target\": _product2.getSpecies()\n        };\n        if (edgeClass1) productEdgeData[\"class\"] = edgeClass2;\n        if (sboTermReaction == 231) productEdgeData[\"class\"] = \"trigger\";\n        resultJson.push({\n          \"data\": productEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"productEdge\"\n        });\n\n        // collect possible parent info\n        var _speciesCompartment = speciesCompartmentMap.get(_product2.getSpecies());\n        if (reactionParentMap.has(_speciesCompartment)) reactionParentMap.set(_speciesCompartment, reactionParentMap.get(_speciesCompartment) + 1);else reactionParentMap.set(_speciesCompartment, 1);\n      }\n\n      // add reaction node\n      var parent = reaction.getCompartment();\n      var reactionData = {\n        \"id\": reaction.getId(),\n        \"label\": reaction.getName(),\n        \"parent\": parent\n      };\n      reactionData.width = 15;\n      reactionData.height = 15;\n      if (nodeClass) {\n        reactionData[\"class\"] = nodeClass;\n      }\n      resultJson.push({\n        \"data\": reactionData,\n        \"group\": \"nodes\",\n        \"classes\": \"reaction\"\n      });\n\n      // add modifier->reaction edges\n      for (var l = 0; l < reaction.getNumModifiers(); l++) {\n        var modifier = reaction.getModifier(l);\n        var sboTerm = modifier.getSBOTerm();\n        var metaId = modifier.getMetaId();\n        var modifierEdgeData = {\n          \"id\": modifier.getSpecies() + '_' + reaction.getId(),\n          \"source\": modifier.getSpecies(),\n          \"target\": reaction.getId(),\n          \"sboTerm\": modifier.getSBOTerm()\n        };\n        if (sboToEdgeClass[sboTerm]) modifierEdgeData[\"class\"] = sboToEdgeClass[sboTerm];\n        resultJson.push({\n          \"data\": modifierEdgeData,\n          \"group\": \"edges\",\n          \"classes\": \"modifierEdge\"\n        });\n\n        // collect possible parent info\n        var _speciesCompartment2 = speciesCompartmentMap.get(modifier.getSpecies());\n        if (reactionParentMap.has(_speciesCompartment2)) reactionParentMap.set(_speciesCompartment2, reactionParentMap.get(_speciesCompartment2) + 1);else reactionParentMap.set(_speciesCompartment2, 1);\n      }\n    }\n    var reactionGlyphMap = new Map();\n    if (layout) {\n      for (var _i2 = 0; _i2 < layout.getNumReactionGlyphs(); _i2++) {\n        reactionGlyphMap.set(layout.getReactionGlyph(_i2).getReactionId(), _i2);\n      }\n    }\n    sbmlToJson.addJSEdges(resultJson, cytoscapeJsNodes, cytoscapeJsEdges, reactionGlyphMap);\n  };\n  sbmlToJson.addJSEdges = function (resultJson, cytoscapeJsNodes, cytoscapeJsEdges, reactionGlyphMap) {\n    //Default values\n    var classNameEdge1 = \"consumption\"; //Reactant\n    var classNameEdge2 = \"production\"; //Product\n    var classNameEdge3 = \"catalysis\"; //Modifier\n\n    for (var i = 0; i < resultJson.length; i++) {\n      if (resultJson[i].group == 'nodes' && (resultJson[i].classes == \"reaction\" || resultJson[i].classes == \"degradation\" || resultJson[i].classes == \"boolean\")) {\n        var portOrdering = \"L-to-R\";\n        if (layout) {\n          // get reaction glyph\n          var reactionGlyphId = reactionGlyphMap.get(resultJson[i].data.id);\n          var reactionGlyph = layout.getReactionGlyph(reactionGlyphId);\n\n          //create and set bbox values for the reaction node\n          var reactionCurveStart = reactionGlyph.getCurve().getCurveSegment(0).getStart();\n          var reactionCurveEnd = reactionGlyph.getCurve().getCurveSegment(0).getEnd();\n          var reactionCurveLength = Math.max(Math.abs(reactionCurveStart.x() - reactionCurveEnd.x()), Math.abs(reactionCurveStart.y() - reactionCurveEnd.y()));\n          var tempBbox = {};\n          tempBbox.x = (reactionCurveStart.x() + reactionCurveEnd.x()) / 2;\n          tempBbox.y = (reactionCurveStart.y() + reactionCurveEnd.y()) / 2;\n          tempBbox.w = reactionCurveLength;\n          tempBbox.h = reactionCurveLength;\n          if (tempBbox.w <= 0) tempBbox.w = 20;\n          if (tempBbox.h <= 0) tempBbox.h = 20;\n          resultJson[i].data.bbox = tempBbox;\n\n          // Set port ordering string\n          if (reactionCurveStart.x() == reactionCurveEnd.x() && reactionCurveStart.y() < reactionCurveEnd.y()) {\n            portOrdering = \"B-to-T\";\n          } else if (reactionCurveStart.x() == reactionCurveEnd.x() && reactionCurveStart.y() > reactionCurveEnd.y()) {\n            portOrdering = \"T-to-B\";\n          } else if (reactionCurveStart.x() < reactionCurveEnd.x() && reactionCurveStart.y() == reactionCurveEnd.y()) {\n            portOrdering = \"L-to-R\";\n          } else if (reactionCurveStart.x() > reactionCurveEnd.x() && reactionCurveStart.y() == reactionCurveEnd.y()) {\n            portOrdering = \"R-to-L\";\n          }\n        }\n        var port1 = {\n            x: 0,\n            y: 0\n          },\n          port2 = {\n            x: 0,\n            y: 0\n          };\n        if (portOrdering == \"L-to-R\") {\n          port1.x = 70;\n          port2.x = -70;\n        } else if (portOrdering == \"R-to-L\") {\n          port1.x = -70;\n          port2.x = 70;\n        } else if (portOrdering == \"B-to-T\") {\n          port1.y = 70;\n          port2.y = -70;\n        } else if (portOrdering == \"T-to-B\") {\n          port1.y = -70;\n          port2.y = 70;\n        }\n        var ports = [];\n        ports.push({\n          id: resultJson[i].data.id + \".1\",\n          x: port1.x,\n          y: port1.y\n        });\n        ports.push({\n          id: resultJson[i].data.id + \".2\",\n          x: port2.x,\n          y: port2.y\n        });\n        resultJson[i].data.ports = ports;\n        sbmlToJson.addNodes(cytoscapeJsNodes, resultJson[i].data);\n      }\n    }\n    //Create map-  nodeId: nodeClass\n    var nodeIdClass = {};\n    for (var _i3 = 0; _i3 < cytoscapeJsNodes.length; _i3++) {\n      var currentNodeData = cytoscapeJsNodes[_i3].data;\n      nodeIdClass[currentNodeData.id] = currentNodeData[\"class\"];\n    }\n    for (var _i4 = 0; _i4 < resultJson.length; _i4++) {\n      if (resultJson[_i4].group == 'edges') {\n        var edgeObj = {};\n        var styleObj = {};\n        edgeObj.source = resultJson[_i4].data.source; //Is this the label or id?\n        if (nodeIdClass[edgeObj.source] && sbmlToJson.isProcessNode(nodeIdClass[edgeObj.source]) || sbmlToJson.isLogicalOperator(nodeIdClass[edgeObj.source]) || sbmlToJson.isAssocOrDissoc(nodeIdClass[edgeObj.source])) {\n          edgeObj.portsource = resultJson[_i4].data.source + \".1\";\n        }\n        if (resultJson[_i4].classes == \"reactantEdge\") {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge1;\n          }\n        } else if (resultJson[_i4].classes == \"modifierEdge\") {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge3;\n          }\n        } else {\n          if (resultJson[_i4].data[\"class\"]) {\n            edgeObj[\"class\"] = resultJson[_i4].data[\"class\"];\n          } else {\n            edgeObj[\"class\"] = classNameEdge2;\n          }\n        }\n        edgeObj.id = resultJson[_i4].data.id;\n        edgeObj.target = resultJson[_i4].data.target;\n        if (!modifiers.has(edgeObj[\"class\"]) && nodeIdClass[edgeObj.target] && (sbmlToJson.isProcessNode(nodeIdClass[edgeObj.target]) || sbmlToJson.isLogicalOperator(nodeIdClass[edgeObj.target]) || sbmlToJson.isAssocOrDissoc(nodeIdClass[edgeObj.target]))) {\n          edgeObj.porttarget = edgeObj.target + \".2\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n        var cytoscapeJsEdge1 = {\n          data: edgeObj,\n          style: styleObj\n        };\n        cytoscapeJsEdges.push(cytoscapeJsEdge1);\n      }\n    }\n  };\n  sbmlToJson.isProcessNode = function (nodeClass) {\n    return nodeClass.endsWith(\"process\");\n  };\n  sbmlToJson.isLogicalOperator = function (nodeClass) {\n    return nodeClass == \"or\" || nodeClass == \"not\" || nodeClass == \"and\" || nodeClass == \"unknown logical operator\";\n  };\n  sbmlToJson.isAssocOrDissoc = function (nodeClass) {\n    return nodeClass == \"association\" || nodeClass == \"dissociation\";\n  };\n\n  //This function is used to add more nodes(process, association, dissociation) when itterating through the reactions. \n  sbmlToJson.addNodes = function (cytoscapeJsNodes, data) {\n    var nodeObj = {};\n    var styleObj = {};\n    var tempBbox = {};\n    var className = \"process\";\n    if (data[\"class\"]) {\n      className = data[\"class\"];\n    }\n    if (!layout) {\n      tempBbox.x = 0;\n      tempBbox.y = 0;\n      tempBbox.w = data.width;\n      tempBbox.h = data.height;\n      nodeObj.bbox = tempBbox;\n    } else {\n      nodeObj.bbox = data.bbox;\n    }\n    nodeObj[\"class\"] = className;\n    nodeObj.id = data.id;\n    nodeObj.statesandinfos = [];\n    nodeObj.ports = data.ports;\n    nodeObj.parent = data.parent;\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]);\n    cytoscapeJsNodes.push(cytoscapeJsNode);\n    return nodeObj.id;\n  };\n  sbmlToJson.mapPropertiesToObj = function () {\n    /*\r\n    if (this.map.extension && this.map.extension.has('mapProperties')) { // render extension was found\r\n       var xml = this.map.extension.get('mapProperties');\r\n       var obj;\r\n       parseString(xml, function (err, result) {\r\n          obj = result;\r\n       });\r\n       return obj;\r\n    }else{\r\n        \r\n          return {mapProperties : {compoundPadding : mainUtilities.getCompoundPadding()}};\r\n        }\r\n        */\n    return {};\n  };\n\n  // x, y -> middle point for newBox, top left - bottom right points for compartmentBoundingBoxes\n  sbmlToJson.updateCompartmentBox = function (compartmentBoundingBoxes, compartmentId, newBox) {\n    var bbox = compartmentBoundingBoxes.get(compartmentId);\n    if (bbox.x1 == 0 && bbox.y1 == 0 && bbox.x2 == 0 && bbox.y2 == 0) {\n      // Uninitialized\n      compartmentBoundingBoxes.set(compartmentId, {\n        x1: newBox.x - newBox.w / 2,\n        y1: newBox.y - newBox.h / 2,\n        x2: newBox.x + newBox.w / 2,\n        y2: newBox.y + newBox.h / 2\n      });\n      return;\n    }\n\n    // Left and Top Side Update\n    var newBBox = {\n      x1: bbox.x1,\n      y1: bbox.y1,\n      x2: bbox.x2,\n      y2: bbox.y2\n    };\n    if (newBox.x - newBox.w / 2 < bbox.x1) {\n      newBBox.x1 = newBox.x - newBox.w / 2;\n    }\n    if (newBox.y - newBox.h / 2 < bbox.y1) {\n      newBBox.y1 = newBox.y - newBox.h / 2;\n    }\n\n    // Right and Bottom Side Update\n    if (newBox.x + newBox.w / 2 > bbox.x2) {\n      newBBox.x2 = newBox.x + newBox.w / 2;\n    }\n    if (newBox.y + newBox.h / 2 > bbox.y2) {\n      newBBox.y2 = newBox.y + newBox.h / 2;\n    }\n    compartmentBoundingBoxes.set(compartmentId, newBBox);\n  };\n  return sbmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n  function sbmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  sbmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/plain; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n  return sbmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImpzb25Ub1NiZ25tbCIsImVsZW1lbnRVdGlsaXRpZXMiLCJjeSIsInNibWxUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsImNvbnZlcnNpb25BcGlVcmwiLCIkIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJjb250ZW50VHlwZSIsImRhdGEiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZmFpbCJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvc2JtbC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/NGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIganNvblRvU2Jnbm1sLCBlbGVtZW50VXRpbGl0aWVzLCBjeTtcclxuXHJcbiAgZnVuY3Rpb24gc2JtbFRvU2Jnbm1sKHBhcmFtKSB7XHJcbiAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XHJcbiAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcclxuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcclxuICB9XHJcblxyXG5cclxuICBzYm1sVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgY29udmVyc2lvbkFwaVVybCA9IFwiaHR0cHM6Ly9taW5lcnZhLXNlcnZpY2UubGNzYi51bmkubHUvbWluZXJ2YS9hcGkvY29udmVydC9TQk1MOlNCR04tTUxcIjtcclxuXHJcbiAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgdXJsOiBjb252ZXJzaW9uQXBpVXJsLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiBcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIixcclxuICAgICAgICBkYXRhOiB4bWwsXHJcbiAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcclxuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiB0cnVlLCBtZXNzYWdlOiBkYXRhLCBlcnJvcjogXCJcIn0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pXHJcbiAgICAgIFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNibWxUb1NiZ25tbDtcclxuXHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBVztFQUUxQixJQUFJQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxFQUFFO0VBRXRDLFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRTtJQUMzQkosWUFBWSxHQUFHSSxLQUFLLENBQUNDLHFCQUFxQjtJQUMxQ0osZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQWdCO0lBQ3pDQyxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBYyxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUdBSixZQUFZLENBQUNLLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtJQUM5QyxJQUFJQyxnQkFBZ0IsR0FBRyxzRUFBc0U7SUFFN0YsT0FBT0MsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFDVkMsSUFBSSxFQUFFLE1BQU07TUFDWkMsR0FBRyxFQUFFSixnQkFBZ0I7TUFDckJLLFdBQVcsRUFBRSwyQkFBMkI7TUFDeENDLElBQUksRUFBRVIsR0FBRztNQUNUUyxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQVlGLElBQUksRUFBRUcsVUFBVSxFQUFFQyxHQUFHLEVBQUU7UUFDdEMsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLEtBQUssR0FBRyxFQUFFO1VBQ3BCWixRQUFRLENBQUM7WUFBQ2EsTUFBTSxFQUFFLEtBQUs7WUFBRUMsS0FBSyxFQUFFUCxJQUFJO1lBQUVRLE9BQU8sRUFBRSx5QkFBeUIsR0FBR0osR0FBRyxDQUFDQztVQUFNLENBQUMsQ0FBQztRQUMzRixDQUFDLE1BQU07VUFDSFosUUFBUSxDQUFDO1lBQUNhLE1BQU0sRUFBRSxJQUFJO1lBQUVFLE9BQU8sRUFBRVIsSUFBSTtZQUFFTyxLQUFLLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFDdEQ7TUFDSixDQUFDO01BQ0RBLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFZQSxNQUFLLEVBQUU7UUFDcEJkLFFBQVEsQ0FBQztVQUFDYSxNQUFNLEVBQUUsS0FBSztVQUFFQyxLQUFLLEVBQUVBLE1BQUs7VUFBRUMsT0FBTyxFQUFFO1FBQUUsQ0FBQyxDQUFDO01BQ3hELENBQUM7TUFDREMsSUFBSSxFQUFFLFNBQU5BLElBQUlBLENBQVlGLEtBQUssRUFBRTtRQUNuQmQsUUFBUSxDQUFDO1VBQUNhLE1BQU0sRUFBRSxLQUFLO1VBQUVDLEtBQUssRUFBRUEsS0FBSztVQUFFQyxPQUFPLEVBQUU7UUFBRSxDQUFDLENBQUM7TUFDeEQ7SUFDSixDQUFDLENBQUM7RUFFSixDQUFDO0VBRUQsT0FBT3RCLFlBQVk7QUFFckIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"./node_modules/console-browserify/index.js\");\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\nfunction strToSet(str, splitBy) {\n  var set = {};\n  var list = str ? str.split(splitBy) : [];\n  list.forEach(function (member) {\n    set[member] = true;\n  });\n  return set;\n}\nfunction getEmptyGraphData() {\n  return {\n    nodes: [],\n    edges: []\n  };\n}\nmodule.exports = function () {\n  var elementUtilities;\n  function sifToJson(param) {\n    elementUtilities = param.elementUtilities;\n  }\n  sifToJson.initGraphVariables = function () {\n    sifToJson.graphData = getEmptyGraphData();\n    sifToJson.nameToNode = {};\n    sifToJson.keyToEdge = {};\n    // set of nodes that are connected to an edge\n    sifToJson.nodeWithSpecifiedClass = {};\n  };\n  sifToJson.defaultNodeType = 'SIF macromolecule';\n  sifToJson.mergeGraphData = function () {\n    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));\n  };\n  sifToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'sif';\n    elementUtilities.mapType = 'SIF';\n    sifToJson.initGraphVariables();\n    if (graphText == undefined) {\n      return sifToJson.graphData;\n    }\n    var lines = tdParser.getLinesArray(graphText.toString());\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n\n      // line represents a node\n      if (tabs.length === 1) {\n        var nodeName = tabs[0];\n        // create the node if does not exist yet\n        // if the node is just created it will have the default node class\n        sifToJson.getOrCreateNode(nodeName);\n      }\n      // line represents an edge and the connected nodes\n      else {\n        var srcName = tabs[0];\n        var edgeType = tabs[1];\n        var tgtName = tabs[2];\n        var pcIDSet = strToSet(tabs[3], /;| /);\n        var siteLocSet = strToSet(tabs[4], ';');\n        var srcClass = sifToJson.getNodeClass(edgeType, 'src');\n        var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt');\n\n        // create nodes if they do not exist yet\n        // if the node already exists the node type and so the default values\n        // will be updated\n        sifToJson.getOrCreateNode(srcName, srcClass);\n        sifToJson.getOrCreateNode(tgtName, tgtClass);\n\n        // create the edge if it does not exist yet\n        sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);\n      }\n    });\n    return sifToJson.mergeGraphData();\n  };\n  sifToJson.getNodeByName = function (name) {\n    return sifToJson.nameToNode[name];\n  };\n  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {\n    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n    return sifToJson.keyToEdge[key];\n  };\n  sifToJson.mapNodeToName = function (node, name) {\n    sifToJson.nameToNode[name] = node;\n  };\n  sifToJson.mapEdgeToKey = function (edge, key) {\n    sifToJson.keyToEdge[key] = edge;\n  };\n  sifToJson.calculateEdgeKey = function (src, type, tgt) {\n    return [src, type, tgt].join(' ');\n  };\n  sifToJson.getOrCreateNode = function (name, className) {\n    // save if class name parameter is set\n    var classNameSpecified = !!className;\n    className = className || sifToJson.defaultNodeType;\n    var node = sifToJson.getNodeByName(name);\n    var defaults = elementUtilities.getDefaultProperties(className);\n    var updateWithDefaults = function updateWithDefaults() {\n      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);\n      node.data.bbox.h = defaults.height;\n      if (elementUtilities.canHaveSBGNLabel(className)) {\n        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');\n        var fontSize;\n        var fontFamily = node.data['font-family'];\n        if (isDynamicLabel) {\n          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');\n          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n          var obj = {\n            height: node.data.bbox.h,\n            \"class\": className\n          };\n          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);\n        } else {\n          fontSize = node.data['font-size'];\n        }\n        var max = 250;\n        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {\n          max: max\n        });\n      } else {\n        node.data.bbox.w = defaults.width;\n      }\n    };\n    if (node == undefined) {\n      var uid = elementUtilities.generateNodeId();\n      node = {};\n      node.data = {\n        id: uid,\n        label: name,\n        \"class\": className,\n        bbox: {\n          x: 0,\n          y: 0\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      updateWithDefaults();\n      sifToJson.mapNodeToName(node, name);\n      sifToJson.graphData.nodes.push(node);\n    }\n    // if class name parameter is set and the already existing node has a different\n    // class name check if the existing node has a specified class or just used the\n    // default one because it was not coming from an edge.\n    // In first case give a warning and do not update the class,\n    // in second case update the class and the node data with defaults\n    else if (classNameSpecified && node.data[\"class\"] !== className) {\n      if (sifToJson.nodeWithSpecifiedClass[name]) {\n        console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data[\"class\"]);\n      } else {\n        node.data[\"class\"] = className;\n        updateWithDefaults();\n      }\n    }\n    if (classNameSpecified) {\n      sifToJson.nodeWithSpecifiedClass[name] = true;\n    }\n    return node;\n  };\n  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {\n    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);\n    if (edge == undefined) {\n      var uid = elementUtilities.generateEdgeId();\n      var source = sifToJson.getNodeByName(srcName).data.id;\n      var target = sifToJson.getNodeByName(tgtName).data.id;\n      edge = {};\n      edge.data = {\n        id: uid,\n        pcIDSet: pcIDSet,\n        siteLocSet: siteLocSet,\n        source: source,\n        target: target,\n        \"class\": type\n      };\n      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);\n      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n      sifToJson.mapEdgeToKey(edge, key);\n      sifToJson.graphData.edges.push(edge);\n    }\n    return edge;\n  };\n  sifToJson.getNodeClass = function (edgeType, role) {\n    var type;\n    switch (edgeType) {\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';\n        break;\n      case 'consumption-controled-by':\n      case 'chemical-affects':\n        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';\n        break;\n      case 'reacts-with':\n      case 'used-to-produce':\n        type = 'SIF simple chemical';\n        break;\n      default:\n        type = 'SIF macromolecule';\n        break;\n    }\n    return type;\n  };\n  sifToJson.getMapProperty = function (propName) {\n    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];\n  };\n  sifToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: {\n        dynamicLabelSize: 'large',\n        adjustNodeLabelFontSizeAutomatically: true\n      }\n    };\n  };\n  return sifToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sif-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function tdParser() {}\n;\ntdParser.getTabsArray = function (line) {\n  return line.split('\\t');\n};\ntdParser.getLinesArray = function (content) {\n  var separator = /\\r?\\n|\\r/;\n  var notEmpty = function notEmpty(line) {\n    return line !== '';\n  };\n  return content.split(separator).filter(notEmpty);\n};\nmodule.exports = tdParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3RhYi1kZWxpbWV0ZWQtcGFyc2VyLmpzIiwibmFtZXMiOlsidGRQYXJzZXIiLCJnZXRUYWJzQXJyYXkiLCJsaW5lIiwic3BsaXQiLCJnZXRMaW5lc0FycmF5IiwiY29udGVudCIsInNlcGFyYXRvciIsIm5vdEVtcHR5IiwiZmlsdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2JnbnZpei8uL3NyYy91dGlsaXRpZXMvdGFiLWRlbGltZXRlZC1wYXJzZXIuanM/MGVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0ZFBhcnNlcigpIHtcclxufTtcclxuXHJcbnRkUGFyc2VyLmdldFRhYnNBcnJheSA9IGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gIHJldHVybiBsaW5lLnNwbGl0KCAnXFx0JyApO1xyXG59O1xyXG5cclxudGRQYXJzZXIuZ2V0TGluZXNBcnJheSA9IGZ1bmN0aW9uKCBjb250ZW50ICkge1xyXG4gIHZhciBzZXBhcmF0b3IgPSAvXFxyP1xcbnxcXHIvO1xyXG4gIHZhciBub3RFbXB0eSA9IGZ1bmN0aW9uKCBsaW5lICkge1xyXG4gICAgcmV0dXJuIGxpbmUgIT09ICcnO1xyXG4gIH07XHJcbiAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoIHNlcGFyYXRvciApLmZpbHRlciggbm90RW1wdHkgKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gdGRQYXJzZXI7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsUUFBUUEsQ0FBQSxFQUFHLENBQ3BCO0FBQUM7QUFFREEsUUFBUSxDQUFDQyxZQUFZLEdBQUcsVUFBVUMsSUFBSSxFQUFHO0VBQ3ZDLE9BQU9BLElBQUksQ0FBQ0MsS0FBSyxDQUFFLElBQUssQ0FBQztBQUMzQixDQUFDO0FBRURILFFBQVEsQ0FBQ0ksYUFBYSxHQUFHLFVBQVVDLE9BQU8sRUFBRztFQUMzQyxJQUFJQyxTQUFTLEdBQUcsVUFBVTtFQUMxQixJQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBYUwsSUFBSSxFQUFHO0lBQzlCLE9BQU9BLElBQUksS0FBSyxFQUFFO0VBQ3BCLENBQUM7RUFDRCxPQUFPRyxPQUFPLENBQUNGLEtBQUssQ0FBRUcsU0FBVSxDQUFDLENBQUNFLE1BQU0sQ0FBRUQsUUFBUyxDQUFDO0FBQ3RELENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdWLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimeted-parser.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\nvar parseString = (__webpack_require__(/*! xml2js */ \"xml2js\").parseString);\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\nmodule.exports = function () {\n  var elementUtilities;\n  function tdToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n  }\n  tdToJson.map = undefined;\n  tdToJson.edgeTypes = {\n    'positive influence': true,\n    'negative influence': true,\n    'unknown influence': true,\n    'necassary influence': true,\n    'logic arcs': true,\n    'equivalance arcs': true\n  };\n  tdToJson.nodeTypes = {\n    'biological activity': 'BA plain',\n    'macromolecule': 'BA macromolecule',\n    'complex': 'BA complex',\n    'simple chemical': 'BA simple chemical',\n    'unspecified entity': 'BA unspecified entity',\n    'nucleic acid feature': 'BA nucleic acid feature',\n    'perturbing agent': 'BA perturbing agent',\n    'phenotype': 'phenotype',\n    'compartment': 'compartment',\n    'submap': 'submap',\n    'tag': 'tag',\n    'and': 'and',\n    'or': 'or',\n    'not': 'not',\n    'delay': 'delay'\n  };\n  tdToJson.validateNodeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.nodeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.validateEdgeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    return this.edgeTypes.hasOwnProperty(_type);\n  };\n  tdToJson.convertTypeToClass = function (ele, type, isNode) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n    ele.data[\"class\"] = isNode ? this.nodeTypes[_type] : _type;\n  };\n  tdToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: this.map.mapProperties\n    };\n  };\n\n  /**\r\n   * Adds states and infobox information to given node\r\n   * @param node : a node object\r\n   */\n  tdToJson.addInfoBox = function (node) {\n    var _class = node.data[\"class\"];\n    if (_class.startsWith(\"BA\") && _class != \"BA plain\") {\n      var unitOfInformation = classes.UnitOfInformation.construct();\n      unitOfInformation.parent = node.data.id;\n      // file format does not contain bbox information, hence define them below\n      unitOfInformation.bbox = {\n        x: 25,\n        y: -50,\n        w: 30,\n        h: 12\n      };\n      classes.UnitOfInformation.setAnchorSide(unitOfInformation);\n      node.data.statesandinfos = [unitOfInformation];\n    } else {\n      node.data.statesandinfos = [];\n    }\n  };\n  tdToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'td';\n    if (graphText === undefined) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      var map = {};\n      var nodes = []; //Holds nodes\n      var edges = []; //Holds edges\n      this.map = map;\n\n      //Define the line separator\n      // \\r\\n, \\n and \\r line separators\n      var separator = /\\r?\\n|\\r/;\n      var lines = graphText.toString().split(separator);\n      var graphDataIndex = 4; //graph data starts at index 4\n      var edgesStartIndex = -1; //unkown at the begining\n\n      var formatVersion = lines[0];\n      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {\n        throw \"Wrong file format!\";\n      }\n      if (formatVersion.length == 10) {\n        formatVersion = formatVersion + \" 1.0\"; //default 1.0\n      }\n      var title = lines[1];\n      var description = lines[2];\n      //Second element of the format version specifies map language\n      var mapLanguage = formatVersion.toString().split(\" \")[1];\n      elementUtilities.mapType = mapLanguage;\n      map.mapProperties = {};\n      map.mapProperties.mapDescription = description;\n      map.mapProperties.mapName = title;\n      //start to parse the graph\n      for (var i = graphDataIndex; i < lines.length; i++) {\n        //blank line indicates that nodes are finished\n        //so continue with edges\n        if (lines[i].length === 0 || lines[i] === \"\") {\n          while (lines[i] === \"\" && i < lines.length) {\n            i++;\n          }\n          edgesStartIndex = i + 2;\n          break;\n        }\n\n        //Parse the node data\n        var data = lines[i].toString().split('\\t'); //each data seperated by tab\n        var nodeName = data[0];\n\n        //If there is no blank line\n        if (nodeName.toString().toLowerCase() == '--edge_id') {\n          edgesStartIndex = i + 1;\n          break;\n        }\n        var nodeId = data[1];\n        var nodeType = data[2];\n        var parentID = data[3];\n        var posX = data.length > 4 ? data[4] : \"0\"; //if posX not given\n        var posY = data.length > 5 ? data[5] : \"0\"; //if posY not given\n        var nodeWidth = data.length > 6 ? data[6] : undefined;\n        var nodeHeight = data.length > 7 ? data[7] : undefined;\n\n        //add parsed Node\n        var newNode = {\n          group: 'nodes',\n          data: {\n            id: nodeId,\n            label: nodeName,\n            ports: [],\n            bbox: {\n              x: parseFloat(posX),\n              y: parseFloat(posY),\n              w: nodeWidth,\n              h: nodeHeight\n            }\n          }\n        };\n        if (this.validateNodeType(nodeType)) {\n          this.convertTypeToClass(newNode, nodeType, true);\n          this.addInfoBox(newNode);\n        } else {\n          throw \"Node type mismatched...\";\n        }\n        if (parentID != '-1') {\n          newNode.data.parent = parentID;\n        }\n        if (newNode.data[\"class\"]) {\n          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data[\"class\"]);\n          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {\n            var defaults = elementUtilities.getDefaultProperties(newNode.data[\"class\"]);\n            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;\n            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;\n          }\n        }\n        nodes.push(newNode);\n      }\n\n      //Start parsing edges\n      for (var i = edgesStartIndex; i < lines.length; i++) {\n        //EOF finish loop\n        if (lines[i].length === 0) {\n          break;\n        }\n        var data = lines[i].toString().split('\\t');\n        var edgeID = data[0];\n        var edgeSource = data[1];\n        var edgeTarget = data[2];\n        var edgeType = data[3];\n        var newEdge = {\n          group: 'edges',\n          data: {\n            id: edgeID,\n            source: edgeSource,\n            target: edgeTarget\n          }\n        };\n        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {\n          throw \"Edge Type mismatched...\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data[\"class\"]);\n        edges.push(newEdge);\n      }\n      var jsGraph = {};\n      jsGraph.nodes = nodes;\n      jsGraph.edges = edges;\n      return jsGraph;\n    }\n  };\n  return tdToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimited-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*\r\n * Text utilities for common usage\r\n */\n\nvar textUtilities = {\n  // same purpose as previous one, but with clearer responsibility\n  truncate: function truncate(text, font, width) {\n    text = text + \"\";\n    var context = document.createElement('canvas').getContext(\"2d\");\n    context.font = font;\n    // check trivial case first, when entire text is already small enough\n    if (context.measureText(text).width < width) {\n      return text;\n    } else {\n      var ellipsis = \"..\";\n      // if ellipsis alone is already too large\n      if (context.measureText(ellipsis).width > width) {\n        return \"\";\n      }\n      var finalLength; // this should always have a value after the loop\n      for (var i = 0; i < text.length; i++) {\n        var subtext = text.substring(0, i) + ellipsis;\n        if (context.measureText(subtext).width > width) {\n          // we're too far, take the previous index\n          finalLength = i > 0 ? i - 1 : 0;\n          break;\n        }\n      }\n      return text.substring(0, finalLength) + ellipsis;\n    }\n  },\n  // ensure that returned string follows xsd:ID standard\n  // should follow r'^[a-zA-Z_][\\w.-]*$'\n  getXMLValidId: function getXMLValidId(originalId) {\n    var newId = \"\";\n    var xmlValidRegex = /^[a-zA-Z_][\\w.-]*$/;\n    if (!xmlValidRegex.test(originalId)) {\n      // doesn't comply\n      newId = originalId;\n      newId = newId.replace(/[^\\w.-]/g, \"\");\n      if (!xmlValidRegex.test(newId)) {\n        // still doesn't comply\n        newId = \"_\" + newId;\n        if (!xmlValidRegex.test(newId)) {\n          // normally we should never enter this\n          // if for some obscure reason we still don't comply, throw error.\n          throw new Error(\"Can't make identifer comply to xsd:ID requirements: \" + newId);\n        }\n      }\n      return newId;\n    } else {\n      return originalId;\n    }\n  },\n  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {\n    var DEFAULT_MARGIN = 5;\n    var lines = content.split(\"\\n\");\n    var context = document.createElement('canvas').getContext('2d');\n    // should not make type check so '===' should not be used here\n    var shouldAppend = parseFloat(fontSize) == fontSize;\n    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;\n    context.font = validFontSize + ' ' + fontFamily;\n    var width = 0;\n    lines.forEach(function (line) {\n      var w = context.measureText(line).width;\n      if (w > width) {\n        width = w;\n      }\n    });\n    var margin = options && options.margin;\n    if (margin == null) {\n      margin = DEFAULT_MARGIN;\n    }\n    width += 2 * margin;\n    var min = options && options.min;\n    var max = options && options.max;\n    if (min != null && width < min) {\n      width = min;\n    } else if (max != null && width > max) {\n      width = max;\n    }\n    return width;\n  },\n  FromKebabToCamelCase: function FromKebabToCamelCase(input) {\n    return input.replace(/(-\\w)/g, function (m) {\n      return m[1].toUpperCase();\n    });\n  },\n  FromCamelToKebabCase: function FromCamelToKebabCase(input) {\n    return input.replace(/[\\w]([A-Z])/g, function (m) {\n      return m[0] + \"-\" + m[1];\n    }).toLowerCase();\n  }\n};\nmodule.exports = textUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/text-utilities.js\n");

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n* Commonly needed UI Utilities\r\n*/\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var optionUtilities;\n  var options;\n  function uiUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n  }\n  uiUtilities.startSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    if ($('.' + className).length === 0) {\n      var containerWidth = $(options.networkContainerSelector).width();\n      var containerHeight = $(options.networkContainerSelector).height();\n      $(options.networkContainerSelector + ':parent').prepend('<div style=\"position: absolute; z-index: 9999999; left: 45%; top: ' + containerHeight / 2 + 'px;\" class=\"' + className + '-wrapper\">' + '<div style=\"margin: 0 auto; margin-bottom: 5px; width:50px\"><i class=\"fa fa-spinner fa-spin fa-3x fa-fw ' + className + '\"></i></div>' + '<div style=\"width: 220px; height 20%\"><i class=\"' + className + '-text\">Take a sip of your coffee while you wait...</i></div>' + '</div>');\n      $(\".\" + className + '-text').fadeOut(0);\n    }\n  };\n  uiUtilities.showSpinnerText = function (className) {\n    $(\".\" + className + '-text').fadeIn(0);\n  };\n  uiUtilities.showSpinnerText = function (className) {\n    $(\".\" + className + '-text').fadeIn(0);\n  };\n  uiUtilities.endSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n    if ($('.' + className + '-wrapper').length > 0) {\n      $('.' + className + '-wrapper').remove();\n    }\n  };\n  return uiUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VpLXV0aWxpdGllcy1mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMseURBQWlCLENBQUM7QUFDN0MsSUFBSUMsSUFBSSxHQUFHRixZQUFZLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLElBQUlDLE1BQU0sR0FBR0MsQ0FBQyxHQUFHSCxJQUFJLENBQUNFLE1BQU07QUFFNUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFlBQVk7RUFFNUIsSUFBSUMsZUFBZTtFQUNuQixJQUFJQyxPQUFPO0VBRVgsU0FBU0MsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFO0lBQzNCSCxlQUFlLEdBQUdHLEtBQUssQ0FBQ0gsZUFBZTtJQUN2Q0MsT0FBTyxHQUFHRCxlQUFlLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0VBQ3hDO0VBRUFGLFdBQVcsQ0FBQ0csWUFBWSxHQUFHLFVBQVVDLFNBQVMsRUFBRTtJQUM3QyxJQUFJLENBQUNBLFNBQVMsRUFBRTtNQUNmQSxTQUFTLEdBQUcsZUFBZTtJQUM3QjtJQUVBLElBQUlULENBQUMsQ0FBQyxHQUFHLEdBQUdTLFNBQVMsQ0FBQyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ3BDLElBQUlDLGNBQWMsR0FBR1gsQ0FBQyxDQUFDSSxPQUFPLENBQUNRLHdCQUF3QixDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO01BQ2hFLElBQUlDLGVBQWUsR0FBR2QsQ0FBQyxDQUFDSSxPQUFPLENBQUNRLHdCQUF3QixDQUFDLENBQUNHLE1BQU0sQ0FBQyxDQUFDO01BQ2xFZixDQUFDLENBQUNJLE9BQU8sQ0FBQ1Esd0JBQXdCLEdBQUcsU0FBUyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxvRUFBb0UsR0FBR0YsZUFBZSxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUNMLFNBQVMsR0FBQyxZQUFZLEdBQzFMLDBHQUEwRyxHQUFHQSxTQUFTLEdBQUcsY0FBYyxHQUN2SSxrREFBa0QsR0FBR0EsU0FBUyxHQUFHLDhEQUE4RCxHQUMvSCxRQUFRLENBQUM7TUFDVFQsQ0FBQyxDQUFDLEdBQUcsR0FBQ1MsU0FBUyxHQUFDLE9BQU8sQ0FBQyxDQUFDUSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BDO0VBQ0YsQ0FBQztFQUNEWixXQUFXLENBQUNhLGVBQWUsR0FBRyxVQUFTVCxTQUFTLEVBQ2hEO0lBQ0VULENBQUMsQ0FBQyxHQUFHLEdBQUNTLFNBQVMsR0FBQyxPQUFPLENBQUMsQ0FBQ1UsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNwQyxDQUFDO0VBRURkLFdBQVcsQ0FBQ2EsZUFBZSxHQUFHLFVBQVNULFNBQVMsRUFDaEQ7SUFDRVQsQ0FBQyxDQUFDLEdBQUcsR0FBQ1MsU0FBUyxHQUFDLE9BQU8sQ0FBQyxDQUFDVSxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLENBQUM7RUFFRGQsV0FBVyxDQUFDZSxVQUFVLEdBQUcsVUFBVVgsU0FBUyxFQUFFO0lBQzdDLElBQUksQ0FBQ0EsU0FBUyxFQUFFO01BQ2RBLFNBQVMsR0FBRyxlQUFlO0lBQzdCO0lBRUEsSUFBSVQsQ0FBQyxDQUFDLEdBQUcsR0FBR1MsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzlDVixDQUFDLENBQUMsR0FBRyxHQUFHUyxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUNZLE1BQU0sQ0FBQyxDQUFDO0lBQzFDO0VBQ0QsQ0FBQztFQUdELE9BQU9oQixXQUFXO0FBQ25CLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy91aS11dGlsaXRpZXMtZmFjdG9yeS5qcz83ZjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiogQ29tbW9ubHkgbmVlZGVkIFVJIFV0aWxpdGllc1xyXG4qL1xyXG5cclxudmFyIGxpYlV0aWxpdGllcyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpO1xyXG52YXIgbGlicyA9IGxpYlV0aWxpdGllcy5nZXRMaWJzKCk7XHJcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiB2YXIgb3B0aW9uVXRpbGl0aWVzO1xyXG4gdmFyIG9wdGlvbnM7XHJcblxyXG4gZnVuY3Rpb24gdWlVdGlsaXRpZXMgKHBhcmFtKSB7XHJcbiAgIG9wdGlvblV0aWxpdGllcyA9IHBhcmFtLm9wdGlvblV0aWxpdGllcztcclxuICAgb3B0aW9ucyA9IG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zKCk7XHJcbiB9XHJcblxyXG4gdWlVdGlsaXRpZXMuc3RhcnRTcGlubmVyID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgaWYgKCFjbGFzc05hbWUpIHtcclxuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XHJcbiAgIH1cclxuXHJcbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICB2YXIgY29udGFpbmVyV2lkdGggPSAkKG9wdGlvbnMubmV0d29ya0NvbnRhaW5lclNlbGVjdG9yKS53aWR0aCgpO1xyXG4gICAgdmFyIGNvbnRhaW5lckhlaWdodCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLmhlaWdodCgpO1xyXG4gICAgJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3RvciArICc6cGFyZW50JykucHJlcGVuZCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogOTk5OTk5OTsgbGVmdDogNDUlOyB0b3A6ICcgKyBjb250YWluZXJIZWlnaHQgLyAyICsgJ3B4O1wiIGNsYXNzPVwiJytjbGFzc05hbWUrJy13cmFwcGVyXCI+JytcclxuICAgICc8ZGl2IHN0eWxlPVwibWFyZ2luOiAwIGF1dG87IG1hcmdpbi1ib3R0b206IDVweDsgd2lkdGg6NTBweFwiPjxpIGNsYXNzPVwiZmEgZmEtc3Bpbm5lciBmYS1zcGluIGZhLTN4IGZhLWZ3ICcgKyBjbGFzc05hbWUgKyAnXCI+PC9pPjwvZGl2PicrXHJcbiAgICAnPGRpdiBzdHlsZT1cIndpZHRoOiAyMjBweDsgaGVpZ2h0IDIwJVwiPjxpIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICctdGV4dFwiPlRha2UgYSBzaXAgb2YgeW91ciBjb2ZmZWUgd2hpbGUgeW91IHdhaXQuLi48L2k+PC9kaXY+JytcclxuICAgICc8L2Rpdj4nKTtcclxuICAgICQoXCIuXCIrY2xhc3NOYW1lKyctdGV4dCcpLmZhZGVPdXQoMClcclxuICAgfVxyXG4gfTtcclxuIHVpVXRpbGl0aWVzLnNob3dTcGlubmVyVGV4dCA9IGZ1bmN0aW9uKGNsYXNzTmFtZSlcclxuIHtcclxuICAgJChcIi5cIitjbGFzc05hbWUrJy10ZXh0JykuZmFkZUluKDApXHJcbiB9XHJcblxyXG4gdWlVdGlsaXRpZXMuc2hvd1NwaW5uZXJUZXh0ID0gZnVuY3Rpb24oY2xhc3NOYW1lKVxyXG4ge1xyXG4gICAkKFwiLlwiK2NsYXNzTmFtZSsnLXRleHQnKS5mYWRlSW4oMClcclxuIH1cclxuXHJcbiB1aVV0aWxpdGllcy5lbmRTcGlubmVyID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gIGlmICghY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XHJcbiAgfVxyXG5cclxuICBpZiAoJCgnLicgKyBjbGFzc05hbWUgKyAnLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAkKCcuJyArIGNsYXNzTmFtZSArICctd3JhcHBlcicpLnJlbW92ZSgpO1xyXG4gIH1cclxuIH07XHJcblxyXG5cclxuIHJldHVybiB1aVV0aWxpdGllcztcclxufTtcclxuIl0sIm5hbWVzIjpbImxpYlV0aWxpdGllcyIsInJlcXVpcmUiLCJsaWJzIiwiZ2V0TGlicyIsImpRdWVyeSIsIiQiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9uVXRpbGl0aWVzIiwib3B0aW9ucyIsInVpVXRpbGl0aWVzIiwicGFyYW0iLCJnZXRPcHRpb25zIiwic3RhcnRTcGlubmVyIiwiY2xhc3NOYW1lIiwibGVuZ3RoIiwiY29udGFpbmVyV2lkdGgiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ3aWR0aCIsImNvbnRhaW5lckhlaWdodCIsImhlaWdodCIsInByZXBlbmQiLCJmYWRlT3V0Iiwic2hvd1NwaW5uZXJUZXh0IiwiZmFkZUluIiwiZW5kU3Bpbm5lciIsInJlbW92ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/ui-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/*\r\n * This file exports the functions to be utilized in undoredo extension actions\r\n */\n\nmodule.exports = function () {\n  var elementUtilities;\n  var experimentalDataOverlay;\n  var mainUtilities;\n  var cy;\n  function undoRedoActionFunctions(param) {\n    elementUtilities = param.elementUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  undoRedoActionFunctions.deleteElesSimple = function (param) {\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.restoreEles = function (eles) {\n    var param = {};\n    param.eles = elementUtilities.restoreEles(eles);\n    return param;\n  };\n  undoRedoActionFunctions.deleteNodesSmart = function (param) {\n    if (param.firstTime) {\n      return elementUtilities.deleteNodesSmart(param.eles);\n    }\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n  undoRedoActionFunctions.setPortsOrdering = function (param) {\n    var nodes = param.nodes;\n    var ordering = param.ordering;\n    var portDistance = param.portDistance;\n    var connectedEdges = nodes.connectedEdges();\n    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.\n    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.\n\n    // Fill node/edge prop maps for undo/redo actions\n\n    // Node prop map includes a copy of node ports\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var ports = node.data('ports');\n      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering\n      var portsCopy = ports.length === 2 ? [{\n        id: ports[0].id,\n        x: ports[0].x,\n        y: ports[0].y\n      }, {\n        id: ports[1].id,\n        x: ports[1].x,\n        y: ports[1].y\n      }] : [];\n      nodePropMap[node.id()] = {\n        ordering: currentOrdering,\n        ports: portsCopy\n      };\n    }\n\n    // Node prop map includes edge portsource and porttarget\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      edgePropMap[edge.id()] = {\n        portsource: edge.data('portsource'),\n        porttarget: edge.data('porttarget')\n      };\n    }\n    var result = {\n      nodes: nodes,\n      nodePropMap: nodePropMap,\n      edgePropMap: edgePropMap\n    };\n\n    // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges\n    if (param.firstTime) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      cy.startBatch();\n\n      // Go back to stored node ports state\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var portsToReturn = param.nodePropMap[node.id()].ports;\n        var orderingsToReturn = param.nodePropMap[node.id()].ordering;\n        node.data('ports', portsToReturn);\n        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering\n      }\n\n      // Go back to stored edge portsource/porttargets state\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        var props = param.edgePropMap[edge.id()];\n        edge.data('portsource', props.portsource);\n        edge.data('porttarget', props.porttarget);\n      }\n      cy.endBatch();\n    }\n    return result;\n  };\n  undoRedoActionFunctions.hideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.unhideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideExp(fileName, expName);\n  };\n  undoRedoActionFunctions.hideAll = function () {\n    return experimentalDataOverlay.hideAll();\n  };\n  undoRedoActionFunctions.hideAllUndo = function (param) {\n    var invisibleFile = param.invisibleFile;\n    var invisibleExp = param.invisibleExp;\n    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);\n  };\n  undoRedoActionFunctions.unhideAll = function () {\n    return experimentalDataOverlay.unhideAll();\n  };\n  undoRedoActionFunctions.unhideAllUndo = function (param) {\n    var visibleFile = param.visibleFile;\n    var visibleExp = param.visibleExp;\n    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);\n  };\n  undoRedoActionFunctions.hideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideFile(fileName);\n  };\n  undoRedoActionFunctions.hideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var invisible = param.invisible;\n    return experimentalDataOverlay.hideFileUndo(fileName, invisible);\n  };\n  undoRedoActionFunctions.unhideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideFile(fileName);\n  };\n  undoRedoActionFunctions.unhideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var visible = param.visible;\n    return experimentalDataOverlay.unhideFileUndo(fileName, visible);\n  };\n  undoRedoActionFunctions.addExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    var isVisible = param.isVisible;\n    var values = param.values;\n    var groupArray = param.groupArray;\n    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);\n  };\n  undoRedoActionFunctions.removeExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    return experimentalDataOverlay.removeExp(fileName, expName);\n  };\n  undoRedoActionFunctions.addFile = function (param) {\n    var fileName = param.fileName;\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.removeFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.removeFile(fileName);\n  };\n  undoRedoActionFunctions.removeAll = function (param) {\n    return experimentalDataOverlay.removeAll();\n  };\n  undoRedoActionFunctions.restoreAll = function (param) {\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);\n  };\n  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {\n    var result = mainUtilities.getCompoundPadding();\n    mainUtilities.setCompoundPadding(newPadding);\n    return result;\n  };\n  return undoRedoActionFunctions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/undo-redo-action-functions-factory.js\n");

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\r\n* Lookup object for valid map properties.\r\n* In the future it could be combined with other similar properties/functions in a new file.\r\n*/\nmodule.exports = {\n  compoundPadding: true,\n  extraCompartmentPadding: true,\n  extraComplexPadding: true,\n  arrowScale: true,\n  showComplexName: true,\n  dynamicLabelSize: true,\n  inferNestingOnLoad: true,\n  fitLabelsToNodes: true,\n  fitLabelsToInfoboxes: true,\n  recalculateLayoutOnComplexityManagement: true,\n  rearrangeOnComplexityManagement: true,\n  animateOnDrawingChanges: true,\n  adjustNodeLabelFontSizeAutomatically: true,\n  enablePorts: true,\n  allowCompoundNodeResize: true,\n  mapColorScheme: true,\n  mapColorSchemeStyle: true,\n  mapName: true,\n  mapDescription: true,\n  enableSIFTopologyGrouping: true,\n  experimentDescription: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3ZhbGlkTWFwUHJvcGVydGllcy5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21wb3VuZFBhZGRpbmciLCJleHRyYUNvbXBhcnRtZW50UGFkZGluZyIsImV4dHJhQ29tcGxleFBhZGRpbmciLCJhcnJvd1NjYWxlIiwic2hvd0NvbXBsZXhOYW1lIiwiZHluYW1pY0xhYmVsU2l6ZSIsImluZmVyTmVzdGluZ09uTG9hZCIsImZpdExhYmVsc1RvTm9kZXMiLCJmaXRMYWJlbHNUb0luZm9ib3hlcyIsInJlY2FsY3VsYXRlTGF5b3V0T25Db21wbGV4aXR5TWFuYWdlbWVudCIsInJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQiLCJhbmltYXRlT25EcmF3aW5nQ2hhbmdlcyIsImFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseSIsImVuYWJsZVBvcnRzIiwiYWxsb3dDb21wb3VuZE5vZGVSZXNpemUiLCJtYXBDb2xvclNjaGVtZSIsIm1hcENvbG9yU2NoZW1lU3R5bGUiLCJtYXBOYW1lIiwibWFwRGVzY3JpcHRpb24iLCJlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nIiwiZXhwZXJpbWVudERlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy92YWxpZE1hcFByb3BlcnRpZXMuanM/NGM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qIExvb2t1cCBvYmplY3QgZm9yIHZhbGlkIG1hcCBwcm9wZXJ0aWVzLlxyXG4qIEluIHRoZSBmdXR1cmUgaXQgY291bGQgYmUgY29tYmluZWQgd2l0aCBvdGhlciBzaW1pbGFyIHByb3BlcnRpZXMvZnVuY3Rpb25zIGluIGEgbmV3IGZpbGUuXHJcbiovXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNvbXBvdW5kUGFkZGluZzogdHJ1ZSxcclxuICBleHRyYUNvbXBhcnRtZW50UGFkZGluZzogdHJ1ZSxcclxuICBleHRyYUNvbXBsZXhQYWRkaW5nOiB0cnVlLFxyXG4gIGFycm93U2NhbGU6IHRydWUsXHJcbiAgc2hvd0NvbXBsZXhOYW1lOiB0cnVlLFxyXG4gIGR5bmFtaWNMYWJlbFNpemU6IHRydWUsXHJcbiAgaW5mZXJOZXN0aW5nT25Mb2FkOiB0cnVlLFxyXG4gIGZpdExhYmVsc1RvTm9kZXM6IHRydWUsXHJcbiAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IHRydWUsXHJcbiAgcmVjYWxjdWxhdGVMYXlvdXRPbkNvbXBsZXhpdHlNYW5hZ2VtZW50OiB0cnVlLFxyXG4gIHJlYXJyYW5nZU9uQ29tcGxleGl0eU1hbmFnZW1lbnQ6IHRydWUsXHJcbiAgYW5pbWF0ZU9uRHJhd2luZ0NoYW5nZXM6IHRydWUsXHJcbiAgYWRqdXN0Tm9kZUxhYmVsRm9udFNpemVBdXRvbWF0aWNhbGx5OiB0cnVlLFxyXG4gIGVuYWJsZVBvcnRzOiB0cnVlLFxyXG4gIGFsbG93Q29tcG91bmROb2RlUmVzaXplOiB0cnVlLFxyXG4gIG1hcENvbG9yU2NoZW1lOiB0cnVlLFxyXG4gIG1hcENvbG9yU2NoZW1lU3R5bGU6IHRydWUsXHJcbiAgbWFwTmFtZTogdHJ1ZSxcclxuICBtYXBEZXNjcmlwdGlvbjogdHJ1ZSxcclxuICBlbmFibGVTSUZUb3BvbG9neUdyb3VwaW5nOiB0cnVlLFxyXG4gIGV4cGVyaW1lbnREZXNjcmlwdGlvbjogdHJ1ZVxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGVBQWUsRUFBRSxJQUFJO0VBQ3JCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxtQkFBbUIsRUFBRSxJQUFJO0VBQ3pCQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsZUFBZSxFQUFFLElBQUk7RUFDckJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLGtCQUFrQixFQUFFLElBQUk7RUFDeEJDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLG9CQUFvQixFQUFFLElBQUk7RUFDMUJDLHVDQUF1QyxFQUFFLElBQUk7RUFDN0NDLCtCQUErQixFQUFFLElBQUk7RUFDckNDLHVCQUF1QixFQUFFLElBQUk7RUFDN0JDLG9DQUFvQyxFQUFFLElBQUk7RUFDMUNDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyx1QkFBdUIsRUFBRSxJQUFJO0VBQzdCQyxjQUFjLEVBQUUsSUFBSTtFQUNwQkMsbUJBQW1CLEVBQUUsSUFBSTtFQUN6QkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLHlCQUF5QixFQUFFLElBQUk7RUFDL0JDLHFCQUFxQixFQUFFO0FBQ3pCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/validMapProperties.js\n");

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*global window, global*/\nvar util = __webpack_require__(/*! util */ \"util\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nfunction now() { return new Date().getTime() }\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.console) {\n    console = __webpack_require__.g.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29uc29sZS1icm93c2VyaWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHFCQUFNLG9CQUFvQixxQkFBTTtBQUMzQyxjQUFjLHFCQUFNO0FBQ3BCLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vbm9kZV9tb2R1bGVzL2NvbnNvbGUtYnJvd3NlcmlmeS9pbmRleC5qcz9jZTI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdywgZ2xvYmFsKi9cbnZhciB1dGlsID0gcmVxdWlyZShcInV0aWxcIilcbnZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpXG5mdW5jdGlvbiBub3coKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl0sXG4gICAgW2luZm8sIFwiaW5mb1wiXSxcbiAgICBbd2FybiwgXCJ3YXJuXCJdLFxuICAgIFtlcnJvciwgXCJlcnJvclwiXSxcbiAgICBbdGltZSwgXCJ0aW1lXCJdLFxuICAgIFt0aW1lRW5kLCBcInRpbWVFbmRcIl0sXG4gICAgW3RyYWNlLCBcInRyYWNlXCJdLFxuICAgIFtkaXIsIFwiZGlyXCJdLFxuICAgIFtjb25zb2xlQXNzZXJ0LCBcImFzc2VydFwiXVxuXVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IGZ1bmN0aW9uc1tpXVxuICAgIHZhciBmID0gdHVwbGVbMF1cbiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdXG5cbiAgICBpZiAoIWNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgY29uc29sZVtuYW1lXSA9IGZcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc29sZVxuXG5mdW5jdGlvbiBsb2coKSB7fVxuXG5mdW5jdGlvbiBpbmZvKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gd2FybigpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICB0aW1lc1tsYWJlbF0gPSBub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICBkZWxldGUgdGltZXNbbGFiZWxdXG4gICAgdmFyIGR1cmF0aW9uID0gbm93KCkgLSB0aW1lXG4gICAgY29uc29sZS5sb2cobGFiZWwgKyBcIjogXCIgKyBkdXJhdGlvbiArIFwibXNcIilcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLm5hbWUgPSBcIlRyYWNlXCJcbiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjaylcbn1cblxuZnVuY3Rpb24gZGlyKG9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChvYmplY3QpICsgXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gY29uc29sZUFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/console-browserify/index.js\n");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");

/***/ }),

/***/ "libsbmljs_stable":
/*!***********************************!*\
  !*** external "libsbmljs_stable" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbmljs_stable");

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"sbgnviz","version":"6.1.0","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","file-saver":"^2.0.2","jquery":"^3.3.1","tippy.js":"^3.4.0"},"dependencies":{"@babel/helpers":"^7.22.6","libsbgn.js":"github:sbgn/libsbgn.js#develop","libsbmljs_stable":"^5.18.0-beta1","mime-types":"^2.1.35","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^3.3.1","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.10.0","webpack-node-externals":"^3.0.0"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});