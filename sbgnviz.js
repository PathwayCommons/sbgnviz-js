(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.sbgnviz = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],2:[function(_dereq_,module,exports){

},{}],3:[function(_dereq_,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"dup":2}],4:[function(_dereq_,module,exports){
(function (global){
'use strict';

var buffer = _dereq_('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"buffer":5}],5:[function(_dereq_,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = _dereq_('base64-js')
var ieee754 = _dereq_('ieee754')
var isArray = _dereq_('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":1,"ieee754":12,"isarray":6}],6:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],7:[function(_dereq_,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Moved Temporarily",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Time-out",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Request Entity Too Large",
  "414": "Request-URI Too Large",
  "415": "Unsupported Media Type",
  "416": "Requested Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Time-out",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],8:[function(_dereq_,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":_dereq_("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":15}],9:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],10:[function(_dereq_,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],11:[function(_dereq_,module,exports){
var http = _dereq_('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}

},{"http":38}],12:[function(_dereq_,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],13:[function(_dereq_,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],14:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],15:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],16:[function(_dereq_,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = _dereq_('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":17}],17:[function(_dereq_,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],18:[function(_dereq_,module,exports){
/**
* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.
*  
* Version - 0.40.0
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/pretty-data/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*	pd.xml(data ) - pretty print XML;
*	pd.json(data) - pretty print JSON;
*	pd.css(data ) - pretty print CSS;
*	pd.sql(data)  - pretty print SQL;
*
*	pd.xmlmin(data [, preserveComments] ) - minify XML; 
*	pd.jsonmin(data)                      - minify JSON; 
*	pd.cssmin(data [, preserveComments] ) - minify CSS; 
*	pd.sqlmin(data)                       - minify SQL; 
*
* PARAMETERS:
*
*	@data  			- String; XML, JSON, CSS or SQL text to beautify;
* 	@preserveComments	- Bool (optional, used in minxml and mincss only); 
*				  Set this flag to true to prevent removing comments from @text; 
*	@Return 		- String;
*	
* USAGE:
*	
*	var pd  = require('pretty-data').pd;
*
*	var xml_pp   = pd.xml(xml_text);
*	var xml_min  = pd.xmlmin(xml_text [,true]);
*	var json_pp  = pd.json(json_text);
*	var json_min = pd.jsonmin(json_text);
*	var css_pp   = pd.css(css_text);
*	var css_min  = pd.cssmin(css_text [, true]);
*	var sql_pp   = pd.sql(sql_text);
*	var sql_min  = pd.sqlmin(sql_text);
*
* TEST:
*	comp-name:pretty-data$ node ./test/test_xml
*	comp-name:pretty-data$ node ./test/test_json
*	comp-name:pretty-data$ node ./test/test_css
*	comp-name:pretty-data$ node ./test/test_sql
*/


function pp() {
	this.shift = ['\n']; // array of shifts
	this.step = '  ', // 2 spaces
		maxdeep = 100, // nesting level
		ix = 0;

	// initialize array with shifts //
	for(ix=0;ix<maxdeep;ix++){
		this.shift.push(this.shift[ix]+this.step); 
	}

};	
	
// ----------------------- XML section ----------------------------------------------------

pp.prototype.xml = function(text) {

	var ar = text.replace(/>\s{0,}</g,"><")
				 .replace(/</g,"~::~<")
				 .replace(/xmlns\:/g,"~::~xmlns:")
				 .replace(/xmlns\=/g,"~::~xmlns=")
				 .split('~::~'),
		len = ar.length,
		inComment = false,
		deep = 0,
		str = '',
		ix = 0;

		for(ix=0;ix<len;ix++) {
			// start comment or <![CDATA[...]]> or <!DOCTYPE //
			if(ar[ix].search(/<!/) > -1) { 
				str += this.shift[deep]+ar[ix];
				inComment = true; 
				// end comment  or <![CDATA[...]]> //
				if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
					inComment = false; 
				}
			} else 
			// end comment  or <![CDATA[...]]> //
			if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
				str += ar[ix];
				inComment = false; 
			} else 
			// <elm></elm> //
			if( /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
				/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
				str += ar[ix];
				if(!inComment) deep--;
			} else
			 // <elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
				str = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];
			} else 
			 // <elm>...</elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
				str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// </elm> //
			if(ar[ix].search(/<\//) > -1) { 
				str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
			} else 
			// <elm/> //
			if(ar[ix].search(/\/>/) > -1 ) { 
				str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// <? xml ... ?> //
			if(ar[ix].search(/<\?/) > -1) { 
				str += this.shift[deep]+ar[ix];
			} else 
			// xmlns //
			if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
				str += this.shift[deep]+ar[ix];
			} 
			
			else {
				str += ar[ix];
			}
		}
		
	return  (str[0] == '\n') ? str.slice(1) : str;
}

// ----------------------- JSON section ----------------------------------------------------

pp.prototype.json = function(text) {

	if ( typeof text === "string" ) {
		return JSON.stringify(JSON.parse(text), null, this.step);
	}
	if ( typeof text === "object" ) {
		return JSON.stringify(text, null, this.step);
	}
	return null;
}

// ----------------------- CSS section ----------------------------------------------------

pp.prototype.css = function(text) {

	var ar = text.replace(/\s{1,}/g,' ')
				.replace(/\{/g,"{~::~")
				.replace(/\}/g,"~::~}~::~")
				.replace(/\;/g,";~::~")
				.replace(/\/\*/g,"~::~/*")
				.replace(/\*\//g,"*/~::~")
				.replace(/~::~\s{0,}~::~/g,"~::~")
				.split('~::~'),
		len = ar.length,
		deep = 0,
		str = '',
		ix = 0;
		
		for(ix=0;ix<len;ix++) {

			if( /\{/.exec(ar[ix]))  { 
				str += this.shift[deep++]+ar[ix];
			} else 
			if( /\}/.exec(ar[ix]))  { 
				str += this.shift[--deep]+ar[ix];
			} else
			if( /\*\\/.exec(ar[ix]))  { 
				str += this.shift[deep]+ar[ix];
			}
			else {
				str += this.shift[deep]+ar[ix];
			}
		}
		return str.replace(/^\n{1,}/,'');
}

// ----------------------- SQL section ----------------------------------------------------

function isSubquery(str, parenthesisLevel) {
  return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}

function split_sql(str, tab) {

    return str.replace(/\s{1,}/g," ")

        .replace(/ AND /ig,"~::~"+tab+tab+"AND ")
        .replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
        .replace(/ CASE /ig,"~::~"+tab+"CASE ")
        .replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
        .replace(/ END /ig,"~::~"+tab+"END ")
        .replace(/ FROM /ig,"~::~FROM ")
        .replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
        .replace(/ HAVING /ig,"~::~HAVING ")
        //.replace(/ IN /ig,"~::~"+tab+"IN ")
        .replace(/ IN /ig," IN ")
        .replace(/ JOIN /ig,"~::~JOIN ")
        .replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
        .replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
        .replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
        .replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
        .replace(/ ON /ig,"~::~"+tab+"ON ")
        .replace(/ OR /ig,"~::~"+tab+tab+"OR ")
        .replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
        .replace(/ OVER /ig,"~::~"+tab+"OVER ")
        .replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
        .replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
        .replace(/ THEN /ig," THEN~::~"+tab+"")
        .replace(/ UNION /ig,"~::~UNION~::~")
        .replace(/ USING /ig,"~::~USING ")
        .replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
        .replace(/ WHERE /ig,"~::~WHERE ")
        .replace(/ WITH /ig,"~::~WITH ")
        //.replace(/\,\s{0,}\(/ig,",~::~( ")
        //.replace(/\,/ig,",~::~"+tab+tab+"")
        .replace(/ ALL /ig," ALL ")
        .replace(/ AS /ig," AS ")
        .replace(/ ASC /ig," ASC ") 
        .replace(/ DESC /ig," DESC ") 
        .replace(/ DISTINCT /ig," DISTINCT ")
        .replace(/ EXISTS /ig," EXISTS ")
        .replace(/ NOT /ig," NOT ")
        .replace(/ NULL /ig," NULL ")
        .replace(/ LIKE /ig," LIKE ")
        .replace(/\s{0,}SELECT /ig,"SELECT ")
        .replace(/~::~{1,}/g,"~::~")
        .split('~::~');
}

pp.prototype.sql = function(text) {

    var ar_by_quote = text.replace(/\s{1,}/g," ")
                        .replace(/\'/ig,"~::~\'")
                        .split('~::~'),
        len = ar_by_quote.length,
        ar = [],
        deep = 0,
        tab = this.step,//+this.step,
        inComment = true,
        inQuote = false,
        parenthesisLevel = 0,
        str = '',
        ix = 0;

    for(ix=0;ix<len;ix++) {

        if(ix%2) {
            ar = ar.concat(ar_by_quote[ix]);
        } else {
            ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
        }
    }

    len = ar.length;
    for(ix=0;ix<len;ix++) {

        parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);

        if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
            ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
        } 

        if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
            deep++;
            str += this.shift[deep]+ar[ix];
        } else 
        if( /\'/.exec(ar[ix]) )  { 
            if(parenthesisLevel<1 && deep) {
                deep--;
            }
            str += ar[ix];
        }
        else  { 
            str += this.shift[deep]+ar[ix];
            if(parenthesisLevel<1 && deep) {
                deep--;
            }
        } 
    }

    str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
    return str;
}

// ----------------------- min section ----------------------------------------------------

pp.prototype.xmlmin = function(text, preserveComments) {

	var str = preserveComments ? text
				   : text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
	return  str.replace(/>\s{0,}</g,"><"); 
}

pp.prototype.jsonmin = function(text) {
								  
    return  text.replace(/\s{0,}\{\s{0,}/g,"{")
                .replace(/\s{0,}\[$/g,"[")
                .replace(/\[\s{0,}/g,"[")
                .replace(/:\s{0,}\[/g,':[')
                .replace(/\s{0,}\}\s{0,}/g,"}")
                .replace(/\s{0,}\]\s{0,}/g,"]")
                .replace(/\"\s{0,}\,/g,'",')
                .replace(/\,\s{0,}\"/g,',"')
                .replace(/\"\s{0,}:/g,'":')
                .replace(/:\s{0,}\"/g,':"')
                .replace(/:\s{0,}\[/g,':[')
                .replace(/\,\s{0,}\[/g,',[')
                .replace(/\,\s{2,}/g,', ')
                .replace(/\]\s{0,},\s{0,}\[/g,'],[');   
}

pp.prototype.cssmin = function(text, preserveComments) {
	
	var str = preserveComments ? text
				   : text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;
	return str.replace(/\s{1,}/g,' ')
			  .replace(/\{\s{1,}/g,"{")
			  .replace(/\}\s{1,}/g,"}")
			  .replace(/\;\s{1,}/g,";")
			  .replace(/\/\*\s{1,}/g,"/*")
			  .replace(/\*\/\s{1,}/g,"*/");
}	

pp.prototype.sqlmin = function(text) {
    return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}

// --------------------------------------------------------------------------------------------

exports.pd= new pp;	











},{}],19:[function(_dereq_,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,_dereq_('_process'))

},{"_process":20}],20:[function(_dereq_,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],21:[function(_dereq_,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],22:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],23:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],24:[function(_dereq_,module,exports){
'use strict';

exports.decode = exports.parse = _dereq_('./decode');
exports.encode = exports.stringify = _dereq_('./encode');

},{"./decode":22,"./encode":23}],25:[function(_dereq_,module,exports){
module.exports = _dereq_("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":26}],26:[function(_dereq_,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

var Readable = _dereq_('./_stream_readable');
var Writable = _dereq_('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":28,"./_stream_writable":30,"core-util-is":8,"inherits":14,"process-nextick-args":19}],27:[function(_dereq_,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = _dereq_('./_stream_transform');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":29,"core-util-is":8,"inherits":14}],28:[function(_dereq_,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = _dereq_('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = _dereq_('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = _dereq_('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = _dereq_('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = _dereq_('buffer').Buffer;
/*<replacement>*/
var bufferShim = _dereq_('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = _dereq_('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = _dereq_('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,_dereq_('_process'))

},{"./_stream_duplex":26,"./internal/streams/BufferList":31,"_process":20,"buffer":5,"buffer-shims":4,"core-util-is":8,"events":9,"inherits":14,"isarray":32,"process-nextick-args":19,"string_decoder/":42,"util":2}],29:[function(_dereq_,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = _dereq_('./_stream_duplex');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":26,"core-util-is":8,"inherits":14}],30:[function(_dereq_,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: _dereq_('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = _dereq_('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = _dereq_('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = _dereq_('buffer').Buffer;
/*<replacement>*/
var bufferShim = _dereq_('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,_dereq_('_process'))

},{"./_stream_duplex":26,"_process":20,"buffer":5,"buffer-shims":4,"core-util-is":8,"events":9,"inherits":14,"process-nextick-args":19,"util-deprecate":44}],31:[function(_dereq_,module,exports){
'use strict';

var Buffer = _dereq_('buffer').Buffer;
/*<replacement>*/
var bufferShim = _dereq_('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};
},{"buffer":5,"buffer-shims":4}],32:[function(_dereq_,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],33:[function(_dereq_,module,exports){
module.exports = _dereq_("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":27}],34:[function(_dereq_,module,exports){
(function (process){
var Stream = (function (){
  try {
    return _dereq_('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = _dereq_('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = _dereq_('./lib/_stream_writable.js');
exports.Duplex = _dereq_('./lib/_stream_duplex.js');
exports.Transform = _dereq_('./lib/_stream_transform.js');
exports.PassThrough = _dereq_('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,_dereq_('_process'))

},{"./lib/_stream_duplex.js":26,"./lib/_stream_passthrough.js":27,"./lib/_stream_readable.js":28,"./lib/_stream_transform.js":29,"./lib/_stream_writable.js":30,"_process":20}],35:[function(_dereq_,module,exports){
module.exports = _dereq_("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":29}],36:[function(_dereq_,module,exports){
module.exports = _dereq_("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":30}],37:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = _dereq_('events').EventEmitter;
var inherits = _dereq_('inherits');

inherits(Stream, EE);
Stream.Readable = _dereq_('readable-stream/readable.js');
Stream.Writable = _dereq_('readable-stream/writable.js');
Stream.Duplex = _dereq_('readable-stream/duplex.js');
Stream.Transform = _dereq_('readable-stream/transform.js');
Stream.PassThrough = _dereq_('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":9,"inherits":14,"readable-stream/duplex.js":25,"readable-stream/passthrough.js":33,"readable-stream/readable.js":34,"readable-stream/transform.js":35,"readable-stream/writable.js":36}],38:[function(_dereq_,module,exports){
var ClientRequest = _dereq_('./lib/request')
var extend = _dereq_('xtend')
var statusCodes = _dereq_('builtin-status-codes')
var url = _dereq_('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	var protocol = opts.protocol || ''
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
},{"./lib/request":40,"builtin-status-codes":7,"url":43,"xtend":48}],39:[function(_dereq_,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableByteStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

var xhr = new global.XMLHttpRequest()
// If location.host is empty, e.g. if this page/worker was loaded
// from a Blob, then use example.com to avoid an error
xhr.open('GET', global.location.host ? '/' : 'https://example.com')

function checkTypeSupport (type) {
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

exports.arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer')
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')
exports.overrideMimeType = isFunction(xhr.overrideMimeType)
exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
  return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],40:[function(_dereq_,module,exports){
(function (process,global,Buffer){
// var Base64 = require('Base64')
var capability = _dereq_('./capability')
var foreach = _dereq_('foreach')
var indexOf = _dereq_('indexof')
var inherits = _dereq_('inherits')
var keys = _dereq_('object-keys')
var response = _dereq_('./response')
var stream = _dereq_('stream')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary) {
	if (capability.fetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	foreach(keys(opts.headers), function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (indexOf(unsafeHeaders, lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var self = this
	return self._headers[name.toLowerCase()].value
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body
	if (opts.method === 'POST' || opts.method === 'PUT') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return buffer.toArrayBuffer()
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	if (self._mode === 'fetch') {
		var headers = keys(headersObj).map(function (name) {
			return [headersObj[name].name, headersObj[name].value]
		})

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headers,
			body: body,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}).then(undefined, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		foreach(keys(headersObj), function (name) {
			xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable. Even though the spec says it should
 * be available in readyState 3, accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		return (xhr.status !== null)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},_dereq_("buffer").Buffer)

},{"./capability":39,"./response":41,"_process":20,"buffer":5,"foreach":10,"indexof":13,"inherits":14,"object-keys":16,"stream":37}],41:[function(_dereq_,module,exports){
(function (process,global,Buffer){
var capability = _dereq_('./capability')
var foreach = _dereq_('foreach')
var inherits = _dereq_('inherits')
var stream = _dereq_('stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.statusCode = response.status
		self.statusMessage = response.statusText
		// backwards compatible version of for (<item> of <iterable>):
		// for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
		for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
			self.headers[header[0].toLowerCase()] = header[1]
			self.rawHeaders.push(header[0], header[1])
		}

		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		foreach(headers, function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (self.headers[key] !== undefined)
					self.headers[key] += ', ' + matches[2]
				else
					self.headers[key] = matches[2]
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},_dereq_("buffer").Buffer)

},{"./capability":39,"_process":20,"buffer":5,"foreach":10,"inherits":14,"stream":37}],42:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = _dereq_('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":5}],43:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = _dereq_('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = _dereq_('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":21,"querystring":24}],44:[function(_dereq_,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(_dereq_,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"dup":14}],46:[function(_dereq_,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],47:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = _dereq_('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = _dereq_('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":46,"_process":20,"inherits":45}],48:[function(_dereq_,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],49:[function(_dereq_,module,exports){
module.exports={
  "name": "sbgnviz",
  "version": "3.1.0",
  "description": "SBGNPD visualization library",
  "main": "src/index.js",
  "licence": "LGPL-3.0",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build-sbgnviz-js": "gulp build",
    "debug-js": "nodemon -e js --watch src -x \"npm run build-sbgnviz-js\""
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/iVis-at-Bilkent/sbgnviz.js.git"
  },
  "bugs": {
    "url": "https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"
  },
  "homepage": "https://github.com/iVis-at-Bilkent/sbgnviz.js/",
  "peerDependencies": {
    "jquery": "^2.2.4",
    "filesaverjs": "~0.2.2",
    "cytoscape": "iVis-at-Bilkent/cytoscape.js#unstable"
  },
  "dependencies": {
    "libsbgn.js": "git://github.com/eisbm/libsbgn.js",
    "pretty-data": "^0.40.0"
  },
  "devDependencies": {
    "browserify": "^11.2.0",
    "gulp": "^3.9.0",
    "gulp-derequire": "^2.1.0",
    "gulp-jshint": "^1.11.2",
    "gulp-prompt": "^0.1.2",
    "gulp-replace": "^0.5.4",
    "gulp-shell": "^0.5.0",
    "gulp-util": "^3.0.6",
    "jshint-stylish": "^2.0.1",
    "node-notifier": "^4.3.1",
    "run-sequence": "^1.1.4",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  }
}

},{}],50:[function(_dereq_,module,exports){
(function(){
  var sbgnviz = window.sbgnviz = function(_options, _libs) {
    var libs = {};
    libs.jQuery = _libs.jQuery || jQuery;
    libs.cytoscape = _libs.cytoscape || cytoscape;
    libs.saveAs = _libs.filesaverjs ? _libs.filesaverjs.saveAs : saveAs;
    
    // Set the libraries to access them from any file
    var libUtilities = _dereq_('./utilities/lib-utilities');
    libUtilities.setLibs(libs);
    
    var optionUtilities = _dereq_('./utilities/option-utilities');
    var options = optionUtilities.extendOptions(_options);
    
    var sbgnRenderer = _dereq_('./sbgn-extensions/sbgn-cy-renderer');
    var sbgnCyInstance = _dereq_('./sbgn-extensions/sbgn-cy-instance');
    
    // Utilities whose functions will be exposed seperately
    var uiUtilities = _dereq_('./utilities/ui-utilities');
    var fileUtilities = _dereq_('./utilities/file-utilities');
    var graphUtilities = _dereq_('./utilities/graph-utilities');
    var mainUtilities = _dereq_('./utilities/main-utilities');
    _dereq_('./utilities/keyboard-input-utilities'); // require keybord input utilities
    // Utilities to be exposed as is
    var elementUtilities = _dereq_('./utilities/element-utilities');
    var undoRedoActionFunctions = _dereq_('./utilities/undo-redo-action-functions');
    
    sbgnRenderer();
    sbgnCyInstance();
    
    // Expose the api
    // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these
    sbgnviz.elementUtilities = elementUtilities;
    sbgnviz.undoRedoActionFunctions = undoRedoActionFunctions;
    
    // Expose each main utility seperately
    for (var prop in mainUtilities) {
      sbgnviz[prop] = mainUtilities[prop];
    }
    
    // Expose each file utility seperately
    for (var prop in fileUtilities) {
      sbgnviz[prop] = fileUtilities[prop];
    }
    
    // Expose each file utility seperately
    for (var prop in uiUtilities) {
      sbgnviz[prop] = uiUtilities[prop];
    }
    
    // Expose each sbgn graph utility seperately
    for (var prop in graphUtilities) {
      sbgnviz[prop] = graphUtilities[prop];
    }
  };
  
  if ( typeof module !== 'undefined' && module.exports ) {
    module.exports = sbgnviz;
  }
})();
},{"./sbgn-extensions/sbgn-cy-instance":51,"./sbgn-extensions/sbgn-cy-renderer":52,"./utilities/element-utilities":53,"./utilities/file-utilities":54,"./utilities/graph-utilities":55,"./utilities/keyboard-input-utilities":57,"./utilities/lib-utilities":58,"./utilities/main-utilities":59,"./utilities/option-utilities":60,"./utilities/ui-utilities":63,"./utilities/undo-redo-action-functions":64}],51:[function(_dereq_,module,exports){
var elementUtilities = _dereq_('../utilities/element-utilities');
var graphUtilities = _dereq_('../utilities/graph-utilities');
var undoRedoActionFunctions = _dereq_('../utilities/undo-redo-action-functions');
var refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);

var libs = _dereq_('../utilities/lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;
var cytoscape = libs.cytoscape;

var optionUtilities = _dereq_('../utilities/option-utilities');
var options = optionUtilities.getOptions();

var getCompoundPaddings = function() {
  // Return calculated paddings in case of that data is invalid return 5
  return graphUtilities.calculatedPaddings || 5;
};

/*
 * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.
 */
var getPointOnCircle = function(centerX, centerY, radius, angleInDegree) {
	var angleInRadian = angleInDegree * ( Math.PI / 180 ); // Convert degree to radian
	return {
		x: radius * Math.cos(angleInRadian) + centerX,
		y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system
	};
};

/*
 * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle
 */
var generateCircleString = function(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {
	var circleStr = "";
	var stepSize = ( angleTo - angleFrom ) / numOfPoints; // We will increment the current angle by step size in each iteration
	var currentAngle = angleFrom; // current angle will be updated in each iteration
	
	for ( var i = 0; i < numOfPoints; i++ ) {
		var point = getPointOnCircle(centerX, centerY, radius, currentAngle);
		currentAngle += stepSize;
		circleStr += point.x + " " + point.y + " ";
	}
	
	return circleStr;
};

/*
 *  Generates a string representing processes/logical operators with ports.
 *  lineHW: Half width of line through the circle to the intersection point
 *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)
 *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'
 *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'
 */

var generateShapeWithPortString = function(lineHW, shapeHW, type, orientation) {
	var polygonStr;
    var numOfPoints = 30; // Number of points that both halves of circle will have
	if (orientation === 'horizontal') {
		var abovePoints, belowPoints;
	
		if (type === 'circle') {
			abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);
			belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);
		}
		else if (type === 'rectangle') {
			abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';
			belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';
		}
		
		polygonStr = "-1 -" + lineHW + " -" + shapeHW + " -" + lineHW + " ";	
		polygonStr += abovePoints;
		polygonStr += shapeHW + " -" + lineHW + " 1 -" + lineHW + " 1 " + lineHW + " " + shapeHW + " " + lineHW + " ";
		polygonStr += belowPoints;
		polygonStr += "-" + shapeHW + " " + lineHW + " -1 " + lineHW;
	}
	else {
		var leftPoints, rightPoints;
		
		if (type === 'circle') {
			leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);
			rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);
		}
		else if (type === 'rectangle') {
			leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';
			rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' '; 
		}
		
		polygonStr = "-" + lineHW + " -" + 1 + " -" + lineHW + " -" + shapeHW + " ";
		polygonStr += leftPoints;
		polygonStr += "-" + lineHW + " " + shapeHW + " -" + lineHW + " 1 " + lineHW + " 1 " + lineHW + " " + shapeHW + " ";
		polygonStr += rightPoints;
		polygonStr += lineHW + " -" + shapeHW + " " + lineHW + " -1";
	}
	
	return polygonStr;
};

module.exports = function () {
  var containerSelector = options.networkContainerSelector;
  var imgPath = options.imgPath;
  
  $(document).ready(function ()
  {
    var sbgnNetworkContainer = $(containerSelector);

    // create and init cytoscape:
    var cy = cytoscape({
      container: sbgnNetworkContainer,
      style: sbgnStyleSheet,
      showOverlay: false, minZoom: 0.125, maxZoom: 16,
      boxSelectionEnabled: true,
      motionBlur: true,
      wheelSensitivity: 0.1,
      ready: function () {
        window.cy = this;
        // If undoable register undo/redo actions
        if (options.undoable) {
          registerUndoRedoActions();
        }
        bindCyEvents();
      }
    });
  });
  
  // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file
  function registerUndoRedoActions() {
    // create or get the undo-redo instance
    var ur = cy.undoRedo();

    // register general actions
    // register add remove actions
    ur.action("deleteElesSimple", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);
    ur.action("deleteNodesSmart", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);
  }

  // used for handling the variable property of complexes
  function getPadding(ele) {
    // this property needs to take into account:
    // - presence of a label
    // - option to display complex labels
    // - presence of states and info box
    var padding = getCompoundPaddings();
    if (options.showComplexName && elementUtilities.getElementContent(ele)) {
      padding += options.extraComplexPadding * 0.5;
      if (ele.data('statesandinfos').length > 0) {
        padding += options.extraComplexPadding * 0.5;
      }
    }
    return padding;
  }

  // used for handling the variable property of complexes
  function getMargin(ele) {
    // this property needs to take into account:
    // - presence of a label
    // - option to display complex labels
    // - presence of states and info box
    var margin =  -1 * options.extraComplexPadding;
    if (options.showComplexName &&
        elementUtilities.getElementContent(ele) &&
        ele.data('statesandinfos').length > 0) {
      margin -= options.extraComplexPadding * 0.5;
    }
    return margin;
  }
  
  function bindCyEvents() {
    cy.on('tapend', 'node', function (event) {
      cy.style().update();
    });
    
    cy.on("expandcollapse.beforecollapse", "node", function (event) {
      var node = this;
      //The children info of complex nodes should be shown when they are collapsed
      if (node._private.data.class == "complex") {
        //The node is being collapsed store infolabel to use it later
        var infoLabel = elementUtilities.getInfoLabel(node);
        node._private.data.infoLabel = infoLabel;
      }

      var edges = cy.edges();
      // remove bend points before collapse
      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        if (edge.hasClass('edgebendediting-hasbendpoints')) {
          edge.removeClass('edgebendediting-hasbendpoints');
          delete edge._private.classes['edgebendediting-hasbendpoints'];
        }
      }

      edges.scratch('cyedgebendeditingWeights', []);
      edges.scratch('cyedgebendeditingDistances', []);
    });

    cy.on("expandcollapse.beforeexpand", "node", function (event) {
      var node = this;
      node.removeData("infoLabel");
    });

    cy.on("expandcollapse.afterexpand", "node", function (event) {
      var node = this;
      cy.nodes().updateCompoundBounds();
      //Don't show children info when the complex node is expanded
      if (node._private.data.class == "complex") {
        node.removeStyle('content');
      }
    });

    /**
     * Listen to change (for label and stats and info) to adjust paddings
     */
    cy.on("data", "node[class='complex']", function (event) {
      this.style('padding', getPadding(this));
      this.style('text-margin-y', getMargin(this));
    });
  }

  var selectionColor = '#d67614';
  var sbgnStyleSheet = cytoscape.stylesheet()
          .selector("node")
          .css({
            'text-valign': 'center',
            'text-halign': 'center',
            'border-width': 1.25,
            'border-color': '#555',
            'background-color': '#ffffff',
            'background-opacity': 0.5,
            'text-opacity': 1,
            'opacity': 1,
            'padding': 0,
            'text-wrap': 'wrap'
          })
          .selector("node:parent")
          .css({
            'padding': getCompoundPaddings
          })
          .selector("node[?clonemarker][class='perturbing agent'],node[?clonemarker][class='unspecified entity']")
          .css({
            'background-image': imgPath + '/clone_bg.png',
            'background-position-x': '50%',
            'background-position-y': '100%',
            'background-width': '100%',
            'background-height': '25%',
            'background-fit': 'none',
            'background-image-opacity': function (ele) {
              if (!ele.data('clonemarker')) {
                return 0;
              }
              return ele.css('background-opacity');
            }
          })
          .selector("node[class]")
          .css({
            'shape': function (ele) {
              return elementUtilities.getCyShape(ele);
            },
            'content': function (ele) {
              return elementUtilities.getElementContent(ele);
            },
            'font-size': function (ele) {
              return elementUtilities.getLabelTextSize(ele);
            },
          })
          .selector("node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process']")
          .css({
            'shape-polygon-points': function(ele) {
              if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {
                // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us
                var port = ele.data('ports')[0]; 
                // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'
                var orientation = port.x === 0 ? 'vertical' : 'horizontal';
                // The half width of the actual shape discluding the ports
                var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x);
                // Get the class of the node
                var _class = ele.data('class');
                // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'
                var type = _class.endsWith('process') ? 'rectangle' : 'circle';
                
                // Generate a polygon string with above parameters and return it
                return generateShapeWithPortString(0.01, shapeHW, type, orientation);
              }
              
              // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug
              return '-1 -1 1 1 1 0';
            }
          })
          .selector("node[class='perturbing agent']")
          .css({
            'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'
          })
          .selector("node[class='tag']")
          .css({
            'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'
          })
          .selector("node[class='complex']")
          .css({
            'text-valign': 'bottom',
            'text-halign': 'center',
            'text-margin-y': getMargin,
            'padding': getPadding
          })
          .selector("node[class='compartment']")
          .css({
            'border-width': 3.25,
            'background-opacity': 0,
            'text-valign': 'bottom',
            'text-halign': 'center',
            'text-margin-y' : -1 * options.extraCompartmentPadding
          })
          .selector("node:parent[class='compartment']")
          .css({
            'padding': function() {
              return getCompoundPaddings() + options.extraCompartmentPadding;
            }
          })
          .selector("node:childless[bbox]")
          .css({
            'width': 'data(bbox.w)',
            'height': 'data(bbox.h)'
          })
          .selector("node.cy-expand-collapse-collapsed-node")
          .css({
            'width': 36,
            'height': 36,
            'border-style': 'dashed'
          })
          .selector("node:selected")
          .css({
            'border-color': selectionColor,
            'target-arrow-color': '#000',
            'text-outline-color': '#000'
          })
          .selector("node:active")
          .css({
            'background-opacity': 0.7, 'overlay-color': selectionColor,
            'overlay-padding': '14'
          })
          .selector("edge")
          .css({
            'curve-style': 'bezier',
            'line-color': '#555',
            'target-arrow-fill': 'hollow',
            'source-arrow-fill': 'hollow',
            'width': 1.25,
            'target-arrow-color': '#555',
            'source-arrow-color': '#555',
            'text-border-color': function (ele) {
              if (ele.selected()) {
                return selectionColor;
              }
              return ele.css('line-color');
            },
            'color': function (ele) {
              if (ele.selected()) {
                return selectionColor;
              }
              return ele.css('line-color');
            },
            'arrow-scale': 1.25
          })
          .selector("edge.cy-expand-collapse-meta-edge")
          .css({
            'line-color': '#C4C4C4',
            'source-arrow-color': '#C4C4C4',
            'target-arrow-color': '#C4C4C4'
          })
          .selector("edge:selected")
          .css({
            'line-color': selectionColor,
            'source-arrow-color': selectionColor,
            'target-arrow-color': selectionColor
          })
          .selector("edge:active")
          .css({
            'background-opacity': 0.7, 'overlay-color': selectionColor,
            'overlay-padding': '8'
          })
          .selector("edge[cardinality > 0]")
          .css({
            'text-rotation': 'autorotate',
            'text-background-shape': 'rectangle',
            'text-border-opacity': '1',
            'text-border-width': '1',
            'text-background-color': 'white',
            'text-background-opacity': '1'
          })
          .selector("edge[class='consumption'][cardinality > 0]")
          .css({
            'source-label': function (ele) {
              return '' + ele.data('cardinality');
            },
            'source-text-margin-y': '-10',
            'source-text-offset': function (ele) {
              return elementUtilities.getCardinalityDistance(ele);
            }
          })
          .selector("edge[class='production'][cardinality > 0]")
          .css({
            'target-label': function (ele) {
              return '' + ele.data('cardinality');
            },
            'target-text-margin-y': '-10',
            'target-text-offset': function (ele) {
              return elementUtilities.getCardinalityDistance(ele);
            }
          })
          .selector("edge[class]")
          .css({
            'target-arrow-shape': function (ele) {
              return elementUtilities.getCyArrowShape(ele);
            },
            'source-arrow-shape': 'none',
            'source-endpoint': function(ele) {
              return elementUtilities.getEndPoint(ele, 'source');
            },
            'target-endpoint': function(ele) {
              return elementUtilities.getEndPoint(ele, 'target');
            }
          })
          .selector("edge[class='inhibition']")
          .css({
            'target-arrow-fill': 'filled'
          })
          .selector("edge[class='production']")
          .css({
            'target-arrow-fill': 'filled'
          })
          .selector("core")
          .css({
            'selection-box-color': selectionColor,
            'selection-box-opacity': '0.2', 'selection-box-border-color': selectionColor
          });
};

},{"../utilities/element-utilities":53,"../utilities/graph-utilities":55,"../utilities/lib-utilities":58,"../utilities/option-utilities":60,"../utilities/undo-redo-action-functions":64}],52:[function(_dereq_,module,exports){
/*
 * Render sbgn specific shapes which are not supported by cytoscape.js core
 */

var truncateText = _dereq_('../utilities/text-utilities').truncateText;
var libs = _dereq_('../utilities/lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;
var cytoscape = libs.cytoscape;

var cyMath = cytoscape.math;
var cyBaseNodeShapes = cytoscape.baseNodeShapes;
var cyStyleProperties = cytoscape.styleProperties;

module.exports = function () {
  var $$ = cytoscape;
  
  // Taken from cytoscape.js and modified
  var drawRoundRectanglePath = function(
    context, x, y, width, height, radius ){

    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var cornerRadius = radius || cyMath.getRoundRectangleRadius( width, height );

    if( context.beginPath ){ context.beginPath(); }

    // Start at top middle
    context.moveTo( x, y - halfHeight );
    // Arc from middle top to right side
    context.arcTo( x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius );
    // Arc from right side to bottom
    context.arcTo( x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius );
    // Arc from bottom to left side
    context.arcTo( x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius );
    // Arc from left side to topBorder
    context.arcTo( x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius );
    // Join line
    context.lineTo( x, y - halfHeight );


    context.closePath();
  };
  
  // Taken from cytoscape.js
  var drawPolygonPath = function(
    context, x, y, width, height, points ){

    var halfW = width / 2;
    var halfH = height / 2;

    if( context.beginPath ){ context.beginPath(); }

    context.moveTo( x + halfW * points[0], y + halfH * points[1] );

    for( var i = 1; i < points.length / 2; i++ ){
      context.lineTo( x + halfW * points[ i * 2], y + halfH * points[ i * 2 + 1] );
    }

    context.closePath();
  };
  
  var sbgnShapes = $$.sbgn.sbgnShapes = {
    'source and sink': true,
    'nucleic acid feature': true,
    'complex': true,
    'macromolecule': true,
    'simple chemical': true
  };

  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {
    'macromolecule': true,
    'nucleic acid feature': true,
    'simple chemical': true,
    'complex': true
  };

  var unitOfInfoRadius = 4;
  var stateVarRadius = 15;
  $$.sbgn.drawComplexStateAndInfo = function (context, node, stateAndInfos,
          centerX, centerY, width, height) {

    //This is a temporary workaround
    $$.sbgn.drawEllipse(context, centerX, centerY, 0, 0);

    var upWidth = 0, downWidth = 0;
    var boxPadding = 10, betweenBoxPadding = 5;
    var beginPosY = height / 2, beginPosX = width / 2;

    stateAndInfos.sort($$.sbgn.compareStates);

    for (var i = 0; i < stateAndInfos.length; i++) {
      var state = stateAndInfos[i];
      var stateWidth = state.bbox.w;
      var stateHeight = state.bbox.h;
//      var stateLabel = state.state.value;
      var relativeYPos = state.bbox.y;
      var stateCenterX, stateCenterY;

      if (relativeYPos < 0) {
        if (upWidth + stateWidth < width) {
          stateCenterX = centerX - beginPosX + boxPadding + upWidth + stateWidth / 2;
          stateCenterY = centerY - beginPosY;

          drawStateAndInfosMoreSpecific({
            context: context,
            node: node,
            state: state,
            centerX: stateCenterX,
            centerY: stateCenterY,
            stateWidth: stateWidth,
            stateHeight: stateHeight,
            stateVarRadius: stateVarRadius,
            unitOfInfoRadius: unitOfInfoRadius
          });
        }
        upWidth = upWidth + width + boxPadding;
      } else if (relativeYPos > 0) {
        if (downWidth + stateWidth < width) {
          stateCenterX = centerX - beginPosX + boxPadding + downWidth + stateWidth / 2;
          stateCenterY = centerY + beginPosY;

          drawStateAndInfosMoreSpecific({
            context: context,
            node: node,
            state: state,
            centerX: stateCenterX,
            centerY: stateCenterY,
            stateWidth: stateWidth,
            stateHeight: stateHeight,
            stateVarRadius: stateVarRadius,
            unitOfInfoRadius: unitOfInfoRadius
          });
        }
        downWidth = downWidth + width + boxPadding;
      }
      context.stroke();

      //This is a temporary workaround
      $$.sbgn.drawEllipse(context, centerX, centerY, 0, 0);

      //update new state and info position(relative to node center)
      state.bbox.x = (stateCenterX - centerX) * 100 / node.width();
      state.bbox.y = (stateCenterY - centerY) * 100 / node.height();
    }
  };

  $$.sbgn.drawStateText = function (context, textProp) {
    var stateValue = textProp.state.value || '';
    var stateVariable = textProp.state.variable || '';

    var stateLabel = stateValue + (stateVariable
            ? "@" + stateVariable
            : "");

    var fontSize = 9; // parseInt(textProp.height / 1.5);

    textProp.font = fontSize + "px Arial";
    textProp.label = stateLabel;
    textProp.color = "#0f0f0f";
    $$.sbgn.drawText(context, textProp);
  };

  $$.sbgn.drawInfoText = function (context, textProp) {
    var fontSize = 9; // parseInt(textProp.height / 1.5);
    textProp.font = fontSize + "px Arial";
    textProp.color = "#0f0f0f";
    $$.sbgn.drawText(context, textProp);
  };

  $$.sbgn.drawText = function (context, textProp, truncate) {
    var oldFont = context.font;
    context.font = textProp.font;
    context.textAlign = "center";
    context.textBaseline = "middle";
    var oldStyle = context.fillStyle;
    context.fillStyle = textProp.color;
    var oldOpacity = context.globalAlpha;
    context.globalAlpha = textProp.opacity;
    var text;
    
    textProp.label = textProp.label || '';
    
    if (truncate == false) {
      text = textProp.label;
    } else {
      text = truncateText(textProp, context.font);
    }
    
    context.fillText(text, textProp.centerX, textProp.centerY);
    context.fillStyle = oldStyle;
    context.font = oldFont;
    context.globalAlpha = oldOpacity;
    //context.stroke();
  };

  cyMath.calculateDistance = function (point1, point2) {
    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);
    return Math.sqrt(distance);
  };

  $$.sbgn.colors = {
    clone: "#a9a9a9"
  };

  /** result of refactoring, no idea for the name :/ */
  var drawStateAndInfosMoreSpecific = function(params) {
    var context = params.context;
    var node = params.node;
    var state = params.state;
    var centerX = params.centerX;
    var centerY = params.centerY;
    var stateWidth = params.stateWidth;
    var stateHeight = params.stateHeight;
    var stateVarRadius = params.stateVarRadius;
    var unitOfInfoRadius = params.unitOfInfoRadius;
    var doStroke = params.doStroke || false;

    var textProp = {'centerX': centerX, 'centerY': centerY,
      'opacity': node.css('text-opacity') * node.css('opacity'),
      'width': stateWidth, 'height': stateHeight};

    if (state.clazz == "state variable") {//draw ellipse
      drawRoundRectanglePath(context,
              centerX, centerY,
              stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, stateVarRadius));
      context.fill();

      textProp.state = state.state;
      $$.sbgn.drawStateText(context, textProp);
      if (doStroke) {
        context.stroke();
      }


    } else if (state.clazz == "unit of information") {//draw rectangle
      drawRoundRectanglePath(context,
              centerX, centerY,
              stateWidth, stateHeight,
              Math.min(stateWidth / 2, stateHeight / 2, unitOfInfoRadius));
      context.fill();

      textProp.label = state.label.text || ''; // <-- different in original
      $$.sbgn.drawInfoText(context, textProp);
      if (doStroke) {
        context.stroke();
      }
    }
  }


  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {
    var stateAndInfos = node._private.data.statesandinfos;

    for (var i = 0; i < stateAndInfos.length && i < 4; i++) {
      var state = stateAndInfos[i];
      var stateWidth = state.bbox.w;
      var stateHeight = state.bbox.h;
      var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
      var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

      drawStateAndInfosMoreSpecific({
        context: context,
        node: node,
        state: state,
        centerX: stateCenterX,
        centerY: stateCenterY,
        stateWidth: stateWidth,
        stateHeight: stateHeight,
        stateVarRadius: stateVarRadius,
        unitOfInfoRadius: unitOfInfoRadius,
        doStroke: true
      });
    }
    //This is a temporary workaround
    $$.sbgn.drawEllipse(context, centerX, centerY, 0, 0);
  };

  $$.sbgn.nucleicAcidCheckPoint = function (x, y, centerX, centerY, node, threshold, points, cornerRadius) {
    var width = node.width();
    var height = node.height();
    var padding = parseInt(node.css('border-width')) / 2;

    //check rectangle at top
    if (cyMath.pointInsidePolygon(x, y, points,
            centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1],
            padding)) {
      return true;
    }

    //check rectangle at bottom
    if (cyMath.pointInsidePolygon(x, y, points,
            centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1],
            padding)) {
      return true;
    }

    //check ellipses
    var checkInEllipse = function (x, y, centerX, centerY, width, height, padding) {
      x -= centerX;
      y -= centerY;

      x /= (width / 2 + padding);
      y /= (height / 2 + padding);

      return (Math.pow(x, 2) + Math.pow(y, 2) <= 1);
    }

    // Check bottom right quarter circle
    if (checkInEllipse(x, y,
            centerX + width / 2 - cornerRadius,
            centerY + height / 2 - cornerRadius,
            cornerRadius * 2, cornerRadius * 2, padding)) {

      return true;
    }

    // Check bottom left quarter circle
    if (checkInEllipse(x, y,
            centerX - width / 2 + cornerRadius,
            centerY + height / 2 - cornerRadius,
            cornerRadius * 2, cornerRadius * 2, padding)) {

      return true;
    }

    return false;
  };

  //we need to force opacity to 1 since we might have state and info boxes.
  //having opaque nodes which have state and info boxes gives unpleasent results.
  $$.sbgn.forceOpacityToOne = function (node, context) {
    var parentOpacity = node.effectiveOpacity();
    if (parentOpacity === 0) {
      return;
    }

    context.fillStyle = "rgba("
            + node._private.style["background-color"].value[0] + ","
            + node._private.style["background-color"].value[1] + ","
            + node._private.style["background-color"].value[2] + ","
            + (1 * node.css('opacity') * parentOpacity) + ")";
  };

  $$.sbgn.drawSimpleChemicalPath = function (
          context, x, y, width, height) {

    var halfWidth = width / 2;
    var halfHeight = height / 2;
    //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);
    var cornerRadius = Math.min(halfWidth, halfHeight);
    context.translate(x, y);

    context.beginPath();

    // Start at top middle
    context.moveTo(0, -halfHeight);
    // Arc from middle top to right side
    context.arcTo(halfWidth, -halfHeight, halfWidth, 0, cornerRadius);
    // Arc from right side to bottom
    context.arcTo(halfWidth, halfHeight, 0, halfHeight, cornerRadius);
    // Arc from bottom to left side
    context.arcTo(-halfWidth, halfHeight, -halfWidth, 0, cornerRadius);
    // Arc from left side to topBorder
    context.arcTo(-halfWidth, -halfHeight, 0, -halfHeight, cornerRadius);
    // Join line
    context.lineTo(0, -halfHeight);

    context.closePath();

    context.translate(-x, -y);
  };

  $$.sbgn.drawSimpleChemical = function (
          context, x, y, width, height) {
    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);
    context.fill();
  };

  function simpleChemicalLeftClone(context, centerX, centerY,
          width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = $$.sbgn.colors.clone;

      context.beginPath();
      context.translate(centerX, centerY);
      context.scale(width / 2, height / 2);

      var markerBeginX = -1 * Math.sin(Math.PI / 3);
      var markerBeginY = Math.cos(Math.PI / 3);
      var markerEndX = 0;
      var markerEndY = markerBeginY;

      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(0, 0, 1, 3 * Math.PI / 6, 5 * Math.PI / 6);

      context.scale(2 / width, 2 / height);
      context.translate(-centerX, -centerY);
      context.closePath();

      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  }
  ;

  function simpleChemicalRightClone(context, centerX, centerY,
          width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = $$.sbgn.colors.clone;

      context.beginPath();
      context.translate(centerX, centerY);
      context.scale(width / 2, height / 2);

      var markerBeginX = 0;
      var markerBeginY = Math.cos(Math.PI / 3);
      var markerEndX = 1 * Math.sin(Math.PI / 3);
      var markerEndY = markerBeginY;

      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(0, 0, 1, Math.PI / 6, 3 * Math.PI / 6);

      context.scale(2 / width, 2 / height);
      context.translate(-centerX, -centerY);
      context.closePath();

      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  };

  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {
    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);
  };

  $$.sbgn.drawNucAcidFeature = function (context, width, height,
          centerX, centerY, cornerRadius) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;

    context.translate(centerX, centerY);
    context.beginPath();

    context.moveTo(-halfWidth, -halfHeight);
    context.lineTo(halfWidth, -halfHeight);
    context.lineTo(halfWidth, 0);
    context.arcTo(halfWidth, halfHeight, 0, halfHeight, cornerRadius);
    context.arcTo(-halfWidth, halfHeight, -halfWidth, 0, cornerRadius);
    context.lineTo(-halfWidth, -halfHeight);

    context.closePath();
    context.translate(-centerX, -centerY);
    context.fill();
  };

  $$.sbgn.isMultimer = function (node) {
    var sbgnClass = node._private.data.class;
    if (sbgnClass && sbgnClass.indexOf("multimer") != -1)
      return true;
    return false;
  };

  //this function is created to have same corner length when
  //complex's width or height is changed
  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {
    //cp stands for corner proportion
    var cpX = cornerLength / width;
    var cpY = cornerLength / height;

    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX,
      1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];

    return complexPoints;
  };

  cyStyleProperties.types.nodeShape.enums.push('source and sink');
  cyStyleProperties.types.nodeShape.enums.push('nucleic acid feature');
  cyStyleProperties.types.nodeShape.enums.push('complex');
  cyStyleProperties.types.nodeShape.enums.push('macromolecule');
  cyStyleProperties.types.nodeShape.enums.push('simple chemical');

  $$.sbgn.registerSbgnNodeShapes = function () {

    cyBaseNodeShapes["simple chemical"] = {
      multimerPadding: 5,
      draw: function (context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var multimerPadding = cyBaseNodeShapes["simple chemical"].multimerPadding;
        var label = node._private.data.label;
        var padding = parseInt(node.css('border-width'));
        var cloneMarker = node._private.data.clonemarker;

        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          $$.sbgn.drawSimpleChemical(context, centerX + multimerPadding,
                  centerY + multimerPadding, width, height);

          context.stroke();

          $$.sbgn.cloneMarker.simpleChemical(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width - padding, height - padding, cloneMarker, true,
                  node.css('background-opacity'));

          //context.stroke();
        }

        $$.sbgn.drawSimpleChemical(context,
                centerX, centerY,
                width, height);

        context.stroke();

        $$.sbgn.cloneMarker.simpleChemical(context, centerX, centerY,
                width - padding, height - padding, cloneMarker, false,
                node.css('background-opacity'));

//        var nodeProp = {'label': label, 'centerX': centerX, 'centerY': centerY,
//          'opacity': node._private.style['text-opacity'].value, 'width': node.width(), 'height': node.height()};
//        $$.sbgn.drawDynamicLabelText(context, nodeProp);

        var oldStyle = context.fillStyle;
        $$.sbgn.forceOpacityToOne(node, context);
        $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;
      },
      intersectLine: function (node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width'));
        var multimerPadding = cyBaseNodeShapes["simple chemical"].multimerPadding;

        var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(
                node, x, y);

        var nodeIntersectLines = cyBaseNodeShapes["ellipse"].intersectLine(
                centerX, centerY, width, height, x, y, padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = cyBaseNodeShapes["ellipse"].intersectLine(
                  centerX + multimerPadding, centerY + multimerPadding, width,
                  height, x, y, padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return $$.sbgn.closestIntersectionPoint([x, y], intersections);
      },
      checkPoint: function (x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyBaseNodeShapes["simple chemical"].multimerPadding;

        var nodeCheckPoint = cyBaseNodeShapes["roundrectangle"].checkPoint(x, y,
                padding, width, height,
                centerX, centerY);

        var stateAndInfoCheckPoint = $$.sbgn.checkPointStateAndInfoBoxes(x, y, node,
                threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyBaseNodeShapes["ellipse"].checkPoint(x, y,
                  padding, width, height,
                  centerX + multimerPadding, centerY + multimerPadding);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyBaseNodeShapes["macromolecule"] = {
      points: cyMath.generateUnitNgonPoints(4, 0),
      multimerPadding: 5,
      draw: function (context, node) {
        var width = node.width();
        var height = node.height();
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var label = node._private.data.label;
        var multimerPadding = cyBaseNodeShapes["macromolecule"].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;
        var padding = parseInt(node.css('border-width'));

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          drawRoundRectanglePath(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height);

          context.fill();
          context.stroke();

          $$.sbgn.cloneMarker.macromolecule(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height, cloneMarker, true,
                  node.css('background-opacity'));

          //context.stroke();
        }

        drawRoundRectanglePath(context,
                centerX, centerY,
                width, height);
        context.fill();

        context.stroke();

        $$.sbgn.cloneMarker.macromolecule(context, centerX, centerY,
                width, height, cloneMarker, false,
                node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        $$.sbgn.forceOpacityToOne(node, context);
        $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;

//        var nodeProp = {'label': label, 'centerX': centerX, 'centerY': centerY,
//          'opacity': node._private.style['text-opacity'].value, 'width': node.width(), 'height': node.height()};
      },
      intersectLine: function (node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyBaseNodeShapes["macromolecule"].multimerPadding;
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(
                node, x, y);

        var nodeIntersectLines = $$.sbgn.roundRectangleIntersectLine(
                x, y,
                centerX, centerY,
                centerX, centerY,
                width, height,
                cornerRadius, padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = $$.sbgn.roundRectangleIntersectLine(
                  x, y,
                  centerX, centerY,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height,
                  cornerRadius, padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return $$.sbgn.closestIntersectionPoint([x, y], intersections);
      },
      checkPoint: function (x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width() + threshold;
        var height = node.height() + threshold;
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyBaseNodeShapes["macromolecule"].multimerPadding;

        var nodeCheckPoint = cyBaseNodeShapes["roundrectangle"].checkPoint(x, y, padding,
                width, height, centerX, centerY);
        var stateAndInfoCheckPoint = $$.sbgn.checkPointStateAndInfoBoxes(x, y, node,
                threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyBaseNodeShapes["roundrectangle"].checkPoint(x, y, padding,
                  width, height, centerX + multimerPadding, centerY + multimerPadding);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyBaseNodeShapes["complex"] = {
      points: [],
      multimerPadding: 5,
      cornerLength: 12,
      draw: function (context, node) {
        var width = node.outerWidth() - parseFloat(node.css('border-width'));
        var height = node.outerHeight()- parseFloat(node.css('border-width'));
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var stateAndInfos = node._private.data.statesandinfos;
        var label = node._private.data.label;
        var cornerLength = cyBaseNodeShapes["complex"].cornerLength;
        var multimerPadding = cyBaseNodeShapes["complex"].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;

        cyBaseNodeShapes["complex"].points = $$.sbgn.generateComplexShapePoints(cornerLength,
                width, height);

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          drawPolygonPath(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height, cyBaseNodeShapes["complex"].points);
          context.fill();

          context.stroke();

          $$.sbgn.cloneMarker.complex(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height, cornerLength, cloneMarker, true,
                  node.css('background-opacity'));

          //context.stroke();
        }

        drawPolygonPath(context,
                centerX, centerY,
                width, height, cyBaseNodeShapes["complex"].points);
        context.fill();

        context.stroke();

        $$.sbgn.cloneMarker.complex(context, centerX, centerY,
                width, height, cornerLength, cloneMarker, false,
                node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        $$.sbgn.forceOpacityToOne(node, context);
        $$.sbgn.drawComplexStateAndInfo(context, node, stateAndInfos, centerX, centerY, width, height);
        context.fillStyle = oldStyle;
      },
//      intersectLine: cyBaseNodeShapes["roundrectangle"].intersectLine,
//      checkPoint: cyBaseNodeShapes["roundrectangle"].checkPoint
      intersectLine: function (node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.outerWidth() - parseFloat(node.css('border-width'));
        var height = node.outerHeight() - parseFloat(node.css('border-width'));
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyBaseNodeShapes["complex"].multimerPadding;
        var cornerLength = cyBaseNodeShapes["complex"].cornerLength;

        cyBaseNodeShapes["complex"].points = $$.sbgn.generateComplexShapePoints(cornerLength,
                width, height);

        var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(
                node, x, y);

        var nodeIntersectLines = cyMath.polygonIntersectLine(
                x, y,
                cyBaseNodeShapes["complex"].points,
                centerX,
                centerY,
                width / 2, height / 2,
                padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = cyMath.polygonIntersectLine(
                  x, y,
                  cyBaseNodeShapes["complex"].points,
                  centerX + multimerPadding,
                  centerY + multimerPadding,
                  width / 2, height / 2,
                  padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return $$.sbgn.closestIntersectionPoint([x, y], intersections);
      },
      checkPoint: function (x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = (node.outerWidth() - parseFloat(node.css('border-width'))) + threshold;
        var height = (node.outerHeight() - parseFloat(node.css('border-width'))) + threshold;
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyBaseNodeShapes["complex"].multimerPadding;
        var cornerLength = cyBaseNodeShapes["complex"].cornerLength;

        cyBaseNodeShapes["complex"].points = $$.sbgn.generateComplexShapePoints(cornerLength,
                width, height);

        var nodeCheckPoint = cyMath.pointInsidePolygon(x, y, cyBaseNodeShapes["complex"].points,
                centerX, centerY, width, height, [0, -1], padding);

        var stateAndInfoCheckPoint = $$.sbgn.checkPointStateAndInfoBoxes(x, y, node,
                threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyMath.pointInsidePolygon(x, y,
                  cyBaseNodeShapes["complex"].points,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height, [0, -1], padding);

        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyBaseNodeShapes["nucleic acid feature"] = {
      points: cyMath.generateUnitNgonPointsFitToSquare(4, 0),
      multimerPadding: 5,
      draw: function (context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        ;
        var width = node.width();
        var height = node.height();
        var label = node._private.data.label;
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);
        var multimerPadding = cyBaseNodeShapes["nucleic acid feature"].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          $$.sbgn.drawNucAcidFeature(context, width, height,
                  centerX + multimerPadding,
                  centerY + multimerPadding, cornerRadius);

          context.stroke();

          $$.sbgn.cloneMarker.nucleicAcidFeature(context,
                  centerX + multimerPadding, centerY + multimerPadding,
                  width, height, cloneMarker, true,
                  node.css('background-opacity'));

          //context.stroke();
        }

        $$.sbgn.drawNucAcidFeature(context, width, height, centerX,
                centerY, cornerRadius);

        context.stroke();

        $$.sbgn.cloneMarker.nucleicAcidFeature(context, centerX, centerY,
                width, height, cloneMarker, false,
                node.css('background-opacity'));

//        var nodeProp = {'label': label, 'centerX': centerX, 'centerY': centerY,
//          'opacity': node._private.style['text-opacity'].value, 'width': node.width(), 'height': node.height()};

//        $$.sbgn.drawDynamicLabelText(context, nodeProp);
        var oldStyle = context.fillStyle;
        $$.sbgn.forceOpacityToOne(node, context);
        $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;
      },
      drawPath: function (context, node) {

      },
      intersectLine: function (node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var multimerPadding = cyBaseNodeShapes["nucleic acid feature"].multimerPadding;
        var width = node.width();
        var height = node.height();
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(
                node, x, y);

        var nodeIntersectLines = $$.sbgn.nucleicAcidIntersectionLine(node,
                x, y, centerX, centerY, cornerRadius);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = $$.sbgn.nucleicAcidIntersectionLine(node,
                  x, y, centerX + multimerPadding, centerY + multimerPadding,
                  cornerRadius);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines,
                multimerIntersectionLines);

        return $$.sbgn.closestIntersectionPoint([x, y], intersections);
      },
      checkPoint: function (x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var multimerPadding = cyBaseNodeShapes["nucleic acid feature"].multimerPadding;
        var width = node.width();
        var height = node.height();
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var nodeCheckPoint = $$.sbgn.nucleicAcidCheckPoint(x, y, centerX, centerY,
                node, threshold, this.points, cornerRadius);
        var stateAndInfoCheckPoint = $$.sbgn.checkPointStateAndInfoBoxes(x, y, node,
                threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = $$.sbgn.nucleicAcidCheckPoint(x, y,
                  centerX + multimerPadding, centerY + multimerPadding,
                  node, threshold, this.points, cornerRadius);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };
    cyBaseNodeShapes["source and sink"] = {
      points: cyMath.generateUnitNgonPoints(4, 0),
      draw: function (context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var label = node._private.data.label;
        var pts = cyBaseNodeShapes["source and sink"].points;
        var cloneMarker = node._private.data.clonemarker;

        $$.sbgn.drawEllipse(context, centerX, centerY,
                width, height);

        context.stroke();

        context.beginPath();
        context.translate(centerX, centerY);
        context.scale(width * Math.sqrt(2) / 2, height * Math.sqrt(2) / 2);

        context.moveTo(pts[2], pts[3]);
        context.lineTo(pts[6], pts[7]);
        context.closePath();

        context.scale(2 / (width * Math.sqrt(2)), 2 / (height * Math.sqrt(2)));
        context.translate(-centerX, -centerY);

        context.stroke();

      },
      intersectLine: cyBaseNodeShapes["ellipse"].intersectLine,
      checkPoint: cyBaseNodeShapes["ellipse"].checkPoint
    };
  };

  $$.sbgn.drawEllipse = function (context, x, y, width, height) {
    //$$.sbgn.drawEllipsePath(context, x, y, width, height);
    //context.fill();
    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);
  };

  $$.sbgn.cloneMarker = {
    simpleChemical: function (context, centerX, centerY,
            width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cornerRadius = Math.min(width / 2, height / 2);

        var firstCircleCenterX = centerX - width / 2 + cornerRadius;
        var firstCircleCenterY = centerY;
        var secondCircleCenterX = centerX + width / 2 - cornerRadius;
        var secondCircleCenterY = centerY;

        simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY,
                2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);

        simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY,
                2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);

        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);
        var cloneX = centerX;
        var cloneY = centerY + 3 / 4 * cornerRadius;
        var cloneWidth = width - 2 * cornerRadius;
        var cloneHeight = cornerRadius / 2;

        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);
        context.fill();
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    nucleicAcidFeature: function (context, centerX, centerY,
            width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cloneWidth = width;
        var cloneHeight = height / 4;
        var cloneX = centerX;
        var cloneY = centerY + 3 * height / 8;

        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        $$.sbgn.drawNucAcidFeature(context, cloneWidth, cloneHeight,
                cloneX, cloneY, cornerRadius, opacity);

        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
        //context.stroke();
      }
    },
    macromolecule: function (context, centerX, centerY,
            width, height, cloneMarker, isMultimer, opacity) {
      $$.sbgn.cloneMarker.nucleicAcidFeature(context, centerX, centerY,
              width, height, cloneMarker, isMultimer, opacity);
    },
    complex: function (context, centerX, centerY,
            width, height, cornerLength, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cpX = cornerLength / width;
        var cpY = cornerLength / height;
        var cloneWidth = width;
        var cloneHeight = height * cpY / 2;
        var cloneX = centerX;
        var cloneY = centerY + height / 2 - cloneHeight / 2;

        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];

        var oldStyle = context.fillStyle;
        context.fillStyle = $$.sbgn.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        drawPolygonPath(context,
                cloneX, cloneY,
                cloneWidth, cloneHeight, markerPoints);
        context.fill();

        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;

//                context.stroke();
      }
    }
  };

  $$.sbgn.closestIntersectionPoint = function (point, intersections) {
    if (intersections.length <= 0)
      return [];

    var closestIntersection = [];
    var minDistance = Number.MAX_VALUE;

    for (var i = 0; i < intersections.length; i = i + 2) {
      var checkPoint = [intersections[i], intersections[i + 1]];
      var distance = cyMath.calculateDistance(point, checkPoint);

      if (distance < minDistance) {
        minDistance = distance;
        closestIntersection = checkPoint;
      }
    }

    return closestIntersection;
  };

  $$.sbgn.nucleicAcidIntersectionLine = function (node, x, y, nodeX, nodeY, cornerRadius) {
    var nodeX = node._private.position.x;
    var nodeY = node._private.position.y;
    var width = node.width();
    var height = node.height();
    var padding = parseInt(node.css('border-width')) / 2;

    var halfWidth = width / 2;
    var halfHeight = height / 2;

    var straightLineIntersections;

    // Top segment, left to right
    {
      var topStartX = nodeX - halfWidth - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth + padding;
      var topEndY = topStartY;

      straightLineIntersections = cyMath.finiteLinesIntersect(
              x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    }

    // Right segment, top to bottom
    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight - padding;
      var rightEndX = rightStartX;
      var rightEndY = nodeY + halfHeight - cornerRadius + padding;

      straightLineIntersections = cyMath.finiteLinesIntersect(
              x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    }

    // Bottom segment, left to right
    {
      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
      var bottomStartY = nodeY + halfHeight + padding;
      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
      var bottomEndY = bottomStartY;

      straightLineIntersections = cyMath.finiteLinesIntersect(
              x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    }

    // Left segment, top to bottom
    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight - padding;
      var leftEndX = leftStartX;
      var leftEndY = nodeY + halfHeight - cornerRadius + padding;

      straightLineIntersections = cyMath.finiteLinesIntersect(
              x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    }

    // Check intersections with arc segments, we have only two arcs for
    //nucleic acid features
    var arcIntersections;

    // Bottom Right
    {
      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
      var bottomRightCenterY = nodeY + halfHeight - cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x, y, nodeX, nodeY,
              bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] >= bottomRightCenterX
              && arcIntersections[1] >= bottomRightCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    }

    // Bottom Left
    {
      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x, y, nodeX, nodeY,
              bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] <= bottomLeftCenterX
              && arcIntersections[1] >= bottomLeftCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    }
    return []; // if nothing
  };

  //this function gives the intersections of any line with a round rectangle 
  $$.sbgn.roundRectangleIntersectLine = function (
          x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {

    var halfWidth = width / 2;
    var halfHeight = height / 2;

    // Check intersections with straight line segments
    var straightLineIntersections = [];

    // Top segment, left to right
    {
      var topStartX = nodeX - halfWidth + cornerRadius - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth - cornerRadius + padding;
      var topEndY = topStartY;

      var intersection = cyMath.finiteLinesIntersect(
              x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    }

    // Right segment, top to bottom
    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight + cornerRadius - padding;
      var rightEndX = rightStartX;
      var rightEndY = nodeY + halfHeight - cornerRadius + padding;

      var intersection = cyMath.finiteLinesIntersect(
              x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    }

    // Bottom segment, left to right
    {
      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
      var bottomStartY = nodeY + halfHeight + padding;
      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
      var bottomEndY = bottomStartY;

      var intersection = cyMath.finiteLinesIntersect(
              x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    }

    // Left segment, top to bottom
    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight + cornerRadius - padding;
      var leftEndX = leftStartX;
      var leftEndY = nodeY + halfHeight - cornerRadius + padding;

      var intersection = cyMath.finiteLinesIntersect(
              x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (intersection.length > 0) {
        straightLineIntersections = straightLineIntersections.concat(intersection);
      }
    }

    // Check intersections with arc segments
    var arcIntersections;

    // Top Left
    {
      var topLeftCenterX = nodeX - halfWidth + cornerRadius;
      var topLeftCenterY = nodeY - halfHeight + cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x1, y1, x2, y2,
              topLeftCenterX, topLeftCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] <= topLeftCenterX
              && arcIntersections[1] <= topLeftCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    }

    // Top Right
    {
      var topRightCenterX = nodeX + halfWidth - cornerRadius;
      var topRightCenterY = nodeY - halfHeight + cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x1, y1, x2, y2,
              topRightCenterX, topRightCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] >= topRightCenterX
              && arcIntersections[1] <= topRightCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    }

    // Bottom Right
    {
      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
      var bottomRightCenterY = nodeY + halfHeight - cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x1, y1, x2, y2,
              bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] >= bottomRightCenterX
              && arcIntersections[1] >= bottomRightCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    }

    // Bottom Left
    {
      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius
      arcIntersections = cyMath.intersectLineCircle(
              x1, y1, x2, y2,
              bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

      // Ensure the intersection is on the desired quarter of the circle
      if (arcIntersections.length > 0
              && arcIntersections[0] <= bottomLeftCenterX
              && arcIntersections[1] >= bottomLeftCenterY) {
        straightLineIntersections = straightLineIntersections.concat(arcIntersections);
      }
    }

    if (straightLineIntersections.length > 0)
      return straightLineIntersections;
    return []; // if nothing
  };

  $$.sbgn.intersectLineEllipse = function (
          x1, y1, x2, y2, centerX, centerY, width, height, padding) {

    var w = width / 2 + padding;
    var h = height / 2 + padding;
    var an = centerX;
    var bn = centerY;

    var d = [x2 - x1, y2 - y1];

    var m = d[1] / d[0];
    var n = -1 * m * x2 + y2;
    var a = h * h + w * w * m * m;
    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;
    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n +
            bn * bn * w * w - h * h * w * w;

    var discriminant = b * b - 4 * a * c;

    if (discriminant < 0) {
      return [];
    }

    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

    var xMin = Math.min(t1, t2);
    var xMax = Math.max(t1, t2);

    var yMin = m * xMin - m * x2 + y2;
    var yMax = m * xMax - m * x2 + y2;

    return [xMin, yMin, xMax, yMax];
  };

  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {
    var centerX = node._private.position.x;
    var centerY = node._private.position.y;
    var padding = parseInt(node.css('border-width')) / 2;

    var stateAndInfos = node._private.data.statesandinfos;

    var stateCount = 0, infoCount = 0;

    var intersections = [];

    for (var i = 0; i < stateAndInfos.length; i++) {
      var state = stateAndInfos[i];
      var stateWidth = state.bbox.w;
      var stateHeight = state.bbox.h;
      var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
      var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

      if (state.clazz == "state variable" && stateCount < 2) {//draw ellipse
        var stateIntersectLines = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY,
                stateCenterX, stateCenterY, stateWidth, stateHeight, padding);

        if (stateIntersectLines.length > 0)
          intersections = intersections.concat(stateIntersectLines);

        stateCount++;
      } else if (state.clazz == "unit of information" && infoCount < 2) {//draw rectangle
        var infoIntersectLines = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY,
                stateCenterX, stateCenterY, stateWidth, stateHeight, 5, padding);

        if (infoIntersectLines.length > 0)
          intersections = intersections.concat(infoIntersectLines);

        infoCount++;
      }

    }
    if (intersections.length > 0)
      return intersections;
    return [];
  };

  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {
    var centerX = node._private.position.x;
    var centerY = node._private.position.y;
    var padding =parseInt(node.css('border-width')) / 2;
    var stateAndInfos = node._private.data.statesandinfos;

    var stateCount = 0, infoCount = 0;
//    threshold = parseFloat(threshold);

    for (var i = 0; i < stateAndInfos.length; i++) {
      var state = stateAndInfos[i];
      var stateWidth = parseFloat(state.bbox.w) + threshold;
      var stateHeight = parseFloat(state.bbox.h) + threshold;
      var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
      var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

      if (state.clazz == "state variable" && stateCount < 2) {//draw ellipse
        var stateCheckPoint = cyBaseNodeShapes["ellipse"].checkPoint(
                x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);

        if (stateCheckPoint == true)
          return true;

        stateCount++;
      } else if (state.clazz == "unit of information" && infoCount < 2) {//draw rectangle
        var infoCheckPoint = cyBaseNodeShapes["roundrectangle"].checkPoint(
                x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);

        if (infoCheckPoint == true)
          return true;

        infoCount++;
      }

    }
    return false;
  };

  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {
    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {
      return true;
    }

    return false;
  };
};

},{"../utilities/lib-utilities":58,"../utilities/text-utilities":62}],53:[function(_dereq_,module,exports){
/*
 * Common utilities for elements includes both general utilities and sbgn specific utilities 
 */

var truncateText = _dereq_('./text-utilities').truncateText;
var optionUtilities = _dereq_('./option-utilities');
var options = optionUtilities.getOptions();
var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;
var graphUtilities = _dereq_('./graph-utilities');

var elementUtilities = {
    //the list of the element classes handled by the tool
    handledElements: {
        'unspecified entity': true,
        'simple chemical': true,
        'macromolecule': true,
        'nucleic acid feature': true,
        'perturbing agent': true,
        'source and sink': true,
        'complex': true,
        'process': true,
        'omitted process': true,
        'uncertain process': true,
        'association': true,
        'dissociation': true,
        'phenotype': true,
        'tag': true,
        'consumption': true,
        'production': true,
        'modulation': true,
        'stimulation': true,
        'catalysis': true,
        'inhibition': true,
        'necessary stimulation': true,
        'logic arc': true,
        'equivalence arc': true,
        'and operator': true,
        'or operator': true,
        'not operator': true,
        'and': true,
        'or': true,
        'not': true,
        'nucleic acid feature multimer': true,
        'macromolecule multimer': true,
        'simple chemical multimer': true,
        'complex multimer': true,
        'compartment': true
    },
    //the following were moved here from what used to be utilities/sbgn-filtering.js
    processTypes : ['process', 'omitted process', 'uncertain process',
        'association', 'dissociation', 'phenotype'],
    
    // Returns whether the given element or elements with the given class can have ports.
    canHavePorts : function(ele) {
      var sbgnclass = typeof ele === 'string' ? ele : ele.data('class');
      return ($.inArray(sbgnclass, this.processTypes) >= 0 ||  sbgnclass == 'and' || sbgnclass == 'or' || sbgnclass == 'not');
    },
      
    // Section Start
    // General Element Utilities

    //this method returns the nodes non of whose ancestors is not in given nodes
    getTopMostNodes: function (nodes) {
        var nodesMap = {};
        for (var i = 0; i < nodes.length; i++) {
            nodesMap[nodes[i].id()] = true;
        }
        var roots = nodes.filter(function (ele, i) {
            if(typeof ele === "number") {
              ele = i;
            }
            var parent = ele.parent()[0];
            while(parent != null){
              if(nodesMap[parent.id()]){
                return false;
              }
              parent = parent.parent()[0];
            }
            return true;
        });

        return roots;
    },
    //This method checks if all of the given nodes have the same parent assuming that the size 
    //of  nodes is not 0
    allHaveTheSameParent: function (nodes) {
        if (nodes.length == 0) {
            return true;
        }
        var parent = nodes[0].data("parent");
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.data("parent") != parent) {
                return false;
            }
        }
        return true;
    },
    moveNodes: function(positionDiff, nodes, notCalcTopMostNodes) {
      var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);
      for (var i = 0; i < topMostNodes.length; i++) {
        var node = topMostNodes[i];
        var oldX = node.position("x");
        var oldY = node.position("y");
        node.position({
          x: oldX + positionDiff.x,
          y: oldY + positionDiff.y
        });
        var children = node.children();
        this.moveNodes(positionDiff, children, true);
      }
    },
    convertToModelPosition: function (renderedPosition) {
      var pan = cy.pan();
      var zoom = cy.zoom();

      var x = (renderedPosition.x - pan.x) / zoom;
      var y = (renderedPosition.y - pan.y) / zoom;

      return {
        x: x,
        y: y
      };
    },
    
    // Section End
    // General Element Utilities

    // Section Start
    // Element Filtering Utilities
    
    // SBGN specific utilities
    getProcessesOfSelected: function(){
        var selectedEles = cy.elements(":selected");
        selectedEles = this.extendNodeList(selectedEles);
        return selectedEles;
    },
    getNeighboursOfSelected: function(){
        var selectedEles = cy.elements(":selected");
        var elesToHighlight = this.getNeighboursOfNodes(selectedEles);
        return elesToHighlight;
    },
    getNeighboursOfNodes: function(_nodes){
        var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
        nodes = nodes.add(nodes.parents("node[class='complex']"));
        nodes = nodes.add(nodes.descendants());
        var neighborhoodEles = nodes.neighborhood();
        var elesToReturn = nodes.add(neighborhoodEles);
        elesToReturn = elesToReturn.add(elesToReturn.descendants());
        return elesToReturn;
    },
    extendNodeList: function(nodesToShow){
        var self = this;
        //add children
        nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants());
        //add parents
        nodesToShow = nodesToShow.add(nodesToShow.parents());
        //add complex children
        nodesToShow = nodesToShow.add(nodesToShow.nodes("node[class='complex']").descendants());

        // var processes = nodesToShow.nodes("node[class='process']");
        // var nonProcesses = nodesToShow.nodes("node[class!='process']");
        // var neighborProcesses = nonProcesses.neighborhood("node[class='process']");

        var processes = nodesToShow.filter(function(ele, i){
            if(typeof ele === "number") {
              ele = i;
            }
            return $.inArray(ele._private.data.class, self.processTypes) >= 0;
        });
        var nonProcesses = nodesToShow.filter(function(ele, i){
            if(typeof ele === "number") {
              ele = i;
            }
            return $.inArray(ele._private.data.class, self.processTypes) === -1;
        });
        var neighborProcesses = nonProcesses.neighborhood().filter(function(ele, i){
            if(typeof ele === "number") {
              ele = i;
            }
            return $.inArray(ele._private.data.class, self.processTypes) >= 0;
        });

        nodesToShow = nodesToShow.add(processes.neighborhood());
        nodesToShow = nodesToShow.add(neighborProcesses);
        nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());

        //add parents
        nodesToShow = nodesToShow.add(nodesToShow.nodes().parents());
        //add children
        nodesToShow = nodesToShow.add(nodesToShow.nodes("node[class='complex']").descendants());

        return nodesToShow;
    },
    extendRemainingNodes : function(nodesToFilter, allNodes){
        nodesToFilter = this.extendNodeList(nodesToFilter);
        var nodesToShow = allNodes.not(nodesToFilter);
        nodesToShow = this.extendNodeList(nodesToShow);
        return nodesToShow;
    },
    getProcessesOfNodes: function(nodes) {
      return this.extendNodeList(nodes);
    },
    // general utilities
    noneIsNotHighlighted: function(){
        var notHighlightedNodes = cy.nodes(":visible").nodes(".unhighlighted");
        var notHighlightedEdges = cy.edges(":visible").edges(".unhighlighted");

        return notHighlightedNodes.length + notHighlightedEdges.length === 0;
    },
    
    // Section End
    // Element Filtering Utilities

    // Section Start
    // Add remove utilities

    // SBGN specific utilities
    deleteNodesSmart: function (_nodes) {
      var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
      
      var allNodes = cy.nodes();
      cy.elements().unselect();
      var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);
      var nodesNotToKeep = allNodes.not(nodesToKeep);
      return nodesNotToKeep.remove();
    },
    deleteElesSimple: function (eles) {
      cy.elements().unselect();
      return eles.remove();
    },
    // general utilities
    restoreEles: function (eles) {
        eles.restore();
        return eles;
    },
    
    // Section End
    // Add remove utilities

    // Section Start
    // Stylesheet helpers
    
    // SBGN specific utilities
    getCyShape: function(ele) {
        var _class = ele.data('class');
        // Get rid of rectangle postfix to have the actual node class
        if (_class.endsWith(' multimer')) {
            _class = _class.replace(' multimer', '');
        }

        if (_class == 'compartment') {
            return 'roundrectangle';
        }
        if (_class == 'phenotype') {
            return 'hexagon';
        }
        if (_class == 'perturbing agent' || _class == 'tag') {
            return 'polygon';
        }
        
        // We need to define new node shapes with their class names for these nodes
        if (_class == 'source and sink' || _class == 'nucleic acid feature' || _class == 'macromolecule' 
                || _class == 'simple chemical' || _class == 'complex' ) {
            return _class;
        }
        
        // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles
        // conditionally.
        if ( this.canHavePorts(_class) ) {
          
          if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {
            return 'polygon'; // The node has ports represent it by polygon
          }
          else if (_class == 'process' || _class == 'omitted process' || _class == 'uncertain process') {
            return 'rectangle'; // If node has no port and has one of these classes it should be in a rectangle shape
          }
          
          return 'ellipse'; // Other nodes with no port should be in an ellipse shape
        }
        
        // The remaining nodes are supposed to be in ellipse shape
        return 'ellipse';
    },
    getCyArrowShape: function(ele) {
        var _class = ele.data('class');
        if (_class == 'necessary stimulation') {
            return 'triangle-cross';
        }
        if (_class == 'inhibition') {
            return 'tee';
        }
        if (_class == 'catalysis') {
            return 'circle';
        }
        if (_class == 'stimulation' || _class == 'production') {
            return 'triangle';
        }
        if (_class == 'modulation') {
            return 'diamond';
        }
        return 'none';
    },
    getElementContent: function(ele) {
        var _class = ele.data('class');

        if (_class.endsWith(' multimer')) {
            _class = _class.replace(' multimer', '');
        }

        var content = "";
        if (_class == 'macromolecule' || _class == 'simple chemical'
            || _class == 'phenotype'
            || _class == 'unspecified entity' || _class == 'nucleic acid feature'
            || _class == 'perturbing agent' || _class == 'tag') {
            content = ele.data('label') ? ele.data('label') : "";
        }
        else if(_class == 'compartment'){
            content = ele.data('label') ? ele.data('label') : "";
        }
        else if(_class == 'complex'){
            if(ele.children().length == 0 || options.showComplexName){
                if(ele.data('label')){
                    content = ele.data('label');
                }
                else if(ele.data('infoLabel')){
                    content = ele.data('infoLabel');
                }
                else{
                    content = '';
                }
            }
            else{
                content = '';
            }
        }
        else if (_class == 'and') {
            content = 'AND';
        }
        else if (_class == 'or') {
            content = 'OR';
        }
        else if (_class == 'not') {
            content = 'NOT';
        }
        else if (_class == 'omitted process') {
            content = '\\\\';
        }
        else if (_class == 'uncertain process') {
            content = '?';
        }
        else if (_class == 'dissociation') {
            content = 'o';
        }

        var textWidth = ele.width() || ele.data('bbox').w;

        var textProp = {
            label: content,
            width: ( _class==('complex') || _class==('compartment') )?textWidth * 2:textWidth
        };

        var font = this.getLabelTextSize(ele) + "px Arial";
        return truncateText(textProp, font); //func. in the cytoscape.renderer.canvas.sbgn-renderer.js
    },
    getLabelTextSize: function (ele) {
      var _class = ele.data('class');

      // These types of nodes cannot have label but this is statement is needed as a workaround
      if (_class === 'association') {
        return 20;
      }

      if (this.canHavePorts(_class)) {
        var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators
        
        // Coeff is supposed to be 2 for dissociation and 1.5 for other processes
        if (_class === 'dissociation') {
          coeff = 2;
        }
        else if (_class.endsWith('process')) {
          coeff = 1.5;
        }
        
        var ports = ele.data('ports');
        
        if (graphUtilities.portsEnabled === true && ports.length === 2) {
          // We assume that the ports are symmetric to the node center so using just one of the ports is enough
          var port = ports[0];
          var orientation = port.x === 0 ? 'vertical' : 'horizontal';
          // This is the ratio of the area occupied with ports over without ports
          var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;
          coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)
        }
        
        return this.getDynamicLabelTextSize(ele, coeff);
      }

      if (_class === 'complex' || _class === 'compartment') {
        return 16;
      }

      return this.getDynamicLabelTextSize(ele);
    },
    getCardinalityDistance: function (ele) {
      var srcPos = ele.source().position();
      var tgtPos = ele.target().position();

      var distance = Math.sqrt(Math.pow((srcPos.x - tgtPos.x), 2) + Math.pow((srcPos.y - tgtPos.y), 2));
      return distance * 0.15;
    },
    getInfoLabel: function(node) {
      /* Info label of a collapsed node cannot be changed if
      * the node is collapsed return the already existing info label of it
      */
      if (node._private.data.collapsedChildren != null) {
        return node._private.data.infoLabel;
      }

      /*
       * If the node is simple then it's infolabel is equal to it's label
       */
      if (node.children() == null || node.children().length == 0) {
        return node._private.data.label;
      }

      var children = node.children();
      var infoLabel = "";
      /*
       * Get the info label of the given node by it's children info recursively
       */
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var childInfo = this.getInfoLabel(child);
        if (childInfo == null || childInfo == "") {
          continue;
        }

        if (infoLabel != "") {
          infoLabel += ":";
        }
        infoLabel += childInfo;
      }

      //return info label
      return infoLabel;
    },
    getQtipContent: function(node) {
      /* Check the label of the node if it is not valid
      * then check the infolabel if it is also not valid do not show qtip
      */
      var label = node.data('label');
      if (label == null || label == "") {
        label = this.getInfoLabel(node);
      }
      if (label == null || label == "") {
        return;
      }
      
      var contentHtml = "<b style='text-align:center;font-size:16px;'>" + label + "</b>";
      var statesandinfos = node._private.data.statesandinfos;
      for (var i = 0; i < statesandinfos.length; i++) {
        var sbgnstateandinfo = statesandinfos[i];
        if (sbgnstateandinfo.clazz == "state variable") {
          var value = sbgnstateandinfo.state.value;
          var variable = sbgnstateandinfo.state.variable;
          var stateLabel = (variable == null /*|| typeof stateVariable === undefined */) ? value :
                  value + "@" + variable;
          if (stateLabel == null) {
            stateLabel = "";
          }
          contentHtml += "<div style='text-align:center;font-size:14px;'>" + stateLabel + "</div>";
        }
        else if (sbgnstateandinfo.clazz == "unit of information") {
          var stateLabel = sbgnstateandinfo.label.text;
          if (stateLabel == null) {
            stateLabel = "";
          }
          contentHtml += "<div style='text-align:center;font-size:14px;'>" + stateLabel + "</div>";
        }
      }
      return contentHtml;
    },
    // general utilities
    getDynamicLabelTextSize: function (ele, dynamicLabelSizeCoefficient) {
      var dynamicLabelSize = options.dynamicLabelSize;
      dynamicLabelSize = typeof dynamicLabelSize === 'function' ? dynamicLabelSize.call() : dynamicLabelSize;

      if (dynamicLabelSizeCoefficient === undefined) {
        if (dynamicLabelSize == 'small') {
          dynamicLabelSizeCoefficient = 0.75;
        }
        else if (dynamicLabelSize == 'regular') {
          dynamicLabelSizeCoefficient = 1;
        }
        else if (dynamicLabelSize == 'large') {
          dynamicLabelSizeCoefficient = 1.25;
        }
      }
      
      var h = ele.height();
      var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;

      return textHeight;
    },
    /*
    * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.
    */
    getEndPoint: function(edge, sourceOrTarget) {
      var portId = sourceOrTarget === 'source' ? edge.data('portsource') : edge.data('porttarget');

      if (portId == null) {
        return 'outside-to-node'; // If there is no portsource return the default value which is 'outside-to-node'
      }

      var endNode = sourceOrTarget === 'source' ? edge.source() : edge.target();
      var ports = endNode.data('ports');
      var port;
      for (var i = 0; i < ports.length; i++) {
        if (ports[i].id === portId) {
          port = ports[i];
        }
      }

      if (port === undefined) {
        return 'outside-to-node'; // If port is not found return the default value which is 'outside-to-node'
      }
      
      var x, y;
      // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center
      if (port.x != 0) {
        x = Math.sign(port.x) * 50;
        y = 0;
      }
      else {
        x = 0;
        y = Math.sign(port.y) * 50;
      }
      
      return '' + x + '% ' + y + '%';
    },
    /*
     * Return ordering of ports of a node.
     * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'
     */
    getPortsOrdering: function(node) {
      // Return the cached portsordering if exists
      if (node.data('portsordering')) {
        return node.data('portsordering');
      }
      
      var ports = node.data('ports');
      if (ports.length !== 2) {
        node.data('portsordering', 'none'); // Cache the ports ordering
        return 'none'; // Nodes are supposed to have 2 nodes or none
      }
      
      /*
       * Retursn if the given portId is porttarget of any of the given edges.
       * These edges are expected to be the edges connected to the node associated with that port.
       */
      var isPortTargetOfAnyEdge = function(edges, portId) {
        for (var i = 0; i < edges.length; i++) {
          if (edges[i].data('porttarget') === portId) {
            return true;
          }
        }
        
        return false;
      };
      
      // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.
      var orientation = ports[0].x === 0 ? 'vertical' : 'horizontal';
      // We need the connected edges of the node to find out if a port is an input port or an output port
      var connectedEdges = node.connectedEdges();
      
      var portsordering;
      if (orientation === 'horizontal') {
        var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative
        // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'
        if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {
          portsordering = 'L-to-R';
        }
        else {
          portsordering = 'R-to-L';
        }
      }
      else {
        var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative
        // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'
        if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {
          portsordering = 'T-to-B';
        }
        else {
          portsordering = 'B-to-T';
        }
      }
      
      // Cache the portsordering and return it.
      node.data('portsordering', portsordering);
      return portsordering;
    }
    
    // Section End
    // Stylesheet helpers
};

module.exports = elementUtilities;

},{"./graph-utilities":55,"./lib-utilities":58,"./option-utilities":60,"./text-utilities":62}],54:[function(_dereq_,module,exports){
/*
 * File Utilities: To be used on read/write file operation
 */

var sbgnmlToJson = _dereq_('./sbgnml-to-json-converter');
var jsonToSbgnml = _dereq_('./json-to-sbgnml-converter');
var uiUtilities = _dereq_('./ui-utilities');
var graphUtilities = _dereq_('./graph-utilities');
var updateGraph = graphUtilities.updateGraph.bind(graphUtilities);

var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;
var saveAs = libs.saveAs;

// Helper functions Start
// see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript
function b64toBlob(b64Data, contentType, sliceSize) {
  contentType = contentType || '';
  sliceSize = sliceSize || 512;

  var byteCharacters = atob(b64Data);
  var byteArrays = [];

  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);

    var byteNumbers = new Array(slice.length);
    for (var i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    var byteArray = new Uint8Array(byteNumbers);

    byteArrays.push(byteArray);
  }

  var blob = new Blob(byteArrays, {type: contentType});
  return blob;
}

function loadXMLDoc(fullFilePath) {
  if (window.XMLHttpRequest) {
    xhttp = new XMLHttpRequest();
  }
  else {
    xhttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xhttp.open("GET", fullFilePath, false);
  xhttp.send();
  return xhttp.responseXML;
}

// Should this be exposed or should this be moved to the helper functions section?
function textToXmlObject(text) {
  if (window.ActiveXObject) {
    var doc = new ActiveXObject('Microsoft.XMLDOM');
    doc.async = 'false';
    doc.loadXML(text);
  } else {
    var parser = new DOMParser();
    var doc = parser.parseFromString(text, 'text/xml');
  }
  return doc;
}
// Helper functions End

function fileUtilities() {}
fileUtilities.loadXMLDoc = loadXMLDoc;

fileUtilities.saveAsPng = function(filename) {
  var pngContent = cy.png({scale: 3, full: true});

  // this is to remove the beginning of the pngContent: data:img/png;base64,
  var b64data = pngContent.substr(pngContent.indexOf(",") + 1);
  saveAs(b64toBlob(b64data, "image/png"), filename || "network.png");
};

fileUtilities.saveAsJpg = function(filename) {
  var jpgContent = cy.jpg({scale: 3, full: true});

  // this is to remove the beginning of the pngContent: data:img/png;base64,
  var b64data = jpgContent.substr(jpgContent.indexOf(",") + 1);
  saveAs(b64toBlob(b64data, "image/jpg"), filename || "network.jpg");
};

fileUtilities.loadSample = function(filename, folderpath) {
  uiUtilities.startSpinner("load-spinner");
  
  // Users may want to do customized things while a sample is being loaded
  // Trigger an event for this purpose and specify the 'filename' as an event parameter
  $( document ).trigger( "sbgnvizLoadSample", [ filename ] ); // Aliases for sbgnvizLoadSampleStart
  $( document ).trigger( "sbgnvizLoadSampleStart", [ filename ] );
  
  // load xml document use default folder path if it is not specified
  var xmlObject = loadXMLDoc((folderpath || 'sample-app/samples/') + filename);
  
  setTimeout(function () {
    updateGraph(sbgnmlToJson.convert(xmlObject));
    uiUtilities.endSpinner("load-spinner");
    $( document ).trigger( "sbgnvizLoadSampleEnd", [ filename ] ); // Trigger an event signaling that a sample is loaded
  }, 0);
};

/*
  callback is a function remotely defined to add specific behavior that isn't implemented here.
  it is completely optional.
  signature: callback(textXml)
*/
fileUtilities.loadSBGNMLFile = function(file, callback) {
  var self = this;
  uiUtilities.startSpinner("load-file-spinner");
  
  // Users may want to do customized things while an external file is being loaded
  // Trigger an event for this purpose and specify the 'filename' as an event parameter
  $( document ).trigger( "sbgnvizLoadFile", [ file.name ] ); // Aliases for sbgnvizLoadFileStart
  $( document ).trigger( "sbgnvizLoadFileStart", [ file.name ] ); 
  
  var textType = /text.*/;

  var reader = new FileReader();

  reader.onload = function (e) {
    var text = this.result;

    setTimeout(function () {
      if (typeof callback !== 'undefined') callback(text);
      updateGraph(sbgnmlToJson.convert(textToXmlObject(text)));
      uiUtilities.endSpinner("load-file-spinner");
      $( document ).trigger( "sbgnvizLoadFileEnd", [ file.name ] ); // Trigger an event signaling that a file is loaded
    }, 0);
  };

  reader.readAsText(file);
};
fileUtilities.loadSBGNMLText = function(textData){
    setTimeout(function () {
        updateGraph(sbgnmlToJson.convert(textToXmlObject(textData)));
        uiUtilities.endSpinner("load-file-spinner");
    }, 0);

};

fileUtilities.saveAsSbgnml = function(filename, renderInfo) {
  var sbgnmlText = jsonToSbgnml.createSbgnml(filename, renderInfo);
  var blob = new Blob([sbgnmlText], {
    type: "text/plain;charset=utf-8;",
  });
  saveAs(blob, filename);
};
fileUtilities.convertSbgnmlTextToJson = function(sbgnmlText){
    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));
};

fileUtilities.createJson = function(json){
    var sbgnmlText = jsonToSbgnml.createSbgnml();
    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));

};

module.exports = fileUtilities;

},{"./graph-utilities":55,"./json-to-sbgnml-converter":56,"./lib-utilities":58,"./sbgnml-to-json-converter":61,"./ui-utilities":63}],55:[function(_dereq_,module,exports){
/*
 * Common utilities for sbgnviz graphs
 */

var optionUtilities = _dereq_('./option-utilities');
var options = optionUtilities.getOptions();
var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;

function graphUtilities() {}

graphUtilities.portsEnabled = true;

graphUtilities.disablePorts = function() {
  graphUtilities.portsEnabled = false;
  cy.style().update();
};

graphUtilities.enablePorts = function() {
  graphUtilities.portsEnabled = true;
  cy.style().update();
};

graphUtilities.arePortsEnabled = function() {
  return graphUtilities.portsEnabled;
};

graphUtilities.updateGraph = function(cyGraph) {
  console.log('cy update called');
  $( document ).trigger( "updateGraphStart" );
  // Reset undo/redo stack and buttons when a new graph is loaded
  if (options.undoable) {
    cy.undoRedo().reset();
//    this.resetUndoRedoButtons();
  }

  cy.startBatch();
  // clear data
  cy.remove('*');
  cy.add(cyGraph);

  //add position information to data for preset layout
  var positionMap = {};
  for (var i = 0; i < cyGraph.nodes.length; i++) {
    var xPos = cyGraph.nodes[i].data.bbox.x;
    var yPos = cyGraph.nodes[i].data.bbox.y;
    positionMap[cyGraph.nodes[i].data.id] = {'x': xPos, 'y': yPos};
  }

  this.refreshPaddings(); // Recalculates/refreshes the compound paddings
  cy.endBatch();
  
  var layout = cy.layout({
    name: 'preset',
    positions: positionMap,
    fit: true,
    padding: 50
  });
  
  // Check this for cytoscape.js backward compatibility
  if (layout && layout.run) {
    layout.run();
  }

  // Update the style
  cy.style().update();
  // Initilize the bend points once the elements are created
  if (cy.edgeBendEditing && cy.edgeBendEditing('initialized')) {
    cy.edgeBendEditing('get').initBendPoints(cy.edges());
  }
  
  $( document ).trigger( "updateGraphEnd" );
};

graphUtilities.calculatePaddings = function(paddingPercent) {
  //As default use the compound padding value
  if (!paddingPercent) {
    var compoundPadding = options.compoundPadding;
    paddingPercent = typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;
  }

  var nodes = cy.nodes();
  var total = 0;
  var numOfSimples = 0;
  for (var i = 0; i < nodes.length; i++) {
    var theNode = nodes[i];
    if (theNode.children() == null || theNode.children().length == 0) {
      total += Number(theNode.width());
      total += Number(theNode.height());
      numOfSimples++;
    }
  }

  var calc_padding = (paddingPercent / 100) * Math.floor(total / (2 * numOfSimples));
  if (calc_padding < 5) {
    calc_padding = 5;
  }

  return calc_padding;
};

graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function() {
  // this.calculatedPaddings is not working here 
  // TODO: replace this reference with this.calculatedPaddings once the reason is figured out
  graphUtilities.calculatedPaddings = this.calculatePaddings();
  return graphUtilities.calculatedPaddings;
};

module.exports = graphUtilities;
},{"./lib-utilities":58,"./option-utilities":60}],56:[function(_dereq_,module,exports){
var txtUtil = _dereq_('./text-utilities');
var elementUtilities = _dereq_('./element-utilities');
var libsbgnjs = _dereq_('libsbgn.js');
var renderExtension = libsbgnjs.render;
var annot = libsbgnjs.annot;
var pkgVersion = _dereq_('../../package.json').version; // need info about sbgnviz to put in xml
var pkgName = _dereq_('../../package.json').name;
var prettyprint = _dereq_('pretty-data').pd;
var graphUtilities = _dereq_('./graph-utilities');

var jsonToSbgnml = {
    /*
        takes renderInfo as an optional argument. It contains all the information needed to save
        the style and colors to the render extension. See newt/app-utilities getAllStyles()
        Structure: {
            background: the map background color,
            colors: {
              validXmlValue: color_id
              ...
            },
            styles: {
                styleKey1: {
                    idList: list of the nodes ids that have this style
                    properties: {
                        fontSize: ...
                        fill: ...
                        ...
                    }
                }
                styleKey2: ...
                ...
            }
        }
    */
    createSbgnml : function(filename, renderInfo){
        var self = this;
        var mapID = txtUtil.getXMLValidId(filename);
        var hasExtension = false;
        var hasRenderExtension = false;
        if (typeof renderInfo !== 'undefined') {
            hasExtension = true;
            hasRenderExtension = true;
        }

        //add headers
        xmlHeader = "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n";
        var sbgn = new libsbgnjs.Sbgn({xmlns: 'http://sbgn.org/libsbgn/0.3'});
        var map = new libsbgnjs.Map({language: 'process description', id: mapID});
        if (hasExtension) { // extension is there
            var extension = new libsbgnjs.Extension();
            if (hasRenderExtension) {
                extension.add(self.getRenderExtensionSbgnml(renderInfo));
            }
            map.setExtension(extension);
        }

        // get all glyphs
        var glyphList = [];
        cy.nodes(":visible").each(function(ele, i){
            if(typeof ele === "number") {
              ele = i;
            }
            if(!ele.isChild())
                glyphList = glyphList.concat(self.getGlyphSbgnml(ele)); // returns potentially more than 1 glyph
        });
        // add them to the map
        for(var i=0; i<glyphList.length; i++) {
            map.addGlyph(glyphList[i]);
        }

        // get all arcs
        cy.edges(":visible").each(function(ele, i){
            if(typeof ele === "number") {
              ele = i;
            }
            map.addArc(self.getArcSbgnml(ele));
        });

        sbgn.setMap(map);
        return prettyprint.xml(xmlHeader + sbgn.toXML());
    },

    // see createSbgnml for info on the structure of renderInfo
    getRenderExtensionSbgnml : function(renderInfo) {
        // initialize the main container
        var renderInformation = new renderExtension.RenderInformation({ id: 'renderInformation', 
                                                                        backgroundColor: renderInfo.background,
                                                                        programName: pkgName,
                                                                        programVersion: pkgVersion });

        // populate list of colors
        var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();
        for (var color in renderInfo.colors) {
            var colorDefinition = new renderExtension.ColorDefinition({id: renderInfo.colors[color], value: color});
            listOfColorDefinitions.addColorDefinition(colorDefinition);
        }
        renderInformation.setListOfColorDefinitions(listOfColorDefinitions);

        // populates styles
        var listOfStyles = new renderExtension.ListOfStyles();
        for (var key in renderInfo.styles) {
            var style = renderInfo.styles[key];
            var xmlStyle = new renderExtension.Style({id: txtUtil.getXMLValidId(key), idList: style.idList.join(' ')});
            var g = new renderExtension.RenderGroup({
                fontSize: style.properties.fontSize,
                fontFamily: style.properties.fontFamily,
                fontWeight: style.properties.fontWeight,
                fontStyle: style.properties.fontStyle,
                fill: style.properties.fill, // fill color
                stroke: style.properties.stroke, // stroke color
                strokeWidth: style.properties.strokeWidth
            });
            xmlStyle.setRenderGroup(g);
            listOfStyles.addStyle(xmlStyle);
        }
        renderInformation.setListOfStyles(listOfStyles);

        return renderInformation;
    },

    getAnnotationExtension: function(cyElement) {
        var annotations = cyElement.data('annotations');
        var annotExt = new annot.Annotation();
        var rdfElement = new annot.RdfElement();
        for (var annotID in annotations) {
            var currentAnnot = annotations[annotID];

            // check validity of annotation
            if(currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {
                continue;
            }

            // check if uncontrolled vocabulary
            if(currentAnnot.selectedRelation == "sio:SIO_000223") {
                var obj = {};
                obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;
                rdfElement.addCustomProperty('#'+cyElement.data('id') , obj);
            }
            else {
                var obj = {};
                obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;
                rdfElement.addResource('#'+cyElement.data('id') , obj);
            }
        }
        annotExt.setRdfElement(rdfElement);
        return annotExt;
    },

    getGlyphSbgnml : function(node){
        var self = this;
        var nodeClass = node._private.data.class;
        var glyphList = [];

        var glyph = new libsbgnjs.Glyph({id: node._private.data.id, class_: nodeClass});

        // assign compartmentRef
        if(node.parent().isParent()){
            if(nodeClass === "compartment"){
                var parent = node.parent();
                glyph.compartmentRef = node._private.data.parent;
            }
            else {
                var parent = node.parent()[0];
                if(parent._private.data.class == "compartment")
                    glyph.compartmentRef = parent._private.data.id;
            }
        }

        // misc information
        var label = node._private.data.label;
        if(typeof label != 'undefined')
            glyph.setLabel(new libsbgnjs.Label({text: label}));
        //add clone information
        if(typeof node._private.data.clonemarker != 'undefined')
            glyph.setClone(new libsbgnjs.CloneType());
        //add bbox information
        glyph.setBbox(this.addGlyphBbox(node));
        //add port information
        var ports = node._private.data.ports;
        for(var i = 0 ; i < ports.length ; i++){
            var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal';
            // This is the ratio of the area occupied for ports over the whole shape
            var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50;
            
            // Divide the node sizes by the ratio because that sizes includes ports as well
            var x = node._private.position.x + ports[i].x * ( node.width() / ratio ) / 100;
            var y = node._private.position.y + ports[i].y * ( node.height() / ratio ) / 100;

            glyph.addPort(new libsbgnjs.Port({id: ports[i].id, x: x, y: y}));
        }
        //add state and info box information
        for(var i = 0 ; i < node._private.data.statesandinfos.length ; i++){
            var boxGlyph = node._private.data.statesandinfos[i];
            var statesandinfosId = node._private.data.id+"_"+i;
            if(boxGlyph.clazz === "state variable"){
                glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));
            }
            else if(boxGlyph.clazz === "unit of information"){
                glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));
            }
        }
        // check for annotations
        if (node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {
            var extension;
            if(glyph.extension) { // an extension is already there for thise glyph
                extension = glyph.extension;
            }
            else {
                extension = new libsbgnjs.Extension();
                glyph.setExtension(extension);
            }
            var annotExt = self.getAnnotationExtension(node);
            extension.add(annotExt);
        }

        // add glyph members that are not state variables or unit of info: subunits
        if(nodeClass === "complex" || nodeClass === "submap"){
            node.children().each(function(ele, i){
                if(typeof ele === "number") {
                  ele = i;
                }
                var glyphMemberList = self.getGlyphSbgnml(ele);
                for (var i=0; i < glyphMemberList.length; i++) {
                    glyph.addGlyphMember(glyphMemberList[i]);
                }
            });
        }

        // current glyph is done
        glyphList.push(glyph);

        // keep going with all the included glyphs
        if(nodeClass === "compartment"){
            node.children().each(function(ele, i){
                if(typeof ele === "number") {
                  ele = i;
                }
                glyphList = glyphList.concat(self.getGlyphSbgnml(ele));
            });
        }

        return  glyphList;
    },

    getArcSbgnml : function(edge){
        //Temporary hack to resolve "undefined" arc source and targets
        var arcTarget = edge._private.data.porttarget;
        var arcSource = edge._private.data.portsource;

        if (arcSource == null || arcSource.length === 0)
            arcSource = edge._private.data.source;

        if (arcTarget == null || arcTarget.length === 0)
            arcTarget = edge._private.data.target;

        var arcId = edge._private.data.id;
        var arc = new libsbgnjs.Arc({id: arcId, source: arcSource, target: arcTarget, class_: edge._private.data.class});

        arc.setStart(new libsbgnjs.StartType({x: edge._private.rscratch.startX, y: edge._private.rscratch.startY}));

        // Export bend points if edgeBendEditingExtension is registered
        if (cy.edgeBendEditing && cy.edgeBendEditing('initialized')) {
          var segpts = cy.edgeBendEditing('get').getSegmentPoints(edge);
          if(segpts){
            for(var i = 0; segpts && i < segpts.length; i = i + 2){
              var bendX = segpts[i];
              var bendY = segpts[i + 1];

              arc.addNext(new libsbgnjs.NextType({x: bendX, y: bendY}));
            }
          }
        }

        arc.setEnd(new libsbgnjs.EndType({x: edge._private.rscratch.endX, y: edge._private.rscratch.endY}));

        var cardinality = edge._private.data.cardinality;
        if(typeof cardinality != 'undefined' && cardinality != null) {
            arc.addGlyph(new libsbgnjs.Glyph({
                id: arc.id+'_card',
                class_: 'cardinality',
                label: new libsbgnjs.Label({text: cardinality}),
                bbox: new libsbgnjs.Bbox({x: 0, y: 0, w: 0, h: 0}) // dummy bbox, needed for format compliance
            }));
        }
        // check for annotations
        if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {
            var extension;
            if(arc.extension) { // an extension is already there for thise arc
                extension = arc.extension;
            }
            else {
                extension = new libsbgnjs.Extension();
                arc.setExtension(extension);
            }
            var annotExt = this.getAnnotationExtension(edge);
            extension.add(annotExt);
        }

        return arc;
    },

    addGlyphBbox : function(node){
        var width = node.width();
        var height = node.height();
        
        var _class = node.data('class');
        
        // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.
        // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.
        if (elementUtilities.canHavePorts(_class)) {
          if (graphUtilities.portsEnabled === true && node.data('ports').length === 2) {
            // We assume that the ports are symmetric to the node center so using just one of the ports is enough
            var port = node.data('ports')[0];
            var orientation = port.x === 0 ? 'vertical' : 'horizontal';
            // This is the ratio of the area occupied with ports over without ports
            var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;
            // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports
            width /= ratio;
            height /= ratio;
          }
        }
        
        var x = node._private.position.x - width/2;
        var y = node._private.position.y - height/2;
        
        return new libsbgnjs.Bbox({x: x, y: y, w: width, h: height});
    },

    addStateAndInfoBbox : function(node, boxGlyph){
        boxBbox = boxGlyph.bbox;

        var x = boxBbox.x / 100 * node.width();
        var y = boxBbox.y / 100 * node.height();

        x = node._private.position.x + (x - boxBbox.w/2);
        y = node._private.position.y + (y - boxBbox.h/2);

        return new libsbgnjs.Bbox({x: x, y: y, w: boxBbox.w, h: boxBbox.h});
    },

    addStateBoxGlyph : function(node, id, mainGlyph){

        var glyph = new libsbgnjs.Glyph({id: id, class_: 'state variable'});
        var state = new libsbgnjs.StateType();
        if(typeof node.state.value != 'undefined')
            state.value = node.state.value;
        if(typeof node.state.variable != 'undefined')
            state.variable = node.state.variable;
        glyph.setState(state);
        glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));

        return glyph;
    },

    addInfoBoxGlyph : function(node, id, mainGlyph){
        var glyph = new libsbgnjs.Glyph({id: id, class_: 'unit of information'});
        var label = new libsbgnjs.Label();
        if(typeof node.label.text != 'undefined')
            label.text = node.label.text;
        glyph.setLabel(label);
        glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));

        return glyph;
    }
};

module.exports = jsonToSbgnml;

},{"../../package.json":49,"./element-utilities":53,"./graph-utilities":55,"./text-utilities":62,"libsbgn.js":65,"pretty-data":18}],57:[function(_dereq_,module,exports){
/*
 * Listen document for keyboard inputs and exports the utilities that it makes use of
 */
var optionUtilities = _dereq_('./option-utilities');
var options = optionUtilities.getOptions();

var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;

var keyboardInputUtilities = {
  isNumberKey: function(e) {
    return ( e.keyCode >= 48 && e.keyCode <= 57 ) || ( e.keyCode >= 96 && e.keyCode <= 105 );
  },
  isDotKey: function(e) {
    return e.keyCode === 190;
  },
  isMinusSignKey: function(e) {
    return e.keyCode === 109 || e.keyCode === 189;
  },
  isLeftKey: function(e) {
    return e.keyCode === 37;
  },
  isRightKey: function(e) {
    return e.keyCode === 39;
  },
  isBackspaceKey: function(e) {
    return e.keyCode === 8;
  },
  isTabKey: function(e) {
    return e.keyCode === 9;
  },
  isEnterKey: function(e) {
    return e.keyCode === 13;
  },
  isIntegerFieldInput: function(value, e) {
    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) 
            || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);
  },
  isFloatFieldInput: function(value, e) {
    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);
  },
  isCtrlOrCommandPressed: function(e) {
    return e.ctrlKey || e.metaKey;
  }
};

$(document).ready(function () {
  $(document).on('keydown', '.integer-input', function(e){
    var value = $(this).attr('value');
    return keyboardInputUtilities.isIntegerFieldInput(value, e);
  });
  
  $(document).on('keydown', '.float-input', function(e){
    var value = $(this).attr('value');
    return keyboardInputUtilities.isFloatFieldInput(value, e);
  });
  
  $(document).on('change', '.integer-input,.float-input', function(e){
    var min   = $(this).attr('min');
    var max   = $(this).attr('max');
    var value = parseFloat($(this).val());
    
    if(min != null) {
      min = parseFloat(min);
    }
    
    if(max != null) {
      max = parseFloat(max);
    }
    
    if(min != null && value < min) {
      value = min;
    }
    else if(max != null && value > max) {
      value = max;
    }
    
    if(isNaN(value)) {
      if(min != null) {
        value = min;
      }
      else if(max != null) {
        value = max;
      }
      else {
        value = 0;
      }
    }
    
    $(this).val("" + value);
  });
});

module.exports = keyboardInputUtilities;

},{"./lib-utilities":58,"./option-utilities":60}],58:[function(_dereq_,module,exports){
/* 
 * Utility file to get and set the libraries to which sbgnviz is dependent from any file.
 */

var libUtilities = function(){
};

libUtilities.setLibs = function(libs) {
  this.libs = libs;
};

libUtilities.getLibs = function() {
  return this.libs;
};

module.exports = libUtilities;


},{}],59:[function(_dereq_,module,exports){
/* 
 * These are the main utilities to be directly utilized by the user interactions.
 * Idealy, this file is just required by index.js
 */

var elementUtilities = _dereq_('./element-utilities');
var jsonToSbgnml = _dereq_('./json-to-sbgnml-converter');
var sbgnmlToJson = _dereq_('./sbgnml-to-json-converter');
var optionUtilities = _dereq_('./option-utilities');
var graphUtilities = _dereq_('./graph-utilities');

var options = optionUtilities.getOptions();
var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;

// Helpers start
function beforePerformLayout() {
  var nodes = cy.nodes();
  var edges = cy.edges();

  graphUtilities.disablePorts();

  // TODO do this by using extension API
  cy.$('.edgebendediting-hasbendpoints').removeClass('edgebendediting-hasbendpoints');
  edges.scratch('cyedgebendeditingWeights', []);
  edges.scratch('cyedgebendeditingDistances', []);
};
// Helpers end

function mainUtilities() {}

// Expand given nodes. Requires expandCollapse extension and considers undoable option.
mainUtilities.expandNodes = function(nodes) {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  var nodesToExpand = expandCollapse.expandableNodes(nodes);
  if (nodesToExpand.length == 0) {
    return;
  }
  if(options.undoable) {
    cy.undoRedo().do("expand", {
      nodes: nodesToExpand,
    });
  }
  else {
    expandCollapse.expand(nodes);
  }
};

// Collapse given nodes. Requires expandCollapse extension and considers undoable option.
mainUtilities.collapseNodes = function(nodes) {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  if (expandCollapse.collapsibleNodes(nodes).length == 0) {
    return;
  }
  
  if(options.undoable) {
    cy.undoRedo().do("collapse", {
      nodes: nodes
    });
  }
  else {
    expandCollapse.collapse(nodes);
  }
};

// Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.
mainUtilities.collapseComplexes = function() {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  var complexes = cy.nodes("[class='complex']");
  if (expandCollapse.collapsibleNodes(complexes).length == 0) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("collapseRecursively", {
      nodes: complexes
    });
  }
  else {
    expandCollapse.collapseRecursively(complexes);
  }
};

// Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.
mainUtilities.expandComplexes = function() {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  var nodes = expandCollapse.expandableNodes(cy.nodes().filter("[class='complex']"));
  if (nodes.length == 0) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("expandRecursively", {
      nodes: nodes
    });
  }
  else {
    expandCollapse.expandRecursively(nodes);
  }
};

// Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.
mainUtilities.collapseAll = function() {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  var nodes = cy.nodes(':visible');
  if (expandCollapse.collapsibleNodes(nodes).length == 0) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("collapseRecursively", {
      nodes: nodes
    });
  }
  else {
    expandCollapse.collapseRecursively(nodes);
  }
};

// Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.
mainUtilities.expandAll = function() {
  // Get expandCollapse api
  var expandCollapse = cy.expandCollapse('get');
  
  var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));
  if (nodes.length == 0) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("expandRecursively", {
      nodes: nodes
    });
  }
  else {
    expandCollapse.expandRecursively(nodes);
  }
};

// Extends the given nodes list in a smart way to leave the map intact and hides the resulting list. 
// Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.hideNodesSmart = function(_nodes) {
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
  
  var allNodes = cy.nodes(":visible");
  var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);
  var nodesToHide = allNodes.not(nodesToShow);

  if (nodesToHide.length === 0) {
    return;
  }
  
  if(options.undoable) {
    cy.undoRedo().do("hide", nodesToHide);
  }
  else {
    viewUtilities.hide(nodesToHide);
  }
};

// Extends the given nodes list in a smart way to leave the map intact. 
// Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.showNodesSmart = function(_nodes) {
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
  
  var allNodes = cy.elements();
  var nodesToShow = elementUtilities.extendNodeList(nodes);
  var nodesToHide = allNodes.not(nodesToShow);
  
  if (nodesToHide.length === 0) {
    return;
  }
  
  if(options.undoable) {
    cy.undoRedo().do("hide", nodesToHide);
  }
  else {
    viewUtilities.hide(nodesToHide);
  }
};

// Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.showAll = function() {
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  
  if (cy.elements().length === cy.elements(':visible').length) {
    return;
  }
  
  if(options.undoable) {
    cy.undoRedo().do("show", cy.elements());
  }
  else {
    viewUtilities.show(cy.elements());
  }
};

// Removes the given elements in a simple way. Considers 'undoable' option.
mainUtilities.deleteElesSimple = function(eles) {
  if (eles.length == 0) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("deleteElesSimple", {
      eles: eles
    });
  }
  else {
    eles.remove();
  }
};

// Extends the given nodes list in a smart way to leave the map intact and removes the resulting list. 
// Considers 'undoable' option.
mainUtilities.deleteNodesSmart = function(_nodes) {
  var nodes = _nodes.nodes();
  if (nodes.length == 0) {
    return;
  }
  
  if(options.undoable) {
    cy.undoRedo().do("deleteNodesSmart", {
      firstTime: true,
      eles: nodes
    });
  }
  else {
    elementUtilities.deleteNodesSmart(nodes);
  }
};

// Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.highlightNeighbours = function(_nodes) {
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  
  var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
  var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);
  if (elesToHighlight.length === 0) {
    return;
  }
  var notHighlightedEles = cy.elements(".nothighlighted").filter(":visible");
  var highlightedEles = cy.elements(':visible').difference(notHighlightedEles);
  if (elesToHighlight.same(highlightedEles)) {
    return;
  }
  
  if (options.undoable) {
    cy.undoRedo().do("highlight", elesToHighlight);
  }
  else {
    viewUtilities.highlight(elesToHighlight);
  }
};

// Finds the elements whose label includes the given label and highlights processes of those elements.
// Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.searchByLabel = function(label) {
  if (label.length == 0) {
    return;
  }
  
  var nodesToHighlight = cy.nodes(":visible").filter(function (ele, i) {
    if(typeof ele === "number") {
      ele = i;
    }
    if (ele.data("label") && ele.data("label").toLowerCase().indexOf(label) >= 0) {
      return true;
    }
    return false;
  });

  if (nodesToHighlight.length == 0) {
    return;
  }
  
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');

  nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);
  
  if (options.undoable) {
    cy.undoRedo().do("highlight", nodesToHighlight);
  }
  else {
    viewUtilities.highlight(nodesToHighlight);
  }
};

// Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.highlightProcesses = function(_nodes) {
  var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes
  var elesToHighlight = elementUtilities.extendNodeList(nodes);
  if (elesToHighlight.length === 0) {
    return;
  }
  var notHighlightedEles = cy.elements(".nothighlighted").filter(":visible");
  var highlightedEles = cy.elements(':visible').difference(notHighlightedEles);
  if (elesToHighlight.same(highlightedEles)) {
    return;
  }
  
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  
  if (options.undoable) {
    cy.undoRedo().do("highlight", elesToHighlight);
  }
  else {
    viewUtilities.highlight(elesToHighlight);
  }
};

// Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.
mainUtilities.removeHighlights = function() {
  if (elementUtilities.noneIsNotHighlighted()) {
    return;
  }
  
  // If this function is being called we can assume that view utilities extension is on use
  var viewUtilities = cy.viewUtilities('get');
  
  if (options.undoable) {
    cy.undoRedo().do("removeHighlights");
  }
  else {
    viewUtilities.removeHighlights();
  }
};

// Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter
// to a truthy value you can force an undable layout operation independant of 'undoable' option.
mainUtilities.performLayout = function(layoutOptions, notUndoable) {
  // Things to do before performing layout
  beforePerformLayout();
  
  if (!options.undoable || notUndoable) { // 'notUndoable' flag can be used to have composite actions in undo/redo stack
    var layout = cy.elements().filter(':visible').layout(layoutOptions);
    
    // Check this for cytoscape.js backward compatibility
    if (layout && layout.run) {
      layout.run();
    }
  }
  else {
    cy.undoRedo().do("layout", {
      options: layoutOptions,
      eles: cy.elements().filter(':visible')
    });
  }
};

// Creates an sbgnml file content from the exising graph and returns it.
mainUtilities.createSbgnml = function() {
  return jsonToSbgnml.createSbgnml();
};

// Converts given sbgnml data to a json object in a special format 
// (http://js.cytoscape.org/#notation/elements-json) and returns it.
mainUtilities.convertSbgnmlToJson = function(data) {
  return sbgnmlToJson.convert(data);
};

// Create the qtip contents of the given node and returns it.
mainUtilities.getQtipContent = function(node) {
  return elementUtilities.getQtipContent(node);
};

module.exports = mainUtilities;
},{"./element-utilities":53,"./graph-utilities":55,"./json-to-sbgnml-converter":56,"./lib-utilities":58,"./option-utilities":60,"./sbgnml-to-json-converter":61}],60:[function(_dereq_,module,exports){
/*
 *  Extend default options and get current options by using this file 
 */

// default options
var defaults = {
  // The path of core library images when sbgnviz is required from npm and the index html 
  // file and node_modules are under the same folder then using the default value is fine
  imgPath: 'node_modules/sbgnviz/src/img',
  // Whether to fit labels to nodes
  fitLabelsToNodes: function () {
    return false;
  },
  // dynamic label size it may be 'small', 'regular', 'large'
  dynamicLabelSize: function () {
    return 'regular';
  },
  // percentage used to calculate compound paddings
  compoundPadding: function () {
    return 10;
  },
  // extra padding for compartment and complexes
  extraCompartmentPadding: 10,
  extraComplexPadding: 10,
  // Wether to display the complex's labels, like compartments.
  // Will also increase the paddings by extraCompoundPadding to make room for the name.
  showComplexName: false,
  // The selector of the component containing the sbgn network
  networkContainerSelector: '#sbgn-network-container',
  // Whether the actions are undoable, requires cytoscape-undo-redo extension
  undoable: true
};

var optionUtilities = function () {
};

// Extend the defaults options with the user options
optionUtilities.extendOptions = function (options) {
  var result = {};

  for (var prop in defaults) {
    result[prop] = defaults[prop];
  }
  
  for (var prop in options) {
    result[prop] = options[prop];
  }

  optionUtilities.options = result;

  return options;
};

optionUtilities.getOptions = function () {
  return optionUtilities.options;
};

module.exports = optionUtilities;

},{}],61:[function(_dereq_,module,exports){
var elementUtilities = _dereq_('./element-utilities');
var graphUtilities = _dereq_('./graph-utilities');
var libsbgnjs = _dereq_('libsbgn.js');

var sbgnmlToJson = {
  insertedNodes: {},
  getAllCompartments: function (glyphList) {
    var compartments = [];

    for (var i = 0; i < glyphList.length; i++) {
      if (glyphList[i].class_ == 'compartment') {
        var compartment = glyphList[i];
        var bbox = compartment.bbox;
        compartments.push({
          'x': parseFloat(bbox.x),
          'y': parseFloat(bbox.y),
          'w': parseFloat(bbox.w),
          'h': parseFloat(bbox.h),
          'id': compartment.id
        });
      }
    }

    compartments.sort(function (c1, c2) {
      if (c1.h * c1.w < c2.h * c2.w) {
        return -1;
      }
      if (c1.h * c1.w > c2.h * c2.w) {
        return 1;
      }
      return 0;
    });

    return compartments;
  },
  isInBoundingBox: function (bbox1, bbox2) {
    if (bbox1.x > bbox2.x &&
        bbox1.y > bbox2.y &&
        bbox1.x + bbox1.w < bbox2.x + bbox2.w &&
        bbox1.y + bbox1.h < bbox2.y + bbox2.h) {
      return true;
    }
    return false;
  },
  bboxProp: function (ele) {
    var bbox = ele.bbox;

    // set positions as center
    bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;
    bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;

    return bbox;
  },
  stateAndInfoBboxProp: function (ele, parentBbox) {
    var xPos = parseFloat(parentBbox.x);
    var yPos = parseFloat(parentBbox.y);

    var bbox = ele.bbox;

    // set positions as center
    bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2 - xPos;
    bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2 - yPos;

    bbox.x = bbox.x / parseFloat(parentBbox.w) * 100;
    bbox.y = bbox.y / parseFloat(parentBbox.h) * 100;

    return bbox;
  },
  findChildNodes: function (ele, childTagName) {
    // find child nodes at depth level of 1 relative to the element
    var children = [];
    for (var i = 0; i < ele.childNodes.length; i++) {
      var child = ele.childNodes[i];
      if (child.nodeType === 1 && child.tagName === childTagName) {
        children.push(child);
      }
    }
    return children;
  },
  findChildNode: function (ele, childTagName) {
    var nodes = this.findChildNodes(ele, childTagName);
    return nodes.length > 0 ? nodes[0] : undefined;
  },
  stateAndInfoProp: function (ele, parentBbox) {
    var self = this;
    var stateAndInfoArray = [];

    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');

    for (var i = 0; i < childGlyphs.length; i++) {
      var glyph = childGlyphs[i];
      var info = {};

      if (glyph.class_ === 'unit of information') {
        info.id = glyph.id || undefined;
        info.clazz = glyph.class_ || undefined;
        info.label = {
          'text': (glyph.label && glyph.label.text) || undefined
        };
        info.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);
        stateAndInfoArray.push(info);
      } else if (glyph.class_ === 'state variable') {
        info.id = glyph.id || undefined;
        info.clazz = glyph.class_ || undefined;
        var state = glyph.state;
        var value = (state && state.value) || undefined;
        var variable = (state && state.variable) || undefined;
        info.state = {
          'value': value,
          'variable': variable
        };
        info.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);
        stateAndInfoArray.push(info);
      }
    }


    return stateAndInfoArray;
  },
  addParentInfoToNode: function (ele, nodeObj, parent, compartments) {
    var self = this;
    var compartmentRef = ele.compartmentRef;

    if (parent) {
      nodeObj.parent = parent;
      return;
    }

    if (compartmentRef) {
      nodeObj.parent = compartmentRef;
    } else {
      nodeObj.parent = '';

      // add compartment according to geometry
      for (var i = 0; i < compartments.length; i++) {
        var bboxEl = ele.bbox;
        var bbox = {
          'x': parseFloat(bboxEl.x),
          'y': parseFloat(bboxEl.y),
          'w': parseFloat(bboxEl.w),
          'h': parseFloat(bboxEl.h),
          'id': ele.id
        };
        if (self.isInBoundingBox(bbox, compartments[i])) {
          nodeObj.parent = compartments[i].id;
          break;
        }
      }
    }
  },
  addCytoscapeJsNode: function (ele, jsonArray, parent, compartments) {
    var self = this;
    var nodeObj = {};

    // add id information
    nodeObj.id = ele.id;
    // add node bounding box information
    nodeObj.bbox = self.bboxProp(ele);
    // add class information
    nodeObj.class = ele.class_;
    // add label information
    nodeObj.label = (ele.label && ele.label.text) || undefined;
    // add state and info box information
    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj.bbox);
    // adding parent information
    self.addParentInfoToNode(ele, nodeObj, parent, compartments);

    // add clone information
    if (ele.clone) {
      nodeObj.clonemarker = true;
    } else {
      nodeObj.clonemarker = undefined;
    }

    // add port information
    var ports = [];
    var portElements = ele.ports;

    for (var i = 0; i < portElements.length; i++) {
      var portEl = portElements[i];
      var id = portEl.id;
      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;
      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;

      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;
      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100;

      ports.push({
        id: id,
        x: relativeXPos,
        y: relativeYPos
      });
    }

    nodeObj.ports = ports;
    
    var _class = nodeObj.class;
    // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.
    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.
    if (elementUtilities.canHavePorts(_class)) {
      if (graphUtilities.portsEnabled && ports.length === 2) {
        // We assume that the ports are symmetric to the node center so using just one of the ports is enough
        var port = ports[0];
        var orientation = port.x === 0 ? 'vertical' : 'horizontal';
        // This is the ratio of the area occupied with ports over without ports
        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;
        // Multiply the bbox with the calculated ratio
        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;
        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;
      }
    }

    if (ele.extension && ele.extension.has('annotation')) { // annotation extension was found
      var rdfElement = ele.extension.get('annotation').rdfElement;
      nodeObj = self.handleAnnotations(nodeObj, rdfElement);
    }

    var cytoscapeJsNode = {data: nodeObj};
    jsonArray.push(cytoscapeJsNode);
  },
  /**
   * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field
   */
  handleAnnotations: function(cyObject, rdfElement) {
    // local utility function
    function dbFromUrl(url) {
      var regexp = /^http:\/\/identifiers.org\/(.+?)\/.+$/;
      return url.replace(regexp, '$1');
    }

    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {
      if(!cyObject.annotations) {
        cyObject.annotations = {};
      }
      var annotId = cyObject.id+"-annot-"+annotationIndex;

      cyObject.annotations[annotId] = {
        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.
        // This would lead to the user losing annotations without knowing it.
        status: status, // <-- we trust that what's been loaded is valid.
        selectedDB: selectedDB,
        selectedRelation: selectedRelation,
        annotationValue: annotationValue
      };
      return cyObject;
    }

    // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description
    var id = rdfElement.getAllIds()[0];
    var resources = rdfElement.getResourcesOfId(id);
    var customProperties = rdfElement.getCustomPropertiesOfId(id);

    var globalAnnotIndex = 0;
    // handle controlled properties
    for (var fullQualifier in resources) {
      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);
      for(var i=0; i<resources[fullQualifier].length; i++) {
        var value = resources[fullQualifier][i];
        var selectedDB = dbFromUrl(value);
        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, "validated", selectedDB, relation, value);
        globalAnnotIndex++;
      }
    }
    // handle custom properties
    for (var key in customProperties) {
      var value = customProperties[key];
      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, "validated", key, "sio:SIO_000223", value);
      globalAnnotIndex++;
    }

    return cyObject;
  },
  traverseNodes: function (ele, jsonArray, parent, compartments) {
    var elId = ele.id;
    if (!elementUtilities.handledElements[ele.class_]) {
      return;
    }
    this.insertedNodes[elId] = true;
    var self = this;
    // add complex nodes here

    var eleClass = ele.class_;

    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap') {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);

      var childGlyphs = ele.glyphMembers;
      for (var i = 0; i < childGlyphs.length; i++) {
        var glyph = childGlyphs[i];
        var glyphClass = glyph.class_;
        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information') {
          self.traverseNodes(glyph, jsonArray, elId, compartments);
        }
      }
    } else {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);
    }
  },
  getPorts: function (xmlObject) {
    return ( xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port'));
  },
  getGlyphs: function (xmlObject) {
    var glyphs = xmlObject._cachedGlyphs;

    if (!glyphs) {
      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');

      var id2glyph = xmlObject._id2glyph = {};

      for ( var i = 0; i < glyphs.length; i++ ) {
        var g = glyphs[i];
        var id = g.getAttribute('id');

        id2glyph[ id ] = g;
      }
    }

    return glyphs;
  },
  getGlyphById: function (xmlObject, id) {
    this.getGlyphs(xmlObject); // make sure cache is built

    return xmlObject._id2glyph[id];
  },
  getArcSourceAndTarget: function (arc, xmlObject) {
    // source and target can be inside of a port
    var source = arc.source;
    var target = arc.target;
    var sourceNodeId;
    var targetNodeId;

    var sourceExists = this.getGlyphById(xmlObject, source);
    var targetExists = this.getGlyphById(xmlObject, target);

    if (sourceExists) {
      sourceNodeId = source;
    }

    if (targetExists) {
      targetNodeId = target;
    }


    var i;
    var portEls = this.getPorts(xmlObject);
    var port;
    if (sourceNodeId === undefined) {
      for (i = 0; i < portEls.length; i++ ) {
        port = portEls[i];
        if (port.getAttribute('id') === source) {
          sourceNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    if (targetNodeId === undefined) {
      for (i = 0; i < portEls.length; i++) {
        port = portEls[i];
        if (port.getAttribute('id') === target) {
          targetNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    return {'source': sourceNodeId, 'target': targetNodeId};
  },

  getArcBendPointPositions: function (ele) {
    var bendPointPositions = [];

    var children = ele.nexts;

    for (var i = 0; i < children.length; i++) {
      var posX = children[i].x;
      var posY = children[i].y;

      bendPointPositions.push({
        x: posX,
        y: posY
      });
    }

    return bendPointPositions;
  },
  addCytoscapeJsEdge: function (ele, jsonArray, xmlObject) {
    if (!elementUtilities.handledElements[ele.class_]) {
      return;
    }

    var self = this;
    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);

    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {
      return;
    }

    var edgeObj = {};
    var bendPointPositions = self.getArcBendPointPositions(ele);

    edgeObj.id = ele.id || undefined;
    edgeObj.class = ele.class_;
    edgeObj.bendPointPositions = bendPointPositions;

    edgeObj.cardinality = 0;
    if (ele.glyphs.length > 0) {
      for (var i = 0; i < ele.glyphs.length; i++) {
        if (ele.glyphs[i].class_ === 'cardinality') {
          var label = ele.glyphs[i].label;
          edgeObj.cardinality = label.text || undefined;
        }
      }
    }

    edgeObj.source = sourceAndTarget.source;
    edgeObj.target = sourceAndTarget.target;

    edgeObj.portsource = ele.source;
    edgeObj.porttarget = ele.target;

    if (ele.extension && ele.extension.has('annotation')) { // annotation extension was found
      var rdfElement = ele.extension.get('annotation').rdfElement;
      edgeObj = self.handleAnnotations(edgeObj, rdfElement);
    }

    var cytoscapeJsEdge = {data: edgeObj};
    jsonArray.push(cytoscapeJsEdge);
  },
  applyStyle: function (renderInformation, nodes, edges) {
    // get all color id references to their value
    var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;
    var colorIDToValue = {};
    for (var i=0; i < colorList.length; i++) {
      colorIDToValue[colorList[i].id] = colorList[i].value;
    }

    // convert style list to elementId-indexed object pointing to style
    // also convert color references to color values
    var styleList = renderInformation.listOfStyles.styles;
    var elementIDToStyle = {};
    for (var i=0; i < styleList.length; i++) {
      var style = styleList[i];
      var renderGroup = style.renderGroup;

      // convert color references
      if (renderGroup.stroke != null) {
        renderGroup.stroke = colorIDToValue[renderGroup.stroke];
      }
      if (renderGroup.fill != null) {
        renderGroup.fill = colorIDToValue[renderGroup.fill];
      }

      var idList = style.idList.split(' ');
      for (var j=0; j < idList.length; j++) {
        var id = idList[j];
        elementIDToStyle[id] = renderGroup;
      }
    }

    function hexToDecimal (hex) {
      return Math.round(parseInt('0x'+hex) / 255 * 100) / 100;
    }

    function convertHexColor (hex) {
      if (hex.length == 7) { // no opacity provided
        return {opacity: null, color: hex};
      }
      else { // length of 9
        var color = hex.slice(0,7);
        var opacity = hexToDecimal(hex.slice(-2));
        return {opacity: opacity, color: color};
      }
    }

    // apply the style to nodes and overwrite the default style
    for (var i=0; i < nodes.length; i++) {
      var node = nodes[i];
      // special case for color properties, we need to check opacity
      var bgColor = elementIDToStyle[node.data['id']].fill;
      if (bgColor) {
        var res = convertHexColor(bgColor);
        node.data['background-color'] = res.color;
        node.data['background-opacity'] = res.opacity;
      }

      var borderColor = elementIDToStyle[node.data['id']].stroke;
      if (borderColor) {
        var res = convertHexColor(borderColor);
        node.data['border-color'] = res.color;
      }

      var borderWidth = elementIDToStyle[node.data['id']].strokeWidth;
      if (borderWidth) {
        node.data['border-width'] = borderWidth;
      }

      var fontSize = elementIDToStyle[node.data['id']].fontSize;
      if (fontSize) {
        node.data['font-size'] = fontSize;
      }

      var fontFamily = elementIDToStyle[node.data['id']].fontFamily;
      if (fontFamily) {
        node.data['font-family'] = fontFamily;
      }

      var fontStyle = elementIDToStyle[node.data['id']].fontStyle;
      if (fontStyle) {
        node.data['font-style'] = fontStyle;
      }

      var fontWeight = elementIDToStyle[node.data['id']].fontWeight;
      if (fontWeight) {
        node.data['font-weight'] = fontWeight;
      }

      var textAnchor = elementIDToStyle[node.data['id']].textAnchor;
      if (textAnchor) {
        node.data['text-halign'] = textAnchor;
      }

      var vtextAnchor = elementIDToStyle[node.data['id']].vtextAnchor;
      if (vtextAnchor) {
        node.data['text-valign'] = vtextAnchor;
      }
    }

    // do the same for edges
    for (var i=0; i < edges.length; i++) {
      var edge = edges[i];

      var lineColor = elementIDToStyle[edge.data['id']].stroke;
      if (lineColor) {
        var res = convertHexColor(lineColor);
        edge.data['line-color'] = res.color;
      }

      var width = elementIDToStyle[edge.data['id']].strokeWidth;
      if (width) {
        edge.data['width'] = width;
      }
    }
  },
  convert: function (xmlObject) {
    var self = this;
    var cytoscapeJsNodes = [];
    var cytoscapeJsEdges = [];

    var sbgn = libsbgnjs.Sbgn.fromXML(xmlObject.querySelector('sbgn'));
    var compartments = self.getAllCompartments(sbgn.map.glyphs);

    var glyphs = sbgn.map.glyphs;
    var arcs = sbgn.map.arcs;

    var i;
    for (i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i];
      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments);
    }

    for (i = 0; i < arcs.length; i++) {
      var arc = arcs[i];
      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);
    }

    if (sbgn.map.extension && sbgn.map.extension.has('renderInformation')) { // render extension was found
      self.applyStyle(sbgn.map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);
    }

    var cytoscapeJsGraph = {};
    cytoscapeJsGraph.nodes = cytoscapeJsNodes;
    cytoscapeJsGraph.edges = cytoscapeJsEdges;

    this.insertedNodes = {};

    return cytoscapeJsGraph;
  }
};

module.exports = sbgnmlToJson;

},{"./element-utilities":53,"./graph-utilities":55,"libsbgn.js":65}],62:[function(_dereq_,module,exports){
/*
 * Text utilities for common usage
 */

var optionUtilities = _dereq_('./option-utilities');
var options = optionUtilities.getOptions();

var textUtilities = {
  //TODO: use CSS's "text-overflow:ellipsis" style instead of function below?
  truncateText: function (textProp, font) {
    var context = document.createElement('canvas').getContext("2d");
    context.font = font;
    
    var fitLabelsToNodes = options.fitLabelsToNodes;
    fitLabelsToNodes = typeof fitLabelsToNodes === 'function' ? fitLabelsToNodes.call() : fitLabelsToNodes;
    
    var text = textProp.label || "";
    //If fit labels to nodes is false do not truncate
    if (fitLabelsToNodes == false) {
      return text;
    }
    var width;
    var len = text.length;
    var ellipsis = "..";
    var textWidth = (textProp.width > 30) ? textProp.width - 10 : textProp.width;
    while ((width = context.measureText(text).width) > textWidth) {
      --len;
      text = text.substring(0, len) + ellipsis;
    }
    return text;
  },

  // ensure that returned string follows xsd:ID standard
  // should follow r'^[a-zA-Z_][\w.-]*$'
  getXMLValidId: function(originalId) {
    var newId = "";
    var xmlValidRegex = /^[a-zA-Z_][\w.-]*$/;
    if (! xmlValidRegex.test(originalId)) { // doesn't comply
      newId = originalId;
      newId = newId.replace(/[^\w.-]/g, "");
      if (! xmlValidRegex.test(newId)) { // still doesn't comply
        newId = "_" + newId;
        if (! xmlValidRegex.test(newId)) { // normally we should never enter this
          // if for some obscure reason we still don't comply, throw error.
          throw new Error("Can't make identifer comply to xsd:ID requirements: "+newId);
        }
      }
      return newId;
    }
    else {
      return originalId;
    }
  }

};

module.exports = textUtilities;
},{"./option-utilities":60}],63:[function(_dereq_,module,exports){
/*
 * Commonly needed UI Utilities
 */

var optionUtilities = _dereq_('./option-utilities');
var options = optionUtilities.getOptions();
var libs = _dereq_('./lib-utilities').getLibs();
var jQuery = $ = libs.jQuery;

var uiUtilities = {
  startSpinner: function (className) {
    if (!className) {
      className = 'default-class';
    }
    
    if ($('.' + className).length === 0) {
      var containerWidth = $(options.networkContainerSelector).width();
      var containerHeight = $(options.networkContainerSelector).height();
      $(options.networkContainerSelector + ':parent').prepend('<i style="position: absolute; z-index: 9999999; left: ' + containerWidth / 2 + 'px; top: ' + containerHeight / 2 + 'px;" class="fa fa-spinner fa-spin fa-3x fa-fw ' + className + '"></i>');
    }
  },
  endSpinner: function (className) {
    if (!className) {
      className = 'default-class';
    }
    
    if ($('.' + className).length > 0) {
      $('.' + className).remove();
    }
  }
};

module.exports = uiUtilities;



},{"./lib-utilities":58,"./option-utilities":60}],64:[function(_dereq_,module,exports){
/*
 * This file exports the functions to be utilized in undoredo extension actions 
 */
var elementUtilities = _dereq_('./element-utilities');

var undoRedoActionFunctions = {
  // Section Start
  // Add/remove action functions
  deleteElesSimple: function (param) {
    return elementUtilities.deleteElesSimple(param.eles);
  },
  restoreEles: function (eles) {
    var param = {};
    param.eles = elementUtilities.restoreEles(eles);
    return param;
  },
  deleteNodesSmart: function (param) {
    if (param.firstTime) {
      return elementUtilities.deleteNodesSmart(param.eles);
    }
    return elementUtilities.deleteElesSimple(param.eles);
  },
  // Section End
  // Add/remove action functions
};

module.exports = undoRedoActionFunctions;
},{"./element-utilities":53}],65:[function(_dereq_,module,exports){
var pkg = _dereq_('./src/libsbgn');

module.exports = pkg;

},{"./src/libsbgn":128}],66:[function(_dereq_,module,exports){
(function (process){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
/*jshint onevar: false, indent:4 */
/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    var _each = function (arr, iterator) {
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    }
    else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = function (fn) {
              // not a direct alias for IE10 compatibility
              setImmediate(fn);
            };
        }
        else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(done) );
        });
        function done(err) {
          if (err) {
              callback(err);
              callback = function () {};
          }
          else {
              completed += 1;
              if (completed >= arr.length) {
                  callback();
              }
          }
        }
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback();
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        if (!callback) {
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err) {
                    callback(err);
                });
            });
        } else {
            var results = [];
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err, v) {
                    results[x.index] = v;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        var remainingTasks = keys.length
        if (!remainingTasks) {
            return callback();
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            remainingTasks--
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (!remainingTasks) {
                var theCallback = callback;
                // prevent final callback from calling itself if it errors
                callback = function () {};

                theCallback(null, results);
            }
        });

        _each(keys, function (k) {
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var attempts = [];
        // Use defaults if times not passed
        if (typeof times === 'function') {
            callback = task;
            task = times;
            times = DEFAULT_TIMES;
        }
        // Make sure times is a number
        times = parseInt(times, 10) || DEFAULT_TIMES;
        var wrappedTask = function(wrappedCallback, wrappedResults) {
            var retryAttempt = function(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            };
            while (times) {
                attempts.push(retryAttempt(task, !(times-=1)));
            }
            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || callback)(data.err, data.result);
            });
        }
        // If a callback is passed, run this as a controll flow
        return callback ? wrappedTask() : wrappedTask
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!_isArray(tasks)) {
          var err = new Error('First argument to waterfall must be an array of functions');
          return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (test.apply(null, args)) {
                async.doWhilst(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (!test.apply(null, args)) {
                async.doUntil(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            started: false,
            paused: false,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            kill: function () {
              q.drain = null;
              q.tasks = [];
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (!q.paused && workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                if (q.paused === true) { return; }
                q.paused = true;
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= q.concurrency; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b){
          return a.priority - b.priority;
        };

        function _binarySearch(sequence, item, compare) {
          var beg = -1,
              end = sequence.length - 1;
          while (beg < end) {
            var mid = beg + ((end - beg + 1) >>> 1);
            if (compare(item, sequence[mid]) >= 0) {
              beg = mid;
            } else {
              end = mid - 1;
            }
          }
          return beg;
        }

        function _insert(q, data, priority, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  priority: priority,
                  callback: typeof callback === 'function' ? callback : null
              };

              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
          _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            drained: true,
            push: function (data, callback) {
                if (!_isArray(data)) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    cargo.drained = false;
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain && !cargo.drained) cargo.drain();
                    cargo.drained = true;
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0, tasks.length);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                async.nextTick(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    async.compose = function (/* functions... */) {
      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };

    var _applyEach = function (eachfn, fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // Node.js
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define !== 'undefined' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

}).call(this,_dereq_('_process'))

},{"_process":20}],67:[function(_dereq_,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.3.0
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$toString = {}.toString;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      var nextTick = process.nextTick;
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // setImmediate should be used instead instead
      var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
        nextTick = setImmediate;
      }
      return function() {
        nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertex() {
      try {
        var r = _dereq_;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof _dereq_ === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFullfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      var enumerator = this;

      enumerator._instanceConstructor = Constructor;
      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (enumerator._validateInput(input)) {
        enumerator._input     = input;
        enumerator.length     = input.length;
        enumerator._remaining = input.length;

        enumerator._init();

        if (enumerator.length === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        } else {
          enumerator.length = enumerator.length || 0;
          enumerator._enumerate();
          if (enumerator._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
      }
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return lib$es6$promise$utils$$isArray(input);
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var enumerator = this;

      var length  = enumerator.length;
      var promise = enumerator.promise;
      var input   = enumerator._input;

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        enumerator._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var enumerator = this;
      var c = enumerator._instanceConstructor;

      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
          entry._onerror = null;
          enumerator._settledAt(entry._state, i, entry._result);
        } else {
          enumerator._willSettleAt(c.resolve(entry), i);
        }
      } else {
        enumerator._remaining--;
        enumerator._result[i] = entry;
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var enumerator = this;
      var promise = enumerator.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        enumerator._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          enumerator._result[i] = value;
        }
      }

      if (enumerator._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!lib$es6$promise$utils$$isArray(entries)) {
        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

    var lib$es6$promise$promise$$counter = 0;

    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this._id = lib$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        if (!lib$es6$promise$utils$$isFunction(resolver)) {
          lib$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
          lib$es6$promise$promise$$needsNew();
        }

        lib$es6$promise$$internal$$initializePromise(this, resolver);
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor(lib$es6$promise$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          lib$es6$promise$asap$$asap(function(){
            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":20}],68:[function(_dereq_,module,exports){
// Ignore module for browserify (see package.json)
},{}],69:[function(_dereq_,module,exports){
(function (process,global,__dirname){
/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2015 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
(function() {

// determine if in-browser or using node.js
var _nodejs = (
  typeof process !== 'undefined' && process.versions && process.versions.node);
var _browser = !_nodejs &&
  (typeof window !== 'undefined' || typeof self !== 'undefined');
if(_browser) {
  if(typeof global === 'undefined') {
    if(typeof window !== 'undefined') {
      global = window;
    } else if(typeof self !== 'undefined') {
      global = self;
    } else if(typeof $ !== 'undefined') {
      global = $;
    }
  }
}

// attaches jsonld API to the given object
var wrapper = function(jsonld) {

/* Core API */

/**
 * Performs JSON-LD compaction.
 *
 * @param input the JSON-LD input to compact.
 * @param ctx the context to compact with.
 * @param [options] options to use:
 *          [base] the base IRI to use.
 *          [compactArrays] true to compact arrays to single values when
 *            appropriate, false not to (default: true).
 *          [graph] true to always output a top-level graph (default: false).
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, compacted, ctx) called once the operation completes.
 */
jsonld.compact = function(input, ctx, options, callback) {
  if(arguments.length < 2) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not compact, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  if(ctx === null) {
    return jsonld.nextTick(function() {
      callback(new JsonLdError(
        'The compaction context must not be null.',
        'jsonld.CompactError', {code: 'invalid local context'}));
    });
  }

  // nothing to compact
  if(input === null) {
    return jsonld.nextTick(function() {
      callback(null, null);
    });
  }

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('compactArrays' in options)) {
    options.compactArrays = true;
  }
  if(!('graph' in options)) {
    options.graph = false;
  }
  if(!('skipExpansion' in options)) {
    options.skipExpansion = false;
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }
  if(!('link' in options)) {
    options.link = false;
  }
  if(options.link) {
    // force skip expansion when linking, "link" is not part of the public
    // API, it should only be called from framing
    options.skipExpansion = true;
  }

  var expand = function(input, options, callback) {
    if(options.skipExpansion) {
      return jsonld.nextTick(function() {
        callback(null, input);
      });
    }
    jsonld.expand(input, options, callback);
  };

  // expand input then do compaction
  expand(input, options, function(err, expanded) {
    if(err) {
      return callback(new JsonLdError(
        'Could not expand input before compaction.',
        'jsonld.CompactError', {cause: err}));
    }

    // process context
    var activeCtx = _getInitialContext(options);
    jsonld.processContext(activeCtx, ctx, options, function(err, activeCtx) {
      if(err) {
        return callback(new JsonLdError(
          'Could not process context before compaction.',
          'jsonld.CompactError', {cause: err}));
      }

      var compacted;
      try {
        // do compaction
        compacted = new Processor().compact(activeCtx, null, expanded, options);
      } catch(ex) {
        return callback(ex);
      }

      cleanup(null, compacted, activeCtx, options);
    });
  });

  // performs clean up after compaction
  function cleanup(err, compacted, activeCtx, options) {
    if(err) {
      return callback(err);
    }

    if(options.compactArrays && !options.graph && _isArray(compacted)) {
      if(compacted.length === 1) {
        // simplify to a single item
        compacted = compacted[0];
      } else if(compacted.length === 0) {
        // simplify to an empty object
        compacted = {};
      }
    } else if(options.graph && _isObject(compacted)) {
      // always use array if graph option is on
      compacted = [compacted];
    }

    // follow @context key
    if(_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    }

    // build output context
    ctx = _clone(ctx);
    if(!_isArray(ctx)) {
      ctx = [ctx];
    }
    // remove empty contexts
    var tmp = ctx;
    ctx = [];
    for(var i = 0; i < tmp.length; ++i) {
      if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
        ctx.push(tmp[i]);
      }
    }

    // remove array if only one context
    var hasContext = (ctx.length > 0);
    if(ctx.length === 1) {
      ctx = ctx[0];
    }

    // add context and/or @graph
    if(_isArray(compacted)) {
      // use '@graph' keyword
      var kwgraph = _compactIri(activeCtx, '@graph');
      var graph = compacted;
      compacted = {};
      if(hasContext) {
        compacted['@context'] = ctx;
      }
      compacted[kwgraph] = graph;
    } else if(_isObject(compacted) && hasContext) {
      // reorder keys so @context is first
      var graph = compacted;
      compacted = {'@context': ctx};
      for(var key in graph) {
        compacted[key] = graph[key];
      }
    }

    callback(null, compacted, activeCtx);
  }
};

/**
 * Performs JSON-LD expansion.
 *
 * @param input the JSON-LD input to expand.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
 *            false not to, defaults to false.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, expanded) called once the operation completes.
 */
jsonld.expand = function(input, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not expand, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }
  if(!('keepFreeFloatingNodes' in options)) {
    options.keepFreeFloatingNodes = false;
  }

  jsonld.nextTick(function() {
    // if input is a string, attempt to dereference remote document
    if(typeof input === 'string') {
      var done = function(err, remoteDoc) {
        if(err) {
          return callback(err);
        }
        try {
          if(!remoteDoc.document) {
            throw new JsonLdError(
              'No remote document found at the given URL.',
              'jsonld.NullRemoteDocument');
          }
          if(typeof remoteDoc.document === 'string') {
            remoteDoc.document = JSON.parse(remoteDoc.document);
          }
        } catch(ex) {
          return callback(new JsonLdError(
            'Could not retrieve a JSON-LD document from the URL. URL ' +
            'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
              code: 'loading document failed',
              cause: ex,
              remoteDoc: remoteDoc
          }));
        }
        expand(remoteDoc);
      };
      var promise = options.documentLoader(input, done);
      if(promise && 'then' in promise) {
        promise.then(done.bind(null, null), done);
      }
      return;
    }
    // nothing to load
    expand({contextUrl: null, documentUrl: null, document: input});
  });

  function expand(remoteDoc) {
    // set default base
    if(!('base' in options)) {
      options.base = remoteDoc.documentUrl || '';
    }
    // build meta-object and retrieve all @context URLs
    var input = {
      document: _clone(remoteDoc.document),
      remoteContext: {'@context': remoteDoc.contextUrl}
    };
    if('expandContext' in options) {
      var expandContext = _clone(options.expandContext);
      if(typeof expandContext === 'object' && '@context' in expandContext) {
        input.expandContext = expandContext;
      } else {
        input.expandContext = {'@context': expandContext};
      }
    }
    _retrieveContextUrls(input, options, function(err, input) {
      if(err) {
        return callback(err);
      }

      var expanded;
      try {
        var processor = new Processor();
        var activeCtx = _getInitialContext(options);
        var document = input.document;
        var remoteContext = input.remoteContext['@context'];

        // process optional expandContext
        if(input.expandContext) {
          activeCtx = processor.processContext(
            activeCtx, input.expandContext['@context'], options);
        }

        // process remote context from HTTP Link Header
        if(remoteContext) {
          activeCtx = processor.processContext(
            activeCtx, remoteContext, options);
        }

        // expand document
        expanded = processor.expand(
          activeCtx, null, document, options, false);

        // optimize away @graph with no other properties
        if(_isObject(expanded) && ('@graph' in expanded) &&
          Object.keys(expanded).length === 1) {
          expanded = expanded['@graph'];
        } else if(expanded === null) {
          expanded = [];
        }

        // normalize to an array
        if(!_isArray(expanded)) {
          expanded = [expanded];
        }
      } catch(ex) {
        return callback(ex);
      }
      callback(null, expanded);
    });
  }
};

/**
 * Performs JSON-LD flattening.
 *
 * @param input the JSON-LD to flatten.
 * @param ctx the context to use to compact the flattened output, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, flattened) called once the operation completes.
 */
jsonld.flatten = function(input, ctx, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not flatten, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  } else if(typeof ctx === 'function') {
    callback = ctx;
    ctx = null;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  // expand input
  jsonld.expand(input, options, function(err, _input) {
    if(err) {
      return callback(new JsonLdError(
        'Could not expand input before flattening.',
        'jsonld.FlattenError', {cause: err}));
    }

    var flattened;
    try {
      // do flattening
      flattened = new Processor().flatten(_input);
    } catch(ex) {
      return callback(ex);
    }

    if(ctx === null) {
      return callback(null, flattened);
    }

    // compact result (force @graph option to true, skip expansion)
    options.graph = true;
    options.skipExpansion = true;
    jsonld.compact(flattened, ctx, options, function(err, compacted) {
      if(err) {
        return callback(new JsonLdError(
          'Could not compact flattened output.',
          'jsonld.FlattenError', {cause: err}));
      }
      callback(null, compacted);
    });
  });
};

/**
 * Performs JSON-LD framing.
 *
 * @param input the JSON-LD input to frame.
 * @param frame the JSON-LD frame to use.
 * @param [options] the framing options.
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
 *            (default: '@last').
 *          [explicit] default @explicit flag (default: false).
 *          [requireAll] default @requireAll flag (default: true).
 *          [omitDefault] default @omitDefault flag (default: false).
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, framed) called once the operation completes.
 */
jsonld.frame = function(input, frame, options, callback) {
  if(arguments.length < 2) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not frame, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }
  if(!('embed' in options)) {
    options.embed = '@last';
  }
  options.explicit = options.explicit || false;
  if(!('requireAll' in options)) {
    options.requireAll = true;
  }
  options.omitDefault = options.omitDefault || false;

  jsonld.nextTick(function() {
    // if frame is a string, attempt to dereference remote document
    if(typeof frame === 'string') {
      var done = function(err, remoteDoc) {
        if(err) {
          return callback(err);
        }
        try {
          if(!remoteDoc.document) {
            throw new JsonLdError(
              'No remote document found at the given URL.',
              'jsonld.NullRemoteDocument');
          }
          if(typeof remoteDoc.document === 'string') {
            remoteDoc.document = JSON.parse(remoteDoc.document);
          }
        } catch(ex) {
          return callback(new JsonLdError(
            'Could not retrieve a JSON-LD document from the URL. URL ' +
            'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
              code: 'loading document failed',
              cause: ex,
              remoteDoc: remoteDoc
          }));
        }
        doFrame(remoteDoc);
      };
      var promise = options.documentLoader(frame, done);
      if(promise && 'then' in promise) {
        promise.then(done.bind(null, null), done);
      }
      return;
    }
    // nothing to load
    doFrame({contextUrl: null, documentUrl: null, document: frame});
  });

  function doFrame(remoteFrame) {
    // preserve frame context and add any Link header context
    var frame = remoteFrame.document;
    var ctx;
    if(frame) {
      ctx = frame['@context'];
      if(remoteFrame.contextUrl) {
        if(!ctx) {
          ctx = remoteFrame.contextUrl;
        } else if(_isArray(ctx)) {
          ctx.push(remoteFrame.contextUrl);
        } else {
          ctx = [ctx, remoteFrame.contextUrl];
        }
        frame['@context'] = ctx;
      } else {
        ctx = ctx || {};
      }
    } else {
      ctx = {};
    }

    // expand input
    jsonld.expand(input, options, function(err, expanded) {
      if(err) {
        return callback(new JsonLdError(
          'Could not expand input before framing.',
          'jsonld.FrameError', {cause: err}));
      }

      // expand frame
      var opts = _clone(options);
      opts.isFrame = true;
      opts.keepFreeFloatingNodes = true;
      jsonld.expand(frame, opts, function(err, expandedFrame) {
        if(err) {
          return callback(new JsonLdError(
            'Could not expand frame before framing.',
            'jsonld.FrameError', {cause: err}));
        }

        var framed;
        try {
          // do framing
          framed = new Processor().frame(expanded, expandedFrame, opts);
        } catch(ex) {
          return callback(ex);
        }

        // compact result (force @graph option to true, skip expansion,
        // check for linked embeds)
        opts.graph = true;
        opts.skipExpansion = true;
        opts.link = {};
        jsonld.compact(framed, ctx, opts, function(err, compacted, ctx) {
          if(err) {
            return callback(new JsonLdError(
              'Could not compact framed output.',
              'jsonld.FrameError', {cause: err}));
          }
          // get graph alias
          var graph = _compactIri(ctx, '@graph');
          // remove @preserve from results
          opts.link = {};
          compacted[graph] = _removePreserve(ctx, compacted[graph], opts);
          callback(null, compacted);
        });
      });
    });
  }
};

/**
 * **Experimental**
 *
 * Links a JSON-LD document's nodes in memory.
 *
 * @param input the JSON-LD document to link.
 * @param ctx the JSON-LD context to apply.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, linked) called once the operation completes.
 */
jsonld.link = function(input, ctx, options, callback) {
  // API matches running frame with a wildcard frame and embed: '@link'
  // get arguments
  var frame = {};
  if(ctx) {
    frame['@context'] = ctx;
  }
  frame['@embed'] = '@link';
  jsonld.frame(input, frame, options, callback);
};

/**
 * **Deprecated**
 *
 * Performs JSON-LD objectification.
 *
 * @param input the JSON-LD document to objectify.
 * @param ctx the JSON-LD context to apply.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, linked) called once the operation completes.
 */
jsonld.objectify = function(input, ctx, options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  // expand input
  jsonld.expand(input, options, function(err, _input) {
    if(err) {
      return callback(new JsonLdError(
        'Could not expand input before linking.',
        'jsonld.LinkError', {cause: err}));
    }

    var flattened;
    try {
      // flatten the graph
      flattened = new Processor().flatten(_input);
    } catch(ex) {
      return callback(ex);
    }

    // compact result (force @graph option to true, skip expansion)
    options.graph = true;
    options.skipExpansion = true;
    jsonld.compact(flattened, ctx, options, function(err, compacted, ctx) {
      if(err) {
        return callback(new JsonLdError(
          'Could not compact flattened output before linking.',
          'jsonld.LinkError', {cause: err}));
      }
      // get graph alias
      var graph = _compactIri(ctx, '@graph');
      var top = compacted[graph][0];

      var recurse = function(subject) {
        // can't replace just a string
        if(!_isObject(subject) && !_isArray(subject)) {
          return;
        }

        // bottom out recursion on re-visit
        if(_isObject(subject)) {
          if(recurse.visited[subject['@id']]) {
            return;
          }
          recurse.visited[subject['@id']] = true;
        }

        // each array element *or* object key
        for(var k in subject) {
          var obj = subject[k];
          var isid = (jsonld.getContextValue(ctx, k, '@type') === '@id');

          // can't replace a non-object or non-array unless it's an @id
          if(!_isArray(obj) && !_isObject(obj) && !isid) {
            continue;
          }

          if(_isString(obj) && isid) {
            subject[k] = obj = top[obj];
            recurse(obj);
          } else if(_isArray(obj)) {
            for(var i = 0; i < obj.length; ++i) {
              if(_isString(obj[i]) && isid) {
                obj[i] = top[obj[i]];
              } else if(_isObject(obj[i]) && '@id' in obj[i]) {
                obj[i] = top[obj[i]['@id']];
              }
              recurse(obj[i]);
            }
          } else if(_isObject(obj)) {
            var sid = obj['@id'];
            subject[k] = obj = top[sid];
            recurse(obj);
          }
        }
      };
      recurse.visited = {};
      recurse(top);

      compacted.of_type = {};
      for(var s in top) {
        if(!('@type' in top[s])) {
          continue;
        }
        var types = top[s]['@type'];
        if(!_isArray(types)) {
          types = [types];
        }
        for(var t = 0; t < types.length; ++t) {
          if(!(types[t] in compacted.of_type)) {
            compacted.of_type[types[t]] = [];
          }
          compacted.of_type[types[t]].push(top[s]);
        }
      }
      callback(null, compacted);
    });
  });
};

/**
 * Performs RDF dataset normalization on the given input. The input is JSON-LD
 * unless the 'inputFormat' option is used. The output is an RDF dataset
 * unless the 'format' option is used.
 *
 * @param input the input to normalize as JSON-LD or as a format specified by
 *          the 'inputFormat' option.
 * @param [options] the options to use:
 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
 *            `URGNA2012` (default: `URGNA2012`).
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [inputFormat] the format if input is not JSON-LD:
 *            'application/nquads' for N-Quads.
 *          [format] the format if output is a string:
 *            'application/nquads' for N-Quads.
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, normalized) called once the operation completes.
 */
jsonld.normalize = function(input, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not normalize, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('algorithm' in options)) {
    options.algorithm = 'URGNA2012';
  }
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  if('inputFormat' in options) {
    if(options.inputFormat !== 'application/nquads') {
      return callback(new JsonLdError(
        'Unknown normalization input format.',
        'jsonld.NormalizeError'));
    }
    var parsedInput = _parseNQuads(input);
    // do normalization
    new Processor().normalize(parsedInput, options, callback);
  } else {
    // convert to RDF dataset then do normalization
    var opts = _clone(options);
    delete opts.format;
    opts.produceGeneralizedRdf = false;
    jsonld.toRDF(input, opts, function(err, dataset) {
      if(err) {
        return callback(new JsonLdError(
          'Could not convert input to RDF dataset before normalization.',
          'jsonld.NormalizeError', {cause: err}));
      }
      // do normalization
      new Processor().normalize(dataset, options, callback);
    });
  }
};

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset a serialized string of RDF in a format specified by the
 *          format option or an RDF dataset to convert.
 * @param [options] the options to use:
 *          [format] the format if dataset param must first be parsed:
 *            'application/nquads' for N-Quads (default).
 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
 *          [useRdfType] true to use rdf:type, false to use @type
 *            (default: false).
 *          [useNativeTypes] true to convert XSD types into native types
 *            (boolean, integer, double), false not to (default: false).
 * @param callback(err, output) called once the operation completes.
 */
jsonld.fromRDF = function(dataset, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not convert from RDF, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('useRdfType' in options)) {
    options.useRdfType = false;
  }
  if(!('useNativeTypes' in options)) {
    options.useNativeTypes = false;
  }

  if(!('format' in options) && _isString(dataset)) {
    // set default format to nquads
    if(!('format' in options)) {
      options.format = 'application/nquads';
    }
  }

  jsonld.nextTick(function() {
    // handle special format
    var rdfParser;
    if(options.format) {
      // check supported formats
      rdfParser = options.rdfParser || _rdfParsers[options.format];
      if(!rdfParser) {
        return callback(new JsonLdError(
          'Unknown input format.',
          'jsonld.UnknownFormat', {format: options.format}));
      }
    } else {
      // no-op parser, assume dataset already parsed
      rdfParser = function() {
        return dataset;
      };
    }

    var callbackCalled = false;
    try {
      // rdf parser may be async or sync, always pass callback
      dataset = rdfParser(dataset, function(err, dataset) {
        callbackCalled = true;
        if(err) {
          return callback(err);
        }
        fromRDF(dataset, options, callback);
      });
    } catch(e) {
      if(!callbackCalled) {
        return callback(e);
      }
      throw e;
    }
    // handle synchronous or promise-based parser
    if(dataset) {
      // if dataset is actually a promise
      if('then' in dataset) {
        return dataset.then(function(dataset) {
          fromRDF(dataset, options, callback);
        }, callback);
      }
      // parser is synchronous
      fromRDF(dataset, options, callback);
    }

    function fromRDF(dataset, options, callback) {
      // convert from RDF
      new Processor().fromRDF(dataset, options, callback);
    }
  });
};

/**
 * Outputs the RDF dataset found in the given JSON-LD object.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [format] the format to use to output a string:
 *            'application/nquads' for N-Quads.
 *          [produceGeneralizedRdf] true to output generalized RDF, false
 *            to produce only standard RDF (default: false).
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, dataset) called once the operation completes.
 */
jsonld.toRDF = function(input, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not convert to RDF, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  // expand input
  jsonld.expand(input, options, function(err, expanded) {
    if(err) {
      return callback(new JsonLdError(
        'Could not expand input before serialization to RDF.',
        'jsonld.RdfError', {cause: err}));
    }

    var dataset;
    try {
      // output RDF dataset
      dataset = Processor.prototype.toRDF(expanded, options);
      if(options.format) {
        if(options.format === 'application/nquads') {
          return callback(null, _toNQuads(dataset));
        }
        throw new JsonLdError(
          'Unknown output format.',
          'jsonld.UnknownFormat', {format: options.format});
      }
    } catch(ex) {
      return callback(ex);
    }
    callback(null, dataset);
  });
};

/**
 * **Experimental**
 *
 * Recursively flattens the nodes in the given JSON-LD input into a map of
 * node ID => node.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [namer] (deprecated)
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, nodeMap) called once the operation completes.
 */
jsonld.createNodeMap = function(input, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not create node map, too few arguments.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};

  // set default options
  if(!('base' in options)) {
    options.base = (typeof input === 'string') ? input : '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  // expand input
  jsonld.expand(input, options, function(err, _input) {
    if(err) {
      return callback(new JsonLdError(
        'Could not expand input before creating node map.',
        'jsonld.CreateNodeMapError', {cause: err}));
    }

    var nodeMap;
    try {
      nodeMap = new Processor().createNodeMap(_input, options);
    } catch(ex) {
      return callback(ex);
    }

    callback(null, nodeMap);
  });
};

/**
 * **Experimental**
 *
 * Merges two or more JSON-LD documents into a single flattened document.
 *
 * @param docs the JSON-LD documents to merge together.
 * @param ctx the context to use to compact the merged result, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [namer] (deprecated).
 *          [mergeNodes] true to merge properties for nodes with the same ID,
 *            false to ignore new properties for nodes with the same ID once
 *            the ID has been defined; note that this may not prevent merging
 *            new properties where a node is in the `object` position
 *            (default: true).
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, merged) called once the operation completes.
 */
jsonld.merge = function(docs, ctx, options, callback) {
  if(arguments.length < 1) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not merge, too few arguments.'));
    });
  }
  if(!_isArray(docs)) {
    return jsonld.nextTick(function() {
      callback(new TypeError('Could not merge, "docs" must be an array.'));
    });
  }

  // get arguments
  if(typeof options === 'function') {
    callback = options;
    options = {};
  } else if(typeof ctx === 'function') {
    callback = ctx;
    ctx = null;
    options = {};
  }
  options = options || {};

  // expand all documents
  var expanded = [];
  var error = null;
  var count = docs.length;
  for(var i = 0; i < docs.length; ++i) {
    var opts = {};
    for(var key in options) {
      opts[key] = options[key];
    }
    jsonld.expand(docs[i], opts, expandComplete);
  }

  function expandComplete(err, _input) {
    if(error) {
      return;
    }
    if(err) {
      error = err;
      return callback(new JsonLdError(
        'Could not expand input before flattening.',
        'jsonld.FlattenError', {cause: err}));
    }
    expanded.push(_input);
    if(--count === 0) {
      merge(expanded);
    }
  }

  function merge(expanded) {
    var mergeNodes = true;
    if('mergeNodes' in options) {
      mergeNodes = options.mergeNodes;
    }

    var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
    var graphs = {'@default': {}};

    var defaultGraph;
    try {
      for(var i = 0; i < expanded.length; ++i) {
        // uniquely relabel blank nodes
        var doc = expanded[i];
        doc = jsonld.relabelBlankNodes(doc, {
          issuer: new IdentifierIssuer('_:b' + i + '-')
        });

        // add nodes to the shared node map graphs if merging nodes, to a
        // separate graph set if not
        var _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};
        _createNodeMap(doc, _graphs, '@default', issuer);

        if(_graphs !== graphs) {
          // merge document graphs but don't merge existing nodes
          for(var graphName in _graphs) {
            var _nodeMap = _graphs[graphName];
            if(!(graphName in graphs)) {
              graphs[graphName] = _nodeMap;
              continue;
            }
            var nodeMap = graphs[graphName];
            for(var key in _nodeMap) {
              if(!(key in nodeMap)) {
                nodeMap[key] = _nodeMap[key];
              }
            }
          }
        }
      }

      // add all non-default graphs to default graph
      defaultGraph = _mergeNodeMaps(graphs);
    } catch(ex) {
      return callback(ex);
    }

    // produce flattened output
    var flattened = [];
    var keys = Object.keys(defaultGraph).sort();
    for(var ki = 0; ki < keys.length; ++ki) {
      var node = defaultGraph[keys[ki]];
      // only add full subjects to top-level
      if(!_isSubjectReference(node)) {
        flattened.push(node);
      }
    }

    if(ctx === null) {
      return callback(null, flattened);
    }

    // compact result (force @graph option to true, skip expansion)
    options.graph = true;
    options.skipExpansion = true;
    jsonld.compact(flattened, ctx, options, function(err, compacted) {
      if(err) {
        return callback(new JsonLdError(
          'Could not compact merged output.',
          'jsonld.MergeError', {cause: err}));
      }
      callback(null, compacted);
    });
  }
};

/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [namer] (deprecated).
 */
jsonld.relabelBlankNodes = function(input, options) {
  options = options || {};
  var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
  return _labelBlankNodes(issuer, input);
};

/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */
jsonld.prependBase = function(base, iri) {
  return _prependBase(base, iri);
};

/**
 * The default document loader for external documents. If the environment
 * is node.js, a callback-continuation-style document loader is used; otherwise,
 * a promises-style document loader is used.
 *
 * @param url the URL to load.
 * @param callback(err, remoteDoc) called once the operation completes,
 *          if using a non-promises API.
 *
 * @return a promise, if using a promises API.
 */
jsonld.documentLoader = function(url, callback) {
  var err = new JsonLdError(
    'Could not retrieve a JSON-LD document from the URL. URL ' +
    'dereferencing not implemented.', 'jsonld.LoadDocumentError',
    {code: 'loading document failed'});
  if(_nodejs) {
    return callback(err, {contextUrl: null, documentUrl: url, document: null});
  }
  return jsonld.promisify(function(callback) {
    callback(err);
  });
};

/**
 * Deprecated default document loader. Use or override jsonld.documentLoader
 * instead.
 */
jsonld.loadDocument = function(url, callback) {
  var promise = jsonld.documentLoader(url, callback);
  if(promise && 'then' in promise) {
    promise.then(callback.bind(null, null), callback);
  }
};

/* Promises API */

/**
 * Creates a new promises API object.
 *
 * @param [options] the options to use:
 *          [api] an object to attach the API to.
 *          [version] 'json-ld-1.0' to output a standard JSON-LD 1.0 promises
 *            API, 'jsonld.js' to output the same with augmented proprietary
 *            methods (default: 'jsonld.js')
 *
 * @return the promises API object.
 */
jsonld.promises = function(options) {
  options = options || {};
  var slice = Array.prototype.slice;
  var promisify = jsonld.promisify;

  // handle 'api' option as version, set defaults
  var api = options.api || {};
  var version = options.version || 'jsonld.js';
  if(typeof options.api === 'string') {
    if(!options.version) {
      version = options.api;
    }
    api = {};
  }

  // The Web IDL test harness will check the number of parameters defined in
  // the functions below. The number of parameters must exactly match the
  // required (non-optional) parameters of the JsonLdProcessor interface as
  // defined here:
  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

  api.expand = function(input) {
    if(arguments.length < 1) {
      throw new TypeError('Could not expand, too few arguments.');
    }
    return promisify.apply(null, [jsonld.expand].concat(slice.call(arguments)));
  };
  api.compact = function(input, ctx) {
    if(arguments.length < 2) {
      throw new TypeError('Could not compact, too few arguments.');
    }
    var compact = function(input, ctx, options, callback) {
      if(typeof options === 'function') {
        callback = options;
        options = {};
      }
      options = options || {};
      // ensure only one value is returned in callback
      jsonld.compact(input, ctx, options, function(err, compacted) {
        callback(err, compacted);
      });
    };
    return promisify.apply(null, [compact].concat(slice.call(arguments)));
  };
  api.flatten = function(input) {
    if(arguments.length < 1) {
      throw new TypeError('Could not flatten, too few arguments.');
    }
    return promisify.apply(
      null, [jsonld.flatten].concat(slice.call(arguments)));
  };
  api.frame = function(input, frame) {
    if(arguments.length < 2) {
      throw new TypeError('Could not frame, too few arguments.');
    }
    return promisify.apply(null, [jsonld.frame].concat(slice.call(arguments)));
  };
  api.fromRDF = function(dataset) {
    if(arguments.length < 1) {
      throw new TypeError('Could not convert from RDF, too few arguments.');
    }
    return promisify.apply(
      null, [jsonld.fromRDF].concat(slice.call(arguments)));
  };
  api.toRDF = function(input) {
    if(arguments.length < 1) {
      throw new TypeError('Could not convert to RDF, too few arguments.');
    }
    return promisify.apply(null, [jsonld.toRDF].concat(slice.call(arguments)));
  };
  api.normalize = function(input) {
    if(arguments.length < 1) {
      throw new TypeError('Could not normalize, too few arguments.');
    }
    return promisify.apply(
      null, [jsonld.normalize].concat(slice.call(arguments)));
  };

  if(version === 'jsonld.js') {
    api.link = function(input, ctx) {
      if(arguments.length < 2) {
        throw new TypeError('Could not link, too few arguments.');
      }
      return promisify.apply(
        null, [jsonld.link].concat(slice.call(arguments)));
    };
    api.objectify = function(input) {
      return promisify.apply(
        null, [jsonld.objectify].concat(slice.call(arguments)));
    };
    api.createNodeMap = function(input) {
      return promisify.apply(
        null, [jsonld.createNodeMap].concat(slice.call(arguments)));
    };
    api.merge = function(input) {
      return promisify.apply(
        null, [jsonld.merge].concat(slice.call(arguments)));
    };
  }

  try {
    jsonld.Promise = global.Promise || _dereq_('es6-promise').Promise;
  } catch(e) {
    var f = function() {
      throw new Error('Unable to find a Promise implementation.');
    };
    for(var method in api) {
      api[method] = f;
    }
  }

  return api;
};

/**
 * Converts a node.js async op into a promise w/boxed resolved value(s).
 *
 * @param op the operation to convert.
 *
 * @return the promise.
 */
jsonld.promisify = function(op) {
  if(!jsonld.Promise) {
    try {
      jsonld.Promise = global.Promise || _dereq_('es6-promise').Promise;
    } catch(e) {
      throw new Error('Unable to find a Promise implementation.');
    }
  }
  var args = Array.prototype.slice.call(arguments, 1);
  return new jsonld.Promise(function(resolve, reject) {
    op.apply(null, args.concat(function(err, value) {
      if(!err) {
        resolve(value);
      } else {
        reject(err);
      }
    }));
  });
};

// extend jsonld.promises w/jsonld.js methods
jsonld.promises({api: jsonld.promises});

/* WebIDL API */

function JsonLdProcessor() {}
JsonLdProcessor.prototype = jsonld.promises({version: 'json-ld-1.0'});
JsonLdProcessor.prototype.toString = function() {
  if(this instanceof JsonLdProcessor) {
    return '[object JsonLdProcessor]';
  }
  return '[object JsonLdProcessorPrototype]';
};
jsonld.JsonLdProcessor = JsonLdProcessor;

// IE8 has Object.defineProperty but it only
// works on DOM nodes -- so feature detection
// requires try/catch :-(
var canDefineProperty = !!Object.defineProperty;
if(canDefineProperty) {
  try {
    Object.defineProperty({}, 'x', {});
  } catch(e) {
    canDefineProperty = false;
  }
}

if(canDefineProperty) {
  Object.defineProperty(JsonLdProcessor, 'prototype', {
    writable: false,
    enumerable: false
  });
  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: JsonLdProcessor
  });
}

// setup browser global JsonLdProcessor
if(_browser && typeof global.JsonLdProcessor === 'undefined') {
  if(canDefineProperty) {
    Object.defineProperty(global, 'JsonLdProcessor', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: JsonLdProcessor
    });
  } else {
    global.JsonLdProcessor = JsonLdProcessor;
  }
}

/* Utility API */

// define setImmediate and nextTick
//// nextTick implementation with browser-compatible fallback ////
// from https://github.com/caolan/async/blob/master/lib/async.js

// capture the global reference to guard against fakeTimer mocks
var _setImmediate = typeof setImmediate === 'function' && setImmediate;

var _delay = _setImmediate ? function(fn) {
  // not a direct alias (for IE10 compatibility)
  _setImmediate(fn);
} : function(fn) {
  setTimeout(fn, 0);
};

if(typeof process === 'object' && typeof process.nextTick === 'function') {
  jsonld.nextTick = process.nextTick;
} else {
  jsonld.nextTick = _delay;
}
jsonld.setImmediate = _setImmediate ? _delay : jsonld.nextTick;

/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */
jsonld.parseLinkHeader = function(header) {
  var rval = {};
  // split on unbracketed/unquoted commas
  var entries = header.match(/(?:<[^>]*?>|"[^"]*?"|[^,])+/g);
  var rLinkHeader = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
  for(var i = 0; i < entries.length; ++i) {
    var match = entries[i].match(rLinkHeader);
    if(!match) {
      continue;
    }
    var result = {target: match[1]};
    var params = match[2];
    var rParams = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
    while(match = rParams.exec(params)) {
      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
    }
    var rel = result['rel'] || '';
    if(_isArray(rval[rel])) {
      rval[rel].push(result);
    } else if(rel in rval) {
      rval[rel] = [rval[rel], result];
    } else {
      rval[rel] = result;
    }
  }
  return rval;
};

/**
 * Creates a simple queue for requesting documents.
 */
jsonld.RequestQueue = function() {
  this._requests = {};
};
jsonld.RequestQueue.prototype.wrapLoader = function(loader) {
  this._loader = loader;
  this._usePromise = (loader.length === 1);
  return this.add.bind(this);
};
jsonld.RequestQueue.prototype.add = function(url, callback) {
  var self = this;

  // callback must be given if not using promises
  if(!callback && !self._usePromise) {
    throw new Error('callback must be specified.');
  }

  // Promise-based API
  if(self._usePromise) {
    return new jsonld.Promise(function(resolve, reject) {
      var load = self._requests[url];
      if(!load) {
        // load URL then remove from queue
        load = self._requests[url] = self._loader(url)
          .then(function(remoteDoc) {
            delete self._requests[url];
            return remoteDoc;
          }).catch(function(err) {
            delete self._requests[url];
            throw err;
          });
      }
      // resolve/reject promise once URL has been loaded
      load.then(function(remoteDoc) {
        resolve(remoteDoc);
      }).catch(function(err) {
        reject(err);
      });
    });
  }

  // callback-based API
  if(url in self._requests) {
    self._requests[url].push(callback);
  } else {
    self._requests[url] = [callback];
    self._loader(url, function(err, remoteDoc) {
      var callbacks = self._requests[url];
      delete self._requests[url];
      for(var i = 0; i < callbacks.length; ++i) {
        callbacks[i](err, remoteDoc);
      }
    });
  }
};

/**
 * Creates a simple document cache that retains documents for a short
 * period of time.
 *
 * FIXME: Implement simple HTTP caching instead.
 *
 * @param size the maximum size of the cache.
 */
jsonld.DocumentCache = function(size) {
  this.order = [];
  this.cache = {};
  this.size = size || 50;
  this.expires = 30 * 1000;
};
jsonld.DocumentCache.prototype.get = function(url) {
  if(url in this.cache) {
    var entry = this.cache[url];
    if(entry.expires >= +new Date()) {
      return entry.ctx;
    }
    delete this.cache[url];
    this.order.splice(this.order.indexOf(url), 1);
  }
  return null;
};
jsonld.DocumentCache.prototype.set = function(url, ctx) {
  if(this.order.length === this.size) {
    delete this.cache[this.order.shift()];
  }
  this.order.push(url);
  this.cache[url] = {ctx: ctx, expires: (+new Date() + this.expires)};
};

/**
 * Creates an active context cache.
 *
 * @param size the maximum size of the cache.
 */
jsonld.ActiveContextCache = function(size) {
  this.order = [];
  this.cache = {};
  this.size = size || 100;
};
jsonld.ActiveContextCache.prototype.get = function(activeCtx, localCtx) {
  var key1 = JSON.stringify(activeCtx);
  var key2 = JSON.stringify(localCtx);
  var level1 = this.cache[key1];
  if(level1 && key2 in level1) {
    return level1[key2];
  }
  return null;
};
jsonld.ActiveContextCache.prototype.set = function(
  activeCtx, localCtx, result) {
  if(this.order.length === this.size) {
    var entry = this.order.shift();
    delete this.cache[entry.activeCtx][entry.localCtx];
  }
  var key1 = JSON.stringify(activeCtx);
  var key2 = JSON.stringify(localCtx);
  this.order.push({activeCtx: key1, localCtx: key2});
  if(!(key1 in this.cache)) {
    this.cache[key1] = {};
  }
  this.cache[key1][key2] = _clone(result);
};

/**
 * Default JSON-LD cache.
 */
jsonld.cache = {
  activeCtx: new jsonld.ActiveContextCache()
};

/**
 * Document loaders.
 */
jsonld.documentLoaders = {};

/**
 * Creates a built-in jquery document loader.
 *
 * @param $ the jquery instance to use.
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          usePromise: true to use a promises API, false for a
 *            callback-continuation-style API; defaults to true if Promise
 *            is globally defined, false if not.
 *
 * @return the jquery document loader.
 */
jsonld.documentLoaders.jquery = function($, options) {
  options = options || {};
  var queue = new jsonld.RequestQueue();

  // use option or, by default, use Promise when its defined
  var usePromise = ('usePromise' in options ?
    options.usePromise : (typeof Promise !== 'undefined'));
  if(usePromise) {
    return queue.wrapLoader(function(url) {
      return jsonld.promisify(loader, url);
    });
  }
  return queue.wrapLoader(loader);

  function loader(url, callback) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    if(options.secure && url.indexOf('https') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    $.ajax({
      url: url,
      accepts: {
        json: 'application/ld+json, application/json'
      },
      // ensure Accept header is very specific for JSON-LD/JSON
      headers: {
        'Accept': 'application/ld+json, application/json'
      },
      dataType: 'json',
      crossDomain: true,
      success: function(data, textStatus, jqXHR) {
        var doc = {contextUrl: null, documentUrl: url, document: data};

        // handle Link Header
        var contentType = jqXHR.getResponseHeader('Content-Type');
        var linkHeader = jqXHR.getResponseHeader('Link');
        if(linkHeader && contentType !== 'application/ld+json') {
          // only 1 related link header permitted
          linkHeader = jsonld.parseLinkHeader(linkHeader)[LINK_HEADER_REL];
          if(_isArray(linkHeader)) {
            return callback(new JsonLdError(
              'URL could not be dereferenced, it has more than one ' +
              'associated HTTP Link Header.',
              'jsonld.InvalidUrl',
              {code: 'multiple context link headers', url: url}), doc);
          }
          if(linkHeader) {
            doc.contextUrl = linkHeader.target;
          }
        }

        callback(null, doc);
      },
      error: function(jqXHR, textStatus, err) {
        callback(new JsonLdError(
          'URL could not be dereferenced, an error occurred.',
          'jsonld.LoadDocumentError',
          {code: 'loading document failed', url: url, cause: err}),
          {contextUrl: null, documentUrl: url, document: null});
      }
    });
  }
};

/**
 * Creates a built-in node document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          strictSSL: true to require SSL certificates to be valid,
 *            false not to (default: true).
 *          maxRedirects: the maximum number of redirects to permit, none by
 *            default.
 *          request: the object which will make the request, default is
 *            provided by `https://www.npmjs.com/package/request`.
 *          headers: an array of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          usePromise: true to use a promises API, false for a
 *            callback-continuation-style API; false by default.
 *
 * @return the node document loader.
 */
jsonld.documentLoaders.node = function(options) {
  options = options || {};
  var strictSSL = ('strictSSL' in options) ? options.strictSSL : true;
  var maxRedirects = ('maxRedirects' in options) ? options.maxRedirects : -1;
  var request = ('request' in options) ? options.request : _dereq_('request');
  var acceptHeader = 'application/ld+json, application/json';
  var http = _dereq_('http');
  // TODO: disable cache until HTTP caching implemented
  //var cache = new jsonld.DocumentCache();

  var queue = new jsonld.RequestQueue();
  if(options.usePromise) {
    return queue.wrapLoader(function(url) {
      return jsonld.promisify(loadDocument, url, []);
    });
  }
  var headers = options.headers || {};
  if('Accept' in headers || 'accept' in headers) {
    throw new RangeError(
      'Accept header may not be specified as an option; only "' +
      acceptHeader + '" is supported.');
  }
  return queue.wrapLoader(function(url, callback) {
    loadDocument(url, [], callback);
  });

  function loadDocument(url, redirects, callback) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    if(options.secure && url.indexOf('https') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    // TODO: disable cache until HTTP caching implemented
    var doc = null;//cache.get(url);
    if(doc !== null) {
      return callback(null, doc);
    }
    var headers = {'Accept': acceptHeader};
    for(var k in options.headers) { headers[k] = options.headers[k]; }
    request({
      url: url,
      headers: headers,
      strictSSL: strictSSL,
      followRedirect: false
    }, handleResponse);

    function handleResponse(err, res, body) {
      doc = {contextUrl: null, documentUrl: url, document: body || null};

      // handle error
      if(err) {
        return callback(new JsonLdError(
          'URL could not be dereferenced, an error occurred.',
          'jsonld.LoadDocumentError',
          {code: 'loading document failed', url: url, cause: err}), doc);
      }
      var statusText = http.STATUS_CODES[res.statusCode];
      if(res.statusCode >= 400) {
        return callback(new JsonLdError(
          'URL could not be dereferenced: ' + statusText,
          'jsonld.InvalidUrl', {
            code: 'loading document failed',
            url: url,
            httpStatusCode: res.statusCode
          }), doc);
      }

      // handle Link Header
      if(res.headers.link &&
        res.headers['content-type'] !== 'application/ld+json') {
        // only 1 related link header permitted
        var linkHeader = jsonld.parseLinkHeader(
          res.headers.link)[LINK_HEADER_REL];
        if(_isArray(linkHeader)) {
          return callback(new JsonLdError(
            'URL could not be dereferenced, it has more than one associated ' +
            'HTTP Link Header.',
            'jsonld.InvalidUrl',
            {code: 'multiple context link headers', url: url}), doc);
        }
        if(linkHeader) {
          doc.contextUrl = linkHeader.target;
        }
      }

      // handle redirect
      if(res.statusCode >= 300 && res.statusCode < 400 &&
        res.headers.location) {
        if(redirects.length === maxRedirects) {
          return callback(new JsonLdError(
            'URL could not be dereferenced; there were too many redirects.',
            'jsonld.TooManyRedirects', {
              code: 'loading document failed',
              url: url,
              httpStatusCode: res.statusCode,
              redirects: redirects
            }), doc);
        }
        if(redirects.indexOf(url) !== -1) {
          return callback(new JsonLdError(
            'URL could not be dereferenced; infinite redirection was detected.',
            'jsonld.InfiniteRedirectDetected', {
              code: 'recursive context inclusion',
              url: url,
              httpStatusCode: res.statusCode,
              redirects: redirects
            }), doc);
        }
        redirects.push(url);
        return loadDocument(res.headers.location, redirects, callback);
      }
      // cache for each redirected URL
      redirects.push(url);
      // TODO: disable cache until HTTP caching implemented
      /*for(var i = 0; i < redirects.length; ++i) {
        cache.set(
          redirects[i],
          {contextUrl: null, documentUrl: redirects[i], document: body});
      }*/
      callback(err, doc);
    }
  }
};

/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          usePromise: true to use a promises API, false for a
 *            callback-continuation-style API; defaults to true if Promise
 *            is globally defined, false if not.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */
jsonld.documentLoaders.xhr = function(options) {
  options = options || {};
  var rlink = /(^|(\r\n))link:/i;
  var queue = new jsonld.RequestQueue();

  // use option or, by default, use Promise when its defined
  var usePromise = ('usePromise' in options ?
    options.usePromise : (typeof Promise !== 'undefined'));
  if(usePromise) {
    return queue.wrapLoader(function(url) {
      return jsonld.promisify(loader, url);
    });
  }
  return queue.wrapLoader(loader);

  function loader(url, callback) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    if(options.secure && url.indexOf('https') !== 0) {
      return callback(new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    }
    var xhr = options.xhr || XMLHttpRequest;
    var req = new xhr();
    req.onload = function() {
      if(req.status >= 400) {
        return callback(new JsonLdError(
          'URL could not be dereferenced: ' + req.statusText,
          'jsonld.LoadDocumentError', {
            code: 'loading document failed',
            url: url,
            httpStatusCode: req.status
          }), {contextUrl: null, documentUrl: url, document: null});
      }

      var doc = {contextUrl: null, documentUrl: url, document: req.response};

      // handle Link Header (avoid unsafe header warning by existence testing)
      var contentType = req.getResponseHeader('Content-Type');
      var linkHeader;
      if(rlink.test(req.getAllResponseHeaders())) {
        linkHeader = req.getResponseHeader('Link');
      }
      if(linkHeader && contentType !== 'application/ld+json') {
        // only 1 related link header permitted
        linkHeader = jsonld.parseLinkHeader(linkHeader)[LINK_HEADER_REL];
        if(_isArray(linkHeader)) {
          return callback(new JsonLdError(
            'URL could not be dereferenced, it has more than one ' +
            'associated HTTP Link Header.',
            'jsonld.InvalidUrl',
            {code: 'multiple context link headers', url: url}), doc);
        }
        if(linkHeader) {
          doc.contextUrl = linkHeader.target;
        }
      }

      callback(null, doc);
    };
    req.onerror = function() {
      callback(new JsonLdError(
        'URL could not be dereferenced, an error occurred.',
        'jsonld.LoadDocumentError',
        {code: 'loading document failed', url: url}),
        {contextUrl: null, documentUrl: url, document: null});
    };
    req.open('GET', url, true);
    req.setRequestHeader('Accept', 'application/ld+json, application/json');
    req.send();
  }
};

/**
 * Assigns the default document loader for external document URLs to a built-in
 * default. Supported types currently include: 'jquery' and 'node'.
 *
 * To use the jquery document loader, the first parameter must be a reference
 * to the main jquery object.
 *
 * @param type the type to set.
 * @param [params] the parameters required to use the document loader.
 */
jsonld.useDocumentLoader = function(type) {
  if(!(type in jsonld.documentLoaders)) {
    throw new JsonLdError(
      'Unknown document loader type: "' + type + '"',
      'jsonld.UnknownDocumentLoader',
      {type: type});
  }

  // set document loader
  jsonld.documentLoader = jsonld.documentLoaders[type].apply(
    jsonld, Array.prototype.slice.call(arguments, 1));
};

/**
 * Processes a local context, resolving any URLs as necessary, and returns a
 * new active context in its callback.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param [options] the options to use:
 *          [documentLoader(url, callback(err, remoteDoc))] the document loader.
 * @param callback(err, ctx) called once the operation completes.
 */
jsonld.processContext = function(activeCtx, localCtx) {
  // get arguments
  var options = {};
  var callbackArg = 2;
  if(arguments.length > 3) {
    options = arguments[2] || {};
    callbackArg += 1;
  }
  var callback = arguments[callbackArg];

  // set default options
  if(!('base' in options)) {
    options.base = '';
  }
  if(!('documentLoader' in options)) {
    options.documentLoader = jsonld.loadDocument;
  }

  // return initial context early for null context
  if(localCtx === null) {
    return callback(null, _getInitialContext(options));
  }

  // retrieve URLs in localCtx
  localCtx = _clone(localCtx);
  if(!(_isObject(localCtx) && '@context' in localCtx)) {
    localCtx = {'@context': localCtx};
  }
  _retrieveContextUrls(localCtx, options, function(err, ctx) {
    if(err) {
      return callback(err);
    }
    try {
      // process context
      ctx = new Processor().processContext(activeCtx, ctx, options);
    } catch(ex) {
      return callback(ex);
    }
    callback(null, ctx);
  });
};

/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */
jsonld.hasProperty = function(subject, property) {
  var rval = false;
  if(property in subject) {
    var value = subject[property];
    rval = (!_isArray(value) || value.length > 0);
  }
  return rval;
};

/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */
jsonld.hasValue = function(subject, property, value) {
  var rval = false;
  if(jsonld.hasProperty(subject, property)) {
    var val = subject[property];
    var isList = _isList(val);
    if(_isArray(val) || isList) {
      if(isList) {
        val = val['@list'];
      }
      for(var i = 0; i < val.length; ++i) {
        if(jsonld.compareValues(value, val[i])) {
          rval = true;
          break;
        }
      }
    } else if(!_isArray(value)) {
      // avoid matching the set of values with an array value parameter
      rval = jsonld.compareValues(value, val);
    }
  }
  return rval;
};

/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 */
jsonld.addValue = function(subject, property, value, options) {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }
  if(!('allowDuplicate' in options)) {
    options.allowDuplicate = true;
  }

  if(_isArray(value)) {
    if(value.length === 0 && options.propertyIsArray &&
      !(property in subject)) {
      subject[property] = [];
    }
    for(var i = 0; i < value.length; ++i) {
      jsonld.addValue(subject, property, value[i], options);
    }
  } else if(property in subject) {
    // check if subject already has value if duplicates not allowed
    var hasValue = (!options.allowDuplicate &&
      jsonld.hasValue(subject, property, value));

    // make property an array if value not present or always an array
    if(!_isArray(subject[property]) &&
      (!hasValue || options.propertyIsArray)) {
      subject[property] = [subject[property]];
    }

    // add new value
    if(!hasValue) {
      subject[property].push(value);
    }
  } else {
    // add new value as set or single value
    subject[property] = options.propertyIsArray ? [value] : value;
  }
};

/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */
jsonld.getValues = function(subject, property) {
  var rval = subject[property] || [];
  if(!_isArray(rval)) {
    rval = [rval];
  }
  return rval;
};

/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */
jsonld.removeProperty = function(subject, property) {
  delete subject[property];
};

/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */
jsonld.removeValue = function(subject, property, value, options) {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }

  // filter out value
  var values = jsonld.getValues(subject, property).filter(function(e) {
    return !jsonld.compareValues(e, value);
  });

  if(values.length === 0) {
    jsonld.removeProperty(subject, property);
  } else if(values.length === 1 && !options.propertyIsArray) {
    subject[property] = values[0];
  } else {
    subject[property] = values;
  }
};

/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */
jsonld.compareValues = function(v1, v2) {
  // 1. equal primitives
  if(v1 === v2) {
    return true;
  }

  // 2. equal @values
  if(_isValue(v1) && _isValue(v2) &&
    v1['@value'] === v2['@value'] &&
    v1['@type'] === v2['@type'] &&
    v1['@language'] === v2['@language'] &&
    v1['@index'] === v2['@index']) {
    return true;
  }

  // 3. equal @ids
  if(_isObject(v1) && ('@id' in v1) && _isObject(v2) && ('@id' in v2)) {
    return v1['@id'] === v2['@id'];
  }

  return false;
};

/**
 * Gets the value for the given active context key and type, null if none is
 * set.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value.
 */
jsonld.getContextValue = function(ctx, key, type) {
  var rval = null;

  // return null for invalid key
  if(key === null) {
    return rval;
  }

  // get default language
  if(type === '@language' && (type in ctx)) {
    rval = ctx[type];
  }

  // get specific entry information
  if(ctx.mappings[key]) {
    var entry = ctx.mappings[key];

    if(_isUndefined(type)) {
      // return whole entry
      rval = entry;
    } else if(type in entry) {
      // return entry value for type
      rval = entry[type];
    }
  }

  return rval;
};

/** Registered RDF dataset parsers hashed by content-type. */
var _rdfParsers = {};

/**
 * Registers an RDF dataset parser by content-type, for use with
 * jsonld.fromRDF. An RDF dataset parser will always be given two parameters,
 * a string of input and a callback. An RDF dataset parser can be synchronous
 * or asynchronous.
 *
 * If the parser function returns undefined or null then it will be assumed to
 * be asynchronous w/a continuation-passing style and the callback parameter
 * given to the parser MUST be invoked.
 *
 * If it returns a Promise, then it will be assumed to be asynchronous, but the
 * callback parameter MUST NOT be invoked. It should instead be ignored.
 *
 * If it returns an RDF dataset, it will be assumed to be synchronous and the
 * callback parameter MUST NOT be invoked. It should instead be ignored.
 *
 * @param contentType the content-type for the parser.
 * @param parser(input, callback(err, dataset)) the parser function (takes a
 *          string as a parameter and either returns null/undefined and uses
 *          the given callback, returns a Promise, or returns an RDF dataset).
 */
jsonld.registerRDFParser = function(contentType, parser) {
  _rdfParsers[contentType] = parser;
};

/**
 * Unregisters an RDF dataset parser by content-type.
 *
 * @param contentType the content-type for the parser.
 */
jsonld.unregisterRDFParser = function(contentType) {
  delete _rdfParsers[contentType];
};

if(_nodejs) {
  // needed for serialization of XML literals
  if(typeof XMLSerializer === 'undefined') {
    var XMLSerializer = null;
  }
  if(typeof Node === 'undefined') {
    var Node = {
      ELEMENT_NODE: 1,
      ATTRIBUTE_NODE: 2,
      TEXT_NODE: 3,
      CDATA_SECTION_NODE: 4,
      ENTITY_REFERENCE_NODE: 5,
      ENTITY_NODE: 6,
      PROCESSING_INSTRUCTION_NODE: 7,
      COMMENT_NODE: 8,
      DOCUMENT_NODE: 9,
      DOCUMENT_TYPE_NODE: 10,
      DOCUMENT_FRAGMENT_NODE: 11,
      NOTATION_NODE:12
    };
  }
}

// constants
var XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean';
var XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double';
var XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer';
var XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';

var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
var RDF_LIST = RDF + 'List';
var RDF_FIRST = RDF + 'first';
var RDF_REST = RDF + 'rest';
var RDF_NIL = RDF + 'nil';
var RDF_TYPE = RDF + 'type';
var RDF_PLAIN_LITERAL = RDF + 'PlainLiteral';
var RDF_XML_LITERAL = RDF + 'XMLLiteral';
var RDF_OBJECT = RDF + 'object';
var RDF_LANGSTRING = RDF + 'langString';

var LINK_HEADER_REL = 'http://www.w3.org/ns/json-ld#context';
var MAX_CONTEXT_URLS = 10;

/**
 * A JSON-LD Error.
 *
 * @param msg the error message.
 * @param type the error type.
 * @param details the error details.
 */
var JsonLdError = function(msg, type, details) {
  if(_nodejs) {
    Error.call(this);
    Error.captureStackTrace(this, this.constructor);
  } else if(typeof Error !== 'undefined') {
    this.stack = (new Error()).stack;
  }
  this.name = type || 'jsonld.Error';
  this.message = msg || 'An unspecified JSON-LD error occurred.';
  this.details = details || {};
};
if(_nodejs) {
  _dereq_('util').inherits(JsonLdError, Error);
} else if(typeof Error !== 'undefined') {
  JsonLdError.prototype = new Error();
}

/**
 * Constructs a new JSON-LD Processor.
 */
var Processor = function() {};

/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 *
 * @return the compacted value.
 */
Processor.prototype.compact = function(
  activeCtx, activeProperty, element, options) {
  // recursively compact array
  if(_isArray(element)) {
    var rval = [];
    for(var i = 0; i < element.length; ++i) {
      // compact, dropping any null values
      var compacted = this.compact(
        activeCtx, activeProperty, element[i], options);
      if(compacted !== null) {
        rval.push(compacted);
      }
    }
    if(options.compactArrays && rval.length === 1) {
      // use single element if no container is specified
      var container = jsonld.getContextValue(
        activeCtx, activeProperty, '@container');
      if(container === null) {
        rval = rval[0];
      }
    }
    return rval;
  }

  // recursively compact object
  if(_isObject(element)) {
    if(options.link && '@id' in element && element['@id'] in options.link) {
      // check for a linked element to reuse
      var linked = options.link[element['@id']];
      for(var i = 0; i < linked.length; ++i) {
        if(linked[i].expanded === element) {
          return linked[i].compacted;
        }
      }
    }

    // do value compaction on @values and subject references
    if(_isValue(element) || _isSubjectReference(element)) {
      var rval = _compactValue(activeCtx, activeProperty, element);
      if(options.link && _isSubjectReference(element)) {
        // store linked element
        if(!(element['@id'] in options.link)) {
          options.link[element['@id']] = [];
        }
        options.link[element['@id']].push({expanded: element, compacted: rval});
      }
      return rval;
    }

    // FIXME: avoid misuse of active property as an expanded property?
    var insideReverse = (activeProperty === '@reverse');

    var rval = {};

    if(options.link && '@id' in element) {
      // store linked element
      if(!(element['@id'] in options.link)) {
        options.link[element['@id']] = [];
      }
      options.link[element['@id']].push({expanded: element, compacted: rval});
    }

    // process element keys in order
    var keys = Object.keys(element).sort();
    for(var ki = 0; ki < keys.length; ++ki) {
      var expandedProperty = keys[ki];
      var expandedValue = element[expandedProperty];

      // compact @id and @type(s)
      if(expandedProperty === '@id' || expandedProperty === '@type') {
        var compactedValue;

        // compact single @id
        if(_isString(expandedValue)) {
          compactedValue = _compactIri(
            activeCtx, expandedValue, null,
            {vocab: (expandedProperty === '@type')});
        } else {
          // expanded value must be a @type array
          compactedValue = [];
          for(var vi = 0; vi < expandedValue.length; ++vi) {
            compactedValue.push(_compactIri(
              activeCtx, expandedValue[vi], null, {vocab: true}));
          }
        }

        // use keyword alias and add value
        var alias = _compactIri(activeCtx, expandedProperty);
        var isArray = (_isArray(compactedValue) && expandedValue.length === 0);
        jsonld.addValue(
          rval, alias, compactedValue, {propertyIsArray: isArray});
        continue;
      }

      // handle @reverse
      if(expandedProperty === '@reverse') {
        // recursively compact expanded value
        var compactedValue = this.compact(
          activeCtx, '@reverse', expandedValue, options);

        // handle double-reversed properties
        for(var compactedProperty in compactedValue) {
          if(activeCtx.mappings[compactedProperty] &&
            activeCtx.mappings[compactedProperty].reverse) {
            var value = compactedValue[compactedProperty];
            var container = jsonld.getContextValue(
              activeCtx, compactedProperty, '@container');
            var useArray = (container === '@set' || !options.compactArrays);
            jsonld.addValue(
              rval, compactedProperty, value, {propertyIsArray: useArray});
            delete compactedValue[compactedProperty];
          }
        }

        if(Object.keys(compactedValue).length > 0) {
          // use keyword alias and add value
          var alias = _compactIri(activeCtx, expandedProperty);
          jsonld.addValue(rval, alias, compactedValue);
        }

        continue;
      }

      // handle @index property
      if(expandedProperty === '@index') {
        // drop @index if inside an @index container
        var container = jsonld.getContextValue(
          activeCtx, activeProperty, '@container');
        if(container === '@index') {
          continue;
        }

        // use keyword alias and add value
        var alias = _compactIri(activeCtx, expandedProperty);
        jsonld.addValue(rval, alias, expandedValue);
        continue;
      }

      // skip array processing for keywords that aren't @graph or @list
      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&
        _isKeyword(expandedProperty)) {
        // use keyword alias and add value as is
        var alias = _compactIri(activeCtx, expandedProperty);
        jsonld.addValue(rval, alias, expandedValue);
        continue;
      }

      // Note: expanded value must be an array due to expansion algorithm.

      // preserve empty arrays
      if(expandedValue.length === 0) {
        var itemActiveProperty = _compactIri(
          activeCtx, expandedProperty, expandedValue, {vocab: true},
          insideReverse);
        jsonld.addValue(
          rval, itemActiveProperty, expandedValue, {propertyIsArray: true});
      }

      // recusively process array values
      for(var vi = 0; vi < expandedValue.length; ++vi) {
        var expandedItem = expandedValue[vi];

        // compact property and get container type
        var itemActiveProperty = _compactIri(
          activeCtx, expandedProperty, expandedItem, {vocab: true},
          insideReverse);
        var container = jsonld.getContextValue(
          activeCtx, itemActiveProperty, '@container');

        // get @list value if appropriate
        var isList = _isList(expandedItem);
        var list = null;
        if(isList) {
          list = expandedItem['@list'];
        }

        // recursively compact expanded item
        var compactedItem = this.compact(
          activeCtx, itemActiveProperty, isList ? list : expandedItem, options);

        // handle @list
        if(isList) {
          // ensure @list value is an array
          if(!_isArray(compactedItem)) {
            compactedItem = [compactedItem];
          }

          if(container !== '@list') {
            // wrap using @list alias
            var wrapper = {};
            wrapper[_compactIri(activeCtx, '@list')] = compactedItem;
            compactedItem = wrapper;

            // include @index from expanded @list, if any
            if('@index' in expandedItem) {
              compactedItem[_compactIri(activeCtx, '@index')] =
                expandedItem['@index'];
            }
          } else if(itemActiveProperty in rval) {
            // can't use @list container for more than 1 list
            throw new JsonLdError(
              'JSON-LD compact error; property has a "@list" @container ' +
              'rule but there is more than a single @list that matches ' +
              'the compacted term in the document. Compaction might mix ' +
              'unwanted items into the list.',
              'jsonld.SyntaxError', {code: 'compaction to list of lists'});
          }
        }

        // handle language and index maps
        if(container === '@language' || container === '@index') {
          // get or create the map object
          var mapObject;
          if(itemActiveProperty in rval) {
            mapObject = rval[itemActiveProperty];
          } else {
            rval[itemActiveProperty] = mapObject = {};
          }

          // if container is a language map, simplify compacted value to
          // a simple string
          if(container === '@language' && _isValue(compactedItem)) {
            compactedItem = compactedItem['@value'];
          }

          // add compact value to map object using key from expanded value
          // based on the container type
          jsonld.addValue(mapObject, expandedItem[container], compactedItem);
        } else {
          // use an array if: compactArrays flag is false,
          // @container is @set or @list , value is an empty
          // array, or key is @graph
          var isArray = (!options.compactArrays || container === '@set' ||
            container === '@list' ||
            (_isArray(compactedItem) && compactedItem.length === 0) ||
            expandedProperty === '@list' || expandedProperty === '@graph');

          // add compact value
          jsonld.addValue(
            rval, itemActiveProperty, compactedItem,
            {propertyIsArray: isArray});
        }
      }
    }

    return rval;
  }

  // only primitives remain which are already compact
  return element;
};

/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 *
 * @return the expanded value.
 */
Processor.prototype.expand = function(
  activeCtx, activeProperty, element, options, insideList) {
  var self = this;

  // nothing to expand
  if(element === null || element === undefined) {
    return null;
  }

  if(!_isArray(element) && !_isObject(element)) {
    // drop free-floating scalars that are not in lists
    if(!insideList && (activeProperty === null ||
      _expandIri(activeCtx, activeProperty, {vocab: true}) === '@graph')) {
      return null;
    }

    // expand element according to value expansion rules
    return _expandValue(activeCtx, activeProperty, element);
  }

  // recursively expand array
  if(_isArray(element)) {
    var rval = [];
    var container = jsonld.getContextValue(
      activeCtx, activeProperty, '@container');
    insideList = insideList || container === '@list';
    for(var i = 0; i < element.length; ++i) {
      // expand element
      var e = self.expand(activeCtx, activeProperty, element[i], options);
      if(insideList && (_isArray(e) || _isList(e))) {
        // lists of lists are illegal
        throw new JsonLdError(
          'Invalid JSON-LD syntax; lists of lists are not permitted.',
          'jsonld.SyntaxError', {code: 'list of lists'});
      }
      // drop null values
      if(e !== null) {
        if(_isArray(e)) {
          rval = rval.concat(e);
        } else {
          rval.push(e);
        }
      }
    }
    return rval;
  }

  // recursively expand object:

  // if element has a context, process it
  if('@context' in element) {
    activeCtx = self.processContext(activeCtx, element['@context'], options);
  }

  // expand the active property
  var expandedActiveProperty = _expandIri(
    activeCtx, activeProperty, {vocab: true});

  var rval = {};
  var keys = Object.keys(element).sort();
  for(var ki = 0; ki < keys.length; ++ki) {
    var key = keys[ki];
    var value = element[key];
    var expandedValue;

    // skip @context
    if(key === '@context') {
      continue;
    }

    // expand property
    var expandedProperty = _expandIri(activeCtx, key, {vocab: true});

    // drop non-absolute IRI keys that aren't keywords
    if(expandedProperty === null ||
      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
      continue;
    }

    if(_isKeyword(expandedProperty)) {
      if(expandedActiveProperty === '@reverse') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +
          'property.', 'jsonld.SyntaxError',
          {code: 'invalid reverse property map', value: value});
      }
      if(expandedProperty in rval) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; colliding keywords detected.',
          'jsonld.SyntaxError',
          {code: 'colliding keywords', keyword: expandedProperty});
      }
    }

    // syntax error if @id is not a string
    if(expandedProperty === '@id' && !_isString(value)) {
      if(!options.isFrame) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@id" value must a string.',
          'jsonld.SyntaxError', {code: 'invalid @id value', value: value});
      }
      if(!_isObject(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@id" value must be a string or an ' +
          'object.', 'jsonld.SyntaxError',
          {code: 'invalid @id value', value: value});
      }
    }

    if(expandedProperty === '@type') {
      _validateTypeValue(value);
    }

    // @graph must be an array or an object
    if(expandedProperty === '@graph' &&
      !(_isObject(value) || _isArray(value))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@graph" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError', {code: 'invalid @graph value', value: value});
    }

    // @value must not be an object or an array
    if(expandedProperty === '@value' &&
      (_isObject(value) || _isArray(value))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@value" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError',
        {code: 'invalid value object value', value: value});
    }

    // @language must be a string
    if(expandedProperty === '@language') {
      if(value === null) {
        // drop null @language values, they expand as if they didn't exist
        continue;
      }
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@language" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid language-tagged string', value: value});
      }
      // ensure language value is lowercase
      value = value.toLowerCase();
    }

    // @index must be a string
    if(expandedProperty === '@index') {
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@index" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid @index value', value: value});
      }
    }

    // @reverse must be an object
    if(expandedProperty === '@reverse') {
      if(!_isObject(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@reverse" value must be an object.',
          'jsonld.SyntaxError', {code: 'invalid @reverse value', value: value});
      }

      expandedValue = self.expand(activeCtx, '@reverse', value, options);

      // properties double-reversed
      if('@reverse' in expandedValue) {
        for(var property in expandedValue['@reverse']) {
          jsonld.addValue(
            rval, property, expandedValue['@reverse'][property],
            {propertyIsArray: true});
        }
      }

      // FIXME: can this be merged with code below to simplify?
      // merge in all reversed properties
      var reverseMap = rval['@reverse'] || null;
      for(var property in expandedValue) {
        if(property === '@reverse') {
          continue;
        }
        if(reverseMap === null) {
          reverseMap = rval['@reverse'] = {};
        }
        jsonld.addValue(reverseMap, property, [], {propertyIsArray: true});
        var items = expandedValue[property];
        for(var ii = 0; ii < items.length; ++ii) {
          var item = items[ii];
          if(_isValue(item) || _isList(item)) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
              '@value or an @list.', 'jsonld.SyntaxError',
              {code: 'invalid reverse property value', value: expandedValue});
          }
          jsonld.addValue(
            reverseMap, property, item, {propertyIsArray: true});
        }
      }

      continue;
    }

    var container = jsonld.getContextValue(activeCtx, key, '@container');

    if(container === '@language' && _isObject(value)) {
      // handle language map container (skip if value is not an object)
      expandedValue = _expandLanguageMap(value);
    } else if(container === '@index' && _isObject(value)) {
      // handle index container (skip if value is not an object)
      expandedValue = (function _expandIndexMap(activeProperty) {
        var rval = [];
        var keys = Object.keys(value).sort();
        for(var ki = 0; ki < keys.length; ++ki) {
          var key = keys[ki];
          var val = value[key];
          if(!_isArray(val)) {
            val = [val];
          }
          val = self.expand(activeCtx, activeProperty, val, options, false);
          for(var vi = 0; vi < val.length; ++vi) {
            var item = val[vi];
            if(!('@index' in item)) {
              item['@index'] = key;
            }
            rval.push(item);
          }
        }
        return rval;
      })(key);
    } else {
      // recurse into @list or @set
      var isList = (expandedProperty === '@list');
      if(isList || expandedProperty === '@set') {
        var nextActiveProperty = activeProperty;
        if(isList && expandedActiveProperty === '@graph') {
          nextActiveProperty = null;
        }
        expandedValue = self.expand(
          activeCtx, nextActiveProperty, value, options, isList);
        if(isList && _isList(expandedValue)) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; lists of lists are not permitted.',
            'jsonld.SyntaxError', {code: 'list of lists'});
        }
      } else {
        // recursively expand value with key as new active property
        expandedValue = self.expand(activeCtx, key, value, options, false);
      }
    }

    // drop null values if property is not @value
    if(expandedValue === null && expandedProperty !== '@value') {
      continue;
    }

    // convert expanded value to @list if container specifies it
    if(expandedProperty !== '@list' && !_isList(expandedValue) &&
      container === '@list') {
      // ensure expanded value is an array
      expandedValue = (_isArray(expandedValue) ?
        expandedValue : [expandedValue]);
      expandedValue = {'@list': expandedValue};
    }

    // FIXME: can this be merged with code above to simplify?
    // merge in reverse properties
    if(activeCtx.mappings[key] && activeCtx.mappings[key].reverse) {
      var reverseMap = rval['@reverse'] = rval['@reverse'] || {};
      if(!_isArray(expandedValue)) {
        expandedValue = [expandedValue];
      }
      for(var ii = 0; ii < expandedValue.length; ++ii) {
        var item = expandedValue[ii];
        if(_isValue(item) || _isList(item)) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
            '@value or an @list.', 'jsonld.SyntaxError',
            {code: 'invalid reverse property value', value: expandedValue});
        }
        jsonld.addValue(
          reverseMap, expandedProperty, item, {propertyIsArray: true});
      }
      continue;
    }

    // add value for property
    // use an array except for certain keywords
    var useArray =
      ['@index', '@id', '@type', '@value', '@language'].indexOf(
        expandedProperty) === -1;
    jsonld.addValue(
      rval, expandedProperty, expandedValue, {propertyIsArray: useArray});
  }

  // get property count on expanded output
  keys = Object.keys(rval);
  var count = keys.length;

  if('@value' in rval) {
    // @value must only have @language or @type
    if('@type' in rval && '@language' in rval) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may not ' +
        'contain both "@type" and "@language".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    var validCount = count - 1;
    if('@type' in rval) {
      validCount -= 1;
    }
    if('@index' in rval) {
      validCount -= 1;
    }
    if('@language' in rval) {
      validCount -= 1;
    }
    if(validCount !== 0) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may only ' +
        'have an "@index" property and at most one other property ' +
        'which can be "@type" or "@language".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    // drop null @values
    if(rval['@value'] === null) {
      rval = null;
    } else if('@language' in rval && !_isString(rval['@value'])) {
      // if @language is present, @value must be a string
      throw new JsonLdError(
        'Invalid JSON-LD syntax; only strings may be language-tagged.',
        'jsonld.SyntaxError',
        {code: 'invalid language-tagged value', element: rval});
    } else if('@type' in rval && (!_isAbsoluteIri(rval['@type']) ||
      rval['@type'].indexOf('_:') === 0)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" and "@type" ' +
        'must have an absolute IRI for the value of "@type".',
        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});
    }
  } else if('@type' in rval && !_isArray(rval['@type'])) {
    // convert @type to an array
    rval['@type'] = [rval['@type']];
  } else if('@set' in rval || '@list' in rval) {
    // handle @set and @list
    if(count > 1 && !(count === 2 && '@index' in rval)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; if an element has the property "@set" ' +
        'or "@list", then it can have at most one other property that is ' +
        '"@index".', 'jsonld.SyntaxError',
        {code: 'invalid set or list object', element: rval});
    }
    // optimize away @set
    if('@set' in rval) {
      rval = rval['@set'];
      keys = Object.keys(rval);
      count = keys.length;
    }
  } else if(count === 1 && '@language' in rval) {
    // drop objects with only @language
    rval = null;
  }

  // drop certain top-level objects that do not occur in lists
  if(_isObject(rval) &&
    !options.keepFreeFloatingNodes && !insideList &&
    (activeProperty === null || expandedActiveProperty === '@graph')) {
    // drop empty object, top-level @value/@list, or object with only @id
    if(count === 0 || '@value' in rval || '@list' in rval ||
      (count === 1 && '@id' in rval)) {
      rval = null;
    }
  }

  return rval;
};

/**
 * Creates a JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [namer] (deprecated).
 *
 * @return the node map.
 */
Processor.prototype.createNodeMap = function(input, options) {
  options = options || {};

  // produce a map of all subjects and name each bnode
  var issuer = options.namer || options.issuer || new IdentifierIssuer('_:b');
  var graphs = {'@default': {}};
  _createNodeMap(input, graphs, '@default', issuer);

  // add all non-default graphs to default graph
  return _mergeNodeMaps(graphs);
};

/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */
Processor.prototype.flatten = function(input) {
  var defaultGraph = this.createNodeMap(input);

  // produce flattened output
  var flattened = [];
  var keys = Object.keys(defaultGraph).sort();
  for(var ki = 0; ki < keys.length; ++ki) {
    var node = defaultGraph[keys[ki]];
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }
  return flattened;
};

/**
 * Performs JSON-LD framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */
Processor.prototype.frame = function(input, frame, options) {
  // create framing state
  var state = {
    options: options,
    graphs: {'@default': {}, '@merged': {}},
    subjectStack: [],
    link: {}
  };

  // produce a map of all graphs and name each bnode
  // FIXME: currently uses subjects from @merged graph only
  var issuer = new IdentifierIssuer('_:b');
  _createNodeMap(input, state.graphs, '@merged', issuer);
  state.subjects = state.graphs['@merged'];

  // frame the subjects
  var framed = [];
  _frame(state, Object.keys(state.subjects).sort(), frame, framed, null);
  return framed;
};

/**
 * Performs normalization on the given RDF dataset.
 *
 * @param dataset the RDF dataset to normalize.
 * @param options the normalization options.
 * @param callback(err, normalized) called once the operation completes.
 */
Processor.prototype.normalize = function(dataset, options, callback) {
  if(options.algorithm === 'URDNA2015') {
    return new URDNA2015(options).main(dataset, callback);
  }
  if(options.algorithm === 'URGNA2012') {
    return new URGNA2012(options).main(dataset, callback);
  }
  callback(new Error(
    'Invalid RDF Dataset Normalization algorithm: ' + options.algorithm));
};

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 * @param callback(err, output) called once the operation completes.
 */
Processor.prototype.fromRDF = function(dataset, options, callback) {
  var defaultGraph = {};
  var graphMap = {'@default': defaultGraph};
  var referencedOnce = {};

  for(var name in dataset) {
    var graph = dataset[name];
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }
    var nodeMap = graphMap[name];
    for(var ti = 0; ti < graph.length; ++ti) {
      var triple = graph[ti];

      // get subject, predicate, object
      var s = triple.subject.value;
      var p = triple.predicate.value;
      var o = triple.object;

      if(!(s in nodeMap)) {
        nodeMap[s] = {'@id': s};
      }
      var node = nodeMap[s];

      var objectIsId = (o.type === 'IRI' || o.type === 'blank node');
      if(objectIsId && !(o.value in nodeMap)) {
        nodeMap[o.value] = {'@id': o.value};
      }

      if(p === RDF_TYPE && !options.useRdfType && objectIsId) {
        jsonld.addValue(node, '@type', o.value, {propertyIsArray: true});
        continue;
      }

      var value = _RDFToObject(o, options.useNativeTypes);
      jsonld.addValue(node, p, value, {propertyIsArray: true});

      // object may be an RDF list/partial list node but we can't know easily
      // until all triples are read
      if(objectIsId) {
        if(o.value === RDF_NIL) {
          // track rdf:nil uniquely per graph
          var object = nodeMap[o.value];
          if(!('usages' in object)) {
            object.usages = [];
          }
          object.usages.push({
            node: node,
            property: p,
            value: value
          });
        } else if(o.value in referencedOnce) {
          // object referenced more than once
          referencedOnce[o.value] = false;
        } else {
          // keep track of single reference
          referencedOnce[o.value] = {
            node: node,
            property: p,
            value: value
          };
        }
      }
    }
  }

  // convert linked lists to @list arrays
  for(var name in graphMap) {
    var graphObject = graphMap[name];

    // no @lists to be converted, continue
    if(!(RDF_NIL in graphObject)) {
      continue;
    }

    // iterate backwards through each RDF list
    var nil = graphObject[RDF_NIL];
    for(var i = 0; i < nil.usages.length; ++i) {
      var usage = nil.usages[i];
      var node = usage.node;
      var property = usage.property;
      var head = usage.value;
      var list = [];
      var listNodes = [];

      // ensure node is a well-formed list node; it must:
      // 1. Be referenced only once.
      // 2. Have an array for rdf:first that has 1 item.
      // 3. Have an array for rdf:rest that has 1 item.
      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
      //   optionally, @type where the value is rdf:List.
      var nodeKeyCount = Object.keys(node).length;
      while(property === RDF_REST &&
        _isObject(referencedOnce[node['@id']]) &&
        _isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&
        _isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&
        (nodeKeyCount === 3 || (nodeKeyCount === 4 && _isArray(node['@type']) &&
          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
        list.push(node[RDF_FIRST][0]);
        listNodes.push(node['@id']);

        // get next node, moving backwards through list
        usage = referencedOnce[node['@id']];
        node = usage.node;
        property = usage.property;
        head = usage.value;
        nodeKeyCount = Object.keys(node).length;

        // if node is not a blank node, then list head found
        if(node['@id'].indexOf('_:') !== 0) {
          break;
        }
      }

      // the list is nested in another list
      if(property === RDF_FIRST) {
        // empty list
        if(node['@id'] === RDF_NIL) {
          // can't convert rdf:nil to a @list object because it would
          // result in a list of lists which isn't supported
          continue;
        }

        // preserve list head
        head = graphObject[head['@id']][RDF_REST][0];
        list.pop();
        listNodes.pop();
      }

      // transform list into @list object
      delete head['@id'];
      head['@list'] = list.reverse();
      for(var j = 0; j < listNodes.length; ++j) {
        delete graphObject[listNodes[j]];
      }
    }

    delete nil.usages;
  }

  var result = [];
  var subjects = Object.keys(defaultGraph).sort();
  for(var i = 0; i < subjects.length; ++i) {
    var subject = subjects[i];
    var node = defaultGraph[subject];
    if(subject in graphMap) {
      var graph = node['@graph'] = [];
      var graphObject = graphMap[subject];
      var subjects_ = Object.keys(graphObject).sort();
      for(var si = 0; si < subjects_.length; ++si) {
        var node_ = graphObject[subjects_[si]];
        // only add full subjects to top-level
        if(!_isSubjectReference(node_)) {
          graph.push(node_);
        }
      }
    }
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      result.push(node);
    }
  }

  callback(null, result);
};

/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */
Processor.prototype.toRDF = function(input, options) {
  // create node map for default graph (and any named graphs)
  var issuer = new IdentifierIssuer('_:b');
  var nodeMap = {'@default': {}};
  _createNodeMap(input, nodeMap, '@default', issuer);

  var dataset = {};
  var graphNames = Object.keys(nodeMap).sort();
  for(var i = 0; i < graphNames.length; ++i) {
    var graphName = graphNames[i];
    // skip relative IRIs
    if(graphName === '@default' || _isAbsoluteIri(graphName)) {
      dataset[graphName] = _graphToRDF(nodeMap[graphName], issuer, options);
    }
  }
  return dataset;
};

/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 *
 * @return the new active context.
 */
Processor.prototype.processContext = function(activeCtx, localCtx, options) {
  // normalize local context to an array of @context objects
  if(_isObject(localCtx) && '@context' in localCtx &&
    _isArray(localCtx['@context'])) {
    localCtx = localCtx['@context'];
  }
  var ctxs = _isArray(localCtx) ? localCtx : [localCtx];

  // no contexts in array, clone existing context
  if(ctxs.length === 0) {
    return activeCtx.clone();
  }

  // process each context in order, update active context
  // on each iteration to ensure proper caching
  var rval = activeCtx;
  for(var i = 0; i < ctxs.length; ++i) {
    var ctx = ctxs[i];

    // reset to initial context
    if(ctx === null) {
      rval = activeCtx = _getInitialContext(options);
      continue;
    }

    // dereference @context key if present
    if(_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    }

    // context must be an object by now, all URLs retrieved before this call
    if(!_isObject(ctx)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context must be an object.',
        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});
    }

    // get context from cache if available
    if(jsonld.cache.activeCtx) {
      var cached = jsonld.cache.activeCtx.get(activeCtx, ctx);
      if(cached) {
        rval = activeCtx = cached;
        continue;
      }
    }

    // update active context and clone new one before updating
    activeCtx = rval;
    rval = rval.clone();

    // define context mappings for keys in local context
    var defined = {};

    // handle @base
    if('@base' in ctx) {
      var base = ctx['@base'];

      // clear base
      if(base === null) {
        base = null;
      } else if(!_isString(base)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@base" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
      } else if(base !== '' && !_isAbsoluteIri(base)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@base" in a ' +
          '@context must be an absolute IRI or the empty string.',
          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
      }

      if(base !== null) {
        base = jsonld.url.parse(base || '');
      }
      rval['@base'] = base;
      defined['@base'] = true;
    }

    // handle @vocab
    if('@vocab' in ctx) {
      var value = ctx['@vocab'];
      if(value === null) {
        delete rval['@vocab'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else if(!_isAbsoluteIri(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be an absolute IRI.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else {
        rval['@vocab'] = value;
      }
      defined['@vocab'] = true;
    }

    // handle @language
    if('@language' in ctx) {
      var value = ctx['@language'];
      if(value === null) {
        delete rval['@language'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@language" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError',
          {code: 'invalid default language', context: ctx});
      } else {
        rval['@language'] = value.toLowerCase();
      }
      defined['@language'] = true;
    }

    // process all other keys
    for(var key in ctx) {
      _createTermDefinition(rval, ctx, key, defined);
    }

    // cache result
    if(jsonld.cache.activeCtx) {
      jsonld.cache.activeCtx.set(activeCtx, ctx, rval);
    }
  }

  return rval;
};

/**
 * Expands a language map.
 *
 * @param languageMap the language map to expand.
 *
 * @return the expanded language map.
 */
function _expandLanguageMap(languageMap) {
  var rval = [];
  var keys = Object.keys(languageMap).sort();
  for(var ki = 0; ki < keys.length; ++ki) {
    var key = keys[ki];
    var val = languageMap[key];
    if(!_isArray(val)) {
      val = [val];
    }
    for(var vi = 0; vi < val.length; ++vi) {
      var item = val[vi];
      if(item === null) {
          // null values are allowed (8.5) but ignored (3.1)
          continue;
      }
      if(!_isString(item)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; language map values must be strings.',
          'jsonld.SyntaxError',
          {code: 'invalid language map value', languageMap: languageMap});
      }
      rval.push({
        '@value': item,
        '@language': key.toLowerCase()
      });
    }
  }
  return rval;
}

/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */
function _labelBlankNodes(issuer, element) {
  if(_isArray(element)) {
    for(var i = 0; i < element.length; ++i) {
      element[i] = _labelBlankNodes(issuer, element[i]);
    }
  } else if(_isList(element)) {
    element['@list'] = _labelBlankNodes(issuer, element['@list']);
  } else if(_isObject(element)) {
    // relabel blank node
    if(_isBlankNode(element)) {
      element['@id'] = issuer.getId(element['@id']);
    }

    // recursively apply to all keys
    var keys = Object.keys(element).sort();
    for(var ki = 0; ki < keys.length; ++ki) {
      var key = keys[ki];
      if(key !== '@id') {
        element[key] = _labelBlankNodes(issuer, element[key]);
      }
    }
  }

  return element;
}

/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 *
 * @return the expanded value.
 */
function _expandValue(activeCtx, activeProperty, value) {
  // nothing to expand
  if(value === null || value === undefined) {
    return null;
  }

  // special-case expand @id and @type (skips '@id' expansion)
  var expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true});
  if(expandedProperty === '@id') {
    return _expandIri(activeCtx, value, {base: true});
  } else if(expandedProperty === '@type') {
    return _expandIri(activeCtx, value, {vocab: true, base: true});
  }

  // get type definition from context
  var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');

  // do @id expansion (automatic for @graph)
  if(type === '@id' || (expandedProperty === '@graph' && _isString(value))) {
    return {'@id': _expandIri(activeCtx, value, {base: true})};
  }
  // do @id expansion w/vocab
  if(type === '@vocab') {
    return {'@id': _expandIri(activeCtx, value, {vocab: true, base: true})};
  }

  // do not expand keyword values
  if(_isKeyword(expandedProperty)) {
    return value;
  }

  var rval = {};

  if(type !== null) {
    // other type
    rval['@type'] = type;
  } else if(_isString(value)) {
    // check for language tagging for strings
    var language = jsonld.getContextValue(
      activeCtx, activeProperty, '@language');
    if(language !== null) {
      rval['@language'] = language;
    }
  }
  // do conversion of values that aren't basic JSON types to strings
  if(['boolean', 'number', 'string'].indexOf(typeof value) === -1) {
    value = value.toString();
  }
  rval['@value'] = value;

  return rval;
}

/**
 * Creates an array of RDF triples for the given graph.
 *
 * @param graph the graph to create RDF triples for.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */
function _graphToRDF(graph, issuer, options) {
  var rval = [];

  var ids = Object.keys(graph).sort();
  for(var i = 0; i < ids.length; ++i) {
    var id = ids[i];
    var node = graph[id];
    var properties = Object.keys(node).sort();
    for(var pi = 0; pi < properties.length; ++pi) {
      var property = properties[pi];
      var items = node[property];
      if(property === '@type') {
        property = RDF_TYPE;
      } else if(_isKeyword(property)) {
        continue;
      }

      for(var ii = 0; ii < items.length; ++ii) {
        var item = items[ii];

        // RDF subject
        var subject = {};
        subject.type = (id.indexOf('_:') === 0) ? 'blank node' : 'IRI';
        subject.value = id;

        // skip relative IRI subjects
        if(!_isAbsoluteIri(id)) {
          continue;
        }

        // RDF predicate
        var predicate = {};
        predicate.type = (property.indexOf('_:') === 0) ? 'blank node' : 'IRI';
        predicate.value = property;

        // skip relative IRI predicates
        if(!_isAbsoluteIri(property)) {
          continue;
        }

        // skip blank node predicates unless producing generalized RDF
        if(predicate.type === 'blank node' && !options.produceGeneralizedRdf) {
          continue;
        }

        // convert @list to triples
        if(_isList(item)) {
          _listToRDF(item['@list'], issuer, subject, predicate, rval);
        } else {
          // convert value or node object to triple
          var object = _objectToRDF(item);
          // skip null objects (they are relative IRIs)
          if(object) {
            rval.push({subject: subject, predicate: predicate, object: object});
          }
        }
      }
    }
  }

  return rval;
}

/**
 * Converts a @list value into linked list of blank node RDF triples
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param subject the subject for the head of the list.
 * @param predicate the predicate for the head of the list.
 * @param triples the array of triples to append to.
 */
function _listToRDF(list, issuer, subject, predicate, triples) {
  var first = {type: 'IRI', value: RDF_FIRST};
  var rest = {type: 'IRI', value: RDF_REST};
  var nil = {type: 'IRI', value: RDF_NIL};

  for(var i = 0; i < list.length; ++i) {
    var item = list[i];

    var blankNode = {type: 'blank node', value: issuer.getId()};
    triples.push({subject: subject, predicate: predicate, object: blankNode});

    subject = blankNode;
    predicate = first;
    var object = _objectToRDF(item);

    // skip null objects (they are relative IRIs)
    if(object) {
      triples.push({subject: subject, predicate: predicate, object: object});
    }

    predicate = rest;
  }

  triples.push({subject: subject, predicate: predicate, object: nil});
}

/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string or
 * node object to an RDF resource.
 *
 * @param item the JSON-LD value or node object.
 *
 * @return the RDF literal or RDF resource.
 */
function _objectToRDF(item) {
  var object = {};

  // convert value object to RDF
  if(_isValue(item)) {
    object.type = 'literal';
    var value = item['@value'];
    var datatype = item['@type'] || null;

    // convert to XSD datatypes as appropriate
    if(_isBoolean(value)) {
      object.value = value.toString();
      object.datatype = datatype || XSD_BOOLEAN;
    } else if(_isDouble(value) || datatype === XSD_DOUBLE) {
      if(!_isDouble(value)) {
        value = parseFloat(value);
      }
      // canonical double representation
      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
      object.datatype = datatype || XSD_DOUBLE;
    } else if(_isNumber(value)) {
      object.value = value.toFixed(0);
      object.datatype = datatype || XSD_INTEGER;
    } else if('@language' in item) {
      object.value = value;
      object.datatype = datatype || RDF_LANGSTRING;
      object.language = item['@language'];
    } else {
      object.value = value;
      object.datatype = datatype || XSD_STRING;
    }
  } else {
    // convert string/node object to RDF
    var id = _isObject(item) ? item['@id'] : item;
    object.type = (id.indexOf('_:') === 0) ? 'blank node' : 'IRI';
    object.value = id;
  }

  // skip relative IRIs
  if(object.type === 'IRI' && !_isAbsoluteIri(object.value)) {
    return null;
  }

  return object;
}

/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */
function _RDFToObject(o, useNativeTypes) {
  // convert IRI/blank node object to JSON-LD
  if(o.type === 'IRI' || o.type === 'blank node') {
    return {'@id': o.value};
  }

  // convert literal to JSON-LD
  var rval = {'@value': o.value};

  // add language
  if(o.language) {
    rval['@language'] = o.language;
  } else {
    var type = o.datatype;
    if(!type) {
      type = XSD_STRING;
    }
    // use native types for certain xsd types
    if(useNativeTypes) {
      if(type === XSD_BOOLEAN) {
        if(rval['@value'] === 'true') {
          rval['@value'] = true;
        } else if(rval['@value'] === 'false') {
          rval['@value'] = false;
        }
      } else if(_isNumeric(rval['@value'])) {
        if(type === XSD_INTEGER) {
          var i = parseInt(rval['@value'], 10);
          if(i.toFixed(0) === rval['@value']) {
            rval['@value'] = i;
          }
        } else if(type === XSD_DOUBLE) {
          rval['@value'] = parseFloat(rval['@value']);
        }
      }
      // do not add native type
      if([XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING]
        .indexOf(type) === -1) {
        rval['@type'] = type;
      }
    } else if(type !== XSD_STRING) {
      rval['@type'] = type;
    }
  }

  return rval;
}

/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */
function _compareRDFTriples(t1, t2) {
  var attrs = ['subject', 'predicate', 'object'];
  for(var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];
    if(t1[attr].type !== t2[attr].type || t1[attr].value !== t2[attr].value) {
      return false;
    }
  }
  if(t1.object.language !== t2.object.language) {
    return false;
  }
  if(t1.object.datatype !== t2.object.datatype) {
    return false;
  }
  return true;
}

/////////////////////////////// DEFINE URDNA2015 //////////////////////////////

var URDNA2015 = (function() {

var POSITIONS = {'subject': 's', 'object': 'o', 'name': 'g'};

var Normalize = function(options) {
  options = options || {};
  this.name = 'URDNA2015';
  this.options = options;
  this.blankNodeInfo = {};
  this.hashToBlankNodes = {};
  this.canonicalIssuer = new IdentifierIssuer('_:c14n');
  this.quads = [];
  this.schedule = {};
  if('maxCallStackDepth' in options) {
    this.schedule.MAX_DEPTH = options.maxCallStackDepth;
  } else {
    this.schedule.MAX_DEPTH = 500;
  }
  if('maxTotalCallStackDepth' in options) {
    this.schedule.MAX_TOTAL_DEPTH = options.maxCallStackDepth;
  } else {
    this.schedule.MAX_TOTAL_DEPTH = 0xFFFFFFFF;
  }
  this.schedule.depth = 0;
  this.schedule.totalDepth = 0;
  if('timeSlice' in options) {
    this.schedule.timeSlice = options.timeSlice;
  } else {
    // milliseconds
    this.schedule.timeSlice = 10;
  }
};

// do some work in a time slice, but in serial
Normalize.prototype.doWork = function(fn, callback) {
  var schedule = this.schedule;

  if(schedule.totalDepth >= schedule.MAX_TOTAL_DEPTH) {
    return callback(new Error(
      'Maximum total call stack depth exceeded; normalization aborting.'));
  }

  (function work() {
    if(schedule.depth === schedule.MAX_DEPTH) {
      // stack too deep, run on next tick
      schedule.depth = 0;
      schedule.running = false;
      return jsonld.nextTick(work);
    }

    // if not yet running, force run
    var now = new Date().getTime();
    if(!schedule.running) {
      schedule.start = new Date().getTime();
      schedule.deadline = schedule.start + schedule.timeSlice;
    }

    // TODO: should also include an estimate of expectedWorkTime
    if(now < schedule.deadline) {
      schedule.running = true;
      schedule.depth++;
      schedule.totalDepth++;
      return fn(function(err, result) {
        schedule.depth--;
        schedule.totalDepth--;
        callback(err, result);
      });
    }

    // not enough time left in this slice, run after letting browser
    // do some other things
    schedule.depth = 0;
    schedule.running = false;
    jsonld.setImmediate(work);
  })();
};

// asynchronously loop
Normalize.prototype.forEach = function(iterable, fn, callback) {
  var self = this;
  var iterator;
  var idx = 0;
  var length;
  if(_isArray(iterable)) {
    length = iterable.length;
    iterator = function() {
      if(idx === length) {
        return false;
      }
      iterator.value = iterable[idx++];
      iterator.key = idx;
      return true;
    };
  } else {
    var keys = Object.keys(iterable);
    length = keys.length;
    iterator = function() {
      if(idx === length) {
        return false;
      }
      iterator.key = keys[idx++];
      iterator.value = iterable[iterator.key];
      return true;
    };
  }

  (function iterate(err, result) {
    if(err) {
      return callback(err);
    }
    if(iterator()) {
      return self.doWork(function() {
        fn(iterator.value, iterator.key, iterate);
      });
    }
    callback();
  })();
};

// asynchronous waterfall
Normalize.prototype.waterfall = function(fns, callback) {
  var self = this;
  self.forEach(fns, function(fn, idx, callback) {
    self.doWork(fn, callback);
  }, callback);
};

// asynchronous while
Normalize.prototype.whilst = function(condition, fn, callback) {
  var self = this;
  (function loop(err) {
    if(err) {
      return callback(err);
    }
    if(!condition()) {
      return callback();
    }
    self.doWork(fn, loop);
  })();
};

// 4.4) Normalization Algorithm
Normalize.prototype.main = function(dataset, callback) {
  var self = this;
  self.schedule.start = new Date().getTime();
  var result;

  // handle invalid output format
  if(self.options.format) {
    if(self.options.format !== 'application/nquads') {
      return callback(new JsonLdError(
        'Unknown output format.',
        'jsonld.UnknownFormat', {format: self.options.format}));
    }
  }

  // 1) Create the normalization state.

  // Note: Optimize by generating non-normalized blank node map concurrently.
  var nonNormalized = {};

  self.waterfall([
    function(callback) {
      // 2) For every quad in input dataset:
      self.forEach(dataset, function(triples, graphName, callback) {
        if(graphName === '@default') {
          graphName = null;
        }
        self.forEach(triples, function(quad, idx, callback) {
          if(graphName !== null) {
            if(graphName.indexOf('_:') === 0) {
              quad.name = {type: 'blank node', value: graphName};
            } else {
              quad.name = {type: 'IRI', value: graphName};
            }
          }
          self.quads.push(quad);

          // 2.1) For each blank node that occurs in the quad, add a reference
          // to the quad using the blank node identifier in the blank node to
          // quads map, creating a new entry if necessary.
          self.forEachComponent(quad, function(component) {
            if(component.type !== 'blank node') {
              return;
            }
            var id = component.value;
            if(id in self.blankNodeInfo) {
              self.blankNodeInfo[id].quads.push(quad);
            } else {
              nonNormalized[id] = true;
              self.blankNodeInfo[id] = {quads: [quad]};
            }
          });
          callback();
        }, callback);
      }, callback);
    },
    function(callback) {
      // 3) Create a list of non-normalized blank node identifiers
      // non-normalized identifiers and populate it using the keys from the
      // blank node to quads map.
      // Note: We use a map here and it was generated during step 2.

      // 4) Initialize simple, a boolean flag, to true.
      var simple = true;

      // 5) While simple is true, issue canonical identifiers for blank nodes:
      self.whilst(function() { return simple; }, function(callback) {
        // 5.1) Set simple to false.
        simple = false;

        // 5.2) Clear hash to blank nodes map.
        self.hashToBlankNodes = {};

        self.waterfall([
          function(callback) {
            // 5.3) For each blank node identifier identifier in non-normalized
            // identifiers:
            self.forEach(nonNormalized, function(value, id, callback) {
              // 5.3.1) Create a hash, hash, according to the Hash First Degree
              // Quads algorithm.
              self.hashFirstDegreeQuads(id, function(err, hash) {
                if(err) {
                  return callback(err);
                }
                // 5.3.2) Add hash and identifier to hash to blank nodes map,
                // creating a new entry if necessary.
                if(hash in self.hashToBlankNodes) {
                  self.hashToBlankNodes[hash].push(id);
                } else {
                  self.hashToBlankNodes[hash] = [id];
                }
                callback();
              });
            }, callback);
          },
          function(callback) {
            // 5.4) For each hash to identifier list mapping in hash to blank
            // nodes map, lexicographically-sorted by hash:
            var hashes = Object.keys(self.hashToBlankNodes).sort();
            self.forEach(hashes, function(hash, i, callback) {
              // 5.4.1) If the length of identifier list is greater than 1,
              // continue to the next mapping.
              var idList = self.hashToBlankNodes[hash];
              if(idList.length > 1) {
                return callback();
              }

              // 5.4.2) Use the Issue Identifier algorithm, passing canonical
              // issuer and the single blank node identifier in identifier
              // list, identifier, to issue a canonical replacement identifier
              // for identifier.
              // TODO: consider changing `getId` to `issue`
              var id = idList[0];
              self.canonicalIssuer.getId(id);

              // 5.4.3) Remove identifier from non-normalized identifiers.
              delete nonNormalized[id];

              // 5.4.4) Remove hash from the hash to blank nodes map.
              delete self.hashToBlankNodes[hash];

              // 5.4.5) Set simple to true.
              simple = true;
              callback();
            }, callback);
          }
        ], callback);
      }, callback);
    },
    function(callback) {
      // 6) For each hash to identifier list mapping in hash to blank nodes map,
      // lexicographically-sorted by hash:
      var hashes = Object.keys(self.hashToBlankNodes).sort();
      self.forEach(hashes, function(hash, idx, callback) {
        // 6.1) Create hash path list where each item will be a result of
        // running the Hash N-Degree Quads algorithm.
        var hashPathList = [];

        // 6.2) For each blank node identifier identifier in identifier list:
        var idList = self.hashToBlankNodes[hash];
        self.waterfall([
          function(callback) {
            self.forEach(idList, function(id, idx, callback) {
              // 6.2.1) If a canonical identifier has already been issued for
              // identifier, continue to the next identifier.
              if(self.canonicalIssuer.hasId(id)) {
                return callback();
              }

              // 6.2.2) Create temporary issuer, an identifier issuer
              // initialized with the prefix _:b.
              var issuer = new IdentifierIssuer('_:b');

              // 6.2.3) Use the Issue Identifier algorithm, passing temporary
              // issuer and identifier, to issue a new temporary blank node
              // identifier for identifier.
              issuer.getId(id);

              // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
              // temporary issuer, and append the result to the hash path list.
              self.hashNDegreeQuads(id, issuer, function(err, result) {
                if(err) {
                  return callback(err);
                }
                hashPathList.push(result);
                callback();
              });
            }, callback);
          },
          function(callback) {
            // 6.3) For each result in the hash path list,
            // lexicographically-sorted by the hash in result:
            hashPathList.sort(function(a, b) {
              return (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0);
            });
            self.forEach(hashPathList, function(result, idx, callback) {
              // 6.3.1) For each blank node identifier, existing identifier,
              // that was issued a temporary identifier by identifier issuer
              // in result, issue a canonical identifier, in the same order,
              // using the Issue Identifier algorithm, passing canonical
              // issuer and existing identifier.
              for(var existing in result.issuer.existing) {
                self.canonicalIssuer.getId(existing);
              }
              callback();
            }, callback);
          }
        ], callback);
      }, callback);
    }, function(callback) {
      /* Note: At this point all blank nodes in the set of RDF quads have been
      assigned canonical identifiers, which have been stored in the canonical
      issuer. Here each quad is updated by assigning each of its blank nodes
      its new identifier. */

      // 7) For each quad, quad, in input dataset:
      var normalized = [];
      self.waterfall([
        function(callback) {
          self.forEach(self.quads, function(quad, idx, callback) {
            // 7.1) Create a copy, quad copy, of quad and replace any existing
            // blank node identifiers using the canonical identifiers
            // previously issued by canonical issuer.
            // Note: We optimize away the copy here.
            self.forEachComponent(quad, function(component) {
              if(component.type === 'blank node' &&
                component.value.indexOf(self.canonicalIssuer.prefix) !== 0) {
                component.value = self.canonicalIssuer.getId(component.value);
              }
            });
            // 7.2) Add quad copy to the normalized dataset.
            normalized.push(_toNQuad(quad));
            callback();
          }, callback);
        },
        function(callback) {
          // sort normalized output
          normalized.sort();

          // 8) Return the normalized dataset.
          if(self.options.format === 'application/nquads') {
            result = normalized.join('');
            return callback();
          }

          result = _parseNQuads(normalized.join(''));
          callback();
        }
      ], callback);
    }
  ], function(err) {
    callback(err, result);
  });
};

// 4.6) Hash First Degree Quads
Normalize.prototype.hashFirstDegreeQuads = function(id, callback) {
  var self = this;

  // return cached hash
  var info = self.blankNodeInfo[id];
  if('hash' in info) {
    return callback(null, info.hash);
  }

  // 1) Initialize nquads to an empty list. It will be used to store quads in
  // N-Quads format.
  var nquads = [];

  // 2) Get the list of quads quads associated with the reference blank node
  // identifier in the blank node to quads map.
  var quads = info.quads;

  // 3) For each quad quad in quads:
  self.forEach(quads, function(quad, idx, callback) {
    // 3.1) Serialize the quad in N-Quads format with the following special
    // rule:

    // 3.1.1) If any component in quad is an blank node, then serialize it
    // using a special identifier as follows:
    var copy = {predicate: quad.predicate};
    self.forEachComponent(quad, function(component, key) {
      // 3.1.2) If the blank node's existing blank node identifier matches the
      // reference blank node identifier then use the blank node identifier _:a,
      // otherwise, use the blank node identifier _:z.
      copy[key] = self.modifyFirstDegreeComponent(id, component, key);
    });
    nquads.push(_toNQuad(copy));
    callback();
  }, function(err) {
    if(err) {
      return callback(err);
    }
    // 4) Sort nquads in lexicographical order.
    nquads.sort();

    // 5) Return the hash that results from passing the sorted, joined nquads
    // through the hash algorithm.
    info.hash = NormalizeHash.hashNQuads(self.name, nquads);
    callback(null, info.hash);
  });
};

// helper for modifying component during Hash First Degree Quads
Normalize.prototype.modifyFirstDegreeComponent = function(id, component) {
  if(component.type !== 'blank node') {
    return component;
  }
  component = _clone(component);
  component.value = (component.value === id ? '_:a' : '_:z');
  return component;
};

// 4.7) Hash Related Blank Node
Normalize.prototype.hashRelatedBlankNode = function(
  related, quad, issuer, position, callback) {
  var self = this;

  // 1) Set the identifier to use for related, preferring first the canonical
  // identifier for related if issued, second the identifier issued by issuer
  // if issued, and last, if necessary, the result of the Hash First Degree
  // Quads algorithm, passing related.
  var id;
  self.waterfall([
    function(callback) {
      if(self.canonicalIssuer.hasId(related)) {
        id = self.canonicalIssuer.getId(related);
        return callback();
      }
      if(issuer.hasId(related)) {
        id = issuer.getId(related);
        return callback();
      }
      self.hashFirstDegreeQuads(related, function(err, hash) {
        if(err) {
          return callback(err);
        }
        id = hash;
        callback();
      });
    }
  ], function(err) {
    if(err) {
      return callback(err);
    }

    // 2) Initialize a string input to the value of position.
    // Note: We use a hash object instead.
    var md = new NormalizeHash(self.name);
    md.update(position);

    // 3) If position is not g, append <, the value of the predicate in quad,
    // and > to input.
    if(position !== 'g') {
      md.update(self.getRelatedPredicate(quad));
    }

    // 4) Append identifier to input.
    md.update(id);

    // 5) Return the hash that results from passing input through the hash
    // algorithm.
    return callback(null, md.digest());
  });
};

// helper for getting a related predicate
Normalize.prototype.getRelatedPredicate = function(quad) {
  return '<' + quad.predicate.value + '>';
};

// 4.8) Hash N-Degree Quads
Normalize.prototype.hashNDegreeQuads = function(id, issuer, callback) {
  var self = this;

  // 1) Create a hash to related blank nodes map for storing hashes that
  // identify related blank nodes.
  // Note: 2) and 3) handled within `createHashToRelated`
  var hashToRelated;
  var md = new NormalizeHash(self.name);
  self.waterfall([
    function(callback) {
      self.createHashToRelated(id, issuer, function(err, result) {
        if(err) {
          return callback(err);
        }
        hashToRelated = result;
        callback();
      });
    },
    function(callback) {
      // 4) Create an empty string, data to hash.
      // Note: We created a hash object `md` above instead.

      // 5) For each related hash to blank node list mapping in hash to related
      // blank nodes map, sorted lexicographically by related hash:
      var hashes = Object.keys(hashToRelated).sort();
      self.forEach(hashes, function(hash, idx, callback) {
        // 5.1) Append the related hash to the data to hash.
        md.update(hash);

        // 5.2) Create a string chosen path.
        var chosenPath = '';

        // 5.3) Create an unset chosen issuer variable.
        var chosenIssuer;

        // 5.4) For each permutation of blank node list:
        var permutator = new Permutator(hashToRelated[hash]);
        self.whilst(
          function() { return permutator.hasNext(); },
          function(nextPermutation) {
          var permutation = permutator.next();

          // 5.4.1) Create a copy of issuer, issuer copy.
          var issuerCopy = issuer.clone();

          // 5.4.2) Create a string path.
          var path = '';

          // 5.4.3) Create a recursion list, to store blank node identifiers
          // that must be recursively processed by this algorithm.
          var recursionList = [];

          self.waterfall([
            function(callback) {
              // 5.4.4) For each related in permutation:
              self.forEach(permutation, function(related, idx, callback) {
                // 5.4.4.1) If a canonical identifier has been issued for
                // related, append it to path.
                if(self.canonicalIssuer.hasId(related)) {
                  path += self.canonicalIssuer.getId(related);
                } else {
                  // 5.4.4.2) Otherwise:
                  // 5.4.4.2.1) If issuer copy has not issued an identifier for
                  // related, append related to recursion list.
                  if(!issuerCopy.hasId(related)) {
                    recursionList.push(related);
                  }
                  // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                  // issuer copy and related and append the result to path.
                  path += issuerCopy.getId(related);
                }

                // 5.4.4.3) If chosen path is not empty and the length of path
                // is greater than or equal to the length of chosen path and
                // path is lexicographically greater than chosen path, then
                // skip to the next permutation.
                if(chosenPath.length !== 0 &&
                  path.length >= chosenPath.length && path > chosenPath) {
                  // FIXME: may cause inaccurate total depth calculation
                  return nextPermutation();
                }
                callback();
              }, callback);
            },
            function(callback) {
              // 5.4.5) For each related in recursion list:
              self.forEach(recursionList, function(related, idx, callback) {
                // 5.4.5.1) Set result to the result of recursively executing
                // the Hash N-Degree Quads algorithm, passing related for
                // identifier and issuer copy for path identifier issuer.
                self.hashNDegreeQuads(
                  related, issuerCopy, function(err, result) {
                  if(err) {
                    return callback(err);
                  }

                  // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
                  // copy and related and append the result to path.
                  path += issuerCopy.getId(related);

                  // 5.4.5.3) Append <, the hash in result, and > to path.
                  path += '<' + result.hash + '>';

                  // 5.4.5.4) Set issuer copy to the identifier issuer in
                  // result.
                  issuerCopy = result.issuer;

                  // 5.4.5.5) If chosen path is not empty and the length of path
                  // is greater than or equal to the length of chosen path and
                  // path is lexicographically greater than chosen path, then
                  // skip to the next permutation.
                  if(chosenPath.length !== 0 &&
                    path.length >= chosenPath.length && path > chosenPath) {
                    // FIXME: may cause inaccurate total depth calculation
                    return nextPermutation();
                  }
                  callback();
                });
              }, callback);
            },
            function(callback) {
              // 5.4.6) If chosen path is empty or path is lexicographically
              // less than chosen path, set chosen path to path and chosen
              // issuer to issuer copy.
              if(chosenPath.length === 0 || path < chosenPath) {
                chosenPath = path;
                chosenIssuer = issuerCopy;
              }
              callback();
            }
          ], nextPermutation);
        }, function(err) {
          if(err) {
            return callback(err);
          }

          // 5.5) Append chosen path to data to hash.
          md.update(chosenPath);

          // 5.6) Replace issuer, by reference, with chosen issuer.
          issuer = chosenIssuer;
          callback();
        });
      }, callback);
    }
  ], function(err) {
    // 6) Return issuer and the hash that results from passing data to hash
    // through the hash algorithm.
    callback(err, {hash: md.digest(), issuer: issuer});
  });
};

// helper for creating hash to related blank nodes map
Normalize.prototype.createHashToRelated = function(id, issuer, callback) {
  var self = this;

  // 1) Create a hash to related blank nodes map for storing hashes that
  // identify related blank nodes.
  var hashToRelated = {};

  // 2) Get a reference, quads, to the list of quads in the blank node to
  // quads map for the key identifier.
  var quads = self.blankNodeInfo[id].quads;

  // 3) For each quad in quads:
  self.forEach(quads, function(quad, idx, callback) {
    // 3.1) For each component in quad, if component is the subject, object,
    // and graph name and it is a blank node that is not identified by
    // identifier:
    self.forEach(quad, function(component, key, callback) {
      if(key === 'predicate' ||
        !(component.type === 'blank node' && component.value !== id)) {
        return callback();
      }
      // 3.1.1) Set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for component as
      // related, quad, path identifier issuer as issuer, and position as
      // either s, o, or g based on whether component is a subject, object,
      // graph name, respectively.
      var related = component.value;
      var position = POSITIONS[key];
      self.hashRelatedBlankNode(
        related, quad, issuer, position, function(err, hash) {
        if(err) {
          return callback(err);
        }
        // 3.1.2) Add a mapping of hash to the blank node identifier for
        // component to hash to related blank nodes map, adding an entry as
        // necessary.
        if(hash in hashToRelated) {
          hashToRelated[hash].push(related);
        } else {
          hashToRelated[hash] = [related];
        }
        callback();
      });
    }, callback);
  }, function(err) {
    callback(err, hashToRelated);
  });
};

// helper that iterates over quad components (skips predicate)
Normalize.prototype.forEachComponent = function(quad, op) {
  for(var key in quad) {
    // skip `predicate`
    if(key === 'predicate') {
      continue;
    }
    op(quad[key], key, quad);
  }
};

return Normalize;

})(); // end of define URDNA2015

/////////////////////////////// DEFINE URGNA2012 //////////////////////////////

var URGNA2012 = (function() {

var Normalize = function(options) {
  URDNA2015.call(this, options);
  this.name = 'URGNA2012';
};
Normalize.prototype = new URDNA2015();

// helper for modifying component during Hash First Degree Quads
Normalize.prototype.modifyFirstDegreeComponent = function(id, component, key) {
  if(component.type !== 'blank node') {
    return component;
  }
  component = _clone(component);
  if(key === 'name') {
    component.value = '_:g';
  } else {
    component.value = (component.value === id ? '_:a' : '_:z');
  }
  return component;
};

// helper for getting a related predicate
Normalize.prototype.getRelatedPredicate = function(quad) {
  return quad.predicate.value;
};

// helper for creating hash to related blank nodes map
Normalize.prototype.createHashToRelated = function(id, issuer, callback) {
  var self = this;

  // 1) Create a hash to related blank nodes map for storing hashes that
  // identify related blank nodes.
  var hashToRelated = {};

  // 2) Get a reference, quads, to the list of quads in the blank node to
  // quads map for the key identifier.
  var quads = self.blankNodeInfo[id].quads;

  // 3) For each quad in quads:
  self.forEach(quads, function(quad, idx, callback) {
    // 3.1) If the quad's subject is a blank node that does not match
    // identifier, set hash to the result of the Hash Related Blank Node
    // algorithm, passing the blank node identifier for subject as related,
    // quad, path identifier issuer as issuer, and p as position.
    var position;
    var related;
    if(quad.subject.type === 'blank node' && quad.subject.value !== id) {
      related = quad.subject.value;
      position = 'p';
    } else if(quad.object.type === 'blank node' && quad.object.value !== id) {
      // 3.2) Otherwise, if quad's object is a blank node that does not match
      // identifier, to the result of the Hash Related Blank Node algorithm,
      // passing the blank node identifier for object as related, quad, path
      // identifier issuer as issuer, and r as position.
      related = quad.object.value;
      position = 'r';
    } else {
      // 3.3) Otherwise, continue to the next quad.
      return callback();
    }
    // 3.4) Add a mapping of hash to the blank node identifier for the
    // component that matched (subject or object) to hash to related blank
    // nodes map, adding an entry as necessary.
    self.hashRelatedBlankNode(
      related, quad, issuer, position, function(err, hash) {
      if(hash in hashToRelated) {
        hashToRelated[hash].push(related);
      } else {
        hashToRelated[hash] = [related];
      }
      callback();
    });
  }, function(err) {
    callback(err, hashToRelated);
  });
};

return Normalize;

})(); // end of define URGNA2012

/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */
function _createNodeMap(input, graphs, graph, issuer, name, list) {
  // recurse through array
  if(_isArray(input)) {
    for(var i = 0; i < input.length; ++i) {
      _createNodeMap(input[i], graphs, graph, issuer, undefined, list);
    }
    return;
  }

  // add non-object to list
  if(!_isObject(input)) {
    if(list) {
      list.push(input);
    }
    return;
  }

  // add values to list
  if(_isValue(input)) {
    if('@type' in input) {
      var type = input['@type'];
      // rename @type blank node
      if(type.indexOf('_:') === 0) {
        input['@type'] = type = issuer.getId(type);
      }
    }
    if(list) {
      list.push(input);
    }
    return;
  }

  // Note: At this point, input must be a subject.

  // spec requires @type to be named first, so assign names early
  if('@type' in input) {
    var types = input['@type'];
    for(var i = 0; i < types.length; ++i) {
      var type = types[i];
      if(type.indexOf('_:') === 0) {
        issuer.getId(type);
      }
    }
  }

  // get name for subject
  if(_isUndefined(name)) {
    name = _isBlankNode(input) ? issuer.getId(input['@id']) : input['@id'];
  }

  // add subject reference to list
  if(list) {
    list.push({'@id': name});
  }

  // create new subject or merge into existing one
  var subjects = graphs[graph];
  var subject = subjects[name] = subjects[name] || {};
  subject['@id'] = name;
  var properties = Object.keys(input).sort();
  for(var pi = 0; pi < properties.length; ++pi) {
    var property = properties[pi];

    // skip @id
    if(property === '@id') {
      continue;
    }

    // handle reverse properties
    if(property === '@reverse') {
      var referencedNode = {'@id': name};
      var reverseMap = input['@reverse'];
      for(var reverseProperty in reverseMap) {
        var items = reverseMap[reverseProperty];
        for(var ii = 0; ii < items.length; ++ii) {
          var item = items[ii];
          var itemName = item['@id'];
          if(_isBlankNode(item)) {
            itemName = issuer.getId(itemName);
          }
          _createNodeMap(item, graphs, graph, issuer, itemName);
          jsonld.addValue(
            subjects[itemName], reverseProperty, referencedNode,
            {propertyIsArray: true, allowDuplicate: false});
        }
      }
      continue;
    }

    // recurse into graph
    if(property === '@graph') {
      // add graph subjects map entry
      if(!(name in graphs)) {
        graphs[name] = {};
      }
      var g = (graph === '@merged') ? graph : name;
      _createNodeMap(input[property], graphs, g, issuer);
      continue;
    }

    // copy non-@type keywords
    if(property !== '@type' && _isKeyword(property)) {
      if(property === '@index' && property in subject &&
        (input[property] !== subject[property] ||
        input[property]['@id'] !== subject[property]['@id'])) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; conflicting @index property detected.',
          'jsonld.SyntaxError',
          {code: 'conflicting indexes', subject: subject});
      }
      subject[property] = input[property];
      continue;
    }

    // iterate over objects
    var objects = input[property];

    // if property is a bnode, assign it a new id
    if(property.indexOf('_:') === 0) {
      property = issuer.getId(property);
    }

    // ensure property is added for empty arrays
    if(objects.length === 0) {
      jsonld.addValue(subject, property, [], {propertyIsArray: true});
      continue;
    }
    for(var oi = 0; oi < objects.length; ++oi) {
      var o = objects[oi];

      if(property === '@type') {
        // rename @type blank nodes
        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;
      }

      // handle embedded subject or subject reference
      if(_isSubject(o) || _isSubjectReference(o)) {
        // relabel blank node @id
        var id = _isBlankNode(o) ? issuer.getId(o['@id']) : o['@id'];

        // add reference and recurse
        jsonld.addValue(
          subject, property, {'@id': id},
          {propertyIsArray: true, allowDuplicate: false});
        _createNodeMap(o, graphs, graph, issuer, id);
      } else if(_isList(o)) {
        // handle @list
        var _list = [];
        _createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
        o = {'@list': _list};
        jsonld.addValue(
          subject, property, o,
          {propertyIsArray: true, allowDuplicate: false});
      } else {
        // handle @value
        _createNodeMap(o, graphs, graph, issuer, name);
        jsonld.addValue(
          subject, property, o, {propertyIsArray: true, allowDuplicate: false});
      }
    }
  }
}

function _mergeNodeMaps(graphs) {
  // add all non-default graphs to default graph
  var defaultGraph = graphs['@default'];
  var graphNames = Object.keys(graphs).sort();
  for(var i = 0; i < graphNames.length; ++i) {
    var graphName = graphNames[i];
    if(graphName === '@default') {
      continue;
    }
    var nodeMap = graphs[graphName];
    var subject = defaultGraph[graphName];
    if(!subject) {
      defaultGraph[graphName] = subject = {
        '@id': graphName,
        '@graph': []
      };
    } else if(!('@graph' in subject)) {
      subject['@graph'] = [];
    }
    var graph = subject['@graph'];
    var ids = Object.keys(nodeMap).sort();
    for(var ii = 0; ii < ids.length; ++ii) {
      var node = nodeMap[ids[ii]];
      // only add full subjects
      if(!_isSubjectReference(node)) {
        graph.push(node);
      }
    }
  }
  return defaultGraph;
}

/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */
function _frame(state, subjects, frame, parent, property) {
  // validate the frame
  _validateFrame(frame);
  frame = frame[0];

  // get flags for current frame
  var options = state.options;
  var flags = {
    embed: _getFrameFlag(frame, options, 'embed'),
    explicit: _getFrameFlag(frame, options, 'explicit'),
    requireAll: _getFrameFlag(frame, options, 'requireAll')
  };

  // filter out subjects that match the frame
  var matches = _filterSubjects(state, subjects, frame, flags);

  // add matches to output
  var ids = Object.keys(matches).sort();
  for(var idx = 0; idx < ids.length; ++idx) {
    var id = ids[idx];
    var subject = matches[id];

    if(flags.embed === '@link' && id in state.link) {
      // TODO: may want to also match an existing linked subject against
      // the current frame ... so different frames could produce different
      // subjects that are only shared in-memory when the frames are the same

      // add existing linked subject
      _addFrameOutput(parent, property, state.link[id]);
      continue;
    }

    /* Note: In order to treat each top-level match as a compartmentalized
    result, clear the unique embedded subjects map when the property is null,
    which only occurs at the top-level. */
    if(property === null) {
      state.uniqueEmbeds = {};
    }

    // start output for subject
    var output = {};
    output['@id'] = id;
    state.link[id] = output;

    // if embed is @never or if a circular reference would be created by an
    // embed, the subject cannot be embedded, just add the reference;
    // note that a circular reference won't occur when the embed flag is
    // `@link` as the above check will short-circuit before reaching this point
    if(flags.embed === '@never' ||
      _createsCircularReference(subject, state.subjectStack)) {
      _addFrameOutput(parent, property, output);
      continue;
    }

    // if only the last match should be embedded
    if(flags.embed === '@last') {
      // remove any existing embed
      if(id in state.uniqueEmbeds) {
        _removeEmbed(state, id);
      }
      state.uniqueEmbeds[id] = {parent: parent, property: property};
    }

    // push matching subject onto stack to enable circular embed checks
    state.subjectStack.push(subject);

    // iterate over subject properties
    var props = Object.keys(subject).sort();
    for(var i = 0; i < props.length; i++) {
      var prop = props[i];

      // copy keywords to output
      if(_isKeyword(prop)) {
        output[prop] = _clone(subject[prop]);
        continue;
      }

      // explicit is on and property isn't in the frame, skip processing
      if(flags.explicit && !(prop in frame)) {
        continue;
      }

      // add objects
      var objects = subject[prop];
      for(var oi = 0; oi < objects.length; ++oi) {
        var o = objects[oi];

        // recurse into list
        if(_isList(o)) {
          // add empty list
          var list = {'@list': []};
          _addFrameOutput(output, prop, list);

          // add list objects
          var src = o['@list'];
          for(var n in src) {
            o = src[n];
            if(_isSubjectReference(o)) {
              var subframe = (prop in frame ?
                frame[prop][0]['@list'] : _createImplicitFrame(flags));
              // recurse into subject reference
              _frame(state, [o['@id']], subframe, list, '@list');
            } else {
              // include other values automatically
              _addFrameOutput(list, '@list', _clone(o));
            }
          }
          continue;
        }

        if(_isSubjectReference(o)) {
          // recurse into subject reference
          var subframe = (prop in frame ?
            frame[prop] : _createImplicitFrame(flags));
          _frame(state, [o['@id']], subframe, output, prop);
        } else {
          // include other values automatically
          _addFrameOutput(output, prop, _clone(o));
        }
      }
    }

    // handle defaults
    var props = Object.keys(frame).sort();
    for(var i = 0; i < props.length; ++i) {
      var prop = props[i];

      // skip keywords
      if(_isKeyword(prop)) {
        continue;
      }

      // if omit default is off, then include default values for properties
      // that appear in the next frame but are not in the matching subject
      var next = frame[prop][0];
      var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
      if(!omitDefaultOn && !(prop in output)) {
        var preserve = '@null';
        if('@default' in next) {
          preserve = _clone(next['@default']);
        }
        if(!_isArray(preserve)) {
          preserve = [preserve];
        }
        output[prop] = [{'@preserve': preserve}];
      }
    }

    // add output to parent
    _addFrameOutput(parent, property, output);

    // pop matching subject from circular ref-checking stack
    state.subjectStack.pop();
  }
}

/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */
function _createImplicitFrame(flags) {
  var frame = {};
  for(var key in flags) {
    if(flags[key] !== undefined) {
      frame['@' + key] = [flags[key]];
    }
  }
  return [frame];
}

/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */
function _createsCircularReference(subjectToEmbed, subjectStack) {
  for(var i = subjectStack.length - 1; i >= 0; --i) {
    if(subjectStack[i]['@id'] === subjectToEmbed['@id']) {
      return true;
    }
  }
  return false;
}

/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */
function _getFrameFlag(frame, options, name) {
  var flag = '@' + name;
  var rval = (flag in frame ? frame[flag][0] : options[name]);
  if(name === 'embed') {
    // default is "@last"
    // backwards-compatibility support for "embed" maps:
    // true => "@last"
    // false => "@never"
    if(rval === true) {
      rval = '@last';
    } else if(rval === false) {
      rval = '@never';
    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link') {
      rval = '@last';
    }
  }
  return rval;
}

/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */
function _validateFrame(frame) {
  if(!_isArray(frame) || frame.length !== 1 || !_isObject(frame[0])) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',
      'jsonld.SyntaxError', {frame: frame});
  }
}

/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */
function _filterSubjects(state, subjects, frame, flags) {
  // filter subjects in @id order
  var rval = {};
  for(var i = 0; i < subjects.length; ++i) {
    var id = subjects[i];
    var subject = state.subjects[id];
    if(_filterSubject(subject, frame, flags)) {
      rval[id] = subject;
    }
  }
  return rval;
}

/**
 * Returns true if the given subject matches the given frame.
 *
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */
function _filterSubject(subject, frame, flags) {
  // check @type (object value means 'any' type, fall through to ducktyping)
  if('@type' in frame &&
    !(frame['@type'].length === 1 && _isObject(frame['@type'][0]))) {
    var types = frame['@type'];
    for(var i = 0; i < types.length; ++i) {
      // any matching @type is a match
      if(jsonld.hasValue(subject, '@type', types[i])) {
        return true;
      }
    }
    return false;
  }

  // check ducktype
  var wildcard = true;
  var matchesSome = false;
  for(var key in frame) {
    if(_isKeyword(key)) {
      // skip non-@id and non-@type
      if(key !== '@id' && key !== '@type') {
        continue;
      }
      wildcard = false;

      // check @id for a specific @id value
      if(key === '@id' && _isString(frame[key])) {
        if(subject[key] !== frame[key]) {
          return false;
        }
        matchesSome = true;
        continue;
      }
    }

    wildcard = false;

    if(key in subject) {
      // frame[key] === [] means do not match if property is present
      if(_isArray(frame[key]) && frame[key].length === 0 &&
        subject[key] !== undefined) {
        return false;
      }
      matchesSome = true;
      continue;
    }

    // all properties must match to be a duck unless a @default is specified
    var hasDefault = (_isArray(frame[key]) && _isObject(frame[key][0]) &&
      '@default' in frame[key][0]);
    if(flags.requireAll && !hasDefault) {
      return false;
    }
  }

  // return true if wildcard or subject matches some properties
  return wildcard || matchesSome;
}

/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */
function _removeEmbed(state, id) {
  // get existing embed
  var embeds = state.uniqueEmbeds;
  var embed = embeds[id];
  var parent = embed.parent;
  var property = embed.property;

  // create reference to replace embed
  var subject = {'@id': id};

  // remove existing embed
  if(_isArray(parent)) {
    // replace subject with reference
    for(var i = 0; i < parent.length; ++i) {
      if(jsonld.compareValues(parent[i], subject)) {
        parent[i] = subject;
        break;
      }
    }
  } else {
    // replace subject with reference
    var useArray = _isArray(parent[property]);
    jsonld.removeValue(parent, property, subject, {propertyIsArray: useArray});
    jsonld.addValue(parent, property, subject, {propertyIsArray: useArray});
  }

  // recursively remove dependent dangling embeds
  var removeDependents = function(id) {
    // get embed keys as a separate array to enable deleting keys in map
    var ids = Object.keys(embeds);
    for(var i = 0; i < ids.length; ++i) {
      var next = ids[i];
      if(next in embeds && _isObject(embeds[next].parent) &&
        embeds[next].parent['@id'] === id) {
        delete embeds[next];
        removeDependents(next);
      }
    }
  };
  removeDependents(id);
}

/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */
function _addFrameOutput(parent, property, output) {
  if(_isObject(parent)) {
    jsonld.addValue(parent, property, output, {propertyIsArray: true});
  } else {
    parent.push(output);
  }
}

/**
 * Removes the @preserve keywords as the last step of the framing algorithm.
 *
 * @param ctx the active context used to compact the input.
 * @param input the framed, compacted output.
 * @param options the compaction options used.
 *
 * @return the resulting output.
 */
function _removePreserve(ctx, input, options) {
  // recurse through arrays
  if(_isArray(input)) {
    var output = [];
    for(var i = 0; i < input.length; ++i) {
      var result = _removePreserve(ctx, input[i], options);
      // drop nulls from arrays
      if(result !== null) {
        output.push(result);
      }
    }
    input = output;
  } else if(_isObject(input)) {
    // remove @preserve
    if('@preserve' in input) {
      if(input['@preserve'] === '@null') {
        return null;
      }
      return input['@preserve'];
    }

    // skip @values
    if(_isValue(input)) {
      return input;
    }

    // recurse through @lists
    if(_isList(input)) {
      input['@list'] = _removePreserve(ctx, input['@list'], options);
      return input;
    }

    // handle in-memory linked nodes
    var idAlias = _compactIri(ctx, '@id');
    if(idAlias in input) {
      var id = input[idAlias];
      if(id in options.link) {
        var idx = options.link[id].indexOf(input);
        if(idx === -1) {
          // prevent circular visitation
          options.link[id].push(input);
        } else {
          // already visited
          return options.link[id][idx];
        }
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    // recurse through properties
    for(var prop in input) {
      var result = _removePreserve(ctx, input[prop], options);
      var container = jsonld.getContextValue(ctx, prop, '@container');
      if(options.compactArrays && _isArray(result) && result.length === 1 &&
        container === null) {
        result = result[0];
      }
      input[prop] = result;
    }
  }
  return input;
}

/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a == b.
 */
function _compareShortestLeast(a, b) {
  if(a.length < b.length) {
    return -1;
  }
  if(b.length < a.length) {
    return 1;
  }
  if(a === b) {
    return 0;
  }
  return (a < b) ? -1 : 1;
}

/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */
function _selectTerm(
  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
  if(typeOrLanguageValue === null) {
    typeOrLanguageValue = '@null';
  }

  // preferences for the value of @type or @language
  var prefs = [];

  // determine prefs for @id based on whether or not value compacts to a term
  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&
    _isSubjectReference(value)) {
    // prefer @reverse first
    if(typeOrLanguageValue === '@reverse') {
      prefs.push('@reverse');
    }
    // try to compact value to a term
    var term = _compactIri(activeCtx, value['@id'], null, {vocab: true});
    if(term in activeCtx.mappings &&
      activeCtx.mappings[term] &&
      activeCtx.mappings[term]['@id'] === value['@id']) {
      // prefer @vocab
      prefs.push.apply(prefs, ['@vocab', '@id']);
    } else {
      // prefer @id
      prefs.push.apply(prefs, ['@id', '@vocab']);
    }
  } else {
    prefs.push(typeOrLanguageValue);
  }
  prefs.push('@none');

  var containerMap = activeCtx.inverse[iri];
  for(var ci = 0; ci < containers.length; ++ci) {
    // if container not available in the map, continue
    var container = containers[ci];
    if(!(container in containerMap)) {
      continue;
    }

    var typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
    for(var pi = 0; pi < prefs.length; ++pi) {
      // if type/language option not available in the map, continue
      var pref = prefs[pi];
      if(!(pref in typeOrLanguageValueMap)) {
        continue;
      }

      // select term
      return typeOrLanguageValueMap[pref];
    }
  }

  return null;
}

/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */
function _compactIri(activeCtx, iri, value, relativeTo, reverse) {
  // can't compact null
  if(iri === null) {
    return iri;
  }

  // default value and parent to null
  if(_isUndefined(value)) {
    value = null;
  }
  // default reverse to false
  if(_isUndefined(reverse)) {
    reverse = false;
  }
  relativeTo = relativeTo || {};

  var inverseCtx = activeCtx.getInverse();

  // if term is a keyword, it can only be compacted to a simple alias
  if(_isKeyword(iri)) {
    if(iri in inverseCtx) {
      return inverseCtx[iri]['@none']['@type']['@none'];
    }
    return iri;
  }

  // use inverse context to pick a term if iri is relative to vocab
  if(relativeTo.vocab && iri in inverseCtx) {
    var defaultLanguage = activeCtx['@language'] || '@none';

    // prefer @index if available in value
    var containers = [];
    if(_isObject(value) && '@index' in value) {
      containers.push('@index');
    }

    // defaults for term selection based on type/language
    var typeOrLanguage = '@language';
    var typeOrLanguageValue = '@null';

    if(reverse) {
      typeOrLanguage = '@type';
      typeOrLanguageValue = '@reverse';
      containers.push('@set');
    } else if(_isList(value)) {
      // choose the most specific term that works for all elements in @list
      // only select @list containers if @index is NOT in value
      if(!('@index' in value)) {
        containers.push('@list');
      }
      var list = value['@list'];
      var commonLanguage = (list.length === 0) ? defaultLanguage : null;
      var commonType = null;
      for(var i = 0; i < list.length; ++i) {
        var item = list[i];
        var itemLanguage = '@none';
        var itemType = '@none';
        if(_isValue(item)) {
          if('@language' in item) {
            itemLanguage = item['@language'];
          } else if('@type' in item) {
            itemType = item['@type'];
          } else {
            // plain literal
            itemLanguage = '@null';
          }
        } else {
          itemType = '@id';
        }
        if(commonLanguage === null) {
          commonLanguage = itemLanguage;
        } else if(itemLanguage !== commonLanguage && _isValue(item)) {
          commonLanguage = '@none';
        }
        if(commonType === null) {
          commonType = itemType;
        } else if(itemType !== commonType) {
          commonType = '@none';
        }
        // there are different languages and types in the list, so choose
        // the most generic term, no need to keep iterating the list
        if(commonLanguage === '@none' && commonType === '@none') {
          break;
        }
      }
      commonLanguage = commonLanguage || '@none';
      commonType = commonType || '@none';
      if(commonType !== '@none') {
        typeOrLanguage = '@type';
        typeOrLanguageValue = commonType;
      } else {
        typeOrLanguageValue = commonLanguage;
      }
    } else {
      if(_isValue(value)) {
        if('@language' in value && !('@index' in value)) {
          containers.push('@language');
          typeOrLanguageValue = value['@language'];
        } else if('@type' in value) {
          typeOrLanguage = '@type';
          typeOrLanguageValue = value['@type'];
        }
      } else {
        typeOrLanguage = '@type';
        typeOrLanguageValue = '@id';
      }
      containers.push('@set');
    }

    // do term selection
    containers.push('@none');
    var term = _selectTerm(
      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
    if(term !== null) {
      return term;
    }
  }

  // no term match, use @vocab if available
  if(relativeTo.vocab) {
    if('@vocab' in activeCtx) {
      // determine if vocab is a prefix of the iri
      var vocab = activeCtx['@vocab'];
      if(iri.indexOf(vocab) === 0 && iri !== vocab) {
        // use suffix as relative iri if it is not a term in the active context
        var suffix = iri.substr(vocab.length);
        if(!(suffix in activeCtx.mappings)) {
          return suffix;
        }
      }
    }
  }

  // no term or @vocab match, check for possible CURIEs
  var choice = null;
  var idx = 0;
  var partialMatches = [];
  var iriMap = activeCtx.fastCurieMap;
  // check for partial matches of against `iri`, which means look until
  // iri.length - 1, not full length
  var maxPartialLength = iri.length - 1;
  for(; idx < maxPartialLength && iri[idx] in iriMap; ++idx) {
    iriMap = iriMap[iri[idx]];
    if('' in iriMap) {
      partialMatches.push(iriMap[''][0]);
    }
  }
  // check partial matches in reverse order to prefer longest ones first
  for(var i = partialMatches.length - 1; i >= 0; --i) {
    var entry = partialMatches[i];
    var terms = entry.terms;
    for(var ti = 0; ti < terms.length; ++ti) {
      // a CURIE is usable if:
      // 1. it has no mapping, OR
      // 2. value is null, which means we're not compacting an @value, AND
      //   the mapping matches the IRI
      var curie = terms[ti] + ':' + iri.substr(entry.iri.length);
      var isUsableCurie = (!(curie in activeCtx.mappings) ||
        (value === null && activeCtx.mappings[curie]['@id'] === iri));

      // select curie if it is shorter or the same length but lexicographically
      // less than the current choice
      if(isUsableCurie && (choice === null ||
        _compareShortestLeast(curie, choice) < 0)) {
        choice = curie;
      }
    }
  }

  // return chosen curie
  if(choice !== null) {
    return choice;
  }

  // compact IRI relative to base
  if(!relativeTo.vocab) {
    return _removeBase(activeCtx['@base'], iri);
  }

  // return IRI as is
  return iri;
}

/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 *
 * @return the compaction result.
 */
function _compactValue(activeCtx, activeProperty, value) {
  // value is a @value
  if(_isValue(value)) {
    // get context rules
    var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');
    var language = jsonld.getContextValue(
      activeCtx, activeProperty, '@language');
    var container = jsonld.getContextValue(
      activeCtx, activeProperty, '@container');

    // whether or not the value has an @index that must be preserved
    var preserveIndex = (('@index' in value) &&
      container !== '@index');

    // if there's no @index to preserve ...
    if(!preserveIndex) {
      // matching @type or @language specified in context, compact value
      if(value['@type'] === type || value['@language'] === language) {
        return value['@value'];
      }
    }

    // return just the value of @value if all are true:
    // 1. @value is the only key or @index isn't being preserved
    // 2. there is no default language or @value is not a string or
    //   the key has a mapping with a null @language
    var keyCount = Object.keys(value).length;
    var isValueOnlyKey = (keyCount === 1 ||
      (keyCount === 2 && ('@index' in value) && !preserveIndex));
    var hasDefaultLanguage = ('@language' in activeCtx);
    var isValueString = _isString(value['@value']);
    var hasNullMapping = (activeCtx.mappings[activeProperty] &&
      activeCtx.mappings[activeProperty]['@language'] === null);
    if(isValueOnlyKey &&
      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
      return value['@value'];
    }

    var rval = {};

    // preserve @index
    if(preserveIndex) {
      rval[_compactIri(activeCtx, '@index')] = value['@index'];
    }

    if('@type' in value) {
      // compact @type IRI
      rval[_compactIri(activeCtx, '@type')] = _compactIri(
        activeCtx, value['@type'], null, {vocab: true});
    } else if('@language' in value) {
      // alias @language
      rval[_compactIri(activeCtx, '@language')] = value['@language'];
    }

    // alias @value
    rval[_compactIri(activeCtx, '@value')] = value['@value'];

    return rval;
  }

  // value is a subject reference
  var expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true});
  var type = jsonld.getContextValue(activeCtx, activeProperty, '@type');
  var compacted = _compactIri(
    activeCtx, value['@id'], null, {vocab: type === '@vocab'});

  // compact to scalar
  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
    return compacted;
  }

  var rval = {};
  rval[_compactIri(activeCtx, '@id')] = compacted;
  return rval;
}

/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 */
function _createTermDefinition(activeCtx, localCtx, term, defined) {
  if(term in defined) {
    // term already defined
    if(defined[term]) {
      return;
    }
    // cycle detected
    throw new JsonLdError(
      'Cyclical context definition detected.',
      'jsonld.CyclicalContext',
      {code: 'cyclic IRI mapping', context: localCtx, term: term});
  }

  // now defining term
  defined[term] = false;

  if(_isKeyword(term)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; keywords cannot be overridden.',
      'jsonld.SyntaxError',
      {code: 'keyword redefinition', context: localCtx, term: term});
  }

  if(term === '') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a term cannot be an empty string.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // remove old mapping
  if(activeCtx.mappings[term]) {
    delete activeCtx.mappings[term];
  }

  // get context term value
  var value = localCtx[term];

  // clear context entry
  if(value === null || (_isObject(value) && value['@id'] === null)) {
    activeCtx.mappings[term] = null;
    defined[term] = true;
    return;
  }

  // convert short-hand value to object w/@id
  if(_isString(value)) {
    value = {'@id': value};
  }

  if(!_isObject(value)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context property values must be ' +
      'strings or objects.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // create new mapping
  var mapping = activeCtx.mappings[term] = {};
  mapping.reverse = false;

  if('@reverse' in value) {
    if('@id' in value) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
        'contain @id.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }
    var reverse = value['@reverse'];
    if(!_isString(reverse)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }

    // expand and add @id mapping
    var id = _expandIri(
      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined);
    if(!_isAbsoluteIri(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +
        'absolute IRI or a blank node identifier.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }
    mapping['@id'] = id;
    mapping.reverse = true;
  } else if('@id' in value) {
    var id = value['@id'];
    if(!_isString(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @id value must be an array ' +
        'of strings or a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }
    if(id !== term) {
      // expand and add @id mapping
      id = _expandIri(
        activeCtx, id, {vocab: true, base: false}, localCtx, defined);
      if(!_isAbsoluteIri(id) && !_isKeyword(id)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a @context @id value must be an ' +
          'absolute IRI, a blank node identifier, or a keyword.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx});
      }
      mapping['@id'] = id;
    }
  }

  // always compute whether term has a colon as an optimization for
  // _compactIri
  var colon = term.indexOf(':');
  mapping._termHasColon = (colon !== -1);

  if(!('@id' in mapping)) {
    // see if the term has a prefix
    if(mapping._termHasColon) {
      var prefix = term.substr(0, colon);
      if(prefix in localCtx) {
        // define parent prefix
        _createTermDefinition(activeCtx, localCtx, prefix, defined);
      }

      if(activeCtx.mappings[prefix]) {
        // set @id based on prefix parent
        var suffix = term.substr(colon + 1);
        mapping['@id'] = activeCtx.mappings[prefix]['@id'] + suffix;
      } else {
        // term is an absolute IRI
        mapping['@id'] = term;
      }
    } else {
      // non-IRIs *must* define @ids if @vocab is not available
      if(!('@vocab' in activeCtx)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @context terms must define an @id.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx, term: term});
      }
      // prepend vocab to term
      mapping['@id'] = activeCtx['@vocab'] + term;
    }
  }

  // IRI mapping now defined
  defined[term] = true;

  if('@type' in value) {
    var type = value['@type'];
    if(!_isString(type)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an @context @type values must be a string.',
        'jsonld.SyntaxError',
        {code: 'invalid type mapping', context: localCtx});
    }

    if(type !== '@id' && type !== '@vocab') {
      // expand @type to full IRI
      type = _expandIri(
        activeCtx, type, {vocab: true, base: false}, localCtx, defined);
      if(!_isAbsoluteIri(type)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must be an ' +
          'absolute IRI.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
      if(type.indexOf('_:') === 0) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type values must be an IRI, ' +
          'not a blank node identifier.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
    }

    // add @type to mapping
    mapping['@type'] = type;
  }

  if('@container' in value) {
    var container = value['@container'];
    if(container !== '@list' && container !== '@set' &&
      container !== '@index' && container !== '@language') {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value must be ' +
        'one of the following: @list, @set, @index, or @language.',
        'jsonld.SyntaxError',
        {code: 'invalid container mapping', context: localCtx});
    }
    if(mapping.reverse && container !== '@index' && container !== '@set' &&
      container !== null) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +
        'type definition must be @index or @set.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }

    // add @container to mapping
    mapping['@container'] = container;
  }

  if('@language' in value && !('@type' in value)) {
    var language = value['@language'];
    if(language !== null && !_isString(language)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @language value must be ' +
        'a string or null.', 'jsonld.SyntaxError',
        {code: 'invalid language mapping', context: localCtx});
    }

    // add @language to mapping
    if(language !== null) {
      language = language.toLowerCase();
    }
    mapping['@language'] = language;
  }

  // disallow aliasing @context and @preserve
  var id = mapping['@id'];
  if(id === '@context' || id === '@preserve') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',
      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});
  }
}

/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 *
 * @return the expanded value.
 */
function _expandIri(activeCtx, value, relativeTo, localCtx, defined) {
  // already expanded
  if(value === null || _isKeyword(value)) {
    return value;
  }

  // ensure value is interpreted as a string
  value = String(value);

  // define term dependency if not defined
  if(localCtx && value in localCtx && defined[value] !== true) {
    _createTermDefinition(activeCtx, localCtx, value, defined);
  }

  relativeTo = relativeTo || {};
  if(relativeTo.vocab) {
    var mapping = activeCtx.mappings[value];

    // value is explicitly ignored with a null mapping
    if(mapping === null) {
      return null;
    }

    if(mapping) {
      // value is a term
      return mapping['@id'];
    }
  }

  // split value into prefix:suffix
  var colon = value.indexOf(':');
  if(colon !== -1) {
    var prefix = value.substr(0, colon);
    var suffix = value.substr(colon + 1);

    // do not expand blank nodes (prefix of '_') or already-absolute
    // IRIs (suffix of '//')
    if(prefix === '_' || suffix.indexOf('//') === 0) {
      return value;
    }

    // prefix dependency not defined, define it
    if(localCtx && prefix in localCtx) {
      _createTermDefinition(activeCtx, localCtx, prefix, defined);
    }

    // use mapping if prefix is defined
    var mapping = activeCtx.mappings[prefix];
    if(mapping) {
      return mapping['@id'] + suffix;
    }

    // already absolute IRI
    return value;
  }

  // prepend vocab
  if(relativeTo.vocab && '@vocab' in activeCtx) {
    return activeCtx['@vocab'] + value;
  }

  // prepend base
  var rval = value;
  if(relativeTo.base) {
    rval = jsonld.prependBase(activeCtx['@base'], rval);
  }

  return rval;
}

function _prependBase(base, iri) {
  // skip IRI processing
  if(base === null) {
    return iri;
  }
  // already an absolute IRI
  if(iri.indexOf(':') !== -1) {
    return iri;
  }

  // parse base if it is a string
  if(_isString(base)) {
    base = jsonld.url.parse(base || '');
  }

  // parse given IRI
  var rel = jsonld.url.parse(iri);

  // per RFC3986 5.2.2
  var transform = {
    protocol: base.protocol || ''
  };

  if(rel.authority !== null) {
    transform.authority = rel.authority;
    transform.path = rel.path;
    transform.query = rel.query;
  } else {
    transform.authority = base.authority;

    if(rel.path === '') {
      transform.path = base.path;
      if(rel.query !== null) {
        transform.query = rel.query;
      } else {
        transform.query = base.query;
      }
    } else {
      if(rel.path.indexOf('/') === 0) {
        // IRI represents an absolute path
        transform.path = rel.path;
      } else {
        // merge paths
        var path = base.path;

        // append relative path to the end of the last directory from base
        if(rel.path !== '') {
          path = path.substr(0, path.lastIndexOf('/') + 1);
          if(path.length > 0 && path.substr(-1) !== '/') {
            path += '/';
          }
          path += rel.path;
        }

        transform.path = path;
      }
      transform.query = rel.query;
    }
  }

  // remove slashes and dots in path
  transform.path = _removeDotSegments(transform.path, !!transform.authority);

  // construct URL
  var rval = transform.protocol;
  if(transform.authority !== null) {
    rval += '//' + transform.authority;
  }
  rval += transform.path;
  if(transform.query !== null) {
    rval += '?' + transform.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
}

/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */
function _removeBase(base, iri) {
  // skip IRI processing
  if(base === null) {
    return iri;
  }

  if(_isString(base)) {
    base = jsonld.url.parse(base || '');
  }

  // establish base root
  var root = '';
  if(base.href !== '') {
    root += (base.protocol || '') + '//' + (base.authority || '');
  } else if(iri.indexOf('//')) {
    // support network-path reference with empty base
    root += '//';
  }

  // IRI not relative to base
  if(iri.indexOf(root) !== 0) {
    return iri;
  }

  // remove root from IRI and parse remainder
  var rel = jsonld.url.parse(iri.substr(root.length));

  // remove path segments that match (do not remove last segment unless there
  // is a hash or query)
  var baseSegments = base.normalizedPath.split('/');
  var iriSegments = rel.normalizedPath.split('/');
  var last = (rel.fragment || rel.query) ? 0 : 1;
  while(baseSegments.length > 0 && iriSegments.length > last) {
    if(baseSegments[0] !== iriSegments[0]) {
      break;
    }
    baseSegments.shift();
    iriSegments.shift();
  }

  // use '../' for each non-matching base segment
  var rval = '';
  if(baseSegments.length > 0) {
    // don't count the last segment (if it ends with '/' last path doesn't
    // count and if it doesn't end with '/' it isn't a path)
    baseSegments.pop();
    for(var i = 0; i < baseSegments.length; ++i) {
      rval += '../';
    }
  }

  // prepend remaining segments
  rval += iriSegments.join('/');

  // add query and hash
  if(rel.query !== null) {
    rval += '?' + rel.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
}

/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */
function _getInitialContext(options) {
  var base = jsonld.url.parse(options.base || '');
  return {
    '@base': base,
    mappings: {},
    inverse: null,
    getInverse: _createInverseContext,
    clone: _cloneActiveContext
  };

  /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */
  function _createInverseContext() {
    var activeCtx = this;

    // lazily create inverse
    if(activeCtx.inverse) {
      return activeCtx.inverse;
    }
    var inverse = activeCtx.inverse = {};

    // variables for building fast CURIE map
    var fastCurieMap = activeCtx.fastCurieMap = {};
    var irisToTerms = {};

    // handle default language
    var defaultLanguage = activeCtx['@language'] || '@none';

    // create term selections for each mapping in the context, ordered by
    // shortest and then lexicographically least
    var mappings = activeCtx.mappings;
    var terms = Object.keys(mappings).sort(_compareShortestLeast);
    for(var i = 0; i < terms.length; ++i) {
      var term = terms[i];
      var mapping = mappings[term];
      if(mapping === null) {
        continue;
      }

      var container = mapping['@container'] || '@none';

      // iterate over every IRI in the mapping
      var ids = mapping['@id'];
      if(!_isArray(ids)) {
        ids = [ids];
      }
      for(var ii = 0; ii < ids.length; ++ii) {
        var iri = ids[ii];
        var entry = inverse[iri];
        var isKeyword = _isKeyword(iri);

        if(!entry) {
          // initialize entry
          inverse[iri] = entry = {};

          if(!isKeyword && !mapping._termHasColon) {
            // init IRI to term map and fast CURIE prefixes
            irisToTerms[iri] = [term];
            var fastCurieEntry = {iri: iri, terms: irisToTerms[iri]};
            if(iri[0] in fastCurieMap) {
              fastCurieMap[iri[0]].push(fastCurieEntry);
            } else {
              fastCurieMap[iri[0]] = [fastCurieEntry];
            }
          }
        } else if(!isKeyword && !mapping._termHasColon) {
          // add IRI to term match
          irisToTerms[iri].push(term);
        }

        // add new entry
        if(!entry[container]) {
          entry[container] = {
            '@language': {},
            '@type': {}
          };
        }
        entry = entry[container];

        if(mapping.reverse) {
          // term is preferred for values using @reverse
          _addPreferredTerm(mapping, term, entry['@type'], '@reverse');
        } else if('@type' in mapping) {
          // term is preferred for values using specific type
          _addPreferredTerm(mapping, term, entry['@type'], mapping['@type']);
        } else if('@language' in mapping) {
          // term is preferred for values using specific language
          var language = mapping['@language'] || '@null';
          _addPreferredTerm(mapping, term, entry['@language'], language);
        } else {
          // term is preferred for values w/default language or no type and
          // no language
          // add an entry for the default language
          _addPreferredTerm(mapping, term, entry['@language'], defaultLanguage);

          // add entries for no type and no language
          _addPreferredTerm(mapping, term, entry['@type'], '@none');
          _addPreferredTerm(mapping, term, entry['@language'], '@none');
        }
      }
    }

    // build fast CURIE map
    for(var key in fastCurieMap) {
      _buildIriMap(fastCurieMap, key, 1);
    }

    return inverse;
  }

  /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */
  function _buildIriMap(iriMap, key, idx) {
    var entries = iriMap[key];
    var next = iriMap[key] = {};

    var iri;
    var letter;
    for(var i = 0; i < entries.length; ++i) {
      iri = entries[i].iri;
      if(idx >= iri.length) {
        letter = '';
      } else {
        letter = iri[idx];
      }
      if(letter in next) {
        next[letter].push(entries[i]);
      } else {
        next[letter] = [entries[i]];
      }
    }

    for(var key in next) {
      if(key === '') {
        continue;
      }
      _buildIriMap(next, key, idx + 1);
    }
  }

  /**
   * Adds the term for the given entry if not already added.
   *
   * @param mapping the term mapping.
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */
  function _addPreferredTerm(mapping, term, entry, typeOrLanguageValue) {
    if(!(typeOrLanguageValue in entry)) {
      entry[typeOrLanguageValue] = term;
    }
  }

  /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */
  function _cloneActiveContext() {
    var child = {};
    child['@base'] = this['@base'];
    child.mappings = _clone(this.mappings);
    child.clone = this.clone;
    child.inverse = null;
    child.getInverse = this.getInverse;
    if('@language' in this) {
      child['@language'] = this['@language'];
    }
    if('@vocab' in this) {
      child['@vocab'] = this['@vocab'];
    }
    return child;
  }
}

/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */
function _isKeyword(v) {
  if(!_isString(v)) {
    return false;
  }
  switch(v) {
  case '@base':
  case '@context':
  case '@container':
  case '@default':
  case '@embed':
  case '@explicit':
  case '@graph':
  case '@id':
  case '@index':
  case '@language':
  case '@list':
  case '@omitDefault':
  case '@preserve':
  case '@requireAll':
  case '@reverse':
  case '@set':
  case '@type':
  case '@value':
  case '@vocab':
    return true;
  }
  return false;
}

/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */
function _isObject(v) {
  return (Object.prototype.toString.call(v) === '[object Object]');
}

/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */
function _isEmptyObject(v) {
  return _isObject(v) && Object.keys(v).length === 0;
}

/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */
function _isArray(v) {
  return Array.isArray(v);
}

/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */
function _validateTypeValue(v) {
  // can be a string or an empty object
  if(_isString(v) || _isEmptyObject(v)) {
    return;
  }

  // must be an array
  var isValid = false;
  if(_isArray(v)) {
    // must contain only strings
    isValid = true;
    for(var i = 0; i < v.length; ++i) {
      if(!(_isString(v[i]))) {
        isValid = false;
        break;
      }
    }
  }

  if(!isValid) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; "@type" value must a string, an array of ' +
      'strings, or an empty object.', 'jsonld.SyntaxError',
      {code: 'invalid type value', value: v});
  }
}

/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */
function _isString(v) {
  return (typeof v === 'string' ||
    Object.prototype.toString.call(v) === '[object String]');
}

/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */
function _isNumber(v) {
  return (typeof v === 'number' ||
    Object.prototype.toString.call(v) === '[object Number]');
}

/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */
function _isDouble(v) {
  return _isNumber(v) && String(v).indexOf('.') !== -1;
}

/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */
function _isNumeric(v) {
  return !isNaN(parseFloat(v)) && isFinite(v);
}

/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */
function _isBoolean(v) {
  return (typeof v === 'boolean' ||
    Object.prototype.toString.call(v) === '[object Boolean]');
}

/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */
function _isUndefined(v) {
  return (typeof v === 'undefined');
}

/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */
function _isSubject(v) {
  // Note: A value is a subject if all of these hold true:
  // 1. It is an Object.
  // 2. It is not a @value, @set, or @list.
  // 3. It has more than 1 key OR any existing key is not @id.
  var rval = false;
  if(_isObject(v) &&
    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {
    var keyCount = Object.keys(v).length;
    rval = (keyCount > 1 || !('@id' in v));
  }
  return rval;
}

/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */
function _isSubjectReference(v) {
  // Note: A value is a subject reference if all of these hold true:
  // 1. It is an Object.
  // 2. It has a single key: @id.
  return (_isObject(v) && Object.keys(v).length === 1 && ('@id' in v));
}

/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */
function _isValue(v) {
  // Note: A value is a @value if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @value property.
  return _isObject(v) && ('@value' in v);
}

/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */
function _isList(v) {
  // Note: A value is a @list if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @list property.
  return _isObject(v) && ('@list' in v);
}

/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */
function _isBlankNode(v) {
  // Note: A value is a blank node if all of these hold true:
  // 1. It is an Object.
  // 2. If it has an @id key its value begins with '_:'.
  // 3. It has no keys OR is not a @value, @set, or @list.
  var rval = false;
  if(_isObject(v)) {
    if('@id' in v) {
      rval = (v['@id'].indexOf('_:') === 0);
    } else {
      rval = (Object.keys(v).length === 0 ||
        !(('@value' in v) || ('@set' in v) || ('@list' in v)));
    }
  }
  return rval;
}

/**
 * Returns true if the given value is an absolute IRI, false if not.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */
function _isAbsoluteIri(v) {
  return _isString(v) && v.indexOf(':') !== -1;
}

/**
 * Clones an object, array, or string/number. If a typed JavaScript object
 * is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */
function _clone(value) {
  if(value && typeof value === 'object') {
    var rval;
    if(_isArray(value)) {
      rval = [];
      for(var i = 0; i < value.length; ++i) {
        rval[i] = _clone(value[i]);
      }
    } else if(_isObject(value)) {
      rval = {};
      for(var key in value) {
        rval[key] = _clone(value[key]);
      }
    } else {
      rval = value.toString();
    }
    return rval;
  }
  return value;
}

/**
 * Finds all @context URLs in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param urls a map of URLs (url => false/@contexts).
 * @param replace true to replace the URLs in the given input with the
 *           @contexts from the urls map, false not to.
 * @param base the base IRI to use to resolve relative IRIs.
 *
 * @return true if new URLs to retrieve were found, false if not.
 */
function _findContextUrls(input, urls, replace, base) {
  var count = Object.keys(urls).length;
  if(_isArray(input)) {
    for(var i = 0; i < input.length; ++i) {
      _findContextUrls(input[i], urls, replace, base);
    }
    return (count < Object.keys(urls).length);
  } else if(_isObject(input)) {
    for(var key in input) {
      if(key !== '@context') {
        _findContextUrls(input[key], urls, replace, base);
        continue;
      }

      // get @context
      var ctx = input[key];

      // array @context
      if(_isArray(ctx)) {
        var length = ctx.length;
        for(var i = 0; i < length; ++i) {
          var _ctx = ctx[i];
          if(_isString(_ctx)) {
            _ctx = jsonld.prependBase(base, _ctx);
            // replace w/@context if requested
            if(replace) {
              _ctx = urls[_ctx];
              if(_isArray(_ctx)) {
                // add flattened context
                Array.prototype.splice.apply(ctx, [i, 1].concat(_ctx));
                i += _ctx.length - 1;
                length = ctx.length;
              } else {
                ctx[i] = _ctx;
              }
            } else if(!(_ctx in urls)) {
              // @context URL found
              urls[_ctx] = false;
            }
          }
        }
      } else if(_isString(ctx)) {
        // string @context
        ctx = jsonld.prependBase(base, ctx);
        // replace w/@context if requested
        if(replace) {
          input[key] = urls[ctx];
        } else if(!(ctx in urls)) {
          // @context URL found
          urls[ctx] = false;
        }
      }
    }
    return (count < Object.keys(urls).length);
  }
  return false;
}

/**
 * Retrieves external @context URLs using the given document loader. Every
 * instance of @context in the input that refers to a URL will be replaced
 * with the JSON @context found at that URL.
 *
 * @param input the JSON-LD input with possible contexts.
 * @param options the options to use:
 *          documentLoader(url, callback(err, remoteDoc)) the document loader.
 * @param callback(err, input) called once the operation completes.
 */
function _retrieveContextUrls(input, options, callback) {
  // if any error occurs during URL resolution, quit
  var error = null;

  // recursive document loader
  var documentLoader = options.documentLoader;
  var retrieve = function(input, cycles, documentLoader, base, callback) {
    if(Object.keys(cycles).length > MAX_CONTEXT_URLS) {
      error = new JsonLdError(
        'Maximum number of @context URLs exceeded.',
        'jsonld.ContextUrlError',
        {code: 'loading remote context failed', max: MAX_CONTEXT_URLS});
      return callback(error);
    }

    // for tracking the URLs to retrieve
    var urls = {};

    // finished will be called once the URL queue is empty
    var finished = function() {
      // replace all URLs in the input
      _findContextUrls(input, urls, true, base);
      callback(null, input);
    };

    // find all URLs in the given input
    if(!_findContextUrls(input, urls, false, base)) {
      // no new URLs in input
      return finished();
    }

    // queue all unretrieved URLs
    var queue = [];
    for(var url in urls) {
      if(urls[url] === false) {
        queue.push(url);
      }
    }

    // retrieve URLs in queue
    var count = queue.length;
    for(var i = 0; i < queue.length; ++i) {
      (function(url) {
        // check for context URL cycle
        if(url in cycles) {
          error = new JsonLdError(
            'Cyclical @context URLs detected.',
            'jsonld.ContextUrlError',
            {code: 'recursive context inclusion', url: url});
          return callback(error);
        }
        var _cycles = _clone(cycles);
        _cycles[url] = true;
        var done = function(err, remoteDoc) {
          // short-circuit if there was an error with another URL
          if(error) {
            return;
          }

          var ctx = remoteDoc ? remoteDoc.document : null;

          // parse string context as JSON
          if(!err && _isString(ctx)) {
            try {
              ctx = JSON.parse(ctx);
            } catch(ex) {
              err = ex;
            }
          }

          // ensure ctx is an object
          if(err) {
            err = new JsonLdError(
              'Dereferencing a URL did not result in a valid JSON-LD object. ' +
              'Possible causes are an inaccessible URL perhaps due to ' +
              'a same-origin policy (ensure the server uses CORS if you are ' +
              'using client-side JavaScript), too many redirects, a ' +
              'non-JSON response, or more than one HTTP Link Header was ' +
              'provided for a remote context.',
              'jsonld.InvalidUrl',
              {code: 'loading remote context failed', url: url, cause: err});
          } else if(!_isObject(ctx)) {
            err = new JsonLdError(
              'Dereferencing a URL did not result in a JSON object. The ' +
              'response was valid JSON, but it was not a JSON object.',
              'jsonld.InvalidUrl',
              {code: 'invalid remote context', url: url, cause: err});
          }
          if(err) {
            error = err;
            return callback(error);
          }

          // use empty context if no @context key is present
          if(!('@context' in ctx)) {
            ctx = {'@context': {}};
          } else {
            ctx = {'@context': ctx['@context']};
          }

          // append context URL to context if given
          if(remoteDoc.contextUrl) {
            if(!_isArray(ctx['@context'])) {
              ctx['@context'] = [ctx['@context']];
            }
            ctx['@context'].push(remoteDoc.contextUrl);
          }

          // recurse
          retrieve(ctx, _cycles, documentLoader, url, function(err, ctx) {
            if(err) {
              return callback(err);
            }
            urls[url] = ctx['@context'];
            count -= 1;
            if(count === 0) {
              finished();
            }
          });
        };
        var promise = documentLoader(url, done);
        if(promise && 'then' in promise) {
          promise.then(done.bind(null, null), done);
        }
      }(queue[i]));
    }
  };
  retrieve(input, {}, documentLoader, options.base, callback);
}

// define js 1.8.5 Object.keys method if not present
if(!Object.keys) {
  Object.keys = function(o) {
    if(o !== Object(o)) {
      throw new TypeError('Object.keys called on non-object');
    }
    var rval = [];
    for(var p in o) {
      if(Object.prototype.hasOwnProperty.call(o, p)) {
        rval.push(p);
      }
    }
    return rval;
  };
}

/**
 * Parses RDF in the form of N-Quads.
 *
 * @param input the N-Quads input to parse.
 *
 * @return an RDF dataset.
 */
function _parseNQuads(input) {
  // define partial regexes
  var iri = '(?:<([^:]+:[^>]*)>)';
  var bnode = '(_:(?:[A-Za-z0-9]+))';
  var plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
  var datatype = '(?:\\^\\^' + iri + ')';
  var language = '(?:@([a-z]+(?:-[a-z0-9]+)*))';
  var literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
  var comment = '(?:#.*)?';
  var ws = '[ \\t]+';
  var wso = '[ \\t]*';
  var eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
  var empty = new RegExp('^' + wso + comment + '$');

  // define quad part regexes
  var subject = '(?:' + iri + '|' + bnode + ')' + ws;
  var property = iri + ws;
  var object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
  var graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';

  // full quad regex
  var quad = new RegExp(
    '^' + wso + subject + property + object + graphName + wso + comment + '$');

  // build RDF dataset
  var dataset = {};

  // split N-Quad input into lines
  var lines = input.split(eoln);
  var lineNumber = 0;
  for(var li = 0; li < lines.length; ++li) {
    var line = lines[li];
    lineNumber++;

    // skip empty lines
    if(empty.test(line)) {
      continue;
    }

    // parse quad
    var match = line.match(quad);
    if(match === null) {
      throw new JsonLdError(
        'Error while parsing N-Quads; invalid quad.',
        'jsonld.ParseError', {line: lineNumber});
    }

    // create RDF triple
    var triple = {};

    // get subject
    if(!_isUndefined(match[1])) {
      triple.subject = {type: 'IRI', value: match[1]};
    } else {
      triple.subject = {type: 'blank node', value: match[2]};
    }

    // get predicate
    triple.predicate = {type: 'IRI', value: match[3]};

    // get object
    if(!_isUndefined(match[4])) {
      triple.object = {type: 'IRI', value: match[4]};
    } else if(!_isUndefined(match[5])) {
      triple.object = {type: 'blank node', value: match[5]};
    } else {
      triple.object = {type: 'literal'};
      if(!_isUndefined(match[7])) {
        triple.object.datatype = match[7];
      } else if(!_isUndefined(match[8])) {
        triple.object.datatype = RDF_LANGSTRING;
        triple.object.language = match[8];
      } else {
        triple.object.datatype = XSD_STRING;
      }
      var unescaped = match[6]
        .replace(/\\"/g, '"')
        .replace(/\\t/g, '\t')
        .replace(/\\n/g, '\n')
        .replace(/\\r/g, '\r')
        .replace(/\\\\/g, '\\');
      triple.object.value = unescaped;
    }

    // get graph name ('@default' is used for the default graph)
    var name = '@default';
    if(!_isUndefined(match[9])) {
      name = match[9];
    } else if(!_isUndefined(match[10])) {
      name = match[10];
    }

    // initialize graph in dataset
    if(!(name in dataset)) {
      dataset[name] = [triple];
    } else {
      // add triple if unique to its graph
      var unique = true;
      var triples = dataset[name];
      for(var ti = 0; unique && ti < triples.length; ++ti) {
        if(_compareRDFTriples(triples[ti], triple)) {
          unique = false;
        }
      }
      if(unique) {
        triples.push(triple);
      }
    }
  }

  return dataset;
}

// register the N-Quads RDF parser
jsonld.registerRDFParser('application/nquads', _parseNQuads);

/**
 * Converts an RDF dataset to N-Quads.
 *
 * @param dataset the RDF dataset to convert.
 *
 * @return the N-Quads string.
 */
function _toNQuads(dataset) {
  var quads = [];
  for(var graphName in dataset) {
    var triples = dataset[graphName];
    for(var ti = 0; ti < triples.length; ++ti) {
      var triple = triples[ti];
      if(graphName === '@default') {
        graphName = null;
      }
      quads.push(_toNQuad(triple, graphName));
    }
  }
  return quads.sort().join('');
}

/**
 * Converts an RDF triple and graph name to an N-Quad string (a single quad).
 *
 * @param triple the RDF triple or quad to convert (a triple or quad may be
 *          passed, if a triple is passed then `graphName` should be given
 *          to specify the name of the graph the triple is in, `null` for
 *          the default graph).
 * @param graphName the name of the graph containing the triple, null for
 *          the default graph.
 *
 * @return the N-Quad string.
 */
function _toNQuad(triple, graphName) {
  var s = triple.subject;
  var p = triple.predicate;
  var o = triple.object;
  var g = graphName || null;
  if('name' in triple && triple.name) {
    g = triple.name.value;
  }

  var quad = '';

  // subject is an IRI
  if(s.type === 'IRI') {
    quad += '<' + s.value + '>';
  } else {
    quad += s.value;
  }
  quad += ' ';

  // predicate is an IRI
  if(p.type === 'IRI') {
    quad += '<' + p.value + '>';
  } else {
    quad += p.value;
  }
  quad += ' ';

  // object is IRI, bnode, or literal
  if(o.type === 'IRI') {
    quad += '<' + o.value + '>';
  } else if(o.type === 'blank node') {
    quad += o.value;
  } else {
    var escaped = o.value
      .replace(/\\/g, '\\\\')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/\"/g, '\\"');
    quad += '"' + escaped + '"';
    if(o.datatype === RDF_LANGSTRING) {
      if(o.language) {
        quad += '@' + o.language;
      }
    } else if(o.datatype !== XSD_STRING) {
      quad += '^^<' + o.datatype + '>';
    }
  }

  // graph
  if(g !== null && g !== undefined) {
    if(g.indexOf('_:') !== 0) {
      quad += ' <' + g + '>';
    } else {
      quad += ' ' + g;
    }
  }

  quad += ' .\n';
  return quad;
}

/**
 * Parses the RDF dataset found via the data object from the RDFa API.
 *
 * @param data the RDFa API data object.
 *
 * @return the RDF dataset.
 */
function _parseRdfaApiData(data) {
  var dataset = {};
  dataset['@default'] = [];

  var subjects = data.getSubjects();
  for(var si = 0; si < subjects.length; ++si) {
    var subject = subjects[si];
    if(subject === null) {
      continue;
    }

    // get all related triples
    var triples = data.getSubjectTriples(subject);
    if(triples === null) {
      continue;
    }
    var predicates = triples.predicates;
    for(var predicate in predicates) {
      // iterate over objects
      var objects = predicates[predicate].objects;
      for(var oi = 0; oi < objects.length; ++oi) {
        var object = objects[oi];

        // create RDF triple
        var triple = {};

        // add subject
        if(subject.indexOf('_:') === 0) {
          triple.subject = {type: 'blank node', value: subject};
        } else {
          triple.subject = {type: 'IRI', value: subject};
        }

        // add predicate
        if(predicate.indexOf('_:') === 0) {
          triple.predicate = {type: 'blank node', value: predicate};
        } else {
          triple.predicate = {type: 'IRI', value: predicate};
        }

        // serialize XML literal
        var value = object.value;
        if(object.type === RDF_XML_LITERAL) {
          // initialize XMLSerializer
          if(!XMLSerializer) {
            _defineXMLSerializer();
          }
          var serializer = new XMLSerializer();
          value = '';
          for(var x = 0; x < object.value.length; x++) {
            if(object.value[x].nodeType === Node.ELEMENT_NODE) {
              value += serializer.serializeToString(object.value[x]);
            } else if(object.value[x].nodeType === Node.TEXT_NODE) {
              value += object.value[x].nodeValue;
            }
          }
        }

        // add object
        triple.object = {};

        // object is an IRI
        if(object.type === RDF_OBJECT) {
          if(object.value.indexOf('_:') === 0) {
            triple.object.type = 'blank node';
          } else {
            triple.object.type = 'IRI';
          }
        } else {
          // object is a literal
          triple.object.type = 'literal';
          if(object.type === RDF_PLAIN_LITERAL) {
            if(object.language) {
              triple.object.datatype = RDF_LANGSTRING;
              triple.object.language = object.language;
            } else {
              triple.object.datatype = XSD_STRING;
            }
          } else {
            triple.object.datatype = object.type;
          }
        }
        triple.object.value = value;

        // add triple to dataset in default graph
        dataset['@default'].push(triple);
      }
    }
  }

  return dataset;
}

// register the RDFa API RDF parser
jsonld.registerRDFParser('rdfa-api', _parseRdfaApiData);

/**
 * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
 * identifiers, keeping track of any previously issued identifiers.
 *
 * @param prefix the prefix to use ('<prefix><counter>').
 */
function IdentifierIssuer(prefix) {
  this.prefix = prefix;
  this.counter = 0;
  this.existing = {};
}
jsonld.IdentifierIssuer = IdentifierIssuer;
// backwards-compability
jsonld.UniqueNamer = IdentifierIssuer;

/**
 * Copies this IdentifierIssuer.
 *
 * @return a copy of this IdentifierIssuer.
 */
IdentifierIssuer.prototype.clone = function() {
  var copy = new IdentifierIssuer(this.prefix);
  copy.counter = this.counter;
  copy.existing = _clone(this.existing);
  return copy;
};

/**
 * Gets the new identifier for the given old identifier, where if no old
 * identifier is given a new identifier will be generated.
 *
 * @param [old] the old identifier to get the new identifier for.
 *
 * @return the new identifier.
 */
IdentifierIssuer.prototype.getId = function(old) {
  // return existing old identifier
  if(old && old in this.existing) {
    return this.existing[old];
  }

  // get next identifier
  var identifier = this.prefix + this.counter;
  this.counter += 1;

  // save mapping
  if(old) {
    this.existing[old] = identifier;
  }

  return identifier;
};
// alias
IdentifierIssuer.prototype.getName = IdentifierIssuer.prototype.getName;

/**
 * Returns true if the given old identifer has already been assigned a new
 * identifier.
 *
 * @param old the old identifier to check.
 *
 * @return true if the old identifier has been assigned a new identifier, false
 *   if not.
 */
IdentifierIssuer.prototype.hasId = function(old) {
  return (old in this.existing);
};
// alias
IdentifierIssuer.prototype.isNamed = IdentifierIssuer.prototype.hasId;

/**
 * A Permutator iterates over all possible permutations of the given array
 * of elements.
 *
 * @param list the array of elements to iterate over.
 */
var Permutator = function(list) {
  // original array
  this.list = list.sort();
  // indicates whether there are more permutations
  this.done = false;
  // directional info for permutation algorithm
  this.left = {};
  for(var i = 0; i < list.length; ++i) {
    this.left[list[i]] = true;
  }
};

/**
 * Returns true if there is another permutation.
 *
 * @return true if there is another permutation, false if not.
 */
Permutator.prototype.hasNext = function() {
  return !this.done;
};

/**
 * Gets the next permutation. Call hasNext() to ensure there is another one
 * first.
 *
 * @return the next permutation.
 */
Permutator.prototype.next = function() {
  // copy current permutation
  var rval = this.list.slice();

  /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
   permutation algorithm. */

  // get largest mobile element k
  // (mobile: element is greater than the one it is looking at)
  var k = null;
  var pos = 0;
  var length = this.list.length;
  for(var i = 0; i < length; ++i) {
    var element = this.list[i];
    var left = this.left[element];
    if((k === null || element > k) &&
      ((left && i > 0 && element > this.list[i - 1]) ||
      (!left && i < (length - 1) && element > this.list[i + 1]))) {
      k = element;
      pos = i;
    }
  }

  // no more permutations
  if(k === null) {
    this.done = true;
  } else {
    // swap k and the element it is looking at
    var swap = this.left[k] ? pos - 1 : pos + 1;
    this.list[pos] = this.list[swap];
    this.list[swap] = k;

    // reverse the direction of all elements larger than k
    for(var i = 0; i < length; ++i) {
      if(this.list[i] > k) {
        this.left[this.list[i]] = !this.left[this.list[i]];
      }
    }
  }

  return rval;
};

//////////////////////// DEFINE NORMALIZATION HASH API ////////////////////////

/**
 * Creates a new NormalizeHash for use by the given normalization algorithm.
 *
 * @param algorithm the RDF Dataset Normalization algorithm to use:
 *          'URDNA2015' or 'URGNA2012'.
 */
var NormalizeHash = function(algorithm) {
  if(!(this instanceof NormalizeHash)) {
    return new NormalizeHash(algorithm);
  }
  if(['URDNA2015', 'URGNA2012'].indexOf(algorithm) === -1) {
    throw new Error(
      'Invalid RDF Dataset Normalization algorithm: ' + algorithm);
  }
  NormalizeHash._init.call(this, algorithm);
};
NormalizeHash.hashNQuads = function(algorithm, nquads) {
  var md = new NormalizeHash(algorithm);
  for(var i = 0; i < nquads.length; ++i) {
    md.update(nquads[i]);
  }
  return md.digest();
};

// switch definition of NormalizeHash based on environment
(function(_nodejs) {

if(_nodejs) {
  // define NormalizeHash using native crypto lib
  var crypto = _dereq_('crypto');
  NormalizeHash._init = function(algorithm) {
    if(algorithm === 'URDNA2015') {
      algorithm = 'sha256';
    } else {
      // assume URGNA2012
      algorithm = 'sha1';
    }
    this.md = crypto.createHash(algorithm);
  };
  NormalizeHash.prototype.update = function(msg) {
    return this.md.update(msg, 'utf8');
  };
  NormalizeHash.prototype.digest = function() {
    return this.md.digest('hex');
  };
  return;
}

// define NormalizeHash using JavaScript
NormalizeHash._init = function(algorithm) {
  if(algorithm === 'URDNA2015') {
    algorithm = new sha256.Algorithm();
  } else {
    // assume URGNA2012
    algorithm = new sha1.Algorithm();
  }
  this.md = new MessageDigest(algorithm);
};
NormalizeHash.prototype.update = function(msg) {
  return this.md.update(msg);
};
NormalizeHash.prototype.digest = function() {
  return this.md.digest().toHex();
};

/////////////////////////// DEFINE MESSAGE DIGEST API /////////////////////////

/**
 * Creates a new MessageDigest.
 *
 * @param algorithm the algorithm to use.
 */
var MessageDigest = function(algorithm) {
  if(!(this instanceof MessageDigest)) {
    return new MessageDigest(algorithm);
  }

  this._algorithm = algorithm;

  // create shared padding as needed
  if(!MessageDigest._padding ||
    MessageDigest._padding.length < this._algorithm.blockSize) {
    MessageDigest._padding = String.fromCharCode(128);
    var c = String.fromCharCode(0x00);
    var n = 64;
    while(n > 0) {
      if(n & 1) {
        MessageDigest._padding += c;
      }
      n >>>= 1;
      if(n > 0) {
        c += c;
      }
    }
  }

  // start digest automatically for first time
  this.start();
};

/**
 * Starts the digest.
 *
 * @return this digest object.
 */
MessageDigest.prototype.start = function() {
  // up to 56-bit message length for convenience
  this.messageLength = 0;

  // full message length
  this.fullMessageLength = [];
  var int32s = this._algorithm.messageLengthSize / 4;
  for(var i = 0; i < int32s; ++i) {
    this.fullMessageLength.push(0);
  }

  // input buffer
  this._input = new MessageDigest.ByteBuffer();

  // get starting state
  this.state = this._algorithm.start();

  return this;
};

/**
 * Updates the digest with the given message input. The input must be
 * a string of characters.
 *
 * @param msg the message input to update with (ByteBuffer or string).
 *
 * @return this digest object.
 */
MessageDigest.prototype.update = function(msg) {
  // encode message as a UTF-8 encoded binary string
  msg = new MessageDigest.ByteBuffer(unescape(encodeURIComponent(msg)));

  // update message length
  this.messageLength += msg.length();
  var len = msg.length();
  len = [(len / 0x100000000) >>> 0, len >>> 0];
  for(var i = this.fullMessageLength.length - 1; i >= 0; --i) {
    this.fullMessageLength[i] += len[1];
    len[1] = len[0] + ((this.fullMessageLength[i] / 0x100000000) >>> 0);
    this.fullMessageLength[i] = this.fullMessageLength[i] >>> 0;
    len[0] = ((len[1] / 0x100000000) >>> 0);
  }

  // add bytes to input buffer
  this._input.putBytes(msg.bytes());

  // digest blocks
  while(this._input.length() >= this._algorithm.blockSize) {
    this.state = this._algorithm.digest(this.state, this._input);
  }

  // compact input buffer every 2K or if empty
  if(this._input.read > 2048 || this._input.length() === 0) {
    this._input.compact();
  }

  return this;
};

/**
 * Produces the digest.
 *
 * @return a byte buffer containing the digest value.
 */
MessageDigest.prototype.digest = function() {
  /* Note: Here we copy the remaining bytes in the input buffer and add the
  appropriate padding. Then we do the final update on a copy of the state so
  that if the user wants to get intermediate digests they can do so. */

  /* Determine the number of bytes that must be added to the message to
  ensure its length is appropriately congruent. In other words, the data to
  be digested must be a multiple of `blockSize`. This data includes the
  message, some padding, and the length of the message. Since the length of
  the message will be encoded as `messageLengthSize` bytes, that means that
  the last segment of the data must have `blockSize` - `messageLengthSize`
  bytes of message and padding. Therefore, the length of the message plus the
  padding must be congruent to X mod `blockSize` because
  `blockSize` - `messageLengthSize` = X.

  For example, SHA-1 is congruent to 448 mod 512 and SHA-512 is congruent to
  896 mod 1024. SHA-1 uses a `blockSize` of 64 bytes (512 bits) and a
  `messageLengthSize` of 8 bytes (64 bits). SHA-512 uses a `blockSize` of
  128 bytes (1024 bits) and a `messageLengthSize` of 16 bytes (128 bits).

  In order to fill up the message length it must be filled with padding that
  begins with 1 bit followed by all 0 bits. Padding must *always* be present,
  so if the message length is already congruent, then `blockSize` padding bits
  must be added. */

  // create final block
  var finalBlock = new MessageDigest.ByteBuffer();
  finalBlock.putBytes(this._input.bytes());

  // compute remaining size to be digested (include message length size)
  var remaining = (
    this.fullMessageLength[this.fullMessageLength.length - 1] +
    this._algorithm.messageLengthSize);

  // add padding for overflow blockSize - overflow
  // _padding starts with 1 byte with first bit is set (byte value 128), then
  // there may be up to (blockSize - 1) other pad bytes
  var overflow = remaining & (this._algorithm.blockSize - 1);
  finalBlock.putBytes(MessageDigest._padding.substr(
    0, this._algorithm.blockSize - overflow));

  // serialize message length in bits in big-endian order; since length
  // is stored in bytes we multiply by 8 (left shift by 3 and merge in
  // remainder from )
  var messageLength = new MessageDigest.ByteBuffer();
  for(var i = 0; i < this.fullMessageLength.length; ++i) {
    messageLength.putInt32((this.fullMessageLength[i] << 3) |
      (this.fullMessageLength[i + 1] >>> 28));
  }

  // write the length of the message (algorithm-specific)
  this._algorithm.writeMessageLength(finalBlock, messageLength);

  // digest final block
  var state = this._algorithm.digest(this.state.copy(), finalBlock);

  // write state to buffer
  var rval = new MessageDigest.ByteBuffer();
  state.write(rval);
  return rval;
};

/**
 * Creates a simple byte buffer for message digest operations.
 *
 * @param data the data to put in the buffer.
 */
MessageDigest.ByteBuffer = function(data) {
  if(typeof data === 'string') {
    this.data = data;
  } else {
    this.data = '';
  }
  this.read = 0;
};

/**
 * Puts a 32-bit integer into this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 */
MessageDigest.ByteBuffer.prototype.putInt32 = function(i) {
  this.data += (
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Gets a 32-bit integer from this buffer in big-endian order and
 * advances the read pointer by 4.
 *
 * @return the word.
 */
MessageDigest.ByteBuffer.prototype.getInt32 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 24 ^
    this.data.charCodeAt(this.read + 1) << 16 ^
    this.data.charCodeAt(this.read + 2) << 8 ^
    this.data.charCodeAt(this.read + 3));
  this.read += 4;
  return rval;
};

/**
 * Puts the given bytes into this buffer.
 *
 * @param bytes the bytes as a binary-encoded string.
 */
MessageDigest.ByteBuffer.prototype.putBytes = function(bytes) {
  this.data += bytes;
};

/**
 * Gets the bytes in this buffer.
 *
 * @return a string full of UTF-8 encoded characters.
 */
MessageDigest.ByteBuffer.prototype.bytes = function() {
  return this.data.slice(this.read);
};

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
MessageDigest.ByteBuffer.prototype.length = function() {
  return this.data.length - this.read;
};

/**
 * Compacts this buffer.
 */
MessageDigest.ByteBuffer.prototype.compact = function() {
  this.data = this.data.slice(this.read);
  this.read = 0;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
MessageDigest.ByteBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

///////////////////////////// DEFINE SHA-1 ALGORITHM //////////////////////////

var sha1 = {
  // used for word storage
  _w: null
};

sha1.Algorithm = function() {
  this.name = 'sha1',
  this.blockSize = 64;
  this.digestLength = 20;
  this.messageLengthSize = 8;
};

sha1.Algorithm.prototype.start = function() {
  if(!sha1._w) {
    sha1._w = new Array(80);
  }
  return sha1._createState();
};

sha1.Algorithm.prototype.writeMessageLength = function(
  finalBlock, messageLength) {
  // message length is in bits and in big-endian order; simply append
  finalBlock.putBytes(messageLength.bytes());
};

sha1.Algorithm.prototype.digest = function(s, input) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = input.length();
  var _w = sha1._w;
  while(len >= 64) {
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;

    // the _w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization

    // round 1
    for(i = 0; i < 16; ++i) {
      t = input.getInt32();
      _w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }
    for(; i < 20; ++i) {
      t = (_w[i - 3] ^ _w[i - 8] ^ _w[i - 14] ^ _w[i - 16]);
      t = (t << 1) | (t >>> 31);
      _w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }
    // round 2
    for(; i < 32; ++i) {
      t = (_w[i - 3] ^ _w[i - 8] ^ _w[i - 14] ^ _w[i - 16]);
      t = (t << 1) | (t >>> 31);
      _w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }
    for(; i < 40; ++i) {
      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
      t = (t << 2) | (t >>> 30);
      _w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }
    // round 3
    for(; i < 60; ++i) {
      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
      t = (t << 2) | (t >>> 30);
      _w[i] = t;
      f = (b & c) | (d & (b ^ c));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }
    // round 4
    for(; i < 80; ++i) {
      t = (_w[i - 6] ^ _w[i - 16] ^ _w[i - 28] ^ _w[i - 32]);
      t = (t << 2) | (t >>> 30);
      _w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c;
      c = (b << 30) | (b >>> 2);
      b = a;
      a = t;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;

    len -= 64;
  }

  return s;
};

sha1._createState = function() {
  var state = {
    h0: 0x67452301,
    h1: 0xEFCDAB89,
    h2: 0x98BADCFE,
    h3: 0x10325476,
    h4: 0xC3D2E1F0
  };
  state.copy = function() {
    var rval = sha1._createState();
    rval.h0 = state.h0;
    rval.h1 = state.h1;
    rval.h2 = state.h2;
    rval.h3 = state.h3;
    rval.h4 = state.h4;
    return rval;
  };
  state.write = function(buffer) {
    buffer.putInt32(state.h0);
    buffer.putInt32(state.h1);
    buffer.putInt32(state.h2);
    buffer.putInt32(state.h3);
    buffer.putInt32(state.h4);
  };
  return state;
};

//////////////////////////// DEFINE SHA-256 ALGORITHM /////////////////////////

var sha256 = {
  // shared state
  _k: null,
  _w: null
};

sha256.Algorithm = function() {
  this.name = 'sha256',
  this.blockSize = 64;
  this.digestLength = 32;
  this.messageLengthSize = 8;
};

sha256.Algorithm.prototype.start = function() {
  if(!sha256._k) {
    sha256._init();
  }
  return sha256._createState();
};

sha256.Algorithm.prototype.writeMessageLength = function(
  finalBlock, messageLength) {
  // message length is in bits and in big-endian order; simply append
  finalBlock.putBytes(messageLength.bytes());
};

sha256.Algorithm.prototype.digest = function(s, input) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = input.length();
  var _k = sha256._k;
  var _w = sha256._w;
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for(i = 0; i < 16; ++i) {
      _w[i] = input.getInt32();
    }
    for(; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = _w[i - 2];
      t1 =
        ((t1 >>> 17) | (t1 << 15)) ^
        ((t1 >>> 19) | (t1 << 13)) ^
        (t1 >>> 10);
      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
      t2 = _w[i - 15];
      t2 =
        ((t2 >>> 7) | (t2 << 25)) ^
        ((t2 >>> 18) | (t2 << 14)) ^
        (t2 >>> 3);
      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
      _w[i] = (t1 + _w[i - 7] + t2 + _w[i - 16]) | 0;
    }

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7;

    // round function
    for(i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 =
        ((e >>> 6) | (e << 26)) ^
        ((e >>> 11) | (e << 21)) ^
        ((e >>> 25) | (e << 7));
      // Ch(e, f, g) (optimized the same way as SHA-1)
      ch = g ^ (e & (f ^ g));
      // Sum0(a)
      s0 =
        ((a >>> 2) | (a << 30)) ^
        ((a >>> 13) | (a << 19)) ^
        ((a >>> 22) | (a << 10));
      // Maj(a, b, c) (optimized the same way as SHA-1)
      maj = (a & b) | (c & (a ^ b));

      // main algorithm
      t1 = h + s1 + ch + _k[i] + _w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e;
      e = (d + t1) | 0;
      d = c;
      c = b;
      b = a;
      a = (t1 + t2) | 0;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;
    s.h5 = (s.h5 + f) | 0;
    s.h6 = (s.h6 + g) | 0;
    s.h7 = (s.h7 + h) | 0;
    len -= 64;
  }

  return s;
};

sha256._createState = function() {
  var state = {
    h0: 0x6A09E667,
    h1: 0xBB67AE85,
    h2: 0x3C6EF372,
    h3: 0xA54FF53A,
    h4: 0x510E527F,
    h5: 0x9B05688C,
    h6: 0x1F83D9AB,
    h7: 0x5BE0CD19
  };
  state.copy = function() {
    var rval = sha256._createState();
    rval.h0 = state.h0;
    rval.h1 = state.h1;
    rval.h2 = state.h2;
    rval.h3 = state.h3;
    rval.h4 = state.h4;
    rval.h5 = state.h5;
    rval.h6 = state.h6;
    rval.h7 = state.h7;
    return rval;
  };
  state.write = function(buffer) {
    buffer.putInt32(state.h0);
    buffer.putInt32(state.h1);
    buffer.putInt32(state.h2);
    buffer.putInt32(state.h3);
    buffer.putInt32(state.h4);
    buffer.putInt32(state.h5);
    buffer.putInt32(state.h6);
    buffer.putInt32(state.h7);
  };
  return state;
};

sha256._init = function() {
  // create K table for SHA-256
  sha256._k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  // used for word storage
  sha256._w = new Array(64);
};

})(_nodejs); // end definition of NormalizeHash

if(!XMLSerializer) {

var _defineXMLSerializer = function() {
  XMLSerializer = _dereq_('xmldom').XMLSerializer;
};

} // end _defineXMLSerializer

// define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications
jsonld.url = {};
jsonld.url.parsers = {
  simple: {
    // RFC 3986 basic parts
    keys: ['href','scheme','authority','path','query','fragment'],
    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
  },
  full: {
    keys: ['href','protocol','scheme','authority','auth','user','password','hostname','port','path','directory','file','query','fragment'],
    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};
jsonld.url.parse = function(str, parser) {
  var parsed = {};
  var o = jsonld.url.parsers[parser || 'full'];
  var m = o.regex.exec(str);
  var i = o.keys.length;
  while(i--) {
    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];
  }
  parsed.normalizedPath = _removeDotSegments(parsed.path, !!parsed.authority);
  return parsed;
};

/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 * @param hasAuthority true if the URL has an authority, false if not.
 */
function _removeDotSegments(path, hasAuthority) {
  var rval = '';

  if(path.indexOf('/') === 0) {
    rval = '/';
  }

  // RFC 3986 5.2.4 (reworked)
  var input = path.split('/');
  var output = [];
  while(input.length > 0) {
    if(input[0] === '.' || (input[0] === '' && input.length > 1)) {
      input.shift();
      continue;
    }
    if(input[0] === '..') {
      input.shift();
      if(hasAuthority ||
        (output.length > 0 && output[output.length - 1] !== '..')) {
        output.pop();
      } else {
        // leading relative URL '..'
        output.push('..');
      }
      continue;
    }
    output.push(input.shift());
  }

  return rval + output.join('/');
}

if(_nodejs) {
  // use node document loader by default
  jsonld.useDocumentLoader('node');
} else if(typeof XMLHttpRequest !== 'undefined') {
  // use xhr document loader by default
  jsonld.useDocumentLoader('xhr');
}

if(_nodejs) {
  jsonld.use = function(extension) {
    switch(extension) {
      // TODO: Deprecated as of 0.4.0. Remove at some point.
      case 'request':
        // use node JSON-LD request extension
        jsonld.request = _dereq_('jsonld-request');
        break;
      default:
        throw new JsonLdError(
          'Unknown extension.',
          'jsonld.UnknownExtension', {extension: extension});
    }
  };

  // expose version
  var _module = {exports: {}, filename: __dirname};
  _dereq_('pkginfo')(_module, 'version');
  jsonld.version = _module.exports.version;
}

// end of jsonld API factory
return jsonld;
};

// external APIs:

// used to generate a new jsonld API instance
var factory = function() {
  return wrapper(function() {
    return factory();
  });
};

if(!_nodejs && (typeof define === 'function' && define.amd)) {
  // export AMD API
  define([], function() {
    // now that module is defined, wrap main jsonld API instance
    wrapper(factory);
    return factory;
  });
} else {
  // wrap the main jsonld API instance
  wrapper(factory);

  if(typeof _dereq_ === 'function' &&
    typeof module !== 'undefined' && module.exports) {
    // export CommonJS/nodejs API
    module.exports = factory;
  }

  if(_browser) {
    // export simple browser API
    if(typeof jsonld === 'undefined') {
      jsonld = jsonldjs = factory;
    } else {
      jsonldjs = factory;
    }
  }
}

return factory;

})();

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},"/../../libsbgn-js/node_modules/jsonld/js")

},{"_process":20,"crypto":68,"es6-promise":67,"http":68,"jsonld-request":68,"pkginfo":68,"request":68,"util":68,"xmldom":68}],70:[function(_dereq_,module,exports){
// Replace local require by a lazy loader
var globalRequire = _dereq_;
_dereq_ = function () {};

// Expose submodules
var exports = module.exports = {
  Lexer:        _dereq_('./lib/N3Lexer'),
  Parser:       _dereq_('./lib/N3Parser'),
  Writer:       _dereq_('./lib/N3Writer'),
  Store:        _dereq_('./lib/N3Store'),
  StreamParser: _dereq_('./lib/N3StreamParser'),
  StreamWriter: _dereq_('./lib/N3StreamWriter'),
  Util:         _dereq_('./lib/N3Util'),
};

// Load submodules on first access
Object.keys(exports).forEach(function (submodule) {
  Object.defineProperty(exports, submodule, {
    configurable: true,
    enumerable: true,
    get: function () {
      delete exports[submodule];
      return exports[submodule] = globalRequire('./lib/N3' + submodule);
    },
  });
});

},{"./lib/N3Lexer":71,"./lib/N3Parser":72,"./lib/N3Store":73,"./lib/N3StreamParser":74,"./lib/N3StreamWriter":75,"./lib/N3Util":76,"./lib/N3Writer":77}],71:[function(_dereq_,module,exports){
// **N3Lexer** tokenizes N3 documents.
var fromCharCode = String.fromCharCode;
var immediately = typeof setImmediate === 'function' ? setImmediate :
                  function setImmediate(func) { setTimeout(func, 0); };

// Regular expression and replacement string to escape N3 strings.
// Note how we catch invalid unicode sequences separately (they will trigger an error).
var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\[uU]|\\(.)/g;
var escapeReplacements = {
  '\\': '\\', "'": "'", '"': '"',
  'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
};
var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;

// ## Constructor
function N3Lexer(options) {
  if (!(this instanceof N3Lexer))
    return new N3Lexer(options);
  options = options || {};

  // In line mode (N-Triples or N-Quads), only simple features may be parsed
  if (options.lineMode) {
    // Don't tokenize special literals
    this._tripleQuotedString = this._number = this._boolean = /$0^/;
    // Swap the tokenize method for a restricted version
    var self = this;
    this._tokenize = this.tokenize;
    this.tokenize = function (input, callback) {
      this._tokenize(input, function (error, token) {
        if (!error && /^(?:IRI|prefixed|literal|langcode|type|\.|eof)$/.test(token.type))
          callback && callback(error, token);
        else
          callback && callback(error || self._syntaxError(token.type, callback = null));
      });
    };
  }
  // Enable N3 functionality by default
  this._n3Mode = options.n3 !== false;
  // Disable comment tokens by default
  this._comments = !!options.comments;
}

N3Lexer.prototype = {
  // ## Regular expressions
  // It's slightly faster to have these as properties than as in-scope variables

  _iri: /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/, // IRI with escape sequences; needs sanity check after unescaping
  _unescapedIri: /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/, // IRI without escape sequences; no unescaping
  _unescapedString: /^"[^"\\]+"(?=[^"\\])/, // non-empty string without escape sequences
  _singleQuotedString: /^"[^"\\]*(?:\\.[^"\\]*)*"(?=[^"\\])|^'[^'\\]*(?:\\.[^'\\]*)*'(?=[^'\\])/,
  _tripleQuotedString: /^""("[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*")""|^''('[^'\\]*(?:(?:\\.|'(?!''))[^'\\]*)*')''/,
  _langcode: /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i,
  _prefix: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/,
  _prefixed: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<]))/,
  _variable: /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<])/,
  _blank: /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<]))/,
  _number: /^[\-+]?(?:\d+\.?\d*([eE](?:[\-\+])?\d+)|\d*\.?\d+)(?=[.,;:\s#()\[\]\{\}"'<])/,
  _boolean: /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<])/,
  _keyword: /^@[a-z]+(?=[\s#<])/i,
  _sparqlKeyword: /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i,
  _shortPredicates: /^a(?=\s+|<)/,
  _newline: /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/,
  _comment: /#([^\n\r]*)/,
  _whitespace: /^[ \t]+/,
  _endOfFile: /^(?:#[^\n\r]*)?$/,

  // ## Private methods

  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
  _tokenizeToEnd: function (callback, inputFinished) {
    // Continue parsing as far as possible; the loop will return eventually
    var input = this._input, outputComments = this._comments;
    while (true) {
      // Count and skip whitespace lines
      var whiteSpaceMatch, comment;
      while (whiteSpaceMatch = this._newline.exec(input)) {
        // Try to find a comment
        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))
          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
        // Advance the input
        input = input.substr(whiteSpaceMatch[0].length, input.length);
        this._line++;
      }
      // Skip whitespace on current line
      if (whiteSpaceMatch = this._whitespace.exec(input))
        input = input.substr(whiteSpaceMatch[0].length, input.length);

      // Stop for now if we're at the end
      if (this._endOfFile.test(input)) {
        // If the input is finished, emit EOF
        if (inputFinished) {
          // Try to find a final comment
          if (outputComments && (comment = this._comment.exec(input)))
            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });
        }
        return this._input = input;
      }

      // Look for specific token types based on the first character
      var line = this._line, type = '', value = '', prefix = '',
          firstChar = input[0], match = null, matchLength = 0, unescaped, inconclusive = false;
      switch (firstChar) {
      case '^':
        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
        if (input.length < 3)
          break;
        // Try to match a type
        else if (input[1] === '^') {
          this._prevTokenType = '^^';
          // Move to type IRI or prefixed name
          input = input.substr(2);
          if (input[0] !== '<') {
            inconclusive = true;
            break;
          }
        }
        // If no type, it must be a path expression
        else {
          if (this._n3Mode) {
            matchLength = 1;
            type = '^';
          }
          break;
        }
        // Fall through in case the type is an IRI
      case '<':
        // Try to find a full IRI without escape sequences
        if (match = this._unescapedIri.exec(input))
          type = 'IRI', value = match[1];
        // Try to find a full IRI with escape sequences
        else if (match = this._iri.exec(input)) {
          unescaped = this._unescape(match[1]);
          if (unescaped === null || illegalIriChars.test(unescaped))
            return reportSyntaxError(this);
          type = 'IRI', value = unescaped;
        }
        // Try to find a backwards implication arrow
        else if (this._n3Mode && input.length > 1 && input[1] === '=')
          type = 'inverse', matchLength = 2, value = 'http://www.w3.org/2000/10/swap/log#implies';
        break;

      case '_':
        // Try to find a blank node. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        if ((match = this._blank.exec(input)) ||
            inputFinished && (match = this._blank.exec(input + ' ')))
          type = 'blank', prefix = '_', value = match[1];
        break;

      case '"':
      case "'":
        // Try to find a non-empty double-quoted literal without escape sequences
        if (match = this._unescapedString.exec(input))
          type = 'literal', value = match[0];
        // Try to find any other literal wrapped in a pair of single or double quotes
        else if (match = this._singleQuotedString.exec(input)) {
          unescaped = this._unescape(match[0]);
          if (unescaped === null)
            return reportSyntaxError(this);
          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
        }
        // Try to find a literal wrapped in three pairs of single or double quotes
        else if (match = this._tripleQuotedString.exec(input)) {
          unescaped = match[1] || match[2];
          // Count the newlines and advance line counter
          this._line += unescaped.split(/\r\n|\r|\n/).length - 1;
          unescaped = this._unescape(unescaped);
          if (unescaped === null)
            return reportSyntaxError(this);
          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
        }
        break;

      case '?':
        // Try to find a variable
        if (this._n3Mode && (match = this._variable.exec(input)))
          type = 'var', value = match[0];
        break;

      case '@':
        // Try to find a language code
        if (this._prevTokenType === 'literal' && (match = this._langcode.exec(input)))
          type = 'langcode', value = match[1];
        // Try to find a keyword
        else if (match = this._keyword.exec(input))
          type = match[0];
        break;

      case '.':
        // Try to find a dot as punctuation
        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {
          type = '.';
          matchLength = 1;
          break;
        }
        // Fall through to numerical case (could be a decimal dot)

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '+':
      case '-':
        // Try to find a number
        if (match = this._number.exec(input)) {
          type = 'literal';
          value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#' +
                  (match[1] ? 'double' : (/^[+\-]?\d+$/.test(match[0]) ? 'integer' : 'decimal'));
        }
        break;

      case 'B':
      case 'b':
      case 'p':
      case 'P':
      case 'G':
      case 'g':
        // Try to find a SPARQL-style keyword
        if (match = this._sparqlKeyword.exec(input))
          type = match[0].toUpperCase();
        else
          inconclusive = true;
        break;

      case 'f':
      case 't':
        // Try to match a boolean
        if (match = this._boolean.exec(input))
          type = 'literal', value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#boolean';
        else
          inconclusive = true;
        break;

      case 'a':
        // Try to find an abbreviated predicate
        if (match = this._shortPredicates.exec(input))
          type = 'abbreviation', value = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
        else
          inconclusive = true;
        break;

      case '=':
        // Try to find an implication arrow or equals sign
        if (this._n3Mode && input.length > 1) {
          type = 'abbreviation';
          if (input[1] !== '>')
            matchLength = 1, value = 'http://www.w3.org/2002/07/owl#sameAs';
          else
            matchLength = 2, value = 'http://www.w3.org/2000/10/swap/log#implies';
        }
        break;

      case '!':
        if (!this._n3Mode)
          break;
      case ',':
      case ';':
      case '[':
      case ']':
      case '(':
      case ')':
      case '{':
      case '}':
        // The next token is punctuation
        matchLength = 1;
        type = firstChar;
        break;

      default:
        inconclusive = true;
      }

      // Some first characters do not allow an immediate decision, so inspect more
      if (inconclusive) {
        // Try to find a prefix
        if ((this._prevTokenType === '@prefix' || this._prevTokenType === 'PREFIX') &&
            (match = this._prefix.exec(input)))
          type = 'prefix', value = match[1] || '';
        // Try to find a prefixed name. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        else if ((match = this._prefixed.exec(input)) ||
                 inputFinished && (match = this._prefixed.exec(input + ' ')))
          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
      }

      // A type token is special: it can only be emitted after an IRI or prefixed name is read
      if (this._prevTokenType === '^^') {
        switch (type) {
        case 'prefixed': type = 'type';    break;
        case 'IRI':      type = 'typeIRI'; break;
        default:         type = '';
        }
      }

      // What if nothing of the above was found?
      if (!type) {
        // We could be in streaming mode, and then we just wait for more input to arrive.
        // Otherwise, a syntax error has occurred in the input.
        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
        if (inputFinished || (!/^'''|^"""/.test(input) && /\n|\r/.test(input)))
          return reportSyntaxError(this);
        else
          return this._input = input;
      }

      // Emit the parsed token
      callback(null, { line: line, type: type, value: value, prefix: prefix });
      this._prevTokenType = type;

      // Advance to next part to tokenize
      input = input.substr(matchLength || match[0].length, input.length);
    }

    // Signals the syntax error through the callback
    function reportSyntaxError(self) { callback(self._syntaxError(/^\S*/.exec(input)[0])); }
  },

  // ### `_unescape` replaces N3 escape codes by their corresponding characters
  _unescape: function (item) {
    try {
      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode <= 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement)
            throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return null; }
  },

  // ### `_syntaxError` creates a syntax error for the given issue
  _syntaxError: function (issue) {
    this._input = null;
    return new Error('Unexpected "' + issue + '" on line ' + this._line + '.');
  },


  // ## Public methods

  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
  // The input can be a string or a stream.
  tokenize: function (input, callback) {
    var self = this;
    this._line = 1;

    // If the input is a string, continuously emit tokens through the callback until the end
    if (typeof input === 'string') {
      this._input = input;
      // If a callback was passed, asynchronously call it
      if (typeof callback === 'function')
        immediately(function () { self._tokenizeToEnd(callback, true); });
      // If no callback was passed, tokenize synchronously and return
      else {
        var tokens = [], error;
        this._tokenizeToEnd(function (e, t) { e ? (error = e) : tokens.push(t); }, true);
        if (error) throw error;
        return tokens;
      }
    }
    // Otherwise, the input must be a stream
    else {
      this._input = '';
      if (typeof input.setEncoding === 'function')
        input.setEncoding('utf8');
      // Adds the data chunk to the buffer and parses as far as possible
      input.on('data', function (data) {
        if (self._input !== null) {
          self._input += data;
          self._tokenizeToEnd(callback, false);
        }
      });
      // Parses until the end
      input.on('end', function () {
        if (self._input !== null)
          self._tokenizeToEnd(callback, true);
      });
    }
  },
};

// ## Exports
module.exports = N3Lexer;

},{}],72:[function(_dereq_,module,exports){
// **N3Parser** parses N3 documents.
var N3Lexer = _dereq_('./N3Lexer');

var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_NIL    = RDF_PREFIX + 'nil',
    RDF_FIRST  = RDF_PREFIX + 'first',
    RDF_REST   = RDF_PREFIX + 'rest';

var QUANTIFIERS_GRAPH = 'urn:n3:quantifiers';

var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

// The next ID for new blank nodes
var blankNodePrefix = 0, blankNodeCount = 0;

// ## Constructor
function N3Parser(options) {
  if (!(this instanceof N3Parser))
    return new N3Parser(options);
  this._contextStack = [];
  this._graph = null;

  // Set the document IRI
  options = options || {};
  this._setBase(options.documentIRI);

  // Set supported features depending on the format
  var format = (typeof options.format === 'string') ?
               options.format.match(/\w*$/)[0].toLowerCase() : '',
      isTurtle = format === 'turtle', isTriG = format === 'trig',
      isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),
      isN3 = this._n3Mode = /n3/.test(format),
      isLineMode = isNTriples || isNQuads;
  if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))
    this._readPredicateOrNamedGraph = this._readPredicate;
  this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
  // Disable relative IRIs in N-Triples or N-Quads mode
  if (isLineMode) {
    this._base = '';
    this._resolveIRI = function (token) {
      this._error('Disallowed relative IRI', token);
      return this._callback = noop, this._subject = null;
    };
  }
  this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :
                            '_:' + options.blankNodePrefix.replace(/^_:/, '');
  this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });
  // Disable explicit quantifiers by default
  this._explicitQuantifiers = !!options.explicitQuantifiers;
}

// ## Private class methods

// ### `_resetBlankNodeIds` restarts blank node identification
N3Parser._resetBlankNodeIds = function () {
  blankNodePrefix = blankNodeCount = 0;
};

N3Parser.prototype = {
  // ## Private methods

  // ### `_setBase` sets the base IRI to resolve relative IRIs
  _setBase: function (baseIRI) {
    if (!baseIRI)
      this._base = null;
    else {
      // Remove fragment if present
      var fragmentPos = baseIRI.indexOf('#');
      if (fragmentPos >= 0)
        baseIRI = baseIRI.substr(0, fragmentPos);
      // Set base IRI and its components
      this._base = baseIRI;
      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :
                         baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      this._baseRoot   = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  },

  // ### `_saveContext` stores the current parsing context
  // when entering a new scope (list, blank node, formula)
  _saveContext: function (type, graph, subject, predicate, object) {
    var n3Mode = this._n3Mode;
    this._contextStack.push({
      subject: subject, predicate: predicate, object: object,
      graph: graph, type: type,
      inverse: n3Mode ? this._inversePredicate : false,
      blankPrefix: n3Mode ? this._prefixes._ : '',
      quantified: n3Mode ? this._quantified : null,
    });
    // The settings below only apply to N3 streams
    if (n3Mode) {
      // Every new scope resets the predicate direction
      this._inversePredicate = false;
      // In N3, blank nodes are scoped to a formula
      // (using a dot as separator, as a blank node label cannot start with it)
      this._prefixes._ = this._graph + '.';
      // Quantifiers are scoped to a formula
      this._quantified = Object.create(this._quantified);
    }
  },

  // ### `_restoreContext` restores the parent context
  // when leaving a scope (list, blank node, formula)
  _restoreContext: function () {
    var context = this._contextStack.pop(), n3Mode = this._n3Mode;
    this._subject   = context.subject;
    this._predicate = context.predicate;
    this._object    = context.object;
    this._graph     = context.graph;
    // The settings below only apply to N3 streams
    if (n3Mode) {
      this._inversePredicate = context.inverse;
      this._prefixes._ = context.blankPrefix;
      this._quantified = context.quantified;
    }
  },

  // ### `_readInTopContext` reads a token when in the top context
  _readInTopContext: function (token) {
    switch (token.type) {
    // If an EOF token arrives in the top context, signal that we're done
    case 'eof':
      if (this._graph !== null)
        return this._error('Unclosed graph', token);
      delete this._prefixes._;
      return this._callback(null, null, this._prefixes);
    // It could be a prefix declaration
    case 'PREFIX':
      this._sparqlStyle = true;
    case '@prefix':
      return this._readPrefix;
    // It could be a base declaration
    case 'BASE':
      this._sparqlStyle = true;
    case '@base':
      return this._readBaseIRI;
    // It could be a graph
    case '{':
      if (this._supportsNamedGraphs) {
        this._graph = '';
        this._subject = null;
        return this._readSubject;
      }
    case 'GRAPH':
      if (this._supportsNamedGraphs)
        return this._readNamedGraphLabel;
    // Otherwise, the next token must be a subject
    default:
      return this._readSubject(token);
    }
  },

  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
  _readEntity: function (token, quantifier) {
    var value;
    switch (token.type) {
    // Read a relative or absolute IRI
    case 'IRI':
    case 'typeIRI':
      value = (this._base === null || absoluteIRI.test(token.value)) ?
              token.value : this._resolveIRI(token);
      break;
    // Read a blank node or prefixed name
    case 'type':
    case 'blank':
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      value = prefix + token.value;
      break;
    // Read a variable
    case 'var':
      return token.value;
    // Everything else is not an entity
    default:
      return this._error('Expected entity but got ' + token.type, token);
    }
    // In N3 mode, replace the entity if it is quantified
    if (!quantifier && this._n3Mode && (value in this._quantified))
      value = this._quantified[value];
    return value;
  },

  // ### `_readSubject` reads a triple's subject
  _readSubject: function (token) {
    this._predicate = null;
    switch (token.type) {
    case '[':
      // Start a new triple with a new blank node as subject
      this._saveContext('blank', this._graph,
                        this._subject = '_:b' + blankNodeCount++, null, null);
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, RDF_NIL, null, null);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph,
                        this._graph = '_:b' + blankNodeCount++, null, null);
      return this._readSubject;
    case '}':
       // No subject; the graph in which we are reading is closed instead
      return this._readPunctuation(token);
    case '@forSome':
      this._subject = null;
      this._predicate = 'http://www.w3.org/2000/10/swap/reify#forSome';
      this._quantifiedPrefix = '_:b';
      return this._readQuantifierList;
    case '@forAll':
      this._subject = null;
      this._predicate = 'http://www.w3.org/2000/10/swap/reify#forAll';
      this._quantifiedPrefix = '?b-';
      return this._readQuantifierList;
    default:
      // Read the subject entity
      if ((this._subject = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the subject might be a path
      if (this._n3Mode)
        return this._getPathReader(this._readPredicateOrNamedGraph);
    }

    // The next token must be a predicate,
    // or, if the subject was actually a graph IRI, a named graph
    return this._readPredicateOrNamedGraph;
  },

  // ### `_readPredicate` reads a triple's predicate
  _readPredicate: function (token) {
    var type = token.type;
    switch (type) {
    case 'inverse':
      this._inversePredicate = true;
    case 'abbreviation':
      this._predicate = token.value;
      break;
    case '.':
    case ']':
    case '}':
      // Expected predicate didn't come, must have been trailing semicolon
      if (this._predicate === null)
        return this._error('Unexpected ' + type, token);
      this._subject = null;
      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
    case ';':
      // Extra semicolons can be safely ignored
      return this._readPredicate;
    case 'blank':
      if (!this._n3Mode)
        return this._error('Disallowed blank node as predicate', token);
    default:
      if ((this._predicate = this._readEntity(token)) === undefined)
        return;
    }
    // The next token must be an object
    return this._readObject;
  },

  // ### `_readObject` reads a triple's object
  _readObject: function (token) {
    switch (token.type) {
    case 'literal':
      this._object = token.value;
      return this._readDataTypeOrLang;
    case '[':
      // Start a new triple with a new blank node as subject
      this._saveContext('blank', this._graph, this._subject, this._predicate,
                        this._subject = '_:b' + blankNodeCount++);
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, this._subject, this._predicate, RDF_NIL);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph, this._subject, this._predicate,
                        this._graph = '_:b' + blankNodeCount++);
      return this._readSubject;
    default:
      // Read the object entity
      if ((this._object = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the object might be a path
      if (this._n3Mode)
        return this._getPathReader(this._getContextEndReader());
    }
    return this._getContextEndReader();
  },

  // ### `_readPredicateOrNamedGraph` reads a triple's predicate, or a named graph
  _readPredicateOrNamedGraph: function (token) {
    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
  },

  // ### `_readGraph` reads a graph
  _readGraph: function (token) {
    if (token.type !== '{')
      return this._error('Expected graph but got ' + token.type, token);
    // The "subject" we read is actually the GRAPH's label
    this._graph = this._subject, this._subject = null;
    return this._readSubject;
  },

  // ### `_readBlankNodeHead` reads the head of a blank node
  _readBlankNodeHead: function (token) {
    if (token.type === ']') {
      this._subject = null;
      return this._readBlankNodeTail(token);
    }
    else {
      this._predicate = null;
      return this._readPredicate(token);
    }
  },

  // ### `_readBlankNodeTail` reads the end of a blank node
  _readBlankNodeTail: function (token) {
    if (token.type !== ']')
      return this._readBlankNodePunctuation(token);

    // Store blank node triple
    if (this._subject !== null)
      this._triple(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this blank node
    var empty = this._predicate === null;
    this._restoreContext();
    // If the blank node was the subject, continue reading the predicate
    if (this._object === null)
      // If the blank node was empty, it could be a named graph label
      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
    // If the blank node was the object, restore previous context and read punctuation
    else
      return this._getContextEndReader();
  },

  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
  _readPredicateAfterBlank: function (token) {
    // If a dot follows a blank node in top context, there is no predicate
    if (token.type === '.' && !this._contextStack.length) {
      this._subject = null; // cancel the current triple
      return this._readPunctuation(token);
    }
    return this._readPredicate(token);
  },

  // ### `_readListItem` reads items from a list
  _readListItem: function (token) {
    var item = null,                      // The item of the list
        list = null,                      // The list itself
        prevList = this._subject,         // The previous list that contains this list
        stack = this._contextStack,       // The stack of parent contexts
        parent = stack[stack.length - 1], // The parent containing the current list
        next = this._readListItem,        // The next function to execute
        itemComplete = true;              // Whether the item has been read fully

    switch (token.type) {
    case '[':
      // Stack the current list triple and start a new triple with a blank node as subject
      this._saveContext('blank', this._graph, list = '_:b' + blankNodeCount++,
                        RDF_FIRST, this._subject = item = '_:b' + blankNodeCount++);
      next = this._readBlankNodeHead;
      break;
    case '(':
      // Stack the current list triple and start a new list
      this._saveContext('list', this._graph, list = '_:b' + blankNodeCount++,
                        RDF_FIRST, RDF_NIL);
      this._subject = null;
      break;
    case ')':
      // Closing the list; restore the parent context
      this._restoreContext();
      // If this list is contained within a parent list, return the membership triple here.
      // This will be `<parent list element> rdf:first <this list>.`.
      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')
        this._triple(this._subject, this._predicate, this._object, this._graph);
      // Was this list the parent's subject?
      if (this._predicate === null) {
        // The next token is the predicate
        next = this._readPredicate;
        // No list tail if this was an empty list
        if (this._subject === RDF_NIL)
          return next;
      }
      // The list was in the parent context's object
      else {
        next = this._getContextEndReader();
        // No list tail if this was an empty list
        if (this._object === RDF_NIL)
          return next;
      }
      // Close the list by making the head nil
      list = RDF_NIL;
      break;
    case 'literal':
      item = token.value;
      itemComplete = false; // Can still have a datatype or language
      next = this._readListItemDataTypeOrLang;
      break;
    default:
      if ((item = this._readEntity(token)) === undefined)
        return;
    }

     // Create a new blank node if no item head was assigned yet
    if (list === null)
      this._subject = list = '_:b' + blankNodeCount++;

    // Is this the first element of the list?
    if (prevList === null) {
      // This list is either the subject or the object of its parent
      if (parent.predicate === null)
        parent.subject = list;
      else
        parent.object = list;
    }
    else {
      // Continue the previous list with the current list
      this._triple(prevList, RDF_REST, list, this._graph);
    }
    // Add the item's value
    if (item !== null) {
      // In N3 mode, the item might be a path
      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
        // Create a new context to add the item's path
        this._saveContext('item', this._graph, list, RDF_FIRST, item);
        this._subject = item, this._predicate = null;
        // _readPath will restore the context and output the item
        return this._getPathReader(this._readListItem);
      }
      // Output the item if it is complete
      if (itemComplete)
        this._triple(list, RDF_FIRST, item, this._graph);
      // Otherwise, save it for completion
      else
        this._object = item;
    }
    return next;
  },

  // ### `_readDataTypeOrLang` reads an _optional_ data type or language
  _readDataTypeOrLang: function (token) {
    return this._completeLiteral(token, false);
  },

  // ### `_readListItemDataTypeOrLang` reads an _optional_ data type or language in a list
  _readListItemDataTypeOrLang: function (token) {
    return this._completeLiteral(token, true);
  },

  // ### `_completeLiteral` completes the object with a data type or language
  _completeLiteral: function (token, listItem) {
    var suffix = false;
    switch (token.type) {
    // Add a "^^type" suffix for types (IRIs and blank nodes)
    case 'type':
    case 'typeIRI':
      suffix = true;
      this._object += '^^' + this._readEntity(token);
      break;
    // Add an "@lang" suffix for language tags
    case 'langcode':
      suffix = true;
      this._object += '@' + token.value.toLowerCase();
      break;
    }
    // If this literal was part of a list, write the item
    // (we could also check the context stack, but passing in a flag is faster)
    if (listItem)
      this._triple(this._subject, RDF_FIRST, this._object, this._graph);
    // Continue with the rest of the input
    if (suffix)
      return this._getContextEndReader();
    else {
      this._readCallback = this._getContextEndReader();
      return this._readCallback(token);
    }
  },

  // ### `_readFormulaTail` reads the end of a formula
  _readFormulaTail: function (token) {
    if (token.type !== '}')
      return this._readPunctuation(token);

    // Store the last triple of the formula
    if (this._subject !== null)
      this._triple(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this formula
    this._restoreContext();
    // If the formula was the subject, continue reading the predicate.
    // If the formula was the object, read punctuation.
    return this._object === null ? this._readPredicate : this._getContextEndReader();
  },

  // ### `_readPunctuation` reads punctuation between triples or triple parts
  _readPunctuation: function (token) {
    var next, subject = this._subject, graph = this._graph,
        inversePredicate = this._inversePredicate;
    switch (token.type) {
    // A closing brace ends a graph
    case '}':
      if (this._graph === null)
        return this._error('Unexpected graph closing', token);
      if (this._n3Mode)
        return this._readFormulaTail(token);
      this._graph = null;
    // A dot just ends the statement, without sharing anything with the next
    case '.':
      this._subject = null;
      next = this._contextStack.length ? this._readSubject : this._readInTopContext;
      if (inversePredicate) this._inversePredicate = false;
      break;
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      // An entity means this is a quad (only allowed if not already inside a graph)
      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
        next = this._readQuadPunctuation;
        break;
      }
      return this._error('Expected punctuation to follow "' + this._object + '"', token);
    }
    // A triple has been completed now, so return it
    if (subject !== null) {
      var predicate = this._predicate, object = this._object;
      if (!inversePredicate)
        this._triple(subject, predicate, object,  graph);
      else
        this._triple(object,  predicate, subject, graph);
    }
    return next;
  },

    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
  _readBlankNodePunctuation: function (token) {
    var next;
    switch (token.type) {
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      return this._error('Expected punctuation to follow "' + this._object + '"', token);
    }
    // A triple has been completed now, so return it
    this._triple(this._subject, this._predicate, this._object, this._graph);
    return next;
  },

  // ### `_readQuadPunctuation` reads punctuation after a quad
  _readQuadPunctuation: function (token) {
    if (token.type !== '.')
      return this._error('Expected dot to follow quad', token);
    return this._readInTopContext;
  },

  // ### `_readPrefix` reads the prefix of a prefix declaration
  _readPrefix: function (token) {
    if (token.type !== 'prefix')
      return this._error('Expected prefix to follow @prefix', token);
    this._prefix = token.value;
    return this._readPrefixIRI;
  },

  // ### `_readPrefixIRI` reads the IRI of a prefix declaration
  _readPrefixIRI: function (token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);
    var prefixIRI = this._readEntity(token);
    this._prefixes[this._prefix] = prefixIRI;
    this._prefixCallback(this._prefix, prefixIRI);
    return this._readDeclarationPunctuation;
  },

  // ### `_readBaseIRI` reads the IRI of a base declaration
  _readBaseIRI: function (token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow base declaration', token);
    this._setBase(this._base === null || absoluteIRI.test(token.value) ?
                  token.value : this._resolveIRI(token));
    return this._readDeclarationPunctuation;
  },

  // ### `_readNamedGraphLabel` reads the label of a named graph
  _readNamedGraphLabel: function (token) {
    switch (token.type) {
    case 'IRI':
    case 'blank':
    case 'prefixed':
      return this._readSubject(token), this._readGraph;
    case '[':
      return this._readNamedGraphBlankLabel;
    default:
      return this._error('Invalid graph label', token);
    }
  },

  // ### `_readNamedGraphLabel` reads a blank node label of a named graph
  _readNamedGraphBlankLabel: function (token) {
    if (token.type !== ']')
      return this._error('Invalid graph label', token);
    this._subject = '_:b' + blankNodeCount++;
    return this._readGraph;
  },

  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
  _readDeclarationPunctuation: function (token) {
    // SPARQL-style declarations don't have punctuation
    if (this._sparqlStyle) {
      this._sparqlStyle = false;
      return this._readInTopContext(token);
    }

    if (token.type !== '.')
      return this._error('Expected declaration to end with a dot', token);
    return this._readInTopContext;
  },

  // Reads a list of quantified symbols from a @forSome or @forAll statement
  _readQuantifierList: function (token) {
    var entity;
    switch (token.type) {
    case 'IRI':
    case 'prefixed':
      if ((entity = this._readEntity(token, true)) !== undefined)
        break;
    default:
      return this._error('Unexpected ' + token.type, token);
    }
    // Without explicit quantifiers, map entities to a quantified entity
    if (!this._explicitQuantifiers)
      this._quantified[entity] = this._quantifiedPrefix + blankNodeCount++;
    // With explicit quantifiers, output the reified quantifier
    else {
      // If this is the first item, start a new quantifier list
      if (this._subject === null)
        this._triple(this._graph || '', this._predicate,
                     this._subject = '_:b' + blankNodeCount++, QUANTIFIERS_GRAPH);
      // Otherwise, continue the previous list
      else
        this._triple(this._subject, RDF_REST,
                     this._subject = '_:b' + blankNodeCount++, QUANTIFIERS_GRAPH);
      // Output the list item
      this._triple(this._subject, RDF_FIRST, entity, QUANTIFIERS_GRAPH);
    }
    return this._readQuantifierPunctuation;
  },

  // Reads punctuation from a @forSome or @forAll statement
  _readQuantifierPunctuation: function (token) {
    // Read more quantifiers
    if (token.type === ',')
      return this._readQuantifierList;
    // End of the quantifier list
    else {
      // With explicit quantifiers, close the quantifier list
      if (this._explicitQuantifiers) {
        this._triple(this._subject, RDF_REST, RDF_NIL, QUANTIFIERS_GRAPH);
        this._subject = null;
      }
      // Read a dot
      this._readCallback = this._getContextEndReader();
      return this._readCallback(token);
    }
  },

  // ### `_getPathReader` reads a potential path and then resumes with the given function
  _getPathReader: function (afterPath) {
    this._afterPath = afterPath;
    return this._readPath;
  },

  // ### `_readPath` reads a potential path
  _readPath: function (token) {
    switch (token.type) {
    // Forward path
    case '!': return this._readForwardPath;
    // Backward path
    case '^': return this._readBackwardPath;
    // Not a path; resume reading where we left off
    default:
      var stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
      // If we were reading a list item, we still need to output it
      if (parent && parent.type === 'item') {
        // The list item is the remaining subejct after reading the path
        var item = this._subject;
        // Switch back to the context of the list
        this._restoreContext();
        // Output the list item
        this._triple(this._subject, RDF_FIRST, item, this._graph);
      }
      return this._afterPath(token);
    }
  },

  // ### `_readForwardPath` reads a '!' path
  _readForwardPath: function (token) {
    var subject, predicate, object = '_:b' + blankNodeCount++;
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's object
    if (this._predicate === null)
      subject = this._subject, this._subject = object;
    // If we were reading an object, replace the subject by the path's object
    else
      subject = this._object,  this._object  = object;
    // Emit the path's current triple and read its next section
    this._triple(subject, predicate, object, this._graph);
    return this._readPath;
  },

  // ### `_readBackwardPath` reads a '^' path
  _readBackwardPath: function (token) {
    var subject = '_:b' + blankNodeCount++, predicate, object;
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's subject
    if (this._predicate === null)
      object = this._subject, this._subject = subject;
    // If we were reading an object, replace the subject by the path's subject
    else
      object = this._object,  this._object  = subject;
    // Emit the path's current triple and read its next section
    this._triple(subject, predicate, object, this._graph);
    return this._readPath;
  },

  // ### `_getContextEndReader` gets the next reader function at the end of a context
  _getContextEndReader: function () {
    var contextStack = this._contextStack;
    if (!contextStack.length)
      return this._readPunctuation;

    switch (contextStack[contextStack.length - 1].type) {
    case 'blank':
      return this._readBlankNodeTail;
    case 'list':
      return this._readListItem;
    case 'formula':
      return this._readFormulaTail;
    }
  },

  // ### `_triple` emits a triple through the callback
  _triple: function (subject, predicate, object, graph) {
    this._callback(null,
      { subject: subject, predicate: predicate, object: object, graph: graph || '' });
  },

  // ### `_error` emits an error message through the callback
  _error: function (message, token) {
    this._callback(new Error(message + ' on line ' + token.line + '.'));
  },

  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative
  _resolveIRI: function (token) {
    var iri = token.value;
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return this._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return this._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default:
      return this._removeDotSegments(this._basePath + iri);
    }
  },

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
  _removeDotSegments: function (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  },

  // ## Public methods

  // ### `parse` parses the N3 input and emits each parsed triple through the callback
  parse: function (input, tripleCallback, prefixCallback) {
    var self = this;
    // The read callback is the next function to be executed when a token arrives.
    // We start reading in the top context.
    this._readCallback = this._readInTopContext;
    this._sparqlStyle = false;
    this._prefixes = Object.create(null);
    this._prefixes._ = this._blankNodePrefix || '_:b' + blankNodePrefix++ + '_';
    this._prefixCallback = prefixCallback || noop;
    this._inversePredicate = false;
    this._quantified = Object.create(null);

    // Parse synchronously if no triple callback is given
    if (!tripleCallback) {
      var triples = [], error;
      this._callback = function (e, t) { e ? (error = e) : t && triples.push(t); };
      this._lexer.tokenize(input).every(function (token) {
        return self._readCallback = self._readCallback(token);
      });
      if (error) throw error;
      return triples;
    }

    // Parse asynchronously otherwise, executing the read callback when a token arrives
    this._callback = tripleCallback;
    this._lexer.tokenize(input, function (error, token) {
      if (error !== null)
        self._callback(error), self._callback = noop;
      else if (self._readCallback)
        self._readCallback = self._readCallback(token);
    });
  },
};

// The empty function
function noop() {}

// ## Exports
module.exports = N3Parser;

},{"./N3Lexer":71}],73:[function(_dereq_,module,exports){
// **N3Store** objects store N3 triples by graph in memory.

var expandPrefixedName = _dereq_('./N3Util').expandPrefixedName;

// ## Constructor
function N3Store(triples, options) {
  if (!(this instanceof N3Store))
    return new N3Store(triples, options);

  // The number of triples is initially zero
  this._size = 0;
  // `_graphs` contains subject, predicate, and object indexes per graph
  this._graphs = Object.create(null);
  // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
  // saving memory by using only numbers as keys in `_graphs`
  this._id = 0;
  this._ids = Object.create(null);
  this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero
  this._entities = Object.create(null); // inverse of `_ids`
  // `_blankNodeIndex` is the index of the last automatically named blank node
  this._blankNodeIndex = 0;

  // Shift parameters if `triples` is not given
  if (!options && triples && !triples[0])
    options = triples, triples = null;
  options = options || {};

  // Add triples and prefixes if passed
  this._prefixes = Object.create(null);
  if (options.prefixes)
    this.addPrefixes(options.prefixes);
  if (triples)
    this.addTriples(triples);
}

N3Store.prototype = {
  // ## Public properties

  // ### `size` returns the number of triples in the store
  get size() {
    // Return the triple count if if was cached
    var size = this._size;
    if (size !== null)
      return size;

    // Calculate the number of triples by counting to the deepest level
    size = 0;
    var graphs = this._graphs, subjects, subject;
    for (var graphKey in graphs)
      for (var subjectKey in (subjects = graphs[graphKey].subjects))
        for (var predicateKey in (subject = subjects[subjectKey]))
          size += Object.keys(subject[predicateKey]).length;
    return this._size = size;
  },

  // ## Private methods

  // ### `_addToIndex` adds a triple to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex: function (index0, key0, key1, key2) {
    // Create layers as necessary
    var index1 = index0[key0] || (index0[key0] = {});
    var index2 = index1[key1] || (index1[key1] = {});
    // Setting the key to _any_ value signals the presence of the triple
    var existed = key2 in index2;
    if (!existed)
      index2[key2] = null;
    return !existed;
  },

  // ### `_removeFromIndex` removes a triple from a three-layered index
  _removeFromIndex: function (index0, key0, key1, key2) {
    // Remove the triple from the index
    var index1 = index0[key0], index2 = index1[key1], key;
    delete index2[key2];

    // Remove intermediary index layers if they are empty
    for (key in index2) return;
    delete index1[key1];
    for (key in index1) return;
    delete index0[key0];
  },

  // ### `_findInIndex` finds a set of triples in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting triple
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created triples.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any triple.
  // If instead `array` is given, each result is added to the array.
  _findInIndex: function (index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    var tmp, index1, index2, varCount = !key0 + !key1 + !key2,
        // depending on the number of variables, keys or reverse index are faster
        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;

    // If a key is specified, use only that part of index 0.
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      var entity0 = entityKeys[value0];

      if (index1 = index0[value0]) {
        // If a key is specified, use only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          var entity1 = entityKeys[value1];

          if (index2 = index1[value1]) {
            // If a key is specified, use only that part of index 2, if it exists.
            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);
            // Create triples for all items found in index 2.
            for (var l = values.length - 1; l >= 0; l--) {
              var result = { subject: '', predicate: '', object: '', graph: graph };
              result[name0] = entity0;
              result[name1] = entity1;
              result[name2] = entityKeys[values[l]];
              if (array)
                array.push(result);
              else if (callback(result))
                return true;
            }
          }
        }
      }
    }
    return array;
  },

  // ### `_loop` executes the callback on all keys of index 0
  _loop: function (index0, callback) {
    for (var key0 in index0)
      callback(key0);
  },

  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
  _loopByKey0: function (index0, key0, callback) {
    var index1, key1;
    if (index1 = index0[key0]) {
      for (key1 in index1)
        callback(key1);
    }
  },

  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
  _loopByKey1: function (index0, key1, callback) {
    var key0, index1;
    for (key0 in index0) {
      index1 = index0[key0];
      if (index1[key1])
        callback(key0);
    }
  },

  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
  _loopBy2Keys: function (index0, key0, key1, callback) {
    var index1, index2, key2;
    if ((index1 = index0[key0]) && (index2 = index1[key1])) {
      for (key2 in index2)
        callback(key2);
    }
  },

  // ### `_countInIndex` counts matching triples in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex: function (index0, key0, key1, key2) {
    var count = 0, tmp, index1, index2;

    // If a key is specified, count only that part of index 0
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      if (index1 = index0[value0]) {
        // If a key is specified, count only that part of index 1
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          if (index2 = index1[value1]) {
            // If a key is specified, count the triple if it exists
            if (key2) (key2 in index2) && count++;
            // Otherwise, count all triples
            else count += Object.keys(index2).length;
          }
        }
      }
    }
    return count;
  },

  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs: function (graph) {
    if (!isString(graph))
      return this._graphs;
    var graphs = {};
    graphs[graph] = this._graphs[graph];
    return graphs;
  },

  // ### `_uniqueEntities` returns a function that accepts an entity ID
  // and passes the corresponding entity to callback if it hasn't occurred before.
  _uniqueEntities: function (callback) {
    var uniqueIds = Object.create(null), entities = this._entities;
    return function (id) {
      if (!(id in uniqueIds)) {
        uniqueIds[id] = true;
        callback(entities[id]);
      }
    };
  },

  // ## Public methods

  // ### `addTriple` adds a new N3 triple to the store.
  // Returns if the triple index has changed, if the triple did not already exist.
  addTriple: function (subject, predicate, object, graph) {
    // Shift arguments if a triple object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Find the graph that will contain the triple
    graph = graph || '';
    var graphItem = this._graphs[graph];
    // Create the graph if it doesn't exist yet
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway
      Object.freeze(graphItem);
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    var ids = this._ids;
    var entities = this._entities;
    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);

    var changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);
    this._addToIndex(graphItem.predicates, predicate, object,    subject);
    this._addToIndex(graphItem.objects,    object,    subject,   predicate);

    // The cached triple count is now invalid
    this._size = null;
    return changed;
  },

  // ### `addTriples` adds multiple N3 triples to the store
  addTriples: function (triples) {
    for (var i = triples.length - 1; i >= 0; i--)
      this.addTriple(triples[i]);
  },

  // ### `addPrefix` adds support for querying with the given prefix
  addPrefix: function (prefix, iri) {
    this._prefixes[prefix] = iri;
  },

  // ### `addPrefixes` adds support for querying with the given prefixes
  addPrefixes: function (prefixes) {
    for (var prefix in prefixes)
      this.addPrefix(prefix, prefixes[prefix]);
  },

  // ### `removeTriple` removes an N3 triple from the store if it exists
  removeTriple: function (subject, predicate, object, graph) {
    // Shift arguments if a triple object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;
    graph = graph || '';

    // Find internal identifiers for all components
    // and verify the triple exists.
    var graphItem, ids = this._ids, graphs = this._graphs, subjects, predicates;
    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||
        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||
        !(subjects   = graphItem.subjects[subject]) ||
        !(predicates = subjects[predicate]) ||
        !(object in predicates))
      return false;

    // Remove it from all indexes
    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);
    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);
    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);
    if (this._size !== null) this._size--;

    // Remove the graph if it is empty
    for (subject in graphItem.subjects) return true;
    delete graphs[graph];
    return true;
  },

  // ### `removeTriples` removes multiple N3 triples from the store
  removeTriples: function (triples) {
    for (var i = triples.length - 1; i >= 0; i--)
      this.removeTriple(triples[i]);
  },

  // ### `getTriples` returns an array of triples matching a pattern, expanding prefixes as necessary.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getTriples: function (subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.getTriplesByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `getTriplesByIRI` returns an array of triples matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getTriplesByIRI: function (subject, predicate, object, graph) {
    var quads = [], graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return quads;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, subjectId, predicateId,
                              'object', 'subject', 'predicate', graphId, null, quads);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            this._findInIndex(content.subjects, subjectId, predicateId, null,
                              'subject', 'predicate', 'object', graphId, null, quads);
        }
        else if (predicateId)
          // If only predicate and possibly object are given, the predicate index will be the fastest
          this._findInIndex(content.predicates, predicateId, objectId, null,
                            'predicate', 'object', 'subject', graphId, null, quads);
        else if (objectId)
          // If only object is given, the object index will be the fastest
          this._findInIndex(content.objects, objectId, null, null,
                            'object', 'subject', 'predicate', graphId, null, quads);
        else
          // If nothing is given, iterate subjects and predicates first
          this._findInIndex(content.subjects, null, null, null,
                            'subject', 'predicate', 'object', graphId, null, quads);
      }
    }
    return quads;
  },

  // ### `countTriples` returns the number of triples matching a pattern, expanding prefixes as necessary.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  countTriples: function (subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.countTriplesByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `countTriplesByIRI` returns the number of triples matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  countTriplesByIRI: function (subject, predicate, object, graph) {
    var count = 0, graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return 0;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subject) {
          if (object)
            // If subject and object are given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
        }
        else if (predicate) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
        }
        else {
          // If only object is possibly given, the object index will be the fastest
          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
        }
      }
    }
    return count;
  },

  // ### `forEach` executes the callback on all triples.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forEach: function (callback, subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    this.forEachByIRI(
      callback,
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `forEachByIRI` executes the callback on all triples.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forEachByIRI: function (callback, subject, predicate, object, graph) {
    this.someByIRI(function (quad) {
      callback(quad);
      return false;
    }, subject, predicate, object, graph);
  },

  // ### `every` executes the callback on all triples,
  // and returns `true` if it returns truthy for all them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  every: function (callback, subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.everyByIRI(
      callback,
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `everyByIRI` executes the callback on all triples,
  // and returns `true` if it returns truthy for all them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  everyByIRI: function (callback, subject, predicate, object, graph) {
    var some = false;
    var every = !this.someByIRI(function (quad) {
      some = true;
      return !callback(quad);
    }, subject, predicate, object, graph);
    return some && every;
  },

  // ### `some` executes the callback on all triples,
  // and returns `true` if it returns truthy for any of them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  some: function (callback, subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.someByIRI(
      callback,
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `someByIRI` executes the callback on all triples,
  // and returns `true` if it returns truthy for any of them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  someByIRI: function (callback, subject, predicate, object, graph) {
    var graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return false;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be result
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) {
          // If subject and object are given, the object index will be the fastest
            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,
                                  'object', 'subject', 'predicate', graphId, callback, null))
              return true;
          }
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            if (this._findInIndex(content.subjects, subjectId, predicateId, null,
                                  'subject', 'predicate', 'object', graphId, callback, null))
              return true;
        }
        else if (predicateId) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          if (this._findInIndex(content.predicates, predicateId, objectId, null,
                                'predicate', 'object', 'subject', graphId, callback, null)) {
            return true;
          }
        }
        else if (objectId) {
          // If only object is given, the object index will be the fastest
          if (this._findInIndex(content.objects, objectId, null, null,
                                'object', 'subject', 'predicate', graphId, callback, null)) {
            return true;
          }
        }
        else
        // If nothing is given, iterate subjects and predicates first
        if (this._findInIndex(content.subjects, null, null, null,
                              'subject', 'predicate', 'object', graphId, callback, null)) {
          return true;
        }
      }
    }
    return false;
  },

  // ### `getSubjects` returns all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getSubjects: function (predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.getSubjectsByIRI(
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `getSubjectsByIRI` returns all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getSubjectsByIRI: function (predicate, object, graph) {
    var results = [];
    this.forSubjectsByIRI(function (s) { results.push(s); }, predicate, object, graph);
    return results;
  },

  // ### `forSubjects` executes the callback on all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forSubjects: function (callback, predicate, object, graph) {
    var prefixes = this._prefixes;
    this.forSubjectsByIRI(
      callback,
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `forSubjectsByIRI` executes the callback on all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forSubjectsByIRI: function (callback, predicate, object, graph) {
    var ids = this._ids, graphs = this._getGraphs(graph), content, predicateId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (predicateId) {
          if (objectId)
            // If predicate and object are given, the POS index is best.
            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
          else
            // If only predicate is given, the SPO index is best.
            this._loopByKey1(content.subjects, predicateId, callback);
        }
        else if (objectId)
          // If only object is given, the OSP index is best.
          this._loopByKey0(content.objects, objectId, callback);
        else
          // If no params given, iterate all the subjects
          this._loop(content.subjects, callback);
      }
    }
  },

  // ### `getPredicates` returns all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getPredicates: function (subject, object, graph) {
    var prefixes = this._prefixes;
    return this.getPredicatesByIRI(
      expandPrefixedName(subject, prefixes),
      expandPrefixedName(object,  prefixes),
      expandPrefixedName(graph,   prefixes)
    );
  },

  // ### `getPredicatesByIRI` returns all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getPredicatesByIRI: function (subject, object, graph) {
    var results = [];
    this.forPredicatesByIRI(function (p) { results.push(p); }, subject, object, graph);
    return results;
  },

  // ### `forPredicates` executes the callback on all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forPredicates: function (callback, subject, object, graph) {
    var prefixes = this._prefixes;
    this.forPredicatesByIRI(
      callback,
      expandPrefixedName(subject, prefixes),
      expandPrefixedName(object,  prefixes),
      expandPrefixedName(graph,   prefixes)
    );
  },

  // ### `forPredicatesByIRI` executes the callback on all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forPredicatesByIRI: function (callback, subject, object, graph) {
    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject) && !(subjectId = ids[subject]) ||
        isString(object)  && !(objectId  = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the OSP index is best.
            this._loopBy2Keys(content.objects, objectId, subjectId, callback);
          else
            // If only subject is given, the SPO index is best.
            this._loopByKey0(content.subjects, subjectId, callback);
        }
        else if (objectId)
          // If only object is given, the POS index is best.
          this._loopByKey1(content.predicates, objectId, callback);
        else
          // If no params given, iterate all the predicates.
          this._loop(content.predicates, callback);
      }
    }
  },

  // ### `getObjects` returns all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getObjects: function (subject, predicate, graph) {
    var prefixes = this._prefixes;
    return this.getObjectsByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `getObjectsByIRI` returns all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getObjectsByIRI: function (subject, predicate, graph) {
    var results = [];
    this.forObjectsByIRI(function (o) { results.push(o); }, subject, predicate, graph);
    return results;
  },

  // ### `forObjects` executes the callback on all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forObjects: function (callback, subject, predicate, graph) {
    var prefixes = this._prefixes;
    this.forObjectsByIRI(
      callback,
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `forObjectsByIRI` executes the callback on all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forObjectsByIRI: function (callback, subject, predicate, graph) {
    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, predicateId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject]) ||
        isString(predicate) && !(predicateId = ids[predicate]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (predicateId)
            // If subject and predicate are given, the SPO index is best.
            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
          else
            // If only subject is given, the OSP index is best.
            this._loopByKey1(content.objects, subjectId, callback);
        }
        else if (predicateId)
          // If only predicate is given, the POS index is best.
          this._loopByKey0(content.predicates, predicateId, callback);
        else
          // If no params given, iterate all the objects.
          this._loop(content.objects, callback);
      }
    }
  },

  // ### `getGraphs` returns all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getGraphs: function (subject, predicate, object) {
    var prefixes = this._prefixes;
    return this.getGraphsByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes)
    );
  },

  // ### `getGraphsByIRI` returns all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getGraphsByIRI: function (subject, predicate, object) {
    var results = [];
    this.forGraphsByIRI(function (g) { results.push(g); }, subject, predicate, object);
    return results;
  },

  // ### `forGraphs` executes the callback on all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forGraphs: function (callback, subject, predicate, object) {
    var prefixes = this._prefixes;
    this.forGraphsByIRI(
      callback,
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes)
    );
  },

  // ### `forGraphsByIRI` executes the callback on all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forGraphsByIRI: function (callback, subject, predicate, object) {
    for (var graph in this._graphs) {
      this.someByIRI(function (quad) {
        callback(quad.graph);
        return true; // Halt iteration of some()
      }, subject, predicate, object, graph);
    }
  },

  // ### `createBlankNode` creates a new blank node, returning its name
  createBlankNode: function (suggestedName) {
    var name, index;
    // Generate a name based on the suggested name
    if (suggestedName) {
      name = suggestedName = '_:' + suggestedName, index = 1;
      while (this._ids[name])
        name = suggestedName + index++;
    }
    // Generate a generic blank node name
    else {
      do { name = '_:b' + this._blankNodeIndex++; }
      while (this._ids[name]);
    }
    // Add the blank node to the entities, avoiding the generation of duplicates
    this._ids[name] = ++this._id;
    this._entities[this._id] = name;
    return name;
  },
};

// Determines whether the argument is a string
function isString(s) {
  return typeof s === 'string' || s instanceof String;
}

// ## Exports
module.exports = N3Store;

},{"./N3Util":76}],74:[function(_dereq_,module,exports){
// **N3StreamParser** parses an N3 stream into a triple stream.
var Transform = _dereq_('stream').Transform,
    util = _dereq_('util'),
    N3Parser = _dereq_('./N3Parser.js');

// ## Constructor
function N3StreamParser(options) {
  if (!(this instanceof N3StreamParser))
    return new N3StreamParser(options);

  // Initialize Transform base class
  Transform.call(this, { decodeStrings: true });
  this._readableState.objectMode = true;

  // Set up parser
  var self = this, parser = new N3Parser(options), onData, onEnd;
  parser.parse(
    // Pass dummy stream to obtain `data` and `end` callbacks
    { on: function (event, cb) { event === 'data' ? (onData = cb) : (onEnd = cb); } },
    // Handle triples by pushing them down the pipeline
    function (error, t) { error && self.emit('error', error) || t && self.push(t); },
    // Emit prefixes through the `prefix` event
    function (prefix, uri) { self.emit('prefix', prefix, uri); });

  // Implement Transform methods through parser callbacks
  this._transform = function (chunk, encoding, done) { onData(chunk); done(); };
  this._flush = function (done) { onEnd(); done(); };
}
util.inherits(N3StreamParser, Transform);

// ## Exports
module.exports = N3StreamParser;

},{"./N3Parser.js":72,"stream":37,"util":47}],75:[function(_dereq_,module,exports){
// **N3StreamWriter** serializes a triple stream into an N3 stream.
var Transform = _dereq_('stream').Transform,
    util = _dereq_('util'),
    N3Writer = _dereq_('./N3Writer.js');

// ## Constructor
function N3StreamWriter(options) {
  if (!(this instanceof N3StreamWriter))
    return new N3StreamWriter(options);

  // Initialize Transform base class
  Transform.call(this, { encoding: 'utf8' });
  this._writableState.objectMode = true;

  // Set up writer with a dummy stream object
  var self = this;
  var writer = new N3Writer({
    write: function (chunk, encoding, callback) { self.push(chunk); callback && callback(); },
    end: function (callback) { self.push(null); callback && callback(); },
  }, options);

  // Implement Transform methods on top of writer
  this._transform = function (triple, encoding, done) { writer.addTriple(triple, done); };
  this._flush = function (done) { writer.end(done); };
}
util.inherits(N3StreamWriter, Transform);

// ## Exports
module.exports = N3StreamWriter;

},{"./N3Writer.js":77,"stream":37,"util":47}],76:[function(_dereq_,module,exports){
// **N3Util** provides N3 utility functions.

var Xsd = 'http://www.w3.org/2001/XMLSchema#';
var XsdString  = Xsd + 'string';
var XsdInteger = Xsd + 'integer';
var XsdDouble = Xsd + 'double';
var XsdBoolean = Xsd + 'boolean';
var RdfLangString = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString';

var N3Util = {
  // Tests whether the given entity (triple object) represents an IRI in the N3 library
  isIRI: function (entity) {
    if (typeof entity !== 'string')
      return false;
    else if (entity.length === 0)
      return true;
    else {
      var firstChar = entity[0];
      return firstChar !== '"' && firstChar !== '_';
    }
  },

  // Tests whether the given entity (triple object) represents a literal in the N3 library
  isLiteral: function (entity) {
    return typeof entity === 'string' && entity[0] === '"';
  },

  // Tests whether the given entity (triple object) represents a blank node in the N3 library
  isBlank: function (entity) {
    return typeof entity === 'string' && entity.substr(0, 2) === '_:';
  },

  // Tests whether the given entity represents the default graph
  isDefaultGraph: function (entity) {
    return !entity;
  },

  // Tests whether the given triple is in the default graph
  inDefaultGraph: function (triple) {
    return !triple.graph;
  },

  // Gets the string value of a literal in the N3 library
  getLiteralValue: function (literal) {
    var match = /^"([^]*)"/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1];
  },

  // Gets the type of a literal in the N3 library
  getLiteralType: function (literal) {
    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  },

  // Gets the language of a literal in the N3 library
  getLiteralLanguage: function (literal) {
    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  },

  // Tests whether the given entity (triple object) represents a prefixed name
  isPrefixedName: function (entity) {
    return typeof entity === 'string' && /^[^:\/"']*:[^:\/"']+$/.test(entity);
  },

  // Expands the prefixed name to a full IRI (also when it occurs as a literal's type)
  expandPrefixedName: function (prefixedName, prefixes) {
    var match = /(?:^|"\^\^)([^:\/#"'\^_]*):[^\/]*$/.exec(prefixedName), prefix, base, index;
    if (match)
      prefix = match[1], base = prefixes[prefix], index = match.index;
    if (base === undefined)
      return prefixedName;

    // The match index is non-zero when expanding a literal's type
    return index === 0 ? base + prefixedName.substr(prefix.length + 1)
                       : prefixedName.substr(0, index + 3) +
                         base + prefixedName.substr(index + prefix.length + 4);
  },

  // Creates an IRI in N3.js representation
  createIRI: function (iri) {
    return iri && iri[0] === '"' ? N3Util.getLiteralValue(iri) : iri;
  },

  // Creates a literal in N3.js representation
  createLiteral: function (value, modifier) {
    if (!modifier) {
      switch (typeof value) {
      case 'boolean':
        modifier = XsdBoolean;
        break;
      case 'number':
        if (isFinite(value))
          modifier = value % 1 === 0 ? XsdInteger : XsdDouble;
        else {
          modifier = XsdDouble;
          if (!isNaN(value))
            value = value > 0 ? 'INF' : '-INF';
        }
        break;
      default:
        return '"' + value + '"';
      }
    }
    return '"' + value +
           (/^[a-z]+(-[a-z0-9]+)*$/i.test(modifier) ? '"@'  + modifier.toLowerCase()
                                                    : '"^^' + modifier);
  },

  // Creates a function that prepends the given IRI to a local name
  prefix: function (iri) {
    return N3Util.prefixes({ '': iri })('');
  },

  // Creates a function that allows registering and expanding prefixes
  prefixes: function (defaultPrefixes) {
    // Add all of the default prefixes
    var prefixes = Object.create(null);
    for (var prefix in defaultPrefixes)
      processPrefix(prefix, defaultPrefixes[prefix]);

    // Registers a new prefix (if an IRI was specified)
    // or retrieves a function that expands an existing prefix (if no IRI was specified)
    function processPrefix(prefix, iri) {
      // Create a new prefix if an IRI is specified or the prefix doesn't exist
      if (iri || !(prefix in prefixes)) {
        var cache = Object.create(null);
        iri = iri || '';
        // Create a function that expands the prefix
        prefixes[prefix] = function (localName) {
          return cache[localName] || (cache[localName] = iri + localName);
        };
      }
      return prefixes[prefix];
    }
    return processPrefix;
  },
};

// ## Exports
module.exports = N3Util;

},{}],77:[function(_dereq_,module,exports){
// **N3Writer** writes N3 documents.

// Matches a literal as represented in memory by the N3 library
var N3LiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i;

// rdf:type predicate (for 'a' abbreviation)
var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE   = RDF_PREFIX + 'type';

// Characters in literals that require escaping
var escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapeReplacements = {
      '\\': '\\\\', '"': '\\"', '\t': '\\t',
      '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f',
    };

// ## Constructor
function N3Writer(outputStream, options) {
  if (!(this instanceof N3Writer))
    return new N3Writer(outputStream, options);

  // Shift arguments if the first argument is not a stream
  if (outputStream && typeof outputStream.write !== 'function')
    options = outputStream, outputStream = null;
  options = options || {};

  // If no output stream given, send the output as string through the end callback
  if (!outputStream) {
    var output = '';
    this._outputStream = {
      write: function (chunk, encoding, done) { output += chunk; done && done(); },
      end:   function (done) { done && done(null, output); },
    };
    this._endStream = true;
  }
  else {
    this._outputStream = outputStream;
    this._endStream = options.end === undefined ? true : !!options.end;
  }

  // Initialize writer, depending on the format
  this._subject = null;
  if (!(/triple|quad/i).test(options.format)) {
    this._graph = '';
    this._prefixIRIs = Object.create(null);
    options.prefixes && this.addPrefixes(options.prefixes);
  }
  else {
    this._writeTriple = this._writeTripleLine;
  }
}

N3Writer.prototype = {
  // ## Private methods

  // ### `_write` writes the argument to the output stream
  _write: function (string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  },

    // ### `_writeTriple` writes the triple to the output stream
  _writeTriple: function (subject, predicate, object, graph, done) {
    try {
      // Write the graph's label if it has changed
      if (this._graph !== graph) {
        // Close the previous graph and start the new one
        this._write((this._subject === null ? '' : (this._graph ? '\n}\n' : '.\n')) +
                    (graph ? this._encodeIriOrBlankNode(graph) + ' {\n' : ''));
        this._subject = null;
        // Don't treat identical blank nodes as repeating graphs
        this._graph = graph[0] !== '[' ? graph : ']';
      }
      // Don't repeat the subject if it's the same
      if (this._subject === subject) {
        // Don't repeat the predicate if it's the same
        if (this._predicate === predicate)
          this._write(', ' + this._encodeObject(object), done);
        // Same subject, different predicate
        else
          this._write(';\n    ' +
                      this._encodePredicate(this._predicate = predicate) + ' ' +
                      this._encodeObject(object), done);
      }
      // Different subject; write the whole triple
      else
        this._write((this._subject === null ? '' : '.\n') +
                    this._encodeSubject(this._subject = subject) + ' ' +
                    this._encodePredicate(this._predicate = predicate) + ' ' +
                    this._encodeObject(object), done);
    }
    catch (error) { done && done(error); }
  },

  // ### `_writeTripleLine` writes the triple or quad to the output stream as a single line
  _writeTripleLine: function (subject, predicate, object, graph, done) {
    // Don't use prefixes
    delete this._prefixMatch;
    // Write the triple
    try {
      this._write(this._encodeIriOrBlankNode(subject) + ' ' +
                  this._encodeIriOrBlankNode(predicate) + ' ' +
                  this._encodeObject(object) +
                  (graph ? ' ' + this._encodeIriOrBlankNode(graph) + '.\n' : '.\n'), done);
    }
    catch (error) { done && done(error); }
  },

  // ### `_encodeIriOrBlankNode` represents an IRI or blank node
  _encodeIriOrBlankNode: function (entity) {
    // A blank node or list is represented as-is
    var firstChar = entity[0];
    if (firstChar === '[' || firstChar === '(' || firstChar === '_' && entity[1] === ':')
      return entity;
    // Escape special characters
    if (escape.test(entity))
      entity = entity.replace(escapeAll, characterReplacer);
    // Try to represent the IRI as prefixed name
    var prefixMatch = this._prefixRegex.exec(entity);
    return !prefixMatch ? '<' + entity + '>' :
           (!prefixMatch[1] ? entity : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);
  },

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral: function (value, type, language) {
    // Escape special characters
    if (escape.test(value))
      value = value.replace(escapeAll, characterReplacer);
    // Write the literal, possibly with type or language
    if (language)
      return '"' + value + '"@' + language;
    else if (type)
      return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
    else
      return '"' + value + '"';
  },

  // ### `_encodeSubject` represents a subject
  _encodeSubject: function (subject) {
    if (subject[0] === '"')
      throw new Error('A literal as subject is not allowed: ' + subject);
    // Don't treat identical blank nodes as repeating subjects
    if (subject[0] === '[')
      this._subject = ']';
    return this._encodeIriOrBlankNode(subject);
  },

  // ### `_encodePredicate` represents a predicate
  _encodePredicate: function (predicate) {
    if (predicate[0] === '"')
      throw new Error('A literal as predicate is not allowed: ' + predicate);
    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
  },

  // ### `_encodeObject` represents an object
  _encodeObject: function (object) {
    // Represent an IRI or blank node
    if (object[0] !== '"')
      return this._encodeIriOrBlankNode(object);
    // Represent a literal
    var match = N3LiteralMatcher.exec(object);
    if (!match) throw new Error('Invalid literal: ' + object);
    return this._encodeLiteral(match[1], match[2], match[3]);
  },

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite: function () {
    throw new Error('Cannot write because the writer has been closed.');
  },

  // ### `addTriple` adds the triple to the output stream
  addTriple: function (subject, predicate, object, graph, done) {
    // The triple was given as a triple object, so shift parameters
    if (object === undefined)
      this._writeTriple(subject.subject, subject.predicate, subject.object,
                        subject.graph || '', predicate);
    // The optional `graph` parameter was not provided
    else if (typeof graph !== 'string')
      this._writeTriple(subject, predicate, object, '', graph);
    // The `graph` parameter was provided
    else
      this._writeTriple(subject, predicate, object, graph, done);
  },

  // ### `addTriples` adds the triples to the output stream
  addTriples: function (triples) {
    for (var i = 0; i < triples.length; i++)
      this.addTriple(triples[i]);
  },

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix: function (prefix, iri, done) {
    var prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  },

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes: function (prefixes, done) {
    // Add all useful prefixes
    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
    for (var prefix in prefixes) {
      // Verify whether the prefix can be used and does not exist yet
      var iri = prefixes[prefix];
      if (/[#\/]$/.test(iri) && prefixIRIs[iri] !== (prefix += ':')) {
        hasPrefixes = true;
        prefixIRIs[iri] = prefix;
        // Finish a possible pending triple
        if (this._subject !== null) {
          this._write(this._graph ? '\n}\n' : '.\n');
          this._subject = null, this._graph = '';
        }
        // Write prefix
        this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
      }
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      var IRIlist = '', prefixList = '';
      for (var prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  },

  // ### `blank` creates a blank node with the given content
  blank: function (predicate, object) {
    var children = predicate, child, length;
    // Empty blank node
    if (predicate === undefined)
      children = [];
    // Blank node passed as blank("predicate", "object")
    else if (typeof predicate === 'string')
      children = [{ predicate: predicate, object: object }];
    // Blank node passed as blank({ predicate: predicate, object: object })
    else if (!('length' in predicate))
      children = [predicate];

    switch (length = children.length) {
    // Generate an empty blank node
    case 0:
      return '[]';
    // Generate a non-nested one-triple blank node
    case 1:
      child = children[0];
      if (child.object[0] !== '[')
        return '[ ' + this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object) + ' ]';
    // Generate a multi-triple or nested blank node
    default:
      var contents = '[';
      // Write all triples in order
      for (var i = 0; i < length; i++) {
        child = children[i];
        // Write only the object is the predicate is the same as the previous
        if (child.predicate === predicate)
          contents += ', ' + this._encodeObject(child.object);
        // Otherwise, write the predicate and the object
        else {
          contents += (i ? ';\n  ' : '\n  ') +
                      this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object);
          predicate = child.predicate;
        }
      }
      return contents + '\n]';
    }
  },

  // ### `list` creates a list node with the given content
  list: function (elements) {
    var length = elements && elements.length || 0, contents = new Array(length);
    for (var i = 0; i < length; i++)
      contents[i] = this._encodeObject(elements[i]);
    return '(' + contents.join(' ') + ')';
  },

  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
  _prefixRegex: /$0^/,

  // ### `end` signals the end of the output stream
  end: function (done) {
    // Finish a possible pending triple
    if (this._subject !== null) {
      this._write(this._graph ? '\n}\n' : '.\n');
      this._subject = null;
    }
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  },
};

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = escapeReplacements[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}

// ## Exports
module.exports = N3Writer;

},{}],78:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassOrder = _dereq_('./class-order');
var Node = _dereq_('./node');

var BlankNode = function (_Node) {
  _inherits(BlankNode, _Node);

  function BlankNode(id) {
    _classCallCheck(this, BlankNode);

    var _this = _possibleConstructorReturn(this, (BlankNode.__proto__ || Object.getPrototypeOf(BlankNode)).call(this));

    _this.termType = BlankNode.termType;
    _this.id = BlankNode.nextId++;
    _this.value = id || _this.id.toString();
    return _this;
  }

  _createClass(BlankNode, [{
    key: 'compareTerm',
    value: function compareTerm(other) {
      if (this.classOrder < other.classOrder) {
        return -1;
      }
      if (this.classOrder > other.classOrder) {
        return +1;
      }
      if (this.id < other.id) {
        return -1;
      }
      if (this.id > other.id) {
        return +1;
      }
      return 0;
    }
  }, {
    key: 'copy',
    value: function copy(formula) {
      // depends on the formula
      var bnodeNew = new BlankNode();
      formula.copyTo(this, bnodeNew);
      return bnodeNew;
    }
  }, {
    key: 'toCanonical',
    value: function toCanonical() {
      return '_:' + this.value;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return BlankNode.NTAnonymousNodePrefix + this.id;
    }
  }]);

  return BlankNode;
}(Node);

BlankNode.nextId = 0;
BlankNode.termType = 'BlankNode';
BlankNode.NTAnonymousNodePrefix = '_:n';
BlankNode.prototype.classOrder = ClassOrder['BlankNode'];
BlankNode.prototype.isBlank = 1;
BlankNode.prototype.isVar = 1;

module.exports = BlankNode;
},{"./class-order":79,"./node":95}],79:[function(_dereq_,module,exports){
'use strict';

var ClassOrder = {
  'Literal': 1,
  'Collection': 3,
  'Graph': 4,
  'NamedNode': 5,
  'BlankNode': 6,
  'Variable': 7
};

module.exports = ClassOrder;
},{}],80:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankNode = _dereq_('./blank-node');
var ClassOrder = _dereq_('./class-order');
var Node = _dereq_('./node');

var Collection = function (_Node) {
  _inherits(Collection, _Node);

  function Collection(initial) {
    _classCallCheck(this, Collection);

    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this));

    _this.termType = Collection.termType;
    _this.id = BlankNode.nextId++;
    _this.elements = [];
    _this.closed = false;
    if (initial && initial.length > 0) {
      initial.forEach(function (element) {
        _this.elements.push(Node.fromValue(element));
      });
    }
    return _this;
  }

  _createClass(Collection, [{
    key: 'append',
    value: function append(element) {
      return this.elements.push(element);
    }
  }, {
    key: 'close',
    value: function close() {
      this.closed = true;
      return this.closed;
    }
  }, {
    key: 'shift',
    value: function shift() {
      return this.elements.shift();
    }
  }, {
    key: 'substitute',
    value: function substitute(bindings) {
      var elementsCopy = this.elements.map(function (ea) {
        ea.substitute(bindings);
      });
      return new Collection(elementsCopy);
    }
  }, {
    key: 'toNT',
    value: function toNT() {
      return BlankNode.NTAnonymousNodePrefix + this.id;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '(' + this.elements.join(' ') + ')';
    }
  }, {
    key: 'unshift',
    value: function unshift(element) {
      return this.elements.unshift(element);
    }
  }]);

  return Collection;
}(Node);

Collection.termType = 'Collection';
Collection.prototype.classOrder = ClassOrder['Collection'];
Collection.prototype.compareTerm = BlankNode.prototype.compareTerm;
Collection.prototype.isVar = 0;

module.exports = Collection;
},{"./blank-node":78,"./class-order":79,"./node":95}],81:[function(_dereq_,module,exports){
'use strict';

module.exports.convertToJson = convertToJson;
module.exports.convertToNQuads = convertToNQuads;

var asyncLib = _dereq_('async'); // @@ Goal: remove this dependency
var jsonld = _dereq_('jsonld');
var N3 = _dereq_('n3'); // @@ Goal: remove this dependency

function convertToJson(n3String, jsonCallback) {
  var jsonString;
  var n3Parser = N3.Parser();
  var n3Writer = N3.Writer({
    format: 'N-Quads'
  });
  asyncLib.waterfall([function (callback) {
    n3Parser.parse(n3String, callback);
  }, function (triple, prefix, callback) {
    if (triple !== null) {
      n3Writer.addTriple(triple);
    }
    if (typeof callback === 'function') {
      n3Writer.end(callback);
    }
  }, function (result, callback) {
    try {
      jsonld.fromRDF(result, {
        format: 'application/nquads'
      }, callback);
    } catch (err) {
      callback(err);
    }
  }, function (json, callback) {
    jsonString = JSON.stringify(json);
    jsonCallback(null, jsonString);
  }], function (err, result) {
    jsonCallback(err, jsonString);
  });
}

function convertToNQuads(n3String, nquadCallback) {
  var nquadString;
  var n3Parser = N3.Parser();
  var n3Writer = N3.Writer({
    format: 'N-Quads'
  });
  asyncLib.waterfall([function (callback) {
    n3Parser.parse(n3String, callback);
  }, function (triple, prefix, callback) {
    if (triple !== null) {
      n3Writer.addTriple(triple);
    }
    if (typeof callback === 'function') {
      n3Writer.end(callback);
    }
  }, function (result, callback) {
    nquadString = result;
    nquadCallback(null, nquadString);
  }], function (err, result) {
    nquadCallback(err, nquadString);
  });
}
},{"async":66,"jsonld":69,"n3":112}],82:[function(_dereq_,module,exports){
'use strict';

var _indexedFormula = _dereq_('./indexed-formula');

var _indexedFormula2 = _interopRequireDefault(_indexedFormula);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BlankNode = _dereq_('./blank-node');
var Collection = _dereq_('./collection');
var DefaultGraph = _dereq_('./default-graph');
var Fetcher = _dereq_('./fetcher');

var Literal = _dereq_('./literal');
var NamedNode = _dereq_('./named-node');
var Statement = _dereq_('./statement');
var Variable = _dereq_('./variable');

function blankNode(value) {
  return new BlankNode(value);
}
function collection(elements) {
  return new Collection(elements);
}
function defaultGraph() {
  return new DefaultGraph();
}
function fetcher(store, timeout, async) {
  return new Fetcher(store, timeout, async);
}
function graph() {
  return new _indexedFormula2.default();
}
function lit(val, lang, dt) {
  return new Literal('' + val, lang, dt);
}
function literal(value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new Literal(value, languageOrDatatype);
    } else {
      return new Literal(value, null, namedNode(languageOrDatatype));
    }
  } else {
    return new Literal(value, null, languageOrDatatype);
  }
}
function namedNode(value) {
  return new NamedNode(value);
}
function quad(subject, predicate, object, graph) {
  graph = graph || new DefaultGraph();
  return new Statement(subject, predicate, object, graph);
}
function st(subject, predicate, object, graph) {
  return new Statement(subject, predicate, object, graph);
}
function triple(subject, predicate, object) {
  return quad(subject, predicate, object);
}
function variable(name) {
  return new Variable(name);
}

// rdfjs spec factory methods
module.exports.blankNode = blankNode;
module.exports.defaultGraph = defaultGraph;
module.exports.graph = graph;
module.exports.literal = literal;
module.exports.namedNode = namedNode;
module.exports.quad = quad;
module.exports.triple = triple;
module.exports.variable = variable;

// rdflib only
module.exports.collection = collection;
module.exports.fetcher = fetcher;
module.exports.lit = lit;
module.exports.st = st;
},{"./blank-node":78,"./collection":80,"./default-graph":83,"./fetcher":85,"./indexed-formula":88,"./literal":90,"./named-node":93,"./statement":105,"./variable":110}],83:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Node = _dereq_('./node');

var DefaultGraph = function (_Node) {
  _inherits(DefaultGraph, _Node);

  function DefaultGraph() {
    _classCallCheck(this, DefaultGraph);

    var _this = _possibleConstructorReturn(this, (DefaultGraph.__proto__ || Object.getPrototypeOf(DefaultGraph)).call(this));

    _this.termType = 'DefaultGraph';
    _this.value = '';
    return _this;
  }

  _createClass(DefaultGraph, [{
    key: 'toCanonical',
    value: function toCanonical() {
      return this.value;
    }
  }]);

  return DefaultGraph;
}(Node);

module.exports = DefaultGraph;
},{"./node":95}],84:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Node = _dereq_('./node');

/**
 * Singleton subclass of an empty Collection.
 */

var Empty = function (_Node) {
  _inherits(Empty, _Node);

  function Empty() {
    _classCallCheck(this, Empty);

    var _this = _possibleConstructorReturn(this, (Empty.__proto__ || Object.getPrototypeOf(Empty)).call(this));

    _this.termType = Empty.termType;
    return _this;
  }

  _createClass(Empty, [{
    key: 'toString',
    value: function toString() {
      return '()';
    }
  }]);

  return Empty;
}(Node);

Empty.termType = 'empty';

module.exports = Empty;
},{"./node":95}],85:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* global $SolidTestEnvironment */
/**
 *
 * Project: rdflib.js
 *
 * File: fetcher.js
 *
 * Description: contains functions for requesting/fetching/retracting
 *  This implements quite a lot of the web architecture.
 * A fetcher is bound to a specific knowledge base graph, into which
 * it loads stuff and into which it writes its metadata
 * @@ The metadata should be optionally a separate graph
 *
 * - implements semantics of HTTP headers, Internet Content Types
 * - selects parsers for rdf/xml, n3, rdfa, grddl
 *
 * Dependencies:
 *
 * needs: util.js uri.js term.js rdfparser.js rdfa.js n3parser.js
 *      identity.js sparql.js jsonparser.js
 *
 * Independent of jQuery
 */

/**
 * Things to test: callbacks on request, refresh, retract
 *   loading from HTTP, HTTPS, FTP, FILE, others?
 * To do:
 * Firing up a mail client for mid:  (message:) URLs
 */
var log = _dereq_('./log');
var N3Parser = _dereq_('./n3parser');
var NamedNode = _dereq_('./named-node');
var Namespace = _dereq_('./namespace');
var rdfParse = _dereq_('./parse');
var parseRDFaDOM = _dereq_('./rdfaparser').parseRDFaDOM;
var RDFParser = _dereq_('./rdfxmlparser');
var Uri = _dereq_('./uri');
var Util = _dereq_('./util');
var serialize = _dereq_('./serialize');

var Parsable = {
  'text/n3': true,
  'text/turtle': true,
  'application/rdf+xml': true,
  'application/xhtml+xml': true,
  'text/html': true,
  'application/ld+json': true
};

var Fetcher = function Fetcher(store, timeout, async) {
  this.store = store;
  this.thisURI = 'http://dig.csail.mit.edu/2005/ajar/ajaw/rdf/sources.js' + '#SourceFetcher'; // -- Kenny
  this.timeout = timeout || 30000;
  this.async = async != null ? async : true;
  this.appNode = this.store.bnode(); // Denoting this session
  this.store.fetcher = this; // Bi-linked
  this.requested = {};
  // this.requested[uri] states:
  //   undefined     no record of web access or records reset
  //   true          has been requested, XHR in progress
  //   'done'        received, Ok
  //   403           HTTP status unauthorized
  //   404           Ressource does not exist. Can be created etc.
  //   'redirected'  In attempt to counter CORS problems retried.
  //   other strings mean various other erros, such as parse errros.
  //
  this.redirectedTo = {}; // Wehn 'redireced'
  this.fetchCallbacks = {}; // fetchCallbacks[uri].push(callback)

  this.nonexistant = {}; // keep track of explict 404s -> we can overwrite etc
  this.lookedUp = {};
  this.handlers = [];
  this.mediatypes = {};
  var sf = this;
  var kb = this.store;
  var ns = {}; // Convenience namespaces needed in this module:
  // These are delibertely not exported as the user application should
  // make its own list and not rely on the prefixes used here,
  // and not be tempted to add to them, and them clash with those of another
  // application.
  ns.link = Namespace('http://www.w3.org/2007/ont/link#');
  ns.http = Namespace('http://www.w3.org/2007/ont/http#');
  ns.httph = Namespace('http://www.w3.org/2007/ont/httph#');
  ns.rdf = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  ns.rdfs = Namespace('http://www.w3.org/2000/01/rdf-schema#');
  ns.dc = Namespace('http://purl.org/dc/elements/1.1/');

  sf.mediatypes['image/*'] = {
    'q': 0.9
  };

  sf.mediatypes['*/*'] = { // Must allow access to random content
    'q': 0.1
  };

  Fetcher.crossSiteProxy = function (uri) {
    if (Fetcher.crossSiteProxyTemplate) {
      return Fetcher.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri));
    } else {
      return undefined;
    }
  };

  Fetcher.RDFXMLHandler = function (args) {
    if (args) {
      this.dom = args[0];
    }
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        // sf.addStatus(xhr.req, 'parsing soon as RDF/XML...')
        var kb = sf.store;
        if (!this.dom) this.dom = Util.parseXML(xhr.responseText);
        var root = this.dom.documentElement;
        if (root.nodeName === 'parsererror') {
          // @@ Mozilla only See issue/issue110
          sf.failFetch(xhr, 'Badly formed XML in ' + xhr.resource.uri); // have to fail the request
          throw new Error('Badly formed XML in ' + xhr.resource.uri); // @@ Add details
        }
        var parser = new RDFParser(kb);
        try {
          parser.parse(this.dom, xhr.original.uri, xhr.original);
        } catch (e) {
          sf.addStatus(xhr.req, 'Syntax error parsing RDF/XML! ' + e);
          console.log('Syntax error parsing RDF/XML! ' + e);
        }
        if (!xhr.options.noMeta) {
          kb.add(xhr.original, ns.rdf('type'), ns.link('RDFDocument'), sf.appNode);
        }
        cb();
      };
    };
  };
  Fetcher.RDFXMLHandler.toString = function () {
    return 'RDFXMLHandler';
  };
  Fetcher.RDFXMLHandler.register = function (sf) {
    sf.mediatypes['application/rdf+xml'] = {
      'q': 0.9
    };
  };
  Fetcher.RDFXMLHandler.pattern = new RegExp('application/rdf\\+xml');

  // This would much better use on-board XSLT engine. @@
  /*  deprocated 2016-02-17  timbl
  Fetcher.doGRDDL = function(kb, doc, xslturi, xmluri) {
      sf.requestURI('http://www.w3.org/2005/08/' + 'online_xslt/xslt?' + 'xslfile=' + escape(xslturi) + '&xmlfile=' + escape(xmluri), doc)
  }
  */
  Fetcher.XHTMLHandler = function (args) {
    if (args) {
      this.dom = args[0];
    }
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        var relation, reverse;
        if (!this.dom) {
          this.dom = Util.parseXML(xhr.responseText);
        }
        var kb = sf.store;

        // dc:title
        var title = this.dom.getElementsByTagName('title');
        if (title.length > 0) {
          kb.add(xhr.resource, ns.dc('title'), kb.literal(title[0].textContent), xhr.resource);
          // log.info("Inferring title of " + xhr.resource)
        }

        // link rel
        var links = this.dom.getElementsByTagName('link');
        for (var x = links.length - 1; x >= 0; x--) {
          // @@ rev
          relation = links[x].getAttribute('rel');
          reverse = false;
          if (!relation) {
            relation = links[x].getAttribute('rev');
            reverse = true;
          }
          if (relation) {
            sf.linkData(xhr, relation, links[x].getAttribute('href'), xhr.resource, reverse);
          }
        }

        // Data Islands

        var scripts = this.dom.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
          var contentType = scripts[i].getAttribute('type');
          if (Parsable[contentType]) {
            rdfParse(scripts[i].textContent, kb, xhr.original.uri, contentType);
          }
        }

        if (!xhr.options.noMeta) {
          kb.add(xhr.resource, ns.rdf('type'), ns.link('WebPage'), sf.appNode);
        }

        if (!xhr.options.noRDFa && parseRDFaDOM) {
          // enable by default
          try {
            parseRDFaDOM(this.dom, kb, xhr.original.uri);
          } catch (e) {
            var msg = 'Error trying to parse ' + xhr.resource + ' as RDFa:\n' + e + ':\n' + e.stack;
            // dump(msg+"\n")
            sf.failFetch(xhr, msg);
            return;
          }
        }
        cb(); // Fire done callbacks
      };
    };
  };
  Fetcher.XHTMLHandler.toString = function () {
    return 'XHTMLHandler';
  };
  Fetcher.XHTMLHandler.register = function (sf) {
    sf.mediatypes['application/xhtml+xml'] = {};
  };
  Fetcher.XHTMLHandler.pattern = new RegExp('application/xhtml');

  Fetcher.XMLHandler = function () {
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        var dom = Util.parseXML(xhr.responseText);

        // XML Semantics defined by root element namespace
        // figure out the root element
        for (var c = 0; c < dom.childNodes.length; c++) {
          // is this node an element?
          if (dom.childNodes[c].nodeType === 1) {
            // We've found the first element, it's the root
            var ns = dom.childNodes[c].namespaceURI;

            // Is it RDF/XML?
            if (ns && ns === ns['rdf']) {
              sf.addStatus(xhr.req, 'Has XML root element in the RDF namespace, so assume RDF/XML.');
              sf.switchHandler('RDFXMLHandler', xhr, cb, [dom]);
              return;
            }
            // it isn't RDF/XML or we can't tell
            // Are there any GRDDL transforms for this namespace?
            // @@ assumes ns documents have already been loaded
            /*
            var xforms = kb.each(kb.sym(ns), kb.sym("http://www.w3.org/2003/g/data-view#namespaceTransformation"))
            for (var i = 0; i < xforms.length; i++) {
                var xform = xforms[i]
                // log.info(xhr.resource.uri + " namespace " + ns + " has GRDDL ns transform" + xform.uri)
                 Fetcher.doGRDDL(kb, xhr.resource, xform.uri, xhr.resource.uri)
            }
            */
            break;
          }
        }

        // Or it could be XHTML?
        // Maybe it has an XHTML DOCTYPE?
        if (dom.doctype) {
          // log.info("We found a DOCTYPE in " + xhr.resource)
          if (dom.doctype.name === 'html' && dom.doctype.publicId.match(/^-\/\/W3C\/\/DTD XHTML/) && dom.doctype.systemId.match(/http:\/\/www.w3.org\/TR\/xhtml/)) {
            sf.addStatus(xhr.req, 'Has XHTML DOCTYPE. Switching to XHTML Handler.\n');
            sf.switchHandler('XHTMLHandler', xhr, cb);
            return;
          }
        }

        // Or what about an XHTML namespace?
        var html = dom.getElementsByTagName('html')[0];
        if (html) {
          var xmlns = html.getAttribute('xmlns');
          if (xmlns && xmlns.match(/^http:\/\/www.w3.org\/1999\/xhtml/)) {
            sf.addStatus(xhr.req, 'Has a default namespace for ' + 'XHTML. Switching to XHTMLHandler.\n');
            sf.switchHandler('XHTMLHandler', xhr, cb);
            return;
          }
        }

        // At this point we should check the namespace document (cache it!) and
        // look for a GRDDL transform
        // @@  Get namespace document <n>, parse it, look for  <n> grddl:namespaceTransform ?y
        // Apply ?y to   dom
        // We give up. What dialect is this?
        sf.failFetch(xhr, 'Unsupported dialect of XML: not RDF or XHTML namespace, etc.\n' + xhr.responseText.slice(0, 80));
      };
    };
  };

  Fetcher.XMLHandler.toString = function () {
    return 'XMLHandler';
  };
  Fetcher.XMLHandler.register = function (sf) {
    sf.mediatypes['text/xml'] = {
      'q': 0.5
    };
    sf.mediatypes['application/xml'] = {
      'q': 0.5
    };
  };
  Fetcher.XMLHandler.pattern = new RegExp('(text|application)/(.*)xml');

  Fetcher.HTMLHandler = function () {
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        var rt = xhr.responseText;
        // We only handle XHTML so we have to figure out if this is XML
        // log.info("Sniffing HTML " + xhr.resource + " for XHTML.")

        if (rt.match(/\s*<\?xml\s+version\s*=[^<>]+\?>/)) {
          sf.addStatus(xhr.req, "Has an XML declaration. We'll assume " + "it's XHTML as the content-type was text/html.\n");
          sf.switchHandler('XHTMLHandler', xhr, cb);
          return;
        }

        // DOCTYPE
        // There is probably a smarter way to do this
        if (rt.match(/.*<!DOCTYPE\s+html[^<]+-\/\/W3C\/\/DTD XHTML[^<]+http:\/\/www.w3.org\/TR\/xhtml[^<]+>/)) {
          sf.addStatus(xhr.req, 'Has XHTML DOCTYPE. Switching to XHTMLHandler.\n');
          sf.switchHandler('XHTMLHandler', xhr, cb);
          return;
        }

        // xmlns
        if (rt.match(/[^(<html)]*<html\s+[^<]*xmlns=['"]http:\/\/www.w3.org\/1999\/xhtml["'][^<]*>/)) {
          sf.addStatus(xhr.req, 'Has default namespace for XHTML, so switching to XHTMLHandler.\n');
          sf.switchHandler('XHTMLHandler', xhr, cb);
          return;
        }

        // dc:title	                       //no need to escape '/' here
        var titleMatch = new RegExp('<title>([\\s\\S]+?)</title>', 'im').exec(rt);
        if (titleMatch) {
          var kb = sf.store;
          kb.add(xhr.resource, ns.dc('title'), kb.literal(titleMatch[1]), xhr.resource); // think about xml:lang later
          kb.add(xhr.resource, ns.rdf('type'), ns.link('WebPage'), sf.appNode);
          cb(); // doneFetch, not failed
          return;
        }
        sf.addStatus(xhr.req, 'non-XML HTML document, not parsed for data.');
        sf.doneFetch(xhr);
        // sf.failFetch(xhr, "Sorry, can't yet parse non-XML HTML")
      };
    };
  };

  Fetcher.HTMLHandler.toString = function () {
    return 'HTMLHandler';
  };
  Fetcher.HTMLHandler.register = function (sf) {
    sf.mediatypes['text/html'] = {
      'q': 0.9
    };
  };
  Fetcher.HTMLHandler.pattern = new RegExp('text/html');

  Fetcher.TextHandler = function () {
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        // We only speak dialects of XML right now. Is this XML?
        var rt = xhr.responseText;

        // Look for an XML declaration
        if (rt.match(/\s*<\?xml\s+version\s*=[^<>]+\?>/)) {
          sf.addStatus(xhr.req, 'Warning: ' + xhr.resource + " has an XML declaration. We'll assume " + "it's XML but its content-type wasn't XML.\n");
          sf.switchHandler('XMLHandler', xhr, cb);
          return;
        }

        // Look for an XML declaration
        if (rt.slice(0, 500).match(/xmlns:/)) {
          sf.addStatus(xhr.req, "May have an XML namespace. We'll assume " + "it's XML but its content-type wasn't XML.\n");
          sf.switchHandler('XMLHandler', xhr, cb);
          return;
        }

        // We give up finding semantics - this is not an error, just no data
        sf.addStatus(xhr.req, 'Plain text document, no known RDF semantics.');
        sf.doneFetch(xhr);
        //                sf.failFetch(xhr, "unparseable - text/plain not visibly XML")
        //                dump(xhr.resource + " unparseable - text/plain not visibly XML, starts:\n" + rt.slice(0, 500)+"\n")
      };
    };
  };

  Fetcher.TextHandler.toString = function () {
    return 'TextHandler';
  };
  Fetcher.TextHandler.register = function (sf) {
    sf.mediatypes['text/plain'] = {
      'q': 0.5
    };
  };
  Fetcher.TextHandler.pattern = new RegExp('text/plain');

  Fetcher.N3Handler = function () {
    this.handlerFactory = function (xhr) {
      xhr.handle = function (cb) {
        // Parse the text of this non-XML file

        // console.log('web.js: Parsing as N3 ' + xhr.resource.uri + ' base: ' + xhr.original.uri) // @@@@ comment me out
        // sf.addStatus(xhr.req, "N3 not parsed yet...")
        var p = N3Parser(kb, kb, xhr.original.uri, xhr.original.uri, null, null, '', null);
        //                p.loadBuf(xhr.responseText)
        try {
          p.loadBuf(xhr.responseText);
        } catch (e) {
          var msg = 'Error trying to parse ' + xhr.resource + ' as Notation3:\n' + e + ':\n' + e.stack;
          // dump(msg+"\n")
          sf.failFetch(xhr, msg);
          return;
        }

        sf.addStatus(xhr.req, 'N3 parsed: ' + p.statementCount + ' triples in ' + p.lines + ' lines.');
        sf.store.add(xhr.original, ns.rdf('type'), ns.link('RDFDocument'), sf.appNode);
        // var args = [xhr.original.uri] // Other args needed ever?
        sf.doneFetch(xhr);
      };
    };
  };

  Fetcher.N3Handler.toString = function () {
    return 'N3Handler';
  };
  Fetcher.N3Handler.register = function (sf) {
    sf.mediatypes['text/n3'] = {
      'q': '1.0'
    }; // as per 2008 spec
    /*
    sf.mediatypes['application/x-turtle'] = {
      'q': 1.0
    } // pre 2008
    */
    sf.mediatypes['text/turtle'] = {
      'q': 1.0
    }; // post 2008
  };
  Fetcher.N3Handler.pattern = new RegExp('(application|text)/(x-)?(rdf\\+)?(n3|turtle)');

  Util.callbackify(this, ['request', 'recv', 'headers', 'load', 'fail', 'refresh', 'retract', 'done']);

  this.addHandler = function (handler) {
    sf.handlers.push(handler);
    handler.register(sf);
  };

  this.switchHandler = function (name, xhr, cb, args) {
    var Handler = null;
    for (var i = 0; i < this.handlers.length; i++) {
      if ('' + this.handlers[i] === name) {
        Handler = this.handlers[i];
      }
    }
    if (!Handler) {
      throw new Error('web.js: switchHandler: name=' + name + ' , this.handlers =' + this.handlers + '\n' + 'switchHandler: switching to ' + Handler + '; sf=' + sf + '; typeof Fetcher=' + (typeof Fetcher === 'undefined' ? 'undefined' : _typeof(Fetcher)) + ';\n\t Fetcher.HTMLHandler=' + Fetcher.HTMLHandler + '\n' + '\n\tsf.handlers=' + sf.handlers + '\n');
    }
    new Handler(args).handlerFactory(xhr);
    xhr.handle(cb);
  };

  this.addStatus = function (req, status) {
    // <Debug about="parsePerformance">
    var now = new Date();
    status = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '.' + now.getMilliseconds() + '] ' + status;
    // </Debug>
    var kb = this.store;
    var s = kb.the(req, ns.link('status'));
    if (s && s.append) {
      s.append(kb.literal(status));
    } else {
      log.warn('web.js: No list to add to: ' + s + ',' + status); // @@@
    }
  };

  // Record errors in the system on failure
  // Returns xhr so can just do return this.failfetch(...)
  this.failFetch = function (xhr, status) {
    this.addStatus(xhr.req, status);
    if (!xhr.options.noMeta) {
      kb.add(xhr.original, ns.link('error'), status);
    }
    if (!xhr.resource.sameTerm(xhr.original)) {
      console.log('@@ Recording failure original ' + xhr.original + '( as ' + xhr.resource + ') : ' + xhr.status);
    } else {
      console.log('@@ Recording failure for ' + xhr.original + ': ' + xhr.status);
    }
    this.requested[Uri.docpart(xhr.original.uri)] = xhr.status; // changed 2015 was false
    while (this.fetchCallbacks[xhr.original.uri] && this.fetchCallbacks[xhr.original.uri].length) {
      this.fetchCallbacks[xhr.original.uri].shift()(false, 'Fetch of <' + xhr.original.uri + '> failed: ' + status, xhr);
    }
    delete this.fetchCallbacks[xhr.original.uri];
    this.fireCallbacks('fail', [xhr.original.uri, status]);
    xhr.abort();
    return xhr;
  };

  // in the why part of the quad distinguish between HTML and HTTP header
  // Reverse is set iif the link was rev= as opposed to rel=
  this.linkData = function (xhr, rel, uri, why, reverse) {
    if (!uri) return;
    var predicate;
    // See http://www.w3.org/TR/powder-dr/#httplink for describedby 2008-12-10
    var obj = kb.sym(Uri.join(uri, xhr.original.uri));
    if (rel === 'alternate' || rel === 'seeAlso' || rel === 'meta' || rel === 'describedby') {
      if (obj.uri === xhr.original.uri) return;
      predicate = ns.rdfs('seeAlso');
    } else if (rel === 'type') {
      predicate = kb.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');
    } else {
      // See https://www.iana.org/assignments/link-relations/link-relations.xml
      // Alas not yet in RDF yet for each predicate
      /// encode space in e.g. rel="shortcut icon"
      predicate = kb.sym(Uri.join(encodeURIComponent(rel), 'http://www.iana.org/assignments/link-relations/'));
    }
    if (reverse) {
      kb.add(obj, predicate, xhr.original, why);
    } else {
      kb.add(xhr.original, predicate, obj, why);
    }
  };

  this.parseLinkHeader = function (xhr, thisReq) {
    var link;
    try {
      link = xhr.getResponseHeader('link'); // May crash from CORS error
    } catch (e) {}
    if (link) {
      var linkexp = /<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g;
      var paramexp = /[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g;

      var matches = link.match(linkexp);
      for (var i = 0; i < matches.length; i++) {
        var split = matches[i].split('>');
        var href = split[0].substring(1);
        var ps = split[1];
        var s = ps.match(paramexp);
        for (var j = 0; j < s.length; j++) {
          var p = s[j];
          var paramsplit = p.split('=');
          // var name = paramsplit[0]
          var rel = paramsplit[1].replace(/["']/g, ''); // '"
          this.linkData(xhr, rel, href, thisReq);
        }
      }
    }
  };

  this.doneFetch = function (xhr) {
    this.addStatus(xhr.req, 'Done.');
    this.requested[xhr.original.uri] = 'done'; // Kenny
    while (this.fetchCallbacks[xhr.original.uri] && this.fetchCallbacks[xhr.original.uri].length) {
      this.fetchCallbacks[xhr.original.uri].shift()(true, undefined, xhr);
    }
    delete this.fetchCallbacks[xhr.original.uri];
    this.fireCallbacks('done', [xhr.original.uri]);
  };
  var handlerList = [Fetcher.RDFXMLHandler, Fetcher.XHTMLHandler, Fetcher.XMLHandler, Fetcher.HTMLHandler, Fetcher.TextHandler, Fetcher.N3Handler];
  handlerList.map(this.addHandler);

  /** Note two nodes are now smushed
   **
   ** If only one was flagged as looked up, then
   ** the new node is looked up again, which
   ** will make sure all the URIs are dereferenced
   */
  this.nowKnownAs = function (was, now) {
    if (this.lookedUp[was.uri]) {
      if (!this.lookedUp[now.uri]) this.lookUpThing(now, was); //  @@@@  Transfer userCallback
    } else if (this.lookedUp[now.uri]) {
      if (!this.lookedUp[was.uri]) this.lookUpThing(was, now);
    }
  };

  // Returns promise of XHR
  //
  //  Writes back to the web what we have in the store for this uri
  this.putBack = function (uri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    uri = uri.uri || uri; // Accept object or string
    var doc = new NamedNode(uri).doc(); // strip off #
    options.data = serialize(doc, this.store, doc.uri, options.contentType || 'text/turtle');
    return this.webOperation('PUT', uri, options);
  };

  // Returns promise of XHR
  //
  this.webOperation = function (method, uri) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    uri = uri.uri || uri;
    uri = this.proxyIfNecessary(uri);
    var fetcher = this;
    return new Promise(function (resolve, reject) {
      var xhr = Util.XMLHTTPFactory();
      xhr.options = options;
      xhr.original = fetcher.store.sym(uri);
      if (!options.noMeta && typeof tabulator !== 'undefined') {
        fetcher.saveRequestMetadata(xhr, fetcher.store, uri);
      }
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          // NOte a 404 can be not afailure
          var ok = !xhr.status || xhr.status >= 200 && xhr.status < 300;
          if (!options.noMeta && typeof tabulator !== 'undefined') {
            fetcher.saveResponseMetadata(xhr, fetcher.store);
          }
          if (ok) {
            resolve(xhr);
          } else {
            reject(xhr.status + ' ' + xhr.statusText);
          }
        }
      };
      xhr.open(method, uri, true);
      xhr.setRequestHeader('Content-type', options.contentType || 'text/turtle');
      xhr.send(options.data ? options.data : undefined);
    });
  };

  this.webCopy = function (here, there, content_type) {
    var fetcher = this;
    here = here.uri || here;
    return new Promise(function (resolve, reject) {
      fetcher.webOperation('GET', here).then(function (xhr) {
        fetcher.webOperation('PUT', // @@@ change to binary from text
        there, { data: xhr.responseText, contentType: content_type }).then(function (xhr) {
          resolve(xhr);
        }).catch(function (e) {
          reject(e);
        });
      }).catch(function (e) {
        reject(e);
      });
    });
  };

  // Looks up something.
  //
  // Looks up all the URIs a things has.
  //
  // Parameters:
  //
  //  term:       canonical term for the thing whose URI is to be dereferenced
  //  rterm:      the resource which refered to this (for tracking bad links)
  //  options:    (old: force paraemter) or dictionary of options:
  //      force:      Load the data even if loaded before
  //  oneDone:   is called as callback(ok, errorbody, xhr) for each one
  //  allDone:   is called as callback(ok, errorbody) for all of them
  // Returns      the number of URIs fetched
  //
  this.lookUpThing = function (term, rterm, options, oneDone, allDone) {
    var uris = kb.uris(term); // Get all URIs
    var success = true;
    var errors = '';
    var outstanding = {};
    var force;
    if (options === false || options === true) {
      // Old signature
      force = options;
      options = { force: force };
    } else {
      if (options === undefined) options = {};
      force = !!options.force;
    }

    if (typeof uris !== 'undefined') {
      for (var i = 0; i < uris.length; i++) {
        var u = uris[i];
        outstanding[u] = true;
        this.lookedUp[u] = true;
        var sf = this;

        var requestOne = function requestOne(u1) {
          sf.requestURI(Uri.docpart(u1), rterm, options, function (ok, body, xhr) {
            if (ok) {
              if (oneDone) oneDone(true, u1);
            } else {
              if (oneDone) oneDone(false, body);
              success = false;
              errors += body + '\n';
            }
            delete outstanding[u];
            if (Object.keys(outstanding).length > 0) {
              return;
            }
            if (allDone) {
              allDone(success, errors);
            }
          });
        };
        requestOne(u);
      }
    }
    return uris.length;
  };

  /* Promise-based load function
  **
  ** NamedNode -> Promise of xhr
  ** uri string -> Promise of xhr
  ** Array of the above -> Promise of array of xhr
  **
  ** @@ todo: If p1 is array then sequence or parallel fetch of all
  */
  this.load = function (uri, options) {
    var fetcher = this;
    if (uri instanceof Array) {
      var ps = uri.map(function (x) {
        return fetcher.load(x);
      });
      return Promise.all(ps);
    }
    uri = uri.uri || uri; // NamedNode or URI string
    return new Promise(function (resolve, reject) {
      fetcher.nowOrWhenFetched(uri, options, function (ok, message, xhr) {
        if (ok) {
          resolve(xhr);
        } else {
          reject(message);
        }
      });
    });
  };

  /*  Ask for a doc to be loaded if necessary then call back
  **
  ** Changed 2013-08-20:  Added (ok, errormessage) params to callback
  **
  ** Calling methods:
  **   nowOrWhenFetched (uri, userCallback)
  **   nowOrWhenFetched (uri, options, userCallback)
  **   nowOrWhenFetched (uri, referringTerm, userCallback, options)  <-- old
  **   nowOrWhenFetched (uri, referringTerm, userCallback) <-- old
  **
  **  Options include:
  **   referringTerm    The docuemnt in which this link was found.
  **                    this is valuable when finding the source of bad URIs
  **   force            boolean.  Never mind whether you have tried before,
  **                    load this from scratch.
  **   forceContentType Override the incoming header to force the data to be
  **                    treaed as this content-type.
  **/
  this.nowOrWhenFetched = function (uri, p2, userCallback, options) {
    uri = uri.uri || uri; // allow symbol object or string to be passed
    if (typeof p2 === 'function') {
      options = {};
      userCallback = p2;
    } else if (typeof p2 === 'undefined') {// original calling signature
      // referingTerm = undefined
    } else if (p2 instanceof NamedNode) {
      // referingTerm = p2
      options = { referingTerm: p2 };
    } else {
      options = p2;
    }

    this.requestURI(uri, p2, options || {}, userCallback);
  };

  this.get = this.nowOrWhenFetched;

  // Look up response header
  //
  // Returns: a list of header values found in a stored HTTP response
  //      or [] if response was found but no header found
  //      or undefined if no response is available.
  //
  this.getHeader = function (doc, header) {
    var kb = this.store;
    var requests = kb.each(undefined, ns.link('requestedURI'), doc.uri);
    for (var r = 0; r < requests.length; r++) {
      var request = requests[r];
      if (request !== undefined) {
        var response = kb.any(request, ns.link('response'));
        if (request !== undefined) {
          var results = kb.each(response, ns.httph(header.toLowerCase()));
          if (results.length) {
            return results.map(function (v) {
              return v.value;
            });
          }
          return [];
        }
      }
    }
    return undefined;
  };

  this.proxyIfNecessary = function (uri) {
    if (typeof tabulator !== 'undefined' && tabulator.isExtension) return uri; // Extenstion does not need proxy

    if (typeof $SolidTestEnvironment !== 'undefined' && $SolidTestEnvironment.localSiteMap) {
      // nested dictionaries of URI parts from origin down
      var hostpath = uri.split('/').slice(2); // the bit after the //
      var lookup = function lookup(parts, index) {
        var z = index[parts.shift()];
        if (!z) return null;
        if (typeof z === 'string') {
          return z + parts.join('/');
        }
        if (!parts) return null;
        return lookup(parts, z);
      };
      var y = lookup(hostpath, $SolidTestEnvironment.localSiteMap);
      if (y) {
        return y;
      }
    }
    // browser does 2014 on as https browser script not trusted
    // If the web app origin is https: then the mixed content rules
    // prevent it loading insecure http: stuff so we need proxy.
    if (Fetcher.crossSiteProxyTemplate && typeof document !== 'undefined' && document.location && ('' + document.location).slice(0, 6) === 'https:' && // origin is secure
    uri.slice(0, 5) === 'http:') {
      // requested data is not
      return Fetcher.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri));
    }
    return uri;
  };

  this.saveRequestMetadata = function (xhr, kb, docuri) {
    var request = kb.bnode();
    xhr.resource = kb.sym(docuri);

    xhr.req = request;
    if (!xhr.options.noMeta) {
      // Store no triples but do mind the bnode for req
      var now = new Date();
      var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
      kb.add(request, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + docuri), this.appNode);
      kb.add(request, ns.link('requestedURI'), kb.literal(docuri), this.appNode);
      if (xhr.original && xhr.original.uri !== docuri) {
        kb.add(request, ns.link('orginalURI'), kb.literal(xhr.original.uri), this.appNode);
      }
      kb.add(request, ns.link('status'), kb.collection(), this.appNode);
    }
    return request;
  };

  this.saveResponseMetadata = function (xhr, kb) {
    var response = kb.bnode();

    if (xhr.req) kb.add(xhr.req, ns.link('response'), response);
    kb.add(response, ns.http('status'), kb.literal(xhr.status), response);
    kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response);

    xhr.headers = {};
    if (Uri.protocol(xhr.resource.uri) === 'http' || Uri.protocol(xhr.resource.uri) === 'https') {
      xhr.headers = Util.getHTTPHeaders(xhr);
      for (var h in xhr.headers) {
        // trim below for Safari - adds a CR!
        var value = xhr.headers[h].trim();
        var h2 = h.toLowerCase();
        kb.add(response, ns.httph(h2), value, response);
        if (h2 === 'content-type') {
          // Convert to RDF type
          kb.add(xhr.resource, ns.rdf('type'), Util.mediaTypeClass(value), response);
        }
      }
    }
    return response;
  };

  /** Requests a document URI and arranges to load the document.
   ** Parameters:
   **	    term:  term for the thing whose URI is to be dereferenced
   **      rterm:  the resource which refered to this (for tracking bad links)
   **      options:
   **              force:  Load the data even if loaded before
   **              withCredentials:   flag for XHR/CORS etc
   **      userCallback:  Called with (true) or (false, errorbody, {status: 400}) after load is done or failed
   ** Return value:
   **	    The xhr object for the HTTP access
   **      null if the protocol is not a look-up protocol,
   **              or URI has already been loaded
   */
  this.requestURI = function (docuri, rterm, options, userCallback) {
    // sources_request_new
    // Various calling conventions
    docuri = docuri.uri || docuri; // NamedNode or string
    docuri = docuri.split('#')[0];
    if (typeof options === 'boolean') {
      options = { 'force': options }; // Ols dignature
    }
    if (typeof options === 'undefined') options = {};

    var force = !!options.force;
    var kb = this.store;
    var args = arguments;
    var baseURI = options.baseURI || docuri; // Preseve though proxying etc
    options.userCallback = userCallback;

    var pcol = Uri.protocol(docuri);
    if (pcol === 'tel' || pcol === 'mailto' || pcol === 'urn') {
      // "No look-up operation on these, but they are not errors?"
      console.log('Unsupported protocol in: ' + docuri);
      return userCallback(false, 'Unsupported protocol', { 'status': 900 }) || undefined;
    }
    var docterm = kb.sym(docuri);

    var sta = this.getState(docuri);
    if (!force) {
      if (sta === 'fetched') {
        return userCallback ? userCallback(true) : undefined;
      }
      if (sta === 'failed') {
        return userCallback ? userCallback(false, 'Previously failed. ' + this.requested[docuri], { 'status': this.requested[docuri] }) : undefined; // An xhr standin
      }
      // if (sta === 'requested') return userCallback? userCallback(false, "Sorry already requested - pending already.", {'status': 999 }) : undefined
    } else {
      delete this.nonexistant[docuri];
    }
    // @@ Should allow concurrent requests

    // If it is 'failed', then shoulkd we try again?  I think so so an old error doens't get stuck
    // if (sta === 'unrequested')

    this.fireCallbacks('request', args); // Kenny: fire 'request' callbacks here
    // dump( "web.js: Requesting uri: " + docuri + "\n" )

    if (userCallback) {
      if (!this.fetchCallbacks[docuri]) {
        this.fetchCallbacks[docuri] = [userCallback];
      } else {
        this.fetchCallbacks[docuri].push(userCallback);
      }
    }

    if (this.requested[docuri] === true) {
      return; // Don't ask again - wait for existing call
    } else {
      this.requested[docuri] = true;
    }

    if (!options.noMeta && rterm && rterm.uri) {
      kb.add(docterm.uri, ns.link('requestedBy'), rterm.uri, this.appNode);
    }

    var xhr = Util.XMLHTTPFactory();
    var req = xhr.req = kb.bnode();
    xhr.original = kb.sym(baseURI);
    // console.log('XHR original: ' + xhr.original)
    xhr.options = options;
    xhr.resource = docterm; // This might be proxified
    var sf = this;

    var now = new Date();
    var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
    if (!options.noMeta) {
      kb.add(req, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + docuri), this.appNode);
      kb.add(req, ns.link('requestedURI'), kb.literal(docuri), this.appNode);
      kb.add(req, ns.link('status'), kb.collection(), this.appNode);
    }

    var checkCredentialsRetry = function checkCredentialsRetry() {
      if (!xhr.withCredentials) return false; // not dealt with

      if (xhr.retriedWithCredentials) {
        return true;
      }
      xhr.retriedWithCredentials = true; // protect against called twice
      console.log('web: Retrying with no credentials for ' + xhr.resource);
      xhr.abort();
      delete sf.requested[docuri]; // forget the original request happened
      var newopt = {};
      for (var opt in options) {
        // transfer baseURI etc
        if (options.hasOwnProperty(opt)) {
          newopt[opt] = options[opt];
        }
      }
      newopt.withCredentials = false;
      sf.addStatus(xhr.req, 'Abort: Will retry with credentials SUPPRESSED to see if that helps');
      sf.requestURI(docuri, rterm, newopt, xhr.userCallback); // userCallback already registered (with where?)
      return true;
    };

    var onerrorFactory = function onerrorFactory(xhr) {
      return function (event) {
        xhr.onErrorWasCalled = true; // debugging and may need it
        if (typeof document !== 'undefined') {
          // Mashup situation, not node etc
          if (Fetcher.crossSiteProxyTemplate && document.location && !xhr.proxyUsed) {
            var hostpart = Uri.hostpart;
            var here = '' + document.location;
            var uri = xhr.resource.uri;
            if (hostpart(here) && hostpart(uri) && hostpart(here) !== hostpart(uri)) {
              // If cross-site
              if (xhr.status === 401 || xhr.status === 403 || xhr.status === 404) {
                onreadystatechangeFactory(xhr)();
              } else {
                // IT IS A PAIN THAT NO PROPER ERROR REPORTING
                if (checkCredentialsRetry(xhr)) {
                  // If credentials flag set, retry without,
                  return;
                }
                // If it wasn't, or we already tried that
                var newURI = Fetcher.crossSiteProxy(uri);
                console.log('web: Direct failed so trying proxy ' + newURI);
                sf.addStatus(xhr.req, 'BLOCKED -> Cross-site Proxy to <' + newURI + '>');
                if (xhr.aborted) return;

                var kb = sf.store;
                var oldreq = xhr.req;
                if (!xhr.options.noMeta) {
                  kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), oldreq);
                }
                xhr.abort();
                xhr.aborted = true;

                sf.addStatus(oldreq, 'redirected to new request'); // why
                // the callback throws an exception when called from xhr.onerror (so removed)
                // sf.fireCallbacks('done', args) // Are these args right? @@@   Not done yet! done means success
                sf.requested[xhr.resource.uri] = 'redirected';
                sf.redirectedTo[xhr.resource.uri] = newURI;

                if (sf.fetchCallbacks[xhr.resource.uri]) {
                  if (!sf.fetchCallbacks[newURI]) {
                    sf.fetchCallbacks[newURI] = [];
                  }
                  sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri]);
                  delete sf.fetchCallbacks[xhr.resource.uri];
                }

                var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback);
                if (xhr2) {
                  xhr2.proxyUsed = true; // only try the proxy once
                  xhr2.original = xhr.original;
                  console.log('Proxying but original still ' + xhr2.original);
                }
                if (xhr2 && xhr2.req) {
                  if (!xhr.options.noMeta) {
                    kb.add(xhr.req, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), xhr2.req, sf.appNode);
                  }
                  return;
                }
              }
            }
            xhr.CORS_status = 999;
            // xhr.status = 999     forbidden - read-only
          }
        } // mashu
      }; // function of event
    }; // onerrorFactory

    // Set up callbacks
    var onreadystatechangeFactory = function onreadystatechangeFactory(xhr) {
      return function () {
        var handleResponse = function handleResponse() {
          if (xhr.handleResponseDone) return;
          xhr.handleResponseDone = true;
          var handler = null;
          var thisReq = xhr.req; // Might have changes by redirect
          sf.fireCallbacks('recv', args);
          var kb = sf.store;
          sf.saveResponseMetadata(xhr, kb);
          sf.fireCallbacks('headers', [{ uri: docuri, headers: xhr.headers }]);

          // Check for masked errors.
          // For "security reasons" theboraser hides errors such as CORS errors from
          // the calling code (2015). oneror() used to be called but is not now.
          //
          if (xhr.status === 0) {
            console.log('Masked error - status 0 for ' + xhr.resource.uri);
            if (checkCredentialsRetry(xhr)) {
              // retry is could be credentials flag CORS issue
              return;
            }
            xhr.CORS_status = 900; // unknown masked error
            return;
          }
          if (xhr.status >= 400) {
            // For extra dignostics, keep the reply
            //  @@@ 401 should cause  a retry with credential son
            // @@@ cache the credentials flag by host ????
            if (xhr.status === 404) {
              kb.fetcher.nonexistant[xhr.resource.uri] = true;
            }
            if (xhr.responseText.length > 10) {
              var response2 = kb.bnode();
              kb.add(response2, ns.http('content'), kb.literal(xhr.responseText), response2);
              if (xhr.statusText) {
                kb.add(response2, ns.http('statusText'), kb.literal(xhr.statusText), response2);
              }
              // dump("HTTP >= 400 responseText:\n"+xhr.responseText+"\n"); // @@@@
            }
            sf.failFetch(xhr, 'HTTP error for ' + xhr.resource + ': ' + xhr.status + ' ' + xhr.statusText);
            return;
          }

          var loc = xhr.headers['content-location'];

          // deduce some things from the HTTP transaction
          var addType = function addType(cla) {
            // add type to all redirected resources too
            var prev = thisReq;
            if (loc) {
              var docURI = kb.any(prev, ns.link('requestedURI'));
              if (docURI !== loc) {
                kb.add(kb.sym(loc), ns.rdf('type'), cla, sf.appNode);
              }
            }
            for (;;) {
              var doc = kb.any(prev, ns.link('requestedURI'));
              if (doc && doc.value) {
                kb.add(kb.sym(doc.value), ns.rdf('type'), cla, sf.appNode);
              } // convert Literal
              prev = kb.any(undefined, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), prev);
              if (!prev) break;
              var response = kb.any(prev, kb.sym('http://www.w3.org/2007/ont/link#response'));
              if (!response) break;
              var redirection = kb.any(response, kb.sym('http://www.w3.org/2007/ont/http#status'));
              if (!redirection) break;
              if (redirection !== '301' && redirection !== '302') break;
            }
          };
          // This is a minimal set to allow the use of damaged servers if necessary
          var extensionToContentType = {
            'rdf': 'application/rdf+xml', 'owl': 'application/rdf+xml',
            'n3': 'text/n3', 'ttl': 'text/turtle', 'nt': 'text/n3', 'acl': 'text/n3',
            'html': 'text/html',
            'xml': 'text/xml'
          };
          var guess;
          if (xhr.status === 200) {
            addType(ns.link('Document'));
            var ct = xhr.headers['content-type'];
            if (options.forceContentType) {
              xhr.headers['content-type'] = options.forceContentType;
            }
            if (!ct || ct.indexOf('application/octet-stream') >= 0) {
              guess = extensionToContentType[xhr.resource.uri.split('.').pop()];
              if (guess) {
                xhr.headers['content-type'] = guess;
              }
            }
            if (ct) {
              if (ct.indexOf('image/') === 0 || ct.indexOf('application/pdf') === 0) addType(kb.sym('http://purl.org/dc/terms/Image'));
            }
            if (options.clearPreviousData) {
              // Before we parse new data clear old but only on 200
              kb.removeDocument(xhr.resource);
            }
          }
          // application/octet-stream; charset=utf-8

          if (Uri.protocol(xhr.resource.uri) === 'file' || Uri.protocol(xhr.resource.uri) === 'chrome') {
            if (options.forceContentType) {
              xhr.headers['content-type'] = options.forceContentType;
            } else {
              guess = extensionToContentType[xhr.resource.uri.split('.').pop()];
              if (guess) {
                xhr.headers['content-type'] = guess;
              } else {
                xhr.headers['content-type'] = 'text/xml';
              }
            }
          }

          // If we have alread got the thing at this location, abort
          if (loc) {
            var udoc = Uri.join(xhr.resource.uri, loc);
            if (!force && udoc !== xhr.resource.uri && sf.requested[udoc] && sf.requested[udoc] === 'done') {
              // we have already fetched this in fact.
              // should we smush too?
              // log.info("HTTP headers indicate we have already" + " retrieved " + xhr.resource + " as " + udoc + ". Aborting.")
              sf.doneFetch(xhr);
              xhr.abort();
              return;
            }
            sf.requested[udoc] = true;
          }

          for (var x = 0; x < sf.handlers.length; x++) {
            if (xhr.headers['content-type'] && xhr.headers['content-type'].match(sf.handlers[x].pattern)) {
              handler = new sf.handlers[x]();
              break;
            }
          }

          sf.parseLinkHeader(xhr, thisReq);

          if (handler) {
            try {
              handler.handlerFactory(xhr);
            } catch (e) {
              // Try to avoid silent errors
              sf.failFetch(xhr, 'Exception handling content-type ' + xhr.headers['content-type'] + ' was: ' + e);
            }
          } else {
            sf.doneFetch(xhr); //  Not a problem, we just don't extract data.
            /*
            // sf.failFetch(xhr, "Unhandled content type: " + xhr.headers['content-type']+
            //        ", readyState = "+xhr.readyState)
            */
            return;
          }
        };

        // DONE: 4
        // HEADERS_RECEIVED: 2
        // LOADING: 3
        // OPENED: 1
        // UNSENT: 0

        // log.debug("web.js: XHR " + xhr.resource.uri + ' readyState='+xhr.readyState); // @@@@ comment me out

        switch (xhr.readyState) {
          case 0:
            var uri = xhr.resource.uri;
            var newURI;
            if (this.crossSiteProxyTemplate && typeof document !== 'undefined' && document.location) {
              // In mashup situation
              var hostpart = Uri.hostpart;
              var here = '' + document.location;
              if (hostpart(here) && hostpart(uri) && hostpart(here) !== hostpart(uri)) {
                newURI = this.crossSiteProxyTemplate.replace('{uri}', encodeURIComponent(uri));
                sf.addStatus(xhr.req, 'BLOCKED -> Cross-site Proxy to <' + newURI + '>');
                if (xhr.aborted) return;

                var kb = sf.store;
                var oldreq = xhr.req;
                kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), oldreq);

                // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate?
                var newreq = xhr.req = kb.bnode(); // Make NEW reqest for everything else
                kb.add(oldreq, ns.http('redirectedRequest'), newreq, xhr.req);

                var now = new Date();
                var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
                kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode);
                kb.add(newreq, ns.link('status'), kb.collection(), this.appNode);
                kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode);

                var response = kb.bnode();
                kb.add(oldreq, ns.link('response'), response);
                // kb.add(response, ns.http('status'), kb.literal(xhr.status), response)
                // if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response)

                xhr.abort();
                xhr.aborted = true;
                xhr.redirected = true;

                sf.addStatus(oldreq, 'redirected XHR'); // why

                if (sf.fetchCallbacks[xhr.resource.uri]) {
                  if (!sf.fetchCallbacks[newURI]) {
                    sf.fetchCallbacks[newURI] = [];
                  }
                  sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri]);
                  delete sf.fetchCallbacks[xhr.resource.uri];
                }

                sf.fireCallbacks('redirected', args); // Are these args right? @@@
                sf.requested[xhr.resource.uri] = 'redirected';

                var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options || {}, xhr.userCallback);
                if (xhr2 && xhr2.req) {
                  kb.add(xhr.req, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), xhr2.req, sf.appNode);
                  return;
                }
              }
            }
            sf.failFetch(xhr, 'HTTP Blocked. (ReadyState 0) Cross-site violation for <' + docuri + '>');

            break;

          case 3:
            // Intermediate state -- 3 may OR MAY NOT be called, selon browser.
            // handleResponse();   // In general it you can't do it yet as the headers are in but not the data
            break;
          case 4:
            // Final state for this XHR but may be redirected
            handleResponse();
            // Now handle
            if (xhr.handle && xhr.responseText !== undefined) {
              // can be validly zero length
              if (sf.requested[xhr.resource.uri] === 'redirected') {
                break;
              }
              sf.fireCallbacks('load', args);
              xhr.handle(function () {
                sf.doneFetch(xhr);
              });
            } else {
              if (xhr.redirected) {
                sf.addStatus(xhr.req, 'Aborted and redirected to new request.');
              } else {
                sf.addStatus(xhr.req, 'Fetch over. No data handled. Aborted = ' + xhr.aborted);
              }
              // sf.failFetch(xhr, "HTTP failed unusually. (no handler set) (x-site violation? no net?) for <"+
              //    docuri+">")
            }
            break;
        } // switch
      };
    };

    // Map the URI to a localhost proxy if we are running on localhost
    // This is used for working offline, e.g. on planes.
    // Is the script istelf is running in localhost, then access all data in a localhost mirror.
    // Do not remove without checking with TimBL
    var uri2 = docuri;
    if (typeof tabulator !== 'undefined' && tabulator.preferences.get('offlineModeUsingLocalhost')) {
      if (uri2.slice(0, 7) === 'http://' && uri2.slice(7, 17) !== 'localhost/') {
        uri2 = 'http://localhost/' + uri2.slice(7);
        log.warn('Localhost kludge for offline use: actually getting <' + uri2 + '>');
      } else {
        // log.warn("Localhost kludge NOT USED <" + uri2 + ">")
      }
    } else {}
      // log.warn("Localhost kludge OFF offline use: actually getting <" + uri2 + ">")

      // 2014 probelm:
      // XMLHttpRequest cannot load http://www.w3.org/People/Berners-Lee/card.
      // A wildcard '*' cannot be used in the 'Access-Control-Allow-Origin' header when the credentials flag is true.
      // @ Many ontology files under http: and need CORS wildcard -> can't have withCredentials

    var withCredentials = uri2.slice(0, 6) === 'https:'; // @@ Kludge -- need for webid which typically is served from https
    if (options.withCredentials !== undefined) {
      withCredentials = options.withCredentials;
    }
    var actualProxyURI = this.proxyIfNecessary(uri2);

    // Setup the request
    // var xhr
    // xhr = Util.XMLHTTPFactory()
    xhr.onerror = onerrorFactory(xhr);
    xhr.onreadystatechange = onreadystatechangeFactory(xhr);
    xhr.timeout = sf.timeout;
    xhr.withCredentials = withCredentials;
    xhr.actualProxyURI = actualProxyURI;

    xhr.req = req;
    xhr.options = options;
    xhr.options = options;
    xhr.resource = docterm;
    xhr.requestedURI = uri2;

    xhr.ontimeout = function () {
      sf.failFetch(xhr, 'requestTimeout');
    };
    try {
      xhr.open('GET', actualProxyURI, this.async);
    } catch (er) {
      return this.failFetch(xhr, 'XHR open for GET failed for <' + uri2 + '>:\n\t' + er);
    }
    if (force) {
      // must happen after open
      xhr.setRequestHeader('Cache-control', 'no-cache');
    }

    // Set redirect callback and request headers -- alas Firefox Extension Only
    if (typeof tabulator !== 'undefined' && tabulator.isExtension && xhr.channel && (Uri.protocol(xhr.resource.uri) === 'http' || Uri.protocol(xhr.resource.uri) === 'https')) {
      try {
        xhr.channel.notificationCallbacks = {
          getInterface: function getInterface(iid) {
            if (iid.equals(Components.interfaces.nsIChannelEventSink)) {
              return {
                onChannelRedirect: function onChannelRedirect(oldC, newC, flags) {
                  if (xhr.aborted) return;
                  var kb = sf.store;
                  var newURI = newC.URI.spec;
                  var oldreq = xhr.req;
                  if (!xhr.options.noMeta) {
                    sf.addStatus(xhr.req, 'Redirected: ' + xhr.status + ' to <' + newURI + '>');
                    kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), xhr.req);

                    // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate code?
                    var newreq = xhr.req = kb.bnode(); // Make NEW reqest for everything else
                    kb.add(oldreq, ns.http('redirectedRequest'), newreq, this.appNode);

                    var now = new Date();
                    var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
                    kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode);
                    kb.add(newreq, ns.link('status'), kb.collection(), this.appNode);
                    kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode);
                    // /////////////

                    // // log.info('@@ sources onChannelRedirect'+
                    //               "Redirected: "+
                    //               xhr.status + " to <" + newURI + ">"); //@@
                    var response = kb.bnode();
                    // kb.add(response, ns.http('location'), newURI, response); Not on this response
                    kb.add(oldreq, ns.link('response'), response);
                    kb.add(response, ns.http('status'), kb.literal(xhr.status), response);
                    if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response);
                  }
                  if (xhr.status - 0 !== 303) kb.HTTPRedirects[xhr.resource.uri] = newURI; // same document as
                  if (xhr.status - 0 === 301 && rterm) {
                    // 301 Moved
                    var badDoc = Uri.docpart(rterm.uri);
                    var msg = 'Warning: ' + xhr.resource + ' has moved to <' + newURI + '>.';
                    if (rterm) {
                      msg += ' Link in <' + badDoc + ' >should be changed';
                      kb.add(badDoc, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg, sf.appNode);
                    }
                    // dump(msg+"\n")
                  }
                  xhr.abort();
                  xhr.aborted = true;

                  if (sf.fetchCallbacks[xhr.resource.uri]) {
                    if (!sf.fetchCallbacks[newURI]) {
                      sf.fetchCallbacks[newURI] = [];
                    }
                    sf.fetchCallbacks[newURI] === sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri]);
                    delete sf.fetchCallbacks[xhr.resource.uri];
                  }

                  sf.addStatus(oldreq, 'redirected'); // why
                  sf.fireCallbacks('redirected', args); // Are these args right? @@@
                  sf.requested[xhr.resource.uri] = 'redirected';
                  sf.redirectedTo[xhr.resource.uri] = newURI;

                  var hash = newURI.indexOf('#');
                  if (hash >= 0) {
                    if (!xhr.options.noMeta) {
                      kb.add(xhr.resource, kb.sym('http://www.w3.org/2007/ont/link#warning'), 'Warning: ' + xhr.resource + ' HTTP redirects to' + newURI + ' which should not contain a "#" sign');
                    }
                    newURI = newURI.slice(0, hash);
                  }
                  var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback);
                  if (xhr2 && xhr2.req && !options.noMeta) {
                    kb.add(xhr.req, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), xhr2.req, sf.appNode);
                  }
                  // else dump("No xhr.req available for redirect from "+xhr.resource+" to "+newURI+"\n")
                },

                // See https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIChannelEventSink
                asyncOnChannelRedirect: function asyncOnChannelRedirect(oldC, newC, flags, callback) {
                  if (xhr.aborted) return;
                  var kb = sf.store;
                  var newURI = newC.URI.spec;
                  var oldreq = xhr.req;
                  sf.addStatus(xhr.req, 'Redirected: ' + xhr.status + ' to <' + newURI + '>');
                  kb.add(oldreq, ns.http('redirectedTo'), kb.sym(newURI), xhr.req);

                  // //////////// Change the request node to a new one:  @@@@@@@@@@@@ Duplicate?
                  var newreq = xhr.req = kb.bnode(); // Make NEW reqest for everything else
                  // xhr.resource = docterm
                  // xhr.requestedURI = args[0]

                  // kb.add(kb.sym(newURI), ns.link("request"), req, this.appNode)
                  kb.add(oldreq, ns.http('redirectedRequest'), newreq, xhr.req);

                  var now = new Date();
                  var timeNow = '[' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + '] ';
                  kb.add(newreq, ns.rdfs('label'), kb.literal(timeNow + ' Request for ' + newURI), this.appNode);
                  kb.add(newreq, ns.link('status'), kb.collection(), this.appNode);
                  kb.add(newreq, ns.link('requestedURI'), kb.literal(newURI), this.appNode);
                  // /////////////

                  // // log.info('@@ sources onChannelRedirect'+
                  //               "Redirected: "+
                  //               xhr.status + " to <" + newURI + ">"); //@@
                  var response = kb.bnode();
                  // kb.add(response, ns.http('location'), newURI, response); Not on this response
                  kb.add(oldreq, ns.link('response'), response);
                  kb.add(response, ns.http('status'), kb.literal(xhr.status), response);
                  if (xhr.statusText) kb.add(response, ns.http('statusText'), kb.literal(xhr.statusText), response);

                  if (xhr.status - 0 !== 303) kb.HTTPRedirects[xhr.resource.uri] = newURI; // same document as
                  if (xhr.status - 0 === 301 && rterm) {
                    // 301 Moved
                    var badDoc = Uri.docpart(rterm.uri);
                    var msg = 'Warning: ' + xhr.resource + ' has moved to <' + newURI + '>.';
                    if (rterm) {
                      msg += ' Link in <' + badDoc + ' >should be changed';
                      kb.add(badDoc, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg, sf.appNode);
                    }
                    // dump(msg+"\n")
                  }
                  xhr.abort();
                  xhr.aborted = true;

                  var hash = newURI.indexOf('#');
                  if (hash >= 0) {
                    var msg2 = 'Warning: ' + xhr.resource + ' HTTP redirects to' + newURI + ' which do not normally contain a "#" sign';
                    // dump(msg+"\n")
                    kb.add(xhr.resource, kb.sym('http://www.w3.org/2007/ont/link#warning'), msg2);
                    newURI = newURI.slice(0, hash);
                  }
                  /*
                  if (sf.fetchCallbacks[xhr.resource.uri]) {
                    if (!sf.fetchCallbacks[newURI]) {
                      sf.fetchCallbacks[newURI] = []
                    }
                    sf.fetchCallbacks[newURI] = sf.fetchCallbacks[newURI].concat(sf.fetchCallbacks[xhr.resource.uri])
                    delete sf.fetchCallbacks[xhr.resource.uri]
                  }
                  */
                  sf.requested[xhr.resource.uri] = 'redirected';
                  sf.redirectedTo[xhr.resource.uri] = newURI;

                  var xhr2 = sf.requestURI(newURI, xhr.resource, xhr.options, xhr.userCallback);
                  if (xhr2) {
                    // may be no XHR is other URI already loaded
                    xhr2.original = xhr.original; // use this for finding base
                    if (xhr2.req) {
                      kb.add(xhr.req, kb.sym('http://www.w3.org/2007/ont/link#redirectedRequest'), xhr2.req, sf.appNode);
                    }
                  }
                  // else dump("No xhr.req available for redirect from "+xhr.resource+" to "+newURI+"\n")
                } // asyncOnChannelRedirect
              };
            }
            return Components.results.NS_NOINTERFACE;
          }
        };
      } catch (err) {
        return sf.failFetch(xhr, "@@ Couldn't set callback for redirects: " + err);
      } // try
    } // if Firefox extension

    try {
      var acceptstring = '';
      for (var type in this.mediatypes) {
        // var attrstring = ''
        if (acceptstring !== '') {
          acceptstring += ', ';
        }
        acceptstring += type;
        for (var attr in this.mediatypes[type]) {
          acceptstring += ';' + attr + '=' + this.mediatypes[type][attr];
        }
      }
      xhr.setRequestHeader('Accept', acceptstring);
      this.addStatus(xhr.req, 'Accept: ' + acceptstring);

      // if (requester) { xhr.setRequestHeader('Referer',requester) }
    } catch (err) {
      throw new Error("Can't set Accept header: " + err);
    }

    // Fire
    try {
      xhr.send(null);
    } catch (er) {
      return this.failFetch(xhr, 'XHR send failed:' + er);
    }
    setTimeout(function () {
      if (xhr.readyState !== 4 && sf.isPending(xhr.resource.uri)) {
        sf.failFetch(xhr, 'requestTimeout');
      }
    }, this.timeout);
    this.addStatus(xhr.req, 'HTTP Request sent.');
    return xhr;
  }; // this.requestURI()

  this.objectRefresh = function (term) {
    var uris = kb.uris(term); // Get all URIs
    if (typeof uris !== 'undefined') {
      for (var i = 0; i < uris.length; i++) {
        this.refresh(this.store.sym(Uri.docpart(uris[i])));
        // what about rterm?
      }
    }
  };

  // deprecated -- use IndexedFormula.removeDocument(doc)
  this.unload = function (term) {
    this.store.removeMany(undefined, undefined, undefined, term);
    delete this.requested[term.uri]; // So it can be loaded again
  };

  this.refresh = function (term, userCallback) {
    // sources_refresh
    this.fireCallbacks('refresh', arguments);
    this.requestURI(term.uri, undefined, { force: true, clearPreviousData: true }, userCallback);
  };

  this.retract = function (term) {
    // sources_retract
    this.store.removeMany(undefined, undefined, undefined, term);
    if (term.uri) {
      delete this.requested[Uri.docpart(term.uri)];
    }
    this.fireCallbacks('retract', arguments);
  };

  this.getState = function (docuri) {
    if (typeof this.requested[docuri] === 'undefined') {
      return 'unrequested';
    } else if (this.requested[docuri] === true) {
      return 'requested';
    } else if (this.requested[docuri] === 'done') {
      return 'fetched';
    } else if (this.requested[docuri] === 'redirected') {
      return this.getState(this.redirectedTo[docuri]);
    } else {
      // An non-200 HTTP error status
      return 'failed';
    }
  };

  // doing anyStatementMatching is wasting time
  this.isPending = function (docuri) {
    // sources_pending
    // if it's not pending: false -> flailed 'done' -> done 'redirected' -> redirected
    return this.requested[docuri] === true;
  };
  // var updatesVia = new $rdf.UpdatesVia(this) // Subscribe to headers
  // @@@@@@@@ This is turned off because it causes a websocket to be set up for ANY fetch
  // whether we want to track it ot not. including ontologies loaed though the XSSproxy
}; // End of fetcher

module.exports = Fetcher;
},{"./log":91,"./n3parser":92,"./named-node":93,"./namespace":94,"./parse":96,"./rdfaparser":100,"./rdfxmlparser":101,"./serialize":102,"./uri":108,"./util":109}],86:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankNode = _dereq_('./blank-node');
var ClassOrder = _dereq_('./class-order');
var Collection = _dereq_('./collection');
var Literal = _dereq_('./literal');
var log = _dereq_('./log');
var NamedNode = _dereq_('./named-node');
var Node = _dereq_('./node');
var Serializer = _dereq_('./serialize');
var Statement = _dereq_('./statement');
var Variable = _dereq_('./variable');

var Formula = function (_Node) {
  _inherits(Formula, _Node);

  function Formula(statements, constraints, initBindings, optional) {
    _classCallCheck(this, Formula);

    var _this = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

    _this.termType = Formula.termType;
    _this.statements = statements || [];
    _this.constraints = constraints || [];
    _this.initBindings = initBindings || [];
    _this.optional = optional || [];
    return _this;
  }

  _createClass(Formula, [{
    key: 'add',
    value: function add(s, p, o, g) {
      return this.statements.push(new Statement(s, p, o, g));
    }
  }, {
    key: 'addStatement',
    value: function addStatement(st) {
      return this.statements.push(st);
    }
  }, {
    key: 'bnode',
    value: function bnode(id) {
      return new BlankNode(id);
    }
    /**
     * Finds the types in the list which have no *stored* subtypes
     * These are a set of classes which provide by themselves complete
     * information -- the other classes are redundant for those who
     * know the class DAG.
     */

  }, {
    key: 'bottomTypeURIs',
    value: function bottomTypeURIs(types) {
      var bots;
      var bottom;
      var elt;
      var i;
      var k;
      var len;
      var ref;
      var subs;
      var v;
      bots = [];
      for (k in types) {
        if (!types.hasOwnProperty(k)) continue;
        v = types[k];
        subs = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), this.sym(k));
        bottom = true;
        i = 0;
        for (len = subs.length; i < len; i++) {
          elt = subs[i];
          ref = elt.uri;
          if (ref in types) {
            // the subclass is one we know
            bottom = false;
            break;
          }
        }
        if (bottom) {
          bots[k] = v;
        }
      }
      return bots;
    }
  }, {
    key: 'collection',
    value: function collection() {
      return new Collection();
    }
  }, {
    key: 'each',
    value: function each(s, p, o, g) {
      var elt, i, l, m, q;
      var len, len1, len2, len3;
      var results = [];
      var sts = this.statementsMatching(s, p, o, g, false);
      if (s == null) {
        for (i = 0, len = sts.length; i < len; i++) {
          elt = sts[i];
          results.push(elt.subject);
        }
      } else if (p == null) {
        for (l = 0, len1 = sts.length; l < len1; l++) {
          elt = sts[l];
          results.push(elt.predicate);
        }
      } else if (o == null) {
        for (m = 0, len2 = sts.length; m < len2; m++) {
          elt = sts[m];
          results.push(elt.object);
        }
      } else if (g == null) {
        for (q = 0, len3 = sts.length; q < len3; q++) {
          elt = sts[q];
          results.push(elt.why);
        }
      }
      return results;
    }
  }, {
    key: 'equals',
    value: function equals(other) {
      if (!other) {
        return false;
      }
      return this.hashString() === other.hashString();
    }
    /*
    For thisClass or any subclass, anything which has it is its type
    or is the object of something which has the type as its range, or subject
    of something which has the type as its domain
    We don't bother doing subproperty (yet?)as it doesn't seeem to be used much.
    Get all the Classes of which we can RDFS-infer the subject is a member
    @returns a hash of URIs
    */

    /**
     * For thisClass or any subclass, anything which has it is its type
     * or is the object of something which has the type as its range, or subject
     * of something which has the type as its domain
     * We don't bother doing subproperty (yet?)as it doesn't seeem to be used
     * much.
     * Get all the Classes of which we can RDFS-infer the subject is a member
     * @return a hash of URIs
     */

  }, {
    key: 'findMembersNT',
    value: function findMembersNT(thisClass) {
      var i;
      var l;
      var len;
      var len1;
      var len2;
      var len3;
      var len4;
      var m;
      var members;
      var pred;
      var q;
      var ref;
      var ref1;
      var ref2;
      var ref3;
      var ref4;
      var ref5;
      var seeds;
      var st;
      var t;
      var u;
      seeds = {};
      seeds[thisClass.toNT()] = true;
      members = {};
      ref = this.transitiveClosure(seeds, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);
      for (t in ref) {
        if (!ref.hasOwnProperty(t)) continue;
        ref1 = this.statementsMatching(void 0, this.sym('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), this.fromNT(t));
        for (i = 0, len = ref1.length; i < len; i++) {
          st = ref1[i];
          members[st.subject.toNT()] = st;
        }
        ref2 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'), this.fromNT(t));
        for (l = 0, len1 = ref2.length; l < len1; l++) {
          pred = ref2[l];
          ref3 = this.statementsMatching(void 0, pred);
          for (m = 0, len2 = ref3.length; m < len2; m++) {
            st = ref3[m];
            members[st.subject.toNT()] = st;
          }
        }
        ref4 = this.each(void 0, this.sym('http://www.w3.org/2000/01/rdf-schema#range'), this.fromNT(t));
        for (q = 0, len3 = ref4.length; q < len3; q++) {
          pred = ref4[q];
          ref5 = this.statementsMatching(void 0, pred);
          for (u = 0, len4 = ref5.length; u < len4; u++) {
            st = ref5[u];
            members[st.object.toNT()] = st;
          }
        }
      }
      return members;
    }
  }, {
    key: 'findMemberURIs',
    value: function findMemberURIs(subject) {
      return this.NTtoURI(this.findMembersNT(subject));
    }
    /**
     * Get all the Classes of which we can RDFS-infer the subject is a superclass
     * Returns a hash table where key is NT of type and value is statement why we
     * think so.
     * Does NOT return terms, returns URI strings.
     * We use NT representations in this version because they handle blank nodes.
     */

  }, {
    key: 'findSubClassesNT',
    value: function findSubClassesNT(subject) {
      var types = {};
      types[subject.toNT()] = true;
      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), true);
    }
    /**
     * Get all the Classes of which we can RDFS-infer the subject is a subclass
     * Returns a hash table where key is NT of type and value is statement why we
     * think so.
     * Does NOT return terms, returns URI strings.
     * We use NT representations in this version because they handle blank nodes.
     */

  }, {
    key: 'findSuperClassesNT',
    value: function findSuperClassesNT(subject) {
      var types = {};
      types[subject.toNT()] = true;
      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);
    }
    /**
     * Get all the Classes of which we can RDFS-infer the subject is a member
     * todo: This will loop is there is a class subclass loop (Sublass loops are
     * not illegal)
     * Returns a hash table where key is NT of type and value is statement why we
     * think so.
     * Does NOT return terms, returns URI strings.
     * We use NT representations in this version because they handle blank nodes.
     */

  }, {
    key: 'findTypesNT',
    value: function findTypesNT(subject) {
      var domain;
      var i;
      var l;
      var len;
      var len1;
      var len2;
      var len3;
      var m;
      var q;
      var range;
      var rdftype;
      var ref;
      var ref1;
      var ref2;
      var ref3;
      var st;
      var types;
      rdftype = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
      types = [];
      ref = this.statementsMatching(subject, void 0, void 0);
      for (i = 0, len = ref.length; i < len; i++) {
        st = ref[i];
        if (st.predicate.uri === rdftype) {
          types[st.object.toNT()] = st;
        } else {
          ref1 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#domain'));
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            range = ref1[l];
            types[range.toNT()] = st;
          }
        }
      }
      ref2 = this.statementsMatching(void 0, void 0, subject);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        st = ref2[m];
        ref3 = this.each(st.predicate, this.sym('http://www.w3.org/2000/01/rdf-schema#range'));
        for (q = 0, len3 = ref3.length; q < len3; q++) {
          domain = ref3[q];
          types[domain.toNT()] = st;
        }
      }
      return this.transitiveClosure(types, this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'), false);
    }
  }, {
    key: 'findTypeURIs',
    value: function findTypeURIs(subject) {
      return this.NTtoURI(this.findTypesNT(subject));
    }
    // Trace the statements which connect directly, or through bnodes
    // Returns an array of statements
    // doc param may be null to search all documents in store

  }, {
    key: 'connectedStatements',
    value: function connectedStatements(subject, doc, excludePredicateURIs) {
      excludePredicateURIs = excludePredicateURIs || [];
      var todo = [subject];
      var done = [];
      var doneArcs = [];
      var result = [];
      var self = this;
      var follow = function follow(x) {
        var queue = function queue(x) {
          if (x.termType === 'BlankNode' && !done[x.value]) {
            done[x.value] = true;
            todo.push(x);
          }
        };
        var sts = self.statementsMatching(null, null, x, doc).concat(self.statementsMatching(x, null, null, doc));
        sts = sts.filter(function (st) {
          if (excludePredicateURIs[st.predicate.uri]) return false;
          var hash = st.toNT();
          if (doneArcs[hash]) return false;
          doneArcs[hash] = true;
          return true;
        });
        sts.forEach(function (st, i) {
          queue(st.subject);
          queue(st.object);
        });
        result = result.concat(sts);
      };
      while (todo.length) {
        follow(todo.shift());
      }
      // console.log('' + result.length + ' statements about ' + subject)
      return result;
    }
  }, {
    key: 'formula',
    value: function formula() {
      return new Formula();
    }
    /**
     * Transforms an NTriples string format into a Node.
     * The bnode bit should not be used on program-external values; designed
     * for internal work such as storing a bnode id in an HTML attribute.
     * This will only parse the strings generated by the vaious toNT() methods.
     */

  }, {
    key: 'fromNT',
    value: function fromNT(str) {
      var dt, k, lang, x;
      switch (str[0]) {
        case '<':
          return this.sym(str.slice(1, -1));
        case '"':
          lang = void 0;
          dt = void 0;
          k = str.lastIndexOf('"');
          if (k < str.length - 1) {
            if (str[k + 1] === '@') {
              lang = str.slice(k + 2);
            } else if (str.slice(k + 1, k + 3) === '^^') {
              dt = this.fromNT(str.slice(k + 3));
            } else {
              throw new Error("Can't convert string from NT: " + str);
            }
          }
          str = str.slice(1, k);
          str = str.replace(/\\"/g, '"');
          str = str.replace(/\\n/g, '\n');
          str = str.replace(/\\\\/g, '\\');
          return this.literal(str, lang, dt);
        case '_':
          x = new BlankNode();
          x.id = parseInt(str.slice(3), 10);
          BlankNode.nextId--;
          return x;
        case '?':
          return new Variable(str.slice(1));
      }
      throw new Error("Can't convert from NT: " + str);
    }
  }, {
    key: 'holds',
    value: function holds(s, p, o, g) {
      var i;
      if (arguments.length === 1) {
        if (!s) {
          return true;
        }
        if (s instanceof Array) {
          for (i = 0; i < s.length; i++) {
            if (!this.holds(s[i])) {
              return false;
            }
          }
          return true;
        } else if (s instanceof Statement) {
          return this.holds(s.subject, s.predicate, s.object, s.why);
        } else if (s.statements) {
          return this.holds(s.statements);
        }
      }

      var st = this.anyStatementMatching(s, p, o, g);
      return st != null;
    }
  }, {
    key: 'holdsStatement',
    value: function holdsStatement(st) {
      return this.holds(st.subject, st.predicate, st.object, st.why);
    }
  }, {
    key: 'list',
    value: function list(values) {
      var collection = new Collection();
      values.forEach(function (val) {
        collection.append(val);
      });
      return collection;
    }
  }, {
    key: 'literal',
    value: function literal(val, lang, dt) {
      return new Literal('' + val, lang, dt);
    }
    /**
     * transform a collection of NTriple URIs into their URI strings
     * @param t some iterable colletion of NTriple URI strings
     * @return a collection of the URIs as strings
     * todo: explain why it is important to go through NT
     */

  }, {
    key: 'NTtoURI',
    value: function NTtoURI(t) {
      var k, v;
      var uris = {};
      for (k in t) {
        if (!t.hasOwnProperty(k)) continue;
        v = t[k];
        if (k[0] === '<') {
          uris[k.slice(1, -1)] = v;
        }
      }
      return uris;
    }
  }, {
    key: 'serialize',
    value: function serialize(base, contentType, provenance) {
      var documentString;
      var sts;
      var sz;
      sz = Serializer(this);
      sz.suggestNamespaces(this.namespaces);
      sz.setBase(base);
      if (provenance) {
        sts = this.statementsMatching(void 0, void 0, void 0, provenance);
      } else {
        sts = this.statements;
      }
      switch (contentType != null ? contentType : 'text/n3') {
        case 'application/rdf+xml':
          documentString = sz.statementsToXML(sts);
          break;
        case 'text/n3':
        case 'text/turtle':
          documentString = sz.statementsToN3(sts);
          break;
        default:
          throw new Error('serialize: Content-type ' + contentType + ' not supported.');
      }
      return documentString;
    }
  }, {
    key: 'substitute',
    value: function substitute(bindings) {
      var statementsCopy = this.statements.map(function (ea) {
        return ea.substitute(bindings);
      });
      console.log('Formula subs statmnts:' + statementsCopy);
      var y = new Formula();
      y.add(statementsCopy);
      console.log('indexed-form subs formula:' + y);
      return y;
    }
  }, {
    key: 'sym',
    value: function sym(uri, name) {
      if (name) {
        throw new Error('This feature (kb.sym with 2 args) is removed. Do not assume prefix mappings.');
      }
      return new NamedNode(uri);
    }
  }, {
    key: 'the',
    value: function the(s, p, o, g) {
      var x = this.any(s, p, o, g);
      if (x == null) {
        log.error('No value found for the() {' + s + ' ' + p + ' ' + o + '}.');
      }
      return x;
    }
    /**
     * RDFS Inference
     * These are hand-written implementations of a backward-chaining reasoner
     * over the RDFS axioms.
     * @param seeds {Object} a hash of NTs of classes to start with
     * @param predicate The property to trace though
     * @param inverse trace inverse direction
     */

  }, {
    key: 'transitiveClosure',
    value: function transitiveClosure(seeds, predicate, inverse) {
      var elt, i, len, s, sups, t;
      var agenda = {};
      Object.assign(agenda, seeds); // make a copy
      var done = {}; // classes we have looked up
      while (true) {
        t = function () {
          for (var p in agenda) {
            if (!agenda.hasOwnProperty(p)) continue;
            return p;
          }
        }();
        if (t == null) {
          return done;
        }
        sups = inverse ? this.each(void 0, predicate, this.fromNT(t)) : this.each(this.fromNT(t), predicate);
        for (i = 0, len = sups.length; i < len; i++) {
          elt = sups[i];
          s = elt.toNT();
          if (s in done) {
            continue;
          }
          if (s in agenda) {
            continue;
          }
          agenda[s] = agenda[t];
        }
        done[t] = agenda[t];
        delete agenda[t];
      }
    }
    /**
     * Finds the types in the list which have no *stored* supertypes
     * We exclude the universal class, owl:Things and rdf:Resource, as it is
     * information-free.
     */

  }, {
    key: 'topTypeURIs',
    value: function topTypeURIs(types) {
      var i;
      var j;
      var k;
      var len;
      var n;
      var ref;
      var tops;
      var v;
      tops = [];
      for (k in types) {
        if (!types.hasOwnProperty(k)) continue;
        v = types[k];
        n = 0;
        ref = this.each(this.sym(k), this.sym('http://www.w3.org/2000/01/rdf-schema#subClassOf'));
        for (i = 0, len = ref.length; i < len; i++) {
          j = ref[i];
          if (j.uri !== 'http://www.w3.org/2000/01/rdf-schema#Resource') {
            n++;
            break;
          }
        }
        if (!n) {
          tops[k] = v;
        }
      }
      if (tops['http://www.w3.org/2000/01/rdf-schema#Resource']) {
        delete tops['http://www.w3.org/2000/01/rdf-schema#Resource'];
      }
      if (tops['http://www.w3.org/2002/07/owl#Thing']) {
        delete tops['http://www.w3.org/2002/07/owl#Thing'];
      }
      return tops;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '{' + this.statements.join('\n') + '}';
    }
  }, {
    key: 'whether',
    value: function whether(s, p, o, g) {
      return this.statementsMatching(s, p, o, g, false).length;
    }
  }]);

  return Formula;
}(Node);

Formula.termType = 'Graph';

Formula.prototype.classOrder = ClassOrder['Graph'];
Formula.prototype.isVar = 0;

Formula.prototype.ns = _dereq_('./namespace');
Formula.prototype.variable = function (name) {
  return new Variable(name);
};

module.exports = Formula;
},{"./blank-node":78,"./class-order":79,"./collection":80,"./literal":90,"./log":91,"./named-node":93,"./namespace":94,"./node":95,"./serialize":102,"./statement":105,"./variable":110}],87:[function(_dereq_,module,exports){
'use strict';

var _indexedFormula = _dereq_('./indexed-formula');

var _indexedFormula2 = _interopRequireDefault(_indexedFormula);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $rdf = {
  BlankNode: _dereq_('./blank-node'),
  Collection: _dereq_('./collection'),
  convert: _dereq_('./convert'),
  DataFactory: _dereq_('./data-factory'),
  Empty: _dereq_('./empty'),
  Fetcher: _dereq_('./fetcher'),
  Formula: _dereq_('./formula'),
  IndexedFormula: _indexedFormula2.default,
  jsonParser: _dereq_('./jsonparser'),
  Literal: _dereq_('./literal'),
  log: _dereq_('./log'),
  N3Parser: _dereq_('./n3parser'),
  NamedNode: _dereq_('./named-node'),
  Namespace: _dereq_('./namespace'),
  Node: _dereq_('./node'),
  parse: _dereq_('./parse'),
  Query: _dereq_('./query').Query,
  queryToSPARQL: _dereq_('./query-to-sparql'),
  RDFaProcessor: _dereq_('./rdfaparser'),
  RDFParser: _dereq_('./rdfxmlparser'),
  serialize: _dereq_('./serialize'),
  Serializer: _dereq_('./serializer'),
  SPARQLToQuery: _dereq_('./sparql-to-query'),
  sparqlUpdateParser: _dereq_('./patch-parser'),
  Statement: _dereq_('./statement'),
  term: _dereq_('./node').fromValue,
  UpdateManager: _dereq_('./update-manager'),
  UpdatesSocket: _dereq_('./updates-via').UpdatesSocket,
  UpdatesVia: _dereq_('./updates-via').UpdatesVia,
  uri: _dereq_('./uri'),
  Util: _dereq_('./util'),
  Variable: _dereq_('./variable')
};

$rdf.NextId = $rdf.BlankNode.nextId;

$rdf.fromNT = $rdf.Formula.prototype.fromNT;
$rdf.fetcher = $rdf.DataFactory.fetcher;
$rdf.graph = $rdf.DataFactory.graph;
$rdf.lit = $rdf.DataFactory.lit;
$rdf.st = $rdf.DataFactory.st;
$rdf.sym = $rdf.DataFactory.namedNode;
$rdf.variable = $rdf.DataFactory.variable;

// RDFJS DataFactory interface
$rdf.blankNode = $rdf.DataFactory.blankNode;
$rdf.defaultGraph = $rdf.DataFactory.defaultGraph;
$rdf.literal = $rdf.DataFactory.literal;
$rdf.namedNode = $rdf.DataFactory.namedNode;
$rdf.quad = $rdf.DataFactory.quad;
$rdf.triple = $rdf.DataFactory.triple;

module.exports = $rdf;
},{"./blank-node":78,"./collection":80,"./convert":81,"./data-factory":82,"./empty":84,"./fetcher":85,"./formula":86,"./indexed-formula":88,"./jsonparser":89,"./literal":90,"./log":91,"./n3parser":92,"./named-node":93,"./namespace":94,"./node":95,"./parse":96,"./patch-parser":97,"./query":99,"./query-to-sparql":98,"./rdfaparser":100,"./rdfxmlparser":101,"./serialize":102,"./serializer":103,"./sparql-to-query":104,"./statement":105,"./update-manager":106,"./updates-via":107,"./uri":108,"./util":109,"./variable":110}],88:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//  Identity management and indexing for RDF
//
// This file provides  IndexedFormula a formula (set of triples) which
// indexed by predicate, subject and object.
//
// It "smushes"  (merges into a single node) things which are identical
// according to owl:sameAs or an owl:InverseFunctionalProperty
// or an owl:FunctionalProperty
//
//
//  2005-10 Written Tim Berners-Lee
//  2007    Changed so as not to munge statements from documents when smushing
//
//
/* jsl:option explicit */
var ArrayIndexOf = _dereq_('./util').ArrayIndexOf;
var Formula = _dereq_('./formula');
// const log = require('./log')
var RDFArrayRemove = _dereq_('./util').RDFArrayRemove;
var Statement = _dereq_('./statement');
var Node = _dereq_('./node');
var Variable = _dereq_('./variable');

var owl_ns = 'http://www.w3.org/2002/07/owl#';
// var link_ns = 'http://www.w3.org/2007/ont/link#'

// Handle Functional Property
function handle_FP(formula, subj, pred, obj) {
  var o1 = formula.any(subj, pred, undefined);
  if (!o1) {
    return false; // First time with this value
  }
  // log.warn("Equating "+o1.uri+" and "+obj.uri + " because FP "+pred.uri);  //@@
  formula.equate(o1, obj);
  return true;
} // handle_FP

// Handle Inverse Functional Property
function handle_IFP(formula, subj, pred, obj) {
  var s1 = formula.any(undefined, pred, obj);
  if (!s1) {
    return false; // First time with this value
  }
  // log.warn("Equating "+s1.uri+" and "+subj.uri + " because IFP "+pred.uri);  //@@
  formula.equate(s1, subj);
  return true;
} // handle_IFP

function handleRDFType(formula, subj, pred, obj, why) {
  if (formula.typeCallback) {
    formula.typeCallback(formula, obj, why);
  }

  var x = formula.classActions[obj.hashString()];
  var done = false;
  if (x) {
    for (var i = 0; i < x.length; i++) {
      done = done || x[i](formula, subj, pred, obj, why);
    }
  }
  return done; // statement given is not needed if true
}

var IndexedFormula = function (_Formula) {
  _inherits(IndexedFormula, _Formula);

  // IN future - allow pass array of statements to constructor
  function IndexedFormula(features) {
    _classCallCheck(this, IndexedFormula);

    // this.statements = [] // As in Formula NO don't overwrite inherited
    // this.optional = []

    var _this = _possibleConstructorReturn(this, (IndexedFormula.__proto__ || Object.getPrototypeOf(IndexedFormula)).call(this));

    _this.propertyActions = []; // Array of functions to call when getting statement with {s X o}
    // maps <uri> to [f(F,s,p,o),...]
    _this.classActions = []; // Array of functions to call when adding { s type X }
    _this.redirections = []; // redirect to lexically smaller equivalent symbol
    _this.aliases = []; // reverse mapping to redirection: aliases for this
    _this.HTTPRedirects = []; // redirections we got from HTTP
    _this.subjectIndex = []; // Array of statements with this X as subject
    _this.predicateIndex = []; // Array of statements with this X as subject
    _this.objectIndex = []; // Array of statements with this X as object
    _this.whyIndex = []; // Array of statements with X as provenance
    _this.index = [_this.subjectIndex, _this.predicateIndex, _this.objectIndex, _this.whyIndex];
    _this.namespaces = {}; // Dictionary of namespace prefixes
    _this.features = features || ['sameAs', 'InverseFunctionalProperty', 'FunctionalProperty'];
    _this.initPropertyActions(_this.features);
    return _this;
  }

  _createClass(IndexedFormula, [{
    key: 'substitute',
    value: function substitute(bindings) {
      var statementsCopy = this.statements.map(function (ea) {
        return ea.substitute(bindings);
      });
      // console.log('IndexedFormula subs statemnts:' + statementsCopy)
      var y = new IndexedFormula();
      y.add(statementsCopy);
      // console.log('indexed-form subs formula:' + y)
      return y;
    }
  }, {
    key: 'applyPatch',
    value: function applyPatch(patch, target, patchCallback) {
      // patchCallback(err)
      var Query = _dereq_('./query').Query;
      var targetKB = this;
      var ds;
      var binding = null;

      // /////////// Debug strings
      /*
      var bindingDebug = function (b) {
        var str = ''
        var v
        for (v in b) {
          if (b.hasOwnProperty(v)) {
            str += '    ' + v + ' -> ' + b[v]
          }
        }
        return str
      }
      */
      var doPatch = function doPatch(onDonePatch) {
        if (patch['delete']) {
          ds = patch['delete'];
          // console.log(bindingDebug(binding))
          // console.log('ds before substitute: ' + ds)
          if (binding) ds = ds.substitute(binding);
          // console.log('applyPatch: delete: ' + ds)
          ds = ds.statements;
          var bad = [];
          var ds2 = ds.map(function (st) {
            // Find the actual statemnts in the store
            var sts = targetKB.statementsMatching(st.subject, st.predicate, st.object, target);
            if (sts.length === 0) {
              // log.info("NOT FOUND deletable " + st)
              bad.push(st);
              return null;
            } else {
              // log.info("Found deletable " + st)
              return sts[0];
            }
          });
          if (bad.length) {
            // console.log('Could not find to delete ' + bad.length + 'statements')
            // console.log('despite ' + targetKB.statementsMatching(bad[0].subject, bad[0].predicate)[0])
            return patchCallback('Could not find to delete: ' + bad.join('\n or '));
          }
          ds2.map(function (st) {
            targetKB.remove(st);
          });
        }
        if (patch['insert']) {
          // log.info("doPatch insert "+patch['insert'])
          ds = patch['insert'];
          if (binding) ds = ds.substitute(binding);
          ds = ds.statements;
          ds.map(function (st) {
            st.why = target;
            targetKB.add(st.subject, st.predicate, st.object, st.why);
          });
        }
        onDonePatch();
      };
      if (patch.where) {
        // log.info("Processing WHERE: " + patch.where + '\n')
        var query = new Query('patch');
        query.pat = patch.where;
        query.pat.statements.map(function (st) {
          st.why = target;
        });

        var bindingsFound = [];

        targetKB.query(query, function onBinding(binding) {
          bindingsFound.push(binding);
          // console.log('   got a binding: ' + bindingDebug(binding))
        }, targetKB.fetcher, function onDone() {
          if (bindingsFound.length === 0) {
            return patchCallback('No match found to be patched:' + patch.where);
          }
          if (bindingsFound.length > 1) {
            return patchCallback('Patch ambiguous. No patch done.');
          }
          binding = bindingsFound[0];
          doPatch(patchCallback);
        });
      } else {
        doPatch(patchCallback);
      }
    }
  }, {
    key: 'declareExistential',
    value: function declareExistential(x) {
      if (!this._existentialVariables) this._existentialVariables = [];
      this._existentialVariables.push(x);
      return x;
    }
  }, {
    key: 'initPropertyActions',
    value: function initPropertyActions(features) {
      // If the predicate is #type, use handleRDFType to create a typeCallback on the object
      this.propertyActions['<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>'] = [handleRDFType];

      // Assumption: these terms are not redirected @@fixme
      if (ArrayIndexOf(features, 'sameAs') >= 0) {
        this.propertyActions['<http://www.w3.org/2002/07/owl#sameAs>'] = [function (formula, subj, pred, obj, why) {
          // log.warn("Equating "+subj.uri+" sameAs "+obj.uri);  //@@
          formula.equate(subj, obj);
          return true; // true if statement given is NOT needed in the store
        }]; // sameAs -> equate & don't add to index
      }
      if (ArrayIndexOf(features, 'InverseFunctionalProperty') >= 0) {
        this.classActions['<' + owl_ns + 'InverseFunctionalProperty>'] = [function (formula, subj, pred, obj, addFn) {
          // yes subj not pred!
          return formula.newPropertyAction(subj, handle_IFP);
        }]; // IFP -> handle_IFP, do add to index
      }
      if (ArrayIndexOf(features, 'FunctionalProperty') >= 0) {
        this.classActions['<' + owl_ns + 'FunctionalProperty>'] = [function (formula, subj, proj, obj, addFn) {
          return formula.newPropertyAction(subj, handle_FP);
        }]; // FP => handleFP, do add to index
      }
    }

    /**
     * Adds a triple to the store.
     * Returns the statement added
     * (would it be better to return the original formula for chaining?)
     */

  }, {
    key: 'add',
    value: function add(subj, pred, obj, why) {
      var i;
      if (arguments.length === 1) {
        if (subj instanceof Array) {
          for (i = 0; i < subj.length; i++) {
            this.add(subj[i]);
          }
        } else if (subj instanceof Statement) {
          this.add(subj.subject, subj.predicate, subj.object, subj.why);
        } else if (subj instanceof IndexedFormula) {
          this.add(subj.statements);
        }
        return this;
      }
      var actions;
      var st;
      if (!why) {
        // system generated
        why = this.fetcher ? this.fetcher.appNode : this.sym('chrome:theSession');
      }
      subj = Node.fromValue(subj);
      pred = Node.fromValue(pred);
      obj = Node.fromValue(obj);
      why = Node.fromValue(why);
      if (this.predicateCallback) {
        this.predicateCallback(this, pred, why);
      }
      // Action return true if the statement does not need to be added
      var predHash = this.canon(pred).hashString();
      actions = this.propertyActions[predHash]; // Predicate hash
      var done = false;
      if (actions) {
        // alert('type: '+typeof actions +' @@ actions='+actions)
        for (i = 0; i < actions.length; i++) {
          done = done || actions[i](this, subj, pred, obj, why);
        }
      }
      if (this.holds(subj, pred, obj, why)) {
        // Takes time but saves duplicates
        // console.log('rdflib: Ignoring dup! {' + subj + ' ' + pred + ' ' + obj + ' ' + why + '}')
        return null; // @@better to return self in all cases?
      }
      // If we are tracking provenance, every thing should be loaded into the store
      // if (done) return new Statement(subj, pred, obj, why)
      // Don't put it in the store
      // still return this statement for owl:sameAs input
      var hash = [this.canon(subj).hashString(), predHash, this.canon(obj).hashString(), this.canon(why).hashString()];
      st = new Statement(subj, pred, obj, why);
      for (i = 0; i < 4; i++) {
        var ix = this.index[i];
        var h = hash[i];
        if (!ix[h]) {
          ix[h] = [];
        }
        ix[h].push(st); // Set of things with this as subject, etc
      }

      // log.debug("ADDING    {"+subj+" "+pred+" "+obj+"} "+why)
      this.statements.push(st);
      return st;
    }
  }, {
    key: 'addAll',
    value: function addAll(statements) {
      var _this2 = this;

      statements.forEach(function (quad) {
        _this2.add(quad.subject, quad.predicate, quad.object, quad.graph);
      });
    }
  }, {
    key: 'any',
    value: function any(s, p, o, g) {
      var st = this.anyStatementMatching(s, p, o, g);
      if (st == null) {
        return void 0;
      } else if (s == null) {
        return st.subject;
      } else if (p == null) {
        return st.predicate;
      } else if (o == null) {
        return st.object;
      }
      return void 0;
    }
  }, {
    key: 'anyValue',
    value: function anyValue(s, p, o, g) {
      var y = this.any(s, p, o, g);
      return y ? y.value : void 0;
    }
  }, {
    key: 'anyStatementMatching',
    value: function anyStatementMatching(subj, pred, obj, why) {
      var x = this.statementsMatching(subj, pred, obj, why, true);
      if (!x || x.length === 0) {
        return undefined;
      }
      return x[0];
    }

    /**
     * Returns the symbol with canonical URI as smushed
     */

  }, {
    key: 'canon',
    value: function canon(term) {
      if (!term) {
        return term;
      }
      var y = this.redirections[term.hashString()];
      if (!y) {
        return term;
      }
      return y;
    }
  }, {
    key: 'check',
    value: function check() {
      this.checkStatementList(this.statements);
      for (var p = 0; p < 4; p++) {
        var ix = this.index[p];
        for (var key in ix) {
          if (ix.hasOwnProperty(key)) {
            this.checkStatementList(ix[key], p);
          }
        }
      }
    }

    /**
     * Self-consistency checking for diagnostis only
     * Is each statement properly indexed?
     */

  }, {
    key: 'checkStatementList',
    value: function checkStatementList(sts, from) {
      var names = ['subject', 'predicate', 'object', 'why'];
      var origin = ' found in ' + names[from] + ' index.';
      var st;
      for (var j = 0; j < sts.length; j++) {
        st = sts[j];
        var term = [st.subject, st.predicate, st.object, st.why];
        var arrayContains = function arrayContains(a, x) {
          for (var i = 0; i < a.length; i++) {
            if (a[i].subject.sameTerm(x.subject) && a[i].predicate.sameTerm(x.predicate) && a[i].object.sameTerm(x.object) && a[i].why.sameTerm(x.why)) {
              return true;
            }
          }
        };
        for (var p = 0; p < 4; p++) {
          var c = this.canon(term[p]);
          var h = c.hashString();
          if (!this.index[p][h]) {
            // throw new Error('No ' + name[p] + ' index for statement ' + st + '@' + st.why + origin)
          } else {
            if (!arrayContains(this.index[p][h], st)) {
              // throw new Error('Index for ' + name[p] + ' does not have statement ' + st + '@' + st.why + origin)
            }
          }
        }
        if (!arrayContains(this.statements, st)) {
          throw new Error('Statement list does not statement ' + st + '@' + st.why + origin);
        }
      }
    }
  }, {
    key: 'close',
    value: function close() {
      return this;
    }

    /**
     * replaces @template with @target and add appropriate triples (no triple
     * removed)
     * one-direction replication
     * @method copyTo
     */

  }, {
    key: 'copyTo',
    value: function copyTo(template, target, flags) {
      if (!flags) flags = [];
      var statList = this.statementsMatching(template);
      if (ArrayIndexOf(flags, 'two-direction') !== -1) {
        statList.concat(this.statementsMatching(undefined, undefined, template));
      }
      for (var i = 0; i < statList.length; i++) {
        var st = statList[i];
        switch (st.object.termType) {
          case 'NamedNode':
            this.add(target, st.predicate, st.object);
            break;
          case 'Literal':
          case 'BlankNode':
          case 'Collection':
            this.add(target, st.predicate, st.object.copy(this));
        }
        if (ArrayIndexOf(flags, 'delete') !== -1) {
          this.remove(st);
        }
      }
    }

    /**
     * simplify graph in store when we realize two identifiers are equivalent
     * We replace the bigger with the smaller.
     */

  }, {
    key: 'equate',
    value: function equate(u1, u2) {
      // log.warn("Equating "+u1+" and "+u2); // @@
      // @@JAMBO Must canonicalize the uris to prevent errors from a=b=c
      // 03-21-2010
      u1 = this.canon(u1);
      u2 = this.canon(u2);
      var d = u1.compareTerm(u2);
      if (!d) {
        return true; // No information in {a = a}
      }
      // var big
      // var small
      if (d < 0) {
        // u1 less than u2
        return this.replaceWith(u2, u1);
      } else {
        return this.replaceWith(u1, u2);
      }
    }
  }, {
    key: 'formula',
    value: function formula(features) {
      return new IndexedFormula(features);
    }

    /**
     * Returns the number of statements contained in this IndexedFormula.
     * (Getter proxy to this.statements).
     * Usage:
     *    ```
     *    var kb = rdf.graph()
     *    kb.length  // -> 0
     *    ```
     * @return {Number}
     */

  }, {
    key: 'match',


    /**
     * Returns any quads matching the given arguments.
     * Standard RDFJS Taskforce method for Source objects, implemented as an
     * alias to `statementsMatching()`
     * @method match
     * @param subject {Node|String|Object}
     * @param predicate {Node|String|Object}
     * @param object {Node|String|Object}
     * @param graph {NamedNode|String}
     */
    value: function match(subject, predicate, object, graph) {
      return this.statementsMatching(Node.fromValue(subject), Node.fromValue(predicate), Node.fromValue(object), Node.fromValue(graph));
    }

    /**
     * Find out whether a given URI is used as symbol in the formula
     */

  }, {
    key: 'mentionsURI',
    value: function mentionsURI(uri) {
      var hash = '<' + uri + '>';
      return !!this.subjectIndex[hash] || !!this.objectIndex[hash] || !!this.predicateIndex[hash];
    }

    // Existentials are BNodes - something exists without naming

  }, {
    key: 'newExistential',
    value: function newExistential(uri) {
      if (!uri) return this.bnode();
      var x = this.sym(uri);
      return this.declareExistential(x);
    }
  }, {
    key: 'newPropertyAction',
    value: function newPropertyAction(pred, action) {
      // log.debug("newPropertyAction:  "+pred)
      var hash = pred.hashString();
      if (!this.propertyActions[hash]) {
        this.propertyActions[hash] = [];
      }
      this.propertyActions[hash].push(action);
      // Now apply the function to to statements already in the store
      var toBeFixed = this.statementsMatching(undefined, pred, undefined);
      var done = false;
      for (var i = 0; i < toBeFixed.length; i++) {
        // NOT optimized - sort toBeFixed etc
        done = done || action(this, toBeFixed[i].subject, pred, toBeFixed[i].object);
      }
      return done;
    }

    // Universals are Variables

  }, {
    key: 'newUniversal',
    value: function newUniversal(uri) {
      var x = this.sym(uri);
      if (!this._universalVariables) this._universalVariables = [];
      this._universalVariables.push(x);
      return x;
    }

    // convenience function used by N3 parser

  }, {
    key: 'variable',
    value: function variable(name) {
      return new Variable(name);
    }

    /**
     * Find an unused id for a file being edited: return a symbol
     * (Note: Slow iff a lot of them -- could be O(log(k)) )
     */

  }, {
    key: 'nextSymbol',
    value: function nextSymbol(doc) {
      for (var i = 0;; i++) {
        var uri = doc.uri + '#n' + i;
        if (!this.mentionsURI(uri)) return this.sym(uri);
      }
    }
  }, {
    key: 'query',
    value: function query(myQuery, callback, fetcher, onDone) {
      var indexedFormulaQuery = _dereq_('./query').indexedFormulaQuery;
      return indexedFormulaQuery.call(this, myQuery, callback, fetcher, onDone);
    }

    /**
     * Finds a statement object and removes it
     */

  }, {
    key: 'remove',
    value: function remove(st) {
      if (st instanceof Array) {
        for (var i = 0; i < st.length; i++) {
          this.remove(st[i]);
        }
        return this;
      }
      if (st instanceof IndexedFormula) {
        return this.remove(st.statements);
      }
      var sts = this.statementsMatching(st.subject, st.predicate, st.object, st.why);
      if (!sts.length) {
        throw new Error('Statement to be removed is not on store: ' + st);
      }
      this.removeStatement(sts[0]);
      return this;
    }

    /**
     * Removes all statemnts in a doc
     */

  }, {
    key: 'removeDocument',
    value: function removeDocument(doc) {
      var sts = this.statementsMatching(undefined, undefined, undefined, doc).slice(); // Take a copy as this is the actual index
      for (var i = 0; i < sts.length; i++) {
        this.removeStatement(sts[i]);
      }
      return this;
    }

    /**
     * remove all statements matching args (within limit) *
     */

  }, {
    key: 'removeMany',
    value: function removeMany(subj, pred, obj, why, limit) {
      // log.debug("entering removeMany w/ subj,pred,obj,why,limit = " + subj +", "+ pred+", " + obj+", " + why+", " + limit)
      var sts = this.statementsMatching(subj, pred, obj, why, false);
      // This is a subtle bug that occcured in updateCenter.js too.
      // The fact is, this.statementsMatching returns this.whyIndex instead of a copy of it
      // but for perfromance consideration, it's better to just do that
      // so make a copy here.
      var statements = [];
      for (var i = 0; i < sts.length; i++) {
        statements.push(sts[i]);
      }if (limit) statements = statements.slice(0, limit);
      for (i = 0; i < statements.length; i++) {
        this.remove(statements[i]);
      }
    }
  }, {
    key: 'removeMatches',
    value: function removeMatches(subject, predicate, object, why) {
      this.removeStatements(this.statementsMatching(subject, predicate, object, why));
      return this;
    }

    /**
     * Remove a particular statement object from the store
     *
     * st    a statement which is already in the store and indexed.
     *      Make sure you only use this for these.
     *    Otherwise, you should use remove() above.
     */

  }, {
    key: 'removeStatement',
    value: function removeStatement(st) {
      // log.debug("entering remove w/ st=" + st)
      var term = [st.subject, st.predicate, st.object, st.why];
      for (var p = 0; p < 4; p++) {
        var c = this.canon(term[p]);
        var h = c.hashString();
        if (!this.index[p][h]) {
          // log.warn ("Statement removal: no index '+p+': "+st)
        } else {
          RDFArrayRemove(this.index[p][h], st);
        }
      }
      RDFArrayRemove(this.statements, st);
      return this;
    }
  }, {
    key: 'removeStatements',
    value: function removeStatements(sts) {
      for (var i = 0; i < sts.length; i++) {
        this.remove(sts[i]);
      }
      return this;
    }

    /**
     * Replace big with small, obsoleted with obsoleting.
     */

  }, {
    key: 'replaceWith',
    value: function replaceWith(big, small) {
      // log.debug("Replacing "+big+" with "+small) // @@
      var oldhash = big.hashString();
      var newhash = small.hashString();
      var moveIndex = function moveIndex(ix) {
        var oldlist = ix[oldhash];
        if (!oldlist) {
          return; // none to move
        }
        var newlist = ix[newhash];
        if (!newlist) {
          ix[newhash] = oldlist;
        } else {
          ix[newhash] = oldlist.concat(newlist);
        }
        delete ix[oldhash];
      };
      // the canonical one carries all the indexes
      for (var i = 0; i < 4; i++) {
        moveIndex(this.index[i]);
      }
      this.redirections[oldhash] = small;
      if (big.uri) {
        // @@JAMBO: must update redirections,aliases from sub-items, too.
        if (!this.aliases[newhash]) {
          this.aliases[newhash] = [];
        }
        this.aliases[newhash].push(big); // Back link
        if (this.aliases[oldhash]) {
          for (i = 0; i < this.aliases[oldhash].length; i++) {
            this.redirections[this.aliases[oldhash][i].hashString()] = small;
            this.aliases[newhash].push(this.aliases[oldhash][i]);
          }
        }
        this.add(small, this.sym('http://www.w3.org/2007/ont/link#uri'), big.uri);
        // If two things are equal, and one is requested, we should request the other.
        if (this.fetcher) {
          this.fetcher.nowKnownAs(big, small);
        }
      }
      moveIndex(this.classActions);
      moveIndex(this.propertyActions);
      // log.debug("Equate done. "+big+" to be known as "+small)
      return true; // true means the statement does not need to be put in
    }

    /**
     * Return all equivalent URIs by which this is known
     */

  }, {
    key: 'allAliases',
    value: function allAliases(x) {
      var a = this.aliases[this.canon(x).hashString()] || [];
      a.push(this.canon(x));
      return a;
    }

    /**
     * Compare by canonical URI as smushed
     */

  }, {
    key: 'sameThings',
    value: function sameThings(x, y) {
      if (x.sameTerm(y)) {
        return true;
      }
      var x1 = this.canon(x);
      //    alert('x1='+x1)
      if (!x1) return false;
      var y1 = this.canon(y);
      //    alert('y1='+y1); //@@
      if (!y1) return false;
      return x1.uri === y1.uri;
    }
  }, {
    key: 'setPrefixForURI',
    value: function setPrefixForURI(prefix, nsuri) {
      // TODO: This is a hack for our own issues, which ought to be fixed
      // post-release
      // See http://dig.csail.mit.edu/cgi-bin/roundup.cgi/$rdf/issue227
      if (prefix === 'tab' && this.namespaces['tab']) {
        return;
      } // There are files around with long badly generated prefixes like this
      if (prefix.slice(0, 2) === 'ns' || prefix.slice(0, 7) === 'default') {
        return;
      }
      this.namespaces[prefix] = nsuri;
    }

    /**
     * Return statements matching a pattern
     * ALL CONVENIENCE LOOKUP FUNCTIONS RELY ON THIS!
     */

  }, {
    key: 'statementsMatching',
    value: function statementsMatching(subj, pred, obj, why, justOne) {
      // log.debug("Matching {"+subj+" "+pred+" "+obj+"}")
      var pat = [subj, pred, obj, why];
      var pattern = [];
      var hash = [];
      var wild = []; // wildcards
      var given = []; // Not wild
      var p;
      var list;
      for (p = 0; p < 4; p++) {
        pattern[p] = this.canon(Node.fromValue(pat[p]));
        if (!pattern[p]) {
          wild.push(p);
        } else {
          given.push(p);
          hash[p] = pattern[p].hashString();
        }
      }
      if (given.length === 0) {
        return this.statements;
      }
      if (given.length === 1) {
        // Easy too, we have an index for that
        p = given[0];
        list = this.index[p][hash[p]];
        if (list && justOne) {
          if (list.length > 1) {
            list = list.slice(0, 1);
          }
        }
        list = list || [];
        return list;
      }
      // Now given.length is 2, 3 or 4.
      // We hope that the scale-free nature of the data will mean we tend to get
      // a short index in there somewhere!
      var best = 1e10; // really bad
      var best_i;
      var i;
      for (i = 0; i < given.length; i++) {
        p = given[i]; // Which part we are dealing with
        list = this.index[p][hash[p]];
        if (!list) {
          return []; // No occurrences
        }
        if (list.length < best) {
          best = list.length;
          best_i = i; // (not p!)
        }
      }
      // Ok, we have picked the shortest index but now we have to filter it
      var best_p = given[best_i];
      var possibles = this.index[best_p][hash[best_p]];
      var check = given.slice(0, best_i).concat(given.slice(best_i + 1)); // remove best_i
      var results = [];
      var parts = ['subject', 'predicate', 'object', 'why'];
      for (var j = 0; j < possibles.length; j++) {
        var st = possibles[j];

        for (i = 0; i < check.length; i++) {
          // for each position to be checked
          p = check[i];
          if (!this.canon(st[parts[p]]).sameTerm(pattern[p])) {
            st = null;
            break;
          }
        }
        if (st != null) {
          results.push(st);
          if (justOne) break;
        }
      }
      return results;
    }

    /**
     *  A list of all the URIs by which this thing is known
     */

  }, {
    key: 'uris',
    value: function uris(term) {
      var cterm = this.canon(term);
      var terms = this.aliases[cterm.hashString()];
      if (!cterm.uri) return [];
      var res = [cterm.uri];
      if (terms) {
        for (var i = 0; i < terms.length; i++) {
          res.push(terms[i].uri);
        }
      }
      return res;
    }
  }, {
    key: 'length',
    get: function get() {
      return this.statements.length;
    }
  }]);

  return IndexedFormula;
}(Formula);

exports.default = IndexedFormula;


IndexedFormula.handleRDFType = handleRDFType;
},{"./formula":86,"./node":95,"./query":99,"./statement":105,"./util":109,"./variable":110}],89:[function(_dereq_,module,exports){
'use strict';

var jsonParser = function () {
  return {
    parseJSON: function parseJSON(data, source, store) {
      var subject, predicate, object;
      var bnodes = {};
      var why = store.sym(source);
      for (var x in data) {
        if (x.indexOf('_:') === 0) {
          if (bnodes[x]) {
            subject = bnodes[x];
          } else {
            subject = store.bnode(x);
            bnodes[x] = subject;
          }
        } else {
          subject = store.sym(x);
        }
        var preds = data[x];
        for (var y in preds) {
          var objects = preds[y];
          predicate = store.sym(y);
          for (var z in objects) {
            var obj = objects[z];
            if (obj.type === 'uri') {
              object = store.sym(obj.value);
              store.add(subject, predicate, object, why);
            } else if (obj.type === 'BlankNode') {
              if (bnodes[obj.value]) {
                object = bnodes[obj.value];
              } else {
                object = store.bnode(obj.value);
                bnodes[obj.value] = object;
              }
              store.add(subject, predicate, object, why);
            } else if (obj.type === 'Literal') {
              // var datatype
              if (obj.datatype) {
                object = store.literal(obj.value, undefined, store.sym(obj.datatype));
              } else if (obj.lang) {
                object = store.literal(obj.value, obj.lang);
              } else {
                object = store.literal(obj.value);
              }
              store.add(subject, predicate, object, why);
            } else {
              throw new Error('error: unexpected termtype: ' + z.type);
            }
          }
        }
      }
    }
  };
}();

module.exports = jsonParser;
},{}],90:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassOrder = _dereq_('./class-order');
var NamedNode = _dereq_('./named-node');
var Node = _dereq_('./node');
var XSD = _dereq_('./xsd');

var Literal = function (_Node) {
  _inherits(Literal, _Node);

  function Literal(value, language, datatype) {
    _classCallCheck(this, Literal);

    var _this = _possibleConstructorReturn(this, (Literal.__proto__ || Object.getPrototypeOf(Literal)).call(this));

    _this.termType = Literal.termType;
    _this.value = value;
    if (language) {
      _this.lang = language;
      datatype = XSD.langString;
    }
    // If not specified, a literal has the implied XSD.string default datatype
    if (datatype) {
      _this.datatype = NamedNode.fromValue(datatype);
    }
    return _this;
  }

  _createClass(Literal, [{
    key: 'copy',
    value: function copy() {
      return new Literal(this.value, this.lang, this.datatype);
    }
  }, {
    key: 'equals',
    value: function equals(other) {
      if (!other) {
        return false;
      }
      return this.termType === other.termType && this.value === other.value && this.language === other.language && (!this.datatype && !other.datatype || this.datatype && this.datatype.equals(other.datatype));
    }
  }, {
    key: 'toNT',
    value: function toNT() {
      if (typeof this.value === 'number') {
        return this.toString();
      } else if (typeof this.value !== 'string') {
        throw new Error('Value of RDF literal is not string or number: ' + this.value);
      }
      var str = this.value;
      str = str.replace(/\\/g, '\\\\');
      str = str.replace(/\"/g, '\\"');
      str = str.replace(/\n/g, '\\n');
      str = '"' + str + '"';

      if (this.language) {
        str += '@' + this.language;
      } else if (!this.datatype.equals(XSD.string)) {
        // Only add datatype if it's not a string
        str += '^^' + this.datatype.toCanonical();
      }
      return str;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '' + this.value;
    }
    /**
     * @method fromBoolean
     * @static
     * @param value {Boolean}
     * @return {Literal}
     */

  }, {
    key: 'language',
    get: function get() {
      return this.lang;
    },
    set: function set(language) {
      this.lang = language || '';
    }
  }], [{
    key: 'fromBoolean',
    value: function fromBoolean(value) {
      var strValue = value ? '1' : '0';
      return new Literal(strValue, null, XSD.boolean);
    }
    /**
     * @method fromDate
     * @static
     * @param value {Date}
     * @return {Literal}
     */

  }, {
    key: 'fromDate',
    value: function fromDate(value) {
      if (!(value instanceof Date)) {
        throw new TypeError('Invalid argument to Literal.fromDate()');
      }
      var d2 = function d2(x) {
        return ('' + (100 + x)).slice(1, 3);
      };
      var date = '' + value.getUTCFullYear() + '-' + d2(value.getUTCMonth() + 1) + '-' + d2(value.getUTCDate()) + 'T' + d2(value.getUTCHours()) + ':' + d2(value.getUTCMinutes()) + ':' + d2(value.getUTCSeconds()) + 'Z';
      return new Literal(date, null, XSD.dateTime);
    }
    /**
     * @method fromNumber
     * @static
     * @param value {Number}
     * @return {Literal}
     */

  }, {
    key: 'fromNumber',
    value: function fromNumber(value) {
      if (typeof value !== 'number') {
        throw new TypeError('Invalid argument to Literal.fromNumber()');
      }
      var datatype = void 0;
      var strValue = value.toString();
      if (strValue.indexOf('e') < 0 && Math.abs(value) <= Number.MAX_SAFE_INTEGER) {
        datatype = Number.isInteger(value) ? XSD.integer : XSD.decimal;
      } else {
        datatype = XSD.double;
      }
      return new Literal(strValue, null, datatype);
    }
    /**
     * @method fromValue
     * @param value
     * @return {Literal}
     */

  }, {
    key: 'fromValue',
    value: function fromValue(value) {
      if (typeof value === 'undefined' || value === null) {
        return value;
      }
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.termType) {
        // this is a Node instance
        return value;
      }
      switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
        case 'object':
          if (value instanceof Date) {
            return Literal.fromDate(value);
          }
        case 'boolean':
          return Literal.fromBoolean(value);
        case 'number':
          return Literal.fromNumber(value);
        case 'string':
          return new Literal(value);
      }
      throw new Error("Can't make literal from " + value + ' of type ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
    }
  }]);

  return Literal;
}(Node);

Literal.termType = 'Literal';
Literal.prototype.classOrder = ClassOrder['Literal'];
Literal.prototype.datatype = XSD.string;
Literal.prototype.lang = '';
Literal.prototype.isVar = 0;

module.exports = Literal;
},{"./class-order":79,"./named-node":93,"./node":95,"./xsd":111}],91:[function(_dereq_,module,exports){
"use strict";

/**
 * A Dummy log
 * @module log
 */
module.exports = {
  debug: function debug(x) {
    return;
  },
  warn: function warn(x) {
    return;
  },
  info: function info(x) {
    return;
  },
  error: function error(x) {
    return;
  },
  success: function success(x) {
    return;
  },
  msg: function msg(x) {
    return;
  }
};
},{}],92:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
*
*  UTF-8 data encode / decode
*  http://www.webtoolkit.info/
*
**/
var Uri = _dereq_('./uri');
var ArrayIndexOf = _dereq_('./util').ArrayIndexOf;

var N3Parser = function () {

    function hexify(str) {
        // also used in parser
        return encodeURI(str);
    }

    var Utf8 = {
        // public method for url encoding
        encode: function encode(string) {
            string = string.replace(/\r\n/g, "\n");
            var utftext = "";

            for (var n = 0; n < string.length; n++) {

                var c = string.charCodeAt(n);

                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if (c > 127 && c < 2048) {
                    utftext += String.fromCharCode(c >> 6 | 192);
                    utftext += String.fromCharCode(c & 63 | 128);
                } else {
                    utftext += String.fromCharCode(c >> 12 | 224);
                    utftext += String.fromCharCode(c >> 6 & 63 | 128);
                    utftext += String.fromCharCode(c & 63 | 128);
                }
            }

            return utftext;
        },
        // public method for url decoding
        decode: function decode(utftext) {
            var string = "";
            var i = 0;

            while (i < utftext.length) {

                var c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if (c > 191 && c < 224) {
                    string += String.fromCharCode((c & 31) << 6 | utftext.charCodeAt(i + 1) & 63);
                    i += 2;
                } else {
                    string += String.fromCharCode((c & 15) << 12 | (utftext.charCodeAt(i + 1) & 63) << 6 | utftext.charCodeAt(i + 2) & 63);
                    i += 3;
                }
            }
            return string;
        }
    }; // Things we need to define to make converted pythn code work in js
    // environment of $rdf

    var RDFSink_forSomeSym = "http://www.w3.org/2000/10/swap/log#forSome";
    var RDFSink_forAllSym = "http://www.w3.org/2000/10/swap/log#forAll";
    var Logic_NS = "http://www.w3.org/2000/10/swap/log#";

    //  pyjs seems to reference runtime library which I didn't find

    var pyjslib_Tuple = function pyjslib_Tuple(theList) {
        return theList;
    };

    var pyjslib_List = function pyjslib_List(theList) {
        return theList;
    };

    var pyjslib_Dict = function pyjslib_Dict(listOfPairs) {
        if (listOfPairs.length > 0) throw "missing.js: oops nnonempty dict not imp";
        return [];
    };

    var pyjslib_len = function pyjslib_len(s) {
        return s.length;
    };

    var pyjslib_slice = function pyjslib_slice(str, i, j) {
        if (typeof str.slice == 'undefined') throw '@@ mising.js: No .slice function for ' + str + ' of type ' + (typeof str === 'undefined' ? 'undefined' : _typeof(str));
        if (typeof j == 'undefined' || j == null) return str.slice(i);
        return str.slice(i, j); // @ exactly the same spec?
    };
    var StopIteration = Error('dummy error stop iteration');

    var pyjslib_Iterator = function pyjslib_Iterator(theList) {
        this.last = 0;
        this.li = theList;
        this.next = function () {
            if (this.last == this.li.length) throw StopIteration;
            return this.li[this.last++];
        };
        return this;
    };

    var ord = function ord(str) {
        return str.charCodeAt(0);
    };

    var string_find = function string_find(str, s) {
        return str.indexOf(s);
    };

    var assertFudge = function assertFudge(condition, desc) {
        if (condition) return;
        if (desc) throw "python Assertion failed: " + desc;
        throw "(python) Assertion failed.";
    };

    var stringFromCharCode = function stringFromCharCode(uesc) {
        return String.fromCharCode(uesc);
    };

    String.prototype.encode = function (encoding) {
        if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8";
        return Utf8.encode(this);
    };
    String.prototype.decode = function (encoding) {
        if (encoding != 'utf-8') throw "UTF8_converter: can only do utf-8";
        //return Utf8.decode(this);
        return this;
    };

    var uripath_join = function uripath_join(base, given) {
        return Uri.join(given, base); // sad but true
    };

    var becauseSubexpression = null; // No reason needed
    var diag_tracking = 0;
    var diag_chatty_flag = 0;
    var diag_progress = function diag_progress(str) {} /*$rdf.log.debug(str);*/

    // why_BecauseOfData = function(doc, reason) { return doc };


    ;var RDF_type_URI = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
    var DAML_sameAs_URI = "http://www.w3.org/2002/07/owl#sameAs";

    /*
    function SyntaxError(details) {
        return new __SyntaxError(details);
    }
    */

    function __SyntaxError(details) {
        this.details = details;
    }

    /*
    
    $Id: n3parser.js 14561 2008-02-23 06:37:26Z kennyluck $
    
    HAND EDITED FOR CONVERSION TO JAVASCRIPT
    
    This module implements a Nptation3 parser, and the final
    part of a notation3 serializer.
    
    See also:
    
    Notation 3
    http://www.w3.org/DesignIssues/Notation3
    
    Closed World Machine - and RDF Processor
    http://www.w3.org/2000/10/swap/cwm
    
    To DO: See also "@@" in comments
    
    - Clean up interfaces
    ______________________________________________
    
    Module originally by Dan Connolly, includeing notation3
    parser and RDF generator. TimBL added RDF stream model
    and N3 generation, replaced stream model with use
    of common store/formula API.  Yosi Scharf developped
    the module, including tests and test harness.
    
    */

    var ADDED_HASH = "#";
    var LOG_implies_URI = "http://www.w3.org/2000/10/swap/log#implies";
    var INTEGER_DATATYPE = "http://www.w3.org/2001/XMLSchema#integer";
    var FLOAT_DATATYPE = "http://www.w3.org/2001/XMLSchema#double";
    var DECIMAL_DATATYPE = "http://www.w3.org/2001/XMLSchema#decimal";
    var DATE_DATATYPE = "http://www.w3.org/2001/XMLSchema#date";
    var DATETIME_DATATYPE = "http://www.w3.org/2001/XMLSchema#dateTime";
    var BOOLEAN_DATATYPE = "http://www.w3.org/2001/XMLSchema#boolean";
    var option_noregen = 0;
    var _notQNameChars = "\t\r\n !\"#$%&'()*.,+/;<=>?@[\\]^`{|}~";
    var _notNameChars = _notQNameChars + ":";
    var _rdfns = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    var N3CommentCharacter = "#";
    var eol = new RegExp("^[ \\t]*(#[^\\n]*)?\\r?\\n", 'g');
    var eof = new RegExp("^[ \\t]*(#[^\\n]*)?$", 'g');
    var ws = new RegExp("^[ \\t]*", 'g');
    var signed_integer = new RegExp("^[-+]?[0-9]+", 'g');
    var number_syntax = new RegExp("^([-+]?[0-9]+)(\\.[0-9]+)?(e[-+]?[0-9]+)?", 'g');
    var datetime_syntax = new RegExp('^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9](T[0-9][0-9]:[0-9][0-9](:[0-9][0-9](\\.[0-9]*)?)?)?Z?');

    var digitstring = new RegExp("^[0-9]+", 'g');
    var interesting = new RegExp("[\\\\\\r\\n\\\"]", 'g');
    var langcode = new RegExp("^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*", 'g');
    function SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
        return new __SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why);
    }
    function __SinkParser(store, openFormula, thisDoc, baseURI, genPrefix, metaURI, flags, why) {
        if (typeof openFormula == 'undefined') openFormula = null;
        if (typeof thisDoc == 'undefined') thisDoc = "";
        if (typeof baseURI == 'undefined') baseURI = null;
        if (typeof genPrefix == 'undefined') genPrefix = "";
        if (typeof metaURI == 'undefined') metaURI = null;
        if (typeof flags == 'undefined') flags = "";
        if (typeof why == 'undefined') why = null;
        /*
        note: namespace names should *not* end in #;
        the # will get added during qname processing */

        this._bindings = new pyjslib_Dict([]);
        this._flags = flags;
        if (thisDoc != "") {
            assertFudge(thisDoc.indexOf(":") >= 0, "Document URI not absolute: " + thisDoc);
            this._bindings[""] = thisDoc + "#";
        }
        this._store = store;
        if (genPrefix) {
            store.setGenPrefix(genPrefix);
        }
        this._thisDoc = thisDoc;
        this.source = store.sym(thisDoc);
        this.lines = 0;
        this.statementCount = 0;
        this.startOfLine = 0;
        this.previousLine = 0;
        this._genPrefix = genPrefix;
        this.keywords = new pyjslib_List(["a", "this", "bind", "has", "is", "of", "true", "false"]);
        this.keywordsSet = 0;
        this._anonymousNodes = new pyjslib_Dict([]);
        this._variables = new pyjslib_Dict([]);
        this._parentVariables = new pyjslib_Dict([]);
        this._reason = why;
        this._reason2 = null;
        if (diag_tracking) {
            this._reason2 = why_BecauseOfData(store.sym(thisDoc), this._reason);
        }
        if (baseURI) {
            this._baseURI = baseURI;
        } else {
            if (thisDoc) {
                this._baseURI = thisDoc;
            } else {
                this._baseURI = null;
            }
        }
        assertFudge(!this._baseURI || this._baseURI.indexOf(":") >= 0);
        if (!this._genPrefix) {
            if (this._thisDoc) {
                this._genPrefix = this._thisDoc + "#_g";
            } else {
                this._genPrefix = RDFSink_uniqueURI();
            }
        }
        if (openFormula == null) {
            if (this._thisDoc) {
                this._formula = store.formula(thisDoc + "#_formula");
            } else {
                this._formula = store.formula();
            }
        } else {
            this._formula = openFormula;
        }
        this._context = this._formula;
        this._parentContext = null;
    }
    __SinkParser.prototype.here = function (i) {
        return this._genPrefix + "_L" + this.lines + "C" + (i - this.startOfLine + 1);
    };
    __SinkParser.prototype.formula = function () {
        return this._formula;
    };
    __SinkParser.prototype.loadStream = function (stream) {
        return this.loadBuf(stream.read());
    };
    __SinkParser.prototype.loadBuf = function (buf) {
        /*
        Parses a buffer and returns its top level formula*/

        this.startDoc();
        this.feed(buf);
        return this.endDoc();
    };
    __SinkParser.prototype.feed = function (octets) {
        /*
        Feed an octet stream tothe parser
         if BadSyntax is raised, the string
        passed in the exception object is the
        remainder after any statements have been parsed.
        So if there is more data to feed to the
        parser, it should be straightforward to recover.*/

        var str = octets.decode("utf-8");
        var i = 0;
        while (i >= 0) {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                return;
            }
            var i = this.directiveOrStatement(str, j);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected directive or statement");
            }
        }
    };
    __SinkParser.prototype.directiveOrStatement = function (str, h) {
        var i = this.skipSpace(str, h);
        if (i < 0) {
            return i;
        }
        var j = this.directive(str, i);
        if (j >= 0) {
            return this.checkDot(str, j);
        }
        var j = this.statement(str, i);
        if (j >= 0) {
            return this.checkDot(str, j);
        }
        return j;
    };
    __SinkParser.prototype.tok = function (tok, str, i) {
        /*
        Check for keyword.  Space must have been stripped on entry and
        we must not be at end of file.*/
        var whitespace = "\t\n\v\f\r ";
        if (pyjslib_slice(str, i, i + 1) == "@") {
            var i = i + 1;
        } else {
            if (ArrayIndexOf(this.keywords, tok) < 0) {
                return -1;
            }
        }
        var k = i + pyjslib_len(tok);
        if (pyjslib_slice(str, i, k) == tok && _notQNameChars.indexOf(str.charAt(k)) >= 0) {
            return k;
        } else {
            return -1;
        }
    };
    __SinkParser.prototype.directive = function (str, i) {
        var j = this.skipSpace(str, i);
        if (j < 0) {
            return j;
        }
        var res = new pyjslib_List([]);
        var j = this.tok("bind", str, i);
        if (j > 0) {
            throw BadSyntax(this._thisDoc, this.lines, str, i, "keyword bind is obsolete: use @prefix");
        }
        var j = this.tok("keywords", str, i);
        if (j > 0) {
            var i = this.commaSeparatedList(str, j, res, false);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "'@keywords' needs comma separated list of words");
            }
            this.setKeywords(pyjslib_slice(res, null, null));
            if (diag_chatty_flag > 80) {
                diag_progress("Keywords ", this.keywords);
            }
            return i;
        }
        var j = this.tok("forAll", str, i);
        if (j > 0) {
            var i = this.commaSeparatedList(str, j, res, true);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forAll");
            }

            var __x = new pyjslib_Iterator(res);
            try {
                while (true) {
                    var x = __x.next();

                    if (ArrayIndexOf(this._variables, x) < 0 || ArrayIndexOf(this._parentVariables, x) >= 0) {
                        this._variables[x] = this._context.newUniversal(x);
                    }
                }
            } catch (e) {
                if (e != StopIteration) {
                    throw e;
                }
            }

            return i;
        }
        var j = this.tok("forSome", str, i);
        if (j > 0) {
            var i = this.commaSeparatedList(str, j, res, this.uri_ref2);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad variable list after @forSome");
            }

            var __x = new pyjslib_Iterator(res);
            try {
                while (true) {
                    var x = __x.next();

                    this._context.declareExistential(x);
                }
            } catch (e) {
                if (e != StopIteration) {
                    throw e;
                }
            }

            return i;
        }
        var j = this.tok("prefix", str, i);
        if (j >= 0) {
            var t = new pyjslib_List([]);
            var i = this.qname(str, j, t);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected qname after @prefix");
            }
            var j = this.uri_ref2(str, i, t);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "expected <uriref> after @prefix _qname_");
            }
            var ns = t[1].uri;
            if (this._baseURI) {
                var ns = uripath_join(this._baseURI, ns);
            } else {
                assertFudge(ns.indexOf(":") >= 0, "With no base URI, cannot handle relative URI for NS");
            }
            assertFudge(ns.indexOf(":") >= 0);
            this._bindings[t[0][0]] = ns;

            this.bind(t[0][0], hexify(ns));
            return j;
        }
        var j = this.tok("base", str, i);
        if (j >= 0) {
            var t = new pyjslib_List([]);
            var i = this.uri_ref2(str, j, t);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <uri> after @base ");
            }
            var ns = t[0].uri;
            if (this._baseURI) {
                var ns = uripath_join(this._baseURI, ns);
            } else {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "With no previous base URI, cannot use relative URI in @base  <" + ns + ">");
            }
            assertFudge(ns.indexOf(":") >= 0);
            this._baseURI = ns;
            return i;
        }
        return -1;
    };
    __SinkParser.prototype.bind = function (qn, uri) {
        if (qn == "") {} else {
            this._store.setPrefixForURI(qn, uri);
        }
    };
    __SinkParser.prototype.setKeywords = function (k) {
        /*
        Takes a list of strings*/

        if (k == null) {
            this.keywordsSet = 0;
        } else {
            this.keywords = k;
            this.keywordsSet = 1;
        }
    };
    __SinkParser.prototype.startDoc = function () {};
    __SinkParser.prototype.endDoc = function () {
        /*
        Signal end of document and stop parsing. returns formula*/

        return this._formula;
    };
    __SinkParser.prototype.makeStatement = function (quad) {
        quad[0].add(quad[2], quad[1], quad[3], this.source);
        this.statementCount += 1;
    };
    __SinkParser.prototype.statement = function (str, i) {
        var r = new pyjslib_List([]);
        var i = this.object(str, i, r);
        if (i < 0) {
            return i;
        }
        var j = this.property_list(str, i, r[0]);
        if (j < 0) {
            throw BadSyntax(this._thisDoc, this.lines, str, i, "expected propertylist");
        }
        return j;
    };
    __SinkParser.prototype.subject = function (str, i, res) {
        return this.item(str, i, res);
    };
    __SinkParser.prototype.verb = function (str, i, res) {
        /*
        has _prop_
        is _prop_ of
        a
        =
        _prop_
        >- prop ->
        <- prop -<
        _operator_*/

        var j = this.skipSpace(str, i);
        if (j < 0) {
            return j;
        }
        var r = new pyjslib_List([]);
        var j = this.tok("has", str, i);
        if (j >= 0) {
            var i = this.prop(str, j, r);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected property after 'has'");
            }
            res.push(new pyjslib_Tuple(["->", r[0]]));
            return i;
        }
        var j = this.tok("is", str, i);
        if (j >= 0) {
            var i = this.prop(str, j, r);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "expected <property> after 'is'");
            }
            var j = this.skipSpace(str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "End of file found, expected property after 'is'");
                return j;
            }
            var i = j;
            var j = this.tok("of", str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "expected 'of' after 'is' <prop>");
            }
            res.push(new pyjslib_Tuple(["<-", r[0]]));
            return j;
        }
        var j = this.tok("a", str, i);
        if (j >= 0) {
            res.push(new pyjslib_Tuple(["->", this._store.sym(RDF_type_URI)]));
            return j;
        }
        if (pyjslib_slice(str, i, i + 2) == "<=") {
            res.push(new pyjslib_Tuple(["<-", this._store.sym(Logic_NS + "implies")]));
            return i + 2;
        }
        if (pyjslib_slice(str, i, i + 1) == "=") {
            if (pyjslib_slice(str, i + 1, i + 2) == ">") {
                res.push(new pyjslib_Tuple(["->", this._store.sym(Logic_NS + "implies")]));
                return i + 2;
            }
            res.push(new pyjslib_Tuple(["->", this._store.sym(DAML_sameAs_URI)]));
            return i + 1;
        }
        if (pyjslib_slice(str, i, i + 2) == ":=") {
            res.push(new pyjslib_Tuple(["->", Logic_NS + "becomes"]));
            return i + 2;
        }
        var j = this.prop(str, i, r);
        if (j >= 0) {
            res.push(new pyjslib_Tuple(["->", r[0]]));
            return j;
        }
        if (pyjslib_slice(str, i, i + 2) == ">-" || pyjslib_slice(str, i, i + 2) == "<-") {
            throw BadSyntax(this._thisDoc, this.lines, str, j, ">- ... -> syntax is obsolete.");
        }
        return -1;
    };
    __SinkParser.prototype.prop = function (str, i, res) {
        return this.item(str, i, res);
    };
    __SinkParser.prototype.item = function (str, i, res) {
        return this.path(str, i, res);
    };
    __SinkParser.prototype.blankNode = function (uri) {
        return this._context.bnode(uri, this._reason2);
    };
    __SinkParser.prototype.path = function (str, i, res) {
        /*
        Parse the path production.
        */

        var j = this.nodeOrLiteral(str, i, res);
        if (j < 0) {
            return j;
        }
        while ("!^.".indexOf(pyjslib_slice(str, j, j + 1)) >= 0) {
            var ch = pyjslib_slice(str, j, j + 1);
            if (ch == ".") {
                var ahead = pyjslib_slice(str, j + 1, j + 2);
                if (!ahead || _notNameChars.indexOf(ahead) >= 0 && ":?<[{(".indexOf(ahead) < 0) {
                    break;
                }
            }
            var subj = res.pop();
            var obj = this.blankNode(this.here(j));
            var j = this.node(str, j + 1, res);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in middle of path syntax");
            }
            var pred = res.pop();
            if (ch == "^") {
                this.makeStatement(new pyjslib_Tuple([this._context, pred, obj, subj]));
            } else {
                this.makeStatement(new pyjslib_Tuple([this._context, pred, subj, obj]));
            }
            res.push(obj);
        }
        return j;
    };
    __SinkParser.prototype.anonymousNode = function (ln) {
        /*
        Remember or generate a term for one of these _: anonymous nodes*/

        var term = this._anonymousNodes[ln];
        if (term) {
            return term;
        }
        var term = this._store.bnode(this._context, this._reason2);
        this._anonymousNodes[ln] = term;
        return term;
    };
    __SinkParser.prototype.node = function (str, i, res, subjectAlready) {
        if (typeof subjectAlready == 'undefined') subjectAlready = null;
        /*
        Parse the <node> production.
        Space is now skipped once at the beginning
        instead of in multipe calls to self.skipSpace().
        */

        var subj = subjectAlready;
        var j = this.skipSpace(str, i);
        if (j < 0) {
            return j;
        }
        var i = j;
        var ch = pyjslib_slice(str, i, i + 1);
        if (ch == "[") {
            var bnodeID = this.here(i);
            var j = this.skipSpace(str, i + 1);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF after '['");
            }
            if (pyjslib_slice(str, j, j + 1) == "=") {
                var i = j + 1;
                var objs = new pyjslib_List([]);
                var j = this.objectList(str, i, objs);

                if (j >= 0) {
                    var subj = objs[0];
                    if (pyjslib_len(objs) > 1) {

                        var __obj = new pyjslib_Iterator(objs);
                        try {
                            while (true) {
                                var obj = __obj.next();

                                this.makeStatement(new pyjslib_Tuple([this._context, this._store.sym(DAML_sameAs_URI), subj, obj]));
                            }
                        } catch (e) {
                            if (e != StopIteration) {
                                throw e;
                            }
                        }
                    }
                    var j = this.skipSpace(str, j);
                    if (j < 0) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when objectList expected after [ = ");
                    }
                    if (pyjslib_slice(str, j, j + 1) == ";") {
                        var j = j + 1;
                    }
                } else {
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "objectList expected after [= ");
                }
            }
            if (subj == null) {
                var subj = this.blankNode(bnodeID);
            }
            var i = this.property_list(str, j, subj);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "property_list expected");
            }
            var j = this.skipSpace(str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF when ']' expected after [ <propertyList>");
            }
            if (pyjslib_slice(str, j, j + 1) != "]") {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "']' expected");
            }
            res.push(subj);
            return j + 1;
        }
        if (ch == "{") {
            var ch2 = pyjslib_slice(str, i + 1, i + 2);
            if (ch2 == "$") {
                i += 1;
                var j = i + 1;
                var mylist = new pyjslib_List([]);
                var first_run = true;
                while (1) {
                    var i = this.skipSpace(str, j);
                    if (i < 0) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '$}', found end.");
                    }
                    if (pyjslib_slice(str, i, i + 2) == "$}") {
                        var j = i + 2;
                        break;
                    }
                    if (!first_run) {
                        if (pyjslib_slice(str, i, i + 1) == ",") {
                            i += 1;
                        } else {
                            throw BadSyntax(this._thisDoc, this.lines, str, i, "expected: ','");
                        }
                    } else {
                        var first_run = false;
                    }
                    var item = new pyjslib_List([]);
                    var j = this.item(str, i, item);
                    if (j < 0) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in set or '$}'");
                    }
                    mylist.push(item[0]);
                }
                res.push(this._store.newSet(mylist, this._context));
                return j;
            } else {
                var j = i + 1;
                var oldParentContext = this._parentContext;
                this._parentContext = this._context;
                var parentAnonymousNodes = this._anonymousNodes;
                var grandParentVariables = this._parentVariables;
                this._parentVariables = this._variables;
                this._anonymousNodes = new pyjslib_Dict([]);
                this._variables = this._variables.slice();
                var reason2 = this._reason2;
                this._reason2 = becauseSubexpression;
                if (subj == null) {
                    var subj = this._store.formula();
                }
                this._context = subj;
                while (1) {
                    var i = this.skipSpace(str, j);
                    if (i < 0) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "needed '}', found end.");
                    }
                    if (pyjslib_slice(str, i, i + 1) == "}") {
                        var j = i + 1;
                        break;
                    }
                    var j = this.directiveOrStatement(str, i);
                    if (j < 0) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "expected statement or '}'");
                    }
                }
                this._anonymousNodes = parentAnonymousNodes;
                this._variables = this._parentVariables;
                this._parentVariables = grandParentVariables;
                this._context = this._parentContext;
                this._reason2 = reason2;
                this._parentContext = oldParentContext;
                res.push(subj.close());
                return j;
            }
        }
        if (ch == "(") {
            var thing_type = this._store.list;
            var ch2 = pyjslib_slice(str, i + 1, i + 2);
            if (ch2 == "$") {
                var thing_type = this._store.newSet;
                i += 1;
            }
            var j = i + 1;
            var mylist = new pyjslib_List([]);
            while (1) {
                var i = this.skipSpace(str, j);
                if (i < 0) {
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "needed ')', found end.");
                }
                if (pyjslib_slice(str, i, i + 1) == ")") {
                    var j = i + 1;
                    break;
                }
                var item = new pyjslib_List([]);
                var j = this.item(str, i, item);
                if (j < 0) {
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "expected item in list or ')'");
                }
                mylist.push(item[0]);
            }
            res.push(thing_type(mylist, this._context));
            return j;
        }
        var j = this.tok("this", str, i);
        if (j >= 0) {
            throw BadSyntax(this._thisDoc, this.lines, str, i, "Keyword 'this' was ancient N3. Now use @forSome and @forAll keywords.");
            res.push(this._context);
            return j;
        }
        var j = this.tok("true", str, i);
        if (j >= 0) {
            res.push(true);
            return j;
        }
        var j = this.tok("false", str, i);
        if (j >= 0) {
            res.push(false);
            return j;
        }
        if (subj == null) {
            var j = this.uri_ref2(str, i, res);
            if (j >= 0) {
                return j;
            }
        }
        return -1;
    };
    __SinkParser.prototype.property_list = function (str, i, subj) {
        /*
        Parse property list
        Leaves the terminating punctuation in the buffer
        */

        while (1) {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found when expected verb in property list");
                return j;
            }
            if (pyjslib_slice(str, j, j + 2) == ":-") {
                var i = j + 2;
                var res = new pyjslib_List([]);
                var j = this.node(str, i, res, subj);
                if (j < 0) {
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "bad {} or () or [] node after :- ");
                }
                var i = j;
                continue;
            }
            var i = j;
            var v = new pyjslib_List([]);
            var j = this.verb(str, i, v);
            if (j <= 0) {
                return i;
            }
            var objs = new pyjslib_List([]);
            var i = this.objectList(str, j, objs);
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "objectList expected");
            }

            var __obj = new pyjslib_Iterator(objs);
            try {
                while (true) {
                    var obj = __obj.next();

                    var pairFudge = v[0];
                    var dir = pairFudge[0];
                    var sym = pairFudge[1];
                    if (dir == "->") {
                        this.makeStatement(new pyjslib_Tuple([this._context, sym, subj, obj]));
                    } else {
                        this.makeStatement(new pyjslib_Tuple([this._context, sym, obj, subj]));
                    }
                }
            } catch (e) {
                if (e != StopIteration) {
                    throw e;
                }
            }

            var j = this.skipSpace(str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found in list of objects");
                return j;
            }
            if (pyjslib_slice(str, i, i + 1) != ";") {
                return i;
            }
            var i = i + 1;
        }
    };
    __SinkParser.prototype.commaSeparatedList = function (str, j, res, ofUris) {
        /*
        return value: -1 bad syntax; >1 new position in str
        res has things found appended
         Used to use a final value of the function to be called, e.g. this.bareWord
        but passing the function didn't work fo js converion pyjs
        */

        var i = this.skipSpace(str, j);
        if (i < 0) {
            throw BadSyntax(this._thisDoc, this.lines, str, i, "EOF found expecting comma sep list");
            return i;
        }
        if (str.charAt(i) == ".") {
            return j;
        }
        if (ofUris) {
            var i = this.uri_ref2(str, i, res);
        } else {
            var i = this.bareWord(str, i, res);
        }
        if (i < 0) {
            return -1;
        }
        while (1) {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                return j;
            }
            var ch = pyjslib_slice(str, j, j + 1);
            if (ch != ",") {
                if (ch != ".") {
                    return -1;
                }
                return j;
            }
            if (ofUris) {
                var i = this.uri_ref2(str, j + 1, res);
            } else {
                var i = this.bareWord(str, j + 1, res);
            }
            if (i < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "bad list content");
                return i;
            }
        }
    };
    __SinkParser.prototype.objectList = function (str, i, res) {
        var i = this.object(str, i, res);
        if (i < 0) {
            return -1;
        }
        while (1) {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, j, "EOF found after object");
                return j;
            }
            if (pyjslib_slice(str, j, j + 1) != ",") {
                return j;
            }
            var i = this.object(str, j + 1, res);
            if (i < 0) {
                return i;
            }
        }
    };
    __SinkParser.prototype.checkDot = function (str, i) {
        var j = this.skipSpace(str, i);
        if (j < 0) {
            return j;
        }
        if (pyjslib_slice(str, j, j + 1) == ".") {
            return j + 1;
        }
        if (pyjslib_slice(str, j, j + 1) == "}") {
            return j;
        }
        if (pyjslib_slice(str, j, j + 1) == "]") {
            return j;
        }
        throw BadSyntax(this._thisDoc, this.lines, str, j, "expected '.' or '}' or ']' at end of statement");
        return i;
    };
    __SinkParser.prototype.uri_ref2 = function (str, i, res) {
        /*
        Generate uri from n3 representation.
         Note that the RDF convention of directly concatenating
        NS and local name is now used though I prefer inserting a '#'
        to make the namesapces look more like what XML folks expect.
        */

        var qn = new pyjslib_List([]);
        var j = this.qname(str, i, qn);
        if (j >= 0) {
            var pairFudge = qn[0];
            var pfx = pairFudge[0];
            var ln = pairFudge[1];
            if (pfx == null) {
                assertFudge(0, "not used?");
                var ns = this._baseURI + ADDED_HASH;
            } else {
                var ns = this._bindings[pfx];
                if (!ns) {
                    if (pfx == "_") {
                        res.push(this.anonymousNode(ln));
                        return j;
                    }
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "Prefix " + pfx + " not bound.");
                }
            }
            var symb = this._store.sym(ns + ln);
            if (ArrayIndexOf(this._variables, symb) >= 0) {
                res.push(this._variables[symb]);
            } else {
                res.push(symb);
            }
            return j;
        }
        var i = this.skipSpace(str, i);
        if (i < 0) {
            return -1;
        }
        if (str.charAt(i) == "?") {
            var v = new pyjslib_List([]);
            var j = this.variable(str, i, v);
            if (j > 0) {
                res.push(v[0]);
                return j;
            }
            return -1;
        } else if (str.charAt(i) == "<") {
            var i = i + 1;
            var st = i;
            while (i < pyjslib_len(str)) {
                if (str.charAt(i) == ">") {
                    var uref = pyjslib_slice(str, st, i);
                    if (this._baseURI) {
                        var uref = uripath_join(this._baseURI, uref);
                    } else {
                        assertFudge(uref.indexOf(":") >= 0, "With no base URI, cannot deal with relative URIs");
                    }
                    if (pyjslib_slice(str, i - 1, i) == "#" && !(pyjslib_slice(uref, -1, null) == "#")) {
                        var uref = uref + "#";
                    }
                    var symb = this._store.sym(uref);
                    if (ArrayIndexOf(this._variables, symb) >= 0) {
                        res.push(this._variables[symb]);
                    } else {
                        res.push(symb);
                    }
                    return i + 1;
                }
                var i = i + 1;
            }
            throw BadSyntax(this._thisDoc, this.lines, str, j, "unterminated URI reference");
        } else if (this.keywordsSet) {
            var v = new pyjslib_List([]);
            var j = this.bareWord(str, i, v);
            if (j < 0) {
                return -1;
            }
            if (ArrayIndexOf(this.keywords, v[0]) >= 0) {
                throw BadSyntax(this._thisDoc, this.lines, str, i, "Keyword \"" + v[0] + "\" not allowed here.");
            }
            res.push(this._store.sym(this._bindings[""] + v[0]));
            return j;
        } else {
            return -1;
        }
    };
    __SinkParser.prototype.skipSpace = function (str, i) {
        /*
        Skip white space, newlines and comments.
        return -1 if EOF, else position of first non-ws character*/

        var whitespace = ' \n\r\t\f\x0B\xA0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u200B\u2028\u2029\u3000';
        for (var j = i ? i : 0; j < str.length; j++) {
            var ch = str.charAt(j);
            // console.log("    skipspace j= "+j + " i= " + i + " n= " + str.length);
            // console.log(" skipspace ch <" + ch + ">");
            if (whitespace.indexOf(ch) < 0) {
                //not ws
                // console.log(" skipspace 2 ch <" + ch + ">");
                if (str.charAt(j) === '#') {
                    for (;; j++) {
                        // console.log("    skipspace2 j= "+j + " i= " + i + " n= " + str.length);
                        if (j === str.length) {
                            return -1; // EOF
                        }
                        if (str.charAt(j) === '\n') {
                            this.lines = this.lines + 1;
                            break;
                        }
                    };
                } else {
                    // Not hash - something interesting
                    // console.log(" skipspace 3 ch <" + ch + ">");
                    return j;
                }
            } else {
                // Whitespace
                // console.log(" skipspace 5 ch <" + ch + ">");
                if (str.charAt(j) === '\n') {
                    this.lines = this.lines + 1;
                }
            }
        } // next j
        return -1; // EOF
    };

    __SinkParser.prototype.variable = function (str, i, res) {
        /*
        ?abc -> variable(:abc)
        */

        var j = this.skipSpace(str, i);
        if (j < 0) {
            return -1;
        }
        if (pyjslib_slice(str, j, j + 1) != "?") {
            return -1;
        }
        var j = j + 1;
        var i = j;
        if ("0123456789-".indexOf(str.charAt(j)) >= 0) {
            throw BadSyntax(this._thisDoc, this.lines, str, j, "Varible name can't start with '" + str.charAt(j) + "s'");
            return -1;
        }
        while (i < pyjslib_len(str) && _notNameChars.indexOf(str.charAt(i)) < 0) {
            var i = i + 1;
        }
        if (this._parentContext == null) {
            throw BadSyntax(this._thisDoc, this.lines, str, j, "Can't use ?xxx syntax for variable in outermost level: " + pyjslib_slice(str, j - 1, i));
        }
        res.push(this._store.variable(pyjslib_slice(str, j, i)));
        return i;
    };
    __SinkParser.prototype.bareWord = function (str, i, res) {
        /*
        abc -> :abc
        */

        var j = this.skipSpace(str, i);
        if (j < 0) {
            return -1;
        }
        var ch = str.charAt(j);
        if ("0123456789-".indexOf(ch) >= 0) {
            return -1;
        }
        if (_notNameChars.indexOf(ch) >= 0) {
            return -1;
        }
        var i = j;
        while (i < pyjslib_len(str) && _notNameChars.indexOf(str.charAt(i)) < 0) {
            var i = i + 1;
        }
        res.push(pyjslib_slice(str, j, i));
        return i;
    };
    __SinkParser.prototype.qname = function (str, i, res) {
        /*
         xyz:def -> ('xyz', 'def')
        If not in keywords and keywordsSet: def -> ('', 'def')
        :def -> ('', 'def')
        */

        var i = this.skipSpace(str, i);
        if (i < 0) {
            return -1;
        }
        var c = str.charAt(i);
        if ("0123456789-+".indexOf(c) >= 0) {
            return -1;
        }
        if (_notNameChars.indexOf(c) < 0) {
            var ln = c;
            var i = i + 1;
            while (i < pyjslib_len(str)) {
                var c = str.charAt(i);
                if (_notNameChars.indexOf(c) < 0) {
                    var ln = ln + c;
                    var i = i + 1;
                } else {
                    break;
                }
            }
        } else {
            var ln = "";
        }
        if (i < pyjslib_len(str) && str.charAt(i) == ":") {
            var pfx = ln;
            var i = i + 1;
            var ln = "";
            while (i < pyjslib_len(str)) {
                var c = str.charAt(i);
                if (_notNameChars.indexOf(c) < 0) {
                    var ln = ln + c;
                    var i = i + 1;
                } else {
                    break;
                }
            }
            res.push(new pyjslib_Tuple([pfx, ln]));
            return i;
        } else {
            if (ln && this.keywordsSet && ArrayIndexOf(this.keywords, ln) < 0) {
                res.push(new pyjslib_Tuple(["", ln]));
                return i;
            }
            return -1;
        }
    };
    __SinkParser.prototype.object = function (str, i, res) {
        var j = this.subject(str, i, res);
        if (j >= 0) {
            return j;
        } else {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                return -1;
            } else {
                var i = j;
            }
            if (str.charAt(i) == "\"") {
                if (pyjslib_slice(str, i, i + 3) == "\"\"\"") {
                    var delim = "\"\"\"";
                } else {
                    var delim = "\"";
                }
                var i = i + pyjslib_len(delim);
                var pairFudge = this.strconst(str, i, delim);
                var j = pairFudge[0];
                var s = pairFudge[1];
                res.push(this._store.literal(s));
                diag_progress("New string const ", s, j);
                return j;
            } else {
                return -1;
            }
        }
    };
    __SinkParser.prototype.nodeOrLiteral = function (str, i, res) {
        var j = this.node(str, i, res);
        if (j >= 0) {
            return j;
        } else {
            var j = this.skipSpace(str, i);
            if (j < 0) {
                return -1;
            } else {
                var i = j;
            }
            var ch = str.charAt(i);
            if ("-+0987654321".indexOf(ch) >= 0) {

                datetime_syntax.lastIndex = 0;
                var m = datetime_syntax.exec(str.slice(i));
                if (m != null) {
                    // j =  ( i + datetime_syntax.lastIndex ) ;
                    var val = m[0];
                    j = i + val.length;
                    if (val.indexOf("T") >= 0) {
                        res.push(this._store.literal(val, undefined, this._store.sym(DATETIME_DATATYPE)));
                    } else {
                        res.push(this._store.literal(val, undefined, this._store.sym(DATE_DATATYPE)));
                    }
                } else {
                    number_syntax.lastIndex = 0;
                    var m = number_syntax.exec(str.slice(i));
                    if (m == null) {
                        throw BadSyntax(this._thisDoc, this.lines, str, i, "Bad number or date syntax");
                    }
                    j = i + number_syntax.lastIndex;
                    var val = pyjslib_slice(str, i, j);
                    if (val.indexOf("e") >= 0) {
                        res.push(this._store.literal(parseFloat(val), undefined, this._store.sym(FLOAT_DATATYPE)));
                    } else if (pyjslib_slice(str, i, j).indexOf(".") >= 0) {
                        res.push(this._store.literal(parseFloat(val), undefined, this._store.sym(DECIMAL_DATATYPE)));
                    } else {
                        res.push(this._store.literal(parseInt(val), undefined, this._store.sym(INTEGER_DATATYPE)));
                    }
                };
                return j; // Where we have got up to
            }
            if (str.charAt(i) == "\"") {
                if (pyjslib_slice(str, i, i + 3) == "\"\"\"") {
                    var delim = "\"\"\"";
                } else {
                    var delim = "\"";
                }
                var i = i + pyjslib_len(delim);
                var dt = null;
                var pairFudge = this.strconst(str, i, delim);
                var j = pairFudge[0];
                var s = pairFudge[1];
                var lang = null;
                if (pyjslib_slice(str, j, j + 1) == "@") {
                    langcode.lastIndex = 0;

                    var m = langcode.exec(str.slice(j + 1));
                    if (m == null) {
                        throw BadSyntax(this._thisDoc, startline, str, i, "Bad language code syntax on string literal, after @");
                    }
                    var i = langcode.lastIndex + j + 1;

                    var lang = pyjslib_slice(str, j + 1, i);
                    var j = i;
                }
                if (pyjslib_slice(str, j, j + 2) == "^^") {
                    var res2 = new pyjslib_List([]);
                    var j = this.uri_ref2(str, j + 2, res2);
                    var dt = res2[0];
                }
                res.push(this._store.literal(s, lang, dt));
                return j;
            } else {
                return -1;
            }
        }
    };
    __SinkParser.prototype.strconst = function (str, i, delim) {
        /*
        parse an N3 string constant delimited by delim.
        return index, val
        */

        var j = i;
        var ustr = "";
        var startline = this.lines;
        while (j < pyjslib_len(str)) {
            var i = j + pyjslib_len(delim);
            if (pyjslib_slice(str, j, i) == delim) {
                return new pyjslib_Tuple([i, ustr]);
            }
            if (str.charAt(j) == "\"") {
                var ustr = ustr + "\"";
                var j = j + 1;
                continue;
            }
            interesting.lastIndex = 0;
            var m = interesting.exec(str.slice(j));
            if (!m) {
                throw BadSyntax(this._thisDoc, startline, str, j, "Closing quote missing in string at ^ in " + pyjslib_slice(str, j - 20, j) + "^" + pyjslib_slice(str, j, j + 20));
            }
            var i = j + interesting.lastIndex - 1;
            var ustr = ustr + pyjslib_slice(str, j, i);
            var ch = str.charAt(i);
            if (ch == "\"") {
                var j = i;
                continue;
            } else if (ch == "\r") {
                var j = i + 1;
                continue;
            } else if (ch == "\n") {
                if (delim == "\"") {
                    throw BadSyntax(this._thisDoc, startline, str, i, "newline found in string literal");
                }
                this.lines = this.lines + 1;
                var ustr = ustr + ch;
                var j = i + 1;
                this.previousLine = this.startOfLine;
                this.startOfLine = j;
            } else if (ch == "\\") {
                var j = i + 1;
                var ch = pyjslib_slice(str, j, j + 1);
                if (!ch) {
                    throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal (2)");
                }
                var k = string_find("abfrtvn\\\"", ch);
                if (k >= 0) {
                    var uch = "\a\b\f\r\t\v\n\\\"".charAt(k);
                    var ustr = ustr + uch;
                    var j = j + 1;
                } else if (ch == "u") {
                    var pairFudge = this.uEscape(str, j + 1, startline);
                    var j = pairFudge[0];
                    var ch = pairFudge[1];
                    var ustr = ustr + ch;
                } else if (ch == "U") {
                    var pairFudge = this.UEscape(str, j + 1, startline);
                    var j = pairFudge[0];
                    var ch = pairFudge[1];
                    var ustr = ustr + ch;
                } else {
                    throw BadSyntax(this._thisDoc, this.lines, str, i, "bad escape");
                }
            }
        }
        throw BadSyntax(this._thisDoc, this.lines, str, i, "unterminated string literal");
    };
    __SinkParser.prototype.uEscape = function (str, i, startline) {
        var j = i;
        var count = 0;
        var value = 0;
        while (count < 4) {
            var chFudge = pyjslib_slice(str, j, j + 1);
            var ch = chFudge.toLowerCase();
            var j = j + 1;
            if (ch == "") {
                throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
            }
            var k = string_find("0123456789abcdef", ch);
            if (k < 0) {
                throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
            }
            var value = value * 16 + k;
            var count = count + 1;
        }
        var uch = String.fromCharCode(value);
        return new pyjslib_Tuple([j, uch]);
    };
    __SinkParser.prototype.UEscape = function (str, i, startline) {
        var j = i;
        var count = 0;
        var value = '\\U';
        while (count < 8) {
            var chFudge = pyjslib_slice(str, j, j + 1);
            var ch = chFudge.toLowerCase();
            var j = j + 1;
            if (ch == "") {
                throw BadSyntax(this._thisDoc, startline, str, i, "unterminated string literal(3)");
            }
            var k = string_find("0123456789abcdef", ch);
            if (k < 0) {
                throw BadSyntax(this._thisDoc, startline, str, i, "bad string literal hex escape");
            }
            var value = value + ch;
            var count = count + 1;
        }
        var uch = stringFromCharCode("0x" + pyjslib_slice(value, 2, 10) - 0);
        return new pyjslib_Tuple([j, uch]);
    };
    function OLD_BadSyntax(uri, lines, str, i, why) {
        return new __OLD_BadSyntax(uri, lines, str, i, why);
    }
    function __OLD_BadSyntax(uri, lines, str, i, why) {
        this._str = str.encode("utf-8");
        this._str = str;
        this._i = i;
        this._why = why;
        this.lines = lines;
        this._uri = uri;
    }
    __OLD_BadSyntax.prototype.toString = function () {
        var str = this._str;
        var i = this._i;
        var st = 0;
        if (i > 60) {
            var pre = "...";
            var st = i - 60;
        } else {
            var pre = "";
        }
        if (pyjslib_len(str) - i > 60) {
            var post = "...";
        } else {
            var post = "";
        }
        return "Line %i of <%s>: Bad syntax (%s) at ^ in:\n\"%s%s^%s%s\"" % new pyjslib_Tuple([this.lines + 1, this._uri, this._why, pre, pyjslib_slice(str, st, i), pyjslib_slice(str, i, i + 60), post]);
    };
    function BadSyntax(uri, lines, str, i, why) {
        return "Line " + (lines + 1) + " of <" + uri + ">: Bad syntax: " + why + "\nat: \"" + pyjslib_slice(str, i, i + 30) + "\"";
    }

    function stripCR(str) {
        var res = "";

        var __ch = new pyjslib_Iterator(str);
        try {
            while (true) {
                var ch = __ch.next();

                if (ch != "\r") {
                    var res = res + ch;
                }
            }
        } catch (e) {
            if (e != StopIteration) {
                throw e;
            }
        }

        return res;
    }

    function dummyWrite(x) {}

    return SinkParser;
}();

module.exports = N3Parser;
},{"./uri":108,"./util":109}],93:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassOrder = _dereq_('./class-order');
var Node = _dereq_('./node');

/**
 * @class NamedNode
 * @extends Node
 */

var NamedNode = function (_Node) {
  _inherits(NamedNode, _Node);

  /**
   * @constructor
   * @param iri {String}
   */
  function NamedNode(iri) {
    _classCallCheck(this, NamedNode);

    var _this = _possibleConstructorReturn(this, (NamedNode.__proto__ || Object.getPrototypeOf(NamedNode)).call(this));

    _this.termType = NamedNode.termType;
    if (!iri.includes(':')) {
      throw new Error('NamedNode IRI "' + iri + '" must be absolute.');
    }
    if (iri.includes(' ')) {
      var message = 'Error: NamedNode IRI "' + iri + '" must not contain unencoded spaces.';
      throw new Error(message);
    }
    _this.value = iri;
    return _this;
  }
  /**
   * Returns an $rdf node for the containing directory, ending in slash.
   */


  _createClass(NamedNode, [{
    key: 'dir',
    value: function dir() {
      var str = this.uri.split('#')[0];
      var p = str.slice(0, -1).lastIndexOf('/');
      var q = str.indexOf('//');
      if (q >= 0 && p < q + 2 || p < 0) return null;
      return new NamedNode(str.slice(0, p + 1));
    }
    /**
     * Returns an NN for the whole web site, ending in slash.
     * Contrast with the "origin" which does NOT have a trailing slash
     */

  }, {
    key: 'site',
    value: function site() {
      var str = this.uri.split('#')[0];
      var p = str.indexOf('//');
      if (p < 0) throw new Error('This URI does not have a web site part (origin)');
      var q = str.indexOf('/', p + 2);
      if (q < 0) throw new Error('This URI does not have a web site part. (origin)');
      return new NamedNode(str.slice(0, q + 1));
    }
  }, {
    key: 'doc',
    value: function doc() {
      if (this.uri.indexOf('#') < 0) {
        return this;
      } else {
        return new NamedNode(this.uri.split('#')[0]);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '<' + this.uri + '>';
    }

    /**
     * Legacy getter and setter alias, node.uri
     */

  }, {
    key: 'uri',
    get: function get() {
      return this.value;
    },
    set: function set(uri) {
      this.value = uri;
    }
  }], [{
    key: 'fromValue',
    value: function fromValue(value) {
      if (typeof value === 'undefined' || value === null) {
        return value;
      }
      var isNode = value && value.termType;
      if (isNode) {
        return value;
      }
      return new NamedNode(value);
    }
  }]);

  return NamedNode;
}(Node);

NamedNode.termType = 'NamedNode';
NamedNode.prototype.classOrder = ClassOrder['NamedNode'];
NamedNode.prototype.isVar = 0;

module.exports = NamedNode;
},{"./class-order":79,"./node":95}],94:[function(_dereq_,module,exports){
'use strict';

var NamedNode = _dereq_('./named-node');

function Namespace(nsuri) {
  return function (ln) {
    return new NamedNode(nsuri + (ln || ''));
  };
}

module.exports = Namespace;
},{"./named-node":93}],95:[function(_dereq_,module,exports){
'use strict';
/**
 * The superclass of all RDF Statement objects, that is
 * NamedNode, Literal, BlankNode, etc.
 * @class Node
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = function () {
  function Node() {
    _classCallCheck(this, Node);
  }

  _createClass(Node, [{
    key: 'substitute',
    value: function substitute(bindings) {
      console.log('@@@ node substitute' + this);
      return this;
    }
  }, {
    key: 'compareTerm',
    value: function compareTerm(other) {
      if (this.classOrder < other.classOrder) {
        return -1;
      }
      if (this.classOrder > other.classOrder) {
        return +1;
      }
      if (this.value < other.value) {
        return -1;
      }
      if (this.value > other.value) {
        return +1;
      }
      return 0;
    }
  }, {
    key: 'equals',
    value: function equals(other) {
      if (!other) {
        return false;
      }
      return this.termType === other.termType && this.value === other.value;
    }
  }, {
    key: 'hashString',
    value: function hashString() {
      return this.toCanonical();
    }
  }, {
    key: 'sameTerm',
    value: function sameTerm(other) {
      return this.equals(other);
    }
  }, {
    key: 'toCanonical',
    value: function toCanonical() {
      return this.toNT();
    }
  }, {
    key: 'toNT',
    value: function toNT() {
      return this.toString();
    }
  }, {
    key: 'toString',
    value: function toString() {
      throw new Error('Node.toString() is abstract - see the subclasses instead');
    }
  }]);

  return Node;
}();

module.exports = Node;

/**
 * Creates an RDF Node from a native javascript value.
 * RDF Nodes are returned unchanged, undefined returned as itself.
 * @method fromValue
 * @static
 * @param value {Node|Date|String|Number|Boolean|Undefined}
 * @return {Node|Collection}
 */
Node.fromValue = function fromValue(value) {
  var Collection = _dereq_('./collection');
  var Literal = _dereq_('./literal');
  var NamedNode = _dereq_('./named-node');
  if (typeof value === 'undefined' || value === null) {
    return value;
  }
  var isNode = value && value.termType;
  if (isNode) {
    // a Node subclass or a Collection
    return value;
  }
  if (Array.isArray(value)) {
    return new Collection(value);
  }
  return Literal.fromValue(value);
};
},{"./collection":80,"./literal":90,"./named-node":93}],96:[function(_dereq_,module,exports){
'use strict';

module.exports = parse;

var BlankNode = _dereq_('./blank-node');
var jsonld = _dereq_('jsonld');
var Literal = _dereq_('./literal');
var N3 = _dereq_('n3'); // @@ Goal: remove this dependency
var N3Parser = _dereq_('./n3parser');
var NamedNode = _dereq_('./named-node');
var parseRDFaDOM = _dereq_('./rdfaparser').parseRDFaDOM;
var RDFParser = _dereq_('./rdfxmlparser');
var sparqlUpdateParser = _dereq_('./patch-parser');
var Util = _dereq_('./util');

/**
 * Parse a string and put the result into the graph kb.
 * Normal method is sync.
 * Unfortunately jsdonld is currently written to need to be called async.
 * Hence the mess below with executeCallback.
 */
function parse(str, kb, base, contentType, callback) {
  contentType = contentType || 'text/turtle';
  try {
    if (contentType === 'text/n3' || contentType === 'text/turtle') {
      var p = N3Parser(kb, kb, base, base, null, null, '', null);
      p.loadBuf(str);
      executeCallback();
    } else if (contentType === 'application/rdf+xml') {
      var parser = new RDFParser(kb);
      parser.parse(Util.parseXML(str), base, kb.sym(base));
      executeCallback();
    } else if (contentType === 'application/xhtml+xml') {
      parseRDFaDOM(Util.parseXML(str, { contentType: 'application/xhtml+xml' }), kb, base);
      executeCallback();
    } else if (contentType === 'text/html') {
      parseRDFaDOM(Util.parseXML(str, { contentType: 'text/html' }), kb, base);
      executeCallback();
    } else if (contentType === 'application/sparql-update') {
      // @@ we handle a subset
      sparqlUpdateParser(str, kb, base);
      executeCallback();
    } else if (contentType === 'application/ld+json' || contentType === 'application/nquads' || contentType === 'application/n-quads') {
      var n3Parser = N3.Parser();
      var triples = [];
      if (contentType === 'application/ld+json') {
        var jsonDocument;
        try {
          jsonDocument = JSON.parse(str);
        } catch (parseErr) {
          callback(parseErr, null);
        }
        jsonld.toRDF(jsonDocument, { format: 'application/nquads' }, nquadCallback);
      } else {
        nquadCallback(null, str);
      }
    } else {
      throw new Error("Don't know how to parse " + contentType + ' yet');
    }
  } catch (e) {
    executeErrorCallback(e);
  }

  function executeCallback() {
    if (callback) {
      callback(null, kb);
    } else {
      return;
    }
  }

  function executeErrorCallback(e) {
    if (contentType !== 'application/ld+json' || contentType !== 'application/nquads' || contentType !== 'application/n-quads') {
      if (callback) {
        callback(e, kb);
      } else {
        throw new Error('Error trying to parse <' + base + '> as ' + contentType + ':\n' + e + ':\n' + e.stack);
      }
    }
  }
  /*
    function setJsonLdBase (doc, base) {
      if (doc instanceof Array) {
        return
      }
      if (!('@context' in doc)) {
        doc['@context'] = {}
      }
      doc['@context']['@base'] = base
    }
  */
  function nquadCallback(err, nquads) {
    if (err) {
      callback(err, kb);
    }
    try {
      n3Parser.parse(nquads, tripleCallback);
    } catch (err) {
      callback(err, kb);
    }
  }

  function tripleCallback(err, triple, prefixes) {
    if (err) {
      callback(err, kb);
    }
    if (triple) {
      triples.push(triple);
    } else {
      for (var i = 0; i < triples.length; i++) {
        addTriple(kb, triples[i]);
      }
      callback(null, kb);
    }
  }

  function addTriple(kb, triple) {
    var subject = createTerm(triple.subject);
    var predicate = createTerm(triple.predicate);
    var object = createTerm(triple.object);
    var why = null;
    if (triple.graph) {
      why = createTerm(triple.graph);
    }
    kb.add(subject, predicate, object, why);
  }

  function createTerm(termString) {
    var value;
    if (N3.Util.isLiteral(termString)) {
      value = N3.Util.getLiteralValue(termString);
      var language = N3.Util.getLiteralLanguage(termString);
      var datatype = new NamedNode(N3.Util.getLiteralType(termString));
      return new Literal(value, language, datatype);
    } else if (N3.Util.isIRI(termString)) {
      return new NamedNode(termString);
    } else if (N3.Util.isBlank(termString)) {
      value = termString.substring(2, termString.length);
      return new BlankNode(value);
    } else {
      return null;
    }
  }
}
},{"./blank-node":78,"./literal":90,"./n3parser":92,"./named-node":93,"./patch-parser":97,"./rdfaparser":100,"./rdfxmlparser":101,"./util":109,"jsonld":69,"n3":112}],97:[function(_dereq_,module,exports){
'use strict';

// Parse a simple SPARL-Update subset syntax for patches.
//
//  This parses
//   WHERE {xxx} DELETE {yyy} INSERT DATA {zzz}
// (not necessarily in that order)
// as though it were the n3
//   <#query> patch:where {xxx}; patch:delete {yyy}; patch:insert {zzz}.
module.exports = sparqlUpdateParser;

var N3Parser = _dereq_('./n3parser');
var Namespace = _dereq_('./namespace');

function sparqlUpdateParser(str, kb, base) {
  var i, j, k;
  var keywords = ['INSERT', 'DELETE', 'WHERE'];
  var SQNS = Namespace('http://www.w3.org/ns/pim/patch#');
  var p = N3Parser(kb, kb, base, base, null, null, '', null);
  var clauses = {};

  var badSyntax = function badSyntax(uri, lines, str, i, why) {
    return 'Line ' + (lines + 1) + ' of <' + uri + '>: Bad syntax:\n   ' + why + '\n   at: "' + str.slice(i, i + 30) + '"';
  };

  // var check = function (next, last, message) {
  //   if (next < 0) {
  //     throw badSyntax(p._thisDoc, p.lines, str, j, last, message)
  //   }
  //   return next
  // }
  i = 0;
  var query = kb.sym(base + '#query'); // Invent a URI for the query
  clauses['query'] = query; // A way of accessing it in its N3 model.

  while (true) {
    // console.log("A Now at i = " + i)
    j = p.skipSpace(str, i);
    if (j < 0) {
      return clauses;
    }
    // console.log("B After space at j= " + j)
    if (str[j] === ';') {
      i = p.skipSpace(str, j + 1);
      if (i < 0) {
        return clauses; // Allow end in a
      }
      j = i;
    }
    var found = false;
    for (k = 0; k < keywords.length; k++) {
      var key = keywords[k];
      if (str.slice(j, j + key.length) === key) {
        i = p.skipSpace(str, j + key.length);
        if (i < 0) {
          throw badSyntax(p._thisDoc, p.lines, str, j + key.length, 'found EOF, needed {...} after ' + key);
        }
        if ((key === 'INSERT' || key === 'DELETE') && str.slice(i, i + 4) === 'DATA') {
          // Some wanted 'DATA'. Whatever
          j = p.skipSpace(str, i + 4);
          if (j < 0) {
            throw badSyntax(p._thisDoc, p.lines, str, i + 4, 'needed {...} after INSERT DATA ' + key);
          }
          i = j;
        }
        var res2 = [];
        j = p.node(str, i, res2); // Parse all the complexity of the clause

        if (j < 0) {
          throw badSyntax(p._thisDoc, p.lines, str, i, 'bad syntax or EOF in {...} after ' + key);
        }
        clauses[key.toLowerCase()] = res2[0];
        kb.add(query, SQNS(key.toLowerCase()), res2[0]); // , kb.sym(base)
        // key is the keyword and res2 has the contents
        found = true;
        i = j;
      }
    }
    if (!found && str.slice(j, j + 7) === '@prefix') {
      i = p.directive(str, j);
      if (i < 0) {
        throw badSyntax(p._thisDoc, p.lines, str, i, 'bad syntax or EOF after @prefix ');
      }
      // console.log("P before dot i= " + i)
      i = p.checkDot(str, i);
      // console.log("Q after dot i= " + i)
      found = true;
    }
    if (!found) {
      // console.log("Bad syntax " + j)
      throw badSyntax(p._thisDoc, p.lines, str, j, "Unknown syntax at start of statememt: '" + str.slice(j).slice(0, 20) + "'");
    }
  } // while
  // return clauses
}
},{"./n3parser":92,"./namespace":94}],98:[function(_dereq_,module,exports){
'use strict';

var log = _dereq_('./log');

function queryToSPARQL(query) {
  var indent = 0;
  function getSelect(query) {
    var str = addIndent() + 'SELECT ';
    for (var i = 0; i < query.vars.length; i++) {
      str += query.vars[i] + ' ';
    }
    str += '\n';
    return str;
  }

  function getPattern(pat) {
    var str = '';
    var st = pat.statements;
    for (var x in st) {
      log.debug('Found statement: ' + st);
      str += addIndent() + st[x] + '\n';
    }
    return str;
  }

  function getConstraints(pat) {
    var str = '';
    for (var v in pat.constraints) {
      var foo = pat.constraints[v];
      str += addIndent() + 'FILTER ( ' + foo.describe(v) + ' ) ' + '\n';
    }
    return str;
  }

  function getOptionals(pat) {
    var str = '';
    for (var x = 0; x < pat.optional.length; x++) {
      // alert(pat.optional.termType)
      log.debug('Found optional query');
      str += addIndent() + 'OPTIONAL { ' + '\n';
      indent++;
      str += getPattern(pat.optional[x]);
      str += getConstraints(pat.optional[x]);
      str += getOptionals(pat.optional[x]);
      indent--;
      str += addIndent() + '}' + '\n';
    }
    return str;
  }

  function getWhere(pat) {
    var str = addIndent() + 'WHERE \n' + '{ \n';
    indent++;
    str += getPattern(pat);
    str += getConstraints(pat);
    str += getOptionals(pat);
    indent--;
    str += '}';
    return str;
  }

  function addIndent() {
    var str = '';
    for (var i = 0; i < indent; i++) {
      str += '    ';
    }
    return str;
  }

  function getSPARQL(query) {
    return getSelect(query) + getWhere(query.pat);
  }

  return getSPARQL(query);
}

module.exports = queryToSPARQL;
},{"./log":91}],99:[function(_dereq_,module,exports){
'use strict';

var _indexedFormula = _dereq_('./indexed-formula');

var _indexedFormula2 = _interopRequireDefault(_indexedFormula);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Matching a formula against another formula
// Assync as well as Synchronously
//
// W3C open source licence 2005.
//
// This builds on term.js, match.js (and identity.js?)
// to allow a query of a formula.
//
// Here we introduce for the first time a subclass of term: variable.
//
// SVN ID: $Id: query.js 25116 2008-11-15 16:13:48Z timbl $

//  Variable
//
// Compare with BlankNode.  They are similar, but a variable
// stands for something whose value is to be returned.
// Also, users name variables and want the same name back when stuff is printed
/* jsl:option explicit*/ // Turn on JavaScriptLint variable declaration checking

var log = _dereq_('./log');
var docpart = _dereq_('./uri').docpart;

/**
 * Query class, for tracking queries the user has in the UI.
 */

var Query = function Query(name, id) {
  _classCallCheck(this, Query);

  this.pat = new _indexedFormula2.default(); // The pattern to search for
  this.vars = []; // Used by UI code but not in query.js
  //    this.orderBy = [] // Not used yet
  this.name = name;
  this.id = id;
};

/**
 * This function will match a pattern to the current kb
 *
 * The callback function is called whenever a match is found
 * When fetcher is supplied this will be called to satisfy any resource requests
 * currently not in the kb. The fetcher function needs to be defined manualy and
 * should call $rdf.Util.AJAR_handleNewTerm to process the requested resource.
 *
 * @param	myQuery,	a knowledgebase containing a pattern to use as query
 * @param	callback, 	whenever the pattern in myQuery is met this is called with
 * 						the new bindings as parameter
 * @param	fetcher,	whenever a resource needs to be loaded this gets called  IGNORED OBSOLETE
 *                              f.fetecher is used as a Fetcher instance to do this.
 * @param       onDone          callback when
 */


function indexedFormulaQuery(myQuery, callback, fetcher, onDone) {
  // var kb = this
  // /////////// Debug strings
  var bindingDebug = function bindingDebug(b) {
    var str = '';
    var v;
    for (v in b) {
      if (b.hasOwnProperty(v)) {
        str += '    ' + v + ' -> ' + b[v];
      }
    }
    return str;
  };

  var bindingsDebug = function bindingsDebug(nbs) {
    var str = 'Bindings: ';
    var i;
    var n = nbs.length;
    for (i = 0; i < n; i++) {
      str += bindingDebug(nbs[i][0]) + ';\n\t';
    }
    return str;
  }; // bindingsDebug

  // Unification: see also
  //  http://www.w3.org/2000/10/swap/term.py
  // for similar things in python
  //
  // Unification finds all bindings such that when the binding is applied
  // to one term it is equal to the other.
  // Returns: a list of bindings, where a binding is an associative array
  //  mapping variuable to value.

  var unifyTerm = function unifyTerm(self, other, bindings, formula) {
    var actual = bindings[self];
    if (actual === undefined) {
      // Not mapped
      if (self.isVar) {
        /* if (self.isBlank)  //bnodes are existential variables
        {
                if (self.toString() == other.toString()) return [[ [], null]]
                else return []
        }*/
        var b = [];
        b[self] = other;
        return [[b, null]]; // Match
      }
      actual = self;
    }
    if (!actual.complexType) {
      if (formula.redirections[actual]) {
        actual = formula.redirections[actual];
      }
      if (formula.redirections[other]) {
        other = formula.redirections[other];
      }
      if (actual.sameTerm(other)) {
        return [[[], null]];
      }
      return [];
    }
    if (self instanceof Array) {
      if (!(other instanceof Array)) {
        return [];
      }
      return unifyContents(self, other, bindings);
    }
    throw new Error('query.js: oops - code not written yet');
    // return undefined;  // for lint - no jslint objects to unreachables
    //    return actual.unifyContents(other, bindings)
  }; // unifyTerm

  var unifyContents = function unifyContents(self, other, bindings, formula) {
    var nbs2;
    if (self.length !== other.length) {
      return []; // no way
    }
    if (!self.length) {
      return [[[], null]]; // Success
    }
    var nbs = unifyTerm(self[0], other[0], bindings, formula);
    if (nbs.length === 0) {
      return nbs;
    }
    var res = [];
    var i;
    var n = nbs.length;
    var nb;
    var j;
    var m;
    var v;
    var nb2;
    var bindings2;
    for (i = 0; i < n; i++) {
      // for each possibility from the first term
      nb = nbs[i][0]; // new bindings
      bindings2 = [];
      for (v in nb) {
        if (nb.hasOwnProperty(v)) {
          bindings2[v] = nb[v]; // copy
        }
      }
      for (v in bindings) {
        if (bindings.hasOwnProperty(v)) {
          bindings2[v] = bindings[v]; // copy
        }
      }
      nbs2 = unifyContents(self.slice(1), other.slice(1), bindings2, formula);
      m = nbs2.length;
      for (j = 0; j < m; j++) {
        nb2 = nbs2[j][0]; // @@@@ no idea whether this is used or right
        for (v in nb) {
          if (nb.hasOwnProperty(v)) {
            nb2[v] = nb[v];
          }
        }
        res.push([nb2, null]);
      }
    }
    return res;
  }; // unifyContents

  //  Matching
  //
  // Matching finds all bindings such that when the binding is applied
  // to one term it is equal to the other term.  We only match formulae.

  /** if x is not in the bindings array, return the var; otherwise, return the bindings **/
  var bind = function bind(x, binding) {
    var y = binding[x];
    if (y === undefined) {
      return x;
    }
    return y;
  };

  // When there are OPTIONAL clauses, we must return bindings without them if none of them
  // succeed. However, if any of them do succeed, we should not.  (This is what branchCount()
  // tracked. The problem currently is (2011/7) that when several optionals exist, and they
  // all match, multiple sets of bindings are returned, each with one optional filled in.)

  var union = function union(a, b) {
    var c = {};
    var x;
    for (x in a) {
      if (a.hasOwnProperty(x)) {
        c[x] = a[x];
      }
    }
    for (x in b) {
      if (b.hasOwnProperty(x)) {
        c[x] = b[x];
      }
    }
    return c;
  };

  var OptionalBranchJunction = function OptionalBranchJunction(originalCallback, trunkBindings) {
    this.trunkBindings = trunkBindings;
    this.originalCallback = originalCallback;
    this.branches = [];
    // this.results = []; // result[i] is an array of bindings for branch i
    // this.done = {};  // done[i] means all/any results are in for branch i
    // this.count = {}
    return this;
  };

  OptionalBranchJunction.prototype.checkAllDone = function () {
    var i;
    for (i = 0; i < this.branches.length; i++) {
      if (!this.branches[i].done) {
        return;
      }
    }
    log.debug('OPTIONAL BIDNINGS ALL DONE:');
    this.doCallBacks(this.branches.length - 1, this.trunkBindings);
  };
  // Recrursively generate the cross product of the bindings
  OptionalBranchJunction.prototype.doCallBacks = function (b, bindings) {
    var j;
    if (b < 0) {
      return this.originalCallback(bindings);
    }
    for (j = 0; j < this.branches[b].results.length; j++) {
      this.doCallBacks(b - 1, union(bindings, this.branches[b].results[j]));
    }
  };

  // A mandatory branch is the normal one, where callbacks
  // are made immediately and no junction is needed.
  // Might be useful for onFinsihed callback for query API.
  var MandatoryBranch = function MandatoryBranch(callback, onDone) {
    this.count = 0;
    this.success = false;
    this.done = false;
    // this.results = []
    this.callback = callback;
    this.onDone = onDone;
    // this.junction = junction
    // junction.branches.push(this)
    return this;
  };

  MandatoryBranch.prototype.reportMatch = function (bindings) {
    // log.error("@@@@ query.js 1"); // @@
    this.callback(bindings);
    this.success = true;
  };

  MandatoryBranch.prototype.reportDone = function () {
    this.done = true;
    log.info('Mandatory query branch finished.***');
    if (this.onDone !== undefined) {
      this.onDone();
    }
  };

  // An optional branch hoards its results.
  var OptionalBranch = function OptionalBranch(junction) {
    this.count = 0;
    this.done = false;
    this.results = [];
    this.junction = junction;
    junction.branches.push(this);
    return this;
  };

  OptionalBranch.prototype.reportMatch = function (bindings) {
    this.results.push(bindings);
  };

  OptionalBranch.prototype.reportDone = function () {
    log.debug('Optional branch finished - results.length = ' + this.results.length);
    if (this.results.length === 0) {
      // This is what optional means: if no hits,
      this.results.push({}); // mimic success, but with no bindings
      log.debug("Optional branch FAILED - that's OK.");
    }
    this.done = true;
    this.junction.checkAllDone();
  };

  /** prepare -- sets the index of the item to the possible matches
      * @param f - formula
      * @param item - an Statement, possibly w/ vars in it
      * @param bindings -
  * @returns true if the query fails -- there are no items that match **/
  var prepare = function prepare(f, item, bindings) {
    var t, terms, termIndex, i, ind;
    item.nvars = 0;
    item.index = null;
    // if (!f.statements) log.warn("@@@ prepare: f is "+f)
    //    log.debug("Prepare: f has "+ f.statements.length)
    // log.debug("Prepare: Kb size "+f.statements.length+" Preparing "+item)

    terms = [item.subject, item.predicate, item.object];
    ind = [f.subjectIndex, f.predicateIndex, f.objectIndex];
    for (i = 0; i < 3; i++) {
      // alert("Prepare "+terms[i]+" "+(terms[i] in bindings))
      if (terms[i].isVar && !(bindings[terms[i]] !== undefined)) {
        item.nvars++;
      } else {
        t = bind(terms[i], bindings); // returns the RDF binding if bound, otherwise itself
        // if (terms[i]!=bind(terms[i],bindings) alert("Term: "+terms[i]+"Binding: "+bind(terms[i], bindings))
        if (f.redirections[t.hashString()]) {
          t = f.redirections[t.hashString()]; // redirect
        }
        termIndex = ind[i][t.hashString()];

        if (!termIndex) {
          item.index = [];
          return false; // Query line cannot match
        }
        if (item.index === null || item.index.length > termIndex.length) {
          item.index = termIndex;
        }
      }
    }

    if (item.index === null) {
      // All 3 are variables?
      item.index = f.statements;
    }
    return true;
  }; // prepare

  /** sorting function -- negative if self is easier **/
  // We always prefer to start with a URI to be able to browse a graph
  // this is why we put off items with more variables till later.
  function easiestQuery(self, other) {
    if (self.nvars !== other.nvars) {
      return self.nvars - other.nvars;
    }
    return self.index.length - other.index.length;
  }

  var match_index = 0; // index
  /** matches a pattern formula against the knowledge base, e.g. to find matches for table-view
  *
  * @param f - knowledge base formula
  * @param g - pattern formula (may have vars)
  * @param bindingsSoFar  - bindings accumulated in matching to date
  * @param level - spaces to indent stuff also lets you know what level of recursion you're at
  * @param fetcher - function (term, requestedBy) - myFetcher / AJAR_handleNewTerm / the sort
  * @param localCallback - function(bindings, pattern, branch) called on sucess
  * @returns nothing
  *
  * Will fetch linked data from the web iff the knowledge base an associated source fetcher (f.fetcher)
  ***/
  var match = function match(f, g, bindingsSoFar, level, fetcher, localCallback, branch) {
    log.debug('Match begins, Branch count now: ' + branch.count + ' for ' + branch.pattern_debug);
    var sf = f.fetcher ? f.fetcher : null;
    // log.debug("match: f has "+f.statements.length+", g has "+g.statements.length)
    var pattern = g.statements;
    if (pattern.length === 0) {
      // when it's satisfied all the pattern triples
      log.debug('FOUND MATCH WITH BINDINGS:' + bindingDebug(bindingsSoFar));
      if (g.optional.length === 0) {
        branch.reportMatch(bindingsSoFar);
      } else {
        log.debug('OPTIONAL: ' + g.optional);
        var junction = new OptionalBranchJunction(callback, bindingsSoFar); // @@ won't work with nested optionals? nest callbacks
        var br = [];
        var b;
        for (b = 0; b < g.optional.length; b++) {
          br[b] = new OptionalBranch(junction); // Allocate branches to prevent premature ending
          br[b].pattern_debug = g.optional[b]; // for diagnotics only
        }
        for (b = 0; b < g.optional.length; b++) {
          br[b].count = br[b].count + 1; // Count how many matches we have yet to complete
          match(f, g.optional[b], bindingsSoFar, '', fetcher, callback, br[b]);
        }
      }
      branch.count--;
      log.debug('Match ends -- success , Branch count now: ' + branch.count + ' for ' + branch.pattern_debug);
      return; // Success
    }

    var item;
    var i;
    var n = pattern.length;
    // log.debug(level + "Match "+n+" left, bs so far:"+bindingDebug(bindingsSoFar))

    // Follow links from variables in query
    if (sf) {
      // Fetcher is used to fetch URIs, function first term is a URI term, second is the requester
      var id = 'match' + match_index++;
      var fetchResource = function fetchResource(requestedTerm, id) {
        var docuri = requestedTerm.uri.split('#')[0];
        sf.nowOrWhenFetched(docuri, undefined, function (err, body, xhr) {
          if (err) {
            console.log('Error following link to <' + requestedTerm.uri + '> in query: ' + body);
          }
          match(f, g, bindingsSoFar, level, fetcher, // match not match2 to look up any others necessary.
          localCallback, branch);
        });
        /*
        if( sf ) {
            sf.addCallback('done', function(uri) {
                if ((kb.canon(kb.sym(uri)).uri !== path) && (uri !== kb.canon(kb.sym(path)))) {
                    return true
                }
                return false
            })
        }
        fetcher(requestedTerm, id)
        */
      };
      for (i = 0; i < n; i++) {
        item = pattern[i]; // for each of the triples in the query
        if (bindingsSoFar[item.subject] !== undefined && bindingsSoFar[item.subject].uri && sf && sf.getState(docpart(bindingsSoFar[item.subject].uri)) === 'unrequested') {
          // fetch the subject info and return to id
          fetchResource(bindingsSoFar[item.subject], id);
          return; // only look up one per line this time, but we will come back again though match
        }
        if (bindingsSoFar[item.object] !== undefined && bindingsSoFar[item.object].uri && sf && sf.getState(docpart(bindingsSoFar[item.object].uri)) === 'unrequested') {
          fetchResource(bindingsSoFar[item.object], id);
          return;
        }
      }
    } // if sf
    match2(f, g, bindingsSoFar, level, fetcher, localCallback, branch);
    return;
  }; // match

  var constraintsSatisfied = function constraintsSatisfied(bindings, constraints) {
    var res = true;
    var x;
    var test;
    for (x in bindings) {
      if (bindings.hasOwnProperty(x)) {
        if (constraints[x]) {
          test = constraints[x].test;
          if (test && !test(bindings[x])) {
            res = false;
          }
        }
      }
    }
    return res;
  };

  /** match2 -- stuff after the fetch **/
  var match2 = function match2(f, g, bindingsSoFar, level, fetcher, callback, branch) {
    // post fetch
    var pattern = g.statements;
    var n = pattern.length;
    var i;
    var k;
    var nk;
    var v;
    var bindings2;
    var newBindings1;
    var item;
    for (i = 0; i < n; i++) {
      // For each statement left in the query, run prepare
      item = pattern[i];
      log.info('match2: item=' + item + ', bindingsSoFar=' + bindingDebug(bindingsSoFar));
      prepare(f, item, bindingsSoFar);
    }
    pattern.sort(easiestQuery);
    item = pattern[0];
    // log.debug("Sorted pattern:\n"+pattern)
    var rest = f.formula();
    rest.optional = g.optional;
    rest.constraints = g.constraints;
    rest.statements = pattern.slice(1); // No indexes: we will not query g.
    log.debug(level + 'match2 searching ' + item.index.length + ' for ' + item + '; bindings so far=' + bindingDebug(bindingsSoFar));
    // var results = []
    var c;
    var nc = item.index.length;
    var nbs1;
    var st;
    var onward = 0;
    // var x
    for (c = 0; c < nc; c++) {
      // For each candidate statement
      st = item.index[c]; // for each statement in the item's index, spawn a new match with that binding
      nbs1 = unifyContents([item.subject, item.predicate, item.object], [st.subject, st.predicate, st.object], bindingsSoFar, f);
      log.info(level + ' From first: ' + nbs1.length + ': ' + bindingsDebug(nbs1));
      nk = nbs1.length;
      // branch.count += nk
      // log.debug("Branch count bumped "+nk+" to: "+branch.count)
      for (k = 0; k < nk; k++) {
        // For each way that statement binds
        bindings2 = [];
        newBindings1 = nbs1[k][0];
        if (!constraintsSatisfied(newBindings1, g.constraints)) {
          // branch.count--
          log.debug('Branch count CS: ' + branch.count);
        } else {
          for (v in newBindings1) {
            if (newBindings1.hasOwnProperty(v)) {
              bindings2[v] = newBindings1[v]; // copy
            }
          }
          for (v in bindingsSoFar) {
            if (bindingsSoFar.hasOwnProperty(v)) {
              bindings2[v] = bindingsSoFar[v]; // copy
            }
          }

          branch.count++; // Count how many matches we have yet to complete
          onward++;
          match(f, rest, bindings2, level + '  ', fetcher, callback, branch); // call match
        }
      }
    }
    branch.count--;
    if (onward === 0) {
      log.debug('Match2 fails completely on ' + item);
    }
    log.debug('Match2 ends, Branch count: ' + branch.count + ' for ' + branch.pattern_debug);
    if (branch.count === 0) {
      log.debug('Branch finished.');
      branch.reportDone();
    }
  }; // match2
  // ////////////////////////// Body of query()  ///////////////////////
  /*
  if(!fetcher) {
      fetcher=function (x, requestedBy) {
          if (x === null) {
              return
          }
          $rdf.Util.AJAR_handleNewTerm(kb, x, requestedBy)
      }
  }
  */
  // prepare, oncallback: match1
  // match1: fetcher, oncallback: match2
  // match2, oncallback: populatetable
  //    log.debug("Query F length"+this.statements.length+" G="+myQuery)
  var f = this;
  log.debug('Query on ' + this.statements.length);
  // kb.remoteQuery(myQuery,'http://jena.hpl.hp.com:3040/backstage',callback)
  // return
  var trunck = new MandatoryBranch(callback, onDone);
  trunck.count++; // count one branch to complete at the moment
  setTimeout(function () {
    match(f, myQuery.pat, myQuery.pat.initBindings, '', fetcher, callback, trunck /* branch */);
  }, 0);

  return; // returns nothing; callback does the work
} // query

module.exports.Query = Query;
module.exports.indexedFormulaQuery = indexedFormulaQuery;
},{"./indexed-formula":88,"./log":91,"./uri":108}],100:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  RDFa Parser for rdflib.js

// Originally by: Alex Milowski
// From https://github.com/alexmilowski/green-turtle
// Converted: timbl 2015-08-25 not yet working
// Added wrapper: csarven 2016-05-09 working

// RDFaProcessor.prototype = new Object() // Was URIResolver

// RDFaProcessor.prototype.constructor=RDFaProcessor

// options.base = base URI    not really an option, shopuld always be set.
//

var BlankNode = _dereq_('./blank-node');
var Literal = _dereq_('./literal');
var rdf = _dereq_('./data-factory');
var NamedNode = _dereq_('./named-node');
var Uri = _dereq_('./uri');
var Util = _dereq_('./util');

if (typeof Node === 'undefined') {
  //  @@@@@@ Global. Interface to xmldom.
  var Node = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  };
}

var RDFaProcessor = function () {
  function RDFaProcessor(kb, options) {
    _classCallCheck(this, RDFaProcessor);

    this.options = options || {};
    this.kb = kb;
    this.target = options.target || {
      graph: {
        subjects: {},
        prefixes: {},
        terms: {}
      }
    };
    // XXX: Added to track bnodes
    this.blankNodes = [];
    // XXX: Added for normalisation
    this.htmlOptions = {
      'selfClosing': 'br img input area base basefont col colgroup source wbr isindex link meta param hr'
    };
    this.theOne = '_:' + new Date().getTime();
    this.language = null;
    this.vocabulary = null;
    this.blankCounter = 0;
    this.langAttributes = [{ namespaceURI: 'http://www.w3.org/XML/1998/namespace', localName: 'lang' }];
    this.inXHTMLMode = false;
    this.absURIRE = /[\w\_\-]+:\S+/;
    this.finishedHandlers = [];
    this.init();
  }

  _createClass(RDFaProcessor, [{
    key: 'addTriple',
    value: function addTriple(origin, subject, predicate, object) {
      var su, ob, pr, or;
      if (typeof subject === 'undefined') {
        su = rdf.namedNode(this.options.base);
      } else {
        su = this.toRDFNodeObject(subject);
      }
      pr = this.toRDFNodeObject(predicate);
      ob = this.toRDFNodeObject(object);
      or = rdf.namedNode(this.options.base);
      // console.log('Adding { ' + su + ' ' + pr + ' ' + ob + ' ' + or + ' }')
      this.kb.add(su, pr, ob, or);
    }
  }, {
    key: 'ancestorPath',
    value: function ancestorPath(node) {
      var path = '';
      while (node && node.nodeType !== Node.DOCUMENT_NODE) {
        path = '/' + node.localName + path;
        node = node.parentNode;
      }
      return path;
    }
  }, {
    key: 'copyMappings',
    value: function copyMappings(mappings) {
      var newMappings = {};
      for (var k in mappings) {
        newMappings[k] = mappings[k];
      }
      return newMappings;
    }
  }, {
    key: 'copyProperties',
    value: function copyProperties() {}
  }, {
    key: 'deriveDateTimeType',
    value: function deriveDateTimeType(value) {
      for (var i = 0; i < RDFaProcessor.dateTimeTypes.length; i++) {
        // console.log("Checking "+value+" against "+RDFaProcessor.dateTimeTypes[i].type)
        var matched = RDFaProcessor.dateTimeTypes[i].pattern.exec(value);
        if (matched && matched[0].length === value.length) {
          // console.log("Matched!")
          return RDFaProcessor.dateTimeTypes[i].type;
        }
      }
      return null;
    }
  }, {
    key: 'init',
    value: function init() {}
  }, {
    key: 'newBlankNode',
    value: function newBlankNode() {
      this.blankCounter++;
      return '_:' + this.blankCounter;
    }
  }, {
    key: 'newSubjectOrigin',
    value: function newSubjectOrigin(origin, subject) {}
  }, {
    key: 'parseCURIE',
    value: function parseCURIE(value, prefixes, base) {
      var colon = value.indexOf(':');
      var uri;
      if (colon >= 0) {
        var prefix = value.substring(0, colon);
        if (prefix === '') {
          // default prefix
          uri = prefixes[''];
          return uri ? uri + value.substring(colon + 1) : null;
        } else if (prefix === '_') {
          // blank node
          return '_:' + value.substring(colon + 1);
        } else if (RDFaProcessor.NCNAME.test(prefix)) {
          uri = prefixes[prefix];
          if (uri) {
            return uri + value.substring(colon + 1);
          }
        }
      }
      return null;
    }
  }, {
    key: 'parseCURIEOrURI',
    value: function parseCURIEOrURI(value, prefixes, base) {
      var curie = this.parseCURIE(value, prefixes, base);
      if (curie) {
        return curie;
      }
      return this.resolveAndNormalize(base, value);
    }
  }, {
    key: 'parsePredicate',
    value: function parsePredicate(value, defaultVocabulary, terms, prefixes, base, ignoreTerms) {
      if (value === '') {
        return null;
      }
      var predicate = this.parseTermOrCURIEOrAbsURI(value, defaultVocabulary, ignoreTerms ? null : terms, prefixes, base);
      if (predicate && predicate.indexOf('_:') === 0) {
        return null;
      }
      return predicate;
    }
  }, {
    key: 'parsePrefixMappings',
    value: function parsePrefixMappings(str, target) {
      var values = this.tokenize(str);
      var prefix = null;
      // var uri = null
      for (var i = 0; i < values.length; i++) {
        if (values[i][values[i].length - 1] === ':') {
          prefix = values[i].substring(0, values[i].length - 1);
        } else if (prefix) {
          target[prefix] = this.options.base ? Uri.join(values[i], this.options.base) : values[i];
          prefix = null;
        }
      }
    }
  }, {
    key: 'parseSafeCURIEOrCURIEOrURI',
    value: function parseSafeCURIEOrCURIEOrURI(value, prefixes, base) {
      value = this.trim(value);
      if (value.charAt(0) === '[' && value.charAt(value.length - 1) === ']') {
        value = value.substring(1, value.length - 1);
        value = value.trim(value);
        if (value.length === 0) {
          return null;
        }
        if (value === '_:') {
          // the one node
          return this.theOne;
        }
        return this.parseCURIE(value, prefixes, base);
      } else {
        return this.parseCURIEOrURI(value, prefixes, base);
      }
    }
  }, {
    key: 'parseTermOrCURIEOrAbsURI',
    value: function parseTermOrCURIEOrAbsURI(value, defaultVocabulary, terms, prefixes, base) {
      // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
      value = this.trim(value);
      var curie = this.parseCURIE(value, prefixes, base);
      if (curie) {
        return curie;
      } else if (terms) {
        if (defaultVocabulary && !this.absURIRE.exec(value)) {
          return defaultVocabulary + value;
        }
        var term = terms[value];
        if (term) {
          return term;
        }
        var lcvalue = value.toLowerCase();
        term = terms[lcvalue];
        if (term) {
          return term;
        }
      }
      if (this.absURIRE.exec(value)) {
        return this.resolveAndNormalize(base, value);
      }
      return null;
    }
  }, {
    key: 'parseTermOrCURIEOrURI',
    value: function parseTermOrCURIEOrURI(value, defaultVocabulary, terms, prefixes, base) {
      // alert("Parsing "+value+" with default vocab "+defaultVocabulary)
      value = this.trim(value);
      var curie = this.parseCURIE(value, prefixes, base);
      if (curie) {
        return curie;
      } else {
        var term = terms[value];
        if (term) {
          return term;
        }
        var lcvalue = value.toLowerCase();
        term = terms[lcvalue];
        if (term) {
          return term;
        }
        if (defaultVocabulary && !this.absURIRE.exec(value)) {
          return defaultVocabulary + value;
        }
      }
      return this.resolveAndNormalize(base, value);
    }
  }, {
    key: 'parseURI',
    value: function parseURI(uri) {
      return uri; // We just use strings as URIs, not objects now.
    }
  }, {
    key: 'process',
    value: function process(node, options) {
      /*
      if (!window.console) {
         window.console = { log: function() {} }
      }*/
      var base;
      if (node.nodeType === Node.DOCUMENT_NODE) {
        base = node.baseURI;
        node = node.documentElement;
        node.baseURI = base;
        this.setContext(node);
      } else if (node.parentNode.nodeType === Node.DOCUMENT_NODE) {
        this.setContext(node);
      }
      var queue = [];
      // Fix for Firefox that includes the hash in the base URI
      var removeHash = function removeHash(baseURI) {
        // Fix for undefined baseURI property
        if (!baseURI && options && options.baseURI) {
          return options.baseURI;
        }

        var hash = baseURI.indexOf('#');
        if (hash >= 0) {
          baseURI = baseURI.substring(0, hash);
        }
        if (options && options.baseURIMap) {
          baseURI = options.baseURIMap(baseURI);
        }
        return baseURI;
      };
      queue.push({ current: node,
        context: this.push(null, removeHash(node.baseURI))
      });
      while (queue.length > 0) {
        var item = queue.shift();
        if (item.parent) {
          // Sequence Step 14: list triple generation
          if (item.context.parent && item.context.parent.listMapping === item.listMapping) {
            // Skip a child context with exactly the same mapping
            continue;
          }
          // console.log("Generating lists for "+item.subject+", tag "+item.parent.localName)
          for (var _predicate in item.listMapping) {
            var list = item.listMapping[_predicate];
            if (list.length === 0) {
              this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });
              continue;
            }
            var bnodes = [];
            for (var _i = 0; _i < list.length; _i++) {
              bnodes.push(this.newBlankNode());
              // this.newSubject(item.parent,bnodes[i])
            }
            for (var _i2 = 0; _i2 < bnodes.length; _i2++) {
              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#first', list[_i2]);
              this.addTriple(item.parent, bnodes[_i2], 'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest', { type: RDFaProcessor.objectURI, value: _i2 + 1 < bnodes.length ? bnodes[_i2 + 1] : 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil' });
            }
            this.addTriple(item.parent, item.subject, _predicate, { type: RDFaProcessor.objectURI, value: bnodes[0] });
          }
          continue;
        }
        var current = item.current;
        var context = item.context;
        // console.log("Tag: "+current.localName+", listMapping="+JSON.stringify(context.listMapping))
        // Sequence Step 1
        var skip = false;
        var newSubject = null;
        var currentObjectResource = null;
        var typedResource = null;
        var prefixes = context.prefixes;
        var prefixesCopied = false;
        var incomplete = [];
        var listMapping = context.listMapping;
        var listMappingDifferent = !context.parent;
        var language = context.language;
        var vocabulary = context.vocabulary;
        // TODO: the "base" element may be used for HTML+RDFa 1.1
        base = this.parseURI(removeHash(current.baseURI));
        current.item = null;
        // Sequence Step 2: set the default vocabulary
        var vocabAtt = current.getAttributeNode('vocab');
        if (vocabAtt) {
          var value = this.trim(vocabAtt.value);
          if (value.length > 0) {
            vocabulary = value;
            var baseSubject = base.spec;
            // this.newSubject(current,baseSubject)
            this.addTriple(current, baseSubject, 'http://www.w3.org/ns/rdfa#usesVocabulary', { type: RDFaProcessor.objectURI, value: vocabulary });
          } else {
            vocabulary = this.vocabulary;
          }
        }
        // Sequence Step 3: IRI mappings
        // handle xmlns attributes
        for (var i = 0; i < current.attributes.length; i++) {
          var att = current.attributes[i];
          // if (att.namespaceURI=="http://www.w3.org/2000/xmlns/") {
          if (att.nodeName.charAt(0) === 'x' && att.nodeName.indexOf('xmlns:') === 0) {
            if (!prefixesCopied) {
              prefixes = this.copyMappings(prefixes);
              prefixesCopied = true;
            }
            var prefix = att.nodeName.substring(6);
            // TODO: resolve relative?
            var ref = RDFaProcessor.trim(att.value);
            prefixes[prefix] = this.options.base ? Uri.join(ref, this.options.base) : ref;
          }
        }
        // Handle prefix mappings (@prefix)
        var prefixAtt = current.getAttributeNode('prefix');
        if (prefixAtt) {
          if (!prefixesCopied) {
            prefixes = this.copyMappings(prefixes);
            prefixesCopied = true;
          }
          this.parsePrefixMappings(prefixAtt.value, prefixes);
        }
        // Sequence Step 4: language
        var xmlLangAtt = null;
        for (var _i3 = 0; !xmlLangAtt && _i3 < this.langAttributes.length; _i3++) {
          xmlLangAtt = current.getAttributeNodeNS(this.langAttributes[_i3].namespaceURI, this.langAttributes[_i3].localName);
        }
        if (xmlLangAtt) {
          var _value = RDFaProcessor.trim(xmlLangAtt.value);
          if (_value.length > 0) {
            language = _value;
          } else {
            language = null;
          }
        }
        var relAtt = current.getAttributeNode('rel');
        var revAtt = current.getAttributeNode('rev');
        var typeofAtt = current.getAttributeNode('typeof');
        var propertyAtt = current.getAttributeNode('property');
        var datatypeAtt = current.getAttributeNode('datatype');
        var datetimeAtt = this.inHTMLMode ? current.getAttributeNode('datetime') : null;
        var contentAtt = current.getAttributeNode('content');
        var aboutAtt = current.getAttributeNode('about');
        var srcAtt = current.getAttributeNode('src');
        var resourceAtt = current.getAttributeNode('resource');
        var hrefAtt = current.getAttributeNode('href');
        var inlistAtt = current.getAttributeNode('inlist');
        var relAttPredicates = [];
        var predicate, values;
        if (relAtt) {
          values = this.tokenize(relAtt.value);
          for (var _i4 = 0; _i4 < values.length; _i4++) {
            predicate = this.parsePredicate(values[_i4], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt !== null);
            if (predicate) {
              relAttPredicates.push(predicate);
            }
          }
        }
        var revAttPredicates = [];
        if (revAtt) {
          values = this.tokenize(revAtt.value);
          for (var _i5 = 0; _i5 < values.length; _i5++) {
            predicate = this.parsePredicate(values[_i5], vocabulary, context.terms, prefixes, base, this.inHTMLMode && propertyAtt);
            if (predicate) {
              revAttPredicates.push(predicate);
            }
          }
        }
        // Section 3.1, bullet 7
        if (this.inHTMLMode && (relAtt || revAtt) && propertyAtt) {
          if (relAttPredicates.length === 0) {
            relAtt = null;
          }
          if (revAttPredicates.length === 0) {
            revAtt = null;
          }
        }
        if (relAtt || revAtt) {
          // Sequence Step 6: establish new subject and value
          if (aboutAtt) {
            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
          }
          if (typeofAtt) {
            typedResource = newSubject;
          }
          if (!newSubject) {
            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {
              newSubject = removeHash(current.baseURI);
            } else if (context.parentObject) {
              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
            }
          }
          if (resourceAtt) {
            currentObjectResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
          }
          if (!currentObjectResource) {
            if (hrefAtt) {
              currentObjectResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
            } else if (srcAtt) {
              currentObjectResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
            } else if (typeofAtt && !aboutAtt && !(this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body'))) {
              currentObjectResource = this.newBlankNode();
            }
          }
          if (typeofAtt && !aboutAtt && this.inXHTMLMode && (current.localName === 'head' || current.localName === 'body')) {
            typedResource = newSubject;
          } else if (typeofAtt && !aboutAtt) {
            typedResource = currentObjectResource;
          }
        } else if (propertyAtt && !contentAtt && !datatypeAtt) {
          // Sequence Step 5.1: establish a new subject
          if (aboutAtt) {
            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
            if (typeofAtt) {
              typedResource = newSubject;
            }
          }
          if (!newSubject && current.parentNode.nodeType === Node.DOCUMENT_NODE) {
            newSubject = removeHash(current.baseURI);
            if (typeofAtt) {
              typedResource = newSubject;
            }
          } else if (!newSubject && context.parentObject) {
            // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
            newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
          }
          if (typeofAtt && !typedResource) {
            if (resourceAtt) {
              typedResource = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
            }
            if (!typedResource && hrefAtt) {
              typedResource = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
            }
            if (!typedResource && srcAtt) {
              typedResource = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
            }
            if (!typedResource && (this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {
              typedResource = newSubject;
            }
            if (!typedResource) {
              typedResource = this.newBlankNode();
            }
            currentObjectResource = typedResource;
          }
          // console.log(current.localName+", newSubject="+newSubject+", typedResource="+typedResource+", currentObjectResource="+currentObjectResource)
        } else {
          // Sequence Step 5.2: establish a new subject
          if (aboutAtt) {
            newSubject = this.parseSafeCURIEOrCURIEOrURI(aboutAtt.value, prefixes, base);
          }
          if (!newSubject && resourceAtt) {
            newSubject = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
          }
          if (!newSubject && hrefAtt) {
            newSubject = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
          }
          if (!newSubject && srcAtt) {
            newSubject = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
          }
          if (!newSubject) {
            if (current.parentNode.nodeType === Node.DOCUMENT_NODE) {
              newSubject = removeHash(current.baseURI);
            } else if ((this.inXHTMLMode || this.inHTMLMode) && (current.localName === 'head' || current.localName === 'body')) {
              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
            } else if (typeofAtt) {
              newSubject = this.newBlankNode();
            } else if (context.parentObject) {
              // TODO: Verify: If the xml:base has been set and the parentObject is the baseURI of the parent, then the subject needs to be the new base URI
              newSubject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
              if (!propertyAtt) {
                skip = true;
              }
            }
          }
          if (typeofAtt) {
            typedResource = newSubject;
          }
        }
        // console.log(current.tagName+": newSubject="+newSubject+", currentObjectResource="+currentObjectResource+", typedResource="+typedResource+", skip="+skip)
        // var rdfaData = null
        if (newSubject) {
          // this.newSubject(current,newSubject)
          if (aboutAtt || resourceAtt || typedResource) {
            var id = newSubject;
            if (typeofAtt && !aboutAtt && !resourceAtt && currentObjectResource) {
              id = currentObjectResource;
            }
            // console.log("Setting data attribute for "+current.localName+" for subject "+id)
            this.newSubjectOrigin(current, id);
          }
        }
        // Sequence Step 7: generate type triple
        if (typedResource) {
          values = this.tokenize(typeofAtt.value);
          for (var _i6 = 0; _i6 < values.length; _i6++) {
            var object = this.parseTermOrCURIEOrAbsURI(values[_i6], vocabulary, context.terms, prefixes, base);
            if (object) {
              this.addTriple(current, typedResource, RDFaProcessor.typeURI, { type: RDFaProcessor.objectURI, value: object });
            }
          }
        }
        // Sequence Step 8: new list mappings if there is a new subject
        // console.log("Step 8: newSubject="+newSubject+", context.parentObject="+context.parentObject)
        if (newSubject && newSubject !== context.parentObject) {
          // console.log("Generating new list mapping for "+newSubject)
          listMapping = {};
          listMappingDifferent = true;
        }
        // Sequence Step 9: generate object triple
        if (currentObjectResource) {
          if (relAtt && inlistAtt) {
            for (var _i7 = 0; _i7 < relAttPredicates.length; _i7++) {
              var _list = listMapping[relAttPredicates[_i7]];
              if (!_list) {
                _list = [];
                listMapping[relAttPredicates[_i7]] = _list;
              }
              _list.push({ type: RDFaProcessor.objectURI, value: currentObjectResource });
            }
          } else if (relAtt) {
            for (var _i8 = 0; _i8 < relAttPredicates.length; _i8++) {
              this.addTriple(current, newSubject, relAttPredicates[_i8], { type: RDFaProcessor.objectURI, value: currentObjectResource });
            }
          }
          if (revAtt) {
            for (var _i9 = 0; _i9 < revAttPredicates.length; _i9++) {
              this.addTriple(current, currentObjectResource, revAttPredicates[_i9], { type: RDFaProcessor.objectURI, value: newSubject });
            }
          }
        } else {
          // Sequence Step 10: incomplete triples
          if (newSubject && !currentObjectResource && (relAtt || revAtt)) {
            currentObjectResource = this.newBlankNode();
            // alert(current.tagName+": generated blank node, newSubject="+newSubject+" currentObjectResource="+currentObjectResource)
          }
          if (relAtt && inlistAtt) {
            for (var _i10 = 0; _i10 < relAttPredicates.length; _i10++) {
              var _list2 = listMapping[relAttPredicates[_i10]];
              if (!_list2) {
                _list2 = [];
                listMapping[predicate] = _list2;
              }
              // console.log("Adding incomplete list for "+predicate)
              incomplete.push({ predicate: relAttPredicates[_i10], list: _list2 });
            }
          } else if (relAtt) {
            for (var _i11 = 0; _i11 < relAttPredicates.length; _i11++) {
              incomplete.push({ predicate: relAttPredicates[_i11], forward: true });
            }
          }
          if (revAtt) {
            for (var _i12 = 0; _i12 < revAttPredicates.length; _i12++) {
              incomplete.push({ predicate: revAttPredicates[_i12], forward: false });
            }
          }
        }
        // Step 11: Current property values
        if (propertyAtt) {
          var datatype = null;
          var content = null;
          if (datatypeAtt) {
            datatype = datatypeAtt.value === '' ? RDFaProcessor.PlainLiteralURI : this.parseTermOrCURIEOrAbsURI(datatypeAtt.value, vocabulary, context.terms, prefixes, base);
            if (datetimeAtt && !contentAtt) {
              content = datetimeAtt.value;
            } else {
              content = datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? null : contentAtt ? contentAtt.value : current.textContent;
            }
          } else if (contentAtt) {
            datatype = RDFaProcessor.PlainLiteralURI;
            content = contentAtt.value;
          } else if (datetimeAtt) {
            content = datetimeAtt.value;
            datatype = RDFaProcessor.deriveDateTimeType(content);
            if (!datatype) {
              datatype = RDFaProcessor.PlainLiteralURI;
            }
          } else if (!relAtt && !revAtt) {
            if (resourceAtt) {
              content = this.parseSafeCURIEOrCURIEOrURI(resourceAtt.value, prefixes, base);
            }
            if (!content && hrefAtt) {
              content = this.resolveAndNormalize(base, encodeURI(hrefAtt.value));
            } else if (!content && srcAtt) {
              content = this.resolveAndNormalize(base, encodeURI(srcAtt.value));
            }
            if (content) {
              datatype = RDFaProcessor.objectURI;
            }
          }
          if (!datatype) {
            if (typeofAtt && !aboutAtt) {
              datatype = RDFaProcessor.objectURI;
              content = typedResource;
            } else {
              content = current.textContent;
              if (this.inHTMLMode && current.localName === 'time') {
                datatype = RDFaProcessor.deriveDateTimeType(content);
              }
              if (!datatype) {
                datatype = RDFaProcessor.PlainLiteralURI;
              }
            }
          }
          values = this.tokenize(propertyAtt.value);
          for (var _i13 = 0; _i13 < values.length; _i13++) {
            var _predicate2 = this.parsePredicate(values[_i13], vocabulary, context.terms, prefixes, base);
            if (_predicate2) {
              if (inlistAtt) {
                var _list3 = listMapping[_predicate2];
                if (!_list3) {
                  _list3 = [];
                  listMapping[_predicate2] = _list3;
                }
                _list3.push(datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI ? { type: datatype, value: current.childNodes } : { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });
              } else {
                if (datatype === RDFaProcessor.XMLLiteralURI || datatype === RDFaProcessor.HTMLLiteralURI) {
                  this.addTriple(current, newSubject, _predicate2, { type: datatype, value: current.childNodes });
                } else {
                  this.addTriple(current, newSubject, _predicate2, { type: datatype ? datatype : RDFaProcessor.PlainLiteralURI, value: content, language: language });
                  // console.log(newSubject+" "+predicate+"="+content)
                }
              }
            }
          }
        }
        // Sequence Step 12: complete incomplete triples with new subject
        if (newSubject && !skip) {
          for (var _i14 = 0; _i14 < context.incomplete.length; _i14++) {
            if (context.incomplete[_i14].list) {
              // console.log("Adding subject "+newSubject+" to list for "+context.incomplete[i].predicate)
              // TODO: it is unclear what to do here
              context.incomplete[_i14].list.push({ type: RDFaProcessor.objectURI, value: newSubject });
            } else if (context.incomplete[_i14].forward) {
              // console.log(current.tagName+": completing forward triple "+context.incomplete[i].predicate+" with object="+newSubject)
              this.addTriple(current, context.subject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: newSubject });
            } else {
              // console.log(current.tagName+": completing reverse triple with object="+context.subject)
              this.addTriple(current, newSubject, context.incomplete[_i14].predicate, { type: RDFaProcessor.objectURI, value: context.subject });
            }
          }
        }
        var childContext = null;
        var listSubject = newSubject;
        if (skip) {
          // TODO: should subject be null?
          childContext = this.push(context, context.subject);
          // TODO: should the entObject be passed along?  If not, then intermediary children will keep properties from being associated with incomplete triples.
          // TODO: Verify: if the current baseURI has changed and the parentObject is the parent's base URI, then the baseURI should change
          childContext.parentObject = removeHash(current.parentNode.baseURI) === context.parentObject ? removeHash(current.baseURI) : context.parentObject;
          childContext.incomplete = context.incomplete;
          childContext.language = language;
          childContext.prefixes = prefixes;
          childContext.vocabulary = vocabulary;
        } else {
          childContext = this.push(context, newSubject);
          childContext.parentObject = currentObjectResource ? currentObjectResource : newSubject ? newSubject : context.subject;
          childContext.prefixes = prefixes;
          childContext.incomplete = incomplete;
          if (currentObjectResource) {
            // console.log("Generating new list mapping for "+currentObjectResource)
            listSubject = currentObjectResource;
            listMapping = {};
            listMappingDifferent = true;
          }
          childContext.listMapping = listMapping;
          childContext.language = language;
          childContext.vocabulary = vocabulary;
        }
        if (listMappingDifferent) {
          // console.log("Pushing list parent "+current.localName)
          queue.unshift({ parent: current, context: context, subject: listSubject, listMapping: listMapping });
        }
        for (var child = current.lastChild; child; child = child.previousSibling) {
          if (child.nodeType === Node.ELEMENT_NODE) {
            // console.log("Pushing child "+child.localName)
            child.baseURI = current.baseURI;
            queue.unshift({ current: child, context: childContext });
          }
        }
      }
      if (this.inHTMLMode) {
        this.copyProperties();
      }
      for (var _i15 = 0; _i15 < this.finishedHandlers.length; _i15++) {
        this.finishedHandlers[_i15](node);
      }
    }
  }, {
    key: 'push',
    value: function push(parent, subject) {
      return {
        parent: parent,
        subject: subject ? subject : parent ? parent.subject : null,
        parentObject: null,
        incomplete: [],
        listMapping: parent ? parent.listMapping : {},
        language: parent ? parent.language : this.language,
        prefixes: parent ? parent.prefixes : this.target.graph.prefixes,
        terms: parent ? parent.terms : this.target.graph.terms,
        vocabulary: parent ? parent.vocabulary : this.vocabulary
      };
    }
  }, {
    key: 'resolveAndNormalize',
    value: function resolveAndNormalize(base, uri) {
      // console.log("Joining " + uri + " to " + base + " making " +  Uri.join(uri, base))
      return Uri.join(uri, base); // @@ normalize?
    }
  }, {
    key: 'setContext',
    value: function setContext(node) {
      // We only recognized XHTML+RDFa 1.1 if the version is set propertyly
      if (node.localName === 'html' && node.getAttribute('version') === 'XHTML+RDFa 1.1') {
        this.setXHTMLContext();
      } else if (node.localName === 'html' || node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        if (typeof document !== 'undefined' && document.doctype) {
          if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.0//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd') {
            console.log('WARNING: RDF 1.0 is not supported.  Defaulting to HTML5 mode.');
            this.setHTMLContext();
          } else if (document.doctype.publicId === '-//W3C//DTD XHTML+RDFa 1.1//EN' && document.doctype.systemId === 'http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd') {
            this.setXHTMLContext();
          } else {
            this.setHTMLContext();
          }
        } else {
          this.setHTMLContext();
        }
      } else {
        this.setXMLContext();
      }
    }
  }, {
    key: 'setHTMLContext',
    value: function setHTMLContext() {
      this.setInitialContext();
      this.langAttributes = [{
        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
        localName: 'lang'
      }, { namespaceURI: null, localName: 'lang' }];
      this.inXHTMLMode = false;
      this.inHTMLMode = true;
    }
  }, {
    key: 'setInitialContext',
    value: function setInitialContext() {
      this.vocabulary = null;
      // By default, the prefixes are terms are loaded to the RDFa 1.1. standard within the graph constructor
      this.langAttributes = [{
        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
        localName: 'lang'
      }];
    }
  }, {
    key: 'setXHTMLContext',
    value: function setXHTMLContext() {
      this.setInitialContext();
      this.inXHTMLMode = true;
      this.inHTMLMode = false;
      this.langAttributes = [{
        namespaceURI: 'http://www.w3.org/XML/1998/namespace',
        localName: 'lang' }, { namespaceURI: null, localName: 'lang' }];
      // From http://www.w3.org/2011/rdfa-context/xhtml-rdfa-1.1
      this.target.graph.terms['alternate'] = 'http://www.w3.org/1999/xhtml/vocab#alternate';
      this.target.graph.terms['appendix'] = 'http://www.w3.org/1999/xhtml/vocab#appendix';
      this.target.graph.terms['bookmark'] = 'http://www.w3.org/1999/xhtml/vocab#bookmark';
      this.target.graph.terms['cite'] = 'http://www.w3.org/1999/xhtml/vocab#cite';
      this.target.graph.terms['chapter'] = 'http://www.w3.org/1999/xhtml/vocab#chapter';
      this.target.graph.terms['contents'] = 'http://www.w3.org/1999/xhtml/vocab#contents';
      this.target.graph.terms['copyright'] = 'http://www.w3.org/1999/xhtml/vocab#copyright';
      this.target.graph.terms['first'] = 'http://www.w3.org/1999/xhtml/vocab#first';
      this.target.graph.terms['glossary'] = 'http://www.w3.org/1999/xhtml/vocab#glossary';
      this.target.graph.terms['help'] = 'http://www.w3.org/1999/xhtml/vocab#help';
      this.target.graph.terms['icon'] = 'http://www.w3.org/1999/xhtml/vocab#icon';
      this.target.graph.terms['index'] = 'http://www.w3.org/1999/xhtml/vocab#index';
      this.target.graph.terms['last'] = 'http://www.w3.org/1999/xhtml/vocab#last';
      this.target.graph.terms['license'] = 'http://www.w3.org/1999/xhtml/vocab#license';
      this.target.graph.terms['meta'] = 'http://www.w3.org/1999/xhtml/vocab#meta';
      this.target.graph.terms['next'] = 'http://www.w3.org/1999/xhtml/vocab#next';
      this.target.graph.terms['prev'] = 'http://www.w3.org/1999/xhtml/vocab#prev';
      this.target.graph.terms['previous'] = 'http://www.w3.org/1999/xhtml/vocab#previous';
      this.target.graph.terms['section'] = 'http://www.w3.org/1999/xhtml/vocab#section';
      this.target.graph.terms['stylesheet'] = 'http://www.w3.org/1999/xhtml/vocab#stylesheet';
      this.target.graph.terms['subsection'] = 'http://www.w3.org/1999/xhtml/vocab#subsection';
      this.target.graph.terms['start'] = 'http://www.w3.org/1999/xhtml/vocab#start';
      this.target.graph.terms['top'] = 'http://www.w3.org/1999/xhtml/vocab#top';
      this.target.graph.terms['up'] = 'http://www.w3.org/1999/xhtml/vocab#up';
      this.target.graph.terms['p3pv1'] = 'http://www.w3.org/1999/xhtml/vocab#p3pv1';
      // other
      this.target.graph.terms['related'] = 'http://www.w3.org/1999/xhtml/vocab#related';
      this.target.graph.terms['role'] = 'http://www.w3.org/1999/xhtml/vocab#role';
      this.target.graph.terms['transformation'] = 'http://www.w3.org/1999/xhtml/vocab#transformation';
    }
  }, {
    key: 'setXMLContext',
    value: function setXMLContext() {
      this.setInitialContext();
      this.inXHTMLMode = false;
      this.inHTMLMode = false;
    }
  }, {
    key: 'tokenize',
    value: function tokenize(str) {
      return this.trim(str).split(/\s+/);
    }
  }, {
    key: 'toRDFNodeObject',
    value: function toRDFNodeObject(x) {
      if (typeof x === 'undefined') return undefined;
      if (typeof x === 'string') {
        if (x.substring(0, 2) === '_:') {
          if (typeof this.blankNodes[x.substring(2)] === 'undefined') {
            this.blankNodes[x.substring(2)] = new BlankNode(x.substring(2));
          }
          return this.blankNodes[x.substring(2)];
        }
        return rdf.namedNode(x);
      }
      switch (x.type) {
        case RDFaProcessor.objectURI:
          if (x.value.substring(0, 2) === '_:') {
            if (typeof this.blankNodes[x.value.substring(2)] === 'undefined') {
              this.blankNodes[x.value.substring(2)] = new BlankNode(x.value.substring(2));
            }
            return this.blankNodes[x.value.substring(2)];
          }
          return rdf.namedNode(x.value);
        case RDFaProcessor.PlainLiteralURI:
          return new Literal(x.value, x.language || '');
        case RDFaProcessor.XMLLiteralURI:
        case RDFaProcessor.HTMLLiteralURI:
          var string = '';
          Object.keys(x.value).forEach(function (i) {
            string += Util.domToString(x.value[i], this.htmlOptions);
          });
          return new Literal(string, '', new NamedNode(x.type));
        default:
          return new Literal(x.value, '', new NamedNode(x.type));
      }
    }
  }, {
    key: 'trim',
    value: function trim(str) {
      return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
  }], [{
    key: 'parseRDFaDOM',
    value: function parseRDFaDOM(dom, kb, base) {
      var p = new RDFaProcessor(kb, { 'base': base });
      dom.baseURI = base;
      p.process(dom);
    }
  }]);

  return RDFaProcessor;
}();

RDFaProcessor.XMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral';
RDFaProcessor.HTMLLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML';
RDFaProcessor.PlainLiteralURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral';
RDFaProcessor.objectURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#object';
RDFaProcessor.typeURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
RDFaProcessor.nameChar = '[-A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF.0-9\xB7\u0300-\u036F\u203F-\u2040]';
RDFaProcessor.nameStartChar = '[A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0100-\u0131\u0134-\u013E\u0141-\u0148\u014A-\u017E\u0180-\u01C3\u01CD-\u01F0\u01F4-\u01F5\u01FA-\u0217\u0250-\u02A8\u02BB-\u02C1\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03CE\u03D0-\u03D6\u03DA\u03DC\u03DE\u03E0\u03E2-\u03F3\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E-\u0481\u0490-\u04C4\u04C7-\u04C8\u04CB-\u04CC\u04D0-\u04EB\u04EE-\u04F5\u04F8-\u04F9\u0531-\u0556\u0559\u0561-\u0586\u05D0-\u05EA\u05F0-\u05F2\u0621-\u063A\u0641-\u064A\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D3\u06D5\u06E5-\u06E6\u0905-\u0939\u093D\u0958-\u0961\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8B\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AE0\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B36-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5\u0BB7-\u0BB9\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CDE\u0CE0-\u0CE1\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D60-\u0D61\u0E01-\u0E2E\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EAE\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0F40-\u0F47\u0F49-\u0F69\u10A0-\u10C5\u10D0-\u10F6\u1100\u1102-\u1103\u1105-\u1107\u1109\u110B-\u110C\u110E-\u1112\u113C\u113E\u1140\u114C\u114E\u1150\u1154-\u1155\u1159\u115F-\u1161\u1163\u1165\u1167\u1169\u116D-\u116E\u1172-\u1173\u1175\u119E\u11A8\u11AB\u11AE-\u11AF\u11B7-\u11B8\u11BA\u11BC-\u11C2\u11EB\u11F0\u11F9\u1E00-\u1E9B\u1EA0-\u1EF9\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2126\u212A-\u212B\u212E\u2180-\u2182\u3041-\u3094\u30A1-\u30FA\u3105-\u312C\uAC00-\uD7A3\u4E00-\u9FA5\u3007\u3021-\u3029_]';
RDFaProcessor.NCNAME = new RegExp('^' + RDFaProcessor.nameStartChar + RDFaProcessor.nameChar + '*$');

/*
RDFaProcessor.prototype.resolveAndNormalize = function(base,href) {
   var u = base.resolve(href)
   var parsed = this.parseURI(u)
   parsed.normalize()
   return parsed.spec
}
*/

RDFaProcessor.dateTimeTypes = [{ pattern: /-?P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?/,
  type: 'http://www.w3.org/2001/XMLSchema#duration' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9]T(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
  type: 'http://www.w3.org/2001/XMLSchema#dateTime' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]-[0-9][0-9](?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
  type: 'http://www.w3.org/2001/XMLSchema#date' }, { pattern: /(?:[0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+\-][0-9][0-9]:[0-9][0-9])?/,
  type: 'http://www.w3.org/2001/XMLSchema#time' }, { pattern: /-?(?:[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9])-[0-9][0-9]/,
  type: 'http://www.w3.org/2001/XMLSchema#gYearMonth' }, { pattern: /-?[1-9][0-9][0-9][0-9]|0[1-9][0-9][0-9]|00[1-9][0-9]|000[1-9]/,
  type: 'http://www.w3.org/2001/XMLSchema#gYear' }];

module.exports = RDFaProcessor;
},{"./blank-node":78,"./data-factory":82,"./literal":90,"./named-node":93,"./uri":108,"./util":109}],101:[function(_dereq_,module,exports){
'use strict';

/**
 * @fileoverview
 *  RDF/XML PARSER
 *
 * Version 0.1
 *  Parser believed to be in full positive RDF/XML parsing compliance
 *  with the possible exception of handling deprecated RDF attributes
 *  appropriately. Parser is believed to comply fully with other W3C
 *  and industry standards where appropriate (DOM, ECMAScript, &c.)
 *
 *  Author: David Sheets <dsheets@mit.edu>
 *
 * W3C® SOFTWARE NOTICE AND LICENSE
 * http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
 * This work (and included software, documentation such as READMEs, or
 * other related items) is being provided by the copyright holders under
 * the following license. By obtaining, using and/or copying this work,
 * you (the licensee) agree that you have read, understood, and will
 * comply with the following terms and conditions.
 *
 * Permission to copy, modify, and distribute this software and its
 * documentation, with or without modification, for any purpose and
 * without fee or royalty is hereby granted, provided that you include
 * the following on ALL copies of the software and documentation or
 * portions thereof, including modifications:
 *
 * 1. The full text of this NOTICE in a location viewable to users of
 * the redistributed or derivative work.
 * 2. Any pre-existing intellectual property disclaimers, notices, or terms and
 * conditions. If none exist, the W3C Software Short Notice should be
 * included (hypertext is preferred, text is permitted) within the body
 * of any redistributed or derivative code.
 * 3. Notice of any changes or modifications to the files, including the
 * date changes were made. (We recommend you provide URIs to the location
 * from which the code is derived.)
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT
 * HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS
 * FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
 * TRADEMARKS OR OTHER RIGHTS.
 *
 * COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL
 * OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR
 * DOCUMENTATION.
 *
 * The name and trademarks of copyright holders may NOT be used in
 * advertising or publicity pertaining to the software without specific,
 * written prior permission. Title to copyright in this software and any
 * associated documentation will at all times remain with copyright
 * holders.
 */
/**
 * @class Class defining an RDFParser resource object tied to an RDFStore
 *
 * @author David Sheets <dsheets@mit.edu>
 * @version 0.1
 *
 * @constructor
 * @param {RDFStore} store An RDFStore object
 */
var uriUtil = _dereq_('./uri');

var RDFParser = function RDFParser(store) {
  var RDFParser = {};

  /** Standard namespaces that we know how to handle @final
   *  @member RDFParser
   */
  RDFParser.ns = { 'RDF': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'RDFS': 'http://www.w3.org/2000/01/rdf-schema#' };

  /** DOM Level 2 node type magic numbers @final
   *  @member RDFParser
   */
  RDFParser.nodeType = { 'ELEMENT': 1, 'ATTRIBUTE': 2, 'TEXT': 3,
    'CDATA_SECTION': 4, 'ENTITY_REFERENCE': 5,
    'ENTITY': 6, 'PROCESSING_INSTRUCTION': 7,
    'COMMENT': 8, 'DOCUMENT': 9, 'DOCUMENT_TYPE': 10,
    'DOCUMENT_FRAGMENT': 11, 'NOTATION': 12 };

  /**
   * Frame class for namespace and base URI lookups
   * Base lookups will always resolve because the parser knows
   * the default base.
   *
   * @private
   */

  this.frameFactory = function (parser, parent, element) {
    return { 'NODE': 1, 'ARC': 2, 'parent': parent, 'parser': parser, 'store': parser.store, 'element': element,
      'lastChild': 0, 'base': null, 'lang': null, 'node': null, 'nodeType': null, 'listIndex': 1, 'rdfid': null, 'datatype': null, 'collection': false, /** Terminate the frame and notify the store that we're done */
      'terminateFrame': function terminateFrame() {
        if (this.collection) {
          this.node.close();
        }
      }, /** Add a symbol of a certain type to the this frame */'addSymbol': function addSymbol(type, uri) {
        uri = uriUtil.join(uri, this.base);
        this.node = this.store.sym(uri);

        this.nodeType = type;
      }, /** Load any constructed triples into the store */'loadTriple': function loadTriple() {
        if (this.parent.parent.collection) {
          this.parent.parent.node.append(this.node);
        } else {
          this.store.add(this.parent.parent.node, this.parent.node, this.node, this.parser.why);
        }
        if (this.parent.rdfid != null) {
          // reify
          var triple = this.store.sym(uriUtil.join('#' + this.parent.rdfid, this.base));
          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'type'), this.store.sym(RDFParser.ns.RDF + 'Statement'), this.parser.why);
          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'subject'), this.parent.parent.node, this.parser.why);
          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'predicate'), this.parent.node, this.parser.why);

          this.store.add(triple, this.store.sym(RDFParser.ns.RDF + 'object'), this.node, this.parser.why);
        }
      }, /** Check if it's OK to load a triple */'isTripleToLoad': function isTripleToLoad() {
        return this.parent != null && this.parent.parent != null && this.nodeType === this.NODE && this.parent.nodeType === this.ARC && this.parent.parent.nodeType === this.NODE;
      }, /** Add a symbolic node to this frame */'addNode': function addNode(uri) {
        this.addSymbol(this.NODE, uri);
        if (this.isTripleToLoad()) {
          this.loadTriple();
        }
      }, /** Add a collection node to this frame */'addCollection': function addCollection() {
        this.nodeType = this.NODE;
        this.node = this.store.collection();
        this.collection = true;
        if (this.isTripleToLoad()) {
          this.loadTriple();
        }
      }, /** Add a collection arc to this frame */'addCollectionArc': function addCollectionArc() {
        this.nodeType = this.ARC;
      }, /** Add a bnode to this frame */'addBNode': function addBNode(id) {
        if (id != null) {
          if (this.parser.bnodes[id] != null) {
            this.node = this.parser.bnodes[id];
          } else {
            this.node = this.parser.bnodes[id] = this.store.bnode();
          }
        } else {
          this.node = this.store.bnode();
        }
        this.nodeType = this.NODE;
        if (this.isTripleToLoad()) {
          this.loadTriple();
        }
      }, /** Add an arc or property to this frame */'addArc': function addArc(uri) {
        if (uri === RDFParser.ns.RDF + 'li') {
          uri = RDFParser.ns.RDF + '_' + this.parent.listIndex;
          this.parent.listIndex++;
        }

        this.addSymbol(this.ARC, uri);
      }, /** Add a literal to this frame */'addLiteral': function addLiteral(value) {
        if (this.parent.datatype) {
          this.node = this.store.literal(value, '', this.store.sym(this.parent.datatype));
        } else {
          this.node = this.store.literal(value, this.lang);
        }
        this.nodeType = this.NODE;
        if (this.isTripleToLoad()) {
          this.loadTriple();
        }
      }
    };
  };

  // from the OpenLayers source .. needed to get around IE problems.
  this.getAttributeNodeNS = function (node, uri, name) {
    var attributeNode = null;
    if (node.getAttributeNodeNS) {
      attributeNode = node.getAttributeNodeNS(uri, name);
    } else {
      var attributes = node.attributes;
      var potentialNode, fullName;
      for (var i = 0; i < attributes.length; ++i) {
        potentialNode = attributes[i];
        if (potentialNode.namespaceURI === uri) {
          fullName = potentialNode.prefix ? potentialNode.prefix + ':' + name : name;
          if (fullName === potentialNode.nodeName) {
            attributeNode = potentialNode;
            break;
          }
        }
      }
    }
    return attributeNode;
  };

  /** Our triple store reference @private */

  this.store = store; /** Our identified blank nodes @private */
  this.bnodes = {}; /** A context for context-aware stores @private */
  this.why = null; /** Reification flag */
  this.reify = false;

  /**
   * Build our initial scope frame and parse the DOM into triples
   * @param {DOMTree} document The DOM to parse
   * @param {String} base The base URL to use
   * @param {Object} why The context to which this resource belongs
   */

  this.parse = function (document, base, why) {
    var children = document.childNodes; // clean up for the next run
    this.cleanParser(); // figure out the root element
    var root;
    if (document.nodeType === RDFParser.nodeType.DOCUMENT) {
      for (var c = 0; c < children.length; c++) {
        if (children[c].nodeType === RDFParser.nodeType.ELEMENT) {
          root = children[c];
          break;
        }
      }
    } else if (document.nodeType === RDFParser.nodeType.ELEMENT) {
      root = document;
    } else {
      throw new Error("RDFParser: can't find root in " + base + '. Halting. ');
      // return false
    }
    this.why = why; // our topmost frame
    var f = this.frameFactory(this);
    this.base = base;
    f.base = base;
    f.lang = null; // was '' but can't have langs like that 2015 (!)
    this.parseDOM(this.buildFrame(f, root));
    return true;
  };

  this.parseDOM = function (frame) {
    // a DOM utility function used in parsing
    var rdfid;
    var elementURI = function (el) {
      var result = '';
      if (el.namespaceURI == null) {
        throw new Error('RDF/XML syntax error: No namespace for ' + el.localName + ' in ' + this.base);
      }
      if (el.namespaceURI) {
        result = result + el.namespaceURI;
      }
      if (el.localName) {
        result = result + el.localName;
      } else if (el.nodeName) {
        if (el.nodeName.indexOf(':') >= 0) result = result + el.nodeName.split(':')[1];else result = result + el.nodeName;
      }
      return result;
    }.bind(this);
    var dig = true; // if we'll dig down in the tree on the next iter
    while (frame.parent) {
      var dom = frame.element;
      var attrs = dom.attributes;
      if (dom.nodeType === RDFParser.nodeType.TEXT || dom.nodeType === RDFParser.nodeType.CDATA_SECTION) {
        // we have a literal
        if (frame.parent.nodeType === frame.NODE) {
          // must have had attributes, store as rdf:value
          frame.addArc(RDFParser.ns.RDF + 'value');
          frame = this.buildFrame(frame);
        }
        frame.addLiteral(dom.nodeValue);
      } else if (elementURI(dom) !== RDFParser.ns.RDF + 'RDF') {
        // not root
        if (frame.parent && frame.parent.collection) {
          // we're a collection element
          frame.addCollectionArc();
          frame = this.buildFrame(frame, frame.element);
          frame.parent.element = null;
        }
        if (!frame.parent || !frame.parent.nodeType || frame.parent.nodeType === frame.ARC) {
          // we need a node
          var about = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'about');
          rdfid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'ID');
          if (about && rdfid) {
            throw new Error('RDFParser: ' + dom.nodeName + ' has both rdf:id and rdf:about.' + ' Halting. Only one of these' + ' properties may be specified on a' + ' node.');
          }
          if (!about && rdfid) {
            frame.addNode('#' + rdfid.nodeValue);
            dom.removeAttributeNode(rdfid);
          } else if (about == null && rdfid == null) {
            var bnid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'nodeID');
            if (bnid) {
              frame.addBNode(bnid.nodeValue);
              dom.removeAttributeNode(bnid);
            } else {
              frame.addBNode();
            }
          } else {
            frame.addNode(about.nodeValue);
            dom.removeAttributeNode(about);
          }
          // Typed nodes
          var rdftype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'type');
          if (RDFParser.ns.RDF + 'Description' !== elementURI(dom)) {
            rdftype = { 'nodeValue': elementURI(dom) };
          }
          if (rdftype != null) {
            this.store.add(frame.node, this.store.sym(RDFParser.ns.RDF + 'type'), this.store.sym(uriUtil.join(rdftype.nodeValue, frame.base)), this.why);
            if (rdftype.nodeName) {
              dom.removeAttributeNode(rdftype);
            }
          }
          // Property Attributes
          for (var x = attrs.length - 1; x >= 0; x--) {
            this.store.add(frame.node, this.store.sym(elementURI(attrs[x])), this.store.literal(attrs[x].nodeValue, frame.lang), this.why);
          }
        } else {
          // we should add an arc (or implicit bnode+arc)
          frame.addArc(elementURI(dom)); // save the arc's rdf:ID if it has one
          if (this.reify) {
            rdfid = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'ID');
            if (rdfid) {
              frame.rdfid = rdfid.nodeValue;
              dom.removeAttributeNode(rdfid);
            }
          }
          var parsetype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'parseType');
          var datatype = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'datatype');
          if (datatype) {
            frame.datatype = datatype.nodeValue;
            dom.removeAttributeNode(datatype);
          }
          if (parsetype) {
            var nv = parsetype.nodeValue;
            if (nv === 'Literal') {
              frame.datatype = RDFParser.ns.RDF + 'XMLLiteral'; // (this.buildFrame(frame)).addLiteral(dom)
              // should work but doesn't
              frame = this.buildFrame(frame);
              frame.addLiteral(dom);
              dig = false;
            } else if (nv === 'Resource') {
              frame = this.buildFrame(frame, frame.element);
              frame.parent.element = null;
              frame.addBNode();
            } else if (nv === 'Collection') {
              frame = this.buildFrame(frame, frame.element);
              frame.parent.element = null;
              frame.addCollection();
            }
            dom.removeAttributeNode(parsetype);
          }
          if (attrs.length !== 0) {
            var resource = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'resource');
            var bnid2 = this.getAttributeNodeNS(dom, RDFParser.ns.RDF, 'nodeID');
            frame = this.buildFrame(frame);
            if (resource) {
              frame.addNode(resource.nodeValue);
              dom.removeAttributeNode(resource);
            } else {
              if (bnid2) {
                frame.addBNode(bnid2.nodeValue);
                dom.removeAttributeNode(bnid2);
              } else {
                frame.addBNode();
              }
            }
            for (var x1 = attrs.length - 1; x1 >= 0; x1--) {
              var f = this.buildFrame(frame);
              f.addArc(elementURI(attrs[x1]));
              if (elementURI(attrs[x1]) === RDFParser.ns.RDF + 'type') {
                this.buildFrame(f).addNode(attrs[x1].nodeValue);
              } else {
                this.buildFrame(f).addLiteral(attrs[x1].nodeValue);
              }
            }
          } else if (dom.childNodes.length === 0) {
            this.buildFrame(frame).addLiteral('');
          }
        }
      } // rdf:RDF
      // dig dug
      dom = frame.element;
      while (frame.parent) {
        var pframe = frame;
        while (dom == null) {
          frame = frame.parent;
          dom = frame.element;
        }
        var candidate = dom.childNodes && dom.childNodes[frame.lastChild];
        if (!candidate || !dig) {
          frame.terminateFrame();
          if (!(frame = frame.parent)) {
            break;
          } // done
          dom = frame.element;
          dig = true;
        } else if (candidate.nodeType !== RDFParser.nodeType.ELEMENT && candidate.nodeType !== RDFParser.nodeType.TEXT && candidate.nodeType !== RDFParser.nodeType.CDATA_SECTION || (candidate.nodeType === RDFParser.nodeType.TEXT || candidate.nodeType === RDFParser.nodeType.CDATA_SECTION) && dom.childNodes.length !== 1) {
          frame.lastChild++;
        } else {
          // not a leaf
          frame.lastChild++;
          frame = this.buildFrame(pframe, dom.childNodes[frame.lastChild - 1]);
          break;
        }
      }
    } // while
  };

  /**
   * Cleans out state from a previous parse run
   * @private
   */
  this.cleanParser = function () {
    this.bnodes = {};
    this.why = null;
  };

  /**
   * Builds scope frame
   * @private
   */
  this.buildFrame = function (parent, element) {
    var frame = this.frameFactory(this, parent, element);
    if (parent) {
      frame.base = parent.base;
      frame.lang = parent.lang;
    }
    if (!element || element.nodeType === RDFParser.nodeType.TEXT || element.nodeType === RDFParser.nodeType.CDATA_SECTION) {
      return frame;
    }
    var attrs = element.attributes;
    var base = element.getAttributeNode('xml:base');
    if (base != null) {
      frame.base = base.nodeValue;
      element.removeAttribute('xml:base');
    }
    var lang = element.getAttributeNode('xml:lang');
    if (lang != null) {
      frame.lang = lang.nodeValue;
      element.removeAttribute('xml:lang');
    }
    // remove all extraneous xml and xmlns attributes
    for (var x = attrs.length - 1; x >= 0; x--) {
      if (attrs[x].nodeName.substr(0, 3) === 'xml') {
        if (attrs[x].name.slice(0, 6) === 'xmlns:') {
          var uri = attrs[x].nodeValue; // alert('base for namespac attr:'+this.base)
          if (this.base) uri = uriUtil.join(uri, this.base);
          this.store.setPrefixForURI(attrs[x].name.slice(6), uri);
        }
        //		alert('rdfparser: xml atribute: '+attrs[x].name) //@@
        element.removeAttributeNode(attrs[x]);
      }
    }
    return frame;
  };
};

module.exports = RDFParser;
},{"./uri":108}],102:[function(_dereq_,module,exports){
'use strict';

module.exports = serialize;

var convert = _dereq_('./convert');
var Serializer = _dereq_('./serializer');

/**
 * Serialize to the appropriate format
 * @@ Currently NQuads and JSON/LD are deal with extrelemently inefficiently
 * through mutiple conversions.
 */
function serialize(target, kb, base, contentType, callback, options) {
  base = base || target.uri;
  options = options || {};
  contentType = contentType || 'text/turtle'; // text/n3 if complex?
  var documentString = null;
  try {
    var sz = Serializer(kb);
    if (options.flags) sz.setFlags(options.flags);
    var newSts = kb.statementsMatching(undefined, undefined, undefined, target);
    var n3String;
    sz.suggestNamespaces(kb.namespaces);
    sz.setBase(base);
    switch (contentType) {
      case 'application/rdf+xml':
        documentString = sz.statementsToXML(newSts);
        return executeCallback(null, documentString);
      case 'text/n3':
      case 'application/n3':
        // Legacy
        documentString = sz.statementsToN3(newSts);
        return executeCallback(null, documentString);
      case 'text/turtle':
      case 'application/x-turtle':
        // Legacy
        sz.setFlags('si'); // Suppress = for sameAs and => for implies
        documentString = sz.statementsToN3(newSts);
        return executeCallback(null, documentString);
      case 'application/n-triples':
        sz.setFlags('deinprstux'); // Suppress nice parts of N3 to make ntriples
        documentString = sz.statementsToNTriples(newSts);
        return executeCallback(null, documentString);
      case 'application/ld+json':
        sz.setFlags('deinprstux'); // Use adapters to connect to incmpatible parser
        n3String = sz.statementsToNTriples(newSts);
        // n3String = sz.statementsToN3(newSts)
        convert.convertToJson(n3String, callback);
        break;
      case 'application/n-quads':
      case 'application/nquads':
        // @@@ just outpout the quads? Does not work for collections
        sz.setFlags('deinprstux q'); // Suppress nice parts of N3 to make ntriples
        documentString = sz.statementsToNTriples(newSts); // q in flag means actually quads
        return executeCallback(null, documentString);
        // n3String = sz.statementsToN3(newSts)
        // documentString = convert.convertToNQuads(n3String, callback)
        break;
      default:
        throw new Error('Serialize: Content-type ' + contentType + ' not supported for data write.');
    }
  } catch (err) {
    if (callback) {
      return callback(err);
    }
    throw err; // Don't hide problems from caller in sync mode
  }

  function executeCallback(err, result) {
    if (callback) {
      callback(err, result);
      return;
    } else {
      return result;
    }
  }
}
},{"./convert":81,"./serializer":103}],103:[function(_dereq_,module,exports){
'use strict';

/*      Serialization of RDF Graphs
**
** Tim Berners-Lee 2006
** This is was http://dig.csail.mit.edu/2005/ajar/ajaw/js/rdf/serialize.js
** This is or was https://github.com/linkeddata/rdflib.js/blob/master/src/serializer.js
** Licence: MIT
*/
var NamedNode = _dereq_('./named-node');
var BlankNode = _dereq_('./blank-node');
var Uri = _dereq_('./uri');
var Util = _dereq_('./util');
var XSD = _dereq_('./xsd');

var Serializer = function () {
  var __Serializer = function __Serializer(store) {
    this.flags = '';
    this.base = null;

    this.prefixes = []; // suggested prefixes
    this.namespaces = []; // complementary indexes

    this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'); // XML code assumes this!
    this.suggestPrefix('xml', 'reserved:reservedForFutureUse'); // XML reserves xml: in the spec.

    this.namespacesUsed = []; // Count actually used and so needed in @prefixes
    this.keywords = ['a']; // The only one we generate at the moment
    this.prefixchars = 'abcdefghijklmnopqustuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    this.incoming = null; // Array not calculated yet
    this.formulas = []; // remebering original formulae from hashes
    this.store = store;
  };

  __Serializer.prototype.setBase = function (base) {
    this.base = base;return this;
  };

  __Serializer.prototype.setFlags = function (flags) {
    this.flags = flags || '';return this;
  };

  __Serializer.prototype.toStr = function (x) {
    var s = x.toNT();
    if (x.termType === 'Graph') {
      this.formulas[s] = x; // remember as reverse does not work
    }
    return s;
  };

  __Serializer.prototype.fromStr = function (s) {
    if (s[0] === '{') {
      var x = this.formulas[s];
      if (!x) console.log('No formula object for ' + s);
      return x;
    }
    return this.store.fromNT(s);
  };
  /* Accumulate Namespaces
  **
  ** These are only hints.  If two overlap, only one gets used
  ** There is therefore no guarantee in general.
  */
  __Serializer.prototype.suggestPrefix = function (prefix, uri) {
    if (prefix.slice(0, 7) === 'default') return; // Try to weed these out
    if (prefix.slice(0, 2) === 'ns') return; //  From others inferior algos
    if (!prefix || !uri) return; // empty strings not suitable
    if (prefix in this.namespaces || uri in this.prefixes) return; // already used
    this.prefixes[uri] = prefix;
    this.namespaces[prefix] = uri;
  };

  // Takes a namespace -> prefix map
  __Serializer.prototype.suggestNamespaces = function (namespaces) {
    for (var px in namespaces) {
      this.suggestPrefix(px, namespaces[px]);
    }
    return this;
  };

  __Serializer.prototype.checkIntegrity = function () {
    var p, ns;
    for (p in this.namespaces) {
      if (this.prefixes[this.namespaces[p]] !== p) {
        throw new Error('Serializer integity error 1: ' + p + ', ' + this.namespaces[p] + ', ' + this.prefixes[this.namespaces[p]] + '!');
      }
    }
    for (ns in this.prefixes) {
      if (this.namespaces[this.prefixes[ns]] !== ns) {
        throw new Error('Serializer integity error 2: ' + ns + ', ' + this.prefixs[ns] + ', ' + this.namespaces[this.prefixes[ns]] + '!');
      }
    }
  };

  // Make up an unused prefix for a random namespace
  __Serializer.prototype.makeUpPrefix = function (uri) {
    var p = uri;
    function canUseMethod(pp) {
      if (!__Serializer.prototype.validPrefix.test(pp)) return false; // bad format
      if (pp === 'ns') return false; // boring
      if (pp in this.namespaces) return false; // already used
      this.prefixes[uri] = pp;
      this.namespaces[pp] = uri;
      return pp;
    }
    var canUse = canUseMethod.bind(this);

    if ('#/'.indexOf(p[p.length - 1]) >= 0) p = p.slice(0, -1);
    var slash = p.lastIndexOf('/');
    if (slash >= 0) p = p.slice(slash + 1);
    var i = 0;
    while (i < p.length) {
      if (this.prefixchars.indexOf(p[i])) {
        i++;
      } else {
        break;
      }
    }
    p = p.slice(0, i);

    if (p.length < 6 && canUse(p)) return p; // exact is best
    if (canUse(p.slice(0, 3))) return p.slice(0, 3);
    if (canUse(p.slice(0, 2))) return p.slice(0, 2);
    if (canUse(p.slice(0, 4))) return p.slice(0, 4);
    if (canUse(p.slice(0, 1))) return p.slice(0, 1);
    if (canUse(p.slice(0, 5))) return p.slice(0, 5);
    if (!__Serializer.prototype.validPrefix.test(p)) {
      p = 'n'; // Otherwise the loop below may never termimnate
    }
    for (var j = 0;; j++) {
      if (canUse(p.slice(0, 3) + j)) return p.slice(0, 3) + j;
    }
  };

  __Serializer.prototype.rootSubjects = function (sts) {
    var incoming = {};
    var subjects = {};
    var allBnodes = {};

    /* This scan is to find out which nodes will have to be the roots of trees
    ** in the serialized form. This will be any symbols, and any bnodes
    ** which hve more or less than one incoming arc, and any bnodes which have
    ** one incoming arc but it is an uninterrupted loop of such nodes back to itself.
    ** This should be kept linear time with repect to the number of statements.
    ** Note it does not use any indexing of the store.
    */
    for (var i = 0; i < sts.length; i++) {
      var st = sts[i];
      var checkMentions = function checkMentions(x) {
        if (!incoming.hasOwnProperty(x)) incoming[x] = [];
        incoming[x].push(st.subject); // List of things which will cause this to be printed
      };
      var st2 = [st.subject, st.predicate, st.object];
      st2.map(function (y) {
        if (y.termType === 'BlankNode') {
          allBnodes[y.toNT()] = true;
        } else if (y.termType === 'Collection') {
          y.elements.forEach(function (z) {
            checkMentions(z); // bnodes in collections important
          });
        }
      });
      checkMentions(sts[i].object);
      var ss = subjects[this.toStr(st.subject)]; // Statements with this as subject
      if (!ss) ss = [];
      ss.push(st);
      subjects[this.toStr(st.subject)] = ss; // Make hash. @@ too slow for formula?
    }

    var roots = [];
    for (var xNT in subjects) {
      if (!subjects.hasOwnProperty(xNT)) continue;
      var y = this.fromStr(xNT);
      if (y.termType !== 'BlankNode' || !incoming[y] || incoming[y].length !== 1) {
        roots.push(y);
        continue;
      }
    }
    this.incoming = incoming; // Keep for serializing @@ Bug for nested formulas

    // Now do the scan using existing roots
    var rootsHash = {};
    for (var k = 0; k < roots.length; k++) {
      rootsHash[roots[k].toNT()] = true;
    }
    return { 'roots': roots, 'subjects': subjects,
      'rootsHash': rootsHash, 'incoming': incoming };
  };

  // //////////////////////////////////////////////////////

  __Serializer.prototype.toN3 = function (f) {
    return this.statementsToN3(f.statements);
  };

  __Serializer.prototype._notQNameChars = '\t\r\n !"#$%&\'()*.,+/;<=>?@[\\]^`{|}~';
  __Serializer.prototype._notNameChars = __Serializer.prototype._notQNameChars + ':';

  __Serializer.prototype.explicitURI = function (uri) {
    if (this.flags.indexOf('r') < 0 && this.base) {
      uri = Uri.refTo(this.base, uri);
    } else if (this.flags.indexOf('u') >= 0) {
      // Unicode encoding NTriples style
      uri = backslashUify(uri);
    } else {
      uri = hexify(uri);
    }
    return '<' + uri + '>';
  };

  __Serializer.prototype.statementsToNTriples = function (sts) {
    var sorted = sts.slice();
    sorted.sort();
    var str = '';
    var rdfns = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
    var self = this;
    var kb = this.store;
    var termToNT = function termToNT(x) {
      if (x.termType !== 'Collection') {
        return self.atomicTermToN3(x);
      }
      var list = x.elements;
      var rest = kb.sym(rdfns + 'nill');
      for (var i = list.length - 1; i >= 0; i--) {
        var bnode = new BlankNode();
        str += termToNT(bnode) + ' ' + termToNT(kb.sym(rdfns + 'first')) + ' ' + termToNT(list[i]) + '.\n';
        str += termToNT(bnode) + ' ' + termToNT(kb.sym(rdfns + 'rest')) + ' ' + termToNT(rest) + '.\n';
        rest = bnode;
      }
      return self.atomicTermToN3(rest);
    };
    for (var i = 0; i < sorted.length; i++) {
      var st = sorted[i];
      var s = '';
      s += termToNT(st.subject) + ' ';
      s += termToNT(st.predicate) + ' ';
      s += termToNT(st.object) + ' ';
      if (this.flags.indexOf('q') >= 0) {
        // Do quads not nrtiples
        s += termToNT(st.why) + ' ';
      }
      s += '.\n';
      str += s;
    }
    return str;
  };

  __Serializer.prototype.statementsToN3 = function (sts) {
    var indent = 4;
    var width = 80;
    var kb = this.store;
    // A URI Map alows us to put the type statemnts at the top.
    var uriMap = { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'aaa:00' };
    var SPO = function SPO(x, y) {
      // Do limited canonicalization of bnodes
      return Util.heavyCompareSPO(x, y, kb, uriMap);
    };
    sts.sort(SPO);

    if (this.base && !this.defaultNamespace) {
      this.defaultNamespace = this.base + '#';
    }

    var predMap = {};
    if (this.flags.indexOf('s') < 0) {
      predMap['http://www.w3.org/2002/07/owl#sameAs'] = '=';
    }
    if (this.flags.indexOf('t') < 0) {
      predMap['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'] = 'a';
    }
    if (this.flags.indexOf('i') < 0) {
      predMap['http://www.w3.org/2000/10/swap/log#implies'] = '=>';
    }
    // //////////////////////// Arrange the bits of text

    var spaces = function spaces(n) {
      var s = '';
      for (var i = 0; i < n; i++) {
        s += ' ';
      }return s;
    };

    var treeToLine = function treeToLine(tree) {
      var str = '';
      for (var i = 0; i < tree.length; i++) {
        var branch = tree[i];
        var s2 = typeof branch === 'string' ? branch : treeToLine(branch);
        // Note the space before the dot in case statement ends 123. which is in fact allowed but be conservative.
        if (i !== 0) {
          var ch = str.slice(-1) || ' ';
          if (s2 === ',' || s2 === ';') {
            // no gap
          } else if (s2 === '.' && !'0123456789.'.includes(ch)) {// no gap except after number
            // no gap
          } else {
            str += ' '; // separate from previous token
          }
        }
        str += s2;
      }
      return str;
    };

    // Convert a nested tree of lists and strings to a string
    var treeToString = function treeToString(tree, level) {
      var str = '';
      var lastLength = 100000;
      if (level === undefined) level = -1;
      for (var i = 0; i < tree.length; i++) {
        var branch = tree[i];
        if (typeof branch !== 'string') {
          var substr = treeToString(branch, level + 1);
          if (substr.length < 10 * (width - indent * level) && substr.indexOf('"""') < 0) {
            // Don't mess up multiline strings
            var line = treeToLine(branch);
            if (line.length < width - indent * level) {
              branch = line; //   Note! treat as string below
              substr = '';
            }
          }
          if (substr) lastLength = 10000;
          str += substr;
        }
        if (typeof branch === 'string') {
          if (branch.length === 1 && str.slice(-1) === '\n') {
            if (',.;'.indexOf(branch) >= 0) {
              str = str.slice(0, -1) + branch + '\n'; //  slip punct'n on end
              lastLength += 1;
              continue;
            }
          }
          if (lastLength < indent * level + 4 || // if new line not necessary
          lastLength + branch.length + 1 < width && ';.'.indexOf(str[str.length - 2]) < 0) {
            // or the string fits on last line
            str = str.slice(0, -1) + ' ' + branch + '\n'; // then continue on this line
            lastLength += branch.length + 1;
          } else {
            var _line = spaces(indent * level) + branch;
            str += _line + '\n';
            lastLength = _line.length;
            if (level < 0) {
              str += '\n'; // extra blank line
              lastLength = 100000; // don't touch
            }
          }
        }
      }
      return str;
    };

    // //////////////////////////////////////////// Structure for N3
    // Convert a set of statements into a nested tree of lists and strings
    function statementListToTreeMethod(statements) {
      var stats = this.rootSubjects(statements);
      var roots = stats.roots;
      var results = [];
      for (var i = 0; i < roots.length; i++) {
        var root = roots[i];
        results.push(subjectTree(root, stats));
      }
      return results;
    }
    var statementListToTree = statementListToTreeMethod.bind(this);

    // The tree for a subject
    function subjectTree(subject, stats) {
      if (subject.termType === 'BlankNode' && !stats.incoming[subject]) {
        return objectTree(subject, stats, true).concat(['.']); // Anonymous bnode subject
      }
      return [termToN3(subject, stats)].concat([propertyTree(subject, stats)]).concat(['.']);
    }
    // The property tree for a single subject or anonymous node
    function propertyTreeMethod(subject, stats) {
      var results = [];
      var lastPred = null;
      var sts = stats.subjects[this.toStr(subject)] || []; // relevant statements
      if (typeof sts === 'undefined') {
        throw new Error('Cant find statements for ' + subject);
      }

      var objects = [];
      for (var i = 0; i < sts.length; i++) {
        var st = sts[i];
        if (st.predicate.uri === lastPred) {
          objects.push(',');
        } else {
          if (lastPred) {
            results = results.concat([objects]).concat([';']);
            objects = [];
          }
          results.push(predMap[st.predicate.uri] ? predMap[st.predicate.uri] : termToN3(st.predicate, stats));
        }
        lastPred = st.predicate.uri;
        objects.push(objectTree(st.object, stats));
      }
      results = results.concat([objects]);
      return results;
    }
    var propertyTree = propertyTreeMethod.bind(this);

    function objectTreeMethod(obj, stats, force) {
      if (obj.termType === 'BlankNode' && (force || stats.rootsHash[obj.toNT()] === undefined)) {
        // if not a root
        if (stats.subjects[this.toStr(obj)]) {
          return ['[', propertyTree(obj, stats), ']'];
        } else {
          return '[]';
        }
      }
      return termToN3(obj, stats);
    }
    var objectTree = objectTreeMethod.bind(this);

    function termToN3Method(expr, stats) {
      //
      var i, res;
      switch (expr.termType) {
        case 'Graph':
          res = ['{'];
          res = res.concat(statementListToTree(expr.statements));
          return res.concat(['}']);

        case 'Collection':
          res = ['('];
          for (i = 0; i < expr.elements.length; i++) {
            res.push([objectTree(expr.elements[i], stats)]);
          }
          res.push(')');
          return res;

        default:
          return this.atomicTermToN3(expr);
      }
    }
    __Serializer.prototype.termToN3 = termToN3;
    var termToN3 = termToN3Method.bind(this);

    function prefixDirectivesMethod() {
      var str = '';
      if (this.defaultNamespace) {
        str += '@prefix : ' + this.explicitURI(this.defaultNamespace) + '.\n';
      }
      for (var ns in this.prefixes) {
        if (!this.prefixes.hasOwnProperty(ns)) continue;
        if (!this.namespacesUsed[ns]) continue;
        str += '@prefix ' + this.prefixes[ns] + ': ' + this.explicitURI(ns) + '.\n';
      }
      return str + '\n';
    }
    var prefixDirectives = prefixDirectivesMethod.bind(this);
    // Body of statementsToN3:
    var tree = statementListToTree(sts);
    return prefixDirectives() + treeToString(tree);
  };
  // //////////////////////////////////////////// Atomic Terms

  //  Deal with term level things and nesting with no bnode structure
  __Serializer.prototype.atomicTermToN3 = function atomicTermToN3(expr, stats) {
    switch (expr.termType) {
      case 'BlankNode':
      case 'Variable':
        return expr.toNT();
      case 'Literal':
        var val = expr.value.toString(); // should be a string already
        if (expr.datatype && this.flags.indexOf('x') < 0) {
          // Supress native numbers
          switch (expr.datatype.uri) {

            case 'http://www.w3.org/2001/XMLSchema#integer':
              return val;

            case 'http://www.w3.org/2001/XMLSchema#decimal':
              // In urtle must have dot
              if (val.indexOf('.') < 0) val += '.0';
              return val;

            case 'http://www.w3.org/2001/XMLSchema#double':
              // Must force use of 'e'
              if (val.indexOf('.') < 0) val += '.0';
              if (val.indexOf('e') < 0) val += 'e0';
              return val;

            case 'http://www.w3.org/2001/XMLSchema#boolean':
              return expr.value ? 'true' : 'false';
          }
        }
        var str = this.stringToN3(expr.value);
        if (expr.language) {
          str += '@' + expr.language;
        } else if (!expr.datatype.equals(XSD.string)) {
          str += '^^' + this.atomicTermToN3(expr.datatype, stats);
        }
        return str;
      case 'NamedNode':
        return this.symbolToN3(expr);
      default:
        throw new Error('Internal: atomicTermToN3 cannot handle ' + expr + ' of termType: ' + expr.termType);
    }
  };

  //  stringToN3:  String escaping for N3

  __Serializer.prototype.validPrefix = new RegExp(/^[a-zA-Z][a-zA-Z0-9]*$/);

  __Serializer.prototype.forbidden1 = new RegExp(/[\\"\b\f\r\v\t\n\u0080-\uffff]/gm);
  __Serializer.prototype.forbidden3 = new RegExp(/[\\"\b\f\r\v\u0080-\uffff]/gm);
  __Serializer.prototype.stringToN3 = function stringToN3(str, flags) {
    if (!flags) flags = 'e';
    var res = '';
    var i, j, k;
    var delim;
    var forbidden;
    if (str.length > 20 && // Long enough to make sense
    str.slice(-1) !== '"' && // corner case'
    flags.indexOf('n') < 0 && ( // Force single line
    str.indexOf('\n') > 0 || str.indexOf('"') > 0)) {
      delim = '"""';
      forbidden = __Serializer.prototype.forbidden3;
    } else {
      delim = '"';
      forbidden = __Serializer.prototype.forbidden1;
    }
    for (i = 0; i < str.length;) {
      forbidden.lastIndex = 0;
      var m = forbidden.exec(str.slice(i));
      if (m == null) break;
      j = i + forbidden.lastIndex - 1;
      res += str.slice(i, j);
      var ch = str[j];
      if (ch === '"' && delim === '"""' && str.slice(j, j + 3) !== '"""') {
        res += ch;
      } else {
        k = '\b\f\r\t\v\n\\"'.indexOf(ch); // No escaping of bell (7)?
        if (k >= 0) {
          res += '\\' + 'bfrtvn\\"'[k];
        } else {
          if (flags.indexOf('e') >= 0) {
            // Unicode escaping in strings not unix style
            res += '\\u' + ('000' + ch.charCodeAt(0).toString(16).toLowerCase()).slice(-4);
          } else {
            // no 'e' flag
            res += ch;
          }
        }
      }
      i = j + 1;
    }
    return delim + res + str.slice(i) + delim;
  };
  //  A single symbol, either in  <> or namespace notation

  __Serializer.prototype.symbolToN3 = function symbolToN3(x) {
    // c.f. symbolString() in notation3.py
    var uri = x.uri;
    var j = uri.indexOf('#');
    if (j < 0 && this.flags.indexOf('/') < 0) {
      j = uri.lastIndexOf('/');
    }
    if (j >= 0 && this.flags.indexOf('p') < 0 && (
    // Can split at namespace but only if http[s]: URI or file: or ws[s] (why not others?)
    uri.indexOf('http') === 0 || uri.indexOf('ws') === 0 || uri.indexOf('file') === 0)) {
      var canSplit = true;
      for (var k = j + 1; k < uri.length; k++) {
        if (__Serializer.prototype._notNameChars.indexOf(uri[k]) >= 0) {
          canSplit = false;
          break;
        }
      }
      /*
            if (uri.slice(0, j + 1) === this.base + '#') { // base-relative
              if (canSplit) {
                return ':' + uri.slice(j + 1) // assume deafult ns is local
              } else {
                return '<#' + uri.slice(j + 1) + '>'
              }
            }
      */
      if (canSplit) {
        var localid = uri.slice(j + 1);
        var namesp = uri.slice(0, j + 1);
        if (this.defaultNamespace && this.defaultNamespace === namesp && this.flags.indexOf('d') < 0) {
          // d -> suppress default
          if (this.flags.indexOf('k') >= 0 && this.keyords.indexOf(localid) < 0) {
            return localid;
          }
          return ':' + localid;
        }
        // this.checkIntegrity() //  @@@ Remove when not testing
        var prefix = this.prefixes[namesp];
        if (!prefix) prefix = this.makeUpPrefix(namesp);
        if (prefix) {
          this.namespacesUsed[namesp] = true;
          return prefix + ':' + localid;
        }
        // Fall though if can't do qname
      }
    }
    return this.explicitURI(uri);
  };
  // String escaping utilities

  function hexify(str) {
    // also used in parser
    return encodeURI(str);
  }

  function backslashUify(str) {
    var res = '';
    var k;
    for (var i = 0; i < str.length; i++) {
      k = str.charCodeAt(i);
      if (k > 65535) {
        res += '\\U' + ('00000000' + k.toString(16)).slice(-8); // convert to upper?
      } else if (k > 126) {
        res += '\\u' + ('0000' + k.toString(16)).slice(-4);
      } else {
        res += str[i];
      }
    }
    return res;
  }

  // /////////////////////////// Quad store serialization

  // @para. write  - a function taking a single string to be output
  //
  __Serializer.prototype.writeStore = function (write) {
    var kb = this.store;
    var fetcher = kb.fetcher;
    var session = fetcher && fetcher.appNode;

    // The core data

    var sources = this.store.index[3];
    for (var s in sources) {
      // -> assume we can use -> as short for log:semantics
      var source = kb.fromNT(s);
      if (session && source.sameTerm(session)) continue;
      write('\n' + this.atomicTermToN3(source) + ' ' + this.atomicTermToN3(kb.sym('http://www.w3.org/2000/10/swap/log#semantics')) + ' { ' + this.statementsToN3(kb.statementsMatching(undefined, undefined, undefined, source)) + ' }.\n');
    }

    // The metadata from HTTP interactions:

    kb.statementsMatching(undefined, kb.sym('http://www.w3.org/2007/ont/link#requestedURI')).map(function (st) {
      write('\n<' + st.object.value + '> log:metadata {\n');
      var sts = kb.statementsMatching(undefined, undefined, undefined, st.subject);
      write(this.statementsToN3(this.statementsToN3(sts)));
      write('}.\n');
    });

    // Inferences we have made ourselves not attributable to anyone else

    var metaSources = [];
    if (session) metaSources.push(session);
    var metadata = [];
    metaSources.map(function (source) {
      metadata = metadata.concat(kb.statementsMatching(undefined, undefined, undefined, source));
    });
    write(this.statementsToN3(metadata));
  };

  // ////////////////////////////////////////////// XML serialization

  __Serializer.prototype.statementsToXML = function (sts) {
    var indent = 4;
    var width = 80;

    var namespaceCounts = []; // which have been used
    namespaceCounts['http://www.w3.org/1999/02/22-rdf-syntax-ns#'] = true;

    var liPrefix = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#_'; // prefix for ordered list items

    // //////////////////////// Arrange the bits of XML text

    var spaces = function spaces(n) {
      var s = '';
      for (var i = 0; i < n; i++) {
        s += ' ';
      }return s;
    };

    var XMLtreeToLine = function XMLtreeToLine(tree) {
      var str = '';
      for (var i = 0; i < tree.length; i++) {
        var branch = tree[i];
        var s2 = typeof branch === 'string' ? branch : XMLtreeToLine(branch);
        str += s2;
      }
      return str;
    };

    // Convert a nested tree of lists and strings to a string
    var XMLtreeToString = function XMLtreeToString(tree, level) {
      var str = '';
      var line;
      var lastLength = 100000;
      if (!level) level = 0;
      for (var i = 0; i < tree.length; i++) {
        var branch = tree[i];
        if (typeof branch !== 'string') {
          var substr = XMLtreeToString(branch, level + 1);
          if (substr.length < 10 * (width - indent * level) && substr.indexOf('"""') < 0) {
            // Don't mess up multiline strings
            line = XMLtreeToLine(branch);
            if (line.length < width - indent * level) {
              branch = '   ' + line; //   @@ Hack: treat as string below
              substr = '';
            }
          }
          if (substr) lastLength = 10000;
          str += substr;
        }
        if (typeof branch === 'string') {
          if (lastLength < indent * level + 4) {
            // continue
            str = str.slice(0, -1) + ' ' + branch + '\n';
            lastLength += branch.length + 1;
          } else {
            line = spaces(indent * level) + branch;
            str += line + '\n';
            lastLength = line.length;
          }
        } else {// not string
        }
      }
      return str;
    };

    function statementListToXMLTreeMethod(statements) {
      this.suggestPrefix('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
      var stats = this.rootSubjects(statements);
      var roots = stats.roots;
      var results = [];
      for (var i = 0; i < roots.length; i++) {
        var root = roots[i];
        results.push(subjectXMLTree(root, stats));
      }
      return results;
    }
    var statementListToXMLTree = statementListToXMLTreeMethod.bind(this);

    function escapeForXML(str) {
      if (typeof str === 'undefined') return '@@@undefined@@@@';
      return str.replace(/[&<"]/g, function (m) {
        switch (m[0]) {
          case '&':
            return '&amp;';
          case '<':
            return '&lt;';
          case '"':
            return '&quot;'; // '
        }
      });
    }

    function relURIMethod(term) {
      return escapeForXML(this.base ? Util.uri.refTo(this.base, term.uri) : term.uri);
    }
    var relURI = relURIMethod.bind(this);

    // The tree for a subject
    function subjectXMLTreeMethod(subject, stats) {
      var results = [];
      var type, t, st, pred;
      var sts = stats.subjects[this.toStr(subject)]; // relevant statements
      if (typeof sts === 'undefined') {
        // empty bnode
        return propertyXMLTree(subject, stats);
      }

      // Sort only on the predicate, leave the order at object
      // level undisturbed.  This leaves multilingual content in
      // the order of entry (for partner literals), which helps
      // readability.
      //
      // For the predicate sort, we attempt to split the uri
      // as a hint to the sequence
      sts.sort(function (a, b) {
        var ap = a.predicate.uri;
        var bp = b.predicate.uri;
        if (ap.substring(0, liPrefix.length) === liPrefix || bp.substring(0, liPrefix.length) === liPrefix) {
          // we're only interested in sorting list items
          return ap.localeCompare(bp);
        }

        var as = ap.substring(liPrefix.length);
        var bs = bp.substring(liPrefix.length);
        var an = parseInt(as, 10);
        var bn = parseInt(bs, 10);
        if (isNaN(an) || isNaN(bn) || an !== as || bn !== bs) {
          // we only care about integers
          return ap.localeCompare(bp);
        }

        return an - bn;
      });

      for (var i = 0; i < sts.length; i++) {
        st = sts[i];
        // look for a type
        if (st.predicate.uri === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' && !type && st.object.termType === 'symbol') {
          type = st.object;
          continue; // don't include it as a child element
        }

        // see whether predicate can be replaced with "li"
        pred = st.predicate;
        if (pred.uri.substr(0, liPrefix.length) === liPrefix) {
          var number = pred.uri.substr(liPrefix.length);
          // make sure these are actually numeric list items
          var intNumber = parseInt(number, 10);
          if (number === intNumber.toString()) {
            // was numeric; don't need to worry about ordering since we've already
            // sorted the statements
            pred = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#li');
          }
        }

        t = qname(pred);
        switch (st.object.termType) {
          case 'BlankNode':
            if (stats.incoming[st.object].length === 1) {
              // there should always be something in the incoming array for a bnode
              results = results.concat(['<' + t + ' rdf:parseType="Resource">', subjectXMLTree(st.object, stats), '</' + t + '>']);
            } else {
              results = results.concat(['<' + t + ' rdf:nodeID="' + st.object.toNT().slice(2) + '"/>']);
            }
            break;
          case 'NamedNode':
            results = results.concat(['<' + t + ' rdf:resource="' + relURI(st.object) + '"/>']);
            break;
          case 'Literal':
            results = results.concat(['<' + t + (st.object.datatype.equals(XSD.string) ? '' : ' rdf:datatype="' + escapeForXML(st.object.datatype.uri) + '"') + (st.object.language ? ' xml:lang="' + st.object.language + '"' : '') + '>' + escapeForXML(st.object.value) + '</' + t + '>']);
            break;
          case 'Collection':
            results = results.concat(['<' + t + ' rdf:parseType="Collection">', collectionXMLTree(st.object, stats), '</' + t + '>']);
            break;
          default:
            throw new Error("Can't serialize object of type " + st.object.termType + ' into XML');
        } // switch
      }

      var tag = type ? qname(type) : 'rdf:Description';

      var attrs = '';
      if (subject.termType === 'BlankNode') {
        if (!stats.incoming[subject] || stats.incoming[subject].length !== 1) {
          // not an anonymous bnode
          attrs = ' rdf:nodeID="' + subject.toNT().slice(2) + '"';
        }
      } else {
        attrs = ' rdf:about="' + relURI(subject) + '"';
      }

      return ['<' + tag + attrs + '>'].concat([results]).concat(['</' + tag + '>']);
    }

    var subjectXMLTree = subjectXMLTreeMethod.bind(this);

    function collectionXMLTree(subject, stats) {
      var res = [];
      for (var i = 0; i < subject.elements.length; i++) {
        res.push(subjectXMLTree(subject.elements[i], stats));
      }
      return res;
    }

    // The property tree for a single subject or anonymos node
    function propertyXMLTreeMethod(subject, stats) {
      var results = [];
      var sts = stats.subjects[this.toStr(subject)]; // relevant statements
      if (!sts) return results; // No relevant statements
      sts.sort();
      for (var i = 0; i < sts.length; i++) {
        var st = sts[i];
        switch (st.object.termType) {
          case 'BlankNode':
            if (stats.rootsHash[st.object.toNT()]) {
              // This bnode has been done as a root -- no content here @@ what bout first time
              results = results.concat(['<' + qname(st.predicate) + ' rdf:nodeID="' + st.object.toNT().slice(2) + '">', '</' + qname(st.predicate) + '>']);
            } else {
              results = results.concat(['<' + qname(st.predicate) + ' rdf:parseType="Resource">', propertyXMLTree(st.object, stats), '</' + qname(st.predicate) + '>']);
            }
            break;
          case 'NamedNode':
            results = results.concat(['<' + qname(st.predicate) + ' rdf:resource="' + relURI(st.object) + '"/>']);
            break;
          case 'Literal':
            results = results.concat(['<' + qname(st.predicate) + (st.object.datatype.equals(XSD.string) ? '' : ' rdf:datatype="' + escapeForXML(st.object.datatype.value) + '"') + (st.object.language ? ' xml:lang="' + st.object.language + '"' : '') + '>' + escapeForXML(st.object.value) + '</' + qname(st.predicate) + '>']);
            break;
          case 'Collection':
            results = results.concat(['<' + qname(st.predicate) + ' rdf:parseType="Collection">', collectionXMLTree(st.object, stats), '</' + qname(st.predicate) + '>']);
            break;
          default:
            throw new Error("Can't serialize object of type " + st.object.termType + ' into XML');
        } // switch
      }
      return results;
    }
    var propertyXMLTree = propertyXMLTreeMethod.bind(this);

    function qnameMethod(term) {
      var uri = term.uri;

      var j = uri.indexOf('#');
      if (j < 0 && this.flags.indexOf('/') < 0) {
        j = uri.lastIndexOf('/');
      }
      if (j < 0) throw new Error('Cannot make qname out of <' + uri + '>');

      for (var k = j + 1; k < uri.length; k++) {
        if (__Serializer.prototype._notNameChars.indexOf(uri[k]) >= 0) {
          throw new Error('Invalid character "' + uri[k] + '" cannot be in XML qname for URI: ' + uri);
        }
      }
      var localid = uri.slice(j + 1);
      var namesp = uri.slice(0, j + 1);
      if (this.defaultNamespace && this.defaultNamespace === namesp && this.flags.indexOf('d') < 0) {
        // d -> suppress default
        return localid;
      }
      var prefix = this.prefixes[namesp];
      if (!prefix) prefix = this.makeUpPrefix(namesp);
      namespaceCounts[namesp] = true;
      return prefix + ':' + localid;
    }
    var qname = qnameMethod.bind(this);

    // Body of toXML:

    var tree = statementListToXMLTree(sts);
    var str = '<rdf:RDF';
    if (this.defaultNamespace) {
      str += ' xmlns="' + escapeForXML(this.defaultNamespace) + '"';
    }
    for (var ns in namespaceCounts) {
      if (!namespaceCounts.hasOwnProperty(ns)) continue;
      // Rel uris in xml ns is not strictly allowed in the XMLNS spec but needed in practice often
      var ns2 = this.base && this.flags.includes('z') ? Util.uri.refTo(this.base, ns) : ns;
      str += '\n xmlns:' + this.prefixes[ns] + '="' + escapeForXML(ns2) + '"';
    }
    str += '>';

    var tree2 = [str, tree, '</rdf:RDF>']; // @@ namespace declrations
    return XMLtreeToString(tree2, -1);
  }; // End @@ body

  var Serializer = function Serializer(store) {
    return new __Serializer(store);
  };
  return Serializer;
}();

module.exports = Serializer;
},{"./blank-node":78,"./named-node":93,"./uri":108,"./util":109,"./xsd":111}],104:[function(_dereq_,module,exports){
'use strict';

// Converting between SPARQL queries and the $rdf query API
/*

function SQuery () {
  this.terms = []
  return this
}

STerm.prototype.toString = STerm.val
SQuery.prototype.add = function (str) {this.terms.push()}*/

var log = _dereq_('./log');
var Query = _dereq_('./query').Query;
// const Fetcher = require('./fetcher')

/**
 * @SPARQL: SPARQL text that is converted to a query object which is returned.
 * @testMode: testing flag. Prevents loading of sources.
 */
function SPARQLToQuery(SPARQL, testMode, kb) {
  // AJAR_ClearTable()
  var variableHash = [];
  function makeVar(name) {
    if (variableHash[name]) {
      return variableHash[name];
    }
    var newVar = kb.variable(name);
    variableHash[name] = newVar;
    return newVar;
  }

  // term type functions
  function isRealText(term) {
    return typeof term === 'string' && term.match(/[^ \n\t]/);
  }
  function isVar(term) {
    return typeof term === 'string' && term.match(/^[\?\$]/);
  }
  function fixSymbolBrackets(term) {
    if (typeof term === 'string') {
      return term.replace(/^&lt;/, '<').replace(/&gt;$/, '>');
    } else {
      return term;
    }
  }
  function isSymbol(term) {
    return typeof term === 'string' && term.match(/^<[^>]*>$/);
  }
  function isBnode(term) {
    return typeof term === 'string' && (term.match(/^_:/) || term.match(/^$/));
  }
  function isPrefix(term) {
    return typeof term === 'string' && term.match(/:$/);
  }
  function isPrefixedSymbol(term) {
    return typeof term === 'string' && term.match(/^:|^[^_][^:]*:/);
  }
  function getPrefix(term) {
    var a = term.split(':');
    return a[0];
  }
  function getSuffix(term) {
    var a = term.split(':');
    return a[1];
  }
  function removeBrackets(term) {
    if (isSymbol(term)) {
      return term.slice(1, term.length - 1);
    } else {
      return term;
    }
  }
  // takes a string and returns an array of strings and Literals in the place of literals
  function parseLiterals(str) {
    // var sin = (str.indexOf(/[ \n]\'/)==-1)?null:str.indexOf(/[ \n]\'/), doub = (str.indexOf(/[ \n]\"/)==-1)?null:str.indexOf(/[ \n]\"/)
    var sin = str.indexOf("'") === -1 ? null : str.indexOf("'");
    var doub = str.indexOf('"') === -1 ? null : str.indexOf('"');
    // alert("S: "+sin+" D: "+doub)
    if (!sin && !doub) {
      var a = new Array(1);
      a[0] = str;
      return a;
    }
    var res = new Array(2);
    var br;
    var ind;
    if (!sin || doub && doub < sin) {
      br = '"';
      ind = doub;
    } else if (!doub || sin && sin < doub) {
      br = "'";
      ind = sin;
    } else {
      log.error('SQARQL QUERY OOPS!');
      return res;
    }
    res[0] = str.slice(0, ind);
    var end = str.slice(ind + 1).indexOf(br);
    if (end === -1) {
      log.error('SPARQL parsing error: no matching parentheses in literal ' + str);
      return str;
    }
    // alert(str.slice(end + ind + 2).match(/^\^\^/))
    var end2;
    if (str.slice(end + ind + 2).match(/^\^\^/)) {
      end2 = str.slice(end + ind + 2).indexOf(' ');
      // alert(end2)
      res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), '', kb.sym(removeBrackets(str.slice(ind + 4 + end, ind + 2 + end + end2))));
      // alert(res[1].datatype.uri)
      res = res.concat(parseLiterals(str.slice(end + ind + 3 + end2)));
    } else if (str.slice(end + ind + 2).match(/^@/)) {
      end2 = str.slice(end + ind + 2).indexOf(' ');
      // alert(end2)
      res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), str.slice(ind + 3 + end, ind + 2 + end + end2), null);
      // alert(res[1].datatype.uri)
      res = res.concat(parseLiterals(str.slice(end + ind + 2 + end2)));
    } else {
      res[1] = kb.literal(str.slice(ind + 1, ind + 1 + end), '', null);
      log.info('Literal found: ' + res[1]);
      res = res.concat(parseLiterals(str.slice(end + ind + 2))); // finds any other literals
    }
    return res;
  }

  function spaceDelimit(str) {
    str = str.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').replace(/</g, ' <').replace(/>/g, '> ').replace(/{/g, ' { ').replace(/}/g, ' } ').replace(/[\t\n\r]/g, ' ').replace(/; /g, ' ; ').replace(/\. /g, ' . ').replace(/, /g, ' , ');
    log.info('New str into spaceDelimit: \n' + str);
    var res = [];
    var br = str.split(' ');
    for (var x in br) {
      if (isRealText(br[x])) {
        res = res.concat(br[x]);
      }
    }
    return res;
  }

  function replaceKeywords(input) {
    var strarr = input;
    for (var x = 0; x < strarr.length; x++) {
      if (strarr[x] === 'a') {
        strarr[x] = '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>';
      }
      if (strarr[x] === 'is' && strarr[x + 2] === 'of') {
        strarr.splice(x, 1);
        strarr.splice(x + 1, 1);
        var s = strarr[x - 1];
        strarr[x - 1] = strarr[x + 1];
        strarr[x + 1] = s;
      }
    }
    return strarr;
  }

  function toTerms(input) {
    var res = [];
    for (var x = 0; x < input.length; x++) {
      if (typeof input[x] !== 'string') {
        res[x] = input[x];
        continue;
      }
      input[x] = fixSymbolBrackets(input[x]);
      if (isVar(input[x])) {
        res[x] = makeVar(input[x].slice(1));
      } else if (isBnode(input[x])) {
        log.info(input[x] + ' was identified as a bnode.');
        res[x] = kb.bnode();
      } else if (isSymbol(input[x])) {
        log.info(input[x] + ' was identified as a symbol.');
        res[x] = kb.sym(removeBrackets(input[x]));
      } else if (isPrefixedSymbol(input[x])) {
        log.info(input[x] + ' was identified as a prefixed symbol');
        if (prefixes[getPrefix(input[x])]) {
          res[x] = kb.sym(input[x] = prefixes[getPrefix(input[x])] + getSuffix(input[x]));
        } else {
          log.error('SPARQL error: ' + input[x] + ' with prefix ' + getPrefix(input[x]) + ' does not have a correct prefix entry.');
          res[x] = input[x];
        }
      } else {
        res[x] = input[x];
      }
    }
    return res;
  }

  function tokenize(str) {
    var token1 = parseLiterals(str);
    var token2 = [];
    for (var x in token1) {
      if (typeof token1[x] === 'string') {
        token2 = token2.concat(spaceDelimit(token1[x]));
      } else {
        token2 = token2.concat(token1[x]);
      }
    }
    token2 = replaceKeywords(token2);
    log.info('SPARQL Tokens: ' + token2);
    return token2;
  }

  // CASE-INSENSITIVE
  function arrayIndexOf(str, arr) {
    for (var i = 0; i < arr.length; i++) {
      if (typeof arr[i] !== 'string') {
        continue;
      }
      if (arr[i].toLowerCase() === str.toLowerCase()) {
        return i;
      }
    }
    // log.warn("No instance of "+str+" in array "+arr)
    return null;
  }

  // CASE-INSENSITIVE
  function arrayIndicesOf(str, arr) {
    var ind = [];
    for (var i = 0; i < arr.length; i++) {
      if (typeof arr[i] !== 'string') {
        continue;
      }
      if (arr[i].toLowerCase() === str.toLowerCase()) {
        ind.push(i);
      }
    }
    return ind;
  }

  function setVars(input, query) {
    log.info('SPARQL vars: ' + input);
    for (var x in input) {
      if (isVar(input[x])) {
        log.info('Added ' + input[x] + ' to query variables from SPARQL');
        var v = makeVar(input[x].slice(1));
        query.vars.push(v);
        v.label = input[x].slice(1);
      } else {
        log.warn('Incorrect SPARQL variable in SELECT: ' + input[x]);
      }
    }
  }

  function getPrefixDeclarations(input) {
    var prefInd = arrayIndicesOf('PREFIX', input);
    var res = [];
    for (var i in prefInd) {
      var a = input[prefInd[i] + 1];
      var b = input[prefInd[i] + 2];
      if (!isPrefix(a)) {
        log.error('Invalid SPARQL prefix: ' + a);
      } else if (!isSymbol(b)) {
        log.error('Invalid SPARQL symbol: ' + b);
      } else {
        log.info('Prefix found: ' + a + ' -> ' + b);
        var pref = getPrefix(a);
        var symbol = removeBrackets(b);
        res[pref] = symbol;
      }
    }
    return res;
  }

  function getMatchingBracket(arr, open, close) {
    log.info('Looking for a close bracket of type ' + close + ' in ' + arr);
    var index = 0;
    for (var i = 0; i < arr.length; i++) {
      if (arr[i] === open) {
        index++;
      }
      if (arr[i] === close) {
        index--;
      }
      if (index < 0) {
        return i;
      }
    }
    log.error('Statement had no close parenthesis in SPARQL query');
    return 0;
  }

  function constraintGreaterThan(value) {
    this.describe = function (varstr) {
      return varstr + ' > ' + value.toNT();
    };
    this.test = function (term) {
      if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) {
        return parseFloat(term.value) > parseFloat(value);
      } else {
        return term.toNT() > value.toNT();
      }
    };
    return this;
  }

  function constraintLessThan(value) {
    // this is not the recommended usage. Should only work on literal, numeric, dateTime
    this.describe = function (varstr) {
      return varstr + ' < ' + value.toNT();
    };
    this.test = function (term) {
      // this.describe = function (varstr) { return varstr + " < "+value }
      if (term.value.match(/[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/)) {
        return parseFloat(term.value) < parseFloat(value);
      } else {
        return term.toNT() < value.toNT();
      }
    };
    return this;
  }
  // This should only work on literals but doesn't.
  function ConstraintEqualTo(value) {
    this.describe = function (varstr) {
      return varstr + ' = ' + value.toNT();
    };
    this.test = function (term) {
      return value.sameTerm(term);
    };
    return this;
  }

  // value must be a literal
  function ConstraintRegexp(value) {
    this.describe = function (varstr) {
      return "REGEXP( '" + value + "' , " + varstr + ' )';
    };
    this.test = function (term) {
      var str = value;
      // str = str.replace(/^//,"").replace(//$/,"")
      var rg = new RegExp(str);
      if (term.value) {
        return rg.test(term.value);
      } else {
        return false;
      }
    };
  }

  function setConstraint(input, pat) {
    if (input.length === 3 && input[0].termType === 'Variable' && (input[2].termType === 'NamedNode' || input[2].termType === 'Literal')) {
      if (input[1] === '=') {
        log.debug('Constraint added: ' + input);
        pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
      } else if (input[1] === '>') {
        log.debug('Constraint added: ' + input);
        pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
      } else if (input[1] === '<') {
        log.debug('Constraint added: ' + input);
        pat.constraints[input[0]] = new ConstraintEqualTo(input[2]);
      } else {
        log.warn("I don't know how to handle the constraint: " + input);
      }
    } else if (input.length === 6 && typeof input[0] === 'string' && input[0].toLowerCase() === 'regexp' && input[1] === '(' && input[5] === ')' && input[3] === ',' && input[4].termType === 'Variable' && input[2].termType === 'Literal') {
      log.debug('Constraint added: ' + input);
      pat.constraints[input[4]] = new ConstraintRegexp(input[2].value);
    }
    // log.warn("I don't know how to handle the constraint: "+input)
    // alert("length: "+input.length+" input 0 type: "+input[0].termType+" input 1: "+input[1]+" input[2] type: "+input[2].termType)
  }

  function setOptional(terms, pat) {
    log.debug('Optional query: ' + terms + ' not yet implemented.');
    var opt = kb.formula();
    setWhere(terms, opt);
    pat.optional.push(opt);
  }

  function setWhere(input, pat) {
    var terms = toTerms(input);
    var end;
    log.debug('WHERE: ' + terms);
    var opt;
    // var opt = arrayIndicesOf("OPTIONAL",terms)
    while (arrayIndexOf('OPTIONAL', terms)) {
      opt = arrayIndexOf('OPTIONAL', terms);
      log.debug('OPT: ' + opt + ' ' + terms[opt] + ' in ' + terms);
      if (terms[opt + 1] !== '{') {
        log.warn('Bad optional opening bracket in word ' + opt);
      }
      end = getMatchingBracket(terms.slice(opt + 2), '{', '}');
      if (end === -1) {
        log.error('No matching bracket in word ' + opt);
      } else {
        setOptional(terms.slice(opt + 2, opt + 2 + end), pat);
        // alert(pat.statements[0].toNT())
        opt = arrayIndexOf('OPTIONAL', terms);
        end = getMatchingBracket(terms.slice(opt + 2), '{', '}');
        terms.splice(opt, end + 3);
      }
    }
    log.debug('WHERE after optionals: ' + terms);
    while (arrayIndexOf('FILTER', terms)) {
      var filt = arrayIndexOf('FILTER', terms);
      if (terms[filt + 1] !== '(') {
        log.warn('Bad filter opening bracket in word ' + filt);
      }
      end = getMatchingBracket(terms.slice(filt + 2), '(', ')');
      if (end === -1) {
        log.error('No matching bracket in word ' + filt);
      } else {
        setConstraint(terms.slice(filt + 2, filt + 2 + end), pat);
        filt = arrayIndexOf('FILTER', terms);
        end = getMatchingBracket(terms.slice(filt + 2), '(', ')');
        terms.splice(filt, end + 3);
      }
    }
    log.debug('WHERE after filters and optionals: ' + terms);
    extractStatements(terms, pat);
  }

  function extractStatements(terms, formula) {
    var arrayZero = new Array(1);
    arrayZero[0] = -1; // this is just to add the beginning of the where to the periods index.
    var per = arrayZero.concat(arrayIndicesOf('.', terms));
    var stat = [];
    for (var x = 0; x < per.length - 1; x++) {
      stat[x] = terms.slice(per[x] + 1, per[x + 1]);
    }
    // Now it's in an array of statements
    for (x in stat) {
      // THIS MUST BE CHANGED FOR COMMA, SEMICOLON
      log.info('s+p+o ' + x + ' = ' + stat[x]);
      var subj = stat[x][0];
      stat[x].splice(0, 1);
      var sem = arrayZero.concat(arrayIndicesOf(';', stat[x]));
      sem.push(stat[x].length);
      var stat2 = [];
      for (var y = 0; y < sem.length - 1; y++) {
        stat2[y] = stat[x].slice(sem[y] + 1, sem[y + 1]);
      }
      for (x in stat2) {
        log.info('p+o ' + x + ' = ' + stat[x]);
        var pred = stat2[x][0];
        stat2[x].splice(0, 1);
        var com = arrayZero.concat(arrayIndicesOf(',', stat2[x]));
        com.push(stat2[x].length);
        var stat3 = [];
        for (y = 0; y < com.length - 1; y++) {
          stat3[y] = stat2[x].slice(com[y] + 1, com[y + 1]);
        }
        for (x in stat3) {
          var obj = stat3[x][0];
          log.info('Subj=' + subj + ' Pred=' + pred + ' Obj=' + obj);
          formula.add(subj, pred, obj);
        }
      }
    }
  }

  // ******************************* Body of SPARQLToQuery ***************************//
  log.info('SPARQL input: \n' + SPARQL);
  var q = new Query();
  var sp = tokenize(SPARQL); // first tokenize everything
  var prefixes = getPrefixDeclarations(sp);
  if (!prefixes.rdf) {
    prefixes.rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
  }
  if (!prefixes.rdfs) {
    prefixes.rdfs = 'http://www.w3.org/2000/01/rdf-schema#';
  }
  var selectLoc = arrayIndexOf('SELECT', sp);
  var whereLoc = arrayIndexOf('WHERE', sp);
  if (selectLoc < 0 || whereLoc < 0 || selectLoc > whereLoc) {
    log.error('Invalid or nonexistent SELECT and WHERE tags in SPARQL query');
    return false;
  }
  setVars(sp.slice(selectLoc + 1, whereLoc), q);

  setWhere(sp.slice(whereLoc + 2, sp.length - 1), q.pat);

  if (testMode) {
    return q;
  }

  for (var x in q.pat.statements) {
    var st = q.pat.statements[x];
    if (st.subject.termType === 'NamedNode') {
      /* && sf.isPending(st.subject.uri) */ // This doesn't work.
      // sf.requestURI(st.subject.uri,"sparql:"+st.subject) Kenny: I remove these two
      if (kb.fetcher) {
        kb.fetcher.lookUpThing(st.subject, 'sparql:' + st.subject);
      }
    }
    if (st.object.termType === 'NamedNode') {
      /* && sf.isPending(st.object.uri) */
      // sf.requestURI(st.object.uri,"sparql:"+st.object)
      if (kb.fetcher) {
        kb.fetcher.lookUpThing(st.object, 'sparql:' + st.object);
      }
    }
  }
  // alert(q.pat)
  return q;
  // checkVars()
  // *******************************************************************//
}

module.exports = SPARQLToQuery;
},{"./log":91,"./query":99}],105:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = _dereq_('./node');

var Statement = function () {
  function Statement(subject, predicate, object, graph) {
    _classCallCheck(this, Statement);

    this.subject = Node.fromValue(subject);
    this.predicate = Node.fromValue(predicate);
    this.object = Node.fromValue(object);
    this.why = graph; // property currently used by rdflib
  }

  _createClass(Statement, [{
    key: 'equals',
    value: function equals(other) {
      return other.subject.equals(this.subject) && other.predicate.equals(this.predicate) && other.object.equals(this.object) && other.graph.equals(this.graph);
    }
  }, {
    key: 'substitute',
    value: function substitute(bindings) {
      var y = new Statement(this.subject.substitute(bindings), this.predicate.substitute(bindings), this.object.substitute(bindings), this.why.substitute(bindings)); // 2016
      console.log('@@@ statement substitute:' + y);
      return y;
    }
  }, {
    key: 'toCanonical',
    value: function toCanonical() {
      var terms = [this.subject.toCanonical(), this.predicate.toCanonical(), this.object.toCanonical()];
      if (this.graph && this.graph.termType !== 'DefaultGraph') {
        terms.push(this.graph.toCanonical());
      }
      return terms.join(' ') + ' .';
    }
  }, {
    key: 'toNT',
    value: function toNT() {
      return [this.subject.toNT(), this.predicate.toNT(), this.object.toNT()].join(' ') + ' .';
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.toNT();
    }
  }, {
    key: 'graph',
    get: function get() {
      return this.why;
    },
    set: function set(g) {
      this.why = g;
    }
  }]);

  return Statement;
}();

module.exports = Statement;
},{"./node":95}],106:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _indexedFormula = _dereq_('./indexed-formula');

var _indexedFormula2 = _interopRequireDefault(_indexedFormula);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Joe Presbrey <presbrey@mit.edu>
// 2007-07-15
// 2010-08-08 TimBL folded in Kenny's WEBDAV
// 2010-12-07 TimBL addred local file write code
var docpart = _dereq_('./uri').docpart;
var Fetcher = _dereq_('./fetcher');
var graph = _dereq_('./data-factory').graph;

var namedNode = _dereq_('./data-factory').namedNode;
var Namespace = _dereq_('./namespace');
var Serializer = _dereq_('./serializer');
var uriJoin = _dereq_('./uri').join;
var Util = _dereq_('./util');

var UpdateManager = function () {
  var sparql = function sparql(store) {
    this.store = store;
    if (store.updater) {
      throw new Error("You can't have two UpdateManagers for the same store");
    }
    if (!store.fetcher) {
      // The store must also/already have a fetcher
      new Fetcher(store);
    }
    store.updater = this;
    this.ifps = {};
    this.fps = {};
    this.ns = {};
    this.ns.link = Namespace('http://www.w3.org/2007/ont/link#');
    this.ns.http = Namespace('http://www.w3.org/2007/ont/http#');
    this.ns.httph = Namespace('http://www.w3.org/2007/ont/httph#');
    this.ns.ldp = Namespace('http://www.w3.org/ns/ldp#');
    this.ns.rdf = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#');
    this.ns.rdfs = Namespace('http://www.w3.org/2000/01/rdf-schema#');
    this.ns.rdf = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#');
    this.ns.owl = Namespace('http://www.w3.org/2002/07/owl#');

    this.patchControl = []; // index of objects fro coordinating incomng and outgoing patches
  };

  sparql.prototype.patchControlFor = function (doc) {
    if (!this.patchControl[doc.uri]) {
      this.patchControl[doc.uri] = [];
    }
    return this.patchControl[doc.uri];
  };

  // Returns The method string SPARQL or DAV or LOCALFILE or false if known, undefined if not known.
  //
  // Files have to have a specific annotaton that they are machine written, for safety.
  // We don't actually check for write access on files.
  //
  sparql.prototype.editable = function (uri, kb) {
    if (!uri) {
      return false; // Eg subject is bnode, no known doc to write to
    }
    if (!kb) {
      kb = this.store;
    }

    if (uri.slice(0, 8) === 'file:///') {
      if (kb.holds(kb.sym(uri), namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), namedNode('http://www.w3.org/2007/ont/link#MachineEditableDocument'))) {
        return 'LOCALFILE';
      }

      var sts = kb.statementsMatching(kb.sym(uri), undefined, undefined);

      console.log('sparql.editable: Not MachineEditableDocument file ' + uri + '\n');
      console.log(sts.map(function (x) {
        return x.toNT();
      }).join('\n'));
      return false;
      // @@ Would be nifty of course to see whether we actually have write acess first.
    }

    var request;
    var definitive = false;
    var requests = kb.each(undefined, this.ns.link('requestedURI'), docpart(uri));

    // Hack for the moment @@@@ 2016-02-12
    if (kb.holds(namedNode(uri), this.ns.rdf('type'), this.ns.ldp('Resource'))) {
      return 'SPARQL';
    }
    var i;
    var method;
    for (var r = 0; r < requests.length; r++) {
      request = requests[r];
      if (request !== undefined) {
        var response = kb.any(request, this.ns.link('response'));
        if (request !== undefined) {
          var acceptPatch = kb.each(response, this.ns.httph('accept-patch'));
          if (acceptPatch.length) {
            for (i = 0; i < acceptPatch.length; i++) {
              method = acceptPatch[i].value.trim();
              if (method.indexOf('application/sparql-update') >= 0) return 'SPARQL';
            }
          }
          var author_via = kb.each(response, this.ns.httph('ms-author-via'));
          if (author_via.length) {
            for (i = 0; i < author_via.length; i++) {
              method = author_via[i].value.trim();
              if (method.indexOf('SPARQL') >= 0) {
                return 'SPARQL';
              }
              if (method.indexOf('DAV') >= 0) {
                return 'DAV';
              }
            }
          }
          var status = kb.each(response, this.ns.http('status'));
          if (status.length) {
            for (i = 0; i < status.length; i++) {
              if (status[i] === 200 || status[i] === 404) {
                definitive = true;
                // return false // A definitive answer
              }
            }
          }
        } else {
          console.log('sparql.editable: No response for ' + uri + '\n');
        }
      }
    }
    if (requests.length === 0) {
      console.log('sparql.editable: No request for ' + uri + '\n');
    } else {
      if (definitive) {
        return false; // We have got a request and it did NOT say editable => not editable
      }
    }
    console.log('sparql.editable: inconclusive for ' + uri + '\n');
    return undefined; // We don't know (yet) as we haven't had a response (yet)
  };

  // /////////  The identification of bnodes

  sparql.prototype.anonymize = function (obj) {
    return obj.toNT().substr(0, 2) === '_:' && this._mentioned(obj) ? '?' + obj.toNT().substr(2) : obj.toNT();
  };

  sparql.prototype.anonymizeNT = function (stmt) {
    return this.anonymize(stmt.subject) + ' ' + this.anonymize(stmt.predicate) + ' ' + this.anonymize(stmt.object) + ' .';
  };

  // A list of all bnodes occuring in a statement
  sparql.prototype._statement_bnodes = function (st) {
    return [st.subject, st.predicate, st.object].filter(function (x) {
      return x.isBlank;
    });
  };

  // A list of all bnodes occuring in a list of statements
  sparql.prototype._statement_array_bnodes = function (sts) {
    var bnodes = [];
    for (var i = 0; i < sts.length; i++) {
      bnodes = bnodes.concat(this._statement_bnodes(sts[i]));
    }
    bnodes.sort(); // in place sort - result may have duplicates
    var bnodes2 = [];
    for (var j = 0; j < bnodes.length; j++) {
      if (j === 0 || !bnodes[j].sameTerm(bnodes[j - 1])) {
        bnodes2.push(bnodes[j]);
      }
    }
    return bnodes2;
  };

  sparql.prototype._cache_ifps = function () {
    // Make a cached list of [Inverse-]Functional properties
    // Call this once before calling context_statements
    this.ifps = {};
    var a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('InverseFunctionalProperty'));
    for (var i = 0; i < a.length; i++) {
      this.ifps[a[i].uri] = true;
    }
    this.fps = {};
    a = this.store.each(undefined, this.ns.rdf('type'), this.ns.owl('FunctionalProperty'));
    for (i = 0; i < a.length; i++) {
      this.fps[a[i].uri] = true;
    }
  };

  // Returns a context to bind a given node, up to a given depth
  sparql.prototype._bnode_context2 = function (x, source, depth) {
    // Return a list of statements which indirectly identify a node
    //  Depth > 1 if try further indirection.
    //  Return array of statements (possibly empty), or null if failure
    var sts = this.store.statementsMatching(undefined, undefined, x, source); // incoming links
    var y;
    var res;
    for (var i = 0; i < sts.length; i++) {
      if (this.fps[sts[i].predicate.uri]) {
        y = sts[i].subject;
        if (!y.isBlank) {
          return [sts[i]];
        }
        if (depth) {
          res = this._bnode_context2(y, source, depth - 1);
          if (res) {
            return res.concat([sts[i]]);
          }
        }
      }
    }
    // outgoing links
    sts = this.store.statementsMatching(x, undefined, undefined, source);
    for (i = 0; i < sts.length; i++) {
      if (this.ifps[sts[i].predicate.uri]) {
        y = sts[i].object;
        if (!y.isBlank) {
          return [sts[i]];
        }
        if (depth) {
          res = this._bnode_context2(y, source, depth - 1);
          if (res) {
            return res.concat([sts[i]]);
          }
        }
      }
    }
    return null; // Failure
  };

  // Returns the smallest context to bind a given single bnode
  sparql.prototype._bnode_context_1 = function (x, source) {
    // Return a list of statements which indirectly identify a node
    //   Breadth-first
    var self = this;
    for (var depth = 0; depth < 3; depth++) {
      // Try simple first
      var con = this._bnode_context2(x, source, depth);
      if (con !== null) return con;
    }
    // If we can't guarantee unique with logic just send all info about node
    return this.store.connectedStatements(x, source); // was:
    // throw new Error('Unable to uniquely identify bnode: ' + x.toNT())
  };

  sparql.prototype._mentioned = function (x) {
    return this.store.statementsMatching(x).length !== 0 || // Don't pin fresh bnodes
    this.store.statementsMatching(undefined, x).length !== 0 || this.store.statementsMatching(undefined, undefined, x).length !== 0;
  };

  sparql.prototype._bnode_context = function (bnodes, doc) {
    var context = [];
    if (bnodes.length) {
      this._cache_ifps();
      for (var i = 0; i < bnodes.length; i++) {
        // Does this occur in old graph?
        var bnode = bnodes[i];
        if (!this._mentioned(bnode)) continue;
        context = context.concat(this._bnode_context_1(bnode, doc));
      }
    }
    return context;
  };

  /*  Weird code does not make sense -- some code corruption along the line -- st undefined -- weird
      sparql.prototype._bnode_context = function(bnodes) {
          var context = []
          if (bnodes.length) {
              if (this.store.statementsMatching(st.subject.isBlank?undefined:st.subject,
                                        st.predicate.isBlank?undefined:st.predicate,
                                        st.object.isBlank?undefined:st.object,
                                        st.why).length <= 1) {
                  context = context.concat(st)
              } else {
                  this._cache_ifps()
                  for (x in bnodes) {
                      context = context.concat(this._bnode_context_1(bnodes[x], st.why))
                  }
              }
          }
          return context
      }
  */
  // Returns the best context for a single statement
  sparql.prototype._statement_context = function (st) {
    var bnodes = this._statement_bnodes(st);
    return this._bnode_context(bnodes, st.why);
  };

  sparql.prototype._context_where = function (context) {
    var sparql = this;
    return !context || context.length === 0 ? '' : 'WHERE { ' + context.map(function (x) {
      return sparql.anonymizeNT(x);
    }).join('\n') + ' }\n';
  };

  sparql.prototype._fire = function (uri, query, callback) {
    if (!uri) {
      throw new Error('No URI given for remote editing operation: ' + query);
    }
    console.log('sparql: sending update to <' + uri + '>');
    var xhr = Util.XMLHTTPFactory();
    xhr.options = {};

    xhr.onreadystatechange = function () {
      // dump("SPARQL update ready state for <"+uri+"> readyState="+xhr.readyState+"\n"+query+"\n")
      if (xhr.readyState === 4) {
        var success = !xhr.status || xhr.status >= 200 && xhr.status < 300;
        if (!success) {
          console.log('sparql: update failed for <' + uri + '> status=' + xhr.status + ', ' + xhr.statusText + ', body length=' + xhr.responseText.length + '\n   for query: ' + query);
        } else {
          console.log('sparql: update Ok for <' + uri + '>');
        }
        callback(uri, success, xhr.responseText, xhr);
      }
    };

    xhr.open('PATCH', uri, true); // async=true
    xhr.setRequestHeader('Content-type', 'application/sparql-update');
    xhr.send(query);
  };

  // This does NOT update the statement.
  // It returns an object whcih includes
  //  function which can be used to change the object of the statement.
  //
  sparql.prototype.update_statement = function (statement) {
    if (statement && !statement.why) {
      return;
    }
    var sparql = this;
    var context = this._statement_context(statement);

    return {
      statement: statement ? [statement.subject, statement.predicate, statement.object, statement.why] : undefined,
      statementNT: statement ? this.anonymizeNT(statement) : undefined,
      where: sparql._context_where(context),

      set_object: function set_object(obj, callback) {
        var query = this.where;
        query += 'DELETE DATA { ' + this.statementNT + ' } ;\n';
        query += 'INSERT DATA { ' + this.anonymize(this.statement[0]) + ' ' + this.anonymize(this.statement[1]) + ' ' + this.anonymize(obj) + ' ' + ' . }\n';

        sparql._fire(this.statement[3].uri, query, callback);
      }
    };
  };

  sparql.prototype.insert_statement = function (st, callback) {
    var st0 = st instanceof Array ? st[0] : st;
    var query = this._context_where(this._statement_context(st0));

    if (st instanceof Array) {
      var stText = '';
      for (var i = 0; i < st.length; i++) {
        stText += st[i] + '\n';
      }query += 'INSERT DATA { ' + stText + ' }\n';
    } else {
      query += 'INSERT DATA { ' + this.anonymize(st.subject) + ' ' + this.anonymize(st.predicate) + ' ' + this.anonymize(st.object) + ' ' + ' . }\n';
    }

    this._fire(st0.why.uri, query, callback);
  };

  sparql.prototype.delete_statement = function (st, callback) {
    var st0 = st instanceof Array ? st[0] : st;
    var query = this._context_where(this._statement_context(st0));

    if (st instanceof Array) {
      var stText = '';
      for (var i = 0; i < st.length; i++) {
        stText += st[i] + '\n';
      }query += 'DELETE DATA { ' + stText + ' }\n';
    } else {
      query += 'DELETE DATA { ' + this.anonymize(st.subject) + ' ' + this.anonymize(st.predicate) + ' ' + this.anonymize(st.object) + ' ' + ' . }\n';
    }

    this._fire(st0.why.uri, query, callback);
  };

  //  Request a now or future action to refresh changes coming downstream
  //
  // This is designed to allow the system to re-request the server version,
  // when a websocket has pinged to say there are changes.
  // If thewebsocket, by contrast, has sent a patch, then this may not be necessary.
  // This may be called out of context so *this* cannot be used.

  sparql.prototype.requestDownstreamAction = function (doc, action) {
    var control = this.patchControlFor(doc);
    if (!control.pendingUpstream) {
      action(doc);
    } else {
      if (control.downstreamAction) {
        if (control.downstreamAction === action) {
          return;
        } else {
          throw new Error("Can't wait for > 1 differnt downstream actions");
        }
      } else {
        control.downstreamAction = action;
      }
    }
  };

  // We want to start counting websockt notifications
  // to distinguish the ones from others from our own.
  sparql.prototype.clearUpstreamCount = function (doc) {
    var control = this.patchControlFor(doc);
    control.upstreamCount = 0;
  };

  sparql.prototype.getUpdatesVia = function (doc) {
    var linkHeaders = this.store.fetcher.getHeader(doc, 'updates-via');
    if (!linkHeaders || !linkHeaders.length) return null;
    return linkHeaders[0].trim();
  };

  sparql.prototype.addDownstreamChangeListener = function (doc, listener) {
    var control = this.patchControlFor(doc);
    if (!control.downstreamChangeListeners) control.downstreamChangeListeners = [];
    control.downstreamChangeListeners.push(listener);
    var self = this;
    this.setRefreshHandler(doc, function (doc) {
      // a function not a method
      self.reloadAndSync(doc);
    });
  };

  sparql.prototype.reloadAndSync = function (doc) {
    var control = this.patchControlFor(doc);
    var updater = this;

    if (control.reloading) {
      console.log('   Already reloading - stop');
      return; // once only needed
    }
    control.reloading = true;
    var retryTimeout = 1000; // ms
    var tryReload = function tryReload() {
      console.log('try reload - timeout = ' + retryTimeout);
      updater.reload(updater.store, doc, function (ok, message, xhr) {
        control.reloading = false;
        if (ok) {
          if (control.downstreamChangeListeners) {
            for (var i = 0; i < control.downstreamChangeListeners.length; i++) {
              console.log('        Calling downstream listener ' + i);
              control.downstreamChangeListeners[i]();
            }
          }
        } else {
          if (xhr.status === 0) {
            console.log('Network error refreshing the data. Retrying in ' + retryTimeout / 1000);
            control.reloading = true;
            retryTimeout = retryTimeout * 2;
            setTimeout(tryReload, retryTimeout);
          } else {
            console.log('Error ' + xhr.status + 'refreshing the data:' + message + '. Stopped' + doc);
          }
        }
      });
    };
    tryReload();
  };

  // Set up websocket to listen on
  //
  // There is coordination between upstream changes and downstream ones
  // so that a reload is not done in the middle of an upsteeam patch.
  // If you usie this API then you get called when a change happens, and you
  // have to reload the file yourself, and then refresh the UI.
  // Alternative is addDownstreamChangeListener(), where you do not
  // have to do the reload yourslf. Do mot mix them.
  //
  //  kb contains the HTTP  metadata from prefvious operations
  //
  sparql.prototype.setRefreshHandler = function (doc, handler) {
    var wssURI = this.getUpdatesVia(doc); // relative
    // var kb = this.store
    var theHandler = handler;
    var self = this;
    var updater = this;
    var retryTimeout = 1500; // *2 will be 3 Seconds, 6, 12, etc
    var retries = 0;

    if (!wssURI) {
      console.log('Server doies not support live updates thoughUpdates-Via :-(');
      return false;
    }

    wssURI = uriJoin(wssURI, doc.uri);
    wssURI = wssURI.replace(/^http:/, 'ws:').replace(/^https:/, 'wss:');
    console.log('Web socket URI ' + wssURI);

    var openWebsocket = function openWebsocket() {
      // From https://github.com/solid/solid-spec#live-updates
      var socket;
      if (typeof WebSocket !== 'undefined') {
        socket = new WebSocket(wssURI);
      } else if (typeof Services !== 'undefined') {
        // Firefox add on http://stackoverflow.com/questions/24244886/is-websocket-supported-in-firefox-for-android-addons
        socket = Services.wm.getMostRecentWindow('navigator:browser').WebSocket(wssURI);
      } else if (typeof window !== 'undefined' && window.WebSocket) {
        socket = window.WebSocket(wssURI);
      } else {
        console.log('Live update disabled, as WebSocket not supported by platform :-(');
        return;
      }
      socket.onopen = function () {
        console.log('    websocket open');
        retryTimeout = 1500; // reset timeout to fast on success
        this.send('sub ' + doc.uri);
        if (retries) {
          console.log('Web socket has been down, better check for any news.');
          updater.requestDownstreamAction(doc, theHandler);
        }
      };
      var control = self.patchControlFor(doc);
      control.upstreamCount = 0;

      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
      //
      // 1000	CLOSE_NORMAL	Normal closure; the connection successfully completed whatever purpose for which it was created.
      // 1001	CLOSE_GOING_AWAY	The endpoint is going away, either
      //                                  because of a server failure or because the browser is navigating away from the page that opened the connection.
      // 1002	CLOSE_PROTOCOL_ERROR	The endpoint is terminating the connection due to a protocol error.
      // 1003	CLOSE_UNSUPPORTED	The connection is being terminated because the endpoint
      //                                  received data of a type it cannot accept (for example, a text-only endpoint received binary data).
      // 1004                             Reserved. A meaning might be defined in the future.
      // 1005	CLOSE_NO_STATUS	Reserved.  Indicates that no status code was provided even though one was expected.
      // 1006	CLOSE_ABNORMAL	Reserved. Used to indicate that a connection was closed abnormally (
      //
      //
      socket.onclose = function (event) {
        console.log('*** Websocket closed with code ' + event.code + ", reason '" + event.reason + "' clean = " + event.clean);
        retryTimeout *= 2;
        retries += 1;
        console.log('Retrying in ' + retryTimeout + 'ms'); // (ask user?)
        setTimeout(function () {
          console.log('Trying websocket again');
          openWebsocket();
        }, retryTimeout);
      };
      socket.onmessage = function (msg) {
        if (msg.data && msg.data.slice(0, 3) === 'pub') {
          if ('upstreamCount' in control) {
            control.upstreamCount -= 1;
            if (control.upstreamCount >= 0) {
              console.log('just an echo: ' + control.upstreamCount);
              return; // Just an echo
            }
          }
          console.log('Assume a real downstream change: ' + control.upstreamCount + ' -> 0');
          control.upstreamCount = 0;
          self.requestDownstreamAction(doc, theHandler);
        }
      };
    }; // openWebsocket
    openWebsocket();

    return true;
  };

  // This high-level function updates the local store iff the web is changed successfully.
  //
  //  - deletions, insertions may be undefined or single statements or lists or formulae.
  //      (may contain bnodes which can be indirectly identified by a where clause)
  //
  //  - callback is called as callback(uri, success, errorbody)
  //
  sparql.prototype.update = function (deletions, insertions, callback) {
    try {
      var kb = this.store;
      var ds = !deletions ? [] : deletions instanceof _indexedFormula2.default ? deletions.statements : deletions instanceof Array ? deletions : [deletions];
      var is = !insertions ? [] : insertions instanceof _indexedFormula2.default ? insertions.statements : insertions instanceof Array ? insertions : [insertions];
      if (!(ds instanceof Array)) {
        throw new Error('Type Error ' + (typeof ds === 'undefined' ? 'undefined' : _typeof(ds)) + ': ' + ds);
      }
      if (!(is instanceof Array)) {
        throw new Error('Type Error ' + (typeof is === 'undefined' ? 'undefined' : _typeof(is)) + ': ' + is);
      }
      if (ds.length === 0 && is.length === 0) {
        return callback(null, true); // success -- nothing needed to be done.
      }
      var doc = ds.length ? ds[0].why : is[0].why;
      var control = this.patchControlFor(doc);
      var startTime = Date.now();

      var props = ['subject', 'predicate', 'object', 'why'];
      var verbs = ['insert', 'delete'];
      var clauses = { 'delete': ds, 'insert': is };
      verbs.map(function (verb) {
        clauses[verb].map(function (st) {
          if (!doc.sameTerm(st.why)) {
            throw new Error('update: destination ' + doc + ' inconsistent with delete quad ' + st.why);
          }
          props.map(function (prop) {
            if (typeof st[prop] === 'undefined') {
              throw new Error('update: undefined ' + prop + ' of statement.');
            }
          });
        });
      });

      var protocol = this.editable(doc.uri, kb);
      if (!protocol) {
        throw new Error("Can't make changes in uneditable " + doc);
      }
      var i;
      var newSts;
      var documentString;
      var sz;
      if (protocol.indexOf('SPARQL') >= 0) {
        var bnodes = [];
        if (ds.length) bnodes = this._statement_array_bnodes(ds);
        if (is.length) bnodes = bnodes.concat(this._statement_array_bnodes(is));
        var context = this._bnode_context(bnodes, doc);
        var whereClause = this._context_where(context);
        var query = '';
        if (whereClause.length) {
          // Is there a WHERE clause?
          if (ds.length) {
            query += 'DELETE { ';
            for (i = 0; i < ds.length; i++) {
              query += this.anonymizeNT(ds[i]) + '\n';
            }
            query += ' }\n';
          }
          if (is.length) {
            query += 'INSERT { ';
            for (i = 0; i < is.length; i++) {
              query += this.anonymizeNT(is[i]) + '\n';
            }
            query += ' }\n';
          }
          query += whereClause;
        } else {
          // no where clause
          if (ds.length) {
            query += 'DELETE DATA { ';
            for (i = 0; i < ds.length; i++) {
              query += this.anonymizeNT(ds[i]) + '\n';
            }
            query += ' } \n';
          }
          if (is.length) {
            if (ds.length) query += ' ; ';
            query += 'INSERT DATA { ';
            for (i = 0; i < is.length; i++) {
              query += this.anonymizeNT(is[i]) + '\n';
            }
            query += ' }\n';
          }
        }
        // Track pending upstream patches until they have fnished their callback
        control.pendingUpstream = control.pendingUpstream ? control.pendingUpstream + 1 : 1;
        if ('upstreamCount' in control) {
          control.upstreamCount += 1; // count changes we originated ourselves
          console.log('upstream count up to : ' + control.upstreamCount);
        }

        this._fire(doc.uri, query, function (uri, success, body, xhr) {
          xhr.elapsedTime_ms = Date.now() - startTime;
          console.log('    sparql: Return ' + (success ? 'success' : 'FAILURE ' + xhr.status) + ' elapsed ' + xhr.elapsedTime_ms + 'ms');
          if (success) {
            try {
              kb.remove(ds);
            } catch (e) {
              success = false;
              body = 'Remote Ok BUT error deleting ' + ds.length + ' from store!!! ' + e;
            } // Add in any case -- help recover from weirdness??
            for (var i = 0; i < is.length; i++) {
              kb.add(is[i].subject, is[i].predicate, is[i].object, doc);
            }
          }

          callback(uri, success, body, xhr);
          control.pendingUpstream -= 1;
          // When upstream patches have been sent, reload state if downstream waiting
          if (control.pendingUpstream === 0 && control.downstreamAction) {
            var downstreamAction = control.downstreamAction;
            delete control.downstreamAction;
            console.log('delayed downstream action:');
            downstreamAction(doc);
          }
        });
      } else if (protocol.indexOf('DAV') >= 0) {
        // The code below is derived from Kenny's UpdateCenter.js
        documentString;
        var request = kb.any(doc, this.ns.link('request'));
        if (!request) {
          throw new Error('No record of our HTTP GET request for document: ' + doc);
        } // should not happen
        var response = kb.any(request, this.ns.link('response'));
        if (!response) {
          return null; // throw "No record HTTP GET response for document: "+doc
        }
        var content_type = kb.the(response, this.ns.httph('content-type')).value;

        // prepare contents of revised document
        newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice(); // copy!
        for (i = 0; i < ds.length; i++) {
          Util.RDFArrayRemove(newSts, ds[i]);
        }
        for (i = 0; i < is.length; i++) {
          newSts.push(is[i]);
        }

        // serialize to te appropriate format
        sz = Serializer(kb);
        sz.suggestNamespaces(kb.namespaces);
        sz.setBase(doc.uri); // ?? beware of this - kenny (why? tim)
        switch (content_type) {
          case 'application/rdf+xml':
            documentString = sz.statementsToXML(newSts);
            break;
          case 'text/n3':
          case 'text/turtle':
          case 'application/x-turtle': // Legacy
          case 'application/n3':
            // Legacy
            documentString = sz.statementsToN3(newSts);
            break;
          default:
            throw new Error('Content-type ' + content_type + ' not supported for data write');
        }

        // Write the new version back

        var candidateTarget = kb.the(response, this.ns.httph('content-location'));
        var targetURI;
        if (candidateTarget) {
          targetURI = uriJoin(candidateTarget.value, targetURI);
        }
        var xhr = Util.XMLHTTPFactory();
        xhr.options = {};
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 4) {
            // formula from sparqlUpdate.js, what about redirects?
            var success = !xhr.status || xhr.status >= 200 && xhr.status < 300;
            if (success) {
              for (var i = 0; i < ds.length; i++) {
                kb.remove(ds[i]);
              }
              for (i = 0; i < is.length; i++) {
                kb.add(is[i].subject, is[i].predicate, is[i].object, doc);
              }
            }
            callback(doc.uri, success, xhr.responseText);
          }
        };
        xhr.open('PUT', targetURI, true);
        // assume the server does PUT content-negotiation.
        xhr.setRequestHeader('Content-type', content_type); // OK?
        xhr.send(documentString);
      } else {
        if (protocol.indexOf('LOCALFILE') >= 0) {
          try {
            console.log('Writing back to local file\n');
            // See http://simon-jung.blogspot.com/2007/10/firefox-extension-file-io.html
            // prepare contents of revised document
            newSts = kb.statementsMatching(undefined, undefined, undefined, doc).slice(); // copy!
            for (i = 0; i < ds.length; i++) {
              Util.RDFArrayRemove(newSts, ds[i]);
            }
            for (i = 0; i < is.length; i++) {
              newSts.push(is[i]);
            }
            // serialize to the appropriate format
            documentString;
            sz = Serializer(kb);
            sz.suggestNamespaces(kb.namespaces);
            sz.setBase(doc.uri); // ?? beware of this - kenny (why? tim)
            var dot = doc.uri.lastIndexOf('.');
            if (dot < 1) {
              throw new Error('Rewriting file: No filename extension: ' + doc.uri);
            }
            var ext = doc.uri.slice(dot + 1);
            switch (ext) {
              case 'rdf':
              case 'owl': // Just my experence   ...@@ we should keep the format in which it was parsed
              case 'xml':
                documentString = sz.statementsToXML(newSts);
                break;
              case 'n3':
              case 'nt':
              case 'ttl':
                documentString = sz.statementsToN3(newSts);
                break;
              default:
                throw new Error('File extension .' + ext + ' not supported for data write');
            }
            // Write the new version back
            // create component for file writing
            console.log('Writing back: <<<' + documentString + '>>>');
            var filename = doc.uri.slice(7); // chop off   file://  leaving /path
            // console.log("Writeback: Filename: "+filename+"\n")
            var file = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
            file.initWithPath(filename);
            if (!file.exists()) {
              throw new Error('Rewriting file <' + doc.uri + '> but it does not exist!');
            }
            // {
            // file.create( Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420)
            // }
            // create file output stream and use write/create/truncate mode
            // 0x02 writing, 0x08 create file, 0x20 truncate length if exist
            var stream = Components.classes['@mozilla.org/network/file-output-stream;1'].createInstance(Components.interfaces.nsIFileOutputStream);

            // Various JS systems object to 0666 in struct mode as dangerous
            stream.init(file, 0x02 | 0x08 | 0x20, parseInt('0666', 8), 0);

            // write data to file then close output stream
            stream.write(documentString, documentString.length);
            stream.close();

            for (i = 0; i < ds.length; i++) {
              kb.remove(ds[i]);
            }
            for (i = 0; i < is.length; i++) {
              kb.add(is[i].subject, is[i].predicate, is[i].object, doc);
            }
            callback(doc.uri, true, ''); // success!
          } catch (e) {
            callback(doc.uri, false, 'Exception trying to write back file <' + doc.uri + '>\n'
            // + tabulator.Util.stackString(e))
            );
          }
        } else {
          throw new Error("Unhandled edit method: '" + protocol + "' for " + doc);
        }
      }
    } catch (e) {
      callback(undefined, false, 'Exception in update: ' + e + '\n' + $rdf.Util.stackString(e));
    }
  }; // wnd update

  // This suitable for an inital creation of a document
  //
  // data:    string, or array of statements
  //
  sparql.prototype.put = function (doc, data, content_type, callback) {
    var documentString;
    var kb = this.store;

    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === _typeof('')) {
      documentString = data;
    } else {
      // serialize to te appropriate format
      var sz = Serializer(kb);
      sz.suggestNamespaces(kb.namespaces);
      sz.setBase(doc.uri);
      switch (content_type) {
        case 'application/rdf+xml':
          documentString = sz.statementsToXML(data);
          break;
        case 'text/n3':
        case 'text/turtle':
        case 'application/x-turtle': // Legacy
        case 'application/n3':
          // Legacy
          documentString = sz.statementsToN3(data);
          break;
        default:
          throw new Error('Content-type ' + content_type + ' not supported for data PUT');
      }
    }
    var xhr = Util.XMLHTTPFactory();
    xhr.options = {};
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        // formula from sparqlUpdate.js, what about redirects?
        var success = !xhr.status || xhr.status >= 200 && xhr.status < 300;
        if (success && typeof data !== 'string') {
          data.map(function (st) {
            kb.addStatement(st);
          });
          // kb.fetcher.requested[doc.uri] = true // as though fetched
        }
        if (success) {
          delete kb.fetcher.nonexistant[doc.uri];
          delete kb.fetcher.requested[doc.uri];
          // @@ later we can fake it has been requestd if put gives us the header sand we save them.
        }
        callback(doc.uri, success, xhr.responseText, xhr);
      }
    };
    xhr.open('PUT', doc.uri, true);
    xhr.setRequestHeader('Content-type', content_type);
    xhr.send(documentString);
  };

  // Reload a document.
  //
  // Fast and cheap, no metaata
  // Measure times for the document
  // Load it provisionally
  // Don't delete the statemenst before the load, or it will leave a broken document
  // in the meantime.

  sparql.prototype.reload = function (kb, doc, callback) {
    var startTime = Date.now();
    // force sets no-cache and
    kb.fetcher.nowOrWhenFetched(doc.uri, { force: true, noMeta: true, clearPreviousData: true }, function (ok, body, xhr) {
      if (!ok) {
        console.log('    ERROR reloading data: ' + body);
        callback(false, 'Error reloading data: ' + body, xhr);
      } else if (xhr.onErrorWasCalled || xhr.status !== 200) {
        console.log('    Non-HTTP error reloading data! onErrorWasCalled=' + xhr.onErrorWasCalled + ' status: ' + xhr.status);
        callback(false, 'Non-HTTP error reloading data: ' + body, xhr);
      } else {
        var elapsedTime_ms = Date.now() - startTime;
        if (!doc.reloadTime_total) doc.reloadTime_total = 0;
        if (!doc.reloadTime_count) doc.reloadTime_count = 0;
        doc.reloadTime_total += elapsedTime_ms;
        doc.reloadTime_count += 1;
        console.log('    Fetch took ' + elapsedTime_ms + 'ms, av. of ' + doc.reloadTime_count + ' = ' + doc.reloadTime_total / doc.reloadTime_count + 'ms.');
        callback(true);
      }
    });
  };

  sparql.prototype.oldReload = function (kb, doc, callback) {
    var g2 = graph(); // A separate store to hold the data as we load it
    var f2 = fetcher(g2);
    var startTime = Date.now();
    // force sets no-cache and
    f2.nowOrWhenFetched(doc.uri, { force: true, noMeta: true, clearPreviousData: true }, function (ok, body, xhr) {
      if (!ok) {
        console.log('    ERROR reloading data: ' + body);
        callback(false, 'Error reloading data: ' + body, xhr);
      } else if (xhr.onErrorWasCalled || xhr.status !== 200) {
        console.log('    Non-HTTP error reloading data! onErrorWasCalled=' + xhr.onErrorWasCalled + ' status: ' + xhr.status);
        callback(false, 'Non-HTTP error reloading data: ' + body, xhr);
      } else {
        var sts1 = kb.statementsMatching(undefined, undefined, undefined, doc).slice(); // Take a copy!!
        var sts2 = g2.statementsMatching(undefined, undefined, undefined, doc).slice();
        console.log('    replacing ' + sts1.length + ' with ' + sts2.length + ' out of total statements ' + kb.statements.length);
        kb.remove(sts1);
        kb.add(sts2);
        var elapsedTime_ms = Date.now() - startTime;
        if (sts2.length === 0) {
          console.log('????????????????? 0000000');
        }
        if (!doc.reloadTime_total) doc.reloadTime_total = 0;
        if (!doc.reloadTime_count) doc.reloadTime_count = 0;
        doc.reloadTime_total += elapsedTime_ms;
        doc.reloadTime_count += 1;
        console.log('    fetch took ' + elapsedTime_ms + 'ms, av. of ' + doc.reloadTime_count + ' = ' + doc.reloadTime_total / doc.reloadTime_count + 'ms.');
        callback(true);
      }
    });
  };
  return sparql;
}();

module.exports = UpdateManager;
},{"./data-factory":82,"./fetcher":85,"./indexed-formula":88,"./namespace":94,"./serializer":103,"./uri":108,"./util":109}],107:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Updates-Via
 */
var namedNode = _dereq_('./data-factory').namedNode;

var UpdatesSocket = function () {
  function UpdatesSocket(parent, via) {
    _classCallCheck(this, UpdatesSocket);

    this.parent = parent;
    this.via = via;
    this.connected = false;
    this.pending = {};
    this.subscribed = {};
    this.socket = {};
    try {
      this.socket = new WebSocket(via);
      this.socket.onopen = this.onOpen;
      this.socket.onclose = this.onClose;
      this.socket.onmessage = this.onMessage;
      this.socket.onerror = this.onError;
    } catch (error) {
      this.onError(error);
    }
  }

  _createClass(UpdatesSocket, [{
    key: '_decode',
    value: function _decode(q) {
      var elt;
      var i;
      var k;
      var r;
      var ref;
      var ref1;
      var v;
      r = {};
      ref = function () {
        var j, len, ref, results;
        ref = q.split('&');
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          elt = ref[j];
          results.push(elt.split('='));
        }
        return results;
      }();
      for (i in ref) {
        elt = ref[i];
        ref1 = [decodeURIComponent(elt[0]), decodeURIComponent(elt[1])];
        k = ref1[0];
        v = ref1[1];
        if (r[k] == null) {
          r[k] = [];
        }
        r[k].push(v);
      }
      return r;
    }
  }, {
    key: '_send',
    value: function _send(method, uri, data) {
      var base, message;
      message = [method, uri, data].join(' ');
      return typeof (base = this.socket).send === 'function' ? base.send(message) : void 0;
    }
  }, {
    key: '_subscribe',
    value: function _subscribe(uri) {
      this._send('sub', uri, '');
      this.subscribed[uri] = true;
      return this.subscribed[uri];
    }
  }, {
    key: 'onClose',
    value: function onClose(e) {
      var uri;
      this.connected = false;
      for (uri in this.subscribed) {
        this.pending[uri] = true;
      }
      this.subscribed = {};
      return this.subscribed;
    }
  }, {
    key: 'onError',
    value: function onError(e) {
      throw new Error('onError' + e);
    }
  }, {
    key: 'onMessage',
    value: function onMessage(e) {
      var base, message;
      message = e.data.split(' ');
      if (message[0] === 'ping') {
        return typeof (base = this.socket).send === 'function' ? base.send('pong ' + message.slice(1).join(' ')) : void 0;
      } else if (message[0] === 'pub') {
        return this.parent.onUpdate(message[1], this._decode(message[2]));
      }
    }
  }, {
    key: 'onOpen',
    value: function onOpen(e) {
      var results, uri;
      this.connected = true;
      results = [];
      for (uri in this.pending) {
        delete this.pending[uri];
        results.push(this._subscribe(uri));
      }
      return results;
    }
  }, {
    key: 'subscribe',
    value: function subscribe(uri) {
      if (this.connected) {
        return this._subscribe(uri);
      } else {
        this.pending[uri] = true;
        return this.pending[uri];
      }
    }
  }]);

  return UpdatesSocket;
}();

var UpdatesVia = function () {
  function UpdatesVia(fetcher) {
    _classCallCheck(this, UpdatesVia);

    this.fetcher = fetcher;
    this.graph = {};
    this.via = {};
    this.fetcher.addCallback('headers', this.onHeaders);
  }

  _createClass(UpdatesVia, [{
    key: 'onHeaders',
    value: function onHeaders(d) {
      var etag, uri, via;
      if (d.headers == null) {
        return true;
      }
      if (typeof WebSocket === 'undefined' || WebSocket === null) {
        return true;
      }
      etag = d.headers['etag'];
      via = d.headers['updates-via'];
      uri = d.uri;
      if (etag && via) {
        this.graph[uri] = {
          etag: etag,
          via: via
        };
        this.register(via, uri);
      }
      return true;
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(uri, d) {
      return this.fetcher.refresh(namedNode(uri));
    }
  }, {
    key: 'register',
    value: function register(via, uri) {
      if (this.via[via] == null) {
        this.via[via] = new UpdatesSocket(this, via);
      }
      return this.via[via].subscribe(uri);
    }
  }]);

  return UpdatesVia;
}();

module.exports.UpdatesSocket = UpdatesSocket;
module.exports.UpdatesVia = UpdatesVia;
},{"./data-factory":82}],108:[function(_dereq_,module,exports){
'use strict';

/*
 * Implements URI-specific functions
 *
 * See RFC 2386
 *
 * See also:
 *   http://www.w3.org/2005/10/ajaw/uri.js
 *   http://www.w3.org/2000/10/swap/uripath.py
 *
 */
var alert = alert || console.log;

module.exports.docpart = docpart;
module.exports.document = document;
module.exports.hostpart = hostpart;
module.exports.join = join;
module.exports.protocol = protocol;
module.exports.refTo = refTo;

var NamedNode = _dereq_('./named-node');

function docpart(uri) {
  var i;
  i = uri.indexOf('#');
  if (i < 0) {
    return uri;
  } else {
    return uri.slice(0, i);
  }
}

function document(x) {
  return new NamedNode(docpart(x.uri));
}

function hostpart(u) {
  var m = /[^\/]*\/\/([^\/]*)\//.exec(u);
  if (m) {
    return m[1];
  } else {
    return '';
  }
}

function join(given, base) {
  var baseColon, baseScheme, baseSingle;
  var colon, lastSlash, path;
  var baseHash = base.indexOf('#');
  if (baseHash > 0) {
    base = base.slice(0, baseHash);
  }
  if (given.length === 0) {
    return base;
  }
  if (given.indexOf('#') === 0) {
    return base + given;
  }
  colon = given.indexOf(':');
  if (colon >= 0) {
    return given;
  }
  baseColon = base.indexOf(':');
  if (base.length === 0) {
    return given;
  }
  if (baseColon < 0) {
    alert('Invalid base: ' + base + ' in join with given: ' + given);
    return given;
  }
  baseScheme = base.slice(0, +baseColon + 1 || 9e9);
  if (given.indexOf('//') === 0) {
    return baseScheme + given;
  }
  if (base.indexOf('//', baseColon) === baseColon + 1) {
    baseSingle = base.indexOf('/', baseColon + 3);
    if (baseSingle < 0) {
      if (base.length - baseColon - 3 > 0) {
        return base + '/' + given;
      } else {
        return baseScheme + given;
      }
    }
  } else {
    baseSingle = base.indexOf('/', baseColon + 1);
    if (baseSingle < 0) {
      if (base.length - baseColon - 1 > 0) {
        return base + '/' + given;
      } else {
        return baseScheme + given;
      }
    }
  }
  if (given.indexOf('/') === 0) {
    return base.slice(0, baseSingle) + given;
  }
  path = base.slice(baseSingle);
  lastSlash = path.lastIndexOf('/');
  if (lastSlash < 0) {
    return baseScheme + given;
  }
  if (lastSlash >= 0 && lastSlash < path.length - 1) {
    path = path.slice(0, +lastSlash + 1 || 9e9);
  }
  path += given;
  while (path.match(/[^\/]*\/\.\.\//)) {
    path = path.replace(/[^\/]*\/\.\.\//, '');
  }
  path = path.replace(/\.\//g, '');
  path = path.replace(/\/\.$/, '/');
  return base.slice(0, baseSingle) + path;
}

function protocol(uri) {
  var i;
  i = uri.indexOf(':');
  if (i < 0) {
    return null;
  } else {
    return uri.slice(0, i);
  }
}

function refTo(base, uri) {
  var c, i, k, l, len, len1, n, o, p, q, ref, ref1, s;
  var commonHost = new RegExp('^[-_a-zA-Z0-9.]+:(//[^/]*)?/[^/]*$');
  if (!base) {
    return uri;
  }
  if (base === uri) {
    return '';
  }
  for (i = o = 0, len = uri.length; o < len; i = ++o) {
    c = uri[i];
    if (c !== base[i]) {
      break;
    }
  }
  if (base.slice(0, i).match(commonHost)) {
    k = uri.indexOf('//');
    if (k < 0) {
      k = -2;
    }
    l = uri.indexOf('/', k + 2);
    if (uri[l + 1] !== '/' && base[l + 1] !== '/' && uri.slice(0, l) === base.slice(0, l)) {
      return uri.slice(l);
    }
  }
  if (uri[i] === '#' && base.length === i) {
    return uri.slice(i);
  }
  while (i > 0 && uri[i - 1] !== '/') {
    i--;
  }
  if (i < 3) {
    return uri;
  }
  if (base.indexOf('//', i - 2) > 0 || uri.indexOf('//', i - 2) > 0) {
    return uri;
  }
  if (base.indexOf(':', i) > 0) {
    return uri;
  }
  n = 0;
  ref = base.slice(i);
  for (p = 0, len1 = ref.length; p < len1; p++) {
    c = ref[p];
    if (c === '/') {
      n++;
    }
  }
  if (n === 0 && i < uri.length && uri[i] === '#') {
    return './' + uri.slice(i);
  }
  if (n === 0 && i === uri.length) {
    return './';
  }
  s = '';
  if (n > 0) {
    for (q = 1, ref1 = n; ref1 >= 1 ? q <= ref1 : q >= ref1; ref1 >= 1 ? ++q : --q) {
      s += '../';
    }
  }
  return s + uri.slice(i);
}
},{"./named-node":93}],109:[function(_dereq_,module,exports){
'use strict';

/**
 * Utility functions for $rdf
 * @module util
 */
var docpart = _dereq_('./uri').docpart;
var log = _dereq_('./log');
var NamedNode = _dereq_('./named-node');

module.exports.AJAR_handleNewTerm = ajarHandleNewTerm;
module.exports.ArrayIndexOf = arrayIndexOf;
module.exports.callbackify = callbackify;
module.exports.dtstamp = dtstamp;
module.exports.DOMParserFactory = domParser;
module.exports.domToString = domToString;
module.exports.dumpNode = dumpNode;
module.exports.getHTTPHeaders = getHTTPHeaders;
module.exports.heavyCompare = heavyCompare;
module.exports.heavyCompareSPO = heavyCompareSPO;
module.exports.output = output;
module.exports.parseXML = parseXML;
module.exports.RDFArrayRemove = rdfArrayRemove;
module.exports.stackString = stackString;
module.exports.string_startswith = stringStartsWith;
module.exports.string = {};
module.exports.string.template = stringTemplate;
module.exports.uri = _dereq_('./uri'); // TODO: Remove this mixed usage
// module.exports.variablesIn = variablesIn
module.exports.XMLHTTPFactory = xhr;
module.exports.log = log;

module.exports.mediaTypeClass = function (mediaType) {
  mediaType = mediaType.split(';')[0].trim(); // remove media type parameters
  return new NamedNode('http://www.w3.org/ns/iana/media-types/' + mediaType + '#Resource');
};

/**
 * Loads ontologies of the data we load (this is the callback from the kb to
 * the fetcher). Exports as `AJAR_handleNewTerm`
 */
function ajarHandleNewTerm(kb, p, requestedBy) {
  var sf = null;
  if (typeof kb.fetcher !== 'undefined') {
    sf = kb.fetcher;
  } else {
    return;
  }
  if (p.termType !== 'NamedNode') return;
  var docuri = docpart(p.uri);
  var fixuri;
  if (p.uri.indexOf('#') < 0) {
    // No hash
    // @@ major hack for dbpedia Categories, which spread indefinitely
    if (stringStartsWith(p.uri, 'http://dbpedia.org/resource/Category:')) return;

    /*
      if (string_startswith(p.uri, 'http://xmlns.com/foaf/0.1/')) {
      fixuri = "http://dig.csail.mit.edu/2005/ajar/ajaw/test/foaf"
      // should give HTTP 303 to ontology -- now is :-)
      } else
    */
    if (stringStartsWith(p.uri, 'http://purl.org/dc/elements/1.1/') || stringStartsWith(p.uri, 'http://purl.org/dc/terms/')) {
      fixuri = 'http://dublincore.org/2005/06/13/dcq';
      // dc fetched multiple times
    } else if (stringStartsWith(p.uri, 'http://xmlns.com/wot/0.1/')) {
      fixuri = 'http://xmlns.com/wot/0.1/index.rdf';
    } else if (stringStartsWith(p.uri, 'http://web.resource.org/cc/')) {
      //            log.warn("creative commons links to html instead of rdf. doesn't seem to content-negotiate.")
      fixuri = 'http://web.resource.org/cc/schema.rdf';
    }
  }
  if (fixuri) {
    docuri = fixuri;
  }
  if (sf && sf.getState(docuri) !== 'unrequested') return;

  if (fixuri) {
    // only give warning once: else happens too often
    log.warn('Assuming server still broken, faking redirect of <' + p.uri + '> to <' + docuri + '>');
  }
  sf.requestURI(docuri, requestedBy);
}

/**
 * Exports as `ArrayIndexOf`.
 */
function arrayIndexOf(arr, item, i) {
  i || (i = 0);
  var length = arr.length;
  if (i < 0) i = length + i;
  for (; i < length; i++) {
    if (arr[i] === item) {
      return i;
    }
  }
  return -1;
}

/**
 * Adds callback functionality to an object.
 * Callback functions are indexed by a 'hook' string.
 * They return true if they want to be called again.
 * @method callbackify
 * @param obj {Object}
 * @param callbacks {Array<Function>}
 */
function callbackify(obj, callbacks) {
  obj.callbacks = {};
  for (var x = callbacks.length - 1; x >= 0; x--) {
    obj.callbacks[callbacks[x]] = [];
  }

  obj.addHook = function (hook) {
    if (!obj.callbacks[hook]) {
      obj.callbacks[hook] = [];
    }
  };

  obj.addCallback = function (hook, func) {
    obj.callbacks[hook].push(func);
  };

  obj.removeCallback = function (hook, funcName) {
    for (var i = 0; i < obj.callbacks[hook].length; i++) {
      if (obj.callbacks[hook][i].name === funcName) {
        obj.callbacks[hook].splice(i, 1);
        return true;
      }
    }
    return false;
  };

  obj.insertCallback = function (hook, func) {
    obj.callbacks[hook].unshift(func);
  };

  obj.fireCallbacks = function (hook, args) {
    var newCallbacks = [];
    var replaceCallbacks = [];
    var len = obj.callbacks[hook].length;
    var x;
    // log.info('!@$ Firing '+hook+' call back with length'+len)
    for (x = len - 1; x >= 0; x--) {
      // log.info('@@ Firing '+hook+' callback '+ obj.callbacks[hook][x])
      if (obj.callbacks[hook][x].apply(obj, args)) {
        newCallbacks.push(obj.callbacks[hook][x]);
      }
    }

    for (x = newCallbacks.length - 1; x >= 0; x--) {
      replaceCallbacks.push(newCallbacks[x]);
    }

    for (x = len; x < obj.callbacks[hook].length; x++) {
      replaceCallbacks.push(obj.callbacks[hook][x]);
    }

    obj.callbacks[hook] = replaceCallbacks;
  };
}

/**
 * Returns a DOM parser based on current runtime environment.
 * Exports as `DOMParserFactory`
 */
function domParser() {
  if (tabulator && tabulator.isExtension) {
    return Components.classes['@mozilla.org/xmlextras/domparser;1'].getService(Components.interfaces.nsIDOMParser);
  } else if (window.DOMParser) {
    return new DOMParser();
  } else if (window.ActiveXObject) {
    return new ActiveXObject('Microsoft.XMLDOM');
  } else {
    return false;
  }
}

// From https://github.com/linkeddata/dokieli
function domToString(node, options) {
  options = options || {};
  var selfClosing = [];
  if ('selfClosing' in options) {
    options.selfClosing.split(' ').forEach(function (n) {
      selfClosing[n] = true;
    });
  }
  var skipAttributes = [];
  if ('skipAttributes' in options) {
    options.skipAttributes.split(' ').forEach(function (n) {
      skipAttributes[n] = true;
    });
  }
  return dumpNode(node, options, selfClosing, skipAttributes);
}

function dumpNode(node, options, selfClosing, skipAttributes) {
  var i;
  var out = '';
  var noEsc = [false];
  if (typeof node.nodeType === 'undefined') return out;
  if (node.nodeType === 1) {
    if (node.hasAttribute('class') && 'classWithChildText' in options && node.matches(options.classWithChildText.class)) {
      out += node.querySelector(options.classWithChildText.element).textContent;
    } else if (!('skipNodeWithClass' in options && node.matches('.' + options.skipNodeWithClass))) {
      var ename = node.nodeName.toLowerCase();
      out += '<' + ename;

      var attrList = [];
      for (i = node.attributes.length - 1; i >= 0; i--) {
        var atn = node.attributes[i];
        if (skipAttributes.length > 0 && skipAttributes[atn.name]) continue;
        if (/^\d+$/.test(atn.name)) continue;
        if (atn.name === 'class' && 'replaceClassItemWith' in options && atn.value.split(' ').indexOf(options.replaceClassItemWith.source) > -1) {
          var re = new RegExp(options.replaceClassItemWith.source, 'g');
          atn.value = atn.value.replace(re, options.replaceClassItemWith.target).trim();
        }
        if (!(atn.name === 'class' && 'skipClassWithValue' in options && options.skipClassWithValue === atn.value)) {
          attrList.push(atn.name + '=\'' + atn.value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&quot;') + '\'');
        }
      }
      if (attrList.length > 0) {
        if ('sortAttributes' in options && options.sortAttributes) {
          attrList.sort(function (a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
          });
        }
        out += ' ' + attrList.join(' ');
      }
      if (selfClosing[ename]) {
        out += ' />';
      } else {
        out += '>';
        out += ename === 'html' ? '\n  ' : '';
        noEsc.push(ename === 'style' || ename === 'script');
        for (i = 0; i < node.childNodes.length; i++) {
          out += dumpNode(node.childNodes[i]);
        }noEsc.pop();
        out += ename === 'body' ? '</' + ename + '>' + '\n' : '</' + ename + '>';
      }
    }
  } else if (node.nodeType === 8) {
    // FIXME: If comments are not tabbed in source, a new line is not prepended
    out += '<!--' + node.nodeValue + '-->';
  } else if (node.nodeType === 3 || node.nodeType === 4) {
    // XXX: Remove new lines which were added after DOM ready
    var nl = node.nodeValue.replace(/\n+$/, '');
    out += noEsc[noEsc.length - 1] ? nl : nl.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  } else {
    console.log('Warning; Cannot handle serialising nodes of type: ' + node.nodeType);
    console.log(node);
  }
  return out;
}

function dtstamp() {
  var now = new Date();
  var year = now.getYear() + 1900;
  var month = now.getMonth() + 1;
  var day = now.getDate();
  var hour = now.getUTCHours();
  var minute = now.getUTCMinutes();
  var second = now.getSeconds();
  if (month < 10) month = '0' + month;
  if (day < 10) day = '0' + day;
  if (hour < 10) hour = '0' + hour;
  if (minute < 10) minute = '0' + minute;
  if (second < 10) second = '0' + second;
  return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':' + second + 'Z';
}

/**
 * Returns a hashmap of HTTP headers and their values.
 * @@ Bug: Assumes that each header only occurs once.
 * Also note that a , in a header value is just the same as having two headers.
 */
function getHTTPHeaders(xhr) {
  var lines = xhr.getAllResponseHeaders().split('\n');
  var headers = {};
  var last;
  for (var x = 0; x < lines.length; x++) {
    if (lines[x].length > 0) {
      var pair = lines[x].split(': ');
      if (typeof pair[1] === 'undefined') {
        // continuation
        headers[last] += '\n' + pair[0];
      } else {
        last = pair[0].toLowerCase();
        headers[last] = pair[1];
      }
    }
  }
  return headers;
}

/**
 * Compares statements (heavy comparison for repeatable canonical ordering)
 */
function heavyCompare(x, y, g, uriMap) {
  var nonBlank = function nonBlank(x) {
    return x.termType === 'BlankNode' ? null : x;
  };
  var signature = function signature(x) {
    var lis = g.statementsMatching(x).map(function (st) {
      return '' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) + ' ' + nonBlank(st.object);
    }).concat(g.statementsMatching(undefined, undefined, x).map(function (st) {
      return '' + nonBlank(st.subject) + ' ' + nonBlank(st.predicate) + ' ' + nonBlank(st.object);
    }));
    lis.sort();
    return lis.join('\n');
  };
  if (x.termType === 'BlankNode' && y.termType === 'BlankNode') {
    if (x.compareTerm(y) === 0) return 0; // Same
    if (signature(x) > signature(y)) return +1;
    if (signature(x) < signature(y)) return -1;
    return x.compareTerm(y); // Too bad -- this order not canonical.
    // throw "different bnodes indistinquishable for sorting"
  } else {
    if (uriMap && x.uri && y.uri) {
      return (uriMap[x.uri] || x.uri).localeCompare(uriMap[y.uri] || y.uri);
    }
    return x.compareTerm(y);
  }
}

function heavyCompareSPO(x, y, g, uriMap) {
  return heavyCompare(x.subject, y.subject, g, uriMap) || heavyCompare(x.predicate, y.predicate, g, uriMap) || heavyCompare(x.object, y.object, g, uriMap);
}

/**
 * Defines a simple debugging function
 * @method output
 * @param o {String}
 */
function output(o) {
  var k = document.createElement('div');
  k.textContent = o;
  document.body.appendChild(k);
}

/**
 * Returns a DOM from parsex XML.
 */
function parseXML(str, options) {
  var dparser;
  options = options || {};
  if (typeof tabulator !== 'undefined' && tabulator.isExtension) {
    dparser = Components.classes['@mozilla.org/xmlextras/domparser;1'].getService(Components.interfaces.nsIDOMParser);
  } else if (typeof module !== 'undefined' && module && module.exports) {
    // Node.js
    // var libxmljs = require('libxmljs'); // Was jsdom before 2012-01 then libxmljs but that nonstandard
    // return libxmljs.parseXmlString(str)

    // var jsdom = require('jsdom');   2012-01 though 2015-08 no worky with new Node
    // var dom = jsdom.jsdom(str, undefined, {} );// html, level, options

    var DOMParser = _dereq_('xmldom').DOMParser; // 2015-08 on https://github.com/jindw/xmldom
    var dom = new DOMParser().parseFromString(str, options.contentType || 'application/xhtml+xml');
    return dom;
  } else {
    if (typeof window !== 'undefined' && window.DOMParser) {
      dparser = new window.DOMParser(); // seems to actually work
    } else {
      dparser = new DOMParser(); // Doc says this works
    }
  }
  return dparser.parseFromString(str, 'application/xml');
}

/**
 * Removes all statements equal to x from a
 * Exports as `RDFArrayRemove`
 */
function rdfArrayRemove(a, x) {
  for (var i = 0; i < a.length; i++) {
    // TODO: This used to be the following, which didnt always work..why
    // if(a[i] === x)
    if (a[i].subject.sameTerm(x.subject) && a[i].predicate.sameTerm(x.predicate) && a[i].object.sameTerm(x.object) && a[i].why.sameTerm(x.why)) {
      a.splice(i, 1);
      return;
    }
  }
  throw new Error('RDFArrayRemove: Array did not contain ' + x + ' ' + x.why);
}

function stringStartsWith(str, pref) {
  // missing library routines
  return str.slice(0, pref.length) === pref;
}

/**
 * C++, python style %s -> subs
 */
function stringTemplate(base, subs) {
  var baseA = base.split('%s');
  var result = '';
  for (var i = 0; i < subs.length; i++) {
    subs[i] += '';
    result += baseA[i] + subs[i];
  }
  return result + baseA.slice(subs.length).join();
}

// Stack dump on errors - to pass errors back

function stackString(e) {
  var str = '' + e + '\n';
  if (!e.stack) {
    return str + 'No stack available.\n';
  }
  var lines = e.stack.toString().split('\n');
  var toprint = [];
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    if (line.indexOf('ecmaunit.js') > -1) {
      // remove useless bit of traceback
      break;
    }
    if (line.charAt(0) == '(') {
      line = 'function' + line;
    }
    var chunks = line.split('@');
    toprint.push(chunks);
  }
  // toprint.reverse();  No - I prefer the latest at the top by the error message -tbl

  for (var i = 0; i < toprint.length; i++) {
    str += '  ' + toprint[i][1] + '\n    ' + toprint[i][0];
  }
  return str;
}

/**
 * Finds the variables in a graph (shallow).
 * Note: UNUSED.
 */
// function variablesIn (g) {
//   for (var i = 0; i < g.statements.length; i++) {
//     var st = g.statatements[i]
//     var vars = {}
//     if (st.subject instanceof $rdf.Variable) {
//       vars[st.subject.toNT()] = true
//     }
//     if (st.predicate instanceof $rdf.Variable) {
//       vars[st.predicate.toNT()] = true
//     }
//     if (st.object instanceof $rdf.Variable) {
//       vars[st.object.toNT()] = true
//     }
//   }
//   return vars
// }

/**
 * Returns an XMLHttpRequest object for the appropriate current runtime
 * environment. Exports as `XMLHTTPFactory`
 */
function xhr() {
  var XMLHttpRequest;
  // Running inside the Tabulator Firefox extension
  if (typeof tabulator !== 'undefined' && tabulator.isExtension) {
    // Cannot use XMLHttpRequest natively, must request it through SDK
    return Components.classes['@mozilla.org/xmlextras/xmlhttprequest;1'].createInstance().QueryInterface(Components.interfaces.nsIXMLHttpRequest);
  } else if (typeof window !== 'undefined' && 'XMLHttpRequest' in window) {
    // Running inside the browser
    XMLHttpRequest = window.XMLHttpRequest;
    return new XMLHttpRequest();
  } else if (typeof module !== 'undefined' && module && module.exports) {
    // Running in Node.js
    XMLHttpRequest = _dereq_('xmlhttprequest').XMLHttpRequest;
    return new XMLHttpRequest();
  } else if (window.ActiveXObject) {
    try {
      return new ActiveXObject('Msxml2.XMLHTTP');
    } catch (e) {
      return new ActiveXObject('Microsoft.XMLHTTP');
    }
  } else {
    return false;
  }
}
},{"./log":91,"./named-node":93,"./uri":108,"xmldom":120,"xmlhttprequest":124}],110:[function(_dereq_,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassOrder = _dereq_('./class-order');
var Node = _dereq_('./node');
var Uri = _dereq_('./uri');

/**
 * Variables are placeholders used in patterns to be matched.
 * In cwm they are symbols which are the formula's list of quantified variables.
 * In sparql they are not visibly URIs.  Here we compromise, by having
 * a common special base URI for variables. Their names are uris,
 * but the ? notation has an implicit base uri of 'varid:'
 * @class Variable
 */

var Variable = function (_Node) {
  _inherits(Variable, _Node);

  function Variable() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _classCallCheck(this, Variable);

    var _this = _possibleConstructorReturn(this, (Variable.__proto__ || Object.getPrototypeOf(Variable)).call(this));

    _this.termType = Variable.termType;
    _this.value = name;
    _this.base = 'varid:';
    _this.uri = Uri.join(name, _this.base);
    return _this;
  }

  _createClass(Variable, [{
    key: 'equals',
    value: function equals(other) {
      if (!other) {
        return false;
      }
      return this.termType === other.termType && this.value === other.value;
    }
  }, {
    key: 'hashString',
    value: function hashString() {
      return this.toString();
    }
  }, {
    key: 'substitute',
    value: function substitute(bindings) {
      var ref;
      return (ref = bindings[this.toNT()]) != null ? ref : this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.uri.slice(0, this.base.length) === this.base) {
        return '?' + this.uri.slice(this.base.length);
      }
      return '?' + this.uri;
    }
  }]);

  return Variable;
}(Node);

Variable.termType = 'Variable';
Variable.prototype.classOrder = ClassOrder['Variable'];
Variable.prototype.isVar = 1;

module.exports = Variable;
},{"./class-order":79,"./node":95,"./uri":108}],111:[function(_dereq_,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NamedNode = _dereq_('./named-node');

var XSD = function XSD() {
  _classCallCheck(this, XSD);
};

XSD.boolean = new NamedNode('http://www.w3.org/2001/XMLSchema#boolean');
XSD.dateTime = new NamedNode('http://www.w3.org/2001/XMLSchema#dateTime');
XSD.decimal = new NamedNode('http://www.w3.org/2001/XMLSchema#decimal');
XSD.double = new NamedNode('http://www.w3.org/2001/XMLSchema#double');
XSD.integer = new NamedNode('http://www.w3.org/2001/XMLSchema#integer');
XSD.langString = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
XSD.string = new NamedNode('http://www.w3.org/2001/XMLSchema#string');

module.exports = XSD;
},{"./named-node":93}],112:[function(_dereq_,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./lib/N3Lexer":113,"./lib/N3Parser":114,"./lib/N3Store":115,"./lib/N3StreamParser":116,"./lib/N3StreamWriter":117,"./lib/N3Util":118,"./lib/N3Writer":119,"dup":70}],113:[function(_dereq_,module,exports){
// **N3Lexer** tokenizes N3 documents.
var fromCharCode = String.fromCharCode;
var immediately = typeof setImmediate === 'function' ? setImmediate :
                  function setImmediate(func) { setTimeout(func, 0); };

// Regular expression and replacement string to escape N3 strings.
// Note how we catch invalid unicode sequences separately (they will trigger an error).
var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\[uU]|\\(.)/g;
var escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                           'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
                           '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
                           '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
                           '/': '/', '?': '?', '#': '#', '@': '@', '%': '%' };
var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;

// ## Constructor
function N3Lexer(options) {
  if (!(this instanceof N3Lexer))
    return new N3Lexer(options);

  // In line mode (N-Triples or N-Quads), only simple features may be parsed
  if (options && options.lineMode) {
    // Don't tokenize special literals
    this._tripleQuotedString = this._number = this._boolean = /$0^/;
    // Swap the tokenize method for a restricted version
    var self = this;
    this._tokenize = this.tokenize;
    this.tokenize = function (input, callback) {
      this._tokenize(input, function (error, token) {
        if (!error && /^(?:IRI|prefixed|literal|langcode|type|\.|eof)$/.test(token.type))
          callback && callback(error, token);
        else
          callback && callback(error || self._syntaxError(token.type, callback = null));
      });
    };
  }
}

N3Lexer.prototype = {
  // ## Regular expressions
  // It's slightly faster to have these as properties than as in-scope variables.

  _iri: /^<((?:[^>\\]|\\[uU])+)>/, // IRI with escape sequences; needs sanity check after unescaping
  _unescapedIri: /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>/, // IRI without escape sequences; no unescaping
  _unescapedString: /^"[^"\\]+"(?=[^"\\])/, // non-empty string without escape sequences
  _singleQuotedString: /^"[^"\\]*(?:\\.[^"\\]*)*"(?=[^"\\])|^'[^'\\]*(?:\\.[^'\\]*)*'(?=[^'\\])/,
  _tripleQuotedString: /^""("[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*")""|^''('[^'\\]*(?:(?:\\.|'(?!''))[^'\\]*)*')''/,
  _langcode: /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i,
  _prefix: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/,
  _prefixed: /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?=\.?[,;\s#()\[\]\{\}"'<])/,
  _blank: /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=\.?[,;:\s#()\[\]\{\}"'<])/,
  _number: /^[\-+]?(?:\d+\.?\d*([eE](?:[\-\+])?\d+)|\d*\.?\d+)(?=[.,;:\s#()\[\]\{\}"'<])/,
  _boolean: /^(?:true|false)(?=[.,;:\s#()\[\]\{\}"'<])/,
  _keyword: /^@[a-z]+(?=[\s#<:])/,
  _sparqlKeyword: /^(?:PREFIX|BASE|GRAPH)(?=[\s#<:])/i,
  _shortPredicates: /^a(?=\s+|<)/,
  _newline: /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/,
  _whitespace: /^[ \t]+/,
  _endOfFile: /^(?:#[^\n\r]*)?$/,

  // ## Private methods

  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback.
  _tokenizeToEnd: function (callback, inputFinished) {
    // Continue parsing as far as possible; the loop will return eventually.
    var input = this._input;
    while (true) {
      // Count and skip whitespace lines.
      var whiteSpaceMatch;
      while (whiteSpaceMatch = this._newline.exec(input))
        input = input.substr(whiteSpaceMatch[0].length, input.length), this._line++;
      // Skip whitespace on current line.
      if (whiteSpaceMatch = this._whitespace.exec(input))
        input = input.substr(whiteSpaceMatch[0].length, input.length);

      // Stop for now if we're at the end.
      if (this._endOfFile.test(input)) {
        // If the input is finished, emit EOF.
        if (inputFinished)
          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });
        return this._input = input;
      }

      // Look for specific token types based on the first character.
      var line = this._line, type = '', value = '', prefix = '',
          firstChar = input[0], match = null, matchLength = 0, unescaped, inconclusive = false;
      switch (firstChar) {
      case '^':
        // Try to match a type.
        if (input.length === 1) break;
        else if (input[1] !== '^') return reportSyntaxError(this);
        this._prevTokenType = '^';
        // Move to type IRI or prefixed name.
        input = input.substr(2);
        if (input[0] !== '<') {
          inconclusive = true;
          break;
        }
        // Fall through in case the type is an IRI.

      case '<':
        // Try to find a full IRI without escape sequences.
        if (match = this._unescapedIri.exec(input))
          type = 'IRI', value = match[1];
        // Try to find a full IRI with escape sequences.
        else if (match = this._iri.exec(input)) {
          unescaped = this._unescape(match[1]);
          if (unescaped === null || illegalIriChars.test(unescaped))
            return reportSyntaxError(this);
          type = 'IRI', value = unescaped;
        }
        break;

      case '_':
        // Try to find a blank node. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        if ((match = this._blank.exec(input)) ||
            inputFinished && (match = this._blank.exec(input + ' ')))
          type = 'prefixed', prefix = '_', value = match[1];
        break;

      case '"':
      case "'":
        // Try to find a non-empty double-quoted literal without escape sequences.
        if (match = this._unescapedString.exec(input))
          type = 'literal', value = match[0];
        // Try to find any other literal wrapped in a pair of single or double quotes.
        else if (match = this._singleQuotedString.exec(input)) {
          unescaped = this._unescape(match[0]);
          if (unescaped === null)
            return reportSyntaxError(this);
          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
        }
        // Try to find a literal wrapped in three pairs of single or double quotes.
        else if (match = this._tripleQuotedString.exec(input)) {
          unescaped = match[1] || match[2];
          // Count the newlines and advance line counter.
          this._line += unescaped.split(/\r\n|\r|\n/).length - 1;
          unescaped = this._unescape(unescaped);
          if (unescaped === null)
            return reportSyntaxError(this);
          type = 'literal', value = unescaped.replace(/^'|'$/g, '"');
        }
        break;

      case '@':
        // Try to find a language code.
        if (this._prevTokenType === 'literal' && (match = this._langcode.exec(input)))
          type = 'langcode', value = match[1];
        // Try to find a keyword.
        else if (match = this._keyword.exec(input))
          type = match[0];
        break;

      case '.':
        // Try to find a dot as punctuation.
        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {
          type = '.';
          matchLength = 1;
          break;
        }
        // Fall through to numerical case (could be a decimal dot).

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '+':
      case '-':
        // Try to find a number.
        if (match = this._number.exec(input)) {
          type = 'literal';
          value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#' +
                  (match[1] ? 'double' : (/^[+\-]?\d+$/.test(match[0]) ? 'integer' : 'decimal'));
        }
        break;

      case 'B':
      case 'b':
      case 'p':
      case 'P':
      case 'G':
      case 'g':
        // Try to find a SPARQL-style keyword.
        if (match = this._sparqlKeyword.exec(input))
          type = match[0].toUpperCase();
        else
          inconclusive = true;
        break;

      case 'f':
      case 't':
        // Try to match a boolean.
        if (match = this._boolean.exec(input))
          type = 'literal', value = '"' + match[0] + '"^^http://www.w3.org/2001/XMLSchema#boolean';
        else
          inconclusive = true;
        break;

      case 'a':
        // Try to find an abbreviated predicate.
        if (match = this._shortPredicates.exec(input))
          type = 'abbreviation', value = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
        else
          inconclusive = true;
        break;

      case ',':
      case ';':
      case '[':
      case ']':
      case '(':
      case ')':
      case '{':
      case '}':
        // The next token is punctuation
        matchLength = 1;
        type = firstChar;
        break;

      default:
        inconclusive = true;
      }

      // Some first characters do not allow an immediate decision, so inspect more.
      if (inconclusive) {
        // Try to find a prefix.
        if ((this._prevTokenType === '@prefix' || this._prevTokenType === 'PREFIX') &&
            (match = this._prefix.exec(input)))
          type = 'prefix', value = match[1] || '';
        // Try to find a prefixed name. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        else if ((match = this._prefixed.exec(input)) ||
                 inputFinished && (match = this._prefixed.exec(input + ' ')))
          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
      }

      // A type token is special: it can only be emitted after an IRI or prefixed name is read.
      if (this._prevTokenType === '^')
        type = (type === 'IRI' || type === 'prefixed') ? 'type' : '';

      // What if nothing of the above was found?
      if (!type) {
        // We could be in streaming mode, and then we just wait for more input to arrive.
        // Otherwise, a syntax error has occurred in the input.
        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
        if (inputFinished || (!/^'''|^"""/.test(input) && /\n|\r/.test(input)))
          return reportSyntaxError(this);
        else
          return this._input = input;
      }

      // Emit the parsed token.
      callback(null, { line: line, type: type, value: value, prefix: prefix });
      this._prevTokenType = type;

      // Advance to next part to tokenize.
      input = input.substr(matchLength || match[0].length, input.length);
    }

    // Signals the syntax error through the callback
    function reportSyntaxError(self) { callback(self._syntaxError(/^\S*/.exec(input)[0])); }
  },

  // ### `_unescape` replaces N3 escape codes by their corresponding characters.
  _unescape: function (item) {
    try {
      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode <= 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement)
            throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return null; }
  },

  // ### `_syntaxError` creates a syntax error for the given issue
  _syntaxError: function (issue) {
    this._input = null;
    return new Error('Syntax error: unexpected "' + issue + '" on line ' + this._line + '.');
  },


  // ## Public methods

  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
  // The input can be a string or a stream.
  tokenize: function (input, callback) {
    var self = this;
    this._line = 1;

    // If the input is a string, continuously emit tokens through the callback until the end.
    if (typeof input === 'string') {
      this._input = input;
      immediately(function () { self._tokenizeToEnd(callback, true); });
    }
    // Otherwise, the input will be streamed.
    else {
      this._input = '';

      // If no input was given, it will be streamed through `addChunk` and ended with `end`
      if (!input || typeof input === 'function') {
        this.addChunk = addChunk;
        this.end = end;
        if (!callback)
          callback = input;
      }
      // Otherwise, the input itself must be a stream
      else {
        if (typeof input.setEncoding === 'function')
          input.setEncoding('utf8');
        input.on('data', addChunk);
        input.on('end', end);
      }
    }

    // Adds the data chunk to the buffer and parses as far as possible
    function addChunk(data) {
      if (self._input !== null) {
        self._input += data;
        self._tokenizeToEnd(callback, false);
      }
    }

    // Parses until the end
    function end() {
      if (self._input !== null)
        self._tokenizeToEnd(callback, true);
    }
  },
};

// ## Exports

// Export the `N3Lexer` class as a whole.
module.exports = N3Lexer;

},{}],114:[function(_dereq_,module,exports){
// **N3Parser** parses N3 documents.
var N3Lexer = _dereq_('./N3Lexer');

var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_NIL    = RDF_PREFIX + 'nil',
    RDF_FIRST  = RDF_PREFIX + 'first',
    RDF_REST   = RDF_PREFIX + 'rest';

var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

// The next ID for new blank nodes
var blankNodePrefix = 0, blankNodeCount = 0;

// ## Constructor
function N3Parser(options) {
  if (!(this instanceof N3Parser))
    return new N3Parser(options);
  this._tripleStack = [];
  this._graph = null;

  // Set the document IRI.
  options = options || {};
  this._setBase(options.documentIRI);

  // Set supported features depending on the format.
  var format = (typeof options.format === 'string') && options.format.match(/\w*$/)[0].toLowerCase(),
      isTurtle = format === 'turtle', isTriG = format === 'trig',
      isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),
      isLineMode = isNTriples || isNQuads;
  if (!(this._supportsNamedGraphs = !isTurtle))
    this._readPredicateOrNamedGraph = this._readPredicate;
  this._supportsQuads = !(isTurtle || isTriG || isNTriples);
  // Disable relative IRIs in N-Triples or N-Quads mode
  if (isLineMode) {
    this._base = '';
    this._resolveIRI = function (token) {
      this._error('Disallowed relative IRI', token);
      return this._callback = noop, this._subject = null;
    };
  }
  this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :
                            '_:' + options.blankNodePrefix.replace(/^_:/, '');
  this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode });
}

// ## Private class methods

// ### `_resetBlankNodeIds` restarts blank node identification.
N3Parser._resetBlankNodeIds = function () {
  blankNodePrefix = blankNodeCount = 0;
};

N3Parser.prototype = {
  // ## Private methods

  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  _setBase: function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;
    else if (baseIRI.indexOf('#') >= 0)
      throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components
    if (this._base = baseIRI) {
      this._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      this._baseRoot   = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  },

  // ### `_readInTopContext` reads a token when in the top context.
  _readInTopContext: function (token) {
    switch (token.type) {
    // If an EOF token arrives in the top context, signal that we're done.
    case 'eof':
      if (this._graph !== null)
        return this._error('Unclosed graph', token);
      delete this._prefixes._;
      return this._callback(null, null, this._prefixes);
    // It could be a prefix declaration.
    case '@prefix':
      this._sparqlStyle = false;
      return this._readPrefix;
    case 'PREFIX':
      this._sparqlStyle = true;
      return this._readPrefix;
    // It could be a base declaration.
    case '@base':
      this._sparqlStyle = false;
      return this._readBaseIRI;
    case 'BASE':
      this._sparqlStyle = true;
      return this._readBaseIRI;
    // It could be a graph.
    case '{':
      if (this._supportsNamedGraphs) {
        this._graph = '';
        this._subject = null;
        return this._readSubject;
      }
    case 'GRAPH':
      if (this._supportsNamedGraphs)
        return this._readNamedGraphLabel;
    // Otherwise, the next token must be a subject.
    default:
      return this._readSubject(token);
    }
  },

  // ### `_readSubject` reads a triple's subject.
  _readSubject: function (token) {
    this._predicate = null;
    switch (token.type) {
    case 'IRI':
      if (this._base === null || absoluteIRI.test(token.value))
        this._subject = token.value;
      else
        this._subject = this._resolveIRI(token);
      break;
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      this._subject = prefix + token.value;
      break;
    case '[':
      // Start a new triple with a new blank node as subject.
      this._subject = '_:b' + blankNodeCount++;
      this._tripleStack.push({ subject: this._subject, predicate: null, object: null, type: 'blank' });
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._tripleStack.push({ subject: RDF_NIL, predicate: null, object: null, type: 'list' });
      this._subject = null;
      return this._readListItem;
    case '}':
      return this._readPunctuation(token);
    default:
      return this._error('Expected subject but got ' + token.type, token);
    }
    // The next token must be a predicate,
    // or, if the subject was actually a graph IRI, a named graph.
    return this._readPredicateOrNamedGraph;
  },

  // ### `_readPredicate` reads a triple's predicate.
  _readPredicate: function (token) {
    var type = token.type;
    switch (type) {
    case 'IRI':
    case 'abbreviation':
      if (this._base === null || absoluteIRI.test(token.value))
        this._predicate = token.value;
      else
        this._predicate = this._resolveIRI(token);
      break;
    case 'prefixed':
      if (token.prefix === '_')
        return this._error('Disallowed blank node as predicate', token);
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      this._predicate = prefix + token.value;
      break;
    case '.':
    case ']':
    case '}':
      // Expected predicate didn't come, must have been trailing semicolon.
      if (this._predicate === null)
        return this._error('Unexpected ' + type, token);
      this._subject = null;
      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
    case ';':
      // Extra semicolons can be safely ignored
      return this._readPredicate;
    default:
      return this._error('Expected predicate to follow "' + this._subject + '"', token);
    }
    // The next token must be an object.
    return this._readObject;
  },

  // ### `_readObject` reads a triple's object.
  _readObject: function (token) {
    switch (token.type) {
    case 'IRI':
      if (this._base === null || absoluteIRI.test(token.value))
        this._object = token.value;
      else
        this._object = this._resolveIRI(token);
      break;
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      this._object = prefix + token.value;
      break;
    case 'literal':
      this._object = token.value;
      return this._readDataTypeOrLang;
    case '[':
      // Start a new triple with a new blank node as subject.
      var blank = '_:b' + blankNodeCount++;
      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: blank, type: 'blank' });
      this._subject = blank;
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._tripleStack.push({ subject: this._subject, predicate: this._predicate, object: RDF_NIL, type: 'list' });
      this._subject = null;
      return this._readListItem;
    default:
      return this._error('Expected object to follow "' + this._predicate + '"', token);
    }
    return this._getTripleEndReader();
  },

  // ### `_readPredicateOrNamedGraph` reads a triple's predicate, or a named graph.
  _readPredicateOrNamedGraph: function (token) {
    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
  },

  // ### `_readGraph` reads a graph.
  _readGraph: function (token) {
    if (token.type !== '{')
      return this._error('Expected graph but got ' + token.type, token);
    // The "subject" we read is actually the GRAPH's label
    this._graph = this._subject, this._subject = null;
    return this._readSubject;
  },

  // ### `_readBlankNodeHead` reads the head of a blank node.
  _readBlankNodeHead: function (token) {
    if (token.type === ']') {
      this._subject = null;
      return this._readBlankNodeTail(token);
    }
    else {
      this._predicate = null;
      return this._readPredicate(token);
    }
  },

  // ### `_readBlankNodeTail` reads the end of a blank node.
  _readBlankNodeTail: function (token) {
    if (token.type !== ']')
      return this._readBlankNodePunctuation(token);

    // Store blank node triple.
    if (this._subject !== null)
      this._callback(null, { subject:   this._subject,
                             predicate: this._predicate,
                             object:    this._object,
                             graph:     this._graph || '' });

    // Restore parent triple that contains the blank node.
    var triple = this._tripleStack.pop();
    this._subject = triple.subject;
    // Was the blank node the object?
    if (triple.object !== null) {
      // Restore predicate and object as well, and continue by reading punctuation.
      this._predicate = triple.predicate;
      this._object = triple.object;
      return this._getTripleEndReader();
    }
    // The blank node was the subject, so continue reading the predicate.
    // If the blank node didn't contain any predicates, it could also be the label of a named graph.
    return this._predicate !== null ? this._readPredicate : this._readPredicateOrNamedGraph;
  },

  // ### `_readDataTypeOrLang` reads an _optional_ data type or language.
  _readDataTypeOrLang: function (token) {
    switch (token.type) {
    case 'type':
      var value;
      if (token.prefix === '') {
        if (this._base === null || absoluteIRI.test(token.value))
          value = token.value;
        else
          value = this._resolveIRI(token);
      }
      else {
        var prefix = this._prefixes[token.prefix];
        if (prefix === undefined)
          return this._error('Undefined prefix "' + token.prefix + ':"', token);
        value = prefix + token.value;
      }
      this._object += '^^' + value;
      return this._getTripleEndReader();
    case 'langcode':
      this._object += '@' + token.value.toLowerCase();
      return this._getTripleEndReader();
    default:
      return this._getTripleEndReader().call(this, token);
    }
  },

  // ### `_readListItem` reads items from a list.
  _readListItem: function (token) {
    var item = null,                  // The actual list item.
        itemHead = null,              // The head of the rdf:first predicate.
        prevItemHead = this._subject, // The head of the previous rdf:first predicate.
        stack = this._tripleStack,    // The stack of triples part of recursion (lists, blanks, etc.).
        parentTriple = stack[stack.length - 1], // The triple containing the current list.
        next = this._readListItem;    // The next function to execute.

    switch (token.type) {
    case 'IRI':
      if (this._base === null || absoluteIRI.test(token.value))
        item = token.value;
      else
        item = this._resolveIRI(token);
      break;
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      item = prefix + token.value;
      break;
    case 'literal':
      item = token.value;
      next = this._readDataTypeOrLang;
      break;
    case '[':
      // Stack the current list triple and start a new triple with a blank node as subject.
      itemHead = '_:b' + blankNodeCount++;
      item     = '_:b' + blankNodeCount++;
      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: item, type: 'blank' });
      this._subject = item;
      next = this._readBlankNodeHead;
      break;
    case '(':
      // Stack the current list triple and start a new list
      itemHead = '_:b' + blankNodeCount++;
      stack.push({ subject: itemHead, predicate: RDF_FIRST, object: RDF_NIL, type: 'list' });
      this._subject = null;
      next = this._readListItem;
      break;
    case ')':
      // Restore the parent triple.
      stack.pop();
      // If this list is contained within a parent list, return the membership triple here.
      // This will be `<parent list element> rdf:first <this list>.`.
      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')
        this._callback(null, { subject:   parentTriple.subject,
                               predicate: parentTriple.predicate,
                               object:    parentTriple.object,
                               graph:     this._graph || '' });
      // Restore the parent triple's subject.
      this._subject = parentTriple.subject;
      // Was this list in the parent triple's subject?
      if (parentTriple.predicate === null) {
        // The next token is the predicate.
        next = this._readPredicate;
        // Skip writing the list tail if this was an empty list.
        if (parentTriple.subject === RDF_NIL)
          return next;
      }
      // The list was in the parent triple's object.
      else {
        // Restore the parent triple's predicate and object as well.
        this._predicate = parentTriple.predicate;
        this._object = parentTriple.object;
        next = this._getTripleEndReader();
        // Skip writing the list tail if this was an empty list.
        if (parentTriple.object === RDF_NIL)
          return next;
      }
      // Close the list by making the item head nil.
      itemHead = RDF_NIL;
      break;
    default:
      return this._error('Expected list item instead of "' + token.type + '"', token);
    }

     // Create a new blank node if no item head was assigned yet.
    if (itemHead === null)
      this._subject = itemHead = '_:b' + blankNodeCount++;

    // Is this the first element of the list?
    if (prevItemHead === null) {
      // This list is either the object or the subject.
      if (parentTriple.object === RDF_NIL)
        parentTriple.object = itemHead;
      else
        parentTriple.subject = itemHead;
    }
    else {
      // The rest of the list is in the current head.
      this._callback(null, { subject:   prevItemHead,
                             predicate: RDF_REST,
                             object:    itemHead,
                             graph:     this._graph || '' });
    }
    // Add the item's value.
    if (item !== null)
      this._callback(null, { subject:   itemHead,
                             predicate: RDF_FIRST,
                             object:    item,
                             graph:     this._graph || '' });
    return next;
  },

  // ### `_readPunctuation` reads punctuation between triples or triple parts.
  _readPunctuation: function (token) {
    var next, subject = this._subject, graph = this._graph;
    switch (token.type) {
    // A closing brace ends a graph
    case '}':
      if (this._graph === null)
        return this._error('Unexpected graph closing', token);
      this._graph = null;
    // A dot just ends the statement, without sharing anything with the next.
    case '.':
      this._subject = null;
      next = this._readInTopContext;
      break;
    // Semicolon means the subject is shared; predicate and object are different.
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different.
    case ',':
      next = this._readObject;
      break;
    // An IRI means this is a quad (only allowed if not already inside a graph).
    case 'IRI':
      if (this._supportsQuads && this._graph === null) {
        if (this._base === null || absoluteIRI.test(token.value))
          graph = token.value;
        else
          graph = this._resolveIRI(token);
        subject = this._subject;
        next = this._readQuadPunctuation;
        break;
      }
    // An prefixed name means this is a quad (only allowed if not already inside a graph).
    case 'prefixed':
      if (this._supportsQuads && this._graph === null) {
        var prefix = this._prefixes[token.prefix];
        if (prefix === undefined)
          return this._error('Undefined prefix "' + token.prefix + ':"', token);
        graph = prefix + token.value;
        next = this._readQuadPunctuation;
        break;
      }
    default:
      return this._error('Expected punctuation to follow "' + this._object + '"', token);
    }
    // A triple has been completed now, so return it.
    if (subject !== null)
      this._callback(null, { subject:   subject,
                             predicate: this._predicate,
                             object:    this._object,
                             graph:     graph || '' });
    return next;
  },

    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
  _readBlankNodePunctuation: function (token) {
    var next;
    switch (token.type) {
    // Semicolon means the subject is shared; predicate and object are different.
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different.
    case ',':
      next = this._readObject;
      break;
    default:
      return this._error('Expected punctuation to follow "' + this._object + '"', token);
    }
    // A triple has been completed now, so return it.
    this._callback(null, { subject:   this._subject,
                           predicate: this._predicate,
                           object:    this._object,
                           graph:     this._graph || '' });
    return next;
  },

  // ### `_readQuadPunctuation` reads punctuation after a quad.
  _readQuadPunctuation: function (token) {
    if (token.type !== '.')
      return this._error('Expected dot to follow quad', token);
    return this._readInTopContext;
  },

  // ### `_readPrefix` reads the prefix of a prefix declaration.
  _readPrefix: function (token) {
    if (token.type !== 'prefix')
      return this._error('Expected prefix to follow @prefix', token);
    this._prefix = token.value;
    return this._readPrefixIRI;
  },

  // ### `_readPrefixIRI` reads the IRI of a prefix declaration.
  _readPrefixIRI: function (token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);
    var prefixIRI;
    if (this._base === null || absoluteIRI.test(token.value))
      prefixIRI = token.value;
    else
      prefixIRI = this._resolveIRI(token);
    this._prefixes[this._prefix] = prefixIRI;
    this._prefixCallback(this._prefix, prefixIRI);
    return this._readDeclarationPunctuation;
  },

  // ### `_readBaseIRI` reads the IRI of a base declaration.
  _readBaseIRI: function (token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow base declaration', token);
    try {
      this._setBase(this._base === null ||
                    absoluteIRI.test(token.value) ? token.value : this._resolveIRI(token));
    }
    catch (error) { this._error(error.message, token); }
    return this._readDeclarationPunctuation;
  },

  // ### `_readNamedGraphLabel` reads the label of a named graph.
  _readNamedGraphLabel: function (token) {
    switch (token.type) {
    case 'IRI':
    case 'prefixed':
      return this._readSubject(token), this._readGraph;
    case '[':
      return this._readNamedGraphBlankLabel;
    default:
      return this._error('Invalid graph label', token);
    }
  },

  // ### `_readNamedGraphLabel` reads a blank node label of a named graph.
  _readNamedGraphBlankLabel: function (token) {
    if (token.type !== ']')
      return this._error('Invalid graph label', token);
    this._subject = '_:b' + blankNodeCount++;
    return this._readGraph;
  },

  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration.
  _readDeclarationPunctuation: function (token) {
    // SPARQL-style declarations don't have punctuation.
    if (this._sparqlStyle)
      return this._readInTopContext(token);

    if (token.type !== '.')
      return this._error('Expected declaration to end with a dot', token);
    return this._readInTopContext;
  },

  // ### `_getTripleEndReader` gets the next reader function at the end of a triple.
  _getTripleEndReader: function () {
    var stack = this._tripleStack;
    if (stack.length === 0)
      return this._readPunctuation;

    switch (stack[stack.length - 1].type) {
    case 'blank':
      return this._readBlankNodeTail;
    case 'list':
      return this._readListItem;
    }
  },

  // ### `_error` emits an error message through the callback.
  _error: function (message, token) {
    this._callback(new Error(message + ' at line ' + token.line + '.'));
  },

  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  _resolveIRI: function (token) {
    var iri = token.value;
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return this._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return this._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default:
      return this._removeDotSegments(this._basePath + iri);
    }
  },

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  _removeDotSegments: function (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  },

  // ## Public methods

  // ### `parse` parses the N3 input and emits each parsed triple through the callback.
  parse: function (input, tripleCallback, prefixCallback) {
    // The read callback is the next function to be executed when a token arrives.
    // We start reading in the top context.
    this._readCallback = this._readInTopContext;
    this._prefixes = Object.create(null);
    this._prefixes._ = this._blankNodePrefix || '_:b' + blankNodePrefix++ + '_';

    // If the input argument is not given, shift parameters
    if (typeof input === 'function')
      prefixCallback = tripleCallback, tripleCallback = input, input = null;

    // Set the triple and prefix callbacks.
    this._callback = tripleCallback || noop;
    this._prefixCallback = prefixCallback || noop;

    // Execute the read callback when a token arrives.
    var self = this;
    this._lexer.tokenize(input, function (error, token) {
      if (error !== null)
        self._callback(error), self._callback = noop;
      else if (self._readCallback !== undefined)
        self._readCallback = self._readCallback(token);
    });

    // If no input was given, it can be added with `addChunk` and ended with `end`
    if (!input) {
      this.addChunk = this._lexer.addChunk;
      this.end = this._lexer.end;
    }
  },
};

// The empty function
function noop() {}

// ## Exports

// Export the `N3Parser` class as a whole.
module.exports = N3Parser;

},{"./N3Lexer":113}],115:[function(_dereq_,module,exports){
// **N3Store** objects store N3 triples by graph in memory.

var expandPrefixedName = _dereq_('./N3Util').expandPrefixedName;

// ## Constructor
function N3Store(triples, options) {
  if (!(this instanceof N3Store))
    return new N3Store(triples, options);

  // The number of triples is initially zero.
  this._size = 0;
  // `_graphs` contains subject, predicate, and object indexes per graph.
  this._graphs = Object.create(null);
  // `_entities` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers.
  // This saves memory, since only the numbers have to be stored in `_graphs`.
  this._entities = Object.create(null);
  this._entities['><'] = 0; // Dummy entry, so the first actual key is non-zero
  this._entityCount = 0;
  // `_blankNodeIndex` is the index of the last created blank node that was automatically named
  this._blankNodeIndex = 0;

  // Shift parameters if `triples` is not given
  if (!options && triples && !triples[0])
    options = triples, triples = null;

  // Add triples and prefixes if passed
  this._prefixes = Object.create(null);
  if (options && options.prefixes)
    this.addPrefixes(options.prefixes);
  if (triples)
    this.addTriples(triples);
}

N3Store.prototype = {
  // ## Public properties

  // ### `size` returns the number of triples in the store.
  get size() {
    // Return the triple count if if was cached.
    var size = this._size;
    if (size !== null)
      return size;

    // Calculate the number of triples by counting to the deepest level.
    var graphs = this._graphs, subjects, subject;
    for (var graphKey in graphs)
      for (var subjectKey in (subjects = graphs[graphKey].subjects))
        for (var predicateKey in (subject = subjects[subjectKey]))
          size += Object.keys(subject[predicateKey]).length;
    return this._size = size;
  },

  // ## Private methods

  // ### `_addToIndex` adds a triple to a three-layered index.
  _addToIndex: function (index0, key0, key1, key2) {
    // Create layers as necessary.
    var index1 = index0[key0] || (index0[key0] = {});
    var index2 = index1[key1] || (index1[key1] = {});
    // Setting the key to _any_ value signalizes the presence of the triple.
    index2[key2] = null;
  },

  // ### `_removeFromIndex` removes a triple from a three-layered index.
  _removeFromIndex: function (index0, key0, key1, key2) {
    // Remove the triple from the index.
    var index1 = index0[key0], index2 = index1[key1], key;
    delete index2[key2];

    // Remove intermediary index layers if they are empty.
    for (key in index2) return;
    delete index1[key1];
    for (key in index1) return;
    delete index0[key0];
  },

  // ### `_findInIndex` finds a set of triples in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be `null`, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting triple
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created triples.
  _findInIndex: function (index0, key0, key1, key2, name0, name1, name2, graph) {
    var results = [], entityKeys = Object.keys(this._entities), tmp, index1, index2;

    // If a key is specified, use only that part of index 0.
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      var entity0 = entityKeys[value0];

      if (index1 = index0[value0]) {
        // If a key is specified, use only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          var entity1 = entityKeys[value1];

          if (index2 = index1[value1]) {
            // If a key is specified, use only that part of index 2, if it exists.
            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);
            // Create triples for all items found in index 2.
            for (var l = values.length - 1; l >= 0; l--) {
              var result = { subject: '', predicate: '', object: '', graph: graph };
              result[name0] = entity0;
              result[name1] = entity1;
              result[name2] = entityKeys[values[l]];
              results.push(result);
            }
          }
        }
      }
    }
    return results;
  },

  // ### `_countInIndex` counts matching triples in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be `null`, which is interpreted as a wildcard.
  _countInIndex: function (index0, key0, key1, key2) {
    var count = 0, tmp, index1, index2;

    // If a key is specified, count only that part of index 0.
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      if (index1 = index0[value0]) {
        // If a key is specified, count only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          if (index2 = index1[value1]) {
            // If a key is specified, count the triple if it exists.
            if (key2) (key2 in index2) && count++;
            // Otherwise, count all triples.
            else count += Object.keys(index2).length;
          }
        }
      }
    }
    return count;
  },

  // ## Public methods

  // ### `addTriple` adds a new N3 triple to the store.
  addTriple: function (subject, predicate, object, graph) {
    // Shift arguments if a triple object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Find the graph that will contain the triple.
    graph = graph || '';
    var graphItem = this._graphs[graph];
    // Create the graph if it doesn't exist yet.
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway.
      Object.freeze(graphItem);
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    var entities = this._entities;
    subject   = entities[subject]   || (entities[subject]   = ++this._entityCount);
    predicate = entities[predicate] || (entities[predicate] = ++this._entityCount);
    object    = entities[object]    || (entities[object]    = ++this._entityCount);

    this._addToIndex(graphItem.subjects,   subject,   predicate, object);
    this._addToIndex(graphItem.predicates, predicate, object,    subject);
    this._addToIndex(graphItem.objects,    object,    subject,   predicate);

    // The cached triple count is now invalid.
    this._size = null;
  },

  // ### `addTriples` adds multiple N3 triples to the store.
  addTriples: function (triples) {
    for (var i = triples.length - 1; i >= 0; i--)
      this.addTriple(triples[i]);
  },

  // ### `addPrefix` adds support for querying with the given prefix
  addPrefix: function (prefix, iri) {
    this._prefixes[prefix] = iri;
  },

  // ### `addPrefixes` adds support for querying with the given prefixes
  addPrefixes: function (prefixes) {
    for (var prefix in prefixes)
      this.addPrefix(prefix, prefixes[prefix]);
  },

  // ### `removeTriple` removes an N3 triple from the store if it exists.
  removeTriple: function (subject, predicate, object, graph) {
    // Shift arguments if a triple object is given instead of components.
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;
    graph = graph || '';

    // Find internal identifiers for all components.
    var graphItem, entities = this._entities, graphs = this._graphs;
    if (!(subject     = entities[subject]))   return;
    if (!(predicate   = entities[predicate])) return;
    if (!(object      = entities[object]))    return;
    if (!(graphItem   = graphs[graph]))       return;

    // Verify that the triple exists.
    var subjects, predicates;
    if (!(subjects   = graphItem.subjects[subject])) return;
    if (!(predicates = subjects[predicate])) return;
    if (!(object in predicates)) return;

    // Remove it from all indexes.
    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);
    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);
    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);
    if (this._size !== null) this._size--;

    // Remove the graph if it is empty.
    for (subject in graphItem.subjects) return;
    delete graphs[graph];
  },

  // ### `removeTriples` removes multiple N3 triples from the store.
  removeTriples: function (triples) {
    for (var i = triples.length - 1; i >= 0; i--)
      this.removeTriple(triples[i]);
  },

  // ### `find` finds a set of triples matching a pattern, expanding prefixes as necessary.
  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
  // Setting `graph` to `null` means the default graph.
  find: function (subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.findByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `findByIRI` finds a set of triples matching a pattern.
  // Setting `subject`, `predicate`, or `object` to a falsy value means an _anything_ wildcard.
  // Setting `graph` to a falsy value means the default graph.
  findByIRI: function (subject, predicate, object, graph) {
    graph = graph || '';
    var graphItem = this._graphs[graph], entities = this._entities;

    // If the specified graph contain no triples, there are no results.
    if (!graphItem) return [];

    // Translate IRIs to internal index keys.
    // Optimization: if the entity doesn't exist, no triples with it exist.
    if (subject   && !(subject   = entities[subject]))   return [];
    if (predicate && !(predicate = entities[predicate])) return [];
    if (object    && !(object    = entities[object]))    return [];

    // Choose the optimal index, based on what fields are present
    if (subject) {
      if (object)
        // If subject and object are given, the object index will be the fastest.
        return this._findInIndex(graphItem.objects, object, subject, predicate,
                                 'object', 'subject', 'predicate', graph);
      else
        // If only subject and possibly predicate are given, the subject index will be the fastest.
        return this._findInIndex(graphItem.subjects, subject, predicate, null,
                                 'subject', 'predicate', 'object', graph);
    }
    else if (predicate)
      // If only predicate and possibly object are given, the predicate index will be the fastest.
      return this._findInIndex(graphItem.predicates, predicate, object, null,
                               'predicate', 'object', 'subject', graph);
    else if (object)
      // If only object is given, the object index will be the fastest.
      return this._findInIndex(graphItem.objects, object, null, null,
                               'object', 'subject', 'predicate', graph);
    else
      // If nothing is given, iterate subjects and predicates first
      return this._findInIndex(graphItem.subjects, null, null, null,
                               'subject', 'predicate', 'object', graph);
  },

  // ### `count` returns the number of triples matching a pattern, expanding prefixes as necessary.
  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
  // Setting `graph` to `null` means the default graph.
  count: function (subject, predicate, object, graph) {
    var prefixes = this._prefixes;
    return this.countByIRI(
      expandPrefixedName(subject,   prefixes),
      expandPrefixedName(predicate, prefixes),
      expandPrefixedName(object,    prefixes),
      expandPrefixedName(graph,     prefixes)
    );
  },

  // ### `countByIRI` returns the number of triples matching a pattern.
  // Setting `subject`, `predicate`, or `object` to `null` means an _anything_ wildcard.
  // Setting `graph` to `null` means the default graph.
  countByIRI: function (subject, predicate, object, graph) {
    graph = graph || '';
    var graphItem = this._graphs[graph], entities = this._entities;

    // If the specified graph contain no triples, there are no results.
    if (!graphItem) return 0;

    // Translate IRIs to internal index keys.
    // Optimization: if the entity doesn't exist, no triples with it exist.
    if (subject   && !(subject   = entities[subject]))   return 0;
    if (predicate && !(predicate = entities[predicate])) return 0;
    if (object    && !(object    = entities[object]))    return 0;

    // Choose the optimal index, based on what fields are present
    if (subject) {
      if (object)
        // If subject and object are given, the object index will be the fastest.
        return this._countInIndex(graphItem.objects, object, subject, predicate);
      else
        // If only subject and possibly predicate are given, the subject index will be the fastest.
        return this._countInIndex(graphItem.subjects, subject, predicate, object);
    }
    else if (predicate) {
      // If only predicate and possibly object are given, the predicate index will be the fastest.
      return this._countInIndex(graphItem.predicates, predicate, object, subject);
    }
    else {
      // If only object is possibly given, the object index will be the fastest.
      return this._countInIndex(graphItem.objects, object, subject, predicate);
    }
  },

  // ### `createBlankNode` creates a new blank node, returning its name.
  createBlankNode: function (suggestedName) {
    var name, index;
    // Generate a name based on the suggested name
    if (suggestedName) {
      name = suggestedName = '_:' + suggestedName, index = 1;
      while (this._entities[name])
        name = suggestedName + index++;
    }
    // Generate a generic blank node name
    else {
      do { name = '_:b' + this._blankNodeIndex++; }
      while (this._entities[name]);
    }
    // Add the blank node to the entities, avoiding the generation of duplicates
    this._entities[name] = ++this._entityCount;
    return name;
  },
};

// ## Exports

// Export the `N3Store` class as a whole.
module.exports = N3Store;

},{"./N3Util":118}],116:[function(_dereq_,module,exports){
// **N3StreamParser** parses an N3 stream into a triple stream
var Transform = _dereq_('stream').Transform,
    util = _dereq_('util'),
    N3Parser = _dereq_('./N3Parser.js');

// ## Constructor
function N3StreamParser(options) {
  if (!(this instanceof N3StreamParser))
    return new N3StreamParser(options);

  // Initialize Transform base class
  Transform.call(this, { decodeStrings: true });
  this._readableState.objectMode = true;

  // Set up parser
  var self = this, parser = new N3Parser(options);
  parser.parse(
    // Handle triples by pushing them down the pipeline
    function (error, triple) {
      triple && self.push(triple) ||
      error  && self.emit('error', error);
    },
    // Emit prefixes through the `prefix` event
    this.emit.bind(this, 'prefix'));

  // Implement Transform methods on top of parser
  this._transform = function (chunk, encoding, done) { parser.addChunk(chunk); done(); };
  this._flush = function (done) { parser.end(); done(); };
}
util.inherits(N3StreamParser, Transform);

// ## Exports
// Export the `N3StreamParser` class as a whole.
module.exports = N3StreamParser;

},{"./N3Parser.js":114,"stream":37,"util":47}],117:[function(_dereq_,module,exports){
// **N3StreamWriter** serializes a triple stream into an N3 stream
var Transform = _dereq_('stream').Transform,
    util = _dereq_('util'),
    N3Writer = _dereq_('./N3Writer.js');

// ## Constructor
function N3StreamWriter(options) {
  if (!(this instanceof N3StreamWriter))
    return new N3StreamWriter(options);

  // Initialize Transform base class
  Transform.call(this, { encoding: 'utf8' });
  this._writableState.objectMode = true;

  // Set up writer with a dummy stream object
  var self = this;
  var writer = new N3Writer({
    write: function (chunk, encoding, callback) { self.push(chunk); callback && callback(); },
    end: function (callback) { self.push(null); callback && callback(); },
  }, options);

  // Implement Transform methods on top of writer
  this._transform = function (triple, encoding, done) { writer.addTriple(triple, done); };
  this._flush = function (done) { writer.end(done); };
}
util.inherits(N3StreamWriter, Transform);

// ## Exports
// Export the `N3StreamWriter` class as a whole.
module.exports = N3StreamWriter;

},{"./N3Writer.js":119,"stream":37,"util":47}],118:[function(_dereq_,module,exports){
// **N3Util** provides N3 utility functions

var Xsd = 'http://www.w3.org/2001/XMLSchema#';
var XsdString  = Xsd + 'string';
var XsdInteger = Xsd + 'integer';
var XsdDecimal = Xsd + 'decimal';
var XsdBoolean = Xsd + 'boolean';
var RdfLangString = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString';

var N3Util = {
  // Tests whether the given entity (triple object) represents an IRI in the N3 library
  isIRI: function (entity) {
    if (!entity)
      return entity;
    var firstChar = entity[0];
    return firstChar !== '"' && firstChar !== '_';
  },

  // Tests whether the given entity (triple object) represents a literal in the N3 library
  isLiteral: function (entity) {
    return entity && entity[0] === '"';
  },

  // Tests whether the given entity (triple object) represents a blank node in the N3 library
  isBlank: function (entity) {
    return entity && entity.substr(0, 2) === '_:';
  },

  // Gets the string value of a literal in the N3 library
  getLiteralValue: function (literal) {
    var match = /^"([^]*)"/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1];
  },

  // Gets the type of a literal in the N3 library
  getLiteralType: function (literal) {
    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  },

  // Gets the language of a literal in the N3 library
  getLiteralLanguage: function (literal) {
    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  },

  // Tests whether the given entity (triple object) represents a prefixed name
  isPrefixedName: function (entity) {
    return entity && /^[^:\/"']*:[^:\/"']+$/.test(entity);
  },

  // Expands the prefixed name to a full IRI (also when it occurs as a literal's type)
  expandPrefixedName: function (prefixedName, prefixes) {
    var match = /(?:^|"\^\^)([^:\/#"'\^_]*):[^\/]*$/.exec(prefixedName), prefix, base, index;
    if (match)
      prefix = match[1], base = prefixes[prefix], index = match.index;
    if (base === undefined)
      return prefixedName;

    // The match index is non-zero when expanding a literal's type.
    return index === 0 ? base + prefixedName.substr(prefix.length + 1)
                       : prefixedName.substr(0, index + 3) +
                         base + prefixedName.substr(index + prefix.length + 4);
  },

  // Creates an IRI in N3.js representation
  createIRI: function (iri) {
    return iri && iri[0] === '"' ? N3Util.getLiteralValue(iri) : iri;
  },

  // Creates a literal in N3.js representation
  createLiteral: function (value, modifier) {
    if (!modifier) {
      switch (typeof value) {
      case 'boolean':
        modifier = XsdBoolean;
        break;
      case 'number':
        if (isFinite(value)) {
          modifier = value % 1 === 0 ? XsdInteger : XsdDecimal;
          break;
        }
      default:
        return '"' + value + '"';
      }
    }
    return '"' + value +
           (/^[a-z]+(-[a-z0-9]+)*$/i.test(modifier) ? '"@'  + modifier.toLowerCase()
                                                    : '"^^' + modifier);
  },
};

// Add the N3Util functions to the given object or its prototype
function addN3Util(parent, toPrototype) {
  for (var name in N3Util)
    if (!toPrototype)
      parent[name] = N3Util[name];
    else
      parent.prototype[name] = applyToThis(N3Util[name]);

  return parent;
}

// Returns a function that applies `f` to the `this` object
function applyToThis(f) {
  return function (a) { return f(this, a); };
}

// Expose N3Util, attaching all functions to it
module.exports = addN3Util(addN3Util);

},{}],119:[function(_dereq_,module,exports){
// **N3Writer** writes N3 documents.

// Matches a literal as represented in memory by the N3 library
var N3LiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i;

// rdf:type predicate (for 'a' abbreviation)
var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE   = RDF_PREFIX + 'type';

// Characters in literals that require escaping
var escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapeReplacements = { '\\': '\\\\', '"': '\\"', '\t': '\\t',
                           '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f' };

// ## Constructor
function N3Writer(outputStream, options) {
  if (!(this instanceof N3Writer))
    return new N3Writer(outputStream, options);

  // Shift arguments if the first argument is not a stream
  if (outputStream && typeof outputStream.write !== 'function')
    options = outputStream, outputStream = null;
  options = options || {};

  // If no output stream given, send the output as string through the end callback
  if (!outputStream) {
    var output = '';
    this._outputStream = {
      write: function (chunk, encoding, done) { output += chunk; done && done(); },
      end:   function (done) { done && done(null, output); },
    };
    this._endStream = true;
  }
  else {
    this._outputStream = outputStream;
    this._endStream = options.end === undefined ? true : !!options.end;
  }

  // Initialize writer, depending on the format
  this._subject = null;
  if (!(/triple|quad/i).test(options.format)) {
    this._graph = '';
    this._prefixIRIs = Object.create(null);
    options.prefixes && this.addPrefixes(options.prefixes);
  }
  else {
    this._writeTriple = this._writeTripleLine;
  }
}

N3Writer.prototype = {
  // ## Private methods

  // ### `_write` writes the argument to the output stream
  _write: function (string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  },

    // ### `_writeTriple` writes the triple to the output stream
  _writeTriple: function (subject, predicate, object, graph, done) {
    try {
      // Write the graph's label if it has changed
      if (this._graph !== graph) {
        // Close the previous graph and start the new one
        this._write((this._subject === null ? '' : (this._graph ? '\n}\n' : '.\n')) +
                    (graph ? this._encodeIriOrBlankNode(graph) + ' {\n' : ''));
        this._subject = null;
        // Don't treat identical blank nodes as repeating graphs
        this._graph = graph[0] !== '[' ? graph : ']';
      }
      // Don't repeat the subject if it's the same
      if (this._subject === subject) {
        // Don't repeat the predicate if it's the same
        if (this._predicate === predicate)
          this._write(', ' + this._encodeObject(object), done);
        // Same subject, different predicate
        else
          this._write(';\n    ' +
                      this._encodePredicate(this._predicate = predicate) + ' ' +
                      this._encodeObject(object), done);
      }
      // Different subject; write the whole triple
      else
        this._write((this._subject === null ? '' : '.\n') +
                    this._encodeSubject(this._subject = subject) + ' ' +
                    this._encodePredicate(this._predicate = predicate) + ' ' +
                    this._encodeObject(object), done);
    }
    catch (error) { done && done(error); }
  },

  // ### `_writeTripleLine` writes the triple or quad to the output stream as a single line
  _writeTripleLine: function (subject, predicate, object, graph, done) {
    // Don't use prefixes
    delete this._prefixMatch;
    // Write the triple
    try {
      this._write(this._encodeIriOrBlankNode(subject) + ' ' +
                  this._encodeIriOrBlankNode(predicate) + ' ' +
                  this._encodeObject(object) +
                  (graph ? ' ' + this._encodeIriOrBlankNode(graph) + '.\n' : '.\n'), done);
    }
    catch (error) { done && done(error); }
  },

  // ### `_encodeIriOrBlankNode` represents an IRI or blank node
  _encodeIriOrBlankNode: function (entity) {
    // A blank node or list is represented as-is
    var firstChar = entity[0];
    if (firstChar === '[' || firstChar === '(' || firstChar === '_' && entity[1] === ':')
      return entity;
    // Escape special characters
    if (escape.test(entity))
      entity = entity.replace(escapeAll, characterReplacer);
    // Try to represent the IRI as prefixed name
    var prefixMatch = this._prefixRegex.exec(entity);
    return !prefixMatch ? '<' + entity + '>' :
           (!prefixMatch[1] ? entity : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);
  },

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral: function (value, type, language) {
    // Escape special characters
    if (escape.test(value))
      value = value.replace(escapeAll, characterReplacer);
    // Write the literal, possibly with type or language
    if (language)
      return '"' + value + '"@' + language;
    else if (type)
      return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
    else
      return '"' + value + '"';
  },

  // ### `_encodeSubject` represents a subject
  _encodeSubject: function (subject) {
    if (subject[0] === '"')
      throw new Error('A literal as subject is not allowed: ' + subject);
    // Don't treat identical blank nodes as repeating subjects
    if (subject[0] === '[')
      this._subject = ']';
    return this._encodeIriOrBlankNode(subject);
  },

  // ### `_encodePredicate` represents a predicate
  _encodePredicate: function (predicate) {
    if (predicate[0] === '"')
      throw new Error('A literal as predicate is not allowed: ' + predicate);
    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
  },

  // ### `_encodeObject` represents an object
  _encodeObject: function (object) {
    // Represent an IRI or blank node
    if (object[0] !== '"')
      return this._encodeIriOrBlankNode(object);
    // Represent a literal
    var match = N3LiteralMatcher.exec(object);
    if (!match) throw new Error('Invalid literal: ' + object);
    return this._encodeLiteral(match[1], match[2], match[3]);
  },

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite: function () {
    throw new Error('Cannot write because the writer has been closed.');
  },

  // ### `addTriple` adds the triple to the output stream
  addTriple: function (subject, predicate, object, graph, done) {
    // The triple was given as a triple object, so shift parameters
    if (object === undefined)
      this._writeTriple(subject.subject, subject.predicate, subject.object,
                        subject.graph || '', predicate);
    // The optional `graph` parameter was not provided
    else if (typeof graph !== 'string')
      this._writeTriple(subject, predicate, object, '', graph);
    // The `graph` parameter was provided
    else
      this._writeTriple(subject, predicate, object, graph, done);
  },

  // ### `addTriples` adds the triples to the output stream
  addTriples: function (triples) {
    for (var i = 0; i < triples.length; i++)
      this.addTriple(triples[i]);
  },

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix: function (prefix, iri, done) {
    var prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  },

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes: function (prefixes, done) {
    // Add all useful prefixes
    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
    for (var prefix in prefixes) {
      // Verify whether the prefix can be used and does not exist yet
      var iri = prefixes[prefix];
      if (/[#\/]$/.test(iri) && prefixIRIs[iri] !== (prefix += ':')) {
        hasPrefixes = true;
        prefixIRIs[iri] = prefix;
        // Finish a possible pending triple
        if (this._subject !== null) {
          this._write(this._graph ? '\n}\n' : '.\n');
          this._subject = null, this._graph = '';
        }
        // Write prefix
        this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
      }
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      var IRIlist = '', prefixList = '';
      for (var prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  },

  // ### `blank` creates a blank node with the given content
  blank: function (predicate, object) {
    var children = predicate, child, length;
    // Empty blank node
    if (predicate === undefined)
      children = [];
    // Blank node passed as blank("predicate", "object")
    else if (typeof predicate === 'string')
      children = [{ predicate: predicate, object: object }];
    // Blank node passed as blank({ predicate: predicate, object: object })
    else if (!('length' in predicate))
      children = [predicate];

    switch (length = children.length) {
    // Generate an empty blank node
    case 0:
      return '[]';
    // Generate a non-nested one-triple blank node
    case 1:
      child = children[0];
      if (child.object[0] !== '[')
        return '[ ' + this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object) + ' ]';
    // Generate a multi-triple or nested blank node
    default:
      var contents = '[';
      // Write all triples in order
      for (var i = 0; i < length; i++) {
        child = children[i];
        // Write only the object is the predicate is the same as the previous
        if (child.predicate === predicate)
          contents += ', ' + this._encodeObject(child.object);
        // Otherwise, write the predicate and the object
        else {
          contents += (i ? ';\n  ' : '\n  ') +
                      this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object);
          predicate = child.predicate;
        }
      }
      return contents + '\n]';
    }
  },

  // ### `list` creates a list node with the given content
  list: function (elements) {
    var length = elements && elements.length || 0, contents = new Array(length);
    for (var i = 0; i < length; i++)
      contents[i] = this._encodeObject(elements[i]);
    return '(' + contents.join(' ') + ')';
  },

  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
  _prefixRegex: /$0^/,

  // ### `end` signals the end of the output stream
  end: function (done) {
    // Finish a possible pending triple
    if (this._subject !== null) {
      this._write(this._graph ? '\n}\n' : '.\n');
      this._subject = null;
    }
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  },
};

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = escapeReplacements[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}

// ## Exports

// Export the `N3Writer` class as a whole.
module.exports = N3Writer;

},{}],120:[function(_dereq_,module,exports){
function DOMParser(options){
	this.options = options ||{locator:{}};
	
}
DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var isHTML = /\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;
  	var entityMap = isHTML?_dereq_('./entities').entityMap:{'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"};
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}
	
	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(isHTML){
		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
	}
	defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
	if(source){
		sax.parse(source,defaultNSMap,entityMap);
	}else{
		sax.errorHandler.error("invalid doc source");
	}
	return domBuilder.doc;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ 
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;
	    
		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},
	
	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},
	
	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
	    throw error;
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

//if(typeof require == 'function'){
	var XMLReader = _dereq_('./sax').XMLReader;
	var DOMImplementation = exports.DOMImplementation = _dereq_('./dom').DOMImplementation;
	exports.XMLSerializer = _dereq_('./dom').XMLSerializer ;
	exports.DOMParser = DOMParser;
//}

},{"./dom":121,"./entities":122,"./sax":123}],121:[function(_dereq_,module,exports){
/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy(src,dest){
	for(var p in src){
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(Object.create){
		var ppt = Object.create(Super.prototype)
		pt.__proto__ = ppt;
	}
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknow Class:"+Class)
		}
		pt.constructor = Class
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml' ;
// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0, 
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */
	item: function(index) {
		return this[index] || null;
	},
	toString:function(isHTML,nodeFilter){
		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	}
};
function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
}

_extends(LiveNodeList,NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
		
		
	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
	
	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation(/* Object */ features) {
	this._features = {};
	if (features) {
		for (var feature in features) {
			 this._features = features[feature];
		}
	}
};

DOMImplementation.prototype = {
	hasFeature: function(/* string */ feature, /* string */ version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype;
		if(doctype){
			doc.appendChild(doctype);
		}
		if(qualifiedName){
			var root = doc.createElementNS(namespaceURI,qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;
		
		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises 
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises 
		this.insertBefore(newChild,oldChild);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
    				if(map[n] == namespaceURI){
    					return n;
    				}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         c == '\n' && '&#10;' || // encode newline correctly
         c == '&#10;' && '&#10;' || // already correctly encoded, leave it untouched
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
}
function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}
function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}
function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode,newChild,nextChild){
	var cp = newChild.parentNode;
	if(cp){
		cp.removeChild(newChild);//remove and update
	}
	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	}else{
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;
	
	
	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parentNode.firstChild = newFirst;
	}
	if(nextChild == null){
		parentNode.lastChild = newLast;
	}else{
		nextChild.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parentNode;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode,newChild){
	var cp = newChild.parentNode;
	if(cp){
		var pre = parentNode.lastChild;
		cp.removeChild(newChild);//remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if(pre){
		pre.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	doctype :  null,
	documentElement :  null,
	_inc : 1,
	
	insertBefore :  function(newChild, refChild){//raises 
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
			this.documentElement = newChild;
		}
		
		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},
	
	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},
	
	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},
	
	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},
	
	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;
			
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);
	
	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
}
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9 && this.documentElement || this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;
	
	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null}
			//{namespace:uri,prefix:''}
			]
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}
function needNamespaceDefine(node,isHTML, visibleNamespaces) {
	var prefix = node.prefix||'';
	var uri = node.namespaceURI;
	if (!prefix && !uri){
		return false;
	}
	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
		|| uri == 'http://www.w3.org/2000/xmlns/'){
		return false;
	}
	
	var i = visibleNamespaces.length 
	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
		if (ns.prefix == prefix){
			return ns.namespace != uri;
		}
	}
	//console.log(isHTML,uri,prefix=='')
	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
	//	return false;
	//}
	//node.flag = '11111'
	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
	return true;
}
function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}
	switch(node.nodeType){
	case ELEMENT_NODE:
		if (!visibleNamespaces) visibleNamespaces = [];
		var startVisibleNamespaces = visibleNamespaces.length;
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;
		
		isHTML =  (htmlns === node.namespaceURI) ||isHTML 
		buf.push('<',nodeName);
		
		
		
		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}
		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="' , uri , '"');
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}
		// add namespace for current node		
		if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			var ns = prefix ? ' xmlns:' + prefix : " xmlns";
			buf.push(ns, '="' , uri , '"');
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}
		
		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					child = child.nextSibling;
				}
			}
			buf.push('</',nodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		// &#10; added before the other characters to avoid its & being replaced
		return buf.push(' ',node.name,'="',node.value.replace(/&#10;|[<&"\n]/g,_xmlEncoder),'"');
	case TEXT_NODE:
		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC "',pubid);
			if (sysid && sysid!='.') {
				buf.push( '" "',sysid);
			}
			buf.push('">');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM "',sysid,'">');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for(var n in node){
		var v = node[n];
		if(typeof v != 'object' ){
			if(v != node2[n]){
				node2[n] = v;
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},
			set:function(data){
				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;
				default:
					//TODO:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		})
		
		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}
		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	exports.DOMImplementation = DOMImplementation;
	exports.XMLSerializer = XMLSerializer;
//}

},{}],122:[function(_dereq_,module,exports){
exports.entityMap = {
       lt: '<',
       gt: '>',
       amp: '&',
       quot: '"',
       apos: "'",
       Agrave: "À",
       Aacute: "Á",
       Acirc: "Â",
       Atilde: "Ã",
       Auml: "Ä",
       Aring: "Å",
       AElig: "Æ",
       Ccedil: "Ç",
       Egrave: "È",
       Eacute: "É",
       Ecirc: "Ê",
       Euml: "Ë",
       Igrave: "Ì",
       Iacute: "Í",
       Icirc: "Î",
       Iuml: "Ï",
       ETH: "Ð",
       Ntilde: "Ñ",
       Ograve: "Ò",
       Oacute: "Ó",
       Ocirc: "Ô",
       Otilde: "Õ",
       Ouml: "Ö",
       Oslash: "Ø",
       Ugrave: "Ù",
       Uacute: "Ú",
       Ucirc: "Û",
       Uuml: "Ü",
       Yacute: "Ý",
       THORN: "Þ",
       szlig: "ß",
       agrave: "à",
       aacute: "á",
       acirc: "â",
       atilde: "ã",
       auml: "ä",
       aring: "å",
       aelig: "æ",
       ccedil: "ç",
       egrave: "è",
       eacute: "é",
       ecirc: "ê",
       euml: "ë",
       igrave: "ì",
       iacute: "í",
       icirc: "î",
       iuml: "ï",
       eth: "ð",
       ntilde: "ñ",
       ograve: "ò",
       oacute: "ó",
       ocirc: "ô",
       otilde: "õ",
       ouml: "ö",
       oslash: "ø",
       ugrave: "ù",
       uacute: "ú",
       ucirc: "û",
       uuml: "ü",
       yacute: "ý",
       thorn: "þ",
       yuml: "ÿ",
       nbsp: " ",
       iexcl: "¡",
       cent: "¢",
       pound: "£",
       curren: "¤",
       yen: "¥",
       brvbar: "¦",
       sect: "§",
       uml: "¨",
       copy: "©",
       ordf: "ª",
       laquo: "«",
       not: "¬",
       shy: "­­",
       reg: "®",
       macr: "¯",
       deg: "°",
       plusmn: "±",
       sup2: "²",
       sup3: "³",
       acute: "´",
       micro: "µ",
       para: "¶",
       middot: "·",
       cedil: "¸",
       sup1: "¹",
       ordm: "º",
       raquo: "»",
       frac14: "¼",
       frac12: "½",
       frac34: "¾",
       iquest: "¿",
       times: "×",
       divide: "÷",
       forall: "∀",
       part: "∂",
       exist: "∃",
       empty: "∅",
       nabla: "∇",
       isin: "∈",
       notin: "∉",
       ni: "∋",
       prod: "∏",
       sum: "∑",
       minus: "−",
       lowast: "∗",
       radic: "√",
       prop: "∝",
       infin: "∞",
       ang: "∠",
       and: "∧",
       or: "∨",
       cap: "∩",
       cup: "∪",
       'int': "∫",
       there4: "∴",
       sim: "∼",
       cong: "≅",
       asymp: "≈",
       ne: "≠",
       equiv: "≡",
       le: "≤",
       ge: "≥",
       sub: "⊂",
       sup: "⊃",
       nsub: "⊄",
       sube: "⊆",
       supe: "⊇",
       oplus: "⊕",
       otimes: "⊗",
       perp: "⊥",
       sdot: "⋅",
       Alpha: "Α",
       Beta: "Β",
       Gamma: "Γ",
       Delta: "Δ",
       Epsilon: "Ε",
       Zeta: "Ζ",
       Eta: "Η",
       Theta: "Θ",
       Iota: "Ι",
       Kappa: "Κ",
       Lambda: "Λ",
       Mu: "Μ",
       Nu: "Ν",
       Xi: "Ξ",
       Omicron: "Ο",
       Pi: "Π",
       Rho: "Ρ",
       Sigma: "Σ",
       Tau: "Τ",
       Upsilon: "Υ",
       Phi: "Φ",
       Chi: "Χ",
       Psi: "Ψ",
       Omega: "Ω",
       alpha: "α",
       beta: "β",
       gamma: "γ",
       delta: "δ",
       epsilon: "ε",
       zeta: "ζ",
       eta: "η",
       theta: "θ",
       iota: "ι",
       kappa: "κ",
       lambda: "λ",
       mu: "μ",
       nu: "ν",
       xi: "ξ",
       omicron: "ο",
       pi: "π",
       rho: "ρ",
       sigmaf: "ς",
       sigma: "σ",
       tau: "τ",
       upsilon: "υ",
       phi: "φ",
       chi: "χ",
       psi: "ψ",
       omega: "ω",
       thetasym: "ϑ",
       upsih: "ϒ",
       piv: "ϖ",
       OElig: "Œ",
       oelig: "œ",
       Scaron: "Š",
       scaron: "š",
       Yuml: "Ÿ",
       fnof: "ƒ",
       circ: "ˆ",
       tilde: "˜",
       ensp: " ",
       emsp: " ",
       thinsp: " ",
       zwnj: "‌",
       zwj: "‍",
       lrm: "‎",
       rlm: "‏",
       ndash: "–",
       mdash: "—",
       lsquo: "‘",
       rsquo: "’",
       sbquo: "‚",
       ldquo: "“",
       rdquo: "”",
       bdquo: "„",
       dagger: "†",
       Dagger: "‡",
       bull: "•",
       hellip: "…",
       permil: "‰",
       prime: "′",
       Prime: "″",
       lsaquo: "‹",
       rsaquo: "›",
       oline: "‾",
       euro: "€",
       trade: "™",
       larr: "←",
       uarr: "↑",
       rarr: "→",
       darr: "↓",
       harr: "↔",
       crarr: "↵",
       lceil: "⌈",
       rceil: "⌉",
       lfloor: "⌊",
       rfloor: "⌋",
       loz: "◊",
       spades: "♠",
       clubs: "♣",
       hearts: "♥",
       diams: "♦"
};
//for(var  n in exports.entityMap){console.log(exports.entityMap[n].charCodeAt())}
},{}],123:[function(_dereq_,module,exports){
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring 
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

function XMLReader(){
	
}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k]; 
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;
	
	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart+2,end);
				var config = parseStack.pop();
				if(end<0){
					
	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		//console.error('#@@@@@@'+tagName)
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				//console.error(parseStack.length,parseStack)
				//console.error(config);
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for(var prefix in localNSMap){
							domBuilder.endPrefixMapping(prefix) ;
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
					}
		        }else{
		        	parseStack.push(config)
		        }
				
				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;
				
				
				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					//}catch(e){console.error('@@@@@'+e)}
					domBuilder.locator = locator2
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
				}
				
				
				
				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				}else{
					end++;
				}
			}
		}catch(e){
			errorHandler.error('element parse error: '+e)
			//errorHandler.error('element parse error: '+e);
			end = -1;
			//throw e;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName');
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="')
					attrName = source.slice(start,p)
				}
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					el.add(attrName,value,start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				el.add(attrName,value,start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="');
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
			case S_ATTR_SPACE:
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')")
			}
			break;
		case ''://end document
			//throw new Error('unexpected end of input')
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start)
				}else{
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					}
					el.add(value,value,start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value,start)
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
					}
					el.add(attrName,attrName,start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute 
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/'
			domBuilder.startPrefixMapping(nsPrefix, value) 
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || '']
				
				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for(prefix in localNSMap){
				domBuilder.endPrefixMapping(prefix) 
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}
			
		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>')
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName)
		}
		closeMap[tagName] =pos
	}
	return pos<elStartEnd;
	//} 
}
function _copy(source,target){
	for(var n in source){target[n] = source[n]}
}
function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA() 
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
			var sysid = len>4 && matchs[4][0];
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
			domBuilder.endDTD();
			
			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source){
	
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	add:function(qName,value,offset){
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//			
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}




function _set_proto_(thiz,parent){
	thiz.__proto__ = parent;
	return thiz;
}
if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
	_set_proto_ = function(thiz,parent){
		function p(){};
		p.prototype = parent;
		p = new p();
		for(parent in thiz){
			p[parent] = thiz[parent];
		}
		return p;
	}
}

function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

exports.XMLReader = XMLReader;


},{}],124:[function(_dereq_,module,exports){
(function (process,Buffer){
/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */

var Url = _dereq_("url");
var spawn = _dereq_("child_process").spawn;
var fs = _dereq_("fs");

exports.XMLHttpRequest = function() {
  "use strict";

  /**
   * Private variables
   */
  var self = this;
  var http = _dereq_("http");
  var https = _dereq_("https");

  // Holds http.js objects
  var request;
  var response;

  // Request settings
  var settings = {};

  // Disable header blacklist.
  // Not part of XHR specs.
  var disableHeaderCheck = false;

  // Set some default headers
  var defaultHeaders = {
    "User-Agent": "node-XMLHttpRequest",
    "Accept": "*/*",
  };

  var headers = {};
  var headersCase = {};

  // These headers are not user setable.
  // The following are allowed but banned in the spec:
  // * user-agent
  var forbiddenRequestHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "content-transfer-encoding",
    "cookie",
    "cookie2",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
  ];

  // These request methods are not allowed
  var forbiddenRequestMethods = [
    "TRACE",
    "TRACK",
    "CONNECT"
  ];

  // Send flag
  var sendFlag = false;
  // Error flag, used when errors occur or abort is called
  var errorFlag = false;

  // Event listeners
  var listeners = {};

  /**
   * Constants
   */

  this.UNSENT = 0;
  this.OPENED = 1;
  this.HEADERS_RECEIVED = 2;
  this.LOADING = 3;
  this.DONE = 4;

  /**
   * Public vars
   */

  // Current state
  this.readyState = this.UNSENT;

  // default ready state change handler in case one is not set or is set late
  this.onreadystatechange = null;

  // Result & response
  this.responseText = "";
  this.responseXML = "";
  this.status = null;
  this.statusText = null;
  
  // Whether cross-site Access-Control requests should be made using
  // credentials such as cookies or authorization headers
  this.withCredentials = false;

  /**
   * Private methods
   */

  /**
   * Check if the specified header is allowed.
   *
   * @param string header Header to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpHeader = function(header) {
    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
  };

  /**
   * Check if the specified method is allowed.
   *
   * @param string method Request method to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpMethod = function(method) {
    return (method && forbiddenRequestMethods.indexOf(method) === -1);
  };

  /**
   * Public methods
   */

  /**
   * Open the connection. Currently supports local server requests.
   *
   * @param string method Connection method (eg GET, POST)
   * @param string url URL for the connection.
   * @param boolean async Asynchronous connection. Default is true.
   * @param string user Username for basic authentication (optional)
   * @param string password Password for basic authentication (optional)
   */
  this.open = function(method, url, async, user, password) {
    this.abort();
    errorFlag = false;

    // Check for valid request method
    if (!isAllowedHttpMethod(method)) {
      throw new Error("SecurityError: Request method not allowed");
    }

    settings = {
      "method": method,
      "url": url.toString(),
      "async": (typeof async !== "boolean" ? true : async),
      "user": user || null,
      "password": password || null
    };

    setState(this.OPENED);
  };

  /**
   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
   * This does not conform to the W3C spec.
   *
   * @param boolean state Enable or disable header checking.
   */
  this.setDisableHeaderCheck = function(state) {
    disableHeaderCheck = state;
  };

  /**
   * Sets a header for the request or appends the value if one is already set.
   *
   * @param string header Header name
   * @param string value Header value
   */
  this.setRequestHeader = function(header, value) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
    }
    if (!isAllowedHttpHeader(header)) {
      console.warn("Refused to set unsafe header \"" + header + "\"");
      return;
    }
    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send flag is true");
    }
    header = headersCase[header.toLowerCase()] || header;
    headersCase[header.toLowerCase()] = header;
    headers[header] = headers[header] ? headers[header] + ', ' + value : value;
  };

  /**
   * Gets a header from the server response.
   *
   * @param string header Name of header to get.
   * @return string Text of the header or null if it doesn't exist.
   */
  this.getResponseHeader = function(header) {
    if (typeof header === "string"
      && this.readyState > this.OPENED
      && response
      && response.headers
      && response.headers[header.toLowerCase()]
      && !errorFlag
    ) {
      return response.headers[header.toLowerCase()];
    }

    return null;
  };

  /**
   * Gets all the response headers.
   *
   * @return string A string with all response headers separated by CR+LF
   */
  this.getAllResponseHeaders = function() {
    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
      return "";
    }
    var result = "";

    for (var i in response.headers) {
      // Cookie headers are excluded
      if (i !== "set-cookie" && i !== "set-cookie2") {
        result += i + ": " + response.headers[i] + "\r\n";
      }
    }
    return result.substr(0, result.length - 2);
  };

  /**
   * Gets a request header
   *
   * @param string name Name of header to get
   * @return string Returns the request header or empty string if not set
   */
  this.getRequestHeader = function(name) {
    if (typeof name === "string" && headersCase[name.toLowerCase()]) {
      return headers[headersCase[name.toLowerCase()]];
    }

    return "";
  };

  /**
   * Sends the request to the server.
   *
   * @param string data Optional data to send as request body.
   */
  this.send = function(data) {
    if (this.readyState !== this.OPENED) {
      throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
    }

    if (sendFlag) {
      throw new Error("INVALID_STATE_ERR: send has already been called");
    }

    var ssl = false, local = false;
    var url = Url.parse(settings.url);
    var host;
    // Determine the server
    switch (url.protocol) {
      case "https:":
        ssl = true;
        // SSL & non-SSL both need host, no break here.
      case "http:":
        host = url.hostname;
        break;

      case "file:":
        local = true;
        break;

      case undefined:
      case null:
      case "":
        host = "localhost";
        break;

      default:
        throw new Error("Protocol not supported.");
    }

    // Load files off the local filesystem (file://)
    if (local) {
      if (settings.method !== "GET") {
        throw new Error("XMLHttpRequest: Only GET method is supported");
      }

      if (settings.async) {
        fs.readFile(url.pathname, "utf8", function(error, data) {
          if (error) {
            self.handleError(error);
          } else {
            self.status = 200;
            self.responseText = data;
            setState(self.DONE);
          }
        });
      } else {
        try {
          this.responseText = fs.readFileSync(url.pathname, "utf8");
          this.status = 200;
          setState(self.DONE);
        } catch(e) {
          this.handleError(e);
        }
      }

      return;
    }

    // Default to port 80. If accessing localhost on another port be sure
    // to use http://localhost:port/path
    var port = url.port || (ssl ? 443 : 80);
    // Add query string if one is used
    var uri = url.pathname + (url.search ? url.search : "");

    // Set the defaults if they haven't been set
    for (var name in defaultHeaders) {
      if (!headersCase[name.toLowerCase()]) {
        headers[name] = defaultHeaders[name];
      }
    }

    // Set the Host header or the server may reject the request
    headers.Host = host;
    if (!((ssl && port === 443) || port === 80)) {
      headers.Host += ":" + url.port;
    }

    // Set Basic Auth if necessary
    if (settings.user) {
      if (typeof settings.password === "undefined") {
        settings.password = "";
      }
      var authBuf = new Buffer(settings.user + ":" + settings.password);
      headers.Authorization = "Basic " + authBuf.toString("base64");
    }

    // Set content length header
    if (settings.method === "GET" || settings.method === "HEAD") {
      data = null;
    } else if (data) {
      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

      if (!headers["Content-Type"]) {
        headers["Content-Type"] = "text/plain;charset=UTF-8";
      }
    } else if (settings.method === "POST") {
      // For a post with no data set Content-Length: 0.
      // This is required by buggy servers that don't meet the specs.
      headers["Content-Length"] = 0;
    }

    var options = {
      host: host,
      port: port,
      path: uri,
      method: settings.method,
      headers: headers,
      agent: false,
      withCredentials: self.withCredentials
    };

    // Reset error flag
    errorFlag = false;

    // Handle async requests
    if (settings.async) {
      // Use the proper protocol
      var doRequest = ssl ? https.request : http.request;

      // Request is being sent, set send flag
      sendFlag = true;

      // As per spec, this is called here for historical reasons.
      self.dispatchEvent("readystatechange");

      // Handler for the response
      var responseHandler = function responseHandler(resp) {
        // Set response var to the response we got back
        // This is so it remains accessable outside this scope
        response = resp;
        // Check for redirect
        // @TODO Prevent looped redirects
        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
          // Change URL to the redirect location
          settings.url = response.headers.location;
          var url = Url.parse(settings.url);
          // Set host var in case it's used later
          host = url.hostname;
          // Options for the new request
          var newOptions = {
            hostname: url.hostname,
            port: url.port,
            path: url.path,
            method: response.statusCode === 303 ? "GET" : settings.method,
            headers: headers,
            withCredentials: self.withCredentials
          };

          // Issue the new request
          request = doRequest(newOptions, responseHandler).on("error", errorHandler);
          request.end();
          // @TODO Check if an XHR event needs to be fired here
          return;
        }

        response.setEncoding("utf8");

        setState(self.HEADERS_RECEIVED);
        self.status = response.statusCode;

        response.on("data", function(chunk) {
          // Make sure there's some data
          if (chunk) {
            self.responseText += chunk;
          }
          // Don't emit state changes if the connection has been aborted.
          if (sendFlag) {
            setState(self.LOADING);
          }
        });

        response.on("end", function() {
          if (sendFlag) {
            // Discard the end event if the connection has been aborted
            setState(self.DONE);
            sendFlag = false;
          }
        });

        response.on("error", function(error) {
          self.handleError(error);
        });
      };

      // Error handler for the request
      var errorHandler = function errorHandler(error) {
        self.handleError(error);
      };

      // Create the request
      request = doRequest(options, responseHandler).on("error", errorHandler);

      // Node 0.4 and later won't accept empty data. Make sure it's needed.
      if (data) {
        request.write(data);
      }

      request.end();

      self.dispatchEvent("loadstart");
    } else { // Synchronous
      // Create a temporary file for communication with the other Node process
      var contentFile = ".node-xmlhttprequest-content-" + process.pid;
      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
      fs.writeFileSync(syncFile, "", "utf8");
      // The async request the other Node process executes
      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
        + "var options = " + JSON.stringify(options) + ";"
        + "var responseText = '';"
        + "var req = doRequest(options, function(response) {"
        + "response.setEncoding('utf8');"
        + "response.on('data', function(chunk) {"
        + "  responseText += chunk;"
        + "});"
        + "response.on('end', function() {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "response.on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "}).on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
        + "req.end();";
      // Start the other Node Process, executing this string
      var syncProc = spawn(process.argv[0], ["-e", execString]);
      while(fs.existsSync(syncFile)) {
        // Wait while the sync file is empty
      }
      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));
      // Kill the child process once the file has data
      syncProc.stdin.end();
      // Remove the temporary file
      fs.unlinkSync(contentFile);

      if (resp.err) {
        self.handleError(resp.err);
      } else {
        response = resp.data;
        self.status = resp.data.statusCode;
        self.responseText = resp.data.text;
        setState(self.DONE);
      }
    }
  };

  /**
   * Called when an error is encountered to deal with it.
   */
  this.handleError = function(error) {
    this.status = 0;
    this.statusText = error;
    this.responseText = error.stack;
    errorFlag = true;
    setState(this.DONE);
    this.dispatchEvent('error');
  };

  /**
   * Aborts a request.
   */
  this.abort = function() {
    if (request) {
      request.abort();
      request = null;
    }

    headers = defaultHeaders;
    this.status = 0;
    this.responseText = "";
    this.responseXML = "";

    errorFlag = true;

    if (this.readyState !== this.UNSENT
        && (this.readyState !== this.OPENED || sendFlag)
        && this.readyState !== this.DONE) {
      sendFlag = false;
      setState(this.DONE);
    }
    this.readyState = this.UNSENT;
    this.dispatchEvent('abort');
  };

  /**
   * Adds an event listener. Preferred method of binding to events.
   */
  this.addEventListener = function(event, callback) {
    if (!(event in listeners)) {
      listeners[event] = [];
    }
    // Currently allows duplicate callbacks. Should it?
    listeners[event].push(callback);
  };

  /**
   * Remove an event callback that has already been bound.
   * Only works on the matching funciton, cannot be a copy.
   */
  this.removeEventListener = function(event, callback) {
    if (event in listeners) {
      // Filter will return a new array with the callback removed
      listeners[event] = listeners[event].filter(function(ev) {
        return ev !== callback;
      });
    }
  };

  /**
   * Dispatch any events, including both "on" methods and events attached using addEventListener.
   */
  this.dispatchEvent = function(event) {
    if (typeof self["on" + event] === "function") {
      self["on" + event]();
    }
    if (event in listeners) {
      for (var i = 0, len = listeners[event].length; i < len; i++) {
        listeners[event][i].call(self);
      }
    }
  };

  /**
   * Changes readyState and calls onreadystatechange.
   *
   * @param int state New state
   */
  var setState = function(state) {
    if (state == self.LOADING || self.readyState !== state) {
      self.readyState = state;

      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
        self.dispatchEvent("readystatechange");
      }

      if (self.readyState === self.DONE && !errorFlag) {
        self.dispatchEvent("load");
        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
        self.dispatchEvent("loadend");
      }
    }
  };
};

}).call(this,_dereq_('_process'),_dereq_("buffer").Buffer)

},{"_process":20,"buffer":5,"child_process":3,"fs":3,"http":38,"https":11,"url":43}],125:[function(_dereq_,module,exports){
var N3 = _dereq_('n3');

var ns = {};

ns.prefixes = {	rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
			    bqmodel: "http://biomodels.net/model-qualifiers/",
			    bqbiol: "http://biomodels.net/biology-qualifiers/",
			    sio: "http://semanticscience.org/resource/",
			    eisbm: "http://www.eisbm.org/"};

// pure shortcut function
ns.expandPrefix = function(prefix) {
	return N3.Util.expandPrefixedName(prefix, ns.prefixes)
};

// commonly used strings
str_sio223 = "sio:SIO_000223";
str_sio223exp = ns.expandPrefix(str_sio223);
str_sio116 = "sio:SIO_000116";
str_sio116exp = ns.expandPrefix(str_sio116);
str_rdfvalue = "rdf:value";
str_rdfvalueexp = ns.expandPrefix(str_rdfvalue);
str_rdftype = "rdf:type";
str_rdftypeexp = ns.expandPrefix(str_rdftype);
str_rdfbag = "rdf:Bag";
str_rdfbagexp = ns.expandPrefix(str_rdfbag);

controlledVocabularyList = [
	"bqmodel:is",
	"bqmodel:isDerivedFrom",
	"bqmodel:isDescribedBy",
	"bqmodel:isInstanceOf",
	"bqmodel:hasInstance",

	"bqbiol:is",
	"bqbiol:encodes",
	"bqbiol:hasPart",
	"bqbiol:hasProperty",
	"bqbiol:hasVersion",
	"bqbiol:isDescribedBy",
	"bqbiol:isEncodedBy",
	"bqbiol:isHomologTo",
	"bqbiol:isPartOf",
	"bqbiol:isPropertyOf",
	"bqbiol:isVersionOf",
	"bqbiol:occursIn",
	"bqbiol:hasTaxon",

	"sio:SIO_000223"
];

ns.isControlledVocabulary = {};
for(var i=0; i<controlledVocabularyList.length; i++) {
	var term = controlledVocabularyList[i];
	ns.isControlledVocabulary[ns.expandPrefix(term)] = true;
}

ns.reducePrefix = function (expandedString) {
	for (var key in ns.prefixes) {
		var completePrefix = ns.prefixes[key];
		if (expandedString.startsWith(completePrefix)) {
			return expandedString.replace(completePrefix, key+':');
		}
	}
	// no prefix could be recognized
	return expandedString;
};

ns.getCustomPropertiesOfId = function (graph, id) {
	var kvresult = {};
	//console.log(graph.getTriples());
	var propBags = graph.getTriples(id, str_sio223, null);
	//console.log(propBags);
	for(var i=0; i<propBags.length; i++) {
		var propBag = propBags[i].object;
		//console.log(propBag);
		var propertyContainers = graph.getTriples(propBag, null, null);
		//console.log(propertyContainers);
		for(var j=0; j<propertyContainers.length; j++) {
			var propertyContainer = propertyContainers[j].object;
			if(propertyContainer == str_rdfbagexp) {
				continue;
			}
			//console.log("container", propertyContainer);
			var value = graph.getObjects(propertyContainer, str_rdfvalueexp, null)[0];
			value = N3.Util.getLiteralValue(value);
			var key = graph.getObjects(propertyContainer, str_sio116exp, null)[0];
			key = N3.Util.getLiteralValue(key);
			//console.log(key, value);
			kvresult[key] = value;
		}
	}
	return kvresult;
};

ns.getAllIds = function (graph) {
	var result = [];
	var all = graph.getSubjects();
	//console.log(graph.getTriples());
	//console.log(all);
	for(var i=0; i<all.length; i++) {
		if(! N3.Util.isBlank(all[i])) {
			var subject = all[i]; // potential IDs
			// now check if they aren't used as object of other triples
			var idAsObject = graph.countTriples(null, null, subject);
			if (idAsObject == 0) { // nothing is over this id, true id
				result.push(subject);
			}
		}
	}
	return result;
};

/**
 * will add triples to represent key/value properties attached to the id
 * kvObject can have one or multiple properties
 */
ns.addCustomProperty = function (graph, id, kvObject) {
	var sio223Element = ns.getRelationship(graph, id, str_sio223)[0]; // doesn't matter if more than one
	//console.log("add kv to", hasPropElement);
	for(var key in kvObject) {
		// using elemnt count as index may be dangerous if previous manipulation of
		// the elements has happened. Like removing one. 
		var propIndex = ns.countBagElements(graph, sio223Element) + 1;
		//console.log("elements in bag:", propIndex);
		var newBlank = graph.createBlankNode();
		//console.log("expand list element", ns.expandPrefix("rdf:_"+propIndex));
		graph.addTriple(sio223Element, ns.expandPrefix("rdf:_"+propIndex), newBlank);
		graph.addTriple(newBlank, str_sio116exp, N3.Util.createLiteral(key));
		graph.addTriple(newBlank, str_rdfvalueexp, N3.Util.createLiteral(kvObject[key]));
		//console.log("added", key, kvObject[key]);
	}
};

ns.hasRelationship = function (graph, id, relationship) {
	var countProp = graph.countTriples(id, relationship, null);
	return countProp > 0;
};

ns.countBagElements = function(graph, subject) {
	return graph.countTriples(subject, null, null) - 1;
};

ns.getResourcesOfId = function(graph, id) {
	var result = {};
	graph.forEach(function(init_triple){ // iterate over all id relationships
		// we want everything that is not a simpel key/value property
		if(init_triple.predicate != str_sio223exp) {
			var relation = init_triple.predicate;
			// initialize relation array if never encountered before
			if(!result.hasOwnProperty(relation)) {
				result[relation] = [];
			}

			// if multiple resources specified, or a single element with several attributes,
			// blank node is involved, possibly with a bag attribute
			if(N3.Util.isBlank(init_triple.object)) {
				var resourceContainer = init_triple.object;
				graph.forEach(function(triple){ // iterate over the elements of the relationship
					// relationship may be a bag, and thus contains undesirable rdf:type bag line
					if(triple.object != str_rdfbagexp) {
						var resource = triple.object;
						result[relation].push(resource);
					}
				}, resourceContainer, null, null);
			}
			else { 
				// simple case, no bag, only 1 resource is linked with 1 attribute
				var resource = init_triple.object;
				result[relation].push(resource);
			}
		}
	}, id, null, null);
	return result;
};

/**
 * returns the id of a newly created blank node representing the HasProperty predicate
 * if one already exists, returns its id
 * returns array, potentially several SIO223 present
 */
ns.getRelationship = function (graph, id, relationship) {
	if (ns.hasRelationship(graph, id, relationship)) {
		var object = graph.getObjects(id, relationship, null)[0]; // careful here
		if (!N3.Util.isBlank(object)){
			// object of relationship isn't a bag. Need to turn it into a bag.
			var newBag = ns.createBag(graph, id, relationship);
			graph.addTriple(id, relationship, newBag);
			graph.addTriple(newBag, ns.expandPrefix("rdf:_1"), object);
			return [newBag];
		}
		else {
			return graph.getObjects(id, relationship, null);
		}
	}
	else {
		return [ns.createBag(graph, id, relationship)];
	}
};

ns.createBag = function (graph, id, relationship) {
	var newBlank = graph.createBlankNode();
	graph.addTriple(id, ns.expandPrefix(relationship), newBlank);
	graph.addTriple(newBlank, str_rdftypeexp, str_rdfbagexp);
	return newBlank;
};

/**
 * kvobject contains biology qualifier as key and miriam resource as value
 */
ns.addResource = function (graph, id, kvObject) {
	for(var relation in kvObject) {
		//console.log("relation", relation);
		var relationElement = ns.getRelationship(graph, id, relation)[0]; // doesn't matter if more than one
		//console.log("after get relation",relationElement, graph.getTriples(id, relation));
		//console.log("after get realtion", graph.getTriples());
		// using elemnt count as index may be dangerous if previous manipulation of
		// the elements has happened. Like removing one. 
		var propIndex = ns.countBagElements(graph, relationElement) + 1;
		//console.log("elements in bag:", propIndex);
		//console.log("new blank node", graph.getTriples());
		//console.log("Will add", relationElement, ns.expandPrefix("rdf:_"+propIndex), kvObject[relation]);
		graph.addTriple(relationElement, ns.expandPrefix("rdf:_"+propIndex), kvObject[relation]);
		//console.log("end result", graph.getTriples());
		//console.log("added", relation, kvObject[relation]);
	}
};

module.exports = ns;
},{"n3":70}],126:[function(_dereq_,module,exports){
/**
 * @module libsbgn-annotations
 * @namespace libsbgn.annot
*/

var checkParams = _dereq_('./utilities').checkParams;
var $rdf = _dereq_('rdflib');
var xmldom = _dereq_('xmldom');
var N3 = _dereq_('n3');
var Util = _dereq_('./annotation-utils');

var ns = {};

/*
	EXAMPLE:

	<rdf:RDF 
		xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	    xmlns:bqmodel="http://biomodels.net/model-qualifiers/"
	    xmlns:bqbiol="http://biomodels.net/biology-qualifiers/"
	    xmlns:eisbm="http://www.eisbm.org/rdf-annotation-newt/">
		<rdf:Description rdf:about="#_000001">
			<bqmodel:is>
				<rdf:Bag>
					<rdf:li rdf:resource="http://identifiers.org/biomodels.db/BIOMD0000000004" />
				</rdf:Bag>
			</bqmodel:is>

			<bqmodel:isDescribedBy>
				<rdf:Bag>
					<rdf:li rdf:resource="http://identifiers.org/pubmed/1833774" />
				</rdf:Bag>
			</bqmodel:isDescribedBy>

			<eisbm:hasProperty>
				<rdf:Bag>
					<eisbm:item eisbm:key="data" eisbm:value="42" />
					<eisbm:item eisbm:key="data2" eisbm:value="1.23" />
				</rdf:Bag>
			</eisbm:hasProperty>

		</rdf:Description>
	</rdf:RDF> 


*/

//ns.xmlns = "http://www.sbml.org/sbml/level3/version1/render/version1";

// ------- ANNOTATION -------
/**
 * Represents the <code>&lt;annotation&gt;</code> element.
 * @class
 */
var Annotation = function (params) {
	var params = checkParams(params, ['rdfElement']);
	this.rdfElement = params.rdfElement;
};

/**
 * @param {RdfElement} rdfElement
 */
Annotation.prototype.setRdfElement = function(rdfElement) {
	this.rdfElement = rdfElement;
};

/**
 * @return {Element}
 */
Annotation.prototype.buildXmlObj = function () {
	var annotation = new xmldom.DOMImplementation().createDocument().createElement('annotation');
	if (this.rdfElement != null) {
		var rdf = this.rdfElement;
		// need to parse the string returned by serializing the rdf into a dom element
		var xmlDoc = new xmldom.DOMParser().parseFromString(rdf.toXML(), "text/xml");
		var rdfDOMElement = xmlDoc.getElementsByTagName('rdf:RDF')[0];
		annotation.appendChild(rdfDOMElement);
	}
	return annotation;
};

/**
 * @return {string}
 */
Annotation.prototype.toXML = function() {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {Annotation}
 */
Annotation.fromXML = function (xml) {
	if (xml.tagName != 'annotation') {
		throw new Error("Bad XML provided, expected tagName annotation, got: " + xml.tagName);
	}
	var annotation = new ns.Annotation();

	/** xml.getElementsByTagName('rdf:RDF') doesn't work for Chrome */
	var rdfXML = xml.getElementsByTagName('rdf:RDF')[0] || xml.getElementsByTagName('RDF')[0];
	if (rdfXML != null) {
		var rdf = ns.RdfElement.fromXML(rdfXML);
		annotation.setRdfElement(rdf);
	}

	return annotation;
};
ns.Annotation = Annotation;
// ------- END ANNOTATION -------

// ------- GLOBALSTORE -------
var GlobalRdfStore = function () {
	this.store = N3.Store();
};

GlobalRdfStore.prototype.load = function (annotations) {
	for(var i=0; i<annotations.length; i++) {
		var annot = annotations[i];
		if(annot.rdfElement != null) {
			var rdfElement = annot.rdfElements;
			this.store.addTriples(rdfElement.store.getTriples());
		}
	}
	this.store.addPrefixes(Util.prefixes);
};

GlobalRdfStore.prototype.getCustomPropertiesOfId = function (id) {
	return Util.getCustomPropertiesOfId(this.store, id);
};

GlobalRdfStore.prototype.getAllIds = function () {
	return Util.getAllIds(this.store);
};

GlobalRdfStore.prototype.addCustomProperty = function (id, kvObject) {
	return Util.addCustomProperty(this.store, id, kvObject);
};

GlobalRdfStore.prototype.getResourcesOfId = function(id) {
	return Util.getResourcesOfId(this.store, id);
};

GlobalRdfStore.prototype.addResource = function (id, kvObject) {
	return Util.addResource(this.store, id, kvObject);
};

GlobalRdfStore.prototype.test = function () {
	console.log("globalstore test");
	var id2 = "http://local/anID000002";
	var id1 = "http://local/anID000001";
	console.log("all properties of id2", this.getCustomPropertiesOfId(id2));
	console.log("all ids", this.getAllIds());
	console.log("hasSIO", Util.hasRelationship(this.store, id2, "sio:SIO_000223"));
	console.log("add hasprop", Util.getRelationship(this.store, id1, "sio:SIO_000223"));
	console.log("add hasprop2", Util.getRelationship(this.store, id2, "sio:SIO_000223"));
	console.log("hasSIO2", Util.hasRelationship(this.store, id2, "sio:SIO_000223"));
	console.log("add kvprop", Util.addCustomProperty(this.store, id2, {test: "testvalue"}));
	console.log("all properties of id2", this.getCustomPropertiesOfId(id2));
	console.log("-------");
	console.log("all properties of id", this.getCustomPropertiesOfId(id1));
	console.log("add kvprop", Util.addCustomProperty(this.store, id1, {test: "testvalue"}));
	console.log("all properties of id", this.getCustomPropertiesOfId(id1));
	console.log("**********");
	console.log("get all resources", Util.getResourcesOfId(this.store, id1));
	console.log("get all resources for id2", Util.getResourcesOfId(this.store, id2));
	console.log("**********");
	console.log("add resource for id2", Util.addResource(this.store, id2, {"bqbiol:is": "http://aURL"}));
	console.log("get all resources for id2", Util.getResourcesOfId(this.store, id2));
	console.log("add resource for id2", Util.addResource(this.store, id2, {"bqmodel:is": "http://aURLZZZ"}));
	console.log("get all resources for id2", Util.getResourcesOfId(this.store, id2));
	/*var self = this;
	this.getAllIds().forEach(function(e){
		console.log(e, self.getCustomPropertiesOfId(e));
	});*/
};

ns.GlobalRdfStore = GlobalRdfStore;
// ------- END GLOBALSTORE -------

// ------- RDFELEMENT -------
/**
 * Represents the <code>&lt;rd:RDFf&gt;</code> element.
 * @class
 */
var RdfElement = function (params) {
	var params = checkParams(params, ['store']);
	if (params.store) {
		this.store = params.store;
	}
	else {
		var store = N3.Store();
		store.addPrefixes(Util.prefixes);
		this.store = store;
	}
};

RdfElement.uri = 'http://www.eisbm.org/';

/**
 * @return {string}
 */
RdfElement.prototype.toXML = function() {
	/*
		Add some functions to the writer object of N3
		Those functions will allow us to serialize triples synchronously.
		Without it, we would be forced to use the asynchronous functions.
	*/
	function addSimpleWrite (writer) {
		// replicates the writer._write function but returns a string
		writer.simpleWriteTriple = function (subject, predicate, object, graph) {
			return this._encodeIriOrBlankNode(subject) + ' ' +
                  this._encodeIriOrBlankNode(predicate) + ' ' +
                  this._encodeObject(object) +
			(graph ? ' ' + this._encodeIriOrBlankNode(graph) + '.\n' : '.\n')
		};
		// allows to provide an array of triples and concatenate their serialized strings
		writer.simpleWriteTriples = function (array) {
			var stringN3 = '';
			for (var i=0; i<array.length; i++) {
				var triple = array[i];
				stringN3 += this.simpleWriteTriple(triple.subject, triple.predicate, triple.object, triple.graph);
			}
			return stringN3;
		};
	}

	// serialize the stored graph to N3
	var writer = N3.Writer({ prefixes: Util.prefixes, format: 'N-Triples' });
	addSimpleWrite(writer); // add our custom methods to the writer
	var stringN3 = writer.simpleWriteTriples(this.store.getTriples()); // use custom method to serialize triples

	// read N3 format
	var graph = $rdf.graph();
	try {
	    $rdf.parse(stringN3, graph, RdfElement.uri, 'text/n3');
	} catch (err) {
	    console.log(err);
	}
	/*
		The namespace prefixes are lost in the n3 format, so rdflib will guess them on its own.
		The result gives weird wrong prefixes. Here we provide the original names. Aesthetic purpose only.
	*/
	graph.namespaces = Util.prefixes;

	/*
		serialize to RDF+XML 
		problem, the output differs from the original XML. rdflib expands collections like Bag, and 
		elements with only atributes. It also makes things less readable.
		We need to replace several things to keep output the same as input. 
	*/
	var serialize = $rdf.serialize($rdf.sym(RdfElement.uri), graph, undefined, 'application/rdf+xml');

	function replaceLi(string) {
		var regexpLi = /<rdf:li( rdf:parseType="Resource")?>[\s\S]*?<(\w+):SIO_000116>([\s\S]*?)<\/\2:SIO_000116>[\s\S]*?<rdf:value>([\s\S]*?)<\/rdf:value>[\s\S]*?<\/rdf:li>/g;
		var result = string.replace(regexpLi, '<rdf:li $2:SIO_000116="$3" rdf:value="$4"/>');
		return result;
	}

	function replaceBag(string) {
		// regexp will spot a transformed bag and capture its content
		var regexpBag = /(<rdf:Description>([\s\S]*?)<rdf:type rdf:resource="http:\/\/www\.w3\.org\/1999\/02\/22-rdf-syntax-ns#Bag"\/>[\s\S]*?<\/rdf:Description>)/g;
		var result1 = string.replace(regexpBag, '<rdf:Bag>$2</rdf:Bag>');
		var result2 = result1.replace(/    <\/rdf:Bag>/g, '</rdf:Bag>');
		return result2;
	}

	function replaceParseType(string) {
		var regexp = / rdf:parseType="Resource"/g;
		return string.replace(regexp, '');
	}

	function replaceSlashInID(string) {
		return string.replace(new RegExp(/rdf:about="\//g), 'rdf:about="');
	}
	
	var result = replaceSlashInID(replaceParseType(replaceLi(replaceBag(serialize))));
	
	return result;
};

/**
 * @param {Element} xml
 * @return {RdfElement}
 */
RdfElement.fromXML = function (xml) {
	if (xml.tagName != 'rdf:RDF') {
		throw new Error("Bad XML provided, expected tagName rdf:RDF, got: " + xml.tagName);
	}
	var rdfElement = new RdfElement();
	var graph = $rdf.graph();

	// rdflib only accepts string as input, not xml elements
	var stringXml = new xmldom.XMLSerializer().serializeToString(xml);
	try {
	    $rdf.parse(stringXml, graph, RdfElement.uri, 'application/rdf+xml');
	} catch (err) {
	    console.log(err);
	}
	
	// convert to turtle to feed to N3
	var turtle = $rdf.serialize($rdf.sym(RdfElement.uri), graph, undefined, 'text/turtle');

	var parser = N3.Parser();
	var store = N3.Store();
	store.addPrefixes(Util.prefixes);
	store.addTriples(parser.parse(turtle));
	
	rdfElement.store = store;

	return rdfElement;
};

RdfElement.prototype.getCustomPropertiesOfId = function (id) {
	return Util.getCustomPropertiesOfId(this.store, id);
};

RdfElement.prototype.getAllIds = function () {
	return Util.getAllIds(this.store);
};

RdfElement.prototype.addCustomProperty = function (id, kvObject) {
	return Util.addCustomProperty(this.store, id, kvObject);
};

RdfElement.prototype.getResourcesOfId = function(id) {
	return Util.getResourcesOfId(this.store, id);
};

RdfElement.prototype.addResource = function (id, kvObject) {
	return Util.addResource(this.store, id, kvObject);
};

RdfElement.prototype.test = function() {
	//console.log(this.store);
	//console.log(this.store.getTriples("http://local/anID000001", null, null));
	console.log("expand prefix shortcut", Util.expandPrefix("sio:SIO_000116"));
	console.log("all properties of id", this.getCustomPropertiesOfId("http://local/anID000001"));
	console.log("all ids", this.getAllIds());
};

ns.RdfElement = RdfElement;
// ------- END RDFELEMENT -------


ns.rdflib = $rdf;
ns.Util = Util;

module.exports = ns;

},{"./annotation-utils":125,"./utilities":129,"n3":70,"rdflib":87,"xmldom":120}],127:[function(_dereq_,module,exports){
/**
 * This submodule contains the classes to manage the render extension's xml and some utility functions.
 * It adds the ability to save the styles and colors used in an SBGN map, as features like background-color,
 * border thickness or font properties are not part of the SBGN standard.
 *
 * It is loosely based on the {@link http://sbml.org/Documents/Specifications/SBML_Level_3/Packages/render|render extension of the SBML format}.
 * A subset of this specification has been adapted for SBGN-ML integration.
 *
 * See {@link Extension} for more general information on extensions in the SBGN-ML format.
 *
 * You can access the following classes like this: <code>libsbgn.render.ColorDefinition<code>
 *
 * @module libsbgn-render
 * @namespace libsbgn.render
*/

var checkParams = _dereq_('./utilities').checkParams;
var xmldom = _dereq_('xmldom');

var ns = {};

ns.xmlns = "http://www.sbml.org/sbml/level3/version1/render/version1";

// ------- COLORDEFINITION -------
/**
 * Represents the <code>&lt;colorDefinition&gt;</code> element.
 * @class
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.value
 */
var ColorDefinition = function(params) {
	var params = checkParams(params, ['id', 'value']);
	this.id 	= params.id;
	this.value 	= params.value;
};

/**
 * @return {Element}
 */
ColorDefinition.prototype.buildXmlObj = function () {
	var colorDefinition = new xmldom.DOMImplementation().createDocument().createElement('colorDefinition');
	if (this.id != null) {
		colorDefinition.setAttribute('id', this.id);
	}
	if (this.value != null) {
		colorDefinition.setAttribute('value', this.value);
	}
	return colorDefinition;
};

/**
 * @return {string}
 */
ColorDefinition.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {ColorDefinition}
 */
ColorDefinition.fromXML = function (xml) {
	if (xml.tagName != 'colorDefinition') {
		throw new Error("Bad XML provided, expected tagName colorDefinition, got: " + xml.tagName);
	}
	var colorDefinition = new ns.ColorDefinition();
	colorDefinition.id 		= xml.getAttribute('id') || null;
	colorDefinition.value 	= xml.getAttribute('value') || null;
	return colorDefinition;
};
ns.ColorDefinition = ColorDefinition;
// ------- END COLORDEFINITION -------

// ------- LISTOFCOLORDEFINITIONS -------
/**
 * Represents the <code>&lt;listOfColorDefinitions&gt;</code> element.
 * @class
 */
var ListOfColorDefinitions = function () {
	this.colorDefinitions = [];
};

/**
 * @param {ColorDefinition} colorDefinition
 */
ListOfColorDefinitions.prototype.addColorDefinition = function (colorDefinition) {
	this.colorDefinitions.push(colorDefinition);
};

/**
 * @return {Element}
 */
ListOfColorDefinitions.prototype.buildXmlObj = function () {
	var listOfColorDefinitions = new xmldom.DOMImplementation().createDocument().createElement('listOfColorDefinitions');
	for(var i=0; i<this.colorDefinitions.length; i++) {
		listOfColorDefinitions.appendChild(this.colorDefinitions[i].buildXmlObj());
	}
	return listOfColorDefinitions;
};

/**
 * @return {string}
 */
ListOfColorDefinitions.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {ListOfColorDefinitions}
 */
ListOfColorDefinitions.fromXML = function (xml) {
	if (xml.tagName != 'listOfColorDefinitions') {
		throw new Error("Bad XML provided, expected tagName listOfColorDefinitions, got: " + xml.tagName);
	}
	var listOfColorDefinitions = new ns.ListOfColorDefinitions();

	var colorDefinitions = xml.getElementsByTagName('colorDefinition');
	for (var i=0; i<colorDefinitions.length; i++) {
		var colorDefinitionXML = colorDefinitions[i];
		var colorDefinition = ns.ColorDefinition.fromXML(colorDefinitionXML);
		listOfColorDefinitions.addColorDefinition(colorDefinition);
	}
	return listOfColorDefinitions;
};
ns.ListOfColorDefinitions = ListOfColorDefinitions;
// ------- END LISTOFCOLORDEFINITIONS -------

// ------- RENDERGROUP -------
/**
 * Represents the <code>&lt;g&gt;</code> element.
 * @class
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.fontSize
 * @param {string=} params.fontFamily
 * @param {string=} params.fontWeight
 * @param {string=} params.fontStyle
 * @param {string=} params.textAnchor
 * @param {string=} params.vtextAnchor
 * @param {string=} params.fill The element's background color
 * @param {string=} params.stroke Border color for glyphs, line color for arcs.
 * @param {string=} params.strokeWidth
 */
var RenderGroup = function (params) {
	// each of those are optional, so test if it is defined is mandatory
	var params = checkParams(params, ['fontSize', 'fontFamily', 'fontWeight', 
		'fontStyle', 'textAnchor', 'vtextAnchor', 'fill', 'id', 'stroke', 'strokeWidth']);
	// specific to renderGroup
	this.fontSize 		= params.fontSize;
	this.fontFamily 	= params.fontFamily;
	this.fontWeight 	= params.fontWeight;
	this.fontStyle 		= params.fontStyle;
	this.textAnchor 	= params.textAnchor; // probably useless
	this.vtextAnchor 	= params.vtextAnchor; // probably useless
	// from GraphicalPrimitive2D
	this.fill 			= params.fill; // fill color
	// from GraphicalPrimitive1D
	this.id 			= params.id;
	this.stroke 		= params.stroke; // stroke color
	this.strokeWidth 	= params.strokeWidth;
};

/**
 * @return {Element}
 */
RenderGroup.prototype.buildXmlObj = function () {
	var renderGroup = new xmldom.DOMImplementation().createDocument().createElement('g');
	if (this.id != null) {
		renderGroup.setAttribute('id', this.id);
	}
	if (this.fontSize != null) {
		renderGroup.setAttribute('fontSize', this.fontSize);
	}
	if (this.fontFamily != null) {
		renderGroup.setAttribute('fontFamily', this.fontFamily);
	}
	if (this.fontWeight != null) {
		renderGroup.setAttribute('fontWeight', this.fontWeight);
	}
	if (this.fontStyle != null) {
		renderGroup.setAttribute('fontStyle', this.fontStyle);
	}
	if (this.textAnchor != null) {
		renderGroup.setAttribute('textAnchor', this.textAnchor);
	}
	if (this.vtextAnchor != null) {
		renderGroup.setAttribute('vtextAnchor', this.vtextAnchor);
	}
	if (this.stroke != null) {
		renderGroup.setAttribute('stroke', this.stroke);
	}
	if (this.strokeWidth != null) {
		renderGroup.setAttribute('strokeWidth', this.strokeWidth);
	}
	if (this.fill != null) {
		renderGroup.setAttribute('fill', this.fill);
	}
	return renderGroup;
};

/**
 * @return {string}
 */
RenderGroup.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {RenderGroup}
 */
RenderGroup.fromXML = function (xml) {
	if (xml.tagName != 'g') {
		throw new Error("Bad XML provided, expected tagName g, got: " + xml.tagName);
	}
	var renderGroup = new ns.RenderGroup({});
	renderGroup.id 			= xml.getAttribute('id') || null;
	renderGroup.fontSize 	= xml.getAttribute('fontSize') || null;
	renderGroup.fontFamily 	= xml.getAttribute('fontFamily') || null;
	renderGroup.fontWeight 	= xml.getAttribute('fontWeight') || null;
	renderGroup.fontStyle 	= xml.getAttribute('fontStyle') || null;
	renderGroup.textAnchor 	= xml.getAttribute('textAnchor') || null;
	renderGroup.vtextAnchor = xml.getAttribute('vtextAnchor') || null;
	renderGroup.stroke 		= xml.getAttribute('stroke') || null;
	renderGroup.strokeWidth = xml.getAttribute('strokeWidth') || null;
	renderGroup.fill 		= xml.getAttribute('fill') || null;
	return renderGroup;
};
ns.RenderGroup = RenderGroup;
// ------- END RENDERGROUP -------

// ------- STYLE -------
/**
 * Represents the <code>&lt;style&gt;</code> element.
 * @class
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.name
 * @param {string=} params.idList
 * @param {RenderGroup=} params.renderGroup
 */
var Style = function(params) {
	var params = checkParams(params, ['id', 'name', 'idList', 'renderGroup']);
	this.id 			= params.id;
	this.name 			= params.name;
	this.idList 		= params.idList; // TODO add utility functions to manage this (should be array)
	this.renderGroup 	= params.renderGroup;
};

/**
 * @param {RenderGroup} renderGroup
 */
Style.prototype.setRenderGroup = function (renderGroup) {
	this.renderGroup = renderGroup;
};

/**
 * @return {string[]}
 */
Style.prototype.getIdListAsArray = function () {
	return this.idList.split(' ');
}

/**
 * @param {string[]} idArray
 */
Style.prototype.setIdListFromArray = function (idArray) {
	this.idList = idArray.join(' ');
}

/**
 * @return {Element}
 */
Style.prototype.buildXmlObj = function () {
	var style = new xmldom.DOMImplementation().createDocument().createElement('style');
	if (this.id != null) {
		style.setAttribute('id', this.id);
	}
	if (this.name != null) {
		style.setAttribute('name', this.name);
	}
	if (this.idList != null) {
		style.setAttribute('idList', this.idList);
	}

	if (this.renderGroup) {
		style.appendChild(this.renderGroup.buildXmlObj());
	}
	return style;
};

/**
 * @return {string}
 */
Style.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {Style}
 */
Style.fromXML = function (xml) {
	if (xml.tagName != 'style') {
		throw new Error("Bad XML provided, expected tagName style, got: " + xml.tagName);
	}
	var style = new ns.Style();
	style.id 		= xml.getAttribute('id') || null;
	style.name 		= xml.getAttribute('name') || null;
	style.idList 	= xml.getAttribute('idList') || null;

	var renderGroupXML = xml.getElementsByTagName('g')[0];
	if (renderGroupXML != null) {
		style.renderGroup = ns.RenderGroup.fromXML(renderGroupXML);
	}
	return style;
};
ns.Style = Style;
// ------- END STYLE -------

// ------- LISTOFSTYLES -------
/**
 * Represents the <code>&lt;listOfStyles&gt;</code> element.
 * @class
 */
var ListOfStyles = function() {
	this.styles = [];
};

/**
 * @param {Style} style
 */
ListOfStyles.prototype.addStyle = function(style) {
	this.styles.push(style);
};

/**
 * @return {Element}
 */
ListOfStyles.prototype.buildXmlObj = function () {
	var listOfStyles = new xmldom.DOMImplementation().createDocument().createElement('listOfStyles');
	for(var i=0; i<this.styles.length; i++) {
		listOfStyles.appendChild(this.styles[i].buildXmlObj());
	}
	return listOfStyles;
};

/**
 * @return {string}
 */
ListOfStyles.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {ListOfStyles}
 */
ListOfStyles.fromXML = function (xml) {
	if (xml.tagName != 'listOfStyles') {
		throw new Error("Bad XML provided, expected tagName listOfStyles, got: " + xml.tagName);
	}
	var listOfStyles = new ns.ListOfStyles();

	var styles = xml.getElementsByTagName('style');
	for (var i=0; i<styles.length; i++) {
		var styleXML = styles[i];
		var style = ns.Style.fromXML(styleXML);
		listOfStyles.addStyle(style);
	}
	return listOfStyles;
};
ns.ListOfStyles = ListOfStyles;
// ------- END LISTOFSTYLES -------

// ------- RENDERINFORMATION -------
/**
 * Represents the <code>&lt;renderInformation&gt;</code> element.
 * @class
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.name
 * @param {string=} params.programName
 * @param {string=} params.programVersion
 * @param {string=} params.backgroundColor
 * @param {ListOfColorDefinitions=} params.listOfColorDefinitions
 * @param {ListOfStyles=} params.listOfStyles
 */
var RenderInformation = function (params) {
	var params = checkParams(params, ['id', 'name', 'programName', 
		'programVersion', 'backgroundColor', 'listOfColorDefinitions', 'listOfStyles']);
	this.id 					= params.id; // required, rest is optional
	this.name 					= params.name;
	this.programName 			= params.programName;
	this.programVersion 		= params.programVersion;
	this.backgroundColor 		= params.backgroundColor;
	this.listOfColorDefinitions = params.listOfColorDefinitions;
	this.listOfStyles 			= params.listOfStyles;
	/*this.listOfColorDefinitions = new renderExtension.ListOfColorDefinitions(renderInfo.colorDef.colorList);
	this.listOfStyles = new renderExtension.ListOfStyles(renderInfo.styleDef);
	*/
};

/**
 * @param {ListOfColorDefinitions} listOfColorDefinitions
 */
RenderInformation.prototype.setListOfColorDefinitions = function(listOfColorDefinitions) {
	this.listOfColorDefinitions = listOfColorDefinitions;
};

/**
 * @param {ListOfStyles} listOfStyles
 */
RenderInformation.prototype.setListOfStyles = function(listOfStyles) {
	this.listOfStyles = listOfStyles;
};

/**
 * @return {Element}
 */
RenderInformation.prototype.buildXmlObj = function () {
	var renderInformation = new xmldom.DOMImplementation().createDocument().createElement('renderInformation');
	renderInformation.setAttribute('xmlns', ns.xmlns);
	if (this.id != null) {
		renderInformation.setAttribute('id', this.id);
	}
	if (this.name != null) {
		renderInformation.setAttribute('name', this.name);
	}
	if (this.programName != null) {
		renderInformation.setAttribute('programName', this.programName);
	}
	if (this.programVersion != null) {
		renderInformation.setAttribute('programVersion', this.programVersion);
	}
	if (this.backgroundColor != null) {
		renderInformation.setAttribute('backgroundColor', this.backgroundColor);
	}

	if (this.listOfColorDefinitions) {
		renderInformation.appendChild(this.listOfColorDefinitions.buildXmlObj());
	}
	if (this.listOfStyles) {
		renderInformation.appendChild(this.listOfStyles.buildXmlObj());
	}
	return renderInformation;
};

/**
 * @return {string}
 */
RenderInformation.prototype.toXML = function() {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xml
 * @return {RenderInformation}
 */
RenderInformation.fromXML = function (xml) {
	if (xml.tagName != 'renderInformation') {
		throw new Error("Bad XML provided, expected tagName renderInformation, got: " + xml.tagName);
	}
	var renderInformation = new ns.RenderInformation();
	renderInformation.id 				= xml.getAttribute('id') || null;
	renderInformation.name 				= xml.getAttribute('name') || null;
	renderInformation.programName 		= xml.getAttribute('programName') || null;
	renderInformation.programVersion 	= xml.getAttribute('programVersion') || null;
	renderInformation.backgroundColor 	= xml.getAttribute('backgroundColor') || null;

	var listOfColorDefinitionsXML = xml.getElementsByTagName('listOfColorDefinitions')[0];
	var listOfStylesXML = xml.getElementsByTagName('listOfStyles')[0];
	if (listOfColorDefinitionsXML != null) {
		renderInformation.listOfColorDefinitions = ns.ListOfColorDefinitions.fromXML(listOfColorDefinitionsXML);
	}
	if (listOfStylesXML != null) {
		renderInformation.listOfStyles = ns.ListOfStyles.fromXML(listOfStylesXML);
	}

	return renderInformation;
};
ns.RenderInformation = RenderInformation;
// ------- END RENDERINFORMATION -------

module.exports = ns;
},{"./utilities":129,"xmldom":120}],128:[function(_dereq_,module,exports){
/**
 * The API contains two other submodules: {@link libsbgn.render} and {@link libsbgn.annot}
 * @module libsbgn
 * @namespace libsbgn
*/

var renderExt = _dereq_('./libsbgn-render');
var annotExt = _dereq_('./libsbgn-annotations');
var checkParams = _dereq_('./utilities').checkParams;
var getFirstLevelByName = _dereq_('./utilities').getFirstLevelByName;
var xmldom = _dereq_('xmldom');

var ns = {};

ns.xmlns = "http://sbgn.org/libsbgn/0.3";

// ------- SBGNBase -------
/**
 * Parent class for several sbgn elements. Used to provide extension element.
 * End users don't need to interact with it. It can be safely ignored.
 * @class
 * @param {Object} params
 * @param {Extension=} params.extension
 */
var SBGNBase = function (params) {
	var params = checkParams(params, ['extension']);
	this.extension 	= params.extension;
};

/**
 * Allows inheriting objects to get an extension element.
 * @param {Extension} extension
 */
SBGNBase.prototype.setExtension = function (extension) {
	this.extension = extension;
};

/**
 * @param {Element} xmlObj the xml object being built from 'this'
 */
SBGNBase.prototype.baseToXmlObj = function (xmlObj) {
	if(this.extension != null) {
		xmlObj.appendChild(this.extension.buildXmlObj());
	}
};

/**
 * parse things specific to SBGNBase type
 * @param {Element} xmlObj the xml object being parsed
 */
SBGNBase.prototype.baseFromXML = function (xmlObj) {
	// children
	var extensionXML = getFirstLevelByName(xmlObj, 'extension')[0];
	if (extensionXML != null) {
		var extension = ns.Extension.fromXML(extensionXML);
		this.setExtension(extension);
	}
};
ns.SBGNBase = SBGNBase;
// ------- END SBGNBase -------

// ------- SBGN -------
/**
 * Represents the <code>&lt;sbgn&gt;</code> element.
 * @class
 * @extends SBGNBase
 * @param {Object} params
 * @param {string=} params.xmlns
 * @param {Map=} params.map
 */
var Sbgn = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['xmlns', 'map']);
	this.xmlns 	= params.xmlns;
	this.map 	= params.map;

	this.allowedChildren = ['map'];
	this.tagName = 'sbgn';
};

Sbgn.prototype = Object.create(ns.SBGNBase.prototype);
Sbgn.prototype.constructor = Sbgn;

/**
 * @param {Map} map
 */
Sbgn.prototype.setMap = function (map) {
	this.map = map;
};

/**
 * @return {Element}
 */
Sbgn.prototype.buildXmlObj = function () {
	var sbgn = new xmldom.DOMImplementation().createDocument().createElement('sbgn');
	// attributes
	if(this.xmlns != null) {
		sbgn.setAttribute('xmlns', this.xmlns);
	}
	if(this.language != null) {
		sbgn.setAttribute('language', this.language);
	}
	// children
	this.baseToXmlObj(sbgn);
	if (this.map != null) {
		sbgn.appendChild(this.map.buildXmlObj());
	}
	return sbgn;
};

/**
 * @return {string}
 */
Sbgn.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Sbgn}
 */
Sbgn.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'sbgn') {
		throw new Error("Bad XML provided, expected tagName sbgn, got: " + xmlObj.tagName);
	}
	var sbgn = new ns.Sbgn();
	sbgn.xmlns = xmlObj.getAttribute('xmlns') || null;

	// get children
	var mapXML = xmlObj.getElementsByTagName('map')[0];
	if (mapXML != null) {
		var map = ns.Map.fromXML(mapXML);
		sbgn.setMap(map);
	}
	sbgn.baseFromXML(xmlObj); // call to parent class
	return sbgn;
};
ns.Sbgn = Sbgn;
// ------- END SBGN -------

// ------- MAP -------
/**
 * Represents the <code>&lt;map&gt;</code> element.
 * @class
 * @extends SBGNBase
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.language
 * @param {Glyph[]=} params.glyphs
 * @param {Arc[]=} params.arcs
 */
var Map = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['id', 'language', 'glyphs', 'arcs']);
	this.id 		= params.id;
	this.language 	= params.language;
	this.glyphs 	= params.glyphs || [];
	this.arcs 		= params.arcs || [];

	this.allowedChildren = ['glyphs', 'arcs'];
	this.tagName = 'map';
};

Map.prototype = Object.create(ns.SBGNBase.prototype);
Map.prototype.constructor = Map;

/**
 * @param {Glyph} glyph
 */
Map.prototype.addGlyph = function (glyph) {
	this.glyphs.push(glyph);
};

/**
 * @param {Arc} arc
 */
Map.prototype.addArc = function (arc) {
	this.arcs.push(arc);
};

/**
 * @return {Element}
 */
Map.prototype.buildXmlObj = function () {
	var map = new xmldom.DOMImplementation().createDocument().createElement('map');
	// attributes
	if(this.id != null) {
		map.setAttribute('id', this.id);
	}
	if(this.language != null) {
		map.setAttribute('language', this.language);
	}
	// children
	this.baseToXmlObj(map);
	for(var i=0; i < this.glyphs.length; i++) {
		map.appendChild(this.glyphs[i].buildXmlObj());
	}
	for(var i=0; i < this.arcs.length; i++) {
		map.appendChild(this.arcs[i].buildXmlObj());
	}
	return map;
};

/**
 * @return {string}
 */
Map.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Map}
 */
Map.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'map') {
		throw new Error("Bad XML provided, expected tagName map, got: " + xmlObj.tagName);
	}
	var map = new Map();
	map.id = xmlObj.getAttribute('id') || null;
	map.language = xmlObj.getAttribute('language') || null;

	// need to be careful here, as there can be glyph in arcs
	//var glyphsXML = xmlObj.querySelectorAll('map > glyph');
	var glyphsXML = getFirstLevelByName(xmlObj, "glyph");
	for (var i=0; i < glyphsXML.length; i++) {
		var glyph = ns.Glyph.fromXML(glyphsXML[i]);
		map.addGlyph(glyph);
	}
	var arcsXML = xmlObj.getElementsByTagName('arc') || null;
	for (var i=0; i < arcsXML.length; i++) {
		var arc = ns.Arc.fromXML(arcsXML[i]);
		map.addArc(arc);
	}

	map.baseFromXML(xmlObj);
	return map;
};
ns.Map = Map;
// ------- END MAP -------

// ------- EXTENSIONS -------
/**
  * Represents the <code>&lt;extension&gt;</code> element.
 * @class
 */
var Extension = function () {
	// consider first order children, add them with their tagname as property of this object
	// store xmlObject if no supported parsing (unrecognized extensions)
	// else store instance of the extension
	this.list = {};
};

/**
 * @param {Element|render.RenderInformation} extension
 */
Extension.prototype.add = function (extension) {
	if (extension instanceof renderExt.RenderInformation) {
		this.list['renderInformation'] = extension;
	}
	else if (extension instanceof annotExt.Annotation) {
		this.list['annotation'] = extension;
	}
	else if (extension.nodeType == '1') { // Node.ELEMENT_NODE == 1
		// case where renderInformation is passed unparsed
		if (extension.tagName == 'renderInformation') {
			var renderInformation = renderExt.RenderInformation.fromXML(extension);
			this.list['renderInformation'] = renderInformation;
		}
		else if (extension.tagName == 'annotation') {
			var annotation = annotExt.Annotation.fromXML(extension);
			this.list['annotation'] = renderInformation;
		}
		else {
			this.list[extension.tagName] = extension;
		}
	}
};

/**
 * @param {string} extensionName
 * @return {boolean}
 */
Extension.prototype.has = function (extensionName) {
	return this.list.hasOwnProperty(extensionName);
};

/**
 * @param {string} extensionName
 * @return {Element|render.RenderInformation}
 */
Extension.prototype.get = function (extensionName) {
	if (this.has(extensionName)) {
		return this.list[extensionName];
	}
	else {
		return null;
	}
};

/**
 * @return {Element}
 */
Extension.prototype.buildXmlObj = function () {
	var extension = new xmldom.DOMImplementation().createDocument().createElement('extension');
	for (var extInstance in this.list) {
		if (extInstance == "renderInformation" || extInstance == "annotation") {
			extension.appendChild(this.get(extInstance).buildXmlObj());
		}
		else {
			// weird hack needed here
			// xmldom doesn't serialize extension correctly if the extension has more than one unsupported extension
			// we need to serialize and unserialize it when appending it here
			var serializeExt = new xmldom.XMLSerializer().serializeToString(this.get(extInstance));
			var unserializeExt = new xmldom.DOMParser().parseFromString(serializeExt); // fresh new dom element
			extension.appendChild(unserializeExt);
		}
	}
	return extension;
};

/**
 * @return {string}
 */
Extension.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Extension}
 */
Extension.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'extension') {
		throw new Error("Bad XML provided, expected tagName extension, got: " + xmlObj.tagName);
	}
	var extension = new Extension();
	var children = xmlObj.childNodes;
	for (var i=0; i < children.length; i++) {
		if(!children[i].tagName) { // if tagname is here, real element found
			continue;
		}
		var extXmlObj = children[i];
		var extName = extXmlObj.tagName;
		//extension.add(extInstance);
		if (extName == 'renderInformation') {
			var renderInformation = renderExt.RenderInformation.fromXML(extXmlObj);
			extension.add(renderInformation);
		}
		else if (extName == 'annotation') {
			var annotation = annotExt.Annotation.fromXML(extXmlObj);
			extension.add(annotation);
		}
		else { // unsupported extension, we still store the data as is
			extension.add(extXmlObj);
		}
	}
	return extension;
};
ns.Extension = Extension;
// ------- END EXTENSIONS -------

// ------- GLYPH -------
/**
 * Represents the <code>&lt;glyph&gt;</code> element.
 * @class Glyph
 * @extends SBGNBase
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.class_
 * @param {string=} params.compartmentRef
 * @param {Label=} params.label
 * @param {Bbox=} params.bbox
 * @param {StateType=} params.state
 * @param {CloneType=} params.clone
 * @param {Glyph[]=} params.glyphMembers
 * @param {Port[]=} params.ports
 */
var Glyph = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['id', 'class_', 'compartmentRef', 'label', 'bbox', 'glyphMembers', 'ports', 'state', 'clone']);
	this.id 			= params.id;
	this.class_ 		= params.class_;
	this.compartmentRef = params.compartmentRef;

	// children
	this.label 			= params.label;
	this.state 			= params.state;
	this.bbox 			= params.bbox;
	this.clone 			= params.clone;
	this.glyphMembers 	= params.glyphMembers || []; // case of complex, can have arbitrary list of nested glyphs
	this.ports 			= params.ports || [];

	this.allowedChildren = ['label', 'state', 'bbox', 'clone', 'glyphMembers', 'ports'];
	this.tagName = 'glyph';
};

Glyph.prototype = Object.create(ns.SBGNBase.prototype);
Glyph.prototype.constructor = Glyph;

/**
 * @param {Label} label
 */
Glyph.prototype.setLabel = function (label) {
	this.label = label;
};

/**
 * @param {StateType} state
 */
Glyph.prototype.setState = function (state) {
	this.state = state;
};

/**
 * @param {Bbox} bbox
 */
Glyph.prototype.setBbox = function (bbox) {
	this.bbox = bbox;
};

/**
 * @param {CloneType} clone
 */
Glyph.prototype.setClone = function (clone) {
	this.clone = clone;
};

/**
 * @param {Glyph} glyphMember
 */
Glyph.prototype.addGlyphMember = function (glyphMember) {
	this.glyphMembers.push(glyphMember);
};

/**
 * @param {Port} port
 */
Glyph.prototype.addPort = function (port) {
	this.ports.push(port);
};

/**
 * @return {Element}
 */
Glyph.prototype.buildXmlObj = function () {
	var glyph = new xmldom.DOMImplementation().createDocument().createElement('glyph');
	// attributes
	if(this.id != null) {
		glyph.setAttribute('id', this.id);
	}
	if(this.class_ != null) {
		glyph.setAttribute('class', this.class_);
	}
	if(this.compartmentRef != null) {
		glyph.setAttribute('compartmentRef', this.compartmentRef);
	}
	// children
	if(this.label != null) {
		glyph.appendChild(this.label.buildXmlObj());
	}
	if(this.state != null) {
		glyph.appendChild(this.state.buildXmlObj());
	}
	if(this.bbox != null) {
		glyph.appendChild(this.bbox.buildXmlObj());
	}
	if(this.clone != null) {
		glyph.appendChild(this.clone.buildXmlObj());
	}
	for(var i=0; i < this.glyphMembers.length; i++) {
		glyph.appendChild(this.glyphMembers[i].buildXmlObj());
	}
	for(var i=0; i < this.ports.length; i++) {
		glyph.appendChild(this.ports[i].buildXmlObj());
	}
	this.baseToXmlObj(glyph);
	return glyph;
};

/**
 * @return {string}
 */
Glyph.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Glyph}
 */
Glyph.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'glyph') {
		throw new Error("Bad XML provided, expected tagName glyph, got: " + xmlObj.tagName);
	}
	var glyph = new Glyph();
	glyph.id 				= xmlObj.getAttribute('id') || null;
	glyph.class_ 			= xmlObj.getAttribute('class') || null;
	glyph.compartmentRef 	= xmlObj.getAttribute('compartmentRef') || null;

	var labelXML = xmlObj.getElementsByTagName('label')[0];
	if (labelXML != null) {
		var label = ns.Label.fromXML(labelXML);
		glyph.setLabel(label);
	}
	var stateXML = xmlObj.getElementsByTagName('state')[0];
	if (stateXML != null) {
		var state = ns.StateType.fromXML(stateXML);
		glyph.setState(state);
	}
	var bboxXML = xmlObj.getElementsByTagName('bbox')[0];
	if (bboxXML != null) {
		var bbox = ns.Bbox.fromXML(bboxXML);
		glyph.setBbox(bbox);
	}
	var cloneXMl = xmlObj.getElementsByTagName('clone')[0];
	if (cloneXMl != null) {
		var clone = ns.CloneType.fromXML(cloneXMl);
		glyph.setClone(clone);
	}
	// need special care because of recursion of nested glyph nodes
	// take only first level glyphs
	var children = xmlObj.childNodes;
	for (var j=0; j < children.length; j++) { // loop through all first level children
		var child = children[j];
		if (child.tagName && child.tagName == "glyph") { // here we only want the glyh children
			var glyphMember = Glyph.fromXML(child); // recursive call on nested glyph
			glyph.addGlyphMember(glyphMember);
		}
	}
	var portsXML = xmlObj.getElementsByTagName('port');
	for (var i=0; i < portsXML.length; i++) {
		var port = ns.Port.fromXML(portsXML[i]);
		glyph.addPort(port);
	}
	glyph.baseFromXML(xmlObj);
	return glyph;
};
ns.Glyph = Glyph;
// ------- END GLYPH -------

// ------- LABEL -------
/**
 * Represents the <code>&lt;label&gt;</code> element.
 * @class Label
 * @extends SBGNBase
 * @param {Object} params
 * @param {string=} params.text
 */
var Label = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['text']);
	this.text = params.text;

	this.allowedChildren = [];
	this.tagName = 'label';
};

Label.prototype = Object.create(ns.SBGNBase.prototype);
Label.prototype.constructor = ns.Label;

/**
 * @return {Element}
 */
Label.prototype.buildXmlObj = function () {
	var label = new xmldom.DOMImplementation().createDocument().createElement('label');
	if(this.text != null) {
		label.setAttribute('text', this.text);
	}
	this.baseToXmlObj(label);
	return label;
};

/**
 * @return {string}
 */
Label.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Label}
 */
Label.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'label') {
		throw new Error("Bad XML provided, expected tagName label, got: " + xmlObj.tagName);
	}
	var label = new ns.Label();
	label.text = xmlObj.getAttribute('text') || null;
	label.baseFromXML(xmlObj);
	return label;
};
ns.Label = Label;
// ------- END LABEL -------

// ------- BBOX -------
/**
 * Represents the <code>&lt;bbox&gt;</code> element.
 * @class Bbox
 * @extends SBGNBase
 * @param {Object} params
 * @param {string|number=} params.x
 * @param {string|number=} params.y
 * @param {string|number=} params.w
 * @param {string|number=} params.h
 */
var Bbox = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['x', 'y', 'w', 'h']);
	this.x = parseFloat(params.x);
	this.y = parseFloat(params.y);
	this.w = parseFloat(params.w);
	this.h = parseFloat(params.h);

	this.allowedChildren = [];
	this.tagName = 'bbox';
};

Bbox.prototype = Object.create(ns.SBGNBase.prototype);
Bbox.prototype.constructor = ns.Bbox;

/**
 * @return {Element}
 */
Bbox.prototype.buildXmlObj = function () {
	var bbox = new xmldom.DOMImplementation().createDocument().createElement('bbox');
	if(!isNaN(this.x)) {
		bbox.setAttribute('x', this.x);
	}
	if(!isNaN(this.y)) {
		bbox.setAttribute('y', this.y);
	}
	if(!isNaN(this.w)) {
		bbox.setAttribute('w', this.w);
	}
	if(!isNaN(this.h)) {
		bbox.setAttribute('h', this.h);
	}
	this.baseToXmlObj(bbox);
	return bbox;
}

/**
 * @return {string}
 */
Bbox.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Bbox}
 */
Bbox.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'bbox') {
		throw new Error("Bad XML provided, expected tagName bbox, got: " + xmlObj.tagName);
	}
	var bbox = new ns.Bbox();
	bbox.x = parseFloat(xmlObj.getAttribute('x'));
	bbox.y = parseFloat(xmlObj.getAttribute('y'));
	bbox.w = parseFloat(xmlObj.getAttribute('w'));
	bbox.h = parseFloat(xmlObj.getAttribute('h'));
	bbox.baseFromXML(xmlObj);
	return bbox;
};
ns.Bbox = Bbox;
// ------- END BBOX -------

// ------- STATE -------
/**
 * Represents the <code>&lt;state&gt;</code> element.
 * @class StateType
 * @param {Object} params
 * @param {string=} params.value
 * @param {string=} params.variable
 */
var StateType = function (params) {
	var params = checkParams(params, ['value', 'variable']);
	this.value = params.value;
	this.variable = params.variable;
};

/**
 * @return {Element}
 */
StateType.prototype.buildXmlObj = function () {
	var state = new xmldom.DOMImplementation().createDocument().createElement('state');
	if(this.value != null) {
		state.setAttribute('value', this.value);
	}
	if(this.variable != null) {
		state.setAttribute('variable', this.variable);
	}
	return state;
};

/**
 * @return {string}
 */
StateType.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {StateType}
 */
StateType.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'state') {
		throw new Error("Bad XML provided, expected tagName state, got: " + xmlObj.tagName);
	}
	var state = new ns.StateType();
	state.value = xmlObj.getAttribute('value') || null;
	state.variable = xmlObj.getAttribute('variable') || null;
	return state;
};
ns.StateType = StateType;
// ------- END STATE -------

// ------- CLONE -------
/**
 * Represents the <code>&lt;clone&gt;</code> element.
 * @class CloneType
 * @param {Object} params
 * @param {string=} params.label
 */
var CloneType = function (params) {
	var params = checkParams(params, ['label']);
	this.label = params.label;
};

/**
 * @return {Element}
 */
CloneType.prototype.buildXmlObj = function () {
	var clone = new xmldom.DOMImplementation().createDocument().createElement('clone');
	if(this.label != null) {
		clone.setAttribute('label', this.label);
	}
	return clone;
};

/**
 * @return {string}
 */
CloneType.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {CloneType}
 */
CloneType.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'clone') {
		throw new Error("Bad XML provided, expected tagName clone, got: " + xmlObj.tagName);
	}
	var clone = new ns.CloneType();
	clone.label = xmlObj.getAttribute('label') || null;
	return clone;
};
ns.CloneType = CloneType;
// ------- END CLONE -------

// ------- PORT -------
/**
 * Represents the <code>&lt;port&gt;</code> element.
 * @class Port
 * @param {Object} params
 * @param {string=} params.id
 * @param {string|number=} params.x
 * @param {string|number=} params.y
 */
var Port = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['id', 'x', 'y']);
	this.id = params.id;
	this.x 	= parseFloat(params.x);
	this.y 	= parseFloat(params.y);

	this.allowedChildren = [];
	this.tagName = 'port';
};

Port.prototype = Object.create(ns.SBGNBase.prototype);
Port.prototype.constructor = ns.Port;

/**
 * @return {Element}
 */
Port.prototype.buildXmlObj = function () {
	var port = new xmldom.DOMImplementation().createDocument().createElement('port');
	if(this.id != null) {
		port.setAttribute('id', this.id);
	}
	if(!isNaN(this.x)) {
		port.setAttribute('x', this.x);
	}
	if(!isNaN(this.y)) {
		port.setAttribute('y', this.y);
	}
	this.baseToXmlObj(port);
	return port;
};

/**
 * @return {string}
 */
Port.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Port}
 */
Port.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'port') {
		throw new Error("Bad XML provided, expected tagName port, got: " + xmlObj.tagName);
	}
	var port = new ns.Port();
	port.x 	= parseFloat(xmlObj.getAttribute('x'));
	port.y 	= parseFloat(xmlObj.getAttribute('y'));
	port.id = xmlObj.getAttribute('id') || null;
	port.baseFromXML(xmlObj);
	return port;
};
ns.Port = Port;
// ------- END PORT -------

// ------- ARC -------
/**
 * Represents the <code>&lt;arc&gt;</code> element.
 * @class Arc
 * @param {Object} params
 * @param {string=} params.id
 * @param {string=} params.class_
 * @param {string=} params.source
 * @param {string=} params.target
 * @param {StartType=} params.start
 * @param {EndType=} params.end
 * @param {NextType=} params.nexts
 * @param {Glyph[]=} params.glyphs The arc's cardinality. Possibility to have more than one glyph is left open.
 */
var Arc = function (params) {
	ns.SBGNBase.call(this, params);
	var params = checkParams(params, ['id', 'class_', 'source', 'target', 'start', 'end', 'nexts', 'glyphs']);
	this.id 	= params.id;
	this.class_ = params.class_;
	this.source = params.source;
	this.target = params.target;

	this.start 	= params.start;
	this.end 	= params.end;
	this.nexts 	= params.nexts || [];
	this.glyphs = params.glyphs || [];

	this.allowedChildren = ['start', 'nexts', 'end', 'glyphs'];
	this.tagName = 'arc';
};

Arc.prototype = Object.create(ns.SBGNBase.prototype);
Arc.prototype.constructor = ns.Arc;

/**
 * @param {StartType} start
 */
Arc.prototype.setStart = function (start) {
	this.start = start;
};

/**
 * @param {EndType} end
 */
Arc.prototype.setEnd = function (end) {
	this.end = end;
};

/**
 * @param {NextType} next
 */
Arc.prototype.addNext = function (next) {
	this.nexts.push(next);
};

/**
 * @param {Glyph} glyph
 */
Arc.prototype.addGlyph = function (glyph) {
	this.glyphs.push(glyph);
};

/**
 * @return {Element}
 */
Arc.prototype.buildXmlObj = function () {
	var arc = new xmldom.DOMImplementation().createDocument().createElement('arc');
	// attributes
	if(this.id != null) {
		arc.setAttribute('id', this.id);
	}
	if(this.class_ != null) {
		arc.setAttribute('class', this.class_);
	}
	if(this.source != null) {
		arc.setAttribute('source', this.source);
	}
	if(this.target != null) {
		arc.setAttribute('target', this.target);
	}
	// children
	for(var i=0; i < this.glyphs.length; i++) {
		arc.appendChild(this.glyphs[i].buildXmlObj());
	}
	if(this.start != null) {
		arc.appendChild(this.start.buildXmlObj());
	}
	for(var i=0; i < this.nexts.length; i++) {
		arc.appendChild(this.nexts[i].buildXmlObj());
	}
	if(this.end != null) {
		arc.appendChild(this.end.buildXmlObj());
	}
	this.baseToXmlObj(arc);
	return arc;
};

/**
 * @return {string}
 */
Arc.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {Arc}
 */
Arc.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'arc') {
		throw new Error("Bad XML provided, expected tagName arc, got: " + xmlObj.tagName);
	}
	var arc = new ns.Arc();
	arc.id 		= xmlObj.getAttribute('id') || null;
	arc.class_ 	= xmlObj.getAttribute('class') || null;
	arc.source 	= xmlObj.getAttribute('source') || null;
	arc.target 	= xmlObj.getAttribute('target') || null;

	var startXML = xmlObj.getElementsByTagName('start')[0];
	if (startXML != null) {
		var start = ns.StartType.fromXML(startXML);
		arc.setStart(start);
	}
	var nextXML = xmlObj.getElementsByTagName('next');
	for (var i=0; i < nextXML.length; i++) {
		var next = ns.NextType.fromXML(nextXML[i]);
		arc.addNext(next);
	}
	var endXML = xmlObj.getElementsByTagName('end')[0];
	if (endXML != null) {
		var end = ns.EndType.fromXML(endXML);
		arc.setEnd(end);
	}
	var glyphsXML = xmlObj.getElementsByTagName('glyph');
	for (var i=0; i < glyphsXML.length; i++) {
		var glyph = ns.Glyph.fromXML(glyphsXML[i]);
		arc.addGlyph(glyph);
	}

	arc.baseFromXML(xmlObj);
	return arc;
};
ns.Arc = Arc;
// ------- END ARC -------

// ------- STARTTYPE -------
/**
 * Represents the <code>&lt;start&gt;</code> element.
 * @class StartType
 * @param {Object} params
 * @param {string|number=} params.x
 * @param {string|number=} params.y
 */
var StartType = function (params) {
	var params = checkParams(params, ['x', 'y']);
	this.x = parseFloat(params.x);
	this.y = parseFloat(params.y);
};

/**
 * @return {Element}
 */
StartType.prototype.buildXmlObj = function () {
	var start = new xmldom.DOMImplementation().createDocument().createElement('start');
	if(!isNaN(this.x)) {
		start.setAttribute('x', this.x);
	}
	if(!isNaN(this.y)) {
		start.setAttribute('y', this.y);
	}
	return start;
};

/**
 * @return {string}
 */
StartType.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {StartType}
 */
StartType.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'start') {
		throw new Error("Bad XML provided, expected tagName start, got: " + xmlObj.tagName);
	}
	var start = new ns.StartType();
	start.x = parseFloat(xmlObj.getAttribute('x'));
	start.y = parseFloat(xmlObj.getAttribute('y'));
	return start;
};
ns.StartType = StartType;
// ------- END STARTTYPE -------

// ------- ENDTYPE -------
/**
 * Represents the <code>&lt;end&gt;</code> element.
 * @class EndType
 * @param {Object} params
 * @param {string|number=} params.x
 * @param {string|number=} params.y
 */
var EndType = function (params) {
	var params = checkParams(params, ['x', 'y']);
	this.x = parseFloat(params.x);
	this.y = parseFloat(params.y);
};

/**
 * @return {Element}
 */
EndType.prototype.buildXmlObj = function () {
	var end = new xmldom.DOMImplementation().createDocument().createElement('end');
	if(!isNaN(this.x)) {
		end.setAttribute('x', this.x);
	}
	if(!isNaN(this.y)) {
		end.setAttribute('y', this.y);
	}
	return end;
};

/**
 * @return {string}
 */
EndType.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {EndType}
 */
EndType.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'end') {
		throw new Error("Bad XML provided, expected tagName end, got: " + xmlObj.tagName);
	}
	var end = new ns.EndType();
	end.x = parseFloat(xmlObj.getAttribute('x'));
	end.y = parseFloat(xmlObj.getAttribute('y'));
	return end;
};
ns.EndType = EndType;
// ------- END ENDTYPE -------

// ------- NEXTTYPE -------
/**
 * Represents the <code>&lt;next&gt;</code> element.
 * @class NextType
 * @param {Object} params
 * @param {string|number=} params.x
 * @param {string|number=} params.y
 */
var NextType = function (params) {
	var params = checkParams(params, ['x', 'y']);
	this.x = parseFloat(params.x);
	this.y = parseFloat(params.y);
};

/**
 * @return {Element}
 */
NextType.prototype.buildXmlObj = function () {
	var next = new xmldom.DOMImplementation().createDocument().createElement('next');
	if(!isNaN(this.x)) {
		next.setAttribute('x', this.x);
	}
	if(!isNaN(this.y)) {
		next.setAttribute('y', this.y);
	}
	return next;
};

/**
 * @return {string}
 */
NextType.prototype.toXML = function () {
	return new xmldom.XMLSerializer().serializeToString(this.buildXmlObj());
};

/**
 * @param {Element} xmlObj
 * @return {NextType}
 */
NextType.fromXML = function (xmlObj) {
	if (xmlObj.tagName != 'next') {
		throw new Error("Bad XML provided, expected tagName next, got: " + xmlObj.tagName);
	}
	var next = new ns.NextType();
	next.x = parseFloat(xmlObj.getAttribute('x'));
	next.y = parseFloat(xmlObj.getAttribute('y'));
	return next;
};
ns.NextType = NextType;
// ------- END NEXTTYPE -------

ns.render = renderExt;
ns.annot = annotExt;
module.exports = ns;
},{"./libsbgn-annotations":126,"./libsbgn-render":127,"./utilities":129,"xmldom":120}],129:[function(_dereq_,module,exports){
var ns = {};

/*
	guarantees to return an object with given args being set to null if not present, other args returned as is
*/
ns.checkParams = function (params, names) {
	if (typeof params == "undefined" || params == null) {
		params = {};
	}
	if (typeof params != 'object') {
		throw new Error("Bad params. Object with named parameters must be passed.");
	}
	for(var i=0; i < names.length; i++) {
		var argName = names[i];
		if (typeof params[argName] == 'undefined') {
			params[argName] = null;
		}
	}
	return params;
}

ns.getFirstLevelByName = function (xmlObj, tagName) {
	var result = [];
	for(var i=0; i<xmlObj.childNodes.length; i++) {
		var child = xmlObj.childNodes[i];
		if (child.tagName && child.tagName == tagName) {
			result.push(child);
		}
	}
	return result;
};

module.exports = ns;
},{}]},{},[50])(50)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYi9iNjQuanMiLCJub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci1zaGltcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1aWx0aW4tc3RhdHVzLWNvZGVzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9odHRwcy1icm93c2VyaWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9wcmV0dHktZGF0YS9wcmV0dHktZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCJub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwibm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9yZXF1ZXN0LmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9yZXNwb25zZS5qcyIsIm5vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwicGFja2FnZS5qc29uIiwic3JjL2luZGV4LmpzIiwic3JjL3NiZ24tZXh0ZW5zaW9ucy9zYmduLWN5LWluc3RhbmNlLmpzIiwic3JjL3NiZ24tZXh0ZW5zaW9ucy9zYmduLWN5LXJlbmRlcmVyLmpzIiwic3JjL3V0aWxpdGllcy9lbGVtZW50LXV0aWxpdGllcy5qcyIsInNyYy91dGlsaXRpZXMvZmlsZS11dGlsaXRpZXMuanMiLCJzcmMvdXRpbGl0aWVzL2dyYXBoLXV0aWxpdGllcy5qcyIsInNyYy91dGlsaXRpZXMvanNvbi10by1zYmdubWwtY29udmVydGVyLmpzIiwic3JjL3V0aWxpdGllcy9rZXlib2FyZC1pbnB1dC11dGlsaXRpZXMuanMiLCJzcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJzcmMvdXRpbGl0aWVzL21haW4tdXRpbGl0aWVzLmpzIiwic3JjL3V0aWxpdGllcy9vcHRpb24tdXRpbGl0aWVzLmpzIiwic3JjL3V0aWxpdGllcy9zYmdubWwtdG8tanNvbi1jb252ZXJ0ZXIuanMiLCJzcmMvdXRpbGl0aWVzL3RleHQtdXRpbGl0aWVzLmpzIiwic3JjL3V0aWxpdGllcy91aS11dGlsaXRpZXMuanMiLCJzcmMvdXRpbGl0aWVzL3VuZG8tcmVkby1hY3Rpb24tZnVuY3Rpb25zLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9pbmRleC5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL2FzeW5jL2xpYi9hc3luYy5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvZXM2LXByb21pc2UuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9qc29ubGQvYnJvd3Nlci9pZ25vcmUuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9qc29ubGQvanMvanNvbmxkLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvbjMvTjMuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9uMy9saWIvTjNMZXhlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL24zL2xpYi9OM1BhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL24zL2xpYi9OM1N0b3JlLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvbjMvbGliL04zU3RyZWFtUGFyc2VyLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvbjMvbGliL04zU3RyZWFtV3JpdGVyLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvbjMvbGliL04zVXRpbC5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL24zL2xpYi9OM1dyaXRlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvYmxhbmstbm9kZS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvY2xhc3Mtb3JkZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2NvbGxlY3Rpb24uanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2NvbnZlcnQuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2RhdGEtZmFjdG9yeS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvZGVmYXVsdC1ncmFwaC5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvZW1wdHkuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2ZldGNoZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2Zvcm11bGEuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2luZGV4LmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL2xpYi9pbmRleGVkLWZvcm11bGEuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2pzb25wYXJzZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2xpdGVyYWwuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL2xvZy5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvbjNwYXJzZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL25hbWVkLW5vZGUuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL25hbWVzcGFjZS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvbm9kZS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvcGFyc2UuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL3BhdGNoLXBhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvcXVlcnktdG8tc3BhcnFsLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL2xpYi9xdWVyeS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvcmRmYXBhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvcmRmeG1scGFyc2VyLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL2xpYi9zZXJpYWxpemUuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL3NlcmlhbGl6ZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL3NwYXJxbC10by1xdWVyeS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvc3RhdGVtZW50LmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL2xpYi91cGRhdGUtbWFuYWdlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvdXBkYXRlcy12aWEuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL3VyaS5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvdXRpbC5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9saWIvdmFyaWFibGUuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbGliL3hzZC5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9ub2RlX21vZHVsZXMvbjMvbGliL04zTGV4ZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbm9kZV9tb2R1bGVzL24zL2xpYi9OM1BhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9ub2RlX21vZHVsZXMvbjMvbGliL04zU3RvcmUuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy9yZGZsaWIvbm9kZV9tb2R1bGVzL24zL2xpYi9OM1N0cmVhbVBhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3JkZmxpYi9ub2RlX21vZHVsZXMvbjMvbGliL04zU3RyZWFtV3JpdGVyLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL25vZGVfbW9kdWxlcy9uMy9saWIvTjNVdGlsLmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMvcmRmbGliL25vZGVfbW9kdWxlcy9uMy9saWIvTjNXcml0ZXIuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy94bWxkb20vZG9tLXBhcnNlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvbm9kZV9tb2R1bGVzL3htbGRvbS9kb20uanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy94bWxkb20vZW50aXRpZXMuanMiLCIuLi8uLi9saWJzYmduLWpzL25vZGVfbW9kdWxlcy94bWxkb20vc2F4LmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9ub2RlX21vZHVsZXMveG1saHR0cHJlcXVlc3QvbGliL1hNTEh0dHBSZXF1ZXN0LmpzIiwiLi4vLi4vbGlic2Jnbi1qcy9zcmMvYW5ub3RhdGlvbi11dGlscy5qcyIsIi4uLy4uL2xpYnNiZ24tanMvc3JjL2xpYnNiZ24tYW5ub3RhdGlvbnMuanMiLCIuLi8uLi9saWJzYmduLWpzL3NyYy9saWJzYmduLXJlbmRlci5qcyIsIi4uLy4uL2xpYnNiZ24tanMvc3JjL2xpYnNiZ24uanMiLCIuLi8uLi9saWJzYmduLWpzL3NyYy91dGlsaXRpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM1Z0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNTZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3ppQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvREE7QUFDQTs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hCQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDN0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3A3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDam1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbmtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNubUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNThCQTs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy8vUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4NEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2x4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25KQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hrREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaG5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4N0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9iQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDejdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzk3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcldBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25QQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDem5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM1bUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdGVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNtQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuIixudWxsLCIndXNlIHN0cmljdCc7XG5cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKTtcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyO1xudmFyIFNsb3dCdWZmZXIgPSBidWZmZXIuU2xvd0J1ZmZlcjtcbnZhciBNQVhfTEVOID0gYnVmZmVyLmtNYXhMZW5ndGggfHwgMjE0NzQ4MzY0NztcbmV4cG9ydHMuYWxsb2MgPSBmdW5jdGlvbiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIEJ1ZmZlci5hbGxvYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpO1xuICB9XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBub3QgYmUgbnVtYmVyJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpO1xuICB9XG4gIGlmIChzaXplID4gTUFYX0xFTikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdzaXplIGlzIHRvbyBsYXJnZScpO1xuICB9XG4gIHZhciBlbmMgPSBlbmNvZGluZztcbiAgdmFyIF9maWxsID0gZmlsbDtcbiAgaWYgKF9maWxsID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmMgPSB1bmRlZmluZWQ7XG4gICAgX2ZpbGwgPSAwO1xuICB9XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKHNpemUpO1xuICBpZiAodHlwZW9mIF9maWxsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBmaWxsQnVmID0gbmV3IEJ1ZmZlcihfZmlsbCwgZW5jKTtcbiAgICB2YXIgZmxlbiA9IGZpbGxCdWYubGVuZ3RoO1xuICAgIHZhciBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IHNpemUpIHtcbiAgICAgIGJ1ZltpXSA9IGZpbGxCdWZbaSAlIGZsZW5dO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbChfZmlsbCk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplKSB7XG4gIGlmICh0eXBlb2YgQnVmZmVyLmFsbG9jVW5zYWZlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKTtcbiAgfVxuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gIH1cbiAgaWYgKHNpemUgPiBNQVhfTEVOKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NpemUgaXMgdG9vIGxhcmdlJyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBCdWZmZXIoc2l6ZSk7XG59XG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gJ2Z1bmN0aW9uJyAmJiAoIWdsb2JhbC5VaW50OEFycmF5IHx8IFVpbnQ4QXJyYXkuZnJvbSAhPT0gQnVmZmVyLmZyb20pKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHZhciBvZmZzZXQgPSBlbmNvZGluZ09yT2Zmc2V0O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgdmFyIGxlbiA9IGxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGxlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxlbiA9IHZhbHVlLmJ5dGVMZW5ndGggLSBvZmZzZXQ7XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPj0gdmFsdWUuYnl0ZUxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJyk7XG4gICAgfVxuICAgIGlmIChsZW4gPiB2YWx1ZS5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW4pKTtcbiAgfVxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKHZhbHVlLmxlbmd0aCk7XG4gICAgdmFsdWUuY29weShvdXQsIDAsIDAsIHZhbHVlLmxlbmd0aCk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZS50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlLmRhdGEpKSB7XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZS5kYXRhKTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsICcgKyAnQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKTtcbn1cbmV4cG9ydHMuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gYWxsb2NVbnNhZmVTbG93KHNpemUpIHtcbiAgaWYgKHR5cGVvZiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3coc2l6ZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpO1xuICB9XG4gIGlmIChzaXplID49IE1BWF9MRU4pIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2l6ZSBpcyB0b28gbGFyZ2UnKTtcbiAgfVxuICByZXR1cm4gbmV3IFNsb3dCdWZmZXIoc2l6ZSk7XG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbnZhciByb290UGFyZW50ID0ge31cblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBTYWZhcmkgNS03IGxhY2tzIHN1cHBvcnQgZm9yIGNoYW5naW5nIHRoZSBgT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvcmAgcHJvcGVydHlcbiAqICAgICBvbiBvYmplY3RzLlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgZnVuY3Rpb24gQmFyICgpIHt9XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLmZvbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cbiAgICBhcnIuY29uc3RydWN0b3IgPSBCYXJcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICBhcnIuY29uc3RydWN0b3IgPT09IEJhciAmJiAvLyBjb25zdHJ1Y3RvciBjYW4gYmUgc2V0XG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKGFyZykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIC8vIEF2b2lkIGdvaW5nIHRocm91Z2ggYW4gQXJndW1lbnRzQWRhcHRvclRyYW1wb2xpbmUgaW4gdGhlIGNvbW1vbiBjYXNlLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBhcmd1bWVudHNbMV0pXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnKVxuICB9XG5cbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZyb21OdW1iZXIodGhpcywgYXJnKVxuICB9XG5cbiAgLy8gU2xpZ2h0bHkgbGVzcyBjb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhpcywgYXJnLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6ICd1dGY4JylcbiAgfVxuXG4gIC8vIFVudXN1YWwuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoaXMsIGFyZylcbn1cblxuZnVuY3Rpb24gZnJvbU51bWJlciAodGhhdCwgbGVuZ3RoKSB7XG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGggPCAwID8gMCA6IGNoZWNrZWQobGVuZ3RoKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykgZW5jb2RpbmcgPSAndXRmOCdcblxuICAvLyBBc3N1bXB0aW9uOiBieXRlTGVuZ3RoKCkgcmV0dXJuIHZhbHVlIGlzIGFsd2F5cyA8IGtNYXhMZW5ndGguXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuXG4gIHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqZWN0KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqZWN0KSkgcmV0dXJuIGZyb21CdWZmZXIodGhhdCwgb2JqZWN0KVxuXG4gIGlmIChpc0FycmF5KG9iamVjdCkpIHJldHVybiBmcm9tQXJyYXkodGhhdCwgb2JqZWN0KVxuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3Qgc3RhcnQgd2l0aCBudW1iZXIsIGJ1ZmZlciwgYXJyYXkgb3Igc3RyaW5nJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKG9iamVjdC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGZyb21UeXBlZEFycmF5KHRoYXQsIG9iamVjdClcbiAgICB9XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIG9iamVjdClcbiAgICB9XG4gIH1cblxuICBpZiAob2JqZWN0Lmxlbmd0aCkgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqZWN0KVxuXG4gIHJldHVybiBmcm9tSnNvbk9iamVjdCh0aGF0LCBvYmplY3QpXG59XG5cbmZ1bmN0aW9uIGZyb21CdWZmZXIgKHRoYXQsIGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChidWZmZXIubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGFsbG9jYXRlKHRoYXQsIGxlbmd0aClcbiAgYnVmZmVyLmNvcHkodGhhdCwgMCwgMCwgbGVuZ3RoKVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vLyBEdXBsaWNhdGUgb2YgZnJvbUFycmF5KCkgdG8ga2VlcCBmcm9tQXJyYXkoKSBtb25vbW9ycGhpYy5cbmZ1bmN0aW9uIGZyb21UeXBlZEFycmF5ICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuICAvLyBUcnVuY2F0aW5nIHRoZSBlbGVtZW50cyBpcyBwcm9iYWJseSBub3Qgd2hhdCBwZW9wbGUgZXhwZWN0IGZyb20gdHlwZWRcbiAgLy8gYXJyYXlzIHdpdGggQllURVNfUEVSX0VMRU1FTlQgPiAxIGJ1dCBpdCdzIGNvbXBhdGlibGUgd2l0aCB0aGUgYmVoYXZpb3JcbiAgLy8gb2YgdGhlIG9sZCBCdWZmZXIgY29uc3RydWN0b3IuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5KSB7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGFycmF5LmJ5dGVMZW5ndGhcbiAgICB0aGF0ID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGFycmF5KSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21UeXBlZEFycmF5KHRoYXQsIG5ldyBVaW50OEFycmF5KGFycmF5KSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLy8gRGVzZXJpYWxpemUgeyB0eXBlOiAnQnVmZmVyJywgZGF0YTogWzEsMiwzLC4uLl0gfSBpbnRvIGEgQnVmZmVyIG9iamVjdC5cbi8vIFJldHVybnMgYSB6ZXJvLWxlbmd0aCBidWZmZXIgZm9yIGlucHV0cyB0aGF0IGRvbid0IGNvbmZvcm0gdG8gdGhlIHNwZWMuXG5mdW5jdGlvbiBmcm9tSnNvbk9iamVjdCAodGhhdCwgb2JqZWN0KSB7XG4gIHZhciBhcnJheVxuICB2YXIgbGVuZ3RoID0gMFxuXG4gIGlmIChvYmplY3QudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmplY3QuZGF0YSkpIHtcbiAgICBhcnJheSA9IG9iamVjdC5kYXRhXG4gICAgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB9XG4gIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG59IGVsc2Uge1xuICAvLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuICBCdWZmZXIucHJvdG90eXBlLmxlbmd0aCA9IHVuZGVmaW5lZFxuICBCdWZmZXIucHJvdG90eXBlLnBhcmVudCA9IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBhbGxvY2F0ZSAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgICB0aGF0Ll9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBmcm9tUG9vbCA9IGxlbmd0aCAhPT0gMCAmJiBsZW5ndGggPD0gQnVmZmVyLnBvb2xTaXplID4+PiAxXG4gIGlmIChmcm9tUG9vbCkgdGhhdC5wYXJlbnQgPSByb290UGFyZW50XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChzdWJqZWN0LCBlbmNvZGluZykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2xvd0J1ZmZlcikpIHJldHVybiBuZXcgU2xvd0J1ZmZlcihzdWJqZWN0LCBlbmNvZGluZylcblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZylcbiAgZGVsZXRlIGJ1Zi5wYXJlbnRcbiAgcmV0dXJuIGJ1ZlxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgdmFyIGkgPSAwXG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSBicmVha1xuXG4gICAgKytpXG4gIH1cblxuICBpZiAoaSAhPT0gbGVuKSB7XG4gICAgeCA9IGFbaV1cbiAgICB5ID0gYltpXVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdsaXN0IGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycy4nKVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpXG4gICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykgc3RyaW5nID0gJycgKyBzdHJpbmdcblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIC8vIERlcHJlY2F0ZWRcbiAgICAgIGNhc2UgJ3Jhdyc6XG4gICAgICBjYXNlICdyYXdzJzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICBzdGFydCA9IHN0YXJ0IHwgMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPT09IEluZmluaXR5ID8gdGhpcy5sZW5ndGggOiBlbmQgfCAwXG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcbiAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKGVuZCA8PSBzdGFydCkgcmV0dXJuICcnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYmluYXJ5U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiAwXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICBieXRlT2Zmc2V0ID4+PSAwXG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVybiAtMVxuXG4gIC8vIE5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gTWF0aC5tYXgodGhpcy5sZW5ndGggKyBieXRlT2Zmc2V0LCAwKVxuXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSByZXR1cm4gLTEgLy8gc3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcgYWx3YXlzIGZhaWxzXG4gICAgcmV0dXJuIFN0cmluZy5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsIHZhbCwgYnl0ZU9mZnNldClcbiAgfVxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldClcbiAgfVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0aGlzLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YodGhpcywgWyB2YWwgXSwgYnl0ZU9mZnNldClcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yICh2YXIgaSA9IDA7IGJ5dGVPZmZzZXQgKyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyW2J5dGVPZmZzZXQgKyBpXSA9PT0gdmFsW2ZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4XSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbC5sZW5ndGgpIHJldHVybiBieXRlT2Zmc2V0ICsgZm91bmRJbmRleFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuLy8gYGdldGAgaXMgZGVwcmVjYXRlZFxuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMucmVhZFVJbnQ4KG9mZnNldClcbn1cblxuLy8gYHNldGAgaXMgZGVwcmVjYXRlZFxuQnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMud3JpdGVVSW50OCh2LCBvZmZzZXQpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmluYXJ5V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHZhciBzd2FwID0gZW5jb2RpbmdcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIG9mZnNldCA9IGxlbmd0aCB8IDBcbiAgICBsZW5ndGggPSBzd2FwXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gYmluYXJ5U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47IGkrKykge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgaWYgKG5ld0J1Zi5sZW5ndGgpIG5ld0J1Zi5wYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdidWZmZXIgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpLCAwKVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpLCAwKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gdmFsdWUgPCAwID8gMSA6IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRTdGFydClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDAgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB0aGlzW2ldID0gdmFsdWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gdXRmOFRvQnl0ZXModmFsdWUudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gdG9BcnJheUJ1ZmZlciAoKSB7XG4gIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgIHJldHVybiAobmV3IEJ1ZmZlcih0aGlzKSkuYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzLmxlbmd0aClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYnVmW2ldID0gdGhpc1tpXVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXJcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQnVmZmVyLnRvQXJyYXlCdWZmZXIgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKVxuICB9XG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIEJQID0gQnVmZmVyLnByb3RvdHlwZVxuXG4vKipcbiAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcbiAqL1xuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gX2F1Z21lbnQgKGFycikge1xuICBhcnIuY29uc3RydWN0b3IgPSBCdWZmZXJcbiAgYXJyLl9pc0J1ZmZlciA9IHRydWVcblxuICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IHNldCBtZXRob2QgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fc2V0ID0gYXJyLnNldFxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgYXJyLmdldCA9IEJQLmdldFxuICBhcnIuc2V0ID0gQlAuc2V0XG5cbiAgYXJyLndyaXRlID0gQlAud3JpdGVcbiAgYXJyLnRvU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvTG9jYWxlU3RyaW5nID0gQlAudG9TdHJpbmdcbiAgYXJyLnRvSlNPTiA9IEJQLnRvSlNPTlxuICBhcnIuZXF1YWxzID0gQlAuZXF1YWxzXG4gIGFyci5jb21wYXJlID0gQlAuY29tcGFyZVxuICBhcnIuaW5kZXhPZiA9IEJQLmluZGV4T2ZcbiAgYXJyLmNvcHkgPSBCUC5jb3B5XG4gIGFyci5zbGljZSA9IEJQLnNsaWNlXG4gIGFyci5yZWFkVUludExFID0gQlAucmVhZFVJbnRMRVxuICBhcnIucmVhZFVJbnRCRSA9IEJQLnJlYWRVSW50QkVcbiAgYXJyLnJlYWRVSW50OCA9IEJQLnJlYWRVSW50OFxuICBhcnIucmVhZFVJbnQxNkxFID0gQlAucmVhZFVJbnQxNkxFXG4gIGFyci5yZWFkVUludDE2QkUgPSBCUC5yZWFkVUludDE2QkVcbiAgYXJyLnJlYWRVSW50MzJMRSA9IEJQLnJlYWRVSW50MzJMRVxuICBhcnIucmVhZFVJbnQzMkJFID0gQlAucmVhZFVJbnQzMkJFXG4gIGFyci5yZWFkSW50TEUgPSBCUC5yZWFkSW50TEVcbiAgYXJyLnJlYWRJbnRCRSA9IEJQLnJlYWRJbnRCRVxuICBhcnIucmVhZEludDggPSBCUC5yZWFkSW50OFxuICBhcnIucmVhZEludDE2TEUgPSBCUC5yZWFkSW50MTZMRVxuICBhcnIucmVhZEludDE2QkUgPSBCUC5yZWFkSW50MTZCRVxuICBhcnIucmVhZEludDMyTEUgPSBCUC5yZWFkSW50MzJMRVxuICBhcnIucmVhZEludDMyQkUgPSBCUC5yZWFkSW50MzJCRVxuICBhcnIucmVhZEZsb2F0TEUgPSBCUC5yZWFkRmxvYXRMRVxuICBhcnIucmVhZEZsb2F0QkUgPSBCUC5yZWFkRmxvYXRCRVxuICBhcnIucmVhZERvdWJsZUxFID0gQlAucmVhZERvdWJsZUxFXG4gIGFyci5yZWFkRG91YmxlQkUgPSBCUC5yZWFkRG91YmxlQkVcbiAgYXJyLndyaXRlVUludDggPSBCUC53cml0ZVVJbnQ4XG4gIGFyci53cml0ZVVJbnRMRSA9IEJQLndyaXRlVUludExFXG4gIGFyci53cml0ZVVJbnRCRSA9IEJQLndyaXRlVUludEJFXG4gIGFyci53cml0ZVVJbnQxNkxFID0gQlAud3JpdGVVSW50MTZMRVxuICBhcnIud3JpdGVVSW50MTZCRSA9IEJQLndyaXRlVUludDE2QkVcbiAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFXG4gIGFyci53cml0ZVVJbnQzMkJFID0gQlAud3JpdGVVSW50MzJCRVxuICBhcnIud3JpdGVJbnRMRSA9IEJQLndyaXRlSW50TEVcbiAgYXJyLndyaXRlSW50QkUgPSBCUC53cml0ZUludEJFXG4gIGFyci53cml0ZUludDggPSBCUC53cml0ZUludDhcbiAgYXJyLndyaXRlSW50MTZMRSA9IEJQLndyaXRlSW50MTZMRVxuICBhcnIud3JpdGVJbnQxNkJFID0gQlAud3JpdGVJbnQxNkJFXG4gIGFyci53cml0ZUludDMyTEUgPSBCUC53cml0ZUludDMyTEVcbiAgYXJyLndyaXRlSW50MzJCRSA9IEJQLndyaXRlSW50MzJCRVxuICBhcnIud3JpdGVGbG9hdExFID0gQlAud3JpdGVGbG9hdExFXG4gIGFyci53cml0ZUZsb2F0QkUgPSBCUC53cml0ZUZsb2F0QkVcbiAgYXJyLndyaXRlRG91YmxlTEUgPSBCUC53cml0ZURvdWJsZUxFXG4gIGFyci53cml0ZURvdWJsZUJFID0gQlAud3JpdGVEb3VibGVCRVxuICBhcnIuZmlsbCA9IEJQLmZpbGxcbiAgYXJyLmluc3BlY3QgPSBCUC5pbnNwZWN0XG4gIGFyci50b0FycmF5QnVmZmVyID0gQlAudG9BcnJheUJ1ZmZlclxuXG4gIHJldHVybiBhcnJcbn1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcIjEwMFwiOiBcIkNvbnRpbnVlXCIsXG4gIFwiMTAxXCI6IFwiU3dpdGNoaW5nIFByb3RvY29sc1wiLFxuICBcIjEwMlwiOiBcIlByb2Nlc3NpbmdcIixcbiAgXCIyMDBcIjogXCJPS1wiLFxuICBcIjIwMVwiOiBcIkNyZWF0ZWRcIixcbiAgXCIyMDJcIjogXCJBY2NlcHRlZFwiLFxuICBcIjIwM1wiOiBcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsXG4gIFwiMjA0XCI6IFwiTm8gQ29udGVudFwiLFxuICBcIjIwNVwiOiBcIlJlc2V0IENvbnRlbnRcIixcbiAgXCIyMDZcIjogXCJQYXJ0aWFsIENvbnRlbnRcIixcbiAgXCIyMDdcIjogXCJNdWx0aS1TdGF0dXNcIixcbiAgXCIzMDBcIjogXCJNdWx0aXBsZSBDaG9pY2VzXCIsXG4gIFwiMzAxXCI6IFwiTW92ZWQgUGVybWFuZW50bHlcIixcbiAgXCIzMDJcIjogXCJNb3ZlZCBUZW1wb3JhcmlseVwiLFxuICBcIjMwM1wiOiBcIlNlZSBPdGhlclwiLFxuICBcIjMwNFwiOiBcIk5vdCBNb2RpZmllZFwiLFxuICBcIjMwNVwiOiBcIlVzZSBQcm94eVwiLFxuICBcIjMwN1wiOiBcIlRlbXBvcmFyeSBSZWRpcmVjdFwiLFxuICBcIjMwOFwiOiBcIlBlcm1hbmVudCBSZWRpcmVjdFwiLFxuICBcIjQwMFwiOiBcIkJhZCBSZXF1ZXN0XCIsXG4gIFwiNDAxXCI6IFwiVW5hdXRob3JpemVkXCIsXG4gIFwiNDAyXCI6IFwiUGF5bWVudCBSZXF1aXJlZFwiLFxuICBcIjQwM1wiOiBcIkZvcmJpZGRlblwiLFxuICBcIjQwNFwiOiBcIk5vdCBGb3VuZFwiLFxuICBcIjQwNVwiOiBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiLFxuICBcIjQwNlwiOiBcIk5vdCBBY2NlcHRhYmxlXCIsXG4gIFwiNDA3XCI6IFwiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIixcbiAgXCI0MDhcIjogXCJSZXF1ZXN0IFRpbWUtb3V0XCIsXG4gIFwiNDA5XCI6IFwiQ29uZmxpY3RcIixcbiAgXCI0MTBcIjogXCJHb25lXCIsXG4gIFwiNDExXCI6IFwiTGVuZ3RoIFJlcXVpcmVkXCIsXG4gIFwiNDEyXCI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICBcIjQxM1wiOiBcIlJlcXVlc3QgRW50aXR5IFRvbyBMYXJnZVwiLFxuICBcIjQxNFwiOiBcIlJlcXVlc3QtVVJJIFRvbyBMYXJnZVwiLFxuICBcIjQxNVwiOiBcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIixcbiAgXCI0MTZcIjogXCJSZXF1ZXN0ZWQgUmFuZ2UgTm90IFNhdGlzZmlhYmxlXCIsXG4gIFwiNDE3XCI6IFwiRXhwZWN0YXRpb24gRmFpbGVkXCIsXG4gIFwiNDE4XCI6IFwiSSdtIGEgdGVhcG90XCIsXG4gIFwiNDIyXCI6IFwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIixcbiAgXCI0MjNcIjogXCJMb2NrZWRcIixcbiAgXCI0MjRcIjogXCJGYWlsZWQgRGVwZW5kZW5jeVwiLFxuICBcIjQyNVwiOiBcIlVub3JkZXJlZCBDb2xsZWN0aW9uXCIsXG4gIFwiNDI2XCI6IFwiVXBncmFkZSBSZXF1aXJlZFwiLFxuICBcIjQyOFwiOiBcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQyOVwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gIFwiNDMxXCI6IFwiUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVwiLFxuICBcIjUwMFwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICBcIjUwMVwiOiBcIk5vdCBJbXBsZW1lbnRlZFwiLFxuICBcIjUwMlwiOiBcIkJhZCBHYXRld2F5XCIsXG4gIFwiNTAzXCI6IFwiU2VydmljZSBVbmF2YWlsYWJsZVwiLFxuICBcIjUwNFwiOiBcIkdhdGV3YXkgVGltZS1vdXRcIixcbiAgXCI1MDVcIjogXCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLFxuICBcIjUwNlwiOiBcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsXG4gIFwiNTA3XCI6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgXCI1MDlcIjogXCJCYW5kd2lkdGggTGltaXQgRXhjZWVkZWRcIixcbiAgXCI1MTBcIjogXCJOb3QgRXh0ZW5kZWRcIixcbiAgXCI1MTFcIjogXCJOZXR3b3JrIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCJcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICB2YXIgbTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2Uge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IDA7XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsIlxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvckVhY2ggKG9iaiwgZm4sIGN0eCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKGZuKSAhPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGwgPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsID09PSArbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpba10sIGssIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4iLCJ2YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcblxudmFyIGh0dHBzID0gbW9kdWxlLmV4cG9ydHM7XG5cbmZvciAodmFyIGtleSBpbiBodHRwKSB7XG4gICAgaWYgKGh0dHAuaGFzT3duUHJvcGVydHkoa2V5KSkgaHR0cHNba2V5XSA9IGh0dHBba2V5XTtcbn07XG5cbmh0dHBzLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTtcbiAgICBwYXJhbXMuc2NoZW1lID0gJ2h0dHBzJztcbiAgICBwYXJhbXMucHJvdG9jb2wgPSAnaHR0cHM6JztcbiAgICByZXR1cm4gaHR0cC5yZXF1ZXN0LmNhbGwodGhpcywgcGFyYW1zLCBjYik7XG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIlxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTsiLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG52YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xudmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG52YXIgZG9udEVudW1zID0gW1xuXHQndG9TdHJpbmcnLFxuXHQndG9Mb2NhbGVTdHJpbmcnLFxuXHQndmFsdWVPZicsXG5cdCdoYXNPd25Qcm9wZXJ0eScsXG5cdCdpc1Byb3RvdHlwZU9mJyxcblx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0J2NvbnN0cnVjdG9yJ1xuXTtcbnZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG59O1xudmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0JGNvbnNvbGU6IHRydWUsXG5cdCRleHRlcm5hbDogdHJ1ZSxcblx0JGZyYW1lOiB0cnVlLFxuXHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHQkZnJhbWVzOiB0cnVlLFxuXHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdCRpbm5lcldpZHRoOiB0cnVlLFxuXHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdCRvdXRlcldpZHRoOiB0cnVlLFxuXHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0JHBhcmVudDogdHJ1ZSxcblx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdCRzY3JvbGxUb3A6IHRydWUsXG5cdCRzY3JvbGxYOiB0cnVlLFxuXHQkc2Nyb2xsWTogdHJ1ZSxcblx0JHNlbGY6IHRydWUsXG5cdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0JHdpbmRvdzogdHJ1ZVxufTtcbnZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHQvKiBnbG9iYWwgd2luZG93ICovXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufSgpKTtcbnZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHQvKiBnbG9iYWwgd2luZG93ICovXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIga2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0fVxuXG5cdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGhlS2V5cztcbn07XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHJldHVybiAoT2JqZWN0LmtleXMoYXJndW1lbnRzKSB8fCAnJykubGVuZ3RoID09PSAyO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0dmFyIG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzO1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIi8qKlxuKiBwcmV0dHktZGF0YSAtIG5vZGVqcyBwbHVnaW4gdG8gcHJldHR5LXByaW50IG9yIG1pbmlmeSBkYXRhIGluIFhNTCwgSlNPTiBhbmQgQ1NTIGZvcm1hdHMuXG4qICBcbiogVmVyc2lvbiAtIDAuNDAuMFxuKiBDb3B5cmlnaHQgKGMpIDIwMTIgVmFkaW0gS2lyeXVraGluXG4qIHZraXJ5dWtoaW4gQCBnbWFpbC5jb21cbiogaHR0cDovL3d3dy5lc2xpbnN0cnVjdG9yLm5ldC9wcmV0dHktZGF0YS9cbiogXG4qIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOlxuKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4qICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sXG4qXG4qXHRwZC54bWwoZGF0YSApIC0gcHJldHR5IHByaW50IFhNTDtcbipcdHBkLmpzb24oZGF0YSkgLSBwcmV0dHkgcHJpbnQgSlNPTjtcbipcdHBkLmNzcyhkYXRhICkgLSBwcmV0dHkgcHJpbnQgQ1NTO1xuKlx0cGQuc3FsKGRhdGEpICAtIHByZXR0eSBwcmludCBTUUw7XG4qXG4qXHRwZC54bWxtaW4oZGF0YSBbLCBwcmVzZXJ2ZUNvbW1lbnRzXSApIC0gbWluaWZ5IFhNTDsgXG4qXHRwZC5qc29ubWluKGRhdGEpICAgICAgICAgICAgICAgICAgICAgIC0gbWluaWZ5IEpTT047IFxuKlx0cGQuY3NzbWluKGRhdGEgWywgcHJlc2VydmVDb21tZW50c10gKSAtIG1pbmlmeSBDU1M7IFxuKlx0cGQuc3FsbWluKGRhdGEpICAgICAgICAgICAgICAgICAgICAgICAtIG1pbmlmeSBTUUw7IFxuKlxuKiBQQVJBTUVURVJTOlxuKlxuKlx0QGRhdGEgIFx0XHRcdC0gU3RyaW5nOyBYTUwsIEpTT04sIENTUyBvciBTUUwgdGV4dCB0byBiZWF1dGlmeTtcbiogXHRAcHJlc2VydmVDb21tZW50c1x0LSBCb29sIChvcHRpb25hbCwgdXNlZCBpbiBtaW54bWwgYW5kIG1pbmNzcyBvbmx5KTsgXG4qXHRcdFx0XHQgIFNldCB0aGlzIGZsYWcgdG8gdHJ1ZSB0byBwcmV2ZW50IHJlbW92aW5nIGNvbW1lbnRzIGZyb20gQHRleHQ7IFxuKlx0QFJldHVybiBcdFx0LSBTdHJpbmc7XG4qXHRcbiogVVNBR0U6XG4qXHRcbipcdHZhciBwZCAgPSByZXF1aXJlKCdwcmV0dHktZGF0YScpLnBkO1xuKlxuKlx0dmFyIHhtbF9wcCAgID0gcGQueG1sKHhtbF90ZXh0KTtcbipcdHZhciB4bWxfbWluICA9IHBkLnhtbG1pbih4bWxfdGV4dCBbLHRydWVdKTtcbipcdHZhciBqc29uX3BwICA9IHBkLmpzb24oanNvbl90ZXh0KTtcbipcdHZhciBqc29uX21pbiA9IHBkLmpzb25taW4oanNvbl90ZXh0KTtcbipcdHZhciBjc3NfcHAgICA9IHBkLmNzcyhjc3NfdGV4dCk7XG4qXHR2YXIgY3NzX21pbiAgPSBwZC5jc3NtaW4oY3NzX3RleHQgWywgdHJ1ZV0pO1xuKlx0dmFyIHNxbF9wcCAgID0gcGQuc3FsKHNxbF90ZXh0KTtcbipcdHZhciBzcWxfbWluICA9IHBkLnNxbG1pbihzcWxfdGV4dCk7XG4qXG4qIFRFU1Q6XG4qXHRjb21wLW5hbWU6cHJldHR5LWRhdGEkIG5vZGUgLi90ZXN0L3Rlc3RfeG1sXG4qXHRjb21wLW5hbWU6cHJldHR5LWRhdGEkIG5vZGUgLi90ZXN0L3Rlc3RfanNvblxuKlx0Y29tcC1uYW1lOnByZXR0eS1kYXRhJCBub2RlIC4vdGVzdC90ZXN0X2Nzc1xuKlx0Y29tcC1uYW1lOnByZXR0eS1kYXRhJCBub2RlIC4vdGVzdC90ZXN0X3NxbFxuKi9cblxuXG5mdW5jdGlvbiBwcCgpIHtcblx0dGhpcy5zaGlmdCA9IFsnXFxuJ107IC8vIGFycmF5IG9mIHNoaWZ0c1xuXHR0aGlzLnN0ZXAgPSAnICAnLCAvLyAyIHNwYWNlc1xuXHRcdG1heGRlZXAgPSAxMDAsIC8vIG5lc3RpbmcgbGV2ZWxcblx0XHRpeCA9IDA7XG5cblx0Ly8gaW5pdGlhbGl6ZSBhcnJheSB3aXRoIHNoaWZ0cyAvL1xuXHRmb3IoaXg9MDtpeDxtYXhkZWVwO2l4Kyspe1xuXHRcdHRoaXMuc2hpZnQucHVzaCh0aGlzLnNoaWZ0W2l4XSt0aGlzLnN0ZXApOyBcblx0fVxuXG59O1x0XG5cdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gWE1MIHNlY3Rpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wcC5wcm90b3R5cGUueG1sID0gZnVuY3Rpb24odGV4dCkge1xuXG5cdHZhciBhciA9IHRleHQucmVwbGFjZSgvPlxcc3swLH08L2csXCI+PFwiKVxuXHRcdFx0XHQgLnJlcGxhY2UoLzwvZyxcIn46On48XCIpXG5cdFx0XHRcdCAucmVwbGFjZSgveG1sbnNcXDovZyxcIn46On54bWxuczpcIilcblx0XHRcdFx0IC5yZXBsYWNlKC94bWxuc1xcPS9nLFwifjo6fnhtbG5zPVwiKVxuXHRcdFx0XHQgLnNwbGl0KCd+Ojp+JyksXG5cdFx0bGVuID0gYXIubGVuZ3RoLFxuXHRcdGluQ29tbWVudCA9IGZhbHNlLFxuXHRcdGRlZXAgPSAwLFxuXHRcdHN0ciA9ICcnLFxuXHRcdGl4ID0gMDtcblxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XG5cdFx0XHQvLyBzdGFydCBjb21tZW50IG9yIDwhW0NEQVRBWy4uLl1dPiBvciA8IURPQ1RZUEUgLy9cblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzwhLykgPiAtMSkgeyBcblx0XHRcdFx0c3RyICs9IHRoaXMuc2hpZnRbZGVlcF0rYXJbaXhdO1xuXHRcdFx0XHRpbkNvbW1lbnQgPSB0cnVlOyBcblx0XHRcdFx0Ly8gZW5kIGNvbW1lbnQgIG9yIDwhW0NEQVRBWy4uLl1dPiAvL1xuXHRcdFx0XHRpZihhcltpeF0uc2VhcmNoKC8tLT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goL1xcXT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goLyFET0NUWVBFLykgPiAtMSApIHsgXG5cdFx0XHRcdFx0aW5Db21tZW50ID0gZmFsc2U7IFxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgXG5cdFx0XHQvLyBlbmQgY29tbWVudCAgb3IgPCFbQ0RBVEFbLi4uXV0+IC8vXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC8tLT4vKSA+IC0xIHx8IGFyW2l4XS5zZWFyY2goL1xcXT4vKSA+IC0xKSB7IFxuXHRcdFx0XHRzdHIgKz0gYXJbaXhdO1xuXHRcdFx0XHRpbkNvbW1lbnQgPSBmYWxzZTsgXG5cdFx0XHR9IGVsc2UgXG5cdFx0XHQvLyA8ZWxtPjwvZWxtPiAvL1xuXHRcdFx0aWYoIC9ePFxcdy8uZXhlYyhhcltpeC0xXSkgJiYgL148XFwvXFx3Ly5leGVjKGFyW2l4XSkgJiZcblx0XHRcdFx0L148W1xcdzpcXC1cXC5cXCxdKy8uZXhlYyhhcltpeC0xXSkgPT0gL148XFwvW1xcdzpcXC1cXC5cXCxdKy8uZXhlYyhhcltpeF0pWzBdLnJlcGxhY2UoJy8nLCcnKSkgeyBcblx0XHRcdFx0c3RyICs9IGFyW2l4XTtcblx0XHRcdFx0aWYoIWluQ29tbWVudCkgZGVlcC0tO1xuXHRcdFx0fSBlbHNlXG5cdFx0XHQgLy8gPGVsbT4gLy9cblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXHcvKSA+IC0xICYmIGFyW2l4XS5zZWFyY2goLzxcXC8vKSA9PSAtMSAmJiBhcltpeF0uc2VhcmNoKC9cXC8+LykgPT0gLTEgKSB7XG5cdFx0XHRcdHN0ciA9ICFpbkNvbW1lbnQgPyBzdHIgKz0gdGhpcy5zaGlmdFtkZWVwKytdK2FyW2l4XSA6IHN0ciArPSBhcltpeF07XG5cdFx0XHR9IGVsc2UgXG5cdFx0XHQgLy8gPGVsbT4uLi48L2VsbT4gLy9cblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXHcvKSA+IC0xICYmIGFyW2l4XS5zZWFyY2goLzxcXC8vKSA+IC0xKSB7XG5cdFx0XHRcdHN0ciA9ICFpbkNvbW1lbnQgPyBzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF0gOiBzdHIgKz0gYXJbaXhdO1xuXHRcdFx0fSBlbHNlIFxuXHRcdFx0Ly8gPC9lbG0+IC8vXG5cdFx0XHRpZihhcltpeF0uc2VhcmNoKC88XFwvLykgPiAtMSkgeyBcblx0XHRcdFx0c3RyID0gIWluQ29tbWVudCA/IHN0ciArPSB0aGlzLnNoaWZ0Wy0tZGVlcF0rYXJbaXhdIDogc3RyICs9IGFyW2l4XTtcblx0XHRcdH0gZWxzZSBcblx0XHRcdC8vIDxlbG0vPiAvL1xuXHRcdFx0aWYoYXJbaXhdLnNlYXJjaCgvXFwvPi8pID4gLTEgKSB7IFxuXHRcdFx0XHRzdHIgPSAhaW5Db21tZW50ID8gc3RyICs9IHRoaXMuc2hpZnRbZGVlcF0rYXJbaXhdIDogc3RyICs9IGFyW2l4XTtcblx0XHRcdH0gZWxzZSBcblx0XHRcdC8vIDw/IHhtbCAuLi4gPz4gLy9cblx0XHRcdGlmKGFyW2l4XS5zZWFyY2goLzxcXD8vKSA+IC0xKSB7IFxuXHRcdFx0XHRzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF07XG5cdFx0XHR9IGVsc2UgXG5cdFx0XHQvLyB4bWxucyAvL1xuXHRcdFx0aWYoIGFyW2l4XS5zZWFyY2goL3htbG5zXFw6LykgPiAtMSAgfHwgYXJbaXhdLnNlYXJjaCgveG1sbnNcXD0vKSA+IC0xKSB7IFxuXHRcdFx0XHRzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF07XG5cdFx0XHR9IFxuXHRcdFx0XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c3RyICs9IGFyW2l4XTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdHJldHVybiAgKHN0clswXSA9PSAnXFxuJykgPyBzdHIuc2xpY2UoMSkgOiBzdHI7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEpTT04gc2VjdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnBwLnByb3RvdHlwZS5qc29uID0gZnVuY3Rpb24odGV4dCkge1xuXG5cdGlmICggdHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UodGV4dCksIG51bGwsIHRoaXMuc3RlcCk7XG5cdH1cblx0aWYgKCB0eXBlb2YgdGV4dCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodGV4dCwgbnVsbCwgdGhpcy5zdGVwKTtcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ1NTIHNlY3Rpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wcC5wcm90b3R5cGUuY3NzID0gZnVuY3Rpb24odGV4dCkge1xuXG5cdHZhciBhciA9IHRleHQucmVwbGFjZSgvXFxzezEsfS9nLCcgJylcblx0XHRcdFx0LnJlcGxhY2UoL1xcey9nLFwie346On5cIilcblx0XHRcdFx0LnJlcGxhY2UoL1xcfS9nLFwifjo6fn1+Ojp+XCIpXG5cdFx0XHRcdC5yZXBsYWNlKC9cXDsvZyxcIjt+Ojp+XCIpXG5cdFx0XHRcdC5yZXBsYWNlKC9cXC9cXCovZyxcIn46On4vKlwiKVxuXHRcdFx0XHQucmVwbGFjZSgvXFwqXFwvL2csXCIqL346On5cIilcblx0XHRcdFx0LnJlcGxhY2UoL346On5cXHN7MCx9fjo6fi9nLFwifjo6flwiKVxuXHRcdFx0XHQuc3BsaXQoJ346On4nKSxcblx0XHRsZW4gPSBhci5sZW5ndGgsXG5cdFx0ZGVlcCA9IDAsXG5cdFx0c3RyID0gJycsXG5cdFx0aXggPSAwO1xuXHRcdFxuXHRcdGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XG5cblx0XHRcdGlmKCAvXFx7Ly5leGVjKGFyW2l4XSkpICB7IFxuXHRcdFx0XHRzdHIgKz0gdGhpcy5zaGlmdFtkZWVwKytdK2FyW2l4XTtcblx0XHRcdH0gZWxzZSBcblx0XHRcdGlmKCAvXFx9Ly5leGVjKGFyW2l4XSkpICB7IFxuXHRcdFx0XHRzdHIgKz0gdGhpcy5zaGlmdFstLWRlZXBdK2FyW2l4XTtcblx0XHRcdH0gZWxzZVxuXHRcdFx0aWYoIC9cXCpcXFxcLy5leGVjKGFyW2l4XSkpICB7IFxuXHRcdFx0XHRzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c3RyICs9IHRoaXMuc2hpZnRbZGVlcF0rYXJbaXhdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoL15cXG57MSx9LywnJyk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNRTCBzZWN0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gaXNTdWJxdWVyeShzdHIsIHBhcmVudGhlc2lzTGV2ZWwpIHtcbiAgcmV0dXJuICBwYXJlbnRoZXNpc0xldmVsIC0gKHN0ci5yZXBsYWNlKC9cXCgvZywnJykubGVuZ3RoIC0gc3RyLnJlcGxhY2UoL1xcKS9nLCcnKS5sZW5ndGggKVxufVxuXG5mdW5jdGlvbiBzcGxpdF9zcWwoc3RyLCB0YWIpIHtcblxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFxzezEsfS9nLFwiIFwiKVxuXG4gICAgICAgIC5yZXBsYWNlKC8gQU5EIC9pZyxcIn46On5cIit0YWIrdGFiK1wiQU5EIFwiKVxuICAgICAgICAucmVwbGFjZSgvIEJFVFdFRU4gL2lnLFwifjo6flwiK3RhYitcIkJFVFdFRU4gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gQ0FTRSAvaWcsXCJ+Ojp+XCIrdGFiK1wiQ0FTRSBcIilcbiAgICAgICAgLnJlcGxhY2UoLyBFTFNFIC9pZyxcIn46On5cIit0YWIrXCJFTFNFIFwiKVxuICAgICAgICAucmVwbGFjZSgvIEVORCAvaWcsXCJ+Ojp+XCIrdGFiK1wiRU5EIFwiKVxuICAgICAgICAucmVwbGFjZSgvIEZST00gL2lnLFwifjo6fkZST00gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gR1JPVVBcXHN7MSx9QlkvaWcsXCJ+Ojp+R1JPVVAgQlkgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gSEFWSU5HIC9pZyxcIn46On5IQVZJTkcgXCIpXG4gICAgICAgIC8vLnJlcGxhY2UoLyBJTiAvaWcsXCJ+Ojp+XCIrdGFiK1wiSU4gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gSU4gL2lnLFwiIElOIFwiKVxuICAgICAgICAucmVwbGFjZSgvIEpPSU4gL2lnLFwifjo6fkpPSU4gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gQ1JPU1N+Ojp+ezEsfUpPSU4gL2lnLFwifjo6fkNST1NTIEpPSU4gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gSU5ORVJ+Ojp+ezEsfUpPSU4gL2lnLFwifjo6fklOTkVSIEpPSU4gXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gTEVGVH46On57MSx9Sk9JTiAvaWcsXCJ+Ojp+TEVGVCBKT0lOIFwiKVxuICAgICAgICAucmVwbGFjZSgvIFJJR0hUfjo6fnsxLH1KT0lOIC9pZyxcIn46On5SSUdIVCBKT0lOIFwiKVxuICAgICAgICAucmVwbGFjZSgvIE9OIC9pZyxcIn46On5cIit0YWIrXCJPTiBcIilcbiAgICAgICAgLnJlcGxhY2UoLyBPUiAvaWcsXCJ+Ojp+XCIrdGFiK3RhYitcIk9SIFwiKVxuICAgICAgICAucmVwbGFjZSgvIE9SREVSXFxzezEsfUJZL2lnLFwifjo6fk9SREVSIEJZIFwiKVxuICAgICAgICAucmVwbGFjZSgvIE9WRVIgL2lnLFwifjo6flwiK3RhYitcIk9WRVIgXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXChcXHN7MCx9U0VMRUNUIC9pZyxcIn46On4oU0VMRUNUIFwiKVxuICAgICAgICAucmVwbGFjZSgvXFwpXFxzezAsfVNFTEVDVCAvaWcsXCIpfjo6flNFTEVDVCBcIilcbiAgICAgICAgLnJlcGxhY2UoLyBUSEVOIC9pZyxcIiBUSEVOfjo6flwiK3RhYitcIlwiKVxuICAgICAgICAucmVwbGFjZSgvIFVOSU9OIC9pZyxcIn46On5VTklPTn46On5cIilcbiAgICAgICAgLnJlcGxhY2UoLyBVU0lORyAvaWcsXCJ+Ojp+VVNJTkcgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gV0hFTiAvaWcsXCJ+Ojp+XCIrdGFiK1wiV0hFTiBcIilcbiAgICAgICAgLnJlcGxhY2UoLyBXSEVSRSAvaWcsXCJ+Ojp+V0hFUkUgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gV0lUSCAvaWcsXCJ+Ojp+V0lUSCBcIilcbiAgICAgICAgLy8ucmVwbGFjZSgvXFwsXFxzezAsfVxcKC9pZyxcIix+Ojp+KCBcIilcbiAgICAgICAgLy8ucmVwbGFjZSgvXFwsL2lnLFwiLH46On5cIit0YWIrdGFiK1wiXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gQUxMIC9pZyxcIiBBTEwgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gQVMgL2lnLFwiIEFTIFwiKVxuICAgICAgICAucmVwbGFjZSgvIEFTQyAvaWcsXCIgQVNDIFwiKSBcbiAgICAgICAgLnJlcGxhY2UoLyBERVNDIC9pZyxcIiBERVNDIFwiKSBcbiAgICAgICAgLnJlcGxhY2UoLyBESVNUSU5DVCAvaWcsXCIgRElTVElOQ1QgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gRVhJU1RTIC9pZyxcIiBFWElTVFMgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gTk9UIC9pZyxcIiBOT1QgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8gTlVMTCAvaWcsXCIgTlVMTCBcIilcbiAgICAgICAgLnJlcGxhY2UoLyBMSUtFIC9pZyxcIiBMSUtFIFwiKVxuICAgICAgICAucmVwbGFjZSgvXFxzezAsfVNFTEVDVCAvaWcsXCJTRUxFQ1QgXCIpXG4gICAgICAgIC5yZXBsYWNlKC9+Ojp+ezEsfS9nLFwifjo6flwiKVxuICAgICAgICAuc3BsaXQoJ346On4nKTtcbn1cblxucHAucHJvdG90eXBlLnNxbCA9IGZ1bmN0aW9uKHRleHQpIHtcblxuICAgIHZhciBhcl9ieV9xdW90ZSA9IHRleHQucmVwbGFjZSgvXFxzezEsfS9nLFwiIFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJy9pZyxcIn46On5cXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnfjo6ficpLFxuICAgICAgICBsZW4gPSBhcl9ieV9xdW90ZS5sZW5ndGgsXG4gICAgICAgIGFyID0gW10sXG4gICAgICAgIGRlZXAgPSAwLFxuICAgICAgICB0YWIgPSB0aGlzLnN0ZXAsLy8rdGhpcy5zdGVwLFxuICAgICAgICBpbkNvbW1lbnQgPSB0cnVlLFxuICAgICAgICBpblF1b3RlID0gZmFsc2UsXG4gICAgICAgIHBhcmVudGhlc2lzTGV2ZWwgPSAwLFxuICAgICAgICBzdHIgPSAnJyxcbiAgICAgICAgaXggPSAwO1xuXG4gICAgZm9yKGl4PTA7aXg8bGVuO2l4KyspIHtcblxuICAgICAgICBpZihpeCUyKSB7XG4gICAgICAgICAgICBhciA9IGFyLmNvbmNhdChhcl9ieV9xdW90ZVtpeF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXIgPSBhci5jb25jYXQoc3BsaXRfc3FsKGFyX2J5X3F1b3RlW2l4XSwgdGFiKSApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGVuID0gYXIubGVuZ3RoO1xuICAgIGZvcihpeD0wO2l4PGxlbjtpeCsrKSB7XG5cbiAgICAgICAgcGFyZW50aGVzaXNMZXZlbCA9IGlzU3VicXVlcnkoYXJbaXhdLCBwYXJlbnRoZXNpc0xldmVsKTtcblxuICAgICAgICBpZiggL1xcc3swLH1cXHN7MCx9U0VMRUNUXFxzezAsfS8uZXhlYyhhcltpeF0pKSAgeyBcbiAgICAgICAgICAgIGFyW2l4XSA9IGFyW2l4XS5yZXBsYWNlKC9cXCwvZyxcIixcXG5cIit0YWIrdGFiK1wiXCIpXG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYoIC9cXHN7MCx9XFwoXFxzezAsfVNFTEVDVFxcc3swLH0vLmV4ZWMoYXJbaXhdKSkgIHsgXG4gICAgICAgICAgICBkZWVwKys7XG4gICAgICAgICAgICBzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF07XG4gICAgICAgIH0gZWxzZSBcbiAgICAgICAgaWYoIC9cXCcvLmV4ZWMoYXJbaXhdKSApICB7IFxuICAgICAgICAgICAgaWYocGFyZW50aGVzaXNMZXZlbDwxICYmIGRlZXApIHtcbiAgICAgICAgICAgICAgICBkZWVwLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHIgKz0gYXJbaXhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgIHsgXG4gICAgICAgICAgICBzdHIgKz0gdGhpcy5zaGlmdFtkZWVwXSthcltpeF07XG4gICAgICAgICAgICBpZihwYXJlbnRoZXNpc0xldmVsPDEgJiYgZGVlcCkge1xuICAgICAgICAgICAgICAgIGRlZXAtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxcbnsxLH0vLCcnKS5yZXBsYWNlKC9cXG57MSx9L2csXCJcXG5cIik7XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWluIHNlY3Rpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wcC5wcm90b3R5cGUueG1sbWluID0gZnVuY3Rpb24odGV4dCwgcHJlc2VydmVDb21tZW50cykge1xuXG5cdHZhciBzdHIgPSBwcmVzZXJ2ZUNvbW1lbnRzID8gdGV4dFxuXHRcdFx0XHQgICA6IHRleHQucmVwbGFjZSgvXFw8IVsgXFxyXFxuXFx0XSooLS0oW15cXC1dfFtcXHJcXG5dfC1bXlxcLV0pKi0tWyBcXHJcXG5cXHRdKilcXD4vZyxcIlwiKTtcblx0cmV0dXJuICBzdHIucmVwbGFjZSgvPlxcc3swLH08L2csXCI+PFwiKTsgXG59XG5cbnBwLnByb3RvdHlwZS5qc29ubWluID0gZnVuY3Rpb24odGV4dCkge1xuXHRcdFx0XHRcdFx0XHRcdCAgXG4gICAgcmV0dXJuICB0ZXh0LnJlcGxhY2UoL1xcc3swLH1cXHtcXHN7MCx9L2csXCJ7XCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcc3swLH1cXFskL2csXCJbXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcW1xcc3swLH0vZyxcIltcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvOlxcc3swLH1cXFsvZywnOlsnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHN7MCx9XFx9XFxzezAsfS9nLFwifVwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHN7MCx9XFxdXFxzezAsfS9nLFwiXVwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiXFxzezAsfVxcLC9nLCdcIiwnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCxcXHN7MCx9XFxcIi9nLCcsXCInKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiXFxzezAsfTovZywnXCI6JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvOlxcc3swLH1cXFwiL2csJzpcIicpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLzpcXHN7MCx9XFxbL2csJzpbJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwsXFxzezAsfVxcWy9nLCcsWycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLFxcc3syLH0vZywnLCAnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXF1cXHN7MCx9LFxcc3swLH1cXFsvZywnXSxbJyk7ICAgXG59XG5cbnBwLnByb3RvdHlwZS5jc3NtaW4gPSBmdW5jdGlvbih0ZXh0LCBwcmVzZXJ2ZUNvbW1lbnRzKSB7XG5cdFxuXHR2YXIgc3RyID0gcHJlc2VydmVDb21tZW50cyA/IHRleHRcblx0XHRcdFx0ICAgOiB0ZXh0LnJlcGxhY2UoL1xcL1xcKihbXipdfFtcXHJcXG5dfChcXCorKFteKi9dfFtcXHJcXG5dKSkpKlxcKitcXC8vZyxcIlwiKSA7XG5cdHJldHVybiBzdHIucmVwbGFjZSgvXFxzezEsfS9nLCcgJylcblx0XHRcdCAgLnJlcGxhY2UoL1xce1xcc3sxLH0vZyxcIntcIilcblx0XHRcdCAgLnJlcGxhY2UoL1xcfVxcc3sxLH0vZyxcIn1cIilcblx0XHRcdCAgLnJlcGxhY2UoL1xcO1xcc3sxLH0vZyxcIjtcIilcblx0XHRcdCAgLnJlcGxhY2UoL1xcL1xcKlxcc3sxLH0vZyxcIi8qXCIpXG5cdFx0XHQgIC5yZXBsYWNlKC9cXCpcXC9cXHN7MSx9L2csXCIqL1wiKTtcbn1cdFxuXG5wcC5wcm90b3R5cGUuc3FsbWluID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xcc3sxLH0vZyxcIiBcIikucmVwbGFjZSgvXFxzezEsfVxcKC8sXCIoXCIpLnJlcGxhY2UoL1xcc3sxLH1cXCkvLFwiKVwiKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0cy5wZD0gbmV3IHBwO1x0XG5cblxuXG5cblxuXG5cblxuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBuZXh0VGljaztcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzcy5uZXh0VGljaztcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpXG4iLCIvLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgcHJvY2Vzc05leHRUaWNrID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbnZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHByb2Nlc3NOZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufSIsIi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW07XG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0JyArICdyZWFtJyk7XG4gIH0gY2F0Y2ggKF8pIHt9IGZpbmFsbHkge1xuICAgIGlmICghU3RyZWFtKSBTdHJlYW0gPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4gIH1cbn0pKCk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYnVmZmVyU2hpbSA9IHJlcXVpcmUoJ2J1ZmZlci1zaGltcycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAgIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAgIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gICAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bSB8fCBod20gPT09IDAgPyBod20gOiBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfiB+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHdoZW4gcGlwaW5nLCB3ZSBvbmx5IGNhcmUgYWJvdXQgJ3JlYWRhYmxlJyBldmVudHMgdGhhdCBoYXBwZW5cbiAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay5cbiAgdGhpcy5yYW5PdXQgPSBmYWxzZTtcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgIGNodW5rID0gYnVmZmVyU2hpbS5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICBlbmNvZGluZyA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssICcnLCB0cnVlKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkge1xuICB2YXIgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2UgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHN0YXRlLmVuZGVkICYmICFhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kRW1pdHRlZCAmJiBhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgX2UgPSBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50Jyk7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBfZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBza2lwQWRkO1xuICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWFkZFRvRnJvbnQgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgIHNraXBBZGQgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBjaHVuay5sZW5ndGggPT09IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICghYWRkVG9Gcm9udCkgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuXG4gICAgICAvLyBEb24ndCBhZGQgdG8gdGhlIGJ1ZmZlciBpZiB3ZSd2ZSBkZWNvZGVkIHRvIGFuIGVtcHR5IHN0cmluZyBjaHVuayBhbmRcbiAgICAgIC8vIHdlJ3JlIG5vdCBpbiBvYmplY3QgbW9kZVxuICAgICAgaWYgKCFza2lwQWRkKSB7XG4gICAgICAgIC8vIGlmIHdlIHdhbnQgdGhlIGRhdGEgbm93LCBqdXN0IGVtaXQgaXQuXG4gICAgICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgICAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgICAgICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICAgICAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyID0gbnVsbDtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwcm9jZXNzTmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHByb2Nlc3NOZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IGNsZWFudXA7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwcm9jZXNzTmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcHJvY2Vzc05leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMsIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgc2VsZi5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBzZWxmLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIHZhciBldmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG4gIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXYpIHtcbiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG4gIH0pO1xuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHNlbGYuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IGJ1ZmZlclNoaW0uYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwiLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdGF0ZShzdHJlYW0pIHtcbiAgdGhpcy5hZnRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgIHJldHVybiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKTtcbiAgfTtcblxuICB0aGlzLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgdGhpcy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcbiAgdGhpcy53cml0ZWNodW5rID0gbnVsbDtcbiAgdGhpcy53cml0ZWVuY29kaW5nID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSkge1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQpIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IG5ldyBUcmFuc2Zvcm1TdGF0ZSh0aGlzKTtcblxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uY2UoJ3ByZWZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoc3RyZWFtLCBlciwgZGF0YSk7XG4gICAgfSk7ZWxzZSBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHRzLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwcm9jZXNzTmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbTtcbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgU3RyZWFtID0gcmVxdWlyZSgnc3QnICsgJ3JlYW0nKTtcbiAgfSBjYXRjaCAoXykge30gZmluYWxseSB7XG4gICAgaWYgKCFTdHJlYW0pIFN0cmVhbSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiAgfVxufSkoKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBidWZmZXJTaGltID0gcmVxdWlyZSgnYnVmZmVyLXNoaW1zJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyaztcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwcm9jZXNzTmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gSWYgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQsXG4vLyBhbmQgd2UncmUgbm90IGluIG9iamVjdE1vZGUsIHRoZW4gdGhhdCdzIGFuIGVycm9yLlxuLy8gT3RoZXJ3aXNlIHN0cmVhbSBjaHVua3MgYXJlIGFsbCBjb25zaWRlcmVkIHRvIGJlIG9mIGxlbmd0aD0xLCBhbmQgdGhlXG4vLyB3YXRlcm1hcmtzIGRldGVybWluZSBob3cgbWFueSBvYmplY3RzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlciwgcmF0aGVyIHRoYW5cbi8vIGhvdyBtYW55IGJ5dGVzIG9yIGNoYXJhY3RlcnMuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcbiAgLy8gQWx3YXlzIHRocm93IGVycm9yIGlmIGEgbnVsbCBpcyB3cml0dGVuXG4gIC8vIGlmIHdlIGFyZSBub3QgaW4gb2JqZWN0IG1vZGUgdGhlbiB0aHJvd1xuICAvLyBpZiBpdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgb3IgdW5kZWZpbmVkLlxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IGJ1ZmZlclNoaW0uZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInO1xuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbmV3IFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG4gIGlmIChzeW5jKSBwcm9jZXNzTmV4dFRpY2soY2IsIGVyKTtlbHNlIGNiKGVyKTtcblxuICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQpIHtcbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3NOZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIGVudHJ5ID0gX3RoaXMuZW50cnk7XG4gICAgX3RoaXMuZW50cnkgPSBudWxsO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICAgIGNiKGVycik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gX3RoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IF90aGlzO1xuICAgIH1cbiAgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGJ1ZmZlclNoaW0gPSByZXF1aXJlKCdidWZmZXItc2hpbXMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlckxpc3Q7XG5cbmZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gIHRoaXMuaGVhZCA9IG51bGw7XG4gIHRoaXMudGFpbCA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcbn1cblxuQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gIHRoaXMudGFpbCA9IGVudHJ5O1xuICArK3RoaXMubGVuZ3RoO1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gIHRoaXMuaGVhZCA9IGVudHJ5O1xuICArK3RoaXMubGVuZ3RoO1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAtLXRoaXMubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gIHRoaXMubGVuZ3RoID0gMDtcbn07XG5cbkJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiAocykge1xuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgfXJldHVybiByZXQ7XG59O1xuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAobikge1xuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBidWZmZXJTaGltLmFsbG9jKDApO1xuICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgdmFyIHJldCA9IGJ1ZmZlclNoaW0uYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gIHZhciBwID0gdGhpcy5oZWFkO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChwKSB7XG4gICAgcC5kYXRhLmNvcHkocmV0LCBpKTtcbiAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgcCA9IHAubmV4dDtcbiAgfVxuICByZXR1cm4gcmV0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzXCIpXG4iLCJ2YXIgU3RyZWFtID0gKGZ1bmN0aW9uICgpe1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlKCdzdCcgKyAncmVhbScpOyAvLyBoYWNrIHRvIGZpeCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWUgd2hlbiB1c2VkIHdpdGggYnJvd3NlcmlmeVxuICB9IGNhdGNoKF8pe31cbn0oKSk7XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IFN0cmVhbSB8fCBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcblxuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScgJiYgU3RyZWFtKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanNcIilcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fd3JpdGFibGUuanNcIilcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwidmFyIENsaWVudFJlcXVlc3QgPSByZXF1aXJlKCcuL2xpYi9yZXF1ZXN0JylcbnZhciBleHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgc3RhdHVzQ29kZXMgPSByZXF1aXJlKCdidWlsdGluLXN0YXR1cy1jb2RlcycpXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxudmFyIGh0dHAgPSBleHBvcnRzXG5cbmh0dHAucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzLCBjYikge1xuXHRpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKVxuXHRcdG9wdHMgPSB1cmwucGFyc2Uob3B0cylcblx0ZWxzZVxuXHRcdG9wdHMgPSBleHRlbmQob3B0cylcblxuXHR2YXIgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sIHx8ICcnXG5cdHZhciBob3N0ID0gb3B0cy5ob3N0bmFtZSB8fCBvcHRzLmhvc3Rcblx0dmFyIHBvcnQgPSBvcHRzLnBvcnRcblx0dmFyIHBhdGggPSBvcHRzLnBhdGggfHwgJy8nXG5cblx0Ly8gTmVjZXNzYXJ5IGZvciBJUHY2IGFkZHJlc3Nlc1xuXHRpZiAoaG9zdCAmJiBob3N0LmluZGV4T2YoJzonKSAhPT0gLTEpXG5cdFx0aG9zdCA9ICdbJyArIGhvc3QgKyAnXSdcblxuXHQvLyBUaGlzIG1heSBiZSBhIHJlbGF0aXZlIHVybC4gVGhlIGJyb3dzZXIgc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGludGVycHJldCBpdCBjb3JyZWN0bHkuXG5cdG9wdHMudXJsID0gKGhvc3QgPyAocHJvdG9jb2wgKyAnLy8nICsgaG9zdCkgOiAnJykgKyAocG9ydCA/ICc6JyArIHBvcnQgOiAnJykgKyBwYXRoXG5cdG9wdHMubWV0aG9kID0gKG9wdHMubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpXG5cdG9wdHMuaGVhZGVycyA9IG9wdHMuaGVhZGVycyB8fCB7fVxuXG5cdC8vIEFsc28gdmFsaWQgb3B0cy5hdXRoLCBvcHRzLm1vZGVcblxuXHR2YXIgcmVxID0gbmV3IENsaWVudFJlcXVlc3Qob3B0cylcblx0aWYgKGNiKVxuXHRcdHJlcS5vbigncmVzcG9uc2UnLCBjYilcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLmdldCA9IGZ1bmN0aW9uIGdldCAob3B0cywgY2IpIHtcblx0dmFyIHJlcSA9IGh0dHAucmVxdWVzdChvcHRzLCBjYilcblx0cmVxLmVuZCgpXG5cdHJldHVybiByZXFcbn1cblxuaHR0cC5BZ2VudCA9IGZ1bmN0aW9uICgpIHt9XG5odHRwLkFnZW50LmRlZmF1bHRNYXhTb2NrZXRzID0gNFxuXG5odHRwLlNUQVRVU19DT0RFUyA9IHN0YXR1c0NvZGVzXG5cbmh0dHAuTUVUSE9EUyA9IFtcblx0J0NIRUNLT1VUJyxcblx0J0NPTk5FQ1QnLFxuXHQnQ09QWScsXG5cdCdERUxFVEUnLFxuXHQnR0VUJyxcblx0J0hFQUQnLFxuXHQnTE9DSycsXG5cdCdNLVNFQVJDSCcsXG5cdCdNRVJHRScsXG5cdCdNS0FDVElWSVRZJyxcblx0J01LQ09MJyxcblx0J01PVkUnLFxuXHQnTk9USUZZJyxcblx0J09QVElPTlMnLFxuXHQnUEFUQ0gnLFxuXHQnUE9TVCcsXG5cdCdQUk9QRklORCcsXG5cdCdQUk9QUEFUQ0gnLFxuXHQnUFVSR0UnLFxuXHQnUFVUJyxcblx0J1JFUE9SVCcsXG5cdCdTRUFSQ0gnLFxuXHQnU1VCU0NSSUJFJyxcblx0J1RSQUNFJyxcblx0J1VOTE9DSycsXG5cdCdVTlNVQlNDUklCRSdcbl0iLCJleHBvcnRzLmZldGNoID0gaXNGdW5jdGlvbihnbG9iYWwuZmV0Y2gpICYmIGlzRnVuY3Rpb24oZ2xvYmFsLlJlYWRhYmxlQnl0ZVN0cmVhbSlcblxuZXhwb3J0cy5ibG9iQ29uc3RydWN0b3IgPSBmYWxzZVxudHJ5IHtcblx0bmV3IEJsb2IoW25ldyBBcnJheUJ1ZmZlcigxKV0pXG5cdGV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gdHJ1ZVxufSBjYXRjaCAoZSkge31cblxudmFyIHhociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuLy8gSWYgbG9jYXRpb24uaG9zdCBpcyBlbXB0eSwgZS5nLiBpZiB0aGlzIHBhZ2Uvd29ya2VyIHdhcyBsb2FkZWRcbi8vIGZyb20gYSBCbG9iLCB0aGVuIHVzZSBleGFtcGxlLmNvbSB0byBhdm9pZCBhbiBlcnJvclxueGhyLm9wZW4oJ0dFVCcsIGdsb2JhbC5sb2NhdGlvbi5ob3N0ID8gJy8nIDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nKVxuXG5mdW5jdGlvbiBjaGVja1R5cGVTdXBwb3J0ICh0eXBlKSB7XG5cdHRyeSB7XG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHR5cGVcblx0XHRyZXR1cm4geGhyLnJlc3BvbnNlVHlwZSA9PT0gdHlwZVxuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2Vcbn1cblxuLy8gRm9yIHNvbWUgc3RyYW5nZSByZWFzb24sIFNhZmFyaSA3LjAgcmVwb3J0cyB0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyID09PSAnb2JqZWN0Jy5cbi8vIFNhZmFyaSA3LjEgYXBwZWFycyB0byBoYXZlIGZpeGVkIHRoaXMgYnVnLlxudmFyIGhhdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnXG52YXIgaGF2ZVNsaWNlID0gaGF2ZUFycmF5QnVmZmVyICYmIGlzRnVuY3Rpb24oZ2xvYmFsLkFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSlcblxuZXhwb3J0cy5hcnJheWJ1ZmZlciA9IGhhdmVBcnJheUJ1ZmZlciAmJiBjaGVja1R5cGVTdXBwb3J0KCdhcnJheWJ1ZmZlcicpXG4vLyBUaGVzZSBuZXh0IHR3byB0ZXN0cyB1bmF2b2lkYWJseSBzaG93IHdhcm5pbmdzIGluIENocm9tZS4gU2luY2UgZmV0Y2ggd2lsbCBhbHdheXNcbi8vIGJlIHVzZWQgaWYgaXQncyBhdmFpbGFibGUsIGp1c3QgcmV0dXJuIGZhbHNlIGZvciB0aGVzZSB0byBhdm9pZCB0aGUgd2FybmluZ3MuXG5leHBvcnRzLm1zc3RyZWFtID0gIWV4cG9ydHMuZmV0Y2ggJiYgaGF2ZVNsaWNlICYmIGNoZWNrVHlwZVN1cHBvcnQoJ21zLXN0cmVhbScpXG5leHBvcnRzLm1vemNodW5rZWRhcnJheWJ1ZmZlciA9ICFleHBvcnRzLmZldGNoICYmIGhhdmVBcnJheUJ1ZmZlciAmJlxuXHRjaGVja1R5cGVTdXBwb3J0KCdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpXG5leHBvcnRzLm92ZXJyaWRlTWltZVR5cGUgPSBpc0Z1bmN0aW9uKHhoci5vdmVycmlkZU1pbWVUeXBlKVxuZXhwb3J0cy52YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG54aHIgPSBudWxsIC8vIEhlbHAgZ2NcbiIsIi8vIHZhciBCYXNlNjQgPSByZXF1aXJlKCdCYXNlNjQnKVxudmFyIGNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL2NhcGFiaWxpdHknKVxudmFyIGZvcmVhY2ggPSByZXF1aXJlKCdmb3JlYWNoJylcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJylcbnZhciByZXNwb25zZSA9IHJlcXVpcmUoJy4vcmVzcG9uc2UnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG5cbnZhciBJbmNvbWluZ01lc3NhZ2UgPSByZXNwb25zZS5JbmNvbWluZ01lc3NhZ2VcbnZhciByU3RhdGVzID0gcmVzcG9uc2UucmVhZHlTdGF0ZXNcblxuZnVuY3Rpb24gZGVjaWRlTW9kZSAocHJlZmVyQmluYXJ5KSB7XG5cdGlmIChjYXBhYmlsaXR5LmZldGNoKSB7XG5cdFx0cmV0dXJuICdmZXRjaCdcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1vemNodW5rZWRhcnJheWJ1ZmZlcikge1xuXHRcdHJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5tc3N0cmVhbSkge1xuXHRcdHJldHVybiAnbXMtc3RyZWFtJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICdhcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5LnZiQXJyYXkgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICd0ZXh0OnZiYXJyYXknXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICd0ZXh0J1xuXHR9XG59XG5cbnZhciBDbGllbnRSZXF1ZXN0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c3RyZWFtLldyaXRhYmxlLmNhbGwoc2VsZilcblxuXHRzZWxmLl9vcHRzID0gb3B0c1xuXHRzZWxmLl9ib2R5ID0gW11cblx0c2VsZi5faGVhZGVycyA9IHt9XG5cdGlmIChvcHRzLmF1dGgpXG5cdFx0c2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIG5ldyBCdWZmZXIob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0JykpXG5cdGZvcmVhY2goa2V5cyhvcHRzLmhlYWRlcnMpLCBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHNlbGYuc2V0SGVhZGVyKG5hbWUsIG9wdHMuaGVhZGVyc1tuYW1lXSlcblx0fSlcblxuXHR2YXIgcHJlZmVyQmluYXJ5XG5cdGlmIChvcHRzLm1vZGUgPT09ICdwcmVmZXItc3RyZWFtaW5nJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZFxuXHRcdC8vIHRoZSBhY2N1cmFjeSBvZiB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyIGFyZW4ndFxuXHRcdHByZWZlckJpbmFyeSA9IGZhbHNlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAnYWxsb3ctd3JvbmctY29udGVudC10eXBlJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBtb3JlIGltcG9ydGFudCB0aGFuIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuXHRcdHByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGVcblx0fSBlbHNlIGlmICghb3B0cy5tb2RlIHx8IG9wdHMubW9kZSA9PT0gJ2RlZmF1bHQnIHx8IG9wdHMubW9kZSA9PT0gJ3ByZWZlci1mYXN0Jykge1xuXHRcdC8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkXG5cdFx0cHJlZmVyQmluYXJ5ID0gdHJ1ZVxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlJylcblx0fVxuXHRzZWxmLl9tb2RlID0gZGVjaWRlTW9kZShwcmVmZXJCaW5hcnkpXG5cblx0c2VsZi5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xuXHRcdHNlbGYuX29uRmluaXNoKClcblx0fSlcbn1cblxuaW5oZXJpdHMoQ2xpZW50UmVxdWVzdCwgc3RyZWFtLldyaXRhYmxlKVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHZhciBsb3dlck5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKClcblx0Ly8gVGhpcyBjaGVjayBpcyBub3QgbmVjZXNzYXJ5LCBidXQgaXQgcHJldmVudHMgd2FybmluZ3MgZnJvbSBicm93c2VycyBhYm91dCBzZXR0aW5nIHVuc2FmZVxuXHQvLyBoZWFkZXJzLiBUbyBiZSBob25lc3QgSSdtIG5vdCBlbnRpcmVseSBzdXJlIGhpZGluZyB0aGVzZSB3YXJuaW5ncyBpcyBhIGdvb2QgdGhpbmcsIGJ1dFxuXHQvLyBodHRwLWJyb3dzZXJpZnkgZGlkIGl0LCBzbyBJIHdpbGwgdG9vLlxuXHRpZiAoaW5kZXhPZih1bnNhZmVIZWFkZXJzLCBsb3dlck5hbWUpICE9PSAtMSlcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG5cdFx0bmFtZTogbmFtZSxcblx0XHR2YWx1ZTogdmFsdWVcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0cmV0dXJuIHNlbGYuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXS52YWx1ZVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0ZGVsZXRlIHNlbGYuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25GaW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cdHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG5cdHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuXHR2YXIgYm9keVxuXHRpZiAob3B0cy5tZXRob2QgPT09ICdQT1NUJyB8fCBvcHRzLm1ldGhvZCA9PT0gJ1BVVCcpIHtcblx0XHRpZiAoY2FwYWJpbGl0eS5ibG9iQ29uc3RydWN0b3IpIHtcblx0XHRcdGJvZHkgPSBuZXcgZ2xvYmFsLkJsb2Ioc2VsZi5fYm9keS5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0XHRyZXR1cm4gYnVmZmVyLnRvQXJyYXlCdWZmZXIoKVxuXHRcdFx0fSksIHtcblx0XHRcdFx0dHlwZTogKGhlYWRlcnNPYmpbJ2NvbnRlbnQtdHlwZSddIHx8IHt9KS52YWx1ZSB8fCAnJ1xuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gZ2V0IHV0Zjggc3RyaW5nXG5cdFx0XHRib2R5ID0gQnVmZmVyLmNvbmNhdChzZWxmLl9ib2R5KS50b1N0cmluZygpXG5cdFx0fVxuXHR9XG5cblx0aWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHtcblx0XHR2YXIgaGVhZGVycyA9IGtleXMoaGVhZGVyc09iaikubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRyZXR1cm4gW2hlYWRlcnNPYmpbbmFtZV0ubmFtZSwgaGVhZGVyc09ialtuYW1lXS52YWx1ZV1cblx0XHR9KVxuXG5cdFx0Z2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG5cdFx0XHRtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuXHRcdFx0aGVhZGVyczogaGVhZGVycyxcblx0XHRcdGJvZHk6IGJvZHksXG5cdFx0XHRtb2RlOiAnY29ycycsXG5cdFx0XHRjcmVkZW50aWFsczogb3B0cy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nXG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdHNlbGYuX2ZldGNoUmVzcG9uc2UgPSByZXNwb25zZVxuXHRcdFx0c2VsZi5fY29ubmVjdCgpXG5cdFx0fSkudGhlbih1bmRlZmluZWQsIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCByZWFzb24pXG5cdFx0fSlcblx0fSBlbHNlIHtcblx0XHR2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKHNlbGYuX29wdHMubWV0aG9kLCBzZWxmLl9vcHRzLnVybCwgdHJ1ZSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdC8vIENhbid0IHNldCByZXNwb25zZVR5cGUgb24gcmVhbGx5IG9sZCBicm93c2Vyc1xuXHRcdGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpXG5cdFx0XHR4aHIucmVzcG9uc2VUeXBlID0gc2VsZi5fbW9kZS5zcGxpdCgnOicpWzBdXG5cblx0XHRpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKVxuXHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHNcblxuXHRcdGlmIChzZWxmLl9tb2RlID09PSAndGV4dCcgJiYgJ292ZXJyaWRlTWltZVR5cGUnIGluIHhocilcblx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJylcblxuXHRcdGZvcmVhY2goa2V5cyhoZWFkZXJzT2JqKSwgZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlcnNPYmpbbmFtZV0ubmFtZSwgaGVhZGVyc09ialtuYW1lXS52YWx1ZSlcblx0XHR9KVxuXG5cdFx0c2VsZi5fcmVzcG9uc2UgPSBudWxsXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkxPQURJTkc6XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5ET05FOlxuXHRcdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcblx0XHQvLyBpbiBvbnByb2dyZXNzLCBub3QgaW4gb25yZWFkeXN0YXRlY2hhbmdlIHdpdGggeGhyLnJlYWR5U3RhdGUgPSAzXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpIHtcblx0XHRcdHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdH1cblx0XHR9XG5cblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5zZW5kKGJvZHkpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgeGhyLnN0YXR1cyBpcyByZWFkYWJsZS4gRXZlbiB0aG91Z2ggdGhlIHNwZWMgc2F5cyBpdCBzaG91bGRcbiAqIGJlIGF2YWlsYWJsZSBpbiByZWFkeVN0YXRlIDMsIGFjY2Vzc2luZyBpdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGluIElFOFxuICovXG5mdW5jdGlvbiBzdGF0dXNWYWxpZCAoeGhyKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICh4aHIuc3RhdHVzICE9PSBudWxsKVxuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmICghc3RhdHVzVmFsaWQoc2VsZi5feGhyKSB8fCBzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cblx0aWYgKCFzZWxmLl9yZXNwb25zZSlcblx0XHRzZWxmLl9jb25uZWN0KClcblxuXHRzZWxmLl9yZXNwb25zZS5fb25YSFJQcm9ncmVzcygpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdHNlbGYuX3Jlc3BvbnNlID0gbmV3IEluY29taW5nTWVzc2FnZShzZWxmLl94aHIsIHNlbGYuX2ZldGNoUmVzcG9uc2UsIHNlbGYuX21vZGUpXG5cdHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0c2VsZi5fYm9keS5wdXNoKGNodW5rKVxuXHRjYigpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHNlbGYuX2Rlc3Ryb3llZCA9IHRydWVcblx0aWYgKHNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX3Jlc3BvbnNlLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGlmIChzZWxmLl94aHIpXG5cdFx0c2VsZi5feGhyLmFib3J0KClcblx0Ly8gQ3VycmVudGx5LCB0aGVyZSBpc24ndCBhIHdheSB0byB0cnVseSBhYm9ydCBhIGZldGNoLlxuXHQvLyBJZiB5b3UgbGlrZSBiaWtlc2hlZGRpbmcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2ZldGNoL2lzc3Vlcy8yN1xufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcblx0XHRjYiA9IGRhdGFcblx0XHRkYXRhID0gdW5kZWZpbmVkXG5cdH1cblxuXHRzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0Tm9EZWxheSA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbiAoKSB7fVxuXG4vLyBUYWtlbiBmcm9tIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtc2V0cmVxdWVzdGhlYWRlciUyOCUyOS1tZXRob2RcbnZhciB1bnNhZmVIZWFkZXJzID0gW1xuXHQnYWNjZXB0LWNoYXJzZXQnLFxuXHQnYWNjZXB0LWVuY29kaW5nJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCcsXG5cdCdjb25uZWN0aW9uJyxcblx0J2NvbnRlbnQtbGVuZ3RoJyxcblx0J2Nvb2tpZScsXG5cdCdjb29raWUyJyxcblx0J2RhdGUnLFxuXHQnZG50Jyxcblx0J2V4cGVjdCcsXG5cdCdob3N0Jyxcblx0J2tlZXAtYWxpdmUnLFxuXHQnb3JpZ2luJyxcblx0J3JlZmVyZXInLFxuXHQndGUnLFxuXHQndHJhaWxlcicsXG5cdCd0cmFuc2Zlci1lbmNvZGluZycsXG5cdCd1cGdyYWRlJyxcblx0J3VzZXItYWdlbnQnLFxuXHQndmlhJ1xuXVxuIiwidmFyIGNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL2NhcGFiaWxpdHknKVxudmFyIGZvcmVhY2ggPSByZXF1aXJlKCdmb3JlYWNoJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuXG52YXIgclN0YXRlcyA9IGV4cG9ydHMucmVhZHlTdGF0ZXMgPSB7XG5cdFVOU0VOVDogMCxcblx0T1BFTkVEOiAxLFxuXHRIRUFERVJTX1JFQ0VJVkVEOiAyLFxuXHRMT0FESU5HOiAzLFxuXHRET05FOiA0XG59XG5cbnZhciBJbmNvbWluZ01lc3NhZ2UgPSBleHBvcnRzLkluY29taW5nTWVzc2FnZSA9IGZ1bmN0aW9uICh4aHIsIHJlc3BvbnNlLCBtb2RlKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uUmVhZGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX21vZGUgPSBtb2RlXG5cdHNlbGYuaGVhZGVycyA9IHt9XG5cdHNlbGYucmF3SGVhZGVycyA9IFtdXG5cdHNlbGYudHJhaWxlcnMgPSB7fVxuXHRzZWxmLnJhd1RyYWlsZXJzID0gW11cblxuXHQvLyBGYWtlIHRoZSAnY2xvc2UnIGV2ZW50LCBidXQgb25seSBvbmNlICdlbmQnIGZpcmVzXG5cdHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBUaGUgbmV4dFRpY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgdGhlICdyZXF1ZXN0JyBtb2R1bGUgZnJvbSBjYXVzaW5nIGFuIGluZmluaXRlIGxvb3Bcblx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZW1pdCgnY2xvc2UnKVxuXHRcdH0pXG5cdH0pXG5cblx0aWYgKG1vZGUgPT09ICdmZXRjaCcpIHtcblx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2VcblxuXHRcdHNlbGYuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c1xuXHRcdHNlbGYuc3RhdHVzTWVzc2FnZSA9IHJlc3BvbnNlLnN0YXR1c1RleHRcblx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJsZSB2ZXJzaW9uIG9mIGZvciAoPGl0ZW0+IG9mIDxpdGVyYWJsZT4pOlxuXHRcdC8vIGZvciAodmFyIDxpdGVtPixfaSxfaXQgPSA8aXRlcmFibGU+W1N5bWJvbC5pdGVyYXRvcl0oKTsgPGl0ZW0+ID0gKF9pID0gX2l0Lm5leHQoKSkudmFsdWUsIV9pLmRvbmU7KVxuXHRcdGZvciAodmFyIGhlYWRlciwgX2ksIF9pdCA9IHJlc3BvbnNlLmhlYWRlcnNbU3ltYm9sLml0ZXJhdG9yXSgpOyBoZWFkZXIgPSAoX2kgPSBfaXQubmV4dCgpKS52YWx1ZSwgIV9pLmRvbmU7KSB7XG5cdFx0XHRzZWxmLmhlYWRlcnNbaGVhZGVyWzBdLnRvTG93ZXJDYXNlKCldID0gaGVhZGVyWzFdXG5cdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChoZWFkZXJbMF0sIGhlYWRlclsxXSlcblx0XHR9XG5cblx0XHQvLyBUT0RPOiB0aGlzIGRvZXNuJ3QgcmVzcGVjdCBiYWNrcHJlc3N1cmUuIE9uY2UgV3JpdGFibGVTdHJlYW0gaXMgYXZhaWxhYmxlLCB0aGlzIGNhbiBiZSBmaXhlZFxuXHRcdHZhciByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpXG5cdFx0ZnVuY3Rpb24gcmVhZCAoKSB7XG5cdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRpZiAocmVzdWx0LmRvbmUpIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKVxuXHRcdFx0XHRyZWFkKClcblx0XHRcdH0pXG5cdFx0fVxuXHRcdHJlYWQoKVxuXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi5zdGF0dXNDb2RlID0geGhyLnN0YXR1c1xuXHRcdHNlbGYuc3RhdHVzTWVzc2FnZSA9IHhoci5zdGF0dXNUZXh0XG5cdFx0dmFyIGhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoL1xccj9cXG4vKVxuXHRcdGZvcmVhY2goaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlcikge1xuXHRcdFx0dmFyIG1hdGNoZXMgPSBoZWFkZXIubWF0Y2goL14oW146XSspOlxccyooLiopLylcblx0XHRcdGlmIChtYXRjaGVzKSB7XG5cdFx0XHRcdHZhciBrZXkgPSBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0aWYgKHNlbGYuaGVhZGVyc1trZXldICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldID0gbWF0Y2hlc1syXVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHt9XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciB4aHIgPSBzZWxmLl94aHJcblxuXHR2YXIgcmVzcG9uc2UgPSBudWxsXG5cdHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuXHRcdGNhc2UgJ3RleHQ6dmJhcnJheSc6IC8vIEZvciBJRTlcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gVGhpcyBmYWlscyBpbiBJRThcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgZ2xvYmFsLlZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpXG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0aWYgKHJlc3BvbnNlICE9PSBudWxsKSB7XG5cdFx0XHRcdHNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHRcdC8vIEZhbGxzIHRocm91Z2ggaW4gSUU4XHRcblx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdHRyeSB7IC8vIFRoaXMgd2lsbCBmYWlsIHdoZW4gcmVhZHlTdGF0ZSA9IDMgaW4gSUU5LiBTd2l0Y2ggbW9kZSBhbmQgd2FpdCBmb3IgcmVhZHlTdGF0ZSA9IDRcblx0XHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHR2YXIgbmV3RGF0YSA9IHJlc3BvbnNlLnN1YnN0cihzZWxmLl9wb3MpXG5cdFx0XHRcdGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobmV3RGF0YS5sZW5ndGgpXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG5cdFx0XHRcdFx0c2VsZi5wdXNoKGJ1ZmZlcilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGhcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVxuXHRcdFx0c2VsZi5wdXNoKG5ldyBCdWZmZXIobmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UpKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInOiAvLyB0YWtlIHdob2xlXG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkxPQURJTkcgfHwgIXJlc3BvbnNlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0c2VsZi5wdXNoKG5ldyBCdWZmZXIobmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UpKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnbXMtc3RyZWFtJzpcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORylcblx0XHRcdFx0YnJlYWtcblx0XHRcdHZhciByZWFkZXIgPSBuZXcgZ2xvYmFsLk1TU3RyZWFtUmVhZGVyKClcblx0XHRcdHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAocmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoID4gc2VsZi5fcG9zKSB7XG5cdFx0XHRcdFx0c2VsZi5wdXNoKG5ldyBCdWZmZXIobmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdC5zbGljZShzZWxmLl9wb3MpKSkpXG5cdFx0XHRcdFx0c2VsZi5fcG9zID0gcmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYucHVzaChudWxsKVxuXHRcdFx0fVxuXHRcdFx0Ly8gcmVhZGVyLm9uZXJyb3IgPSA/Pz8gLy8gVE9ETzogdGhpc1xuXHRcdFx0cmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJlc3BvbnNlKVxuXHRcdFx0YnJlYWtcblx0fVxuXG5cdC8vIFRoZSBtcy1zdHJlYW0gY2FzZSBoYW5kbGVzIGVuZCBzZXBhcmF0ZWx5IGluIHJlYWRlci5vbmxvYWQoKVxuXHRpZiAoc2VsZi5feGhyLnJlYWR5U3RhdGUgPT09IHJTdGF0ZXMuRE9ORSAmJiBzZWxmLl9tb2RlICE9PSAnbXMtc3RyZWFtJykge1xuXHRcdHNlbGYucHVzaChudWxsKVxuXHR9XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGlzQnVmZmVyRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZ1xuICB8fCBmdW5jdGlvbihlbmNvZGluZykge1xuICAgICAgIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgY2FzZSAnaGV4JzogY2FzZSAndXRmOCc6IGNhc2UgJ3V0Zi04JzogY2FzZSAnYXNjaWknOiBjYXNlICdiaW5hcnknOiBjYXNlICdiYXNlNjQnOiBjYXNlICd1Y3MyJzogY2FzZSAndWNzLTInOiBjYXNlICd1dGYxNmxlJzogY2FzZSAndXRmLTE2bGUnOiBjYXNlICdyYXcnOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICB9XG4gICAgIH1cblxuXG5mdW5jdGlvbiBhc3NlcnRFbmNvZGluZyhlbmNvZGluZykge1xuICBpZiAoZW5jb2RpbmcgJiYgIWlzQnVmZmVyRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB9XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuXG4vL1xuLy8gQFRPRE8gSGFuZGxpbmcgYWxsIGVuY29kaW5ncyBpbnNpZGUgYSBzaW5nbGUgb2JqZWN0IG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0XG4vLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS5cbi8vIEBUT0RPIFRoZXJlIHNob3VsZCBiZSBhIHV0Zjgtc3RyaWN0IGVuY29kaW5nIHRoYXQgcmVqZWN0cyBpbnZhbGlkIFVURi04IGNvZGVcbi8vIHBvaW50cyBhcyB1c2VkIGJ5IENFU1UtOC5cbnZhciBTdHJpbmdEZWNvZGVyID0gZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IChlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sICcnKTtcbiAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgLy8gVVRGLTE2IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAyLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLlxuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVub3VnaCBzcGFjZSB0byBzdG9yZSBhbGwgYnl0ZXMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLiBVVEYtOCBuZWVkcyA0XG4gIC8vIGJ5dGVzLCBidXQgQ0VTVS04IG1heSByZXF1aXJlIHVwIHRvIDYgKDMgYnl0ZXMgcGVyIHN1cnJvZ2F0ZSkuXG4gIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7XG4gIC8vIE51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSAwO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhckxlbmd0aCA9IDA7XG59O1xuXG5cbi8vIHdyaXRlIGRlY29kZXMgdGhlIGdpdmVuIGJ1ZmZlciBhbmQgcmV0dXJucyBpdCBhcyBKUyBzdHJpbmcgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZVxuLy8gcmV0dXJuZWQgd2hlbiBjYWxsaW5nIHdyaXRlIGFnYWluIHdpdGggdGhlIHJlbWFpbmluZyBieXRlcy5cbi8vXG4vLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZ1xuLy8gY3VycmVudGx5IHdvcmtzLCBidXQgY29udmVydGluZyBhIFN0cmluZyB0byBhIEJ1ZmZlciAodmlhIGBuZXcgQnVmZmVyYCwgb3Jcbi8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlXG4vLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIGNoYXJTdHIgPSAnJztcbiAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXJcbiAgd2hpbGUgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXJcbiAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID9cbiAgICAgICAgdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQgOlxuICAgICAgICBidWZmZXIubGVuZ3RoO1xuXG4gICAgLy8gYWRkIHRoZSBuZXcgYnl0ZXMgdG8gdGhlIGNoYXIgYnVmZmVyXG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCB0aGlzLmNoYXJSZWNlaXZlZCwgMCwgYXZhaWxhYmxlKTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBhdmFpbGFibGU7XG5cbiAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQgPCB0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGJ5dGVzIGJlbG9uZ2luZyB0byB0aGUgY3VycmVudCBjaGFyYWN0ZXIgZnJvbSB0aGUgYnVmZmVyXG4gICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7XG5cbiAgICAvLyBnZXQgdGhlIGNoYXJhY3RlciB0aGF0IHdhcyBzcGxpdFxuICAgIGNoYXJTdHIgPSB0aGlzLmNoYXJCdWZmZXIuc2xpY2UoMCwgdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoY2hhclN0ci5sZW5ndGggLSAxKTtcbiAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoICs9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICAgIGNoYXJTdHIgPSAnJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IHRoaXMuY2hhckxlbmd0aCA9IDA7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBpbiB0aGlzIGJ1ZmZlciwganVzdCBlbWl0IG91ciBjaGFyXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjaGFyU3RyO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuXG4gIC8vIGRldGVybWluZSBhbmQgc2V0IGNoYXJMZW5ndGggLyBjaGFyUmVjZWl2ZWRcbiAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpO1xuXG4gIHZhciBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gYnVmZmVyIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlciBieXRlcyB3ZSBnb3RcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCwgZW5kKTtcbiAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gIH1cblxuICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpO1xuXG4gIHZhciBlbmQgPSBjaGFyU3RyLmxlbmd0aCAtIDE7XG4gIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChlbmQpO1xuICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgdGhpcy5jaGFyTGVuZ3RoICs9IHNpemU7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJCdWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHNpemUsIDAsIHNpemUpO1xuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgMCwgc2l6ZSk7XG4gICAgcmV0dXJuIGNoYXJTdHIuc3Vic3RyaW5nKDAsIGVuZCk7XG4gIH1cblxuICAvLyBvciBqdXN0IGVtaXQgdGhlIGNoYXJTdHJcbiAgcmV0dXJuIGNoYXJTdHI7XG59O1xuXG4vLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0XG4vLyB0aGUgZW5kIG9mIHRoZSBnaXZlbiBidWZmZXIuIElmIHNvLCBpdCBzZXRzIHRoaXMuY2hhckxlbmd0aCB0byB0aGUgYnl0ZVxuLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4vLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlclxuICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7XG5cbiAgLy8gRmlndXJlIG91dCBpZiBvbmUgb2YgdGhlIGxhc3QgaSBieXRlcyBvZiBvdXIgYnVmZmVyIGFubm91bmNlcyBhblxuICAvLyBpbmNvbXBsZXRlIGNoYXIuXG4gIGZvciAoOyBpID4gMDsgaS0tKSB7XG4gICAgdmFyIGMgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIGldO1xuXG4gICAgLy8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTgjRGVzY3JpcHRpb25cblxuICAgIC8vIDExMFhYWFhYXG4gICAgaWYgKGkgPT0gMSAmJiBjID4+IDUgPT0gMHgwNikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTBYWFhYXG4gICAgaWYgKGkgPD0gMiAmJiBjID4+IDQgPT0gMHgwRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTEwWFhYXG4gICAgaWYgKGkgPD0gMyAmJiBjID4+IDMgPT0gMHgxRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpXG4gICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpO1xuXG4gIGlmICh0aGlzLmNoYXJSZWNlaXZlZCkge1xuICAgIHZhciBjciA9IHRoaXMuY2hhclJlY2VpdmVkO1xuICAgIHZhciBidWYgPSB0aGlzLmNoYXJCdWZmZXI7XG4gICAgdmFyIGVuYyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgcmVzICs9IGJ1Zi5zbGljZSgwLCBjcikudG9TdHJpbmcoZW5jKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAyO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDIgOiAwO1xufVxuXG5mdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMztcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAzIDogMDtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ10uY29uY2F0KGRlbGltcyksXG5cbiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gICAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAgLy8gdGhlbS5cbiAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eW2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oW2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCFpc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55IGNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHRoZSBwYXJ0IG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXMgbm9uIEFTQ0lJIGNoYXJhY3RlcnMuIEkuZS4gaXQgZG9zZW50IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgaW4gQVNDSUkuXG4gICAgICB2YXIgZG9tYWluQXJyYXkgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgbmV3T3V0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbWFpbkFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBzID0gZG9tYWluQXJyYXlbaV07XG4gICAgICAgIG5ld091dC5wdXNoKHMubWF0Y2goL1teQS1aYS16MC05Xy1dLykgP1xuICAgICAgICAgICAgJ3huLS0nICsgcHVueWNvZGUuZW5jb2RlKHMpIDogcyk7XG4gICAgICB9XG4gICAgICB0aGlzLmhvc3RuYW1lID0gbmV3T3V0LmpvaW4oJy4nKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKGlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIGlzT2JqZWN0KHRoaXMucXVlcnkpICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAvLyB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICBpZiAodGhpcy5zbGFzaGVzIHx8XG4gICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlO1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIGlmIChpc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgT2JqZWN0LmtleXModGhpcykuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgcmVzdWx0W2tdID0gdGhpc1trXTtcbiAgfSwgdGhpcyk7XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICBPYmplY3Qua2V5cyhyZWxhdGl2ZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICBpZiAoayAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgfSk7XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgT2JqZWN0LmtleXMocmVsYXRpdmUpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH0pO1xuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCkgJiYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fFxuICAgICAgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB0aGlzLmhvc3RuYW1lID0gaG9zdDtcbn07XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gIGFyZyA9PSBudWxsO1xufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcInNiZ252aXpcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMy4xLjBcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlNCR05QRCB2aXN1YWxpemF0aW9uIGxpYnJhcnlcIixcbiAgXCJtYWluXCI6IFwic3JjL2luZGV4LmpzXCIsXG4gIFwibGljZW5jZVwiOiBcIkxHUEwtMy4wXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJ0ZXN0XCI6IFwiZWNobyBcXFwiRXJyb3I6IG5vIHRlc3Qgc3BlY2lmaWVkXFxcIiAmJiBleGl0IDFcIixcbiAgICBcImJ1aWxkLXNiZ252aXotanNcIjogXCJndWxwIGJ1aWxkXCIsXG4gICAgXCJkZWJ1Zy1qc1wiOiBcIm5vZGVtb24gLWUganMgLS13YXRjaCBzcmMgLXggXFxcIm5wbSBydW4gYnVpbGQtc2JnbnZpei1qc1xcXCJcIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2lWaXMtYXQtQmlsa2VudC9zYmdudml6LmpzLmdpdFwiXG4gIH0sXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vaVZpcy1hdC1CaWxrZW50L3NiZ252aXouanMvaXNzdWVzXCJcbiAgfSxcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9pVmlzLWF0LUJpbGtlbnQvc2JnbnZpei5qcy9cIixcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImpxdWVyeVwiOiBcIl4yLjIuNFwiLFxuICAgIFwiZmlsZXNhdmVyanNcIjogXCJ+MC4yLjJcIixcbiAgICBcImN5dG9zY2FwZVwiOiBcImlWaXMtYXQtQmlsa2VudC9jeXRvc2NhcGUuanMjdW5zdGFibGVcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaWJzYmduLmpzXCI6IFwiZ2l0Oi8vZ2l0aHViLmNvbS9laXNibS9saWJzYmduLmpzXCIsXG4gICAgXCJwcmV0dHktZGF0YVwiOiBcIl4wLjQwLjBcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjExLjIuMFwiLFxuICAgIFwiZ3VscFwiOiBcIl4zLjkuMFwiLFxuICAgIFwiZ3VscC1kZXJlcXVpcmVcIjogXCJeMi4xLjBcIixcbiAgICBcImd1bHAtanNoaW50XCI6IFwiXjEuMTEuMlwiLFxuICAgIFwiZ3VscC1wcm9tcHRcIjogXCJeMC4xLjJcIixcbiAgICBcImd1bHAtcmVwbGFjZVwiOiBcIl4wLjUuNFwiLFxuICAgIFwiZ3VscC1zaGVsbFwiOiBcIl4wLjUuMFwiLFxuICAgIFwiZ3VscC11dGlsXCI6IFwiXjMuMC42XCIsXG4gICAgXCJqc2hpbnQtc3R5bGlzaFwiOiBcIl4yLjAuMVwiLFxuICAgIFwibm9kZS1ub3RpZmllclwiOiBcIl40LjMuMVwiLFxuICAgIFwicnVuLXNlcXVlbmNlXCI6IFwiXjEuMS40XCIsXG4gICAgXCJ2aW55bC1idWZmZXJcIjogXCJeMS4wLjBcIixcbiAgICBcInZpbnlsLXNvdXJjZS1zdHJlYW1cIjogXCJeMS4xLjBcIlxuICB9XG59XG4iLCIoZnVuY3Rpb24oKXtcbiAgdmFyIHNiZ252aXogPSB3aW5kb3cuc2JnbnZpeiA9IGZ1bmN0aW9uKF9vcHRpb25zLCBfbGlicykge1xuICAgIHZhciBsaWJzID0ge307XG4gICAgbGlicy5qUXVlcnkgPSBfbGlicy5qUXVlcnkgfHwgalF1ZXJ5O1xuICAgIGxpYnMuY3l0b3NjYXBlID0gX2xpYnMuY3l0b3NjYXBlIHx8IGN5dG9zY2FwZTtcbiAgICBsaWJzLnNhdmVBcyA9IF9saWJzLmZpbGVzYXZlcmpzID8gX2xpYnMuZmlsZXNhdmVyanMuc2F2ZUFzIDogc2F2ZUFzO1xuICAgIFxuICAgIC8vIFNldCB0aGUgbGlicmFyaWVzIHRvIGFjY2VzcyB0aGVtIGZyb20gYW55IGZpbGVcbiAgICB2YXIgbGliVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvbGliLXV0aWxpdGllcycpO1xuICAgIGxpYlV0aWxpdGllcy5zZXRMaWJzKGxpYnMpO1xuICAgIFxuICAgIHZhciBvcHRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9vcHRpb24tdXRpbGl0aWVzJyk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZXh0ZW5kT3B0aW9ucyhfb3B0aW9ucyk7XG4gICAgXG4gICAgdmFyIHNiZ25SZW5kZXJlciA9IHJlcXVpcmUoJy4vc2Jnbi1leHRlbnNpb25zL3NiZ24tY3ktcmVuZGVyZXInKTtcbiAgICB2YXIgc2JnbkN5SW5zdGFuY2UgPSByZXF1aXJlKCcuL3NiZ24tZXh0ZW5zaW9ucy9zYmduLWN5LWluc3RhbmNlJyk7XG4gICAgXG4gICAgLy8gVXRpbGl0aWVzIHdob3NlIGZ1bmN0aW9ucyB3aWxsIGJlIGV4cG9zZWQgc2VwZXJhdGVseVxuICAgIHZhciB1aVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3VpLXV0aWxpdGllcycpO1xuICAgIHZhciBmaWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvZmlsZS11dGlsaXRpZXMnKTtcbiAgICB2YXIgZ3JhcGhVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9ncmFwaC11dGlsaXRpZXMnKTtcbiAgICB2YXIgbWFpblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL21haW4tdXRpbGl0aWVzJyk7XG4gICAgcmVxdWlyZSgnLi91dGlsaXRpZXMva2V5Ym9hcmQtaW5wdXQtdXRpbGl0aWVzJyk7IC8vIHJlcXVpcmUga2V5Ym9yZCBpbnB1dCB1dGlsaXRpZXNcbiAgICAvLyBVdGlsaXRpZXMgdG8gYmUgZXhwb3NlZCBhcyBpc1xuICAgIHZhciBlbGVtZW50VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvZWxlbWVudC11dGlsaXRpZXMnKTtcbiAgICB2YXIgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy91bmRvLXJlZG8tYWN0aW9uLWZ1bmN0aW9ucycpO1xuICAgIFxuICAgIHNiZ25SZW5kZXJlcigpO1xuICAgIHNiZ25DeUluc3RhbmNlKCk7XG4gICAgXG4gICAgLy8gRXhwb3NlIHRoZSBhcGlcbiAgICAvLyBFeHBvc2UgZWxlbWVudFV0aWxpdGllcyBhbmQgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMgYXMgaXMsIG1vc3QgdXNlcnMgd2lsbCBub3QgbmVlZCB0aGVzZVxuICAgIHNiZ252aXouZWxlbWVudFV0aWxpdGllcyA9IGVsZW1lbnRVdGlsaXRpZXM7XG4gICAgc2JnbnZpei51bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zO1xuICAgIFxuICAgIC8vIEV4cG9zZSBlYWNoIG1haW4gdXRpbGl0eSBzZXBlcmF0ZWx5XG4gICAgZm9yICh2YXIgcHJvcCBpbiBtYWluVXRpbGl0aWVzKSB7XG4gICAgICBzYmdudml6W3Byb3BdID0gbWFpblV0aWxpdGllc1twcm9wXTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXhwb3NlIGVhY2ggZmlsZSB1dGlsaXR5IHNlcGVyYXRlbHlcbiAgICBmb3IgKHZhciBwcm9wIGluIGZpbGVVdGlsaXRpZXMpIHtcbiAgICAgIHNiZ252aXpbcHJvcF0gPSBmaWxlVXRpbGl0aWVzW3Byb3BdO1xuICAgIH1cbiAgICBcbiAgICAvLyBFeHBvc2UgZWFjaCBmaWxlIHV0aWxpdHkgc2VwZXJhdGVseVxuICAgIGZvciAodmFyIHByb3AgaW4gdWlVdGlsaXRpZXMpIHtcbiAgICAgIHNiZ252aXpbcHJvcF0gPSB1aVV0aWxpdGllc1twcm9wXTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXhwb3NlIGVhY2ggc2JnbiBncmFwaCB1dGlsaXR5IHNlcGVyYXRlbHlcbiAgICBmb3IgKHZhciBwcm9wIGluIGdyYXBoVXRpbGl0aWVzKSB7XG4gICAgICBzYmdudml6W3Byb3BdID0gZ3JhcGhVdGlsaXRpZXNbcHJvcF07XG4gICAgfVxuICB9O1xuICBcbiAgaWYgKCB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHNiZ252aXo7XG4gIH1cbn0pKCk7IiwidmFyIGVsZW1lbnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvZWxlbWVudC11dGlsaXRpZXMnKTtcbnZhciBncmFwaFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9ncmFwaC11dGlsaXRpZXMnKTtcbnZhciB1bmRvUmVkb0FjdGlvbkZ1bmN0aW9ucyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy91bmRvLXJlZG8tYWN0aW9uLWZ1bmN0aW9ucycpO1xudmFyIHJlZnJlc2hQYWRkaW5ncyA9IGdyYXBoVXRpbGl0aWVzLnJlZnJlc2hQYWRkaW5ncy5iaW5kKGdyYXBoVXRpbGl0aWVzKTtcblxudmFyIGxpYnMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XG52YXIgY3l0b3NjYXBlID0gbGlicy5jeXRvc2NhcGU7XG5cbnZhciBvcHRpb25VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xuXG52YXIgZ2V0Q29tcG91bmRQYWRkaW5ncyA9IGZ1bmN0aW9uKCkge1xuICAvLyBSZXR1cm4gY2FsY3VsYXRlZCBwYWRkaW5ncyBpbiBjYXNlIG9mIHRoYXQgZGF0YSBpcyBpbnZhbGlkIHJldHVybiA1XG4gIHJldHVybiBncmFwaFV0aWxpdGllcy5jYWxjdWxhdGVkUGFkZGluZ3MgfHwgNTtcbn07XG5cbi8qXG4gKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgcG9pbnQgbG9jYXRlZCBvbiB0aGUgZ2l2ZW4gYW5nbGUgb24gdGhlIGNpcmNsZSB3aXRoIHRoZSBnaXZlbiBjZW50ZXJhbCBjb29yZGluYXRlcyBhbmQgcmFkaXVzLlxuICovXG52YXIgZ2V0UG9pbnRPbkNpcmNsZSA9IGZ1bmN0aW9uKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgYW5nbGVJbkRlZ3JlZSkge1xuXHR2YXIgYW5nbGVJblJhZGlhbiA9IGFuZ2xlSW5EZWdyZWUgKiAoIE1hdGguUEkgLyAxODAgKTsgLy8gQ29udmVydCBkZWdyZWUgdG8gcmFkaWFuXG5cdHJldHVybiB7XG5cdFx0eDogcmFkaXVzICogTWF0aC5jb3MoYW5nbGVJblJhZGlhbikgKyBjZW50ZXJYLFxuXHRcdHk6IC0xICogcmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbikgKyBjZW50ZXJZIC8vIFdlIG11bHRpcGx5IHdpdGggLTEgaGVyZSBiZWNhdXNlIEpTIHkgY29vcmRpbmF0ZSBzaWduIGlzIHRoZSBvcG9zaXRlIG9mIHRoZSBNYXRoYW1hdGljYWwgY29vcmRpbmF0ZXMgc3lzdGVtXG5cdH07XG59O1xuXG4vKlxuICogR2VuZXJhdGVzIGEgcG9seWdvbiBzdHJpbmcgYXBwcm94aW1hdGluZyBhIGNpcmNsZSB3aXRoIGdpdmVuIGNlbnRlciwgcmFkaXVzLCBzdGFydCwgZW5kIGFuZ2xlcyBhbmQgbnVtYmVyIG9mIHBvaW50cyB0byByZXByZXNlbnQgdGhlIGNpcmNsZVxuICovXG52YXIgZ2VuZXJhdGVDaXJjbGVTdHJpbmcgPSBmdW5jdGlvbihjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIGFuZ2xlRnJvbSwgYW5nbGVUbywgbnVtT2ZQb2ludHMpIHtcblx0dmFyIGNpcmNsZVN0ciA9IFwiXCI7XG5cdHZhciBzdGVwU2l6ZSA9ICggYW5nbGVUbyAtIGFuZ2xlRnJvbSApIC8gbnVtT2ZQb2ludHM7IC8vIFdlIHdpbGwgaW5jcmVtZW50IHRoZSBjdXJyZW50IGFuZ2xlIGJ5IHN0ZXAgc2l6ZSBpbiBlYWNoIGl0ZXJhdGlvblxuXHR2YXIgY3VycmVudEFuZ2xlID0gYW5nbGVGcm9tOyAvLyBjdXJyZW50IGFuZ2xlIHdpbGwgYmUgdXBkYXRlZCBpbiBlYWNoIGl0ZXJhdGlvblxuXHRcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbnVtT2ZQb2ludHM7IGkrKyApIHtcblx0XHR2YXIgcG9pbnQgPSBnZXRQb2ludE9uQ2lyY2xlKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgY3VycmVudEFuZ2xlKTtcblx0XHRjdXJyZW50QW5nbGUgKz0gc3RlcFNpemU7XG5cdFx0Y2lyY2xlU3RyICs9IHBvaW50LnggKyBcIiBcIiArIHBvaW50LnkgKyBcIiBcIjtcblx0fVxuXHRcblx0cmV0dXJuIGNpcmNsZVN0cjtcbn07XG5cbi8qXG4gKiAgR2VuZXJhdGVzIGEgc3RyaW5nIHJlcHJlc2VudGluZyBwcm9jZXNzZXMvbG9naWNhbCBvcGVyYXRvcnMgd2l0aCBwb3J0cy5cbiAqICBsaW5lSFc6IEhhbGYgd2lkdGggb2YgbGluZSB0aHJvdWdoIHRoZSBjaXJjbGUgdG8gdGhlIGludGVyc2VjdGlvbiBwb2ludFxuICogIHNoYXBlSFc6IEhhbGYgd2lkdGggb2YgdGhlIHNoYXBlIGRpc2NsdWRpbmcgdGhlIHBvcnRzIChJdCBpcyByYWRpdXMgZm9yIHRoZSBjaXJjdWxhciBzaGFwZXMpXG4gKiAgdHlwZTogVHlwZSBvZiB0aGUgc2hhcGUgZGlzY2x1ZGluZyB0aGUgcG9ydHMuIE9wdGlvbnMgYXJlICdjaXJjbGUnLCAncmVjdGFuZ2xlJ1xuICogIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbiBvZiB0aGUgcG9ydHMgT3B0aW9ucyBhcmUgJ2hvcml6b250YWwnLCAndmVydGljYWwnXG4gKi9cblxudmFyIGdlbmVyYXRlU2hhcGVXaXRoUG9ydFN0cmluZyA9IGZ1bmN0aW9uKGxpbmVIVywgc2hhcGVIVywgdHlwZSwgb3JpZW50YXRpb24pIHtcblx0dmFyIHBvbHlnb25TdHI7XG4gICAgdmFyIG51bU9mUG9pbnRzID0gMzA7IC8vIE51bWJlciBvZiBwb2ludHMgdGhhdCBib3RoIGhhbHZlcyBvZiBjaXJjbGUgd2lsbCBoYXZlXG5cdGlmIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG5cdFx0dmFyIGFib3ZlUG9pbnRzLCBiZWxvd1BvaW50cztcblx0XG5cdFx0aWYgKHR5cGUgPT09ICdjaXJjbGUnKSB7XG5cdFx0XHRhYm92ZVBvaW50cyA9IGdlbmVyYXRlQ2lyY2xlU3RyaW5nKDAsIDAsIHNoYXBlSFcsIDE4MCwgMCwgbnVtT2ZQb2ludHMpO1xuXHRcdFx0YmVsb3dQb2ludHMgPSBnZW5lcmF0ZUNpcmNsZVN0cmluZygwLCAwLCBzaGFwZUhXLCAzNjAsIDE4MCwgbnVtT2ZQb2ludHMpO1xuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlID09PSAncmVjdGFuZ2xlJykge1xuXHRcdFx0YWJvdmVQb2ludHMgPSAnLScgKyBzaGFwZUhXICsgJyAtJyArIHNoYXBlSFcgKyAnICcgKyBzaGFwZUhXICsgJyAtJyArIHNoYXBlSFcgKyAnICc7XG5cdFx0XHRiZWxvd1BvaW50cyA9IHNoYXBlSFcgKyAnICcgKyBzaGFwZUhXICsgJyAtJyArIHNoYXBlSFcgKyAnICcgKyBzaGFwZUhXICsgJyAnO1xuXHRcdH1cblx0XHRcblx0XHRwb2x5Z29uU3RyID0gXCItMSAtXCIgKyBsaW5lSFcgKyBcIiAtXCIgKyBzaGFwZUhXICsgXCIgLVwiICsgbGluZUhXICsgXCIgXCI7XHRcblx0XHRwb2x5Z29uU3RyICs9IGFib3ZlUG9pbnRzO1xuXHRcdHBvbHlnb25TdHIgKz0gc2hhcGVIVyArIFwiIC1cIiArIGxpbmVIVyArIFwiIDEgLVwiICsgbGluZUhXICsgXCIgMSBcIiArIGxpbmVIVyArIFwiIFwiICsgc2hhcGVIVyArIFwiIFwiICsgbGluZUhXICsgXCIgXCI7XG5cdFx0cG9seWdvblN0ciArPSBiZWxvd1BvaW50cztcblx0XHRwb2x5Z29uU3RyICs9IFwiLVwiICsgc2hhcGVIVyArIFwiIFwiICsgbGluZUhXICsgXCIgLTEgXCIgKyBsaW5lSFc7XG5cdH1cblx0ZWxzZSB7XG5cdFx0dmFyIGxlZnRQb2ludHMsIHJpZ2h0UG9pbnRzO1xuXHRcdFxuXHRcdGlmICh0eXBlID09PSAnY2lyY2xlJykge1xuXHRcdFx0bGVmdFBvaW50cyA9IGdlbmVyYXRlQ2lyY2xlU3RyaW5nKDAsIDAsIHNoYXBlSFcsIDkwLCAyNzAsIG51bU9mUG9pbnRzKTtcblx0XHRcdHJpZ2h0UG9pbnRzID0gZ2VuZXJhdGVDaXJjbGVTdHJpbmcoMCwgMCwgc2hhcGVIVywgLTkwLCA5MCwgbnVtT2ZQb2ludHMpO1xuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlID09PSAncmVjdGFuZ2xlJykge1xuXHRcdFx0bGVmdFBvaW50cyA9ICctJyArIHNoYXBlSFcgKyAnIC0nICsgc2hhcGVIVyArICcgLScgKyBzaGFwZUhXICsgJyAnICsgc2hhcGVIVyArICcgJztcblx0XHRcdHJpZ2h0UG9pbnRzID0gc2hhcGVIVyArICcgJyArIHNoYXBlSFcgKyAnICcgKyBzaGFwZUhXICsgJyAtJyArIHNoYXBlSFcgKyAnICc7IFxuXHRcdH1cblx0XHRcblx0XHRwb2x5Z29uU3RyID0gXCItXCIgKyBsaW5lSFcgKyBcIiAtXCIgKyAxICsgXCIgLVwiICsgbGluZUhXICsgXCIgLVwiICsgc2hhcGVIVyArIFwiIFwiO1xuXHRcdHBvbHlnb25TdHIgKz0gbGVmdFBvaW50cztcblx0XHRwb2x5Z29uU3RyICs9IFwiLVwiICsgbGluZUhXICsgXCIgXCIgKyBzaGFwZUhXICsgXCIgLVwiICsgbGluZUhXICsgXCIgMSBcIiArIGxpbmVIVyArIFwiIDEgXCIgKyBsaW5lSFcgKyBcIiBcIiArIHNoYXBlSFcgKyBcIiBcIjtcblx0XHRwb2x5Z29uU3RyICs9IHJpZ2h0UG9pbnRzO1xuXHRcdHBvbHlnb25TdHIgKz0gbGluZUhXICsgXCIgLVwiICsgc2hhcGVIVyArIFwiIFwiICsgbGluZUhXICsgXCIgLTFcIjtcblx0fVxuXHRcblx0cmV0dXJuIHBvbHlnb25TdHI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRhaW5lclNlbGVjdG9yID0gb3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3I7XG4gIHZhciBpbWdQYXRoID0gb3B0aW9ucy5pbWdQYXRoO1xuICBcbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKClcbiAge1xuICAgIHZhciBzYmduTmV0d29ya0NvbnRhaW5lciA9ICQoY29udGFpbmVyU2VsZWN0b3IpO1xuXG4gICAgLy8gY3JlYXRlIGFuZCBpbml0IGN5dG9zY2FwZTpcbiAgICB2YXIgY3kgPSBjeXRvc2NhcGUoe1xuICAgICAgY29udGFpbmVyOiBzYmduTmV0d29ya0NvbnRhaW5lcixcbiAgICAgIHN0eWxlOiBzYmduU3R5bGVTaGVldCxcbiAgICAgIHNob3dPdmVybGF5OiBmYWxzZSwgbWluWm9vbTogMC4xMjUsIG1heFpvb206IDE2LFxuICAgICAgYm94U2VsZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1vdGlvbkJsdXI6IHRydWUsXG4gICAgICB3aGVlbFNlbnNpdGl2aXR5OiAwLjEsXG4gICAgICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuY3kgPSB0aGlzO1xuICAgICAgICAvLyBJZiB1bmRvYWJsZSByZWdpc3RlciB1bmRvL3JlZG8gYWN0aW9uc1xuICAgICAgICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgICAgICAgIHJlZ2lzdGVyVW5kb1JlZG9BY3Rpb25zKCk7XG4gICAgICAgIH1cbiAgICAgICAgYmluZEN5RXZlbnRzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBcbiAgLy8gTm90ZSB0aGF0IGluIENoaVNFIHRoaXMgZnVuY3Rpb24gaXMgaW4gYSBzZXBlcmF0ZSBmaWxlIGJ1dCBpbiB0aGUgdmlld2VyIGl0IGhhcyBqdXN0IDIgbWV0aG9kcyBhbmQgc28gaXQgaXMgbG9jYXRlZCBpbiB0aGlzIGZpbGVcbiAgZnVuY3Rpb24gcmVnaXN0ZXJVbmRvUmVkb0FjdGlvbnMoKSB7XG4gICAgLy8gY3JlYXRlIG9yIGdldCB0aGUgdW5kby1yZWRvIGluc3RhbmNlXG4gICAgdmFyIHVyID0gY3kudW5kb1JlZG8oKTtcblxuICAgIC8vIHJlZ2lzdGVyIGdlbmVyYWwgYWN0aW9uc1xuICAgIC8vIHJlZ2lzdGVyIGFkZCByZW1vdmUgYWN0aW9uc1xuICAgIHVyLmFjdGlvbihcImRlbGV0ZUVsZXNTaW1wbGVcIiwgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZGVsZXRlRWxlc1NpbXBsZSwgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmVzdG9yZUVsZXMpO1xuICAgIHVyLmFjdGlvbihcImRlbGV0ZU5vZGVzU21hcnRcIiwgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMuZGVsZXRlTm9kZXNTbWFydCwgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMucmVzdG9yZUVsZXMpO1xuICB9XG5cbiAgLy8gdXNlZCBmb3IgaGFuZGxpbmcgdGhlIHZhcmlhYmxlIHByb3BlcnR5IG9mIGNvbXBsZXhlc1xuICBmdW5jdGlvbiBnZXRQYWRkaW5nKGVsZSkge1xuICAgIC8vIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gdGFrZSBpbnRvIGFjY291bnQ6XG4gICAgLy8gLSBwcmVzZW5jZSBvZiBhIGxhYmVsXG4gICAgLy8gLSBvcHRpb24gdG8gZGlzcGxheSBjb21wbGV4IGxhYmVsc1xuICAgIC8vIC0gcHJlc2VuY2Ugb2Ygc3RhdGVzIGFuZCBpbmZvIGJveFxuICAgIHZhciBwYWRkaW5nID0gZ2V0Q29tcG91bmRQYWRkaW5ncygpO1xuICAgIGlmIChvcHRpb25zLnNob3dDb21wbGV4TmFtZSAmJiBlbGVtZW50VXRpbGl0aWVzLmdldEVsZW1lbnRDb250ZW50KGVsZSkpIHtcbiAgICAgIHBhZGRpbmcgKz0gb3B0aW9ucy5leHRyYUNvbXBsZXhQYWRkaW5nICogMC41O1xuICAgICAgaWYgKGVsZS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGFkZGluZyArPSBvcHRpb25zLmV4dHJhQ29tcGxleFBhZGRpbmcgKiAwLjU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWRkaW5nO1xuICB9XG5cbiAgLy8gdXNlZCBmb3IgaGFuZGxpbmcgdGhlIHZhcmlhYmxlIHByb3BlcnR5IG9mIGNvbXBsZXhlc1xuICBmdW5jdGlvbiBnZXRNYXJnaW4oZWxlKSB7XG4gICAgLy8gdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byB0YWtlIGludG8gYWNjb3VudDpcbiAgICAvLyAtIHByZXNlbmNlIG9mIGEgbGFiZWxcbiAgICAvLyAtIG9wdGlvbiB0byBkaXNwbGF5IGNvbXBsZXggbGFiZWxzXG4gICAgLy8gLSBwcmVzZW5jZSBvZiBzdGF0ZXMgYW5kIGluZm8gYm94XG4gICAgdmFyIG1hcmdpbiA9ICAtMSAqIG9wdGlvbnMuZXh0cmFDb21wbGV4UGFkZGluZztcbiAgICBpZiAob3B0aW9ucy5zaG93Q29tcGxleE5hbWUgJiZcbiAgICAgICAgZWxlbWVudFV0aWxpdGllcy5nZXRFbGVtZW50Q29udGVudChlbGUpICYmXG4gICAgICAgIGVsZS5kYXRhKCdzdGF0ZXNhbmRpbmZvcycpLmxlbmd0aCA+IDApIHtcbiAgICAgIG1hcmdpbiAtPSBvcHRpb25zLmV4dHJhQ29tcGxleFBhZGRpbmcgKiAwLjU7XG4gICAgfVxuICAgIHJldHVybiBtYXJnaW47XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGJpbmRDeUV2ZW50cygpIHtcbiAgICBjeS5vbigndGFwZW5kJywgJ25vZGUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gICAgfSk7XG4gICAgXG4gICAgY3kub24oXCJleHBhbmRjb2xsYXBzZS5iZWZvcmVjb2xsYXBzZVwiLCBcIm5vZGVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXM7XG4gICAgICAvL1RoZSBjaGlsZHJlbiBpbmZvIG9mIGNvbXBsZXggbm9kZXMgc2hvdWxkIGJlIHNob3duIHdoZW4gdGhleSBhcmUgY29sbGFwc2VkXG4gICAgICBpZiAobm9kZS5fcHJpdmF0ZS5kYXRhLmNsYXNzID09IFwiY29tcGxleFwiKSB7XG4gICAgICAgIC8vVGhlIG5vZGUgaXMgYmVpbmcgY29sbGFwc2VkIHN0b3JlIGluZm9sYWJlbCB0byB1c2UgaXQgbGF0ZXJcbiAgICAgICAgdmFyIGluZm9MYWJlbCA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0SW5mb0xhYmVsKG5vZGUpO1xuICAgICAgICBub2RlLl9wcml2YXRlLmRhdGEuaW5mb0xhYmVsID0gaW5mb0xhYmVsO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpO1xuICAgICAgLy8gcmVtb3ZlIGJlbmQgcG9pbnRzIGJlZm9yZSBjb2xsYXBzZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlZGdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWRnZSA9IGVkZ2VzW2ldO1xuICAgICAgICBpZiAoZWRnZS5oYXNDbGFzcygnZWRnZWJlbmRlZGl0aW5nLWhhc2JlbmRwb2ludHMnKSkge1xuICAgICAgICAgIGVkZ2UucmVtb3ZlQ2xhc3MoJ2VkZ2ViZW5kZWRpdGluZy1oYXNiZW5kcG9pbnRzJyk7XG4gICAgICAgICAgZGVsZXRlIGVkZ2UuX3ByaXZhdGUuY2xhc3Nlc1snZWRnZWJlbmRlZGl0aW5nLWhhc2JlbmRwb2ludHMnXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlZGdlcy5zY3JhdGNoKCdjeWVkZ2ViZW5kZWRpdGluZ1dlaWdodHMnLCBbXSk7XG4gICAgICBlZGdlcy5zY3JhdGNoKCdjeWVkZ2ViZW5kZWRpdGluZ0Rpc3RhbmNlcycsIFtdKTtcbiAgICB9KTtcblxuICAgIGN5Lm9uKFwiZXhwYW5kY29sbGFwc2UuYmVmb3JlZXhwYW5kXCIsIFwibm9kZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcztcbiAgICAgIG5vZGUucmVtb3ZlRGF0YShcImluZm9MYWJlbFwiKTtcbiAgICB9KTtcblxuICAgIGN5Lm9uKFwiZXhwYW5kY29sbGFwc2UuYWZ0ZXJleHBhbmRcIiwgXCJub2RlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzO1xuICAgICAgY3kubm9kZXMoKS51cGRhdGVDb21wb3VuZEJvdW5kcygpO1xuICAgICAgLy9Eb24ndCBzaG93IGNoaWxkcmVuIGluZm8gd2hlbiB0aGUgY29tcGxleCBub2RlIGlzIGV4cGFuZGVkXG4gICAgICBpZiAobm9kZS5fcHJpdmF0ZS5kYXRhLmNsYXNzID09IFwiY29tcGxleFwiKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlU3R5bGUoJ2NvbnRlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIExpc3RlbiB0byBjaGFuZ2UgKGZvciBsYWJlbCBhbmQgc3RhdHMgYW5kIGluZm8pIHRvIGFkanVzdCBwYWRkaW5nc1xuICAgICAqL1xuICAgIGN5Lm9uKFwiZGF0YVwiLCBcIm5vZGVbY2xhc3M9J2NvbXBsZXgnXVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHRoaXMuc3R5bGUoJ3BhZGRpbmcnLCBnZXRQYWRkaW5nKHRoaXMpKTtcbiAgICAgIHRoaXMuc3R5bGUoJ3RleHQtbWFyZ2luLXknLCBnZXRNYXJnaW4odGhpcykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbkNvbG9yID0gJyNkNjc2MTQnO1xuICB2YXIgc2JnblN0eWxlU2hlZXQgPSBjeXRvc2NhcGUuc3R5bGVzaGVldCgpXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ3RleHQtdmFsaWduJzogJ2NlbnRlcicsXG4gICAgICAgICAgICAndGV4dC1oYWxpZ24nOiAnY2VudGVyJyxcbiAgICAgICAgICAgICdib3JkZXItd2lkdGgnOiAxLjI1LFxuICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6ICcjNTU1JyxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJyNmZmZmZmYnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQtb3BhY2l0eSc6IDAuNSxcbiAgICAgICAgICAgICd0ZXh0LW9wYWNpdHknOiAxLFxuICAgICAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAgICAgJ3BhZGRpbmcnOiAwLFxuICAgICAgICAgICAgJ3RleHQtd3JhcCc6ICd3cmFwJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZTpwYXJlbnRcIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdwYWRkaW5nJzogZ2V0Q29tcG91bmRQYWRkaW5nc1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZVs/Y2xvbmVtYXJrZXJdW2NsYXNzPSdwZXJ0dXJiaW5nIGFnZW50J10sbm9kZVs/Y2xvbmVtYXJrZXJdW2NsYXNzPSd1bnNwZWNpZmllZCBlbnRpdHknXVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBpbWdQYXRoICsgJy9jbG9uZV9iZy5wbmcnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6ICc1MCUnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6ICcxMDAlJyxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLXdpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgJ2JhY2tncm91bmQtaGVpZ2h0JzogJzI1JScsXG4gICAgICAgICAgICAnYmFja2dyb3VuZC1maXQnOiAnbm9uZScsXG4gICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5JzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKCdjbG9uZW1hcmtlcicpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGVsZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZVtjbGFzc11cIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdzaGFwZSc6IGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuZ2V0Q3lTaGFwZShlbGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjb250ZW50JzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5nZXRFbGVtZW50Q29udGVudChlbGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdmb250LXNpemUnOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmdldExhYmVsVGV4dFNpemUoZWxlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0b3IoXCJub2RlW2NsYXNzPSdhc3NvY2lhdGlvbiddLFtjbGFzcz0nZGlzc29jaWF0aW9uJ10sW2NsYXNzPSdhbmQnXSxbY2xhc3M9J29yJ10sW2NsYXNzPSdub3QnXSxbY2xhc3M9J3Byb2Nlc3MnXSxbY2xhc3M9J29taXR0ZWQgcHJvY2VzcyddLFtjbGFzcz0ndW5jZXJ0YWluIHByb2Nlc3MnXVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ3NoYXBlLXBvbHlnb24tcG9pbnRzJzogZnVuY3Rpb24oZWxlKSB7XG4gICAgICAgICAgICAgIGlmIChncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPT09IHRydWUgJiYgZWxlLmRhdGEoJ3BvcnRzJykubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIHBvcnRzIG9mIHRoZSBlZGdlIGFyZSBzeW1ldHJpYyBhY2NvcmRpbmcgdG8gdGhlIG5vZGUgY2VudGVyIHNvIGp1c3QgY2hlY2tpbmcgb25lIHBvcnQgaXMgZW5vdWdoIGZvciB1c1xuICAgICAgICAgICAgICAgIHZhciBwb3J0ID0gZWxlLmRhdGEoJ3BvcnRzJylbMF07IFxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwb3J0cyBhcmUgbG9jYXRlZCBhYm92ZS9iZWxvdyBvZiB0aGUgbm9kZSB0aGVuIHRoZSBvcmllbnRhdGlvbiBpcyAndmVydGljYWwnIGVsc2UgaXQgaXMgJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gcG9ydC54ID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgICAgICAgICAvLyBUaGUgaGFsZiB3aWR0aCBvZiB0aGUgYWN0dWFsIHNoYXBlIGRpc2NsdWRpbmcgdGhlIHBvcnRzXG4gICAgICAgICAgICAgICAgdmFyIHNoYXBlSFcgPSBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IDUwIC8gTWF0aC5hYnMocG9ydC55KSA6IDUwIC8gTWF0aC5hYnMocG9ydC54KTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGNsYXNzIG9mIHRoZSBub2RlXG4gICAgICAgICAgICAgICAgdmFyIF9jbGFzcyA9IGVsZS5kYXRhKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgIC8vIElmIGNsYXNzIGlzIG9uZSBvZiBwcm9jZXNzLCBvbWl0dGVkIHByb2Nlc3Mgb3IgdW5jZXJ0YWluIHByb2Nlc3MgdGhlbiB0aGUgdHlwZSBvZiBhY3R1YWwgc2hhcGUgaXMgJ3JlY3RhbmdsZScgZWxzZSBpdCBpcyAnY2lyY2xlJ1xuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gX2NsYXNzLmVuZHNXaXRoKCdwcm9jZXNzJykgPyAncmVjdGFuZ2xlJyA6ICdjaXJjbGUnO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgcG9seWdvbiBzdHJpbmcgd2l0aCBhYm92ZSBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gaXRcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVTaGFwZVdpdGhQb3J0U3RyaW5nKDAuMDEsIHNoYXBlSFcsIHR5cGUsIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVGhpcyBlbGVtZW50IGlzIG5vdCBleHBlY3RlZCB0byBoYXZlIGEgcG95Z29uaWFsIHNoYXBlIChCZWNhdXNlIGl0IGRvZXMgbm90IGhhdmUgMiBwb3J0cykganVzdCByZXR1cm4gYSB0cml2aWFsIHN0cmluZyBoZXJlIG5vdCB0byBoYXZlIGEgcnVuIHRpbWUgYnVnXG4gICAgICAgICAgICAgIHJldHVybiAnLTEgLTEgMSAxIDEgMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0b3IoXCJub2RlW2NsYXNzPSdwZXJ0dXJiaW5nIGFnZW50J11cIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdzaGFwZS1wb2x5Z29uLXBvaW50cyc6ICctMSwgLTEsICAgLTAuNSwgMCwgIC0xLCAxLCAgIDEsIDEsICAgMC41LCAwLCAxLCAtMSdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcIm5vZGVbY2xhc3M9J3RhZyddXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnc2hhcGUtcG9seWdvbi1wb2ludHMnOiAnLTEsIC0xLCAgIDAuMjUsIC0xLCAgIDEsIDAsICAgIDAuMjUsIDEsICAgIC0xLCAxJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZVtjbGFzcz0nY29tcGxleCddXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndGV4dC12YWxpZ24nOiAnYm90dG9tJyxcbiAgICAgICAgICAgICd0ZXh0LWhhbGlnbic6ICdjZW50ZXInLFxuICAgICAgICAgICAgJ3RleHQtbWFyZ2luLXknOiBnZXRNYXJnaW4sXG4gICAgICAgICAgICAncGFkZGluZyc6IGdldFBhZGRpbmdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcIm5vZGVbY2xhc3M9J2NvbXBhcnRtZW50J11cIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdib3JkZXItd2lkdGgnOiAzLjI1LFxuICAgICAgICAgICAgJ2JhY2tncm91bmQtb3BhY2l0eSc6IDAsXG4gICAgICAgICAgICAndGV4dC12YWxpZ24nOiAnYm90dG9tJyxcbiAgICAgICAgICAgICd0ZXh0LWhhbGlnbic6ICdjZW50ZXInLFxuICAgICAgICAgICAgJ3RleHQtbWFyZ2luLXknIDogLTEgKiBvcHRpb25zLmV4dHJhQ29tcGFydG1lbnRQYWRkaW5nXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0b3IoXCJub2RlOnBhcmVudFtjbGFzcz0nY29tcGFydG1lbnQnXVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ3BhZGRpbmcnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvdW5kUGFkZGluZ3MoKSArIG9wdGlvbnMuZXh0cmFDb21wYXJ0bWVudFBhZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0b3IoXCJub2RlOmNoaWxkbGVzc1tiYm94XVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ3dpZHRoJzogJ2RhdGEoYmJveC53KScsXG4gICAgICAgICAgICAnaGVpZ2h0JzogJ2RhdGEoYmJveC5oKSdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcIm5vZGUuY3ktZXhwYW5kLWNvbGxhcHNlLWNvbGxhcHNlZC1ub2RlXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnd2lkdGgnOiAzNixcbiAgICAgICAgICAgICdoZWlnaHQnOiAzNixcbiAgICAgICAgICAgICdib3JkZXItc3R5bGUnOiAnZGFzaGVkJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwibm9kZTpzZWxlY3RlZFwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6IHNlbGVjdGlvbkNvbG9yLFxuICAgICAgICAgICAgJ3RhcmdldC1hcnJvdy1jb2xvcic6ICcjMDAwJyxcbiAgICAgICAgICAgICd0ZXh0LW91dGxpbmUtY29sb3InOiAnIzAwMCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcIm5vZGU6YWN0aXZlXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnYmFja2dyb3VuZC1vcGFjaXR5JzogMC43LCAnb3ZlcmxheS1jb2xvcic6IHNlbGVjdGlvbkNvbG9yLFxuICAgICAgICAgICAgJ292ZXJsYXktcGFkZGluZyc6ICcxNCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcImVkZ2VcIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdjdXJ2ZS1zdHlsZSc6ICdiZXppZXInLFxuICAgICAgICAgICAgJ2xpbmUtY29sb3InOiAnIzU1NScsXG4gICAgICAgICAgICAndGFyZ2V0LWFycm93LWZpbGwnOiAnaG9sbG93JyxcbiAgICAgICAgICAgICdzb3VyY2UtYXJyb3ctZmlsbCc6ICdob2xsb3cnLFxuICAgICAgICAgICAgJ3dpZHRoJzogMS4yNSxcbiAgICAgICAgICAgICd0YXJnZXQtYXJyb3ctY29sb3InOiAnIzU1NScsXG4gICAgICAgICAgICAnc291cmNlLWFycm93LWNvbG9yJzogJyM1NTUnLFxuICAgICAgICAgICAgJ3RleHQtYm9yZGVyLWNvbG9yJzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICBpZiAoZWxlLnNlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uQ29sb3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGVsZS5jc3MoJ2xpbmUtY29sb3InKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnY29sb3InOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICAgIGlmIChlbGUuc2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25Db2xvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZWxlLmNzcygnbGluZS1jb2xvcicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdhcnJvdy1zY2FsZSc6IDEuMjVcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcImVkZ2UuY3ktZXhwYW5kLWNvbGxhcHNlLW1ldGEtZWRnZVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ2xpbmUtY29sb3InOiAnI0M0QzRDNCcsXG4gICAgICAgICAgICAnc291cmNlLWFycm93LWNvbG9yJzogJyNDNEM0QzQnLFxuICAgICAgICAgICAgJ3RhcmdldC1hcnJvdy1jb2xvcic6ICcjQzRDNEM0J1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiZWRnZTpzZWxlY3RlZFwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ2xpbmUtY29sb3InOiBzZWxlY3Rpb25Db2xvcixcbiAgICAgICAgICAgICdzb3VyY2UtYXJyb3ctY29sb3InOiBzZWxlY3Rpb25Db2xvcixcbiAgICAgICAgICAgICd0YXJnZXQtYXJyb3ctY29sb3InOiBzZWxlY3Rpb25Db2xvclxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiZWRnZTphY3RpdmVcIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLW9wYWNpdHknOiAwLjcsICdvdmVybGF5LWNvbG9yJzogc2VsZWN0aW9uQ29sb3IsXG4gICAgICAgICAgICAnb3ZlcmxheS1wYWRkaW5nJzogJzgnXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0b3IoXCJlZGdlW2NhcmRpbmFsaXR5ID4gMF1cIilcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICd0ZXh0LXJvdGF0aW9uJzogJ2F1dG9yb3RhdGUnLFxuICAgICAgICAgICAgJ3RleHQtYmFja2dyb3VuZC1zaGFwZSc6ICdyZWN0YW5nbGUnLFxuICAgICAgICAgICAgJ3RleHQtYm9yZGVyLW9wYWNpdHknOiAnMScsXG4gICAgICAgICAgICAndGV4dC1ib3JkZXItd2lkdGgnOiAnMScsXG4gICAgICAgICAgICAndGV4dC1iYWNrZ3JvdW5kLWNvbG9yJzogJ3doaXRlJyxcbiAgICAgICAgICAgICd0ZXh0LWJhY2tncm91bmQtb3BhY2l0eSc6ICcxJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiZWRnZVtjbGFzcz0nY29uc3VtcHRpb24nXVtjYXJkaW5hbGl0eSA+IDBdXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnc291cmNlLWxhYmVsJzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gJycgKyBlbGUuZGF0YSgnY2FyZGluYWxpdHknKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnc291cmNlLXRleHQtbWFyZ2luLXknOiAnLTEwJyxcbiAgICAgICAgICAgICdzb3VyY2UtdGV4dC1vZmZzZXQnOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmdldENhcmRpbmFsaXR5RGlzdGFuY2UoZWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcImVkZ2VbY2xhc3M9J3Byb2R1Y3Rpb24nXVtjYXJkaW5hbGl0eSA+IDBdXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndGFyZ2V0LWxhYmVsJzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gJycgKyBlbGUuZGF0YSgnY2FyZGluYWxpdHknKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAndGFyZ2V0LXRleHQtbWFyZ2luLXknOiAnLTEwJyxcbiAgICAgICAgICAgICd0YXJnZXQtdGV4dC1vZmZzZXQnOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmdldENhcmRpbmFsaXR5RGlzdGFuY2UoZWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zZWxlY3RvcihcImVkZ2VbY2xhc3NdXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndGFyZ2V0LWFycm93LXNoYXBlJzogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5nZXRDeUFycm93U2hhcGUoZWxlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnc291cmNlLWFycm93LXNoYXBlJzogJ25vbmUnLFxuICAgICAgICAgICAgJ3NvdXJjZS1lbmRwb2ludCc6IGZ1bmN0aW9uKGVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudFV0aWxpdGllcy5nZXRFbmRQb2ludChlbGUsICdzb3VyY2UnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAndGFyZ2V0LWVuZHBvaW50JzogZnVuY3Rpb24oZWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmdldEVuZFBvaW50KGVsZSwgJ3RhcmdldCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiZWRnZVtjbGFzcz0naW5oaWJpdGlvbiddXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndGFyZ2V0LWFycm93LWZpbGwnOiAnZmlsbGVkJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiZWRnZVtjbGFzcz0ncHJvZHVjdGlvbiddXCIpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndGFyZ2V0LWFycm93LWZpbGwnOiAnZmlsbGVkJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdG9yKFwiY29yZVwiKVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgJ3NlbGVjdGlvbi1ib3gtY29sb3InOiBzZWxlY3Rpb25Db2xvcixcbiAgICAgICAgICAgICdzZWxlY3Rpb24tYm94LW9wYWNpdHknOiAnMC4yJywgJ3NlbGVjdGlvbi1ib3gtYm9yZGVyLWNvbG9yJzogc2VsZWN0aW9uQ29sb3JcbiAgICAgICAgICB9KTtcbn07XG4iLCIvKlxuICogUmVuZGVyIHNiZ24gc3BlY2lmaWMgc2hhcGVzIHdoaWNoIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IGN5dG9zY2FwZS5qcyBjb3JlXG4gKi9cblxudmFyIHRydW5jYXRlVGV4dCA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy90ZXh0LXV0aWxpdGllcycpLnRydW5jYXRlVGV4dDtcbnZhciBsaWJzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xudmFyIGN5dG9zY2FwZSA9IGxpYnMuY3l0b3NjYXBlO1xuXG52YXIgY3lNYXRoID0gY3l0b3NjYXBlLm1hdGg7XG52YXIgY3lCYXNlTm9kZVNoYXBlcyA9IGN5dG9zY2FwZS5iYXNlTm9kZVNoYXBlcztcbnZhciBjeVN0eWxlUHJvcGVydGllcyA9IGN5dG9zY2FwZS5zdHlsZVByb3BlcnRpZXM7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJCQgPSBjeXRvc2NhcGU7XG4gIFxuICAvLyBUYWtlbiBmcm9tIGN5dG9zY2FwZS5qcyBhbmQgbW9kaWZpZWRcbiAgdmFyIGRyYXdSb3VuZFJlY3RhbmdsZVBhdGggPSBmdW5jdGlvbihcbiAgICBjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMgKXtcblxuICAgIHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG4gICAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICAgIHZhciBjb3JuZXJSYWRpdXMgPSByYWRpdXMgfHwgY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKCB3aWR0aCwgaGVpZ2h0ICk7XG5cbiAgICBpZiggY29udGV4dC5iZWdpblBhdGggKXsgY29udGV4dC5iZWdpblBhdGgoKTsgfVxuXG4gICAgLy8gU3RhcnQgYXQgdG9wIG1pZGRsZVxuICAgIGNvbnRleHQubW92ZVRvKCB4LCB5IC0gaGFsZkhlaWdodCApO1xuICAgIC8vIEFyYyBmcm9tIG1pZGRsZSB0b3AgdG8gcmlnaHQgc2lkZVxuICAgIGNvbnRleHQuYXJjVG8oIHggKyBoYWxmV2lkdGgsIHkgLSBoYWxmSGVpZ2h0LCB4ICsgaGFsZldpZHRoLCB5LCBjb3JuZXJSYWRpdXMgKTtcbiAgICAvLyBBcmMgZnJvbSByaWdodCBzaWRlIHRvIGJvdHRvbVxuICAgIGNvbnRleHQuYXJjVG8oIHggKyBoYWxmV2lkdGgsIHkgKyBoYWxmSGVpZ2h0LCB4LCB5ICsgaGFsZkhlaWdodCwgY29ybmVyUmFkaXVzICk7XG4gICAgLy8gQXJjIGZyb20gYm90dG9tIHRvIGxlZnQgc2lkZVxuICAgIGNvbnRleHQuYXJjVG8oIHggLSBoYWxmV2lkdGgsIHkgKyBoYWxmSGVpZ2h0LCB4IC0gaGFsZldpZHRoLCB5LCBjb3JuZXJSYWRpdXMgKTtcbiAgICAvLyBBcmMgZnJvbSBsZWZ0IHNpZGUgdG8gdG9wQm9yZGVyXG4gICAgY29udGV4dC5hcmNUbyggeCAtIGhhbGZXaWR0aCwgeSAtIGhhbGZIZWlnaHQsIHgsIHkgLSBoYWxmSGVpZ2h0LCBjb3JuZXJSYWRpdXMgKTtcbiAgICAvLyBKb2luIGxpbmVcbiAgICBjb250ZXh0LmxpbmVUbyggeCwgeSAtIGhhbGZIZWlnaHQgKTtcblxuXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfTtcbiAgXG4gIC8vIFRha2VuIGZyb20gY3l0b3NjYXBlLmpzXG4gIHZhciBkcmF3UG9seWdvblBhdGggPSBmdW5jdGlvbihcbiAgICBjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBwb2ludHMgKXtcblxuICAgIHZhciBoYWxmVyA9IHdpZHRoIC8gMjtcbiAgICB2YXIgaGFsZkggPSBoZWlnaHQgLyAyO1xuXG4gICAgaWYoIGNvbnRleHQuYmVnaW5QYXRoICl7IGNvbnRleHQuYmVnaW5QYXRoKCk7IH1cblxuICAgIGNvbnRleHQubW92ZVRvKCB4ICsgaGFsZlcgKiBwb2ludHNbMF0sIHkgKyBoYWxmSCAqIHBvaW50c1sxXSApO1xuXG4gICAgZm9yKCB2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoIC8gMjsgaSsrICl7XG4gICAgICBjb250ZXh0LmxpbmVUbyggeCArIGhhbGZXICogcG9pbnRzWyBpICogMl0sIHkgKyBoYWxmSCAqIHBvaW50c1sgaSAqIDIgKyAxXSApO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH07XG4gIFxuICB2YXIgc2JnblNoYXBlcyA9ICQkLnNiZ24uc2JnblNoYXBlcyA9IHtcbiAgICAnc291cmNlIGFuZCBzaW5rJzogdHJ1ZSxcbiAgICAnbnVjbGVpYyBhY2lkIGZlYXR1cmUnOiB0cnVlLFxuICAgICdjb21wbGV4JzogdHJ1ZSxcbiAgICAnbWFjcm9tb2xlY3VsZSc6IHRydWUsXG4gICAgJ3NpbXBsZSBjaGVtaWNhbCc6IHRydWVcbiAgfTtcblxuICB2YXIgdG90YWxseU92ZXJyaWRlbk5vZGVTaGFwZXMgPSAkJC5zYmduLnRvdGFsbHlPdmVycmlkZW5Ob2RlU2hhcGVzID0ge1xuICAgICdtYWNyb21vbGVjdWxlJzogdHJ1ZSxcbiAgICAnbnVjbGVpYyBhY2lkIGZlYXR1cmUnOiB0cnVlLFxuICAgICdzaW1wbGUgY2hlbWljYWwnOiB0cnVlLFxuICAgICdjb21wbGV4JzogdHJ1ZVxuICB9O1xuXG4gIHZhciB1bml0T2ZJbmZvUmFkaXVzID0gNDtcbiAgdmFyIHN0YXRlVmFyUmFkaXVzID0gMTU7XG4gICQkLnNiZ24uZHJhd0NvbXBsZXhTdGF0ZUFuZEluZm8gPSBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSwgc3RhdGVBbmRJbmZvcyxcbiAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgICAvL1RoaXMgaXMgYSB0ZW1wb3Jhcnkgd29ya2Fyb3VuZFxuICAgICQkLnNiZ24uZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG5cbiAgICB2YXIgdXBXaWR0aCA9IDAsIGRvd25XaWR0aCA9IDA7XG4gICAgdmFyIGJveFBhZGRpbmcgPSAxMCwgYmV0d2VlbkJveFBhZGRpbmcgPSA1O1xuICAgIHZhciBiZWdpblBvc1kgPSBoZWlnaHQgLyAyLCBiZWdpblBvc1ggPSB3aWR0aCAvIDI7XG5cbiAgICBzdGF0ZUFuZEluZm9zLnNvcnQoJCQuc2Jnbi5jb21wYXJlU3RhdGVzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVBbmRJbmZvcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHN0YXRlID0gc3RhdGVBbmRJbmZvc1tpXTtcbiAgICAgIHZhciBzdGF0ZVdpZHRoID0gc3RhdGUuYmJveC53O1xuICAgICAgdmFyIHN0YXRlSGVpZ2h0ID0gc3RhdGUuYmJveC5oO1xuLy8gICAgICB2YXIgc3RhdGVMYWJlbCA9IHN0YXRlLnN0YXRlLnZhbHVlO1xuICAgICAgdmFyIHJlbGF0aXZlWVBvcyA9IHN0YXRlLmJib3gueTtcbiAgICAgIHZhciBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWTtcblxuICAgICAgaWYgKHJlbGF0aXZlWVBvcyA8IDApIHtcbiAgICAgICAgaWYgKHVwV2lkdGggKyBzdGF0ZVdpZHRoIDwgd2lkdGgpIHtcbiAgICAgICAgICBzdGF0ZUNlbnRlclggPSBjZW50ZXJYIC0gYmVnaW5Qb3NYICsgYm94UGFkZGluZyArIHVwV2lkdGggKyBzdGF0ZVdpZHRoIC8gMjtcbiAgICAgICAgICBzdGF0ZUNlbnRlclkgPSBjZW50ZXJZIC0gYmVnaW5Qb3NZO1xuXG4gICAgICAgICAgZHJhd1N0YXRlQW5kSW5mb3NNb3JlU3BlY2lmaWMoe1xuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBjZW50ZXJYOiBzdGF0ZUNlbnRlclgsXG4gICAgICAgICAgICBjZW50ZXJZOiBzdGF0ZUNlbnRlclksXG4gICAgICAgICAgICBzdGF0ZVdpZHRoOiBzdGF0ZVdpZHRoLFxuICAgICAgICAgICAgc3RhdGVIZWlnaHQ6IHN0YXRlSGVpZ2h0LFxuICAgICAgICAgICAgc3RhdGVWYXJSYWRpdXM6IHN0YXRlVmFyUmFkaXVzLFxuICAgICAgICAgICAgdW5pdE9mSW5mb1JhZGl1czogdW5pdE9mSW5mb1JhZGl1c1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHVwV2lkdGggPSB1cFdpZHRoICsgd2lkdGggKyBib3hQYWRkaW5nO1xuICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZVlQb3MgPiAwKSB7XG4gICAgICAgIGlmIChkb3duV2lkdGggKyBzdGF0ZVdpZHRoIDwgd2lkdGgpIHtcbiAgICAgICAgICBzdGF0ZUNlbnRlclggPSBjZW50ZXJYIC0gYmVnaW5Qb3NYICsgYm94UGFkZGluZyArIGRvd25XaWR0aCArIHN0YXRlV2lkdGggLyAyO1xuICAgICAgICAgIHN0YXRlQ2VudGVyWSA9IGNlbnRlclkgKyBiZWdpblBvc1k7XG5cbiAgICAgICAgICBkcmF3U3RhdGVBbmRJbmZvc01vcmVTcGVjaWZpYyh7XG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIGNlbnRlclg6IHN0YXRlQ2VudGVyWCxcbiAgICAgICAgICAgIGNlbnRlclk6IHN0YXRlQ2VudGVyWSxcbiAgICAgICAgICAgIHN0YXRlV2lkdGg6IHN0YXRlV2lkdGgsXG4gICAgICAgICAgICBzdGF0ZUhlaWdodDogc3RhdGVIZWlnaHQsXG4gICAgICAgICAgICBzdGF0ZVZhclJhZGl1czogc3RhdGVWYXJSYWRpdXMsXG4gICAgICAgICAgICB1bml0T2ZJbmZvUmFkaXVzOiB1bml0T2ZJbmZvUmFkaXVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZG93bldpZHRoID0gZG93bldpZHRoICsgd2lkdGggKyBib3hQYWRkaW5nO1xuICAgICAgfVxuICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgLy9UaGlzIGlzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmRcbiAgICAgICQkLnNiZ24uZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG5cbiAgICAgIC8vdXBkYXRlIG5ldyBzdGF0ZSBhbmQgaW5mbyBwb3NpdGlvbihyZWxhdGl2ZSB0byBub2RlIGNlbnRlcilcbiAgICAgIHN0YXRlLmJib3gueCA9IChzdGF0ZUNlbnRlclggLSBjZW50ZXJYKSAqIDEwMCAvIG5vZGUud2lkdGgoKTtcbiAgICAgIHN0YXRlLmJib3gueSA9IChzdGF0ZUNlbnRlclkgLSBjZW50ZXJZKSAqIDEwMCAvIG5vZGUuaGVpZ2h0KCk7XG4gICAgfVxuICB9O1xuXG4gICQkLnNiZ24uZHJhd1N0YXRlVGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCB0ZXh0UHJvcCkge1xuICAgIHZhciBzdGF0ZVZhbHVlID0gdGV4dFByb3Auc3RhdGUudmFsdWUgfHwgJyc7XG4gICAgdmFyIHN0YXRlVmFyaWFibGUgPSB0ZXh0UHJvcC5zdGF0ZS52YXJpYWJsZSB8fCAnJztcblxuICAgIHZhciBzdGF0ZUxhYmVsID0gc3RhdGVWYWx1ZSArIChzdGF0ZVZhcmlhYmxlXG4gICAgICAgICAgICA/IFwiQFwiICsgc3RhdGVWYXJpYWJsZVxuICAgICAgICAgICAgOiBcIlwiKTtcblxuICAgIHZhciBmb250U2l6ZSA9IDk7IC8vIHBhcnNlSW50KHRleHRQcm9wLmhlaWdodCAvIDEuNSk7XG5cbiAgICB0ZXh0UHJvcC5mb250ID0gZm9udFNpemUgKyBcInB4IEFyaWFsXCI7XG4gICAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZUxhYmVsO1xuICAgIHRleHRQcm9wLmNvbG9yID0gXCIjMGYwZjBmXCI7XG4gICAgJCQuc2Jnbi5kcmF3VGV4dChjb250ZXh0LCB0ZXh0UHJvcCk7XG4gIH07XG5cbiAgJCQuc2Jnbi5kcmF3SW5mb1RleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgdGV4dFByb3ApIHtcbiAgICB2YXIgZm9udFNpemUgPSA5OyAvLyBwYXJzZUludCh0ZXh0UHJvcC5oZWlnaHQgLyAxLjUpO1xuICAgIHRleHRQcm9wLmZvbnQgPSBmb250U2l6ZSArIFwicHggQXJpYWxcIjtcbiAgICB0ZXh0UHJvcC5jb2xvciA9IFwiIzBmMGYwZlwiO1xuICAgICQkLnNiZ24uZHJhd1RleHQoY29udGV4dCwgdGV4dFByb3ApO1xuICB9O1xuXG4gICQkLnNiZ24uZHJhd1RleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgdGV4dFByb3AsIHRydW5jYXRlKSB7XG4gICAgdmFyIG9sZEZvbnQgPSBjb250ZXh0LmZvbnQ7XG4gICAgY29udGV4dC5mb250ID0gdGV4dFByb3AuZm9udDtcbiAgICBjb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGV4dFByb3AuY29sb3I7XG4gICAgdmFyIG9sZE9wYWNpdHkgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSB0ZXh0UHJvcC5vcGFjaXR5O1xuICAgIHZhciB0ZXh0O1xuICAgIFxuICAgIHRleHRQcm9wLmxhYmVsID0gdGV4dFByb3AubGFiZWwgfHwgJyc7XG4gICAgXG4gICAgaWYgKHRydW5jYXRlID09IGZhbHNlKSB7XG4gICAgICB0ZXh0ID0gdGV4dFByb3AubGFiZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHQgPSB0cnVuY2F0ZVRleHQodGV4dFByb3AsIGNvbnRleHQuZm9udCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgdGV4dFByb3AuY2VudGVyWCwgdGV4dFByb3AuY2VudGVyWSk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICBjb250ZXh0LmZvbnQgPSBvbGRGb250O1xuICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvbGRPcGFjaXR5O1xuICAgIC8vY29udGV4dC5zdHJva2UoKTtcbiAgfTtcblxuICBjeU1hdGguY2FsY3VsYXRlRGlzdGFuY2UgPSBmdW5jdGlvbiAocG9pbnQxLCBwb2ludDIpIHtcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnBvdyhwb2ludDFbMF0gLSBwb2ludDJbMF0sIDIpICsgTWF0aC5wb3cocG9pbnQxWzFdIC0gcG9pbnQyWzFdLCAyKTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGRpc3RhbmNlKTtcbiAgfTtcblxuICAkJC5zYmduLmNvbG9ycyA9IHtcbiAgICBjbG9uZTogXCIjYTlhOWE5XCJcbiAgfTtcblxuICAvKiogcmVzdWx0IG9mIHJlZmFjdG9yaW5nLCBubyBpZGVhIGZvciB0aGUgbmFtZSA6LyAqL1xuICB2YXIgZHJhd1N0YXRlQW5kSW5mb3NNb3JlU3BlY2lmaWMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICB2YXIgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0O1xuICAgIHZhciBub2RlID0gcGFyYW1zLm5vZGU7XG4gICAgdmFyIHN0YXRlID0gcGFyYW1zLnN0YXRlO1xuICAgIHZhciBjZW50ZXJYID0gcGFyYW1zLmNlbnRlclg7XG4gICAgdmFyIGNlbnRlclkgPSBwYXJhbXMuY2VudGVyWTtcbiAgICB2YXIgc3RhdGVXaWR0aCA9IHBhcmFtcy5zdGF0ZVdpZHRoO1xuICAgIHZhciBzdGF0ZUhlaWdodCA9IHBhcmFtcy5zdGF0ZUhlaWdodDtcbiAgICB2YXIgc3RhdGVWYXJSYWRpdXMgPSBwYXJhbXMuc3RhdGVWYXJSYWRpdXM7XG4gICAgdmFyIHVuaXRPZkluZm9SYWRpdXMgPSBwYXJhbXMudW5pdE9mSW5mb1JhZGl1cztcbiAgICB2YXIgZG9TdHJva2UgPSBwYXJhbXMuZG9TdHJva2UgfHwgZmFsc2U7XG5cbiAgICB2YXIgdGV4dFByb3AgPSB7J2NlbnRlclgnOiBjZW50ZXJYLCAnY2VudGVyWSc6IGNlbnRlclksXG4gICAgICAnb3BhY2l0eSc6IG5vZGUuY3NzKCd0ZXh0LW9wYWNpdHknKSAqIG5vZGUuY3NzKCdvcGFjaXR5JyksXG4gICAgICAnd2lkdGgnOiBzdGF0ZVdpZHRoLCAnaGVpZ2h0Jzogc3RhdGVIZWlnaHR9O1xuXG4gICAgaWYgKHN0YXRlLmNsYXp6ID09IFwic3RhdGUgdmFyaWFibGVcIikgey8vZHJhdyBlbGxpcHNlXG4gICAgICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LCBNYXRoLm1pbihzdGF0ZVdpZHRoIC8gMiwgc3RhdGVIZWlnaHQgLyAyLCBzdGF0ZVZhclJhZGl1cykpO1xuICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgIHRleHRQcm9wLnN0YXRlID0gc3RhdGUuc3RhdGU7XG4gICAgICAkJC5zYmduLmRyYXdTdGF0ZVRleHQoY29udGV4dCwgdGV4dFByb3ApO1xuICAgICAgaWYgKGRvU3Ryb2tlKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICB9XG5cblxuICAgIH0gZWxzZSBpZiAoc3RhdGUuY2xhenogPT0gXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIpIHsvL2RyYXcgcmVjdGFuZ2xlXG4gICAgICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LFxuICAgICAgICAgICAgICBNYXRoLm1pbihzdGF0ZVdpZHRoIC8gMiwgc3RhdGVIZWlnaHQgLyAyLCB1bml0T2ZJbmZvUmFkaXVzKSk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZS5sYWJlbC50ZXh0IHx8ICcnOyAvLyA8LS0gZGlmZmVyZW50IGluIG9yaWdpbmFsXG4gICAgICAkJC5zYmduLmRyYXdJbmZvVGV4dChjb250ZXh0LCB0ZXh0UHJvcCk7XG4gICAgICBpZiAoZG9TdHJva2UpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gICQkLnNiZ24uZHJhd1N0YXRlQW5kSW5mb3MgPSBmdW5jdGlvbiAobm9kZSwgY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSkge1xuICAgIHZhciBzdGF0ZUFuZEluZm9zID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnN0YXRlc2FuZGluZm9zO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZUFuZEluZm9zLmxlbmd0aCAmJiBpIDwgNDsgaSsrKSB7XG4gICAgICB2YXIgc3RhdGUgPSBzdGF0ZUFuZEluZm9zW2ldO1xuICAgICAgdmFyIHN0YXRlV2lkdGggPSBzdGF0ZS5iYm94Lnc7XG4gICAgICB2YXIgc3RhdGVIZWlnaHQgPSBzdGF0ZS5iYm94Lmg7XG4gICAgICB2YXIgc3RhdGVDZW50ZXJYID0gc3RhdGUuYmJveC54ICogbm9kZS53aWR0aCgpIC8gMTAwICsgY2VudGVyWDtcbiAgICAgIHZhciBzdGF0ZUNlbnRlclkgPSBzdGF0ZS5iYm94LnkgKiBub2RlLmhlaWdodCgpIC8gMTAwICsgY2VudGVyWTtcblxuICAgICAgZHJhd1N0YXRlQW5kSW5mb3NNb3JlU3BlY2lmaWMoe1xuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIGNlbnRlclg6IHN0YXRlQ2VudGVyWCxcbiAgICAgICAgY2VudGVyWTogc3RhdGVDZW50ZXJZLFxuICAgICAgICBzdGF0ZVdpZHRoOiBzdGF0ZVdpZHRoLFxuICAgICAgICBzdGF0ZUhlaWdodDogc3RhdGVIZWlnaHQsXG4gICAgICAgIHN0YXRlVmFyUmFkaXVzOiBzdGF0ZVZhclJhZGl1cyxcbiAgICAgICAgdW5pdE9mSW5mb1JhZGl1czogdW5pdE9mSW5mb1JhZGl1cyxcbiAgICAgICAgZG9TdHJva2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL1RoaXMgaXMgYSB0ZW1wb3Jhcnkgd29ya2Fyb3VuZFxuICAgICQkLnNiZ24uZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG4gIH07XG5cbiAgJCQuc2Jnbi5udWNsZWljQWNpZENoZWNrUG9pbnQgPSBmdW5jdGlvbiAoeCwgeSwgY2VudGVyWCwgY2VudGVyWSwgbm9kZSwgdGhyZXNob2xkLCBwb2ludHMsIGNvcm5lclJhZGl1cykge1xuICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuXG4gICAgLy9jaGVjayByZWN0YW5nbGUgYXQgdG9wXG4gICAgaWYgKGN5TWF0aC5wb2ludEluc2lkZVBvbHlnb24oeCwgeSwgcG9pbnRzLFxuICAgICAgICAgICAgY2VudGVyWCwgY2VudGVyWSAtIGNvcm5lclJhZGl1cyAvIDIsIHdpZHRoLCBoZWlnaHQgLSBjb3JuZXJSYWRpdXMgLyAzLCBbMCwgLTFdLFxuICAgICAgICAgICAgcGFkZGluZykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vY2hlY2sgcmVjdGFuZ2xlIGF0IGJvdHRvbVxuICAgIGlmIChjeU1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKHgsIHksIHBvaW50cyxcbiAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gY29ybmVyUmFkaXVzIC8gMiwgd2lkdGggLSAyICogY29ybmVyUmFkaXVzLCBjb3JuZXJSYWRpdXMsIFswLCAtMV0sXG4gICAgICAgICAgICBwYWRkaW5nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy9jaGVjayBlbGxpcHNlc1xuICAgIHZhciBjaGVja0luRWxsaXBzZSA9IGZ1bmN0aW9uICh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nKSB7XG4gICAgICB4IC09IGNlbnRlclg7XG4gICAgICB5IC09IGNlbnRlclk7XG5cbiAgICAgIHggLz0gKHdpZHRoIC8gMiArIHBhZGRpbmcpO1xuICAgICAgeSAvPSAoaGVpZ2h0IC8gMiArIHBhZGRpbmcpO1xuXG4gICAgICByZXR1cm4gKE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikgPD0gMSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYm90dG9tIHJpZ2h0IHF1YXJ0ZXIgY2lyY2xlXG4gICAgaWYgKGNoZWNrSW5FbGxpcHNlKHgsIHksXG4gICAgICAgICAgICBjZW50ZXJYICsgd2lkdGggLyAyIC0gY29ybmVyUmFkaXVzLFxuICAgICAgICAgICAgY2VudGVyWSArIGhlaWdodCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMgKiAyLCBjb3JuZXJSYWRpdXMgKiAyLCBwYWRkaW5nKSkge1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBib3R0b20gbGVmdCBxdWFydGVyIGNpcmNsZVxuICAgIGlmIChjaGVja0luRWxsaXBzZSh4LCB5LFxuICAgICAgICAgICAgY2VudGVyWCAtIHdpZHRoIC8gMiArIGNvcm5lclJhZGl1cyxcbiAgICAgICAgICAgIGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gY29ybmVyUmFkaXVzLFxuICAgICAgICAgICAgY29ybmVyUmFkaXVzICogMiwgY29ybmVyUmFkaXVzICogMiwgcGFkZGluZykpIHtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vd2UgbmVlZCB0byBmb3JjZSBvcGFjaXR5IHRvIDEgc2luY2Ugd2UgbWlnaHQgaGF2ZSBzdGF0ZSBhbmQgaW5mbyBib3hlcy5cbiAgLy9oYXZpbmcgb3BhcXVlIG5vZGVzIHdoaWNoIGhhdmUgc3RhdGUgYW5kIGluZm8gYm94ZXMgZ2l2ZXMgdW5wbGVhc2VudCByZXN1bHRzLlxuICAkJC5zYmduLmZvcmNlT3BhY2l0eVRvT25lID0gZnVuY3Rpb24gKG5vZGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcGFyZW50T3BhY2l0eSA9IG5vZGUuZWZmZWN0aXZlT3BhY2l0eSgpO1xuICAgIGlmIChwYXJlbnRPcGFjaXR5ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBcInJnYmEoXCJcbiAgICAgICAgICAgICsgbm9kZS5fcHJpdmF0ZS5zdHlsZVtcImJhY2tncm91bmQtY29sb3JcIl0udmFsdWVbMF0gKyBcIixcIlxuICAgICAgICAgICAgKyBub2RlLl9wcml2YXRlLnN0eWxlW1wiYmFja2dyb3VuZC1jb2xvclwiXS52YWx1ZVsxXSArIFwiLFwiXG4gICAgICAgICAgICArIG5vZGUuX3ByaXZhdGUuc3R5bGVbXCJiYWNrZ3JvdW5kLWNvbG9yXCJdLnZhbHVlWzJdICsgXCIsXCJcbiAgICAgICAgICAgICsgKDEgKiBub2RlLmNzcygnb3BhY2l0eScpICogcGFyZW50T3BhY2l0eSkgKyBcIilcIjtcbiAgfTtcblxuICAkJC5zYmduLmRyYXdTaW1wbGVDaGVtaWNhbFBhdGggPSBmdW5jdGlvbiAoXG4gICAgICAgICAgY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG4gICAgLy92YXIgY29ybmVyUmFkaXVzID0gJCQubWF0aC5nZXRSb3VuZFJlY3RhbmdsZVJhZGl1cyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgY29ybmVyUmFkaXVzID0gTWF0aC5taW4oaGFsZldpZHRoLCBoYWxmSGVpZ2h0KTtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh4LCB5KTtcblxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAvLyBTdGFydCBhdCB0b3AgbWlkZGxlXG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLWhhbGZIZWlnaHQpO1xuICAgIC8vIEFyYyBmcm9tIG1pZGRsZSB0b3AgdG8gcmlnaHQgc2lkZVxuICAgIGNvbnRleHQuYXJjVG8oaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgaGFsZldpZHRoLCAwLCBjb3JuZXJSYWRpdXMpO1xuICAgIC8vIEFyYyBmcm9tIHJpZ2h0IHNpZGUgdG8gYm90dG9tXG4gICAgY29udGV4dC5hcmNUbyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIDAsIGhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gICAgLy8gQXJjIGZyb20gYm90dG9tIHRvIGxlZnQgc2lkZVxuICAgIGNvbnRleHQuYXJjVG8oLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZXaWR0aCwgMCwgY29ybmVyUmFkaXVzKTtcbiAgICAvLyBBcmMgZnJvbSBsZWZ0IHNpZGUgdG8gdG9wQm9yZGVyXG4gICAgY29udGV4dC5hcmNUbygtaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgMCwgLWhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gICAgLy8gSm9pbiBsaW5lXG4gICAgY29udGV4dC5saW5lVG8oMCwgLWhhbGZIZWlnaHQpO1xuXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgIGNvbnRleHQudHJhbnNsYXRlKC14LCAteSk7XG4gIH07XG5cbiAgJCQuc2Jnbi5kcmF3U2ltcGxlQ2hlbWljYWwgPSBmdW5jdGlvbiAoXG4gICAgICAgICAgY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICQkLnNiZ24uZHJhd1NpbXBsZUNoZW1pY2FsUGF0aChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzaW1wbGVDaGVtaWNhbExlZnRDbG9uZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBvcGFjaXR5KSB7XG4gICAgaWYgKGNsb25lTWFya2VyICE9IG51bGwpIHtcbiAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAkJC5zYmduLmNvbG9ycy5jbG9uZTtcblxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgY29udGV4dC5zY2FsZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXG4gICAgICB2YXIgbWFya2VyQmVnaW5YID0gLTEgKiBNYXRoLnNpbihNYXRoLlBJIC8gMyk7XG4gICAgICB2YXIgbWFya2VyQmVnaW5ZID0gTWF0aC5jb3MoTWF0aC5QSSAvIDMpO1xuICAgICAgdmFyIG1hcmtlckVuZFggPSAwO1xuICAgICAgdmFyIG1hcmtlckVuZFkgPSBtYXJrZXJCZWdpblk7XG5cbiAgICAgIGNvbnRleHQubW92ZVRvKG1hcmtlckJlZ2luWCwgbWFya2VyQmVnaW5ZKTtcbiAgICAgIGNvbnRleHQubGluZVRvKG1hcmtlckVuZFgsIG1hcmtlckVuZFkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgMSwgMyAqIE1hdGguUEkgLyA2LCA1ICogTWF0aC5QSSAvIDYpO1xuXG4gICAgICBjb250ZXh0LnNjYWxlKDIgLyB3aWR0aCwgMiAvIGhlaWdodCk7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY2VudGVyWCwgLWNlbnRlclkpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgIH1cbiAgfVxuICA7XG5cbiAgZnVuY3Rpb24gc2ltcGxlQ2hlbWljYWxSaWdodENsb25lKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIG9wYWNpdHkpIHtcbiAgICBpZiAoY2xvbmVNYXJrZXIgIT0gbnVsbCkge1xuICAgICAgdmFyIG9sZEdsb2JhbEFscGhhID0gY29udGV4dC5nbG9iYWxBbHBoYTtcbiAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICQkLnNiZ24uY29sb3JzLmNsb25lO1xuXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICBjb250ZXh0LnNjYWxlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG5cbiAgICAgIHZhciBtYXJrZXJCZWdpblggPSAwO1xuICAgICAgdmFyIG1hcmtlckJlZ2luWSA9IE1hdGguY29zKE1hdGguUEkgLyAzKTtcbiAgICAgIHZhciBtYXJrZXJFbmRYID0gMSAqIE1hdGguc2luKE1hdGguUEkgLyAzKTtcbiAgICAgIHZhciBtYXJrZXJFbmRZID0gbWFya2VyQmVnaW5ZO1xuXG4gICAgICBjb250ZXh0Lm1vdmVUbyhtYXJrZXJCZWdpblgsIG1hcmtlckJlZ2luWSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhtYXJrZXJFbmRYLCBtYXJrZXJFbmRZKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIDEsIE1hdGguUEkgLyA2LCAzICogTWF0aC5QSSAvIDYpO1xuXG4gICAgICBjb250ZXh0LnNjYWxlKDIgLyB3aWR0aCwgMiAvIGhlaWdodCk7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY2VudGVyWCwgLWNlbnRlclkpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgIH1cbiAgfTtcblxuICAkJC5zYmduLmRyYXdFbGxpcHNlUGF0aCA9IGZ1bmN0aW9uIChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY3lCYXNlTm9kZVNoYXBlc1snZWxsaXBzZSddLmRyYXdQYXRoKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICB9O1xuXG4gICQkLnNiZ24uZHJhd051Y0FjaWRGZWF0dXJlID0gZnVuY3Rpb24gKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgICAgY2VudGVyWCwgY2VudGVyWSwgY29ybmVyUmFkaXVzKSB7XG4gICAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cbiAgICBjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgY29udGV4dC5tb3ZlVG8oLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQpO1xuICAgIGNvbnRleHQubGluZVRvKGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQpO1xuICAgIGNvbnRleHQubGluZVRvKGhhbGZXaWR0aCwgMCk7XG4gICAgY29udGV4dC5hcmNUbyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIDAsIGhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gICAgY29udGV4dC5hcmNUbygtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCAtaGFsZldpZHRoLCAwLCBjb3JuZXJSYWRpdXMpO1xuICAgIGNvbnRleHQubGluZVRvKC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0KTtcblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC50cmFuc2xhdGUoLWNlbnRlclgsIC1jZW50ZXJZKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgfTtcblxuICAkJC5zYmduLmlzTXVsdGltZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBzYmduQ2xhc3MgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xhc3M7XG4gICAgaWYgKHNiZ25DbGFzcyAmJiBzYmduQ2xhc3MuaW5kZXhPZihcIm11bHRpbWVyXCIpICE9IC0xKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vdGhpcyBmdW5jdGlvbiBpcyBjcmVhdGVkIHRvIGhhdmUgc2FtZSBjb3JuZXIgbGVuZ3RoIHdoZW5cbiAgLy9jb21wbGV4J3Mgd2lkdGggb3IgaGVpZ2h0IGlzIGNoYW5nZWRcbiAgJCQuc2Jnbi5nZW5lcmF0ZUNvbXBsZXhTaGFwZVBvaW50cyA9IGZ1bmN0aW9uIChjb3JuZXJMZW5ndGgsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvL2NwIHN0YW5kcyBmb3IgY29ybmVyIHByb3BvcnRpb25cbiAgICB2YXIgY3BYID0gY29ybmVyTGVuZ3RoIC8gd2lkdGg7XG4gICAgdmFyIGNwWSA9IGNvcm5lckxlbmd0aCAvIGhlaWdodDtcblxuICAgIHZhciBjb21wbGV4UG9pbnRzID0gWy0xICsgY3BYLCAtMSwgLTEsIC0xICsgY3BZLCAtMSwgMSAtIGNwWSwgLTEgKyBjcFgsXG4gICAgICAxLCAxIC0gY3BYLCAxLCAxLCAxIC0gY3BZLCAxLCAtMSArIGNwWSwgMSAtIGNwWCwgLTFdO1xuXG4gICAgcmV0dXJuIGNvbXBsZXhQb2ludHM7XG4gIH07XG5cbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ3NvdXJjZSBhbmQgc2luaycpO1xuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5ub2RlU2hhcGUuZW51bXMucHVzaCgnbnVjbGVpYyBhY2lkIGZlYXR1cmUnKTtcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ2NvbXBsZXgnKTtcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ21hY3JvbW9sZWN1bGUnKTtcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ3NpbXBsZSBjaGVtaWNhbCcpO1xuXG4gICQkLnNiZ24ucmVnaXN0ZXJTYmduTm9kZVNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGN5QmFzZU5vZGVTaGFwZXNbXCJzaW1wbGUgY2hlbWljYWxcIl0gPSB7XG4gICAgICBtdWx0aW1lclBhZGRpbmc6IDUsXG4gICAgICBkcmF3OiBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5QmFzZU5vZGVTaGFwZXNbXCJzaW1wbGUgY2hlbWljYWxcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgbGFiZWwgPSBub2RlLl9wcml2YXRlLmRhdGEubGFiZWw7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIGNsb25lTWFya2VyID0gbm9kZS5fcHJpdmF0ZS5kYXRhLmNsb25lbWFya2VyO1xuXG4gICAgICAgIGlmICgkJC5zYmduLmlzTXVsdGltZXIobm9kZSkpIHtcbiAgICAgICAgICAvL2FkZCBtdWx0aW1lciBzaGFwZVxuICAgICAgICAgICQkLnNiZ24uZHJhd1NpbXBsZUNoZW1pY2FsKGNvbnRleHQsIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLnNpbXBsZUNoZW1pY2FsKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgd2lkdGggLSBwYWRkaW5nLCBoZWlnaHQgLSBwYWRkaW5nLCBjbG9uZU1hcmtlciwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgICAvL2NvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAkJC5zYmduLmRyYXdTaW1wbGVDaGVtaWNhbChjb250ZXh0LFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLnNpbXBsZUNoZW1pY2FsKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGggLSBwYWRkaW5nLCBoZWlnaHQgLSBwYWRkaW5nLCBjbG9uZU1hcmtlciwgZmFsc2UsXG4gICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpKTtcblxuLy8gICAgICAgIHZhciBub2RlUHJvcCA9IHsnbGFiZWwnOiBsYWJlbCwgJ2NlbnRlclgnOiBjZW50ZXJYLCAnY2VudGVyWSc6IGNlbnRlclksXG4vLyAgICAgICAgICAnb3BhY2l0eSc6IG5vZGUuX3ByaXZhdGUuc3R5bGVbJ3RleHQtb3BhY2l0eSddLnZhbHVlLCAnd2lkdGgnOiBub2RlLndpZHRoKCksICdoZWlnaHQnOiBub2RlLmhlaWdodCgpfTtcbi8vICAgICAgICAkJC5zYmduLmRyYXdEeW5hbWljTGFiZWxUZXh0KGNvbnRleHQsIG5vZGVQcm9wKTtcblxuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgJCQuc2Jnbi5mb3JjZU9wYWNpdHlUb09uZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgJCQuc2Jnbi5kcmF3U3RhdGVBbmRJbmZvcyhub2RlLCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgIH0sXG4gICAgICBpbnRlcnNlY3RMaW5lOiBmdW5jdGlvbiAobm9kZSwgeCwgeSwgcG9ydElkKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcblxuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSk7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeUJhc2VOb2RlU2hhcGVzW1wic2ltcGxlIGNoZW1pY2FsXCJdLm11bHRpbWVyUGFkZGluZztcblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLmludGVyc2VjdExpbmVTdGF0ZUFuZEluZm9Cb3hlcyhcbiAgICAgICAgICAgICAgICBub2RlLCB4LCB5KTtcblxuICAgICAgICB2YXIgbm9kZUludGVyc2VjdExpbmVzID0gY3lCYXNlTm9kZVNoYXBlc1tcImVsbGlwc2VcIl0uaW50ZXJzZWN0TGluZShcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCBwYWRkaW5nKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gW107XG4gICAgICAgIGlmICgkJC5zYmduLmlzTXVsdGltZXIobm9kZSkpIHtcbiAgICAgICAgICBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gY3lCYXNlTm9kZVNoYXBlc1tcImVsbGlwc2VcIl0uaW50ZXJzZWN0TGluZShcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0LCB4LCB5LCBwYWRkaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25zID0gc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMuY29uY2F0KG5vZGVJbnRlcnNlY3RMaW5lcywgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyk7XG5cbiAgICAgICAgcmV0dXJuICQkLnNiZ24uY2xvc2VzdEludGVyc2VjdGlvblBvaW50KFt4LCB5XSwgaW50ZXJzZWN0aW9ucyk7XG4gICAgICB9LFxuICAgICAgY2hlY2tQb2ludDogZnVuY3Rpb24gKHgsIHksIG5vZGUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBwYXJzZUludChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpIC8gMjtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5QmFzZU5vZGVTaGFwZXNbXCJzaW1wbGUgY2hlbWljYWxcIl0ubXVsdGltZXJQYWRkaW5nO1xuXG4gICAgICAgIHZhciBub2RlQ2hlY2tQb2ludCA9IGN5QmFzZU5vZGVTaGFwZXNbXCJyb3VuZHJlY3RhbmdsZVwiXS5jaGVja1BvaW50KHgsIHksXG4gICAgICAgICAgICAgICAgcGFkZGluZywgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZKTtcblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludCA9ICQkLnNiZ24uY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckNoZWNrUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVyQ2hlY2tQb2ludCA9IGN5QmFzZU5vZGVTaGFwZXNbXCJlbGxpcHNlXCJdLmNoZWNrUG9pbnQoeCwgeSxcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmcsIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlQ2hlY2tQb2ludCB8fCBzdGF0ZUFuZEluZm9DaGVja1BvaW50IHx8IG11bHRpbWVyQ2hlY2tQb2ludDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY3lCYXNlTm9kZVNoYXBlc1tcIm1hY3JvbW9sZWN1bGVcIl0gPSB7XG4gICAgICBwb2ludHM6IGN5TWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzKDQsIDApLFxuICAgICAgbXVsdGltZXJQYWRkaW5nOiA1LFxuICAgICAgZHJhdzogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgbGFiZWwgPSBub2RlLl9wcml2YXRlLmRhdGEubGFiZWw7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeUJhc2VOb2RlU2hhcGVzW1wibWFjcm9tb2xlY3VsZVwiXS5tdWx0aW1lclBhZGRpbmc7XG4gICAgICAgIHZhciBjbG9uZU1hcmtlciA9IG5vZGUuX3ByaXZhdGUuZGF0YS5jbG9uZW1hcmtlcjtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBwYXJzZUludChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpO1xuXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciBzYmduIGNsYXNzIGluY2x1ZGVzIG11bHRpbWVyIHN1YnN0cmluZyBvciBub3RcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIC8vYWRkIG11bHRpbWVyIHNoYXBlXG4gICAgICAgICAgZHJhd1JvdW5kUmVjdGFuZ2xlUGF0aChjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIubWFjcm9tb2xlY3VsZShjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCB0cnVlLFxuICAgICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpKTtcblxuICAgICAgICAgIC8vY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdSb3VuZFJlY3RhbmdsZVBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIubWFjcm9tb2xlY3VsZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBmYWxzZSxcbiAgICAgICAgICAgICAgICBub2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5JykpO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICAkJC5zYmduLmZvcmNlT3BhY2l0eVRvT25lKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICAkJC5zYmduLmRyYXdTdGF0ZUFuZEluZm9zKG5vZGUsIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuXG4vLyAgICAgICAgdmFyIG5vZGVQcm9wID0geydsYWJlbCc6IGxhYmVsLCAnY2VudGVyWCc6IGNlbnRlclgsICdjZW50ZXJZJzogY2VudGVyWSxcbi8vICAgICAgICAgICdvcGFjaXR5Jzogbm9kZS5fcHJpdmF0ZS5zdHlsZVsndGV4dC1vcGFjaXR5J10udmFsdWUsICd3aWR0aCc6IG5vZGUud2lkdGgoKSwgJ2hlaWdodCc6IG5vZGUuaGVpZ2h0KCl9O1xuICAgICAgfSxcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lCYXNlTm9kZVNoYXBlc1tcIm1hY3JvbW9sZWN1bGVcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcyA9ICQkLnNiZ24uaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzKFxuICAgICAgICAgICAgICAgIG5vZGUsIHgsIHkpO1xuXG4gICAgICAgIHZhciBub2RlSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLnJvdW5kUmVjdGFuZ2xlSW50ZXJzZWN0TGluZShcbiAgICAgICAgICAgICAgICB4LCB5LFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cywgcGFkZGluZyk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICB2YXIgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9IFtdO1xuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9ICQkLnNiZ24ucm91bmRSZWN0YW5nbGVJbnRlcnNlY3RMaW5lKFxuICAgICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cywgcGFkZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IHN0YXRlQW5kSW5mb0ludGVyc2VjdExpbmVzLmNvbmNhdChub2RlSW50ZXJzZWN0TGluZXMsIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMpO1xuXG4gICAgICAgIHJldHVybiAkJC5zYmduLmNsb3Nlc3RJbnRlcnNlY3Rpb25Qb2ludChbeCwgeV0sIGludGVyc2VjdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGNoZWNrUG9pbnQ6IGZ1bmN0aW9uICh4LCB5LCBub2RlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCkgKyB0aHJlc2hvbGQ7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpICsgdGhyZXNob2xkO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lCYXNlTm9kZVNoYXBlc1tcIm1hY3JvbW9sZWN1bGVcIl0ubXVsdGltZXJQYWRkaW5nO1xuXG4gICAgICAgIHZhciBub2RlQ2hlY2tQb2ludCA9IGN5QmFzZU5vZGVTaGFwZXNbXCJyb3VuZHJlY3RhbmdsZVwiXS5jaGVja1BvaW50KHgsIHksIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gJCQuc2Jnbi5jaGVja1BvaW50U3RhdGVBbmRJbmZvQm94ZXMoeCwgeSwgbm9kZSxcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQpO1xuXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciBzYmduIGNsYXNzIGluY2x1ZGVzIG11bHRpbWVyIHN1YnN0cmluZyBvciBub3RcbiAgICAgICAgdmFyIG11bHRpbWVyQ2hlY2tQb2ludCA9IGZhbHNlO1xuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgbXVsdGltZXJDaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcInJvdW5kcmVjdGFuZ2xlXCJdLmNoZWNrUG9pbnQoeCwgeSwgcGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVDaGVja1BvaW50IHx8IHN0YXRlQW5kSW5mb0NoZWNrUG9pbnQgfHwgbXVsdGltZXJDaGVja1BvaW50O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjeUJhc2VOb2RlU2hhcGVzW1wiY29tcGxleFwiXSA9IHtcbiAgICAgIHBvaW50czogW10sXG4gICAgICBtdWx0aW1lclBhZGRpbmc6IDUsXG4gICAgICBjb3JuZXJMZW5ndGg6IDEyLFxuICAgICAgZHJhdzogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS5vdXRlcldpZHRoKCkgLSBwYXJzZUZsb2F0KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLm91dGVySGVpZ2h0KCktIHBhcnNlRmxvYXQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvcyA9IG5vZGUuX3ByaXZhdGUuZGF0YS5zdGF0ZXNhbmRpbmZvcztcbiAgICAgICAgdmFyIGxhYmVsID0gbm9kZS5fcHJpdmF0ZS5kYXRhLmxhYmVsO1xuICAgICAgICB2YXIgY29ybmVyTGVuZ3RoID0gY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0uY29ybmVyTGVuZ3RoO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ucG9pbnRzID0gJCQuc2Jnbi5nZW5lcmF0ZUNvbXBsZXhTaGFwZVBvaW50cyhjb3JuZXJMZW5ndGgsXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICBkcmF3UG9seWdvblBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjeUJhc2VOb2RlU2hhcGVzW1wiY29tcGxleFwiXS5wb2ludHMpO1xuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIuY29tcGxleChjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNvcm5lckxlbmd0aCwgY2xvbmVNYXJrZXIsIHRydWUsXG4gICAgICAgICAgICAgICAgICBub2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5JykpO1xuXG4gICAgICAgICAgLy9jb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd1BvbHlnb25QYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjeUJhc2VOb2RlU2hhcGVzW1wiY29tcGxleFwiXS5wb2ludHMpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIuY29tcGxleChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNvcm5lckxlbmd0aCwgY2xvbmVNYXJrZXIsIGZhbHNlLFxuICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgICAgICQkLnNiZ24uZm9yY2VPcGFjaXR5VG9PbmUobm9kZSwgY29udGV4dCk7XG4gICAgICAgICQkLnNiZ24uZHJhd0NvbXBsZXhTdGF0ZUFuZEluZm8oY29udGV4dCwgbm9kZSwgc3RhdGVBbmRJbmZvcywgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgICB9LFxuLy8gICAgICBpbnRlcnNlY3RMaW5lOiBjeUJhc2VOb2RlU2hhcGVzW1wicm91bmRyZWN0YW5nbGVcIl0uaW50ZXJzZWN0TGluZSxcbi8vICAgICAgY2hlY2tQb2ludDogY3lCYXNlTm9kZVNoYXBlc1tcInJvdW5kcmVjdGFuZ2xlXCJdLmNoZWNrUG9pbnRcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLm91dGVyV2lkdGgoKSAtIHBhcnNlRmxvYXQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUub3V0ZXJIZWlnaHQoKSAtIHBhcnNlRmxvYXQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBwYXJzZUludChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpIC8gMjtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5QmFzZU5vZGVTaGFwZXNbXCJjb21wbGV4XCJdLm11bHRpbWVyUGFkZGluZztcbiAgICAgICAgdmFyIGNvcm5lckxlbmd0aCA9IGN5QmFzZU5vZGVTaGFwZXNbXCJjb21wbGV4XCJdLmNvcm5lckxlbmd0aDtcblxuICAgICAgICBjeUJhc2VOb2RlU2hhcGVzW1wiY29tcGxleFwiXS5wb2ludHMgPSAkJC5zYmduLmdlbmVyYXRlQ29tcGxleFNoYXBlUG9pbnRzKGNvcm5lckxlbmd0aCxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLmludGVyc2VjdExpbmVTdGF0ZUFuZEluZm9Cb3hlcyhcbiAgICAgICAgICAgICAgICBub2RlLCB4LCB5KTtcblxuICAgICAgICB2YXIgbm9kZUludGVyc2VjdExpbmVzID0gY3lNYXRoLnBvbHlnb25JbnRlcnNlY3RMaW5lKFxuICAgICAgICAgICAgICAgIHgsIHksXG4gICAgICAgICAgICAgICAgY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ucG9pbnRzLFxuICAgICAgICAgICAgICAgIGNlbnRlclgsXG4gICAgICAgICAgICAgICAgY2VudGVyWSxcbiAgICAgICAgICAgICAgICB3aWR0aCAvIDIsIGhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgcGFkZGluZyk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICB2YXIgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9IFtdO1xuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9IGN5TWF0aC5wb2x5Z29uSW50ZXJzZWN0TGluZShcbiAgICAgICAgICAgICAgICAgIHgsIHksXG4gICAgICAgICAgICAgICAgICBjeUJhc2VOb2RlU2hhcGVzW1wiY29tcGxleFwiXS5wb2ludHMsXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGludGVyc2VjdGlvbnMgPSBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcy5jb25jYXQobm9kZUludGVyc2VjdExpbmVzLCBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzKTtcblxuICAgICAgICByZXR1cm4gJCQuc2Jnbi5jbG9zZXN0SW50ZXJzZWN0aW9uUG9pbnQoW3gsIHldLCBpbnRlcnNlY3Rpb25zKTtcbiAgICAgIH0sXG4gICAgICBjaGVja1BvaW50OiBmdW5jdGlvbiAoeCwgeSwgbm9kZSwgdGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIHdpZHRoID0gKG5vZGUub3V0ZXJXaWR0aCgpIC0gcGFyc2VGbG9hdChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpKSArIHRocmVzaG9sZDtcbiAgICAgICAgdmFyIGhlaWdodCA9IChub2RlLm91dGVySGVpZ2h0KCkgLSBwYXJzZUZsb2F0KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkpICsgdGhyZXNob2xkO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY29ybmVyTGVuZ3RoID0gY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0uY29ybmVyTGVuZ3RoO1xuXG4gICAgICAgIGN5QmFzZU5vZGVTaGFwZXNbXCJjb21wbGV4XCJdLnBvaW50cyA9ICQkLnNiZ24uZ2VuZXJhdGVDb21wbGV4U2hhcGVQb2ludHMoY29ybmVyTGVuZ3RoLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHZhciBub2RlQ2hlY2tQb2ludCA9IGN5TWF0aC5wb2ludEluc2lkZVBvbHlnb24oeCwgeSwgY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ucG9pbnRzLFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gJCQuc2Jnbi5jaGVja1BvaW50U3RhdGVBbmRJbmZvQm94ZXMoeCwgeSwgbm9kZSxcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQpO1xuXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciBzYmduIGNsYXNzIGluY2x1ZGVzIG11bHRpbWVyIHN1YnN0cmluZyBvciBub3RcbiAgICAgICAgdmFyIG11bHRpbWVyQ2hlY2tQb2ludCA9IGZhbHNlO1xuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgbXVsdGltZXJDaGVja1BvaW50ID0gY3lNYXRoLnBvaW50SW5zaWRlUG9seWdvbih4LCB5LFxuICAgICAgICAgICAgICAgICAgY3lCYXNlTm9kZVNoYXBlc1tcImNvbXBsZXhcIl0ucG9pbnRzLFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZUNoZWNrUG9pbnQgfHwgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludCB8fCBtdWx0aW1lckNoZWNrUG9pbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGN5QmFzZU5vZGVTaGFwZXNbXCJudWNsZWljIGFjaWQgZmVhdHVyZVwiXSA9IHtcbiAgICAgIHBvaW50czogY3lNYXRoLmdlbmVyYXRlVW5pdE5nb25Qb2ludHNGaXRUb1NxdWFyZSg0LCAwKSxcbiAgICAgIG11bHRpbWVyUGFkZGluZzogNSxcbiAgICAgIGRyYXc6IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgO1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgbGFiZWwgPSBub2RlLl9wcml2YXRlLmRhdGEubGFiZWw7XG4gICAgICAgIHZhciBjb3JuZXJSYWRpdXMgPSBjeU1hdGguZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeUJhc2VOb2RlU2hhcGVzW1wibnVjbGVpYyBhY2lkIGZlYXR1cmVcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICAkJC5zYmduLmRyYXdOdWNBY2lkRmVhdHVyZShjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsIGNvcm5lclJhZGl1cyk7XG5cbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5udWNsZWljQWNpZEZlYXR1cmUoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgICAvL2NvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAkJC5zYmduLmRyYXdOdWNBY2lkRmVhdHVyZShjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIGNlbnRlclksIGNvcm5lclJhZGl1cyk7XG5cbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLm51Y2xlaWNBY2lkRmVhdHVyZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBmYWxzZSxcbiAgICAgICAgICAgICAgICBub2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5JykpO1xuXG4vLyAgICAgICAgdmFyIG5vZGVQcm9wID0geydsYWJlbCc6IGxhYmVsLCAnY2VudGVyWCc6IGNlbnRlclgsICdjZW50ZXJZJzogY2VudGVyWSxcbi8vICAgICAgICAgICdvcGFjaXR5Jzogbm9kZS5fcHJpdmF0ZS5zdHlsZVsndGV4dC1vcGFjaXR5J10udmFsdWUsICd3aWR0aCc6IG5vZGUud2lkdGgoKSwgJ2hlaWdodCc6IG5vZGUuaGVpZ2h0KCl9O1xuXG4vLyAgICAgICAgJCQuc2Jnbi5kcmF3RHluYW1pY0xhYmVsVGV4dChjb250ZXh0LCBub2RlUHJvcCk7XG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICAkJC5zYmduLmZvcmNlT3BhY2l0eVRvT25lKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICAkJC5zYmduLmRyYXdTdGF0ZUFuZEluZm9zKG5vZGUsIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgfSxcbiAgICAgIGRyYXdQYXRoOiBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuXG4gICAgICB9LFxuICAgICAgaW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKG5vZGUsIHgsIHksIHBvcnRJZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeUJhc2VOb2RlU2hhcGVzW1wibnVjbGVpYyBhY2lkIGZlYXR1cmVcIl0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcyA9ICQkLnNiZ24uaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzKFxuICAgICAgICAgICAgICAgIG5vZGUsIHgsIHkpO1xuXG4gICAgICAgIHZhciBub2RlSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLm51Y2xlaWNBY2lkSW50ZXJzZWN0aW9uTGluZShub2RlLFxuICAgICAgICAgICAgICAgIHgsIHksIGNlbnRlclgsIGNlbnRlclksIGNvcm5lclJhZGl1cyk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICB2YXIgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9IFtdO1xuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyA9ICQkLnNiZ24ubnVjbGVpY0FjaWRJbnRlcnNlY3Rpb25MaW5lKG5vZGUsXG4gICAgICAgICAgICAgICAgICB4LCB5LCBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25zID0gc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMuY29uY2F0KG5vZGVJbnRlcnNlY3RMaW5lcyxcbiAgICAgICAgICAgICAgICBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzKTtcblxuICAgICAgICByZXR1cm4gJCQuc2Jnbi5jbG9zZXN0SW50ZXJzZWN0aW9uUG9pbnQoW3gsIHldLCBpbnRlcnNlY3Rpb25zKTtcbiAgICAgIH0sXG4gICAgICBjaGVja1BvaW50OiBmdW5jdGlvbiAoeCwgeSwgbm9kZSwgdGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5QmFzZU5vZGVTaGFwZXNbXCJudWNsZWljIGFjaWQgZmVhdHVyZVwiXS5tdWx0aW1lclBhZGRpbmc7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBjb3JuZXJSYWRpdXMgPSBjeU1hdGguZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgdmFyIG5vZGVDaGVja1BvaW50ID0gJCQuc2Jnbi5udWNsZWljQWNpZENoZWNrUG9pbnQoeCwgeSwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgICAgICBub2RlLCB0aHJlc2hvbGQsIHRoaXMucG9pbnRzLCBjb3JuZXJSYWRpdXMpO1xuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludCA9ICQkLnNiZ24uY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckNoZWNrUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVyQ2hlY2tQb2ludCA9ICQkLnNiZ24ubnVjbGVpY0FjaWRDaGVja1BvaW50KHgsIHksXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgbm9kZSwgdGhyZXNob2xkLCB0aGlzLnBvaW50cywgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlQ2hlY2tQb2ludCB8fCBzdGF0ZUFuZEluZm9DaGVja1BvaW50IHx8IG11bHRpbWVyQ2hlY2tQb2ludDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGN5QmFzZU5vZGVTaGFwZXNbXCJzb3VyY2UgYW5kIHNpbmtcIl0gPSB7XG4gICAgICBwb2ludHM6IGN5TWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzKDQsIDApLFxuICAgICAgZHJhdzogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuXG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBsYWJlbCA9IG5vZGUuX3ByaXZhdGUuZGF0YS5sYWJlbDtcbiAgICAgICAgdmFyIHB0cyA9IGN5QmFzZU5vZGVTaGFwZXNbXCJzb3VyY2UgYW5kIHNpbmtcIl0ucG9pbnRzO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgJCQuc2Jnbi5kcmF3RWxsaXBzZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIGNvbnRleHQuc2NhbGUod2lkdGggKiBNYXRoLnNxcnQoMikgLyAyLCBoZWlnaHQgKiBNYXRoLnNxcnQoMikgLyAyKTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwdHNbMl0sIHB0c1szXSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHB0c1s2XSwgcHRzWzddKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgICBjb250ZXh0LnNjYWxlKDIgLyAod2lkdGggKiBNYXRoLnNxcnQoMikpLCAyIC8gKGhlaWdodCAqIE1hdGguc3FydCgyKSkpO1xuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY2VudGVyWCwgLWNlbnRlclkpO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgIH0sXG4gICAgICBpbnRlcnNlY3RMaW5lOiBjeUJhc2VOb2RlU2hhcGVzW1wiZWxsaXBzZVwiXS5pbnRlcnNlY3RMaW5lLFxuICAgICAgY2hlY2tQb2ludDogY3lCYXNlTm9kZVNoYXBlc1tcImVsbGlwc2VcIl0uY2hlY2tQb2ludFxuICAgIH07XG4gIH07XG5cbiAgJCQuc2Jnbi5kcmF3RWxsaXBzZSA9IGZ1bmN0aW9uIChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8kJC5zYmduLmRyYXdFbGxpcHNlUGF0aChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAvL2NvbnRleHQuZmlsbCgpO1xuICAgIGN5QmFzZU5vZGVTaGFwZXNbJ2VsbGlwc2UnXS5kcmF3KGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICB9O1xuXG4gICQkLnNiZ24uY2xvbmVNYXJrZXIgPSB7XG4gICAgc2ltcGxlQ2hlbWljYWw6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIGlzTXVsdGltZXIsIG9wYWNpdHkpIHtcbiAgICAgIGlmIChjbG9uZU1hcmtlciAhPSBudWxsKSB7XG4gICAgICAgIHZhciBjb3JuZXJSYWRpdXMgPSBNYXRoLm1pbih3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXG4gICAgICAgIHZhciBmaXJzdENpcmNsZUNlbnRlclggPSBjZW50ZXJYIC0gd2lkdGggLyAyICsgY29ybmVyUmFkaXVzO1xuICAgICAgICB2YXIgZmlyc3RDaXJjbGVDZW50ZXJZID0gY2VudGVyWTtcbiAgICAgICAgdmFyIHNlY29uZENpcmNsZUNlbnRlclggPSBjZW50ZXJYICsgd2lkdGggLyAyIC0gY29ybmVyUmFkaXVzO1xuICAgICAgICB2YXIgc2Vjb25kQ2lyY2xlQ2VudGVyWSA9IGNlbnRlclk7XG5cbiAgICAgICAgc2ltcGxlQ2hlbWljYWxMZWZ0Q2xvbmUoY29udGV4dCwgZmlyc3RDaXJjbGVDZW50ZXJYLCBmaXJzdENpcmNsZUNlbnRlclksXG4gICAgICAgICAgICAgICAgMiAqIGNvcm5lclJhZGl1cywgMiAqIGNvcm5lclJhZGl1cywgY2xvbmVNYXJrZXIsIG9wYWNpdHkpO1xuXG4gICAgICAgIHNpbXBsZUNoZW1pY2FsUmlnaHRDbG9uZShjb250ZXh0LCBzZWNvbmRDaXJjbGVDZW50ZXJYLCBzZWNvbmRDaXJjbGVDZW50ZXJZLFxuICAgICAgICAgICAgICAgIDIgKiBjb3JuZXJSYWRpdXMsIDIgKiBjb3JuZXJSYWRpdXMsIGNsb25lTWFya2VyLCBvcGFjaXR5KTtcblxuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAkJC5zYmduLmNvbG9ycy5jbG9uZTtcbiAgICAgICAgdmFyIG9sZEdsb2JhbEFscGhhID0gY29udGV4dC5nbG9iYWxBbHBoYTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG5cbiAgICAgICAgdmFyIHJlY1BvaW50cyA9IGN5TWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzRml0VG9TcXVhcmUoNCwgMCk7XG4gICAgICAgIHZhciBjbG9uZVggPSBjZW50ZXJYO1xuICAgICAgICB2YXIgY2xvbmVZID0gY2VudGVyWSArIDMgLyA0ICogY29ybmVyUmFkaXVzO1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoIC0gMiAqIGNvcm5lclJhZGl1cztcbiAgICAgICAgdmFyIGNsb25lSGVpZ2h0ID0gY29ybmVyUmFkaXVzIC8gMjtcblxuICAgICAgICBkcmF3UG9seWdvblBhdGgoY29udGV4dCwgY2xvbmVYLCBjbG9uZVksIGNsb25lV2lkdGgsIGNsb25lSGVpZ2h0LCByZWNQb2ludHMpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgICAgfVxuICAgIH0sXG4gICAgbnVjbGVpY0FjaWRGZWF0dXJlOiBmdW5jdGlvbiAoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBpc011bHRpbWVyLCBvcGFjaXR5KSB7XG4gICAgICBpZiAoY2xvbmVNYXJrZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICB2YXIgY2xvbmVIZWlnaHQgPSBoZWlnaHQgLyA0O1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyAzICogaGVpZ2h0IC8gODtcblxuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAkJC5zYmduLmNvbG9ycy5jbG9uZTtcbiAgICAgICAgdmFyIG9sZEdsb2JhbEFscGhhID0gY29udGV4dC5nbG9iYWxBbHBoYTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG5cbiAgICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IGN5TWF0aC5nZXRSb3VuZFJlY3RhbmdsZVJhZGl1cyh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAkJC5zYmduLmRyYXdOdWNBY2lkRmVhdHVyZShjb250ZXh0LCBjbG9uZVdpZHRoLCBjbG9uZUhlaWdodCxcbiAgICAgICAgICAgICAgICBjbG9uZVgsIGNsb25lWSwgY29ybmVyUmFkaXVzLCBvcGFjaXR5KTtcblxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb2xkR2xvYmFsQWxwaGE7XG4gICAgICAgIC8vY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1hY3JvbW9sZWN1bGU6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIGlzTXVsdGltZXIsIG9wYWNpdHkpIHtcbiAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIubnVjbGVpY0FjaWRGZWF0dXJlKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBpc011bHRpbWVyLCBvcGFjaXR5KTtcbiAgICB9LFxuICAgIGNvbXBsZXg6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY29ybmVyTGVuZ3RoLCBjbG9uZU1hcmtlciwgaXNNdWx0aW1lciwgb3BhY2l0eSkge1xuICAgICAgaWYgKGNsb25lTWFya2VyICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGNwWCA9IGNvcm5lckxlbmd0aCAvIHdpZHRoO1xuICAgICAgICB2YXIgY3BZID0gY29ybmVyTGVuZ3RoIC8gaGVpZ2h0O1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICB2YXIgY2xvbmVIZWlnaHQgPSBoZWlnaHQgKiBjcFkgLyAyO1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gY2xvbmVIZWlnaHQgLyAyO1xuXG4gICAgICAgIHZhciBtYXJrZXJQb2ludHMgPSBbLTEsIC0xLCAxLCAtMSwgMSAtIGNwWCwgMSwgLTEgKyBjcFgsIDFdO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICQkLnNiZ24uY29sb3JzLmNsb25lO1xuICAgICAgICB2YXIgb2xkR2xvYmFsQWxwaGEgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcblxuICAgICAgICBkcmF3UG9seWdvblBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICBjbG9uZVgsIGNsb25lWSxcbiAgICAgICAgICAgICAgICBjbG9uZVdpZHRoLCBjbG9uZUhlaWdodCwgbWFya2VyUG9pbnRzKTtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuXG4vLyAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAkJC5zYmduLmNsb3Nlc3RJbnRlcnNlY3Rpb25Qb2ludCA9IGZ1bmN0aW9uIChwb2ludCwgaW50ZXJzZWN0aW9ucykge1xuICAgIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCA8PSAwKVxuICAgICAgcmV0dXJuIFtdO1xuXG4gICAgdmFyIGNsb3Nlc3RJbnRlcnNlY3Rpb24gPSBbXTtcbiAgICB2YXIgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRlcnNlY3Rpb25zLmxlbmd0aDsgaSA9IGkgKyAyKSB7XG4gICAgICB2YXIgY2hlY2tQb2ludCA9IFtpbnRlcnNlY3Rpb25zW2ldLCBpbnRlcnNlY3Rpb25zW2kgKyAxXV07XG4gICAgICB2YXIgZGlzdGFuY2UgPSBjeU1hdGguY2FsY3VsYXRlRGlzdGFuY2UocG9pbnQsIGNoZWNrUG9pbnQpO1xuXG4gICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICBjbG9zZXN0SW50ZXJzZWN0aW9uID0gY2hlY2tQb2ludDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvc2VzdEludGVyc2VjdGlvbjtcbiAgfTtcblxuICAkJC5zYmduLm51Y2xlaWNBY2lkSW50ZXJzZWN0aW9uTGluZSA9IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBub2RlWCwgbm9kZVksIGNvcm5lclJhZGl1cykge1xuICAgIHZhciBub2RlWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICB2YXIgbm9kZVkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgICB2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuICAgIHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcblxuICAgIHZhciBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zO1xuXG4gICAgLy8gVG9wIHNlZ21lbnQsIGxlZnQgdG8gcmlnaHRcbiAgICB7XG4gICAgICB2YXIgdG9wU3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggLSBwYWRkaW5nO1xuICAgICAgdmFyIHRvcFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCAtIHBhZGRpbmc7XG4gICAgICB2YXIgdG9wRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoICsgcGFkZGluZztcbiAgICAgIHZhciB0b3BFbmRZID0gdG9wU3RhcnRZO1xuXG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0KFxuICAgICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksIHRvcFN0YXJ0WCwgdG9wU3RhcnRZLCB0b3BFbmRYLCB0b3BFbmRZLCBmYWxzZSk7XG5cbiAgICAgIGlmIChzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmlnaHQgc2VnbWVudCwgdG9wIHRvIGJvdHRvbVxuICAgIHtcbiAgICAgIHZhciByaWdodFN0YXJ0WCA9IG5vZGVYICsgaGFsZldpZHRoICsgcGFkZGluZztcbiAgICAgIHZhciByaWdodFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCAtIHBhZGRpbmc7XG4gICAgICB2YXIgcmlnaHRFbmRYID0gcmlnaHRTdGFydFg7XG4gICAgICB2YXIgcmlnaHRFbmRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcblxuICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IGN5TWF0aC5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLCByaWdodFN0YXJ0WCwgcmlnaHRTdGFydFksIHJpZ2h0RW5kWCwgcmlnaHRFbmRZLCBmYWxzZSk7XG5cbiAgICAgIGlmIChzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQm90dG9tIHNlZ21lbnQsIGxlZnQgdG8gcmlnaHRcbiAgICB7XG4gICAgICB2YXIgYm90dG9tU3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXMgLSBwYWRkaW5nO1xuICAgICAgdmFyIGJvdHRvbVN0YXJ0WSA9IG5vZGVZICsgaGFsZkhlaWdodCArIHBhZGRpbmc7XG4gICAgICB2YXIgYm90dG9tRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcbiAgICAgIHZhciBib3R0b21FbmRZID0gYm90dG9tU3RhcnRZO1xuXG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0KFxuICAgICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksIGJvdHRvbVN0YXJ0WCwgYm90dG9tU3RhcnRZLCBib3R0b21FbmRYLCBib3R0b21FbmRZLCBmYWxzZSk7XG5cbiAgICAgIGlmIChzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGVmdCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gICAge1xuICAgICAgdmFyIGxlZnRTdGFydFggPSBub2RlWCAtIGhhbGZXaWR0aCAtIHBhZGRpbmc7XG4gICAgICB2YXIgbGVmdFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCAtIHBhZGRpbmc7XG4gICAgICB2YXIgbGVmdEVuZFggPSBsZWZ0U3RhcnRYO1xuICAgICAgdmFyIGxlZnRFbmRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcblxuICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IGN5TWF0aC5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLCBsZWZ0U3RhcnRYLCBsZWZ0U3RhcnRZLCBsZWZ0RW5kWCwgbGVmdEVuZFksIGZhbHNlKTtcblxuICAgICAgaWYgKHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBpbnRlcnNlY3Rpb25zIHdpdGggYXJjIHNlZ21lbnRzLCB3ZSBoYXZlIG9ubHkgdHdvIGFyY3MgZm9yXG4gICAgLy9udWNsZWljIGFjaWQgZmVhdHVyZXNcbiAgICB2YXIgYXJjSW50ZXJzZWN0aW9ucztcblxuICAgIC8vIEJvdHRvbSBSaWdodFxuICAgIHtcbiAgICAgIHZhciBib3R0b21SaWdodENlbnRlclggPSBub2RlWCArIGhhbGZXaWR0aCAtIGNvcm5lclJhZGl1cztcbiAgICAgIHZhciBib3R0b21SaWdodENlbnRlclkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXNcbiAgICAgIGFyY0ludGVyc2VjdGlvbnMgPSBjeU1hdGguaW50ZXJzZWN0TGluZUNpcmNsZShcbiAgICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLFxuICAgICAgICAgICAgICBib3R0b21SaWdodENlbnRlclgsIGJvdHRvbVJpZ2h0Q2VudGVyWSwgY29ybmVyUmFkaXVzICsgcGFkZGluZyk7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgaW50ZXJzZWN0aW9uIGlzIG9uIHRoZSBkZXNpcmVkIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuICAgICAgaWYgKGFyY0ludGVyc2VjdGlvbnMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdID49IGJvdHRvbVJpZ2h0Q2VudGVyWFxuICAgICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdID49IGJvdHRvbVJpZ2h0Q2VudGVyWSkge1xuICAgICAgICByZXR1cm4gW2FyY0ludGVyc2VjdGlvbnNbMF0sIGFyY0ludGVyc2VjdGlvbnNbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJvdHRvbSBMZWZ0XG4gICAge1xuICAgICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXM7XG4gICAgICB2YXIgYm90dG9tTGVmdENlbnRlclkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXNcbiAgICAgIGFyY0ludGVyc2VjdGlvbnMgPSBjeU1hdGguaW50ZXJzZWN0TGluZUNpcmNsZShcbiAgICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLFxuICAgICAgICAgICAgICBib3R0b21MZWZ0Q2VudGVyWCwgYm90dG9tTGVmdENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcpO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICAgIGlmIChhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1swXSA8PSBib3R0b21MZWZ0Q2VudGVyWFxuICAgICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdID49IGJvdHRvbUxlZnRDZW50ZXJZKSB7XG4gICAgICAgIHJldHVybiBbYXJjSW50ZXJzZWN0aW9uc1swXSwgYXJjSW50ZXJzZWN0aW9uc1sxXV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXTsgLy8gaWYgbm90aGluZ1xuICB9O1xuXG4gIC8vdGhpcyBmdW5jdGlvbiBnaXZlcyB0aGUgaW50ZXJzZWN0aW9ucyBvZiBhbnkgbGluZSB3aXRoIGEgcm91bmQgcmVjdGFuZ2xlIFxuICAkJC5zYmduLnJvdW5kUmVjdGFuZ2xlSW50ZXJzZWN0TGluZSA9IGZ1bmN0aW9uIChcbiAgICAgICAgICB4MSwgeTEsIHgyLCB5Miwgbm9kZVgsIG5vZGVZLCB3aWR0aCwgaGVpZ2h0LCBjb3JuZXJSYWRpdXMsIHBhZGRpbmcpIHtcblxuICAgIHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG4gICAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuXG4gICAgLy8gQ2hlY2sgaW50ZXJzZWN0aW9ucyB3aXRoIHN0cmFpZ2h0IGxpbmUgc2VnbWVudHNcbiAgICB2YXIgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IFtdO1xuXG4gICAgLy8gVG9wIHNlZ21lbnQsIGxlZnQgdG8gcmlnaHRcbiAgICB7XG4gICAgICB2YXIgdG9wU3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXMgLSBwYWRkaW5nO1xuICAgICAgdmFyIHRvcFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCAtIHBhZGRpbmc7XG4gICAgICB2YXIgdG9wRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcbiAgICAgIHZhciB0b3BFbmRZID0gdG9wU3RhcnRZO1xuXG4gICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY3lNYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0KFxuICAgICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiwgdG9wU3RhcnRYLCB0b3BTdGFydFksIHRvcEVuZFgsIHRvcEVuZFksIGZhbHNlKTtcblxuICAgICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChpbnRlcnNlY3Rpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJpZ2h0IHNlZ21lbnQsIHRvcCB0byBib3R0b21cbiAgICB7XG4gICAgICB2YXIgcmlnaHRTdGFydFggPSBub2RlWCArIGhhbGZXaWR0aCArIHBhZGRpbmc7XG4gICAgICB2YXIgcmlnaHRTdGFydFkgPSBub2RlWSAtIGhhbGZIZWlnaHQgKyBjb3JuZXJSYWRpdXMgLSBwYWRkaW5nO1xuICAgICAgdmFyIHJpZ2h0RW5kWCA9IHJpZ2h0U3RhcnRYO1xuICAgICAgdmFyIHJpZ2h0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLCByaWdodFN0YXJ0WCwgcmlnaHRTdGFydFksIHJpZ2h0RW5kWCwgcmlnaHRFbmRZLCBmYWxzZSk7XG5cbiAgICAgIGlmIChpbnRlcnNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoaW50ZXJzZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCb3R0b20gc2VnbWVudCwgbGVmdCB0byByaWdodFxuICAgIHtcbiAgICAgIHZhciBib3R0b21TdGFydFggPSBub2RlWCAtIGhhbGZXaWR0aCArIGNvcm5lclJhZGl1cyAtIHBhZGRpbmc7XG4gICAgICB2YXIgYm90dG9tU3RhcnRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgIHZhciBib3R0b21FbmRYID0gbm9kZVggKyBoYWxmV2lkdGggLSBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nO1xuICAgICAgdmFyIGJvdHRvbUVuZFkgPSBib3R0b21TdGFydFk7XG5cbiAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLCBib3R0b21TdGFydFgsIGJvdHRvbVN0YXJ0WSwgYm90dG9tRW5kWCwgYm90dG9tRW5kWSwgZmFsc2UpO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMuY29uY2F0KGludGVyc2VjdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGVmdCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gICAge1xuICAgICAgdmFyIGxlZnRTdGFydFggPSBub2RlWCAtIGhhbGZXaWR0aCAtIHBhZGRpbmc7XG4gICAgICB2YXIgbGVmdFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cyAtIHBhZGRpbmc7XG4gICAgICB2YXIgbGVmdEVuZFggPSBsZWZ0U3RhcnRYO1xuICAgICAgdmFyIGxlZnRFbmRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcblxuICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGN5TWF0aC5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIsIGxlZnRTdGFydFgsIGxlZnRTdGFydFksIGxlZnRFbmRYLCBsZWZ0RW5kWSwgZmFsc2UpO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMuY29uY2F0KGludGVyc2VjdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaW50ZXJzZWN0aW9ucyB3aXRoIGFyYyBzZWdtZW50c1xuICAgIHZhciBhcmNJbnRlcnNlY3Rpb25zO1xuXG4gICAgLy8gVG9wIExlZnRcbiAgICB7XG4gICAgICB2YXIgdG9wTGVmdENlbnRlclggPSBub2RlWCAtIGhhbGZXaWR0aCArIGNvcm5lclJhZGl1cztcbiAgICAgIHZhciB0b3BMZWZ0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1c1xuICAgICAgYXJjSW50ZXJzZWN0aW9ucyA9IGN5TWF0aC5pbnRlcnNlY3RMaW5lQ2lyY2xlKFxuICAgICAgICAgICAgICB4MSwgeTEsIHgyLCB5MixcbiAgICAgICAgICAgICAgdG9wTGVmdENlbnRlclgsIHRvcExlZnRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nKTtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBpbnRlcnNlY3Rpb24gaXMgb24gdGhlIGRlc2lyZWQgcXVhcnRlciBvZiB0aGUgY2lyY2xlXG4gICAgICBpZiAoYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPD0gdG9wTGVmdENlbnRlclhcbiAgICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA8PSB0b3BMZWZ0Q2VudGVyWSkge1xuICAgICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoYXJjSW50ZXJzZWN0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVG9wIFJpZ2h0XG4gICAge1xuICAgICAgdmFyIHRvcFJpZ2h0Q2VudGVyWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzO1xuICAgICAgdmFyIHRvcFJpZ2h0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1c1xuICAgICAgYXJjSW50ZXJzZWN0aW9ucyA9IGN5TWF0aC5pbnRlcnNlY3RMaW5lQ2lyY2xlKFxuICAgICAgICAgICAgICB4MSwgeTEsIHgyLCB5MixcbiAgICAgICAgICAgICAgdG9wUmlnaHRDZW50ZXJYLCB0b3BSaWdodENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcpO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICAgIGlmIChhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1swXSA+PSB0b3BSaWdodENlbnRlclhcbiAgICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA8PSB0b3BSaWdodENlbnRlclkpIHtcbiAgICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMuY29uY2F0KGFyY0ludGVyc2VjdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJvdHRvbSBSaWdodFxuICAgIHtcbiAgICAgIHZhciBib3R0b21SaWdodENlbnRlclggPSBub2RlWCArIGhhbGZXaWR0aCAtIGNvcm5lclJhZGl1cztcbiAgICAgIHZhciBib3R0b21SaWdodENlbnRlclkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXNcbiAgICAgIGFyY0ludGVyc2VjdGlvbnMgPSBjeU1hdGguaW50ZXJzZWN0TGluZUNpcmNsZShcbiAgICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIsXG4gICAgICAgICAgICAgIGJvdHRvbVJpZ2h0Q2VudGVyWCwgYm90dG9tUmlnaHRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nKTtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBpbnRlcnNlY3Rpb24gaXMgb24gdGhlIGRlc2lyZWQgcXVhcnRlciBvZiB0aGUgY2lyY2xlXG4gICAgICBpZiAoYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPj0gYm90dG9tUmlnaHRDZW50ZXJYXG4gICAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMV0gPj0gYm90dG9tUmlnaHRDZW50ZXJZKSB7XG4gICAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChhcmNJbnRlcnNlY3Rpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCb3R0b20gTGVmdFxuICAgIHtcbiAgICAgIHZhciBib3R0b21MZWZ0Q2VudGVyWCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzO1xuICAgICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzXG4gICAgICBhcmNJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLFxuICAgICAgICAgICAgICBib3R0b21MZWZ0Q2VudGVyWCwgYm90dG9tTGVmdENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcpO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICAgIGlmIChhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1swXSA8PSBib3R0b21MZWZ0Q2VudGVyWFxuICAgICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdID49IGJvdHRvbUxlZnRDZW50ZXJZKSB7XG4gICAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChhcmNJbnRlcnNlY3Rpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG4gICAgcmV0dXJuIFtdOyAvLyBpZiBub3RoaW5nXG4gIH07XG5cbiAgJCQuc2Jnbi5pbnRlcnNlY3RMaW5lRWxsaXBzZSA9IGZ1bmN0aW9uIChcbiAgICAgICAgICB4MSwgeTEsIHgyLCB5MiwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuXG4gICAgdmFyIHcgPSB3aWR0aCAvIDIgKyBwYWRkaW5nO1xuICAgIHZhciBoID0gaGVpZ2h0IC8gMiArIHBhZGRpbmc7XG4gICAgdmFyIGFuID0gY2VudGVyWDtcbiAgICB2YXIgYm4gPSBjZW50ZXJZO1xuXG4gICAgdmFyIGQgPSBbeDIgLSB4MSwgeTIgLSB5MV07XG5cbiAgICB2YXIgbSA9IGRbMV0gLyBkWzBdO1xuICAgIHZhciBuID0gLTEgKiBtICogeDIgKyB5MjtcbiAgICB2YXIgYSA9IGggKiBoICsgdyAqIHcgKiBtICogbTtcbiAgICB2YXIgYiA9IC0yICogYW4gKiBoICogaCArIDIgKiBtICogbiAqIHcgKiB3IC0gMiAqIGJuICogbSAqIHcgKiB3O1xuICAgIHZhciBjID0gYW4gKiBhbiAqIGggKiBoICsgbiAqIG4gKiB3ICogdyAtIDIgKiBibiAqIHcgKiB3ICogbiArXG4gICAgICAgICAgICBibiAqIGJuICogdyAqIHcgLSBoICogaCAqIHcgKiB3O1xuXG4gICAgdmFyIGRpc2NyaW1pbmFudCA9IGIgKiBiIC0gNCAqIGEgKiBjO1xuXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgdDEgPSAoLWIgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KSkgLyAoMiAqIGEpO1xuICAgIHZhciB0MiA9ICgtYiAtIE1hdGguc3FydChkaXNjcmltaW5hbnQpKSAvICgyICogYSk7XG5cbiAgICB2YXIgeE1pbiA9IE1hdGgubWluKHQxLCB0Mik7XG4gICAgdmFyIHhNYXggPSBNYXRoLm1heCh0MSwgdDIpO1xuXG4gICAgdmFyIHlNaW4gPSBtICogeE1pbiAtIG0gKiB4MiArIHkyO1xuICAgIHZhciB5TWF4ID0gbSAqIHhNYXggLSBtICogeDIgKyB5MjtcblxuICAgIHJldHVybiBbeE1pbiwgeU1pbiwgeE1heCwgeU1heF07XG4gIH07XG5cbiAgJCQuc2Jnbi5pbnRlcnNlY3RMaW5lU3RhdGVBbmRJbmZvQm94ZXMgPSBmdW5jdGlvbiAobm9kZSwgeCwgeSkge1xuICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgICB2YXIgc3RhdGVBbmRJbmZvcyA9IG5vZGUuX3ByaXZhdGUuZGF0YS5zdGF0ZXNhbmRpbmZvcztcblxuICAgIHZhciBzdGF0ZUNvdW50ID0gMCwgaW5mb0NvdW50ID0gMDtcblxuICAgIHZhciBpbnRlcnNlY3Rpb25zID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlQW5kSW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdGF0ZSA9IHN0YXRlQW5kSW5mb3NbaV07XG4gICAgICB2YXIgc3RhdGVXaWR0aCA9IHN0YXRlLmJib3gudztcbiAgICAgIHZhciBzdGF0ZUhlaWdodCA9IHN0YXRlLmJib3guaDtcbiAgICAgIHZhciBzdGF0ZUNlbnRlclggPSBzdGF0ZS5iYm94LnggKiBub2RlLndpZHRoKCkgLyAxMDAgKyBjZW50ZXJYO1xuICAgICAgdmFyIHN0YXRlQ2VudGVyWSA9IHN0YXRlLmJib3gueSAqIG5vZGUuaGVpZ2h0KCkgLyAxMDAgKyBjZW50ZXJZO1xuXG4gICAgICBpZiAoc3RhdGUuY2xhenogPT0gXCJzdGF0ZSB2YXJpYWJsZVwiICYmIHN0YXRlQ291bnQgPCAyKSB7Ly9kcmF3IGVsbGlwc2VcbiAgICAgICAgdmFyIHN0YXRlSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLmludGVyc2VjdExpbmVFbGxpcHNlKHgsIHksIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgc3RhdGVDZW50ZXJYLCBzdGF0ZUNlbnRlclksIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LCBwYWRkaW5nKTtcblxuICAgICAgICBpZiAoc3RhdGVJbnRlcnNlY3RMaW5lcy5sZW5ndGggPiAwKVxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLmNvbmNhdChzdGF0ZUludGVyc2VjdExpbmVzKTtcblxuICAgICAgICBzdGF0ZUNvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmNsYXp6ID09IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiICYmIGluZm9Db3VudCA8IDIpIHsvL2RyYXcgcmVjdGFuZ2xlXG4gICAgICAgIHZhciBpbmZvSW50ZXJzZWN0TGluZXMgPSAkJC5zYmduLnJvdW5kUmVjdGFuZ2xlSW50ZXJzZWN0TGluZSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZLCBzdGF0ZVdpZHRoLCBzdGF0ZUhlaWdodCwgNSwgcGFkZGluZyk7XG5cbiAgICAgICAgaWYgKGluZm9JbnRlcnNlY3RMaW5lcy5sZW5ndGggPiAwKVxuICAgICAgICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLmNvbmNhdChpbmZvSW50ZXJzZWN0TGluZXMpO1xuXG4gICAgICAgIGluZm9Db3VudCsrO1xuICAgICAgfVxuXG4gICAgfVxuICAgIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApXG4gICAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgICByZXR1cm4gW107XG4gIH07XG5cbiAgJCQuc2Jnbi5jaGVja1BvaW50U3RhdGVBbmRJbmZvQm94ZXMgPSBmdW5jdGlvbiAoeCwgeSwgbm9kZSwgdGhyZXNob2xkKSB7XG4gICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgdmFyIHBhZGRpbmcgPXBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgIHZhciBzdGF0ZUFuZEluZm9zID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnN0YXRlc2FuZGluZm9zO1xuXG4gICAgdmFyIHN0YXRlQ291bnQgPSAwLCBpbmZvQ291bnQgPSAwO1xuLy8gICAgdGhyZXNob2xkID0gcGFyc2VGbG9hdCh0aHJlc2hvbGQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZUFuZEluZm9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3RhdGUgPSBzdGF0ZUFuZEluZm9zW2ldO1xuICAgICAgdmFyIHN0YXRlV2lkdGggPSBwYXJzZUZsb2F0KHN0YXRlLmJib3gudykgKyB0aHJlc2hvbGQ7XG4gICAgICB2YXIgc3RhdGVIZWlnaHQgPSBwYXJzZUZsb2F0KHN0YXRlLmJib3guaCkgKyB0aHJlc2hvbGQ7XG4gICAgICB2YXIgc3RhdGVDZW50ZXJYID0gc3RhdGUuYmJveC54ICogbm9kZS53aWR0aCgpIC8gMTAwICsgY2VudGVyWDtcbiAgICAgIHZhciBzdGF0ZUNlbnRlclkgPSBzdGF0ZS5iYm94LnkgKiBub2RlLmhlaWdodCgpIC8gMTAwICsgY2VudGVyWTtcblxuICAgICAgaWYgKHN0YXRlLmNsYXp6ID09IFwic3RhdGUgdmFyaWFibGVcIiAmJiBzdGF0ZUNvdW50IDwgMikgey8vZHJhdyBlbGxpcHNlXG4gICAgICAgIHZhciBzdGF0ZUNoZWNrUG9pbnQgPSBjeUJhc2VOb2RlU2hhcGVzW1wiZWxsaXBzZVwiXS5jaGVja1BvaW50KFxuICAgICAgICAgICAgICAgIHgsIHksIHBhZGRpbmcsIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LCBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSk7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hlY2tQb2ludCA9PSB0cnVlKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIHN0YXRlQ291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuY2xhenogPT0gXCJ1bml0IG9mIGluZm9ybWF0aW9uXCIgJiYgaW5mb0NvdW50IDwgMikgey8vZHJhdyByZWN0YW5nbGVcbiAgICAgICAgdmFyIGluZm9DaGVja1BvaW50ID0gY3lCYXNlTm9kZVNoYXBlc1tcInJvdW5kcmVjdGFuZ2xlXCJdLmNoZWNrUG9pbnQoXG4gICAgICAgICAgICAgICAgeCwgeSwgcGFkZGluZywgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZKTtcblxuICAgICAgICBpZiAoaW5mb0NoZWNrUG9pbnQgPT0gdHJ1ZSlcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpbmZvQ291bnQrKztcbiAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgJCQuc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4gPSBmdW5jdGlvbiAocmVuZGVyLCBub2RlKSB7XG4gICAgaWYgKHRvdGFsbHlPdmVycmlkZW5Ob2RlU2hhcGVzW3JlbmRlci5nZXROb2RlU2hhcGUobm9kZSldKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59O1xuIiwiLypcbiAqIENvbW1vbiB1dGlsaXRpZXMgZm9yIGVsZW1lbnRzIGluY2x1ZGVzIGJvdGggZ2VuZXJhbCB1dGlsaXRpZXMgYW5kIHNiZ24gc3BlY2lmaWMgdXRpbGl0aWVzIFxuICovXG5cbnZhciB0cnVuY2F0ZVRleHQgPSByZXF1aXJlKCcuL3RleHQtdXRpbGl0aWVzJykudHJ1bmNhdGVUZXh0O1xudmFyIG9wdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xudmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xudmFyIGdyYXBoVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9ncmFwaC11dGlsaXRpZXMnKTtcblxudmFyIGVsZW1lbnRVdGlsaXRpZXMgPSB7XG4gICAgLy90aGUgbGlzdCBvZiB0aGUgZWxlbWVudCBjbGFzc2VzIGhhbmRsZWQgYnkgdGhlIHRvb2xcbiAgICBoYW5kbGVkRWxlbWVudHM6IHtcbiAgICAgICAgJ3Vuc3BlY2lmaWVkIGVudGl0eSc6IHRydWUsXG4gICAgICAgICdzaW1wbGUgY2hlbWljYWwnOiB0cnVlLFxuICAgICAgICAnbWFjcm9tb2xlY3VsZSc6IHRydWUsXG4gICAgICAgICdudWNsZWljIGFjaWQgZmVhdHVyZSc6IHRydWUsXG4gICAgICAgICdwZXJ0dXJiaW5nIGFnZW50JzogdHJ1ZSxcbiAgICAgICAgJ3NvdXJjZSBhbmQgc2luayc6IHRydWUsXG4gICAgICAgICdjb21wbGV4JzogdHJ1ZSxcbiAgICAgICAgJ3Byb2Nlc3MnOiB0cnVlLFxuICAgICAgICAnb21pdHRlZCBwcm9jZXNzJzogdHJ1ZSxcbiAgICAgICAgJ3VuY2VydGFpbiBwcm9jZXNzJzogdHJ1ZSxcbiAgICAgICAgJ2Fzc29jaWF0aW9uJzogdHJ1ZSxcbiAgICAgICAgJ2Rpc3NvY2lhdGlvbic6IHRydWUsXG4gICAgICAgICdwaGVub3R5cGUnOiB0cnVlLFxuICAgICAgICAndGFnJzogdHJ1ZSxcbiAgICAgICAgJ2NvbnN1bXB0aW9uJzogdHJ1ZSxcbiAgICAgICAgJ3Byb2R1Y3Rpb24nOiB0cnVlLFxuICAgICAgICAnbW9kdWxhdGlvbic6IHRydWUsXG4gICAgICAgICdzdGltdWxhdGlvbic6IHRydWUsXG4gICAgICAgICdjYXRhbHlzaXMnOiB0cnVlLFxuICAgICAgICAnaW5oaWJpdGlvbic6IHRydWUsXG4gICAgICAgICduZWNlc3Nhcnkgc3RpbXVsYXRpb24nOiB0cnVlLFxuICAgICAgICAnbG9naWMgYXJjJzogdHJ1ZSxcbiAgICAgICAgJ2VxdWl2YWxlbmNlIGFyYyc6IHRydWUsXG4gICAgICAgICdhbmQgb3BlcmF0b3InOiB0cnVlLFxuICAgICAgICAnb3Igb3BlcmF0b3InOiB0cnVlLFxuICAgICAgICAnbm90IG9wZXJhdG9yJzogdHJ1ZSxcbiAgICAgICAgJ2FuZCc6IHRydWUsXG4gICAgICAgICdvcic6IHRydWUsXG4gICAgICAgICdub3QnOiB0cnVlLFxuICAgICAgICAnbnVjbGVpYyBhY2lkIGZlYXR1cmUgbXVsdGltZXInOiB0cnVlLFxuICAgICAgICAnbWFjcm9tb2xlY3VsZSBtdWx0aW1lcic6IHRydWUsXG4gICAgICAgICdzaW1wbGUgY2hlbWljYWwgbXVsdGltZXInOiB0cnVlLFxuICAgICAgICAnY29tcGxleCBtdWx0aW1lcic6IHRydWUsXG4gICAgICAgICdjb21wYXJ0bWVudCc6IHRydWVcbiAgICB9LFxuICAgIC8vdGhlIGZvbGxvd2luZyB3ZXJlIG1vdmVkIGhlcmUgZnJvbSB3aGF0IHVzZWQgdG8gYmUgdXRpbGl0aWVzL3NiZ24tZmlsdGVyaW5nLmpzXG4gICAgcHJvY2Vzc1R5cGVzIDogWydwcm9jZXNzJywgJ29taXR0ZWQgcHJvY2VzcycsICd1bmNlcnRhaW4gcHJvY2VzcycsXG4gICAgICAgICdhc3NvY2lhdGlvbicsICdkaXNzb2NpYXRpb24nLCAncGhlbm90eXBlJ10sXG4gICAgXG4gICAgLy8gUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IG9yIGVsZW1lbnRzIHdpdGggdGhlIGdpdmVuIGNsYXNzIGNhbiBoYXZlIHBvcnRzLlxuICAgIGNhbkhhdmVQb3J0cyA6IGZ1bmN0aW9uKGVsZSkge1xuICAgICAgdmFyIHNiZ25jbGFzcyA9IHR5cGVvZiBlbGUgPT09ICdzdHJpbmcnID8gZWxlIDogZWxlLmRhdGEoJ2NsYXNzJyk7XG4gICAgICByZXR1cm4gKCQuaW5BcnJheShzYmduY2xhc3MsIHRoaXMucHJvY2Vzc1R5cGVzKSA+PSAwIHx8ICBzYmduY2xhc3MgPT0gJ2FuZCcgfHwgc2JnbmNsYXNzID09ICdvcicgfHwgc2JnbmNsYXNzID09ICdub3QnKTtcbiAgICB9LFxuICAgICAgXG4gICAgLy8gU2VjdGlvbiBTdGFydFxuICAgIC8vIEdlbmVyYWwgRWxlbWVudCBVdGlsaXRpZXNcblxuICAgIC8vdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgbm9kZXMgbm9uIG9mIHdob3NlIGFuY2VzdG9ycyBpcyBub3QgaW4gZ2l2ZW4gbm9kZXNcbiAgICBnZXRUb3BNb3N0Tm9kZXM6IGZ1bmN0aW9uIChub2Rlcykge1xuICAgICAgICB2YXIgbm9kZXNNYXAgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbm9kZXNNYXBbbm9kZXNbaV0uaWQoKV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByb290cyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZWxlLCBpKSB7XG4gICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGVsZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZWxlLnBhcmVudCgpWzBdO1xuICAgICAgICAgICAgd2hpbGUocGFyZW50ICE9IG51bGwpe1xuICAgICAgICAgICAgICBpZihub2Rlc01hcFtwYXJlbnQuaWQoKV0pe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50KClbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJvb3RzO1xuICAgIH0sXG4gICAgLy9UaGlzIG1ldGhvZCBjaGVja3MgaWYgYWxsIG9mIHRoZSBnaXZlbiBub2RlcyBoYXZlIHRoZSBzYW1lIHBhcmVudCBhc3N1bWluZyB0aGF0IHRoZSBzaXplIFxuICAgIC8vb2YgIG5vZGVzIGlzIG5vdCAwXG4gICAgYWxsSGF2ZVRoZVNhbWVQYXJlbnQ6IGZ1bmN0aW9uIChub2Rlcykge1xuICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJlbnQgPSBub2Rlc1swXS5kYXRhKFwicGFyZW50XCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YShcInBhcmVudFwiKSAhPSBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBtb3ZlTm9kZXM6IGZ1bmN0aW9uKHBvc2l0aW9uRGlmZiwgbm9kZXMsIG5vdENhbGNUb3BNb3N0Tm9kZXMpIHtcbiAgICAgIHZhciB0b3BNb3N0Tm9kZXMgPSBub3RDYWxjVG9wTW9zdE5vZGVzID8gbm9kZXMgOiB0aGlzLmdldFRvcE1vc3ROb2Rlcyhub2Rlcyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvcE1vc3ROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IHRvcE1vc3ROb2Rlc1tpXTtcbiAgICAgICAgdmFyIG9sZFggPSBub2RlLnBvc2l0aW9uKFwieFwiKTtcbiAgICAgICAgdmFyIG9sZFkgPSBub2RlLnBvc2l0aW9uKFwieVwiKTtcbiAgICAgICAgbm9kZS5wb3NpdGlvbih7XG4gICAgICAgICAgeDogb2xkWCArIHBvc2l0aW9uRGlmZi54LFxuICAgICAgICAgIHk6IG9sZFkgKyBwb3NpdGlvbkRpZmYueVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbigpO1xuICAgICAgICB0aGlzLm1vdmVOb2Rlcyhwb3NpdGlvbkRpZmYsIGNoaWxkcmVuLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbnZlcnRUb01vZGVsUG9zaXRpb246IGZ1bmN0aW9uIChyZW5kZXJlZFBvc2l0aW9uKSB7XG4gICAgICB2YXIgcGFuID0gY3kucGFuKCk7XG4gICAgICB2YXIgem9vbSA9IGN5Lnpvb20oKTtcblxuICAgICAgdmFyIHggPSAocmVuZGVyZWRQb3NpdGlvbi54IC0gcGFuLngpIC8gem9vbTtcbiAgICAgIHZhciB5ID0gKHJlbmRlcmVkUG9zaXRpb24ueSAtIHBhbi55KSAvIHpvb207XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH07XG4gICAgfSxcbiAgICBcbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIEdlbmVyYWwgRWxlbWVudCBVdGlsaXRpZXNcblxuICAgIC8vIFNlY3Rpb24gU3RhcnRcbiAgICAvLyBFbGVtZW50IEZpbHRlcmluZyBVdGlsaXRpZXNcbiAgICBcbiAgICAvLyBTQkdOIHNwZWNpZmljIHV0aWxpdGllc1xuICAgIGdldFByb2Nlc3Nlc09mU2VsZWN0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxlY3RlZEVsZXMgPSBjeS5lbGVtZW50cyhcIjpzZWxlY3RlZFwiKTtcbiAgICAgICAgc2VsZWN0ZWRFbGVzID0gdGhpcy5leHRlbmROb2RlTGlzdChzZWxlY3RlZEVsZXMpO1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWRFbGVzO1xuICAgIH0sXG4gICAgZ2V0TmVpZ2hib3Vyc09mU2VsZWN0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxlY3RlZEVsZXMgPSBjeS5lbGVtZW50cyhcIjpzZWxlY3RlZFwiKTtcbiAgICAgICAgdmFyIGVsZXNUb0hpZ2hsaWdodCA9IHRoaXMuZ2V0TmVpZ2hib3Vyc09mTm9kZXMoc2VsZWN0ZWRFbGVzKTtcbiAgICAgICAgcmV0dXJuIGVsZXNUb0hpZ2hsaWdodDtcbiAgICB9LFxuICAgIGdldE5laWdoYm91cnNPZk5vZGVzOiBmdW5jdGlvbihfbm9kZXMpe1xuICAgICAgICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgICAgICAgbm9kZXMgPSBub2Rlcy5hZGQobm9kZXMucGFyZW50cyhcIm5vZGVbY2xhc3M9J2NvbXBsZXgnXVwiKSk7XG4gICAgICAgIG5vZGVzID0gbm9kZXMuYWRkKG5vZGVzLmRlc2NlbmRhbnRzKCkpO1xuICAgICAgICB2YXIgbmVpZ2hib3Job29kRWxlcyA9IG5vZGVzLm5laWdoYm9yaG9vZCgpO1xuICAgICAgICB2YXIgZWxlc1RvUmV0dXJuID0gbm9kZXMuYWRkKG5laWdoYm9yaG9vZEVsZXMpO1xuICAgICAgICBlbGVzVG9SZXR1cm4gPSBlbGVzVG9SZXR1cm4uYWRkKGVsZXNUb1JldHVybi5kZXNjZW5kYW50cygpKTtcbiAgICAgICAgcmV0dXJuIGVsZXNUb1JldHVybjtcbiAgICB9LFxuICAgIGV4dGVuZE5vZGVMaXN0OiBmdW5jdGlvbihub2Rlc1RvU2hvdyl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy9hZGQgY2hpbGRyZW5cbiAgICAgICAgbm9kZXNUb1Nob3cgPSBub2Rlc1RvU2hvdy5hZGQobm9kZXNUb1Nob3cubm9kZXMoKS5kZXNjZW5kYW50cygpKTtcbiAgICAgICAgLy9hZGQgcGFyZW50c1xuICAgICAgICBub2Rlc1RvU2hvdyA9IG5vZGVzVG9TaG93LmFkZChub2Rlc1RvU2hvdy5wYXJlbnRzKCkpO1xuICAgICAgICAvL2FkZCBjb21wbGV4IGNoaWxkcmVuXG4gICAgICAgIG5vZGVzVG9TaG93ID0gbm9kZXNUb1Nob3cuYWRkKG5vZGVzVG9TaG93Lm5vZGVzKFwibm9kZVtjbGFzcz0nY29tcGxleCddXCIpLmRlc2NlbmRhbnRzKCkpO1xuXG4gICAgICAgIC8vIHZhciBwcm9jZXNzZXMgPSBub2Rlc1RvU2hvdy5ub2RlcyhcIm5vZGVbY2xhc3M9J3Byb2Nlc3MnXVwiKTtcbiAgICAgICAgLy8gdmFyIG5vblByb2Nlc3NlcyA9IG5vZGVzVG9TaG93Lm5vZGVzKFwibm9kZVtjbGFzcyE9J3Byb2Nlc3MnXVwiKTtcbiAgICAgICAgLy8gdmFyIG5laWdoYm9yUHJvY2Vzc2VzID0gbm9uUHJvY2Vzc2VzLm5laWdoYm9yaG9vZChcIm5vZGVbY2xhc3M9J3Byb2Nlc3MnXVwiKTtcblxuICAgICAgICB2YXIgcHJvY2Vzc2VzID0gbm9kZXNUb1Nob3cuZmlsdGVyKGZ1bmN0aW9uKGVsZSwgaSl7XG4gICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGVsZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJC5pbkFycmF5KGVsZS5fcHJpdmF0ZS5kYXRhLmNsYXNzLCBzZWxmLnByb2Nlc3NUeXBlcykgPj0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBub25Qcm9jZXNzZXMgPSBub2Rlc1RvU2hvdy5maWx0ZXIoZnVuY3Rpb24oZWxlLCBpKXtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBlbGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgZWxlID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkLmluQXJyYXkoZWxlLl9wcml2YXRlLmRhdGEuY2xhc3MsIHNlbGYucHJvY2Vzc1R5cGVzKSA9PT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbmVpZ2hib3JQcm9jZXNzZXMgPSBub25Qcm9jZXNzZXMubmVpZ2hib3Job29kKCkuZmlsdGVyKGZ1bmN0aW9uKGVsZSwgaSl7XG4gICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGVsZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJC5pbkFycmF5KGVsZS5fcHJpdmF0ZS5kYXRhLmNsYXNzLCBzZWxmLnByb2Nlc3NUeXBlcykgPj0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbm9kZXNUb1Nob3cgPSBub2Rlc1RvU2hvdy5hZGQocHJvY2Vzc2VzLm5laWdoYm9yaG9vZCgpKTtcbiAgICAgICAgbm9kZXNUb1Nob3cgPSBub2Rlc1RvU2hvdy5hZGQobmVpZ2hib3JQcm9jZXNzZXMpO1xuICAgICAgICBub2Rlc1RvU2hvdyA9IG5vZGVzVG9TaG93LmFkZChuZWlnaGJvclByb2Nlc3Nlcy5uZWlnaGJvcmhvb2QoKSk7XG5cbiAgICAgICAgLy9hZGQgcGFyZW50c1xuICAgICAgICBub2Rlc1RvU2hvdyA9IG5vZGVzVG9TaG93LmFkZChub2Rlc1RvU2hvdy5ub2RlcygpLnBhcmVudHMoKSk7XG4gICAgICAgIC8vYWRkIGNoaWxkcmVuXG4gICAgICAgIG5vZGVzVG9TaG93ID0gbm9kZXNUb1Nob3cuYWRkKG5vZGVzVG9TaG93Lm5vZGVzKFwibm9kZVtjbGFzcz0nY29tcGxleCddXCIpLmRlc2NlbmRhbnRzKCkpO1xuXG4gICAgICAgIHJldHVybiBub2Rlc1RvU2hvdztcbiAgICB9LFxuICAgIGV4dGVuZFJlbWFpbmluZ05vZGVzIDogZnVuY3Rpb24obm9kZXNUb0ZpbHRlciwgYWxsTm9kZXMpe1xuICAgICAgICBub2Rlc1RvRmlsdGVyID0gdGhpcy5leHRlbmROb2RlTGlzdChub2Rlc1RvRmlsdGVyKTtcbiAgICAgICAgdmFyIG5vZGVzVG9TaG93ID0gYWxsTm9kZXMubm90KG5vZGVzVG9GaWx0ZXIpO1xuICAgICAgICBub2Rlc1RvU2hvdyA9IHRoaXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXNUb1Nob3cpO1xuICAgICAgICByZXR1cm4gbm9kZXNUb1Nob3c7XG4gICAgfSxcbiAgICBnZXRQcm9jZXNzZXNPZk5vZGVzOiBmdW5jdGlvbihub2Rlcykge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXMpO1xuICAgIH0sXG4gICAgLy8gZ2VuZXJhbCB1dGlsaXRpZXNcbiAgICBub25lSXNOb3RIaWdobGlnaHRlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG5vdEhpZ2hsaWdodGVkTm9kZXMgPSBjeS5ub2RlcyhcIjp2aXNpYmxlXCIpLm5vZGVzKFwiLnVuaGlnaGxpZ2h0ZWRcIik7XG4gICAgICAgIHZhciBub3RIaWdobGlnaHRlZEVkZ2VzID0gY3kuZWRnZXMoXCI6dmlzaWJsZVwiKS5lZGdlcyhcIi51bmhpZ2hsaWdodGVkXCIpO1xuXG4gICAgICAgIHJldHVybiBub3RIaWdobGlnaHRlZE5vZGVzLmxlbmd0aCArIG5vdEhpZ2hsaWdodGVkRWRnZXMubGVuZ3RoID09PSAwO1xuICAgIH0sXG4gICAgXG4gICAgLy8gU2VjdGlvbiBFbmRcbiAgICAvLyBFbGVtZW50IEZpbHRlcmluZyBVdGlsaXRpZXNcblxuICAgIC8vIFNlY3Rpb24gU3RhcnRcbiAgICAvLyBBZGQgcmVtb3ZlIHV0aWxpdGllc1xuXG4gICAgLy8gU0JHTiBzcGVjaWZpYyB1dGlsaXRpZXNcbiAgICBkZWxldGVOb2Rlc1NtYXJ0OiBmdW5jdGlvbiAoX25vZGVzKSB7XG4gICAgICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgICAgIFxuICAgICAgdmFyIGFsbE5vZGVzID0gY3kubm9kZXMoKTtcbiAgICAgIGN5LmVsZW1lbnRzKCkudW5zZWxlY3QoKTtcbiAgICAgIHZhciBub2Rlc1RvS2VlcCA9IHRoaXMuZXh0ZW5kUmVtYWluaW5nTm9kZXMobm9kZXMsIGFsbE5vZGVzKTtcbiAgICAgIHZhciBub2Rlc05vdFRvS2VlcCA9IGFsbE5vZGVzLm5vdChub2Rlc1RvS2VlcCk7XG4gICAgICByZXR1cm4gbm9kZXNOb3RUb0tlZXAucmVtb3ZlKCk7XG4gICAgfSxcbiAgICBkZWxldGVFbGVzU2ltcGxlOiBmdW5jdGlvbiAoZWxlcykge1xuICAgICAgY3kuZWxlbWVudHMoKS51bnNlbGVjdCgpO1xuICAgICAgcmV0dXJuIGVsZXMucmVtb3ZlKCk7XG4gICAgfSxcbiAgICAvLyBnZW5lcmFsIHV0aWxpdGllc1xuICAgIHJlc3RvcmVFbGVzOiBmdW5jdGlvbiAoZWxlcykge1xuICAgICAgICBlbGVzLnJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIGVsZXM7XG4gICAgfSxcbiAgICBcbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIEFkZCByZW1vdmUgdXRpbGl0aWVzXG5cbiAgICAvLyBTZWN0aW9uIFN0YXJ0XG4gICAgLy8gU3R5bGVzaGVldCBoZWxwZXJzXG4gICAgXG4gICAgLy8gU0JHTiBzcGVjaWZpYyB1dGlsaXRpZXNcbiAgICBnZXRDeVNoYXBlOiBmdW5jdGlvbihlbGUpIHtcbiAgICAgICAgdmFyIF9jbGFzcyA9IGVsZS5kYXRhKCdjbGFzcycpO1xuICAgICAgICAvLyBHZXQgcmlkIG9mIHJlY3RhbmdsZSBwb3N0Zml4IHRvIGhhdmUgdGhlIGFjdHVhbCBub2RlIGNsYXNzXG4gICAgICAgIGlmIChfY2xhc3MuZW5kc1dpdGgoJyBtdWx0aW1lcicpKSB7XG4gICAgICAgICAgICBfY2xhc3MgPSBfY2xhc3MucmVwbGFjZSgnIG11bHRpbWVyJywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jbGFzcyA9PSAnY29tcGFydG1lbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JvdW5kcmVjdGFuZ2xlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NsYXNzID09ICdwaGVub3R5cGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2hleGFnb24nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY2xhc3MgPT0gJ3BlcnR1cmJpbmcgYWdlbnQnIHx8IF9jbGFzcyA9PSAndGFnJykge1xuICAgICAgICAgICAgcmV0dXJuICdwb2x5Z29uJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWZpbmUgbmV3IG5vZGUgc2hhcGVzIHdpdGggdGhlaXIgY2xhc3MgbmFtZXMgZm9yIHRoZXNlIG5vZGVzXG4gICAgICAgIGlmIChfY2xhc3MgPT0gJ3NvdXJjZSBhbmQgc2luaycgfHwgX2NsYXNzID09ICdudWNsZWljIGFjaWQgZmVhdHVyZScgfHwgX2NsYXNzID09ICdtYWNyb21vbGVjdWxlJyBcbiAgICAgICAgICAgICAgICB8fCBfY2xhc3MgPT0gJ3NpbXBsZSBjaGVtaWNhbCcgfHwgX2NsYXNzID09ICdjb21wbGV4JyApIHtcbiAgICAgICAgICAgIHJldHVybiBfY2xhc3M7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFRoZXNlIHNoYXBlcyBjYW4gaGF2ZSBwb3J0cy4gSWYgdGhleSBoYXZlIHBvcnRzIHdlIHJlcHJlc2VudCB0aGVtIGJ5IHBvbHlnb25zLCBlbHNlIHRoZXkgYXJlIHJlcHJlc2VudGVkIGJ5IGVsbGlwc2VzIG9yIHJlY3RhbmdsZXNcbiAgICAgICAgLy8gY29uZGl0aW9uYWxseS5cbiAgICAgICAgaWYgKCB0aGlzLmNhbkhhdmVQb3J0cyhfY2xhc3MpICkge1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPT09IHRydWUgJiYgZWxlLmRhdGEoJ3BvcnRzJykubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BvbHlnb24nOyAvLyBUaGUgbm9kZSBoYXMgcG9ydHMgcmVwcmVzZW50IGl0IGJ5IHBvbHlnb25cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoX2NsYXNzID09ICdwcm9jZXNzJyB8fCBfY2xhc3MgPT0gJ29taXR0ZWQgcHJvY2VzcycgfHwgX2NsYXNzID09ICd1bmNlcnRhaW4gcHJvY2VzcycpIHtcbiAgICAgICAgICAgIHJldHVybiAncmVjdGFuZ2xlJzsgLy8gSWYgbm9kZSBoYXMgbm8gcG9ydCBhbmQgaGFzIG9uZSBvZiB0aGVzZSBjbGFzc2VzIGl0IHNob3VsZCBiZSBpbiBhIHJlY3RhbmdsZSBzaGFwZVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gJ2VsbGlwc2UnOyAvLyBPdGhlciBub2RlcyB3aXRoIG5vIHBvcnQgc2hvdWxkIGJlIGluIGFuIGVsbGlwc2Ugc2hhcGVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGhlIHJlbWFpbmluZyBub2RlcyBhcmUgc3VwcG9zZWQgdG8gYmUgaW4gZWxsaXBzZSBzaGFwZVxuICAgICAgICByZXR1cm4gJ2VsbGlwc2UnO1xuICAgIH0sXG4gICAgZ2V0Q3lBcnJvd1NoYXBlOiBmdW5jdGlvbihlbGUpIHtcbiAgICAgICAgdmFyIF9jbGFzcyA9IGVsZS5kYXRhKCdjbGFzcycpO1xuICAgICAgICBpZiAoX2NsYXNzID09ICduZWNlc3Nhcnkgc3RpbXVsYXRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RyaWFuZ2xlLWNyb3NzJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NsYXNzID09ICdpbmhpYml0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuICd0ZWUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY2xhc3MgPT0gJ2NhdGFseXNpcycpIHtcbiAgICAgICAgICAgIHJldHVybiAnY2lyY2xlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NsYXNzID09ICdzdGltdWxhdGlvbicgfHwgX2NsYXNzID09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuICd0cmlhbmdsZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9jbGFzcyA9PSAnbW9kdWxhdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiAnZGlhbW9uZCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdub25lJztcbiAgICB9LFxuICAgIGdldEVsZW1lbnRDb250ZW50OiBmdW5jdGlvbihlbGUpIHtcbiAgICAgICAgdmFyIF9jbGFzcyA9IGVsZS5kYXRhKCdjbGFzcycpO1xuXG4gICAgICAgIGlmIChfY2xhc3MuZW5kc1dpdGgoJyBtdWx0aW1lcicpKSB7XG4gICAgICAgICAgICBfY2xhc3MgPSBfY2xhc3MucmVwbGFjZSgnIG11bHRpbWVyJywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgICBpZiAoX2NsYXNzID09ICdtYWNyb21vbGVjdWxlJyB8fCBfY2xhc3MgPT0gJ3NpbXBsZSBjaGVtaWNhbCdcbiAgICAgICAgICAgIHx8IF9jbGFzcyA9PSAncGhlbm90eXBlJ1xuICAgICAgICAgICAgfHwgX2NsYXNzID09ICd1bnNwZWNpZmllZCBlbnRpdHknIHx8IF9jbGFzcyA9PSAnbnVjbGVpYyBhY2lkIGZlYXR1cmUnXG4gICAgICAgICAgICB8fCBfY2xhc3MgPT0gJ3BlcnR1cmJpbmcgYWdlbnQnIHx8IF9jbGFzcyA9PSAndGFnJykge1xuICAgICAgICAgICAgY29udGVudCA9IGVsZS5kYXRhKCdsYWJlbCcpID8gZWxlLmRhdGEoJ2xhYmVsJykgOiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoX2NsYXNzID09ICdjb21wYXJ0bWVudCcpe1xuICAgICAgICAgICAgY29udGVudCA9IGVsZS5kYXRhKCdsYWJlbCcpID8gZWxlLmRhdGEoJ2xhYmVsJykgOiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoX2NsYXNzID09ICdjb21wbGV4Jyl7XG4gICAgICAgICAgICBpZihlbGUuY2hpbGRyZW4oKS5sZW5ndGggPT0gMCB8fCBvcHRpb25zLnNob3dDb21wbGV4TmFtZSl7XG4gICAgICAgICAgICAgICAgaWYoZWxlLmRhdGEoJ2xhYmVsJykpe1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZWxlLmRhdGEoJ2xhYmVsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoZWxlLmRhdGEoJ2luZm9MYWJlbCcpKXtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGVsZS5kYXRhKCdpbmZvTGFiZWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY29udGVudCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9jbGFzcyA9PSAnYW5kJykge1xuICAgICAgICAgICAgY29udGVudCA9ICdBTkQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9jbGFzcyA9PSAnb3InKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gJ09SJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfY2xhc3MgPT0gJ25vdCcpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSAnTk9UJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfY2xhc3MgPT0gJ29taXR0ZWQgcHJvY2VzcycpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSAnXFxcXFxcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9jbGFzcyA9PSAndW5jZXJ0YWluIHByb2Nlc3MnKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gJz8nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9jbGFzcyA9PSAnZGlzc29jaWF0aW9uJykge1xuICAgICAgICAgICAgY29udGVudCA9ICdvJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0V2lkdGggPSBlbGUud2lkdGgoKSB8fCBlbGUuZGF0YSgnYmJveCcpLnc7XG5cbiAgICAgICAgdmFyIHRleHRQcm9wID0ge1xuICAgICAgICAgICAgbGFiZWw6IGNvbnRlbnQsXG4gICAgICAgICAgICB3aWR0aDogKCBfY2xhc3M9PSgnY29tcGxleCcpIHx8IF9jbGFzcz09KCdjb21wYXJ0bWVudCcpICk/dGV4dFdpZHRoICogMjp0ZXh0V2lkdGhcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZm9udCA9IHRoaXMuZ2V0TGFiZWxUZXh0U2l6ZShlbGUpICsgXCJweCBBcmlhbFwiO1xuICAgICAgICByZXR1cm4gdHJ1bmNhdGVUZXh0KHRleHRQcm9wLCBmb250KTsgLy9mdW5jLiBpbiB0aGUgY3l0b3NjYXBlLnJlbmRlcmVyLmNhbnZhcy5zYmduLXJlbmRlcmVyLmpzXG4gICAgfSxcbiAgICBnZXRMYWJlbFRleHRTaXplOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICB2YXIgX2NsYXNzID0gZWxlLmRhdGEoJ2NsYXNzJyk7XG5cbiAgICAgIC8vIFRoZXNlIHR5cGVzIG9mIG5vZGVzIGNhbm5vdCBoYXZlIGxhYmVsIGJ1dCB0aGlzIGlzIHN0YXRlbWVudCBpcyBuZWVkZWQgYXMgYSB3b3JrYXJvdW5kXG4gICAgICBpZiAoX2NsYXNzID09PSAnYXNzb2NpYXRpb24nKSB7XG4gICAgICAgIHJldHVybiAyMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2FuSGF2ZVBvcnRzKF9jbGFzcykpIHtcbiAgICAgICAgdmFyIGNvZWZmID0gMTsgLy8gVGhlIGR5bmFtaWMgbGFiZWwgc2l6ZSBjb2VmZmljaWVudCBmb3IgdGhlc2UgcHNldWRvIGxhYmVscywgaXQgaXMgMSBmb3IgbG9naWNhbCBvcGVyYXRvcnNcbiAgICAgICAgXG4gICAgICAgIC8vIENvZWZmIGlzIHN1cHBvc2VkIHRvIGJlIDIgZm9yIGRpc3NvY2lhdGlvbiBhbmQgMS41IGZvciBvdGhlciBwcm9jZXNzZXNcbiAgICAgICAgaWYgKF9jbGFzcyA9PT0gJ2Rpc3NvY2lhdGlvbicpIHtcbiAgICAgICAgICBjb2VmZiA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2NsYXNzLmVuZHNXaXRoKCdwcm9jZXNzJykpIHtcbiAgICAgICAgICBjb2VmZiA9IDEuNTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHBvcnRzID0gZWxlLmRhdGEoJ3BvcnRzJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZ3JhcGhVdGlsaXRpZXMucG9ydHNFbmFibGVkID09PSB0cnVlICYmIHBvcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBwb3J0cyBhcmUgc3ltbWV0cmljIHRvIHRoZSBub2RlIGNlbnRlciBzbyB1c2luZyBqdXN0IG9uZSBvZiB0aGUgcG9ydHMgaXMgZW5vdWdoXG4gICAgICAgICAgdmFyIHBvcnQgPSBwb3J0c1swXTtcbiAgICAgICAgICB2YXIgb3JpZW50YXRpb24gPSBwb3J0LnggPT09IDAgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHJhdGlvIG9mIHRoZSBhcmVhIG9jY3VwaWVkIHdpdGggcG9ydHMgb3ZlciB3aXRob3V0IHBvcnRzXG4gICAgICAgICAgdmFyIHJhdGlvID0gb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyBNYXRoLmFicyhwb3J0LnkpIC8gNTAgOiBNYXRoLmFicyhwb3J0LngpIC8gNTA7XG4gICAgICAgICAgY29lZmYgLz0gcmF0aW87IC8vIERpdmlkZSB0aGUgY29lZmYgYnkgcmF0aW8gdG8gZml0IGludG8gdGhlIGJib3ggb2YgdGhlIGFjdHVhbCBzaGFwZSAoZGlzY2x1ZGluZyBwb3J0cylcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RHluYW1pY0xhYmVsVGV4dFNpemUoZWxlLCBjb2VmZik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfY2xhc3MgPT09ICdjb21wbGV4JyB8fCBfY2xhc3MgPT09ICdjb21wYXJ0bWVudCcpIHtcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZXREeW5hbWljTGFiZWxUZXh0U2l6ZShlbGUpO1xuICAgIH0sXG4gICAgZ2V0Q2FyZGluYWxpdHlEaXN0YW5jZTogZnVuY3Rpb24gKGVsZSkge1xuICAgICAgdmFyIHNyY1BvcyA9IGVsZS5zb3VyY2UoKS5wb3NpdGlvbigpO1xuICAgICAgdmFyIHRndFBvcyA9IGVsZS50YXJnZXQoKS5wb3NpdGlvbigpO1xuXG4gICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coKHNyY1Bvcy54IC0gdGd0UG9zLngpLCAyKSArIE1hdGgucG93KChzcmNQb3MueSAtIHRndFBvcy55KSwgMikpO1xuICAgICAgcmV0dXJuIGRpc3RhbmNlICogMC4xNTtcbiAgICB9LFxuICAgIGdldEluZm9MYWJlbDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgLyogSW5mbyBsYWJlbCBvZiBhIGNvbGxhcHNlZCBub2RlIGNhbm5vdCBiZSBjaGFuZ2VkIGlmXG4gICAgICAqIHRoZSBub2RlIGlzIGNvbGxhcHNlZCByZXR1cm4gdGhlIGFscmVhZHkgZXhpc3RpbmcgaW5mbyBsYWJlbCBvZiBpdFxuICAgICAgKi9cbiAgICAgIGlmIChub2RlLl9wcml2YXRlLmRhdGEuY29sbGFwc2VkQ2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9kZS5fcHJpdmF0ZS5kYXRhLmluZm9MYWJlbDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqIElmIHRoZSBub2RlIGlzIHNpbXBsZSB0aGVuIGl0J3MgaW5mb2xhYmVsIGlzIGVxdWFsIHRvIGl0J3MgbGFiZWxcbiAgICAgICAqL1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4oKSA9PSBudWxsIHx8IG5vZGUuY2hpbGRyZW4oKS5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gbm9kZS5fcHJpdmF0ZS5kYXRhLmxhYmVsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKCk7XG4gICAgICB2YXIgaW5mb0xhYmVsID0gXCJcIjtcbiAgICAgIC8qXG4gICAgICAgKiBHZXQgdGhlIGluZm8gbGFiZWwgb2YgdGhlIGdpdmVuIG5vZGUgYnkgaXQncyBjaGlsZHJlbiBpbmZvIHJlY3Vyc2l2ZWx5XG4gICAgICAgKi9cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIHZhciBjaGlsZEluZm8gPSB0aGlzLmdldEluZm9MYWJlbChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZm8gPT0gbnVsbCB8fCBjaGlsZEluZm8gPT0gXCJcIikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm9MYWJlbCAhPSBcIlwiKSB7XG4gICAgICAgICAgaW5mb0xhYmVsICs9IFwiOlwiO1xuICAgICAgICB9XG4gICAgICAgIGluZm9MYWJlbCArPSBjaGlsZEluZm87XG4gICAgICB9XG5cbiAgICAgIC8vcmV0dXJuIGluZm8gbGFiZWxcbiAgICAgIHJldHVybiBpbmZvTGFiZWw7XG4gICAgfSxcbiAgICBnZXRRdGlwQ29udGVudDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgLyogQ2hlY2sgdGhlIGxhYmVsIG9mIHRoZSBub2RlIGlmIGl0IGlzIG5vdCB2YWxpZFxuICAgICAgKiB0aGVuIGNoZWNrIHRoZSBpbmZvbGFiZWwgaWYgaXQgaXMgYWxzbyBub3QgdmFsaWQgZG8gbm90IHNob3cgcXRpcFxuICAgICAgKi9cbiAgICAgIHZhciBsYWJlbCA9IG5vZGUuZGF0YSgnbGFiZWwnKTtcbiAgICAgIGlmIChsYWJlbCA9PSBudWxsIHx8IGxhYmVsID09IFwiXCIpIHtcbiAgICAgICAgbGFiZWwgPSB0aGlzLmdldEluZm9MYWJlbChub2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChsYWJlbCA9PSBudWxsIHx8IGxhYmVsID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICB2YXIgY29udGVudEh0bWwgPSBcIjxiIHN0eWxlPSd0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MTZweDsnPlwiICsgbGFiZWwgKyBcIjwvYj5cIjtcbiAgICAgIHZhciBzdGF0ZXNhbmRpbmZvcyA9IG5vZGUuX3ByaXZhdGUuZGF0YS5zdGF0ZXNhbmRpbmZvcztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVzYW5kaW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNiZ25zdGF0ZWFuZGluZm8gPSBzdGF0ZXNhbmRpbmZvc1tpXTtcbiAgICAgICAgaWYgKHNiZ25zdGF0ZWFuZGluZm8uY2xhenogPT0gXCJzdGF0ZSB2YXJpYWJsZVwiKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc2JnbnN0YXRlYW5kaW5mby5zdGF0ZS52YWx1ZTtcbiAgICAgICAgICB2YXIgdmFyaWFibGUgPSBzYmduc3RhdGVhbmRpbmZvLnN0YXRlLnZhcmlhYmxlO1xuICAgICAgICAgIHZhciBzdGF0ZUxhYmVsID0gKHZhcmlhYmxlID09IG51bGwgLyp8fCB0eXBlb2Ygc3RhdGVWYXJpYWJsZSA9PT0gdW5kZWZpbmVkICovKSA/IHZhbHVlIDpcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgXCJAXCIgKyB2YXJpYWJsZTtcbiAgICAgICAgICBpZiAoc3RhdGVMYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0ZUxhYmVsID0gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGVudEh0bWwgKz0gXCI8ZGl2IHN0eWxlPSd0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MTRweDsnPlwiICsgc3RhdGVMYWJlbCArIFwiPC9kaXY+XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2JnbnN0YXRlYW5kaW5mby5jbGF6eiA9PSBcInVuaXQgb2YgaW5mb3JtYXRpb25cIikge1xuICAgICAgICAgIHZhciBzdGF0ZUxhYmVsID0gc2JnbnN0YXRlYW5kaW5mby5sYWJlbC50ZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZUxhYmVsID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlTGFiZWwgPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZW50SHRtbCArPSBcIjxkaXYgc3R5bGU9J3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxNHB4Oyc+XCIgKyBzdGF0ZUxhYmVsICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnRIdG1sO1xuICAgIH0sXG4gICAgLy8gZ2VuZXJhbCB1dGlsaXRpZXNcbiAgICBnZXREeW5hbWljTGFiZWxUZXh0U2l6ZTogZnVuY3Rpb24gKGVsZSwgZHluYW1pY0xhYmVsU2l6ZUNvZWZmaWNpZW50KSB7XG4gICAgICB2YXIgZHluYW1pY0xhYmVsU2l6ZSA9IG9wdGlvbnMuZHluYW1pY0xhYmVsU2l6ZTtcbiAgICAgIGR5bmFtaWNMYWJlbFNpemUgPSB0eXBlb2YgZHluYW1pY0xhYmVsU2l6ZSA9PT0gJ2Z1bmN0aW9uJyA/IGR5bmFtaWNMYWJlbFNpemUuY2FsbCgpIDogZHluYW1pY0xhYmVsU2l6ZTtcblxuICAgICAgaWYgKGR5bmFtaWNMYWJlbFNpemVDb2VmZmljaWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkeW5hbWljTGFiZWxTaXplID09ICdzbWFsbCcpIHtcbiAgICAgICAgICBkeW5hbWljTGFiZWxTaXplQ29lZmZpY2llbnQgPSAwLjc1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR5bmFtaWNMYWJlbFNpemUgPT0gJ3JlZ3VsYXInKSB7XG4gICAgICAgICAgZHluYW1pY0xhYmVsU2l6ZUNvZWZmaWNpZW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljTGFiZWxTaXplID09ICdsYXJnZScpIHtcbiAgICAgICAgICBkeW5hbWljTGFiZWxTaXplQ29lZmZpY2llbnQgPSAxLjI1O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHZhciBoID0gZWxlLmhlaWdodCgpO1xuICAgICAgdmFyIHRleHRIZWlnaHQgPSBwYXJzZUludChoIC8gMi40NSkgKiBkeW5hbWljTGFiZWxTaXplQ29lZmZpY2llbnQ7XG5cbiAgICAgIHJldHVybiB0ZXh0SGVpZ2h0O1xuICAgIH0sXG4gICAgLypcbiAgICAqIEdldCBzb3VyY2UvdGFyZ2V0IGVuZCBwb2ludCBvZiBlZGdlIGluICd4LXZhbHVlJSB5LXZhbHVlJScgZm9ybWF0LiBJdCByZXR1cm5zICdvdXRzaWRlLXRvLW5vZGUnIGlmIHRoZXJlIGlzIG5vIHNvdXJjZS90YXJnZXQgcG9ydC5cbiAgICAqL1xuICAgIGdldEVuZFBvaW50OiBmdW5jdGlvbihlZGdlLCBzb3VyY2VPclRhcmdldCkge1xuICAgICAgdmFyIHBvcnRJZCA9IHNvdXJjZU9yVGFyZ2V0ID09PSAnc291cmNlJyA/IGVkZ2UuZGF0YSgncG9ydHNvdXJjZScpIDogZWRnZS5kYXRhKCdwb3J0dGFyZ2V0Jyk7XG5cbiAgICAgIGlmIChwb3J0SWQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ291dHNpZGUtdG8tbm9kZSc7IC8vIElmIHRoZXJlIGlzIG5vIHBvcnRzb3VyY2UgcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlIHdoaWNoIGlzICdvdXRzaWRlLXRvLW5vZGUnXG4gICAgICB9XG5cbiAgICAgIHZhciBlbmROb2RlID0gc291cmNlT3JUYXJnZXQgPT09ICdzb3VyY2UnID8gZWRnZS5zb3VyY2UoKSA6IGVkZ2UudGFyZ2V0KCk7XG4gICAgICB2YXIgcG9ydHMgPSBlbmROb2RlLmRhdGEoJ3BvcnRzJyk7XG4gICAgICB2YXIgcG9ydDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBvcnRzW2ldLmlkID09PSBwb3J0SWQpIHtcbiAgICAgICAgICBwb3J0ID0gcG9ydHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gJ291dHNpZGUtdG8tbm9kZSc7IC8vIElmIHBvcnQgaXMgbm90IGZvdW5kIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZSB3aGljaCBpcyAnb3V0c2lkZS10by1ub2RlJ1xuICAgICAgfVxuICAgICAgXG4gICAgICB2YXIgeCwgeTtcbiAgICAgIC8vIE5vdGUgdGhhdCBmb3IgZHJhd2luZyBwb3J0cyB3ZSByZXByZXNlbnQgdGhlIHdob2xlIHNoYXBlIGJ5IGEgcG9seWdvbiBhbmQgcG9ydHMgYXJlIGFsd2F5cyA1MCUgYXdheSBmcm9tIHRoZSBub2RlIGNlbnRlclxuICAgICAgaWYgKHBvcnQueCAhPSAwKSB7XG4gICAgICAgIHggPSBNYXRoLnNpZ24ocG9ydC54KSAqIDUwO1xuICAgICAgICB5ID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB4ID0gMDtcbiAgICAgICAgeSA9IE1hdGguc2lnbihwb3J0LnkpICogNTA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiAnJyArIHggKyAnJSAnICsgeSArICclJztcbiAgICB9LFxuICAgIC8qXG4gICAgICogUmV0dXJuIG9yZGVyaW5nIG9mIHBvcnRzIG9mIGEgbm9kZS5cbiAgICAgKiBQb3NzaWJsZSByZXR1cm4gdmFsdWVzIGFyZSAnTC10by1SJywgJ1ItdG8tTCcsICdULXRvLUInLCAnQi10by1UJywgJ25vbmUnXG4gICAgICovXG4gICAgZ2V0UG9ydHNPcmRlcmluZzogZnVuY3Rpb24obm9kZSkge1xuICAgICAgLy8gUmV0dXJuIHRoZSBjYWNoZWQgcG9ydHNvcmRlcmluZyBpZiBleGlzdHNcbiAgICAgIGlmIChub2RlLmRhdGEoJ3BvcnRzb3JkZXJpbmcnKSkge1xuICAgICAgICByZXR1cm4gbm9kZS5kYXRhKCdwb3J0c29yZGVyaW5nJyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHZhciBwb3J0cyA9IG5vZGUuZGF0YSgncG9ydHMnKTtcbiAgICAgIGlmIChwb3J0cy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgbm9kZS5kYXRhKCdwb3J0c29yZGVyaW5nJywgJ25vbmUnKTsgLy8gQ2FjaGUgdGhlIHBvcnRzIG9yZGVyaW5nXG4gICAgICAgIHJldHVybiAnbm9uZSc7IC8vIE5vZGVzIGFyZSBzdXBwb3NlZCB0byBoYXZlIDIgbm9kZXMgb3Igbm9uZVxuICAgICAgfVxuICAgICAgXG4gICAgICAvKlxuICAgICAgICogUmV0dXJzbiBpZiB0aGUgZ2l2ZW4gcG9ydElkIGlzIHBvcnR0YXJnZXQgb2YgYW55IG9mIHRoZSBnaXZlbiBlZGdlcy5cbiAgICAgICAqIFRoZXNlIGVkZ2VzIGFyZSBleHBlY3RlZCB0byBiZSB0aGUgZWRnZXMgY29ubmVjdGVkIHRvIHRoZSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHBvcnQuXG4gICAgICAgKi9cbiAgICAgIHZhciBpc1BvcnRUYXJnZXRPZkFueUVkZ2UgPSBmdW5jdGlvbihlZGdlcywgcG9ydElkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZWRnZXNbaV0uZGF0YSgncG9ydHRhcmdldCcpID09PSBwb3J0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gSWYgdGhlIHBvcnRzIGFyZSBsb2NhdGVkIGFib3ZlL2JlbG93IG9mIHRoZSBub2RlIHRoZW4gdGhlIG9yaWVudGF0aW9uIGlzICd2ZXJ0aWNhbCcgZWxzZSBpdCBpcyAnaG9yaXpvbnRhbCcuXG4gICAgICB2YXIgb3JpZW50YXRpb24gPSBwb3J0c1swXS54ID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIC8vIFdlIG5lZWQgdGhlIGNvbm5lY3RlZCBlZGdlcyBvZiB0aGUgbm9kZSB0byBmaW5kIG91dCBpZiBhIHBvcnQgaXMgYW4gaW5wdXQgcG9ydCBvciBhbiBvdXRwdXQgcG9ydFxuICAgICAgdmFyIGNvbm5lY3RlZEVkZ2VzID0gbm9kZS5jb25uZWN0ZWRFZGdlcygpO1xuICAgICAgXG4gICAgICB2YXIgcG9ydHNvcmRlcmluZztcbiAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHZhciBsZWZ0UG9ydElkID0gcG9ydHNbMF0ueCA8IDAgPyBwb3J0c1swXS5pZCA6IHBvcnRzWzFdLmlkOyAvLyBMZWZ0IHBvcnQgaXMgdGhlIHBvcnQgd2hvc2UgeCB2YWx1ZSBpcyBuZWdhdGl2ZVxuICAgICAgICAvLyBJZiBsZWZ0IHBvcnQgaXMgcG9ydCB0YXJnZXQgZm9yIGFueSBvZiBjb25uZWN0ZWQgZWRnZXMgdGhlbiB0aGUgb3JkZXJpbmcgaXMgJ0wtdG8tUicgZWxzZSBpdCBpcyAnUi10by1MJ1xuICAgICAgICBpZiAoaXNQb3J0VGFyZ2V0T2ZBbnlFZGdlKGNvbm5lY3RlZEVkZ2VzLCBsZWZ0UG9ydElkKSkge1xuICAgICAgICAgIHBvcnRzb3JkZXJpbmcgPSAnTC10by1SJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBwb3J0c29yZGVyaW5nID0gJ1ItdG8tTCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgdG9wUG9ydElkID0gcG9ydHNbMF0ueSA8IDAgPyBwb3J0c1swXS5pZCA6IHBvcnRzWzFdLmlkOyAvLyBUb3AgcG9ydCBpcyB0aGUgcG9ydCB3aG9zZSB5IHZhbHVlIGlzIG5lZ2F0aXZlXG4gICAgICAgIC8vIElmIHRvcCAgcG9ydCBpcyBwb3J0IHRhcmdldCBmb3IgYW55IG9mIGNvbm5lY3RlZCBlZGdlcyB0aGVuIHRoZSBvcmRlcmluZyBpcyAnVC10by1CJyBlbHNlIGl0IGlzICdCLXRvLVQnXG4gICAgICAgIGlmIChpc1BvcnRUYXJnZXRPZkFueUVkZ2UoY29ubmVjdGVkRWRnZXMsIHRvcFBvcnRJZCkpIHtcbiAgICAgICAgICBwb3J0c29yZGVyaW5nID0gJ1QtdG8tQic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcG9ydHNvcmRlcmluZyA9ICdCLXRvLVQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENhY2hlIHRoZSBwb3J0c29yZGVyaW5nIGFuZCByZXR1cm4gaXQuXG4gICAgICBub2RlLmRhdGEoJ3BvcnRzb3JkZXJpbmcnLCBwb3J0c29yZGVyaW5nKTtcbiAgICAgIHJldHVybiBwb3J0c29yZGVyaW5nO1xuICAgIH1cbiAgICBcbiAgICAvLyBTZWN0aW9uIEVuZFxuICAgIC8vIFN0eWxlc2hlZXQgaGVscGVyc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVtZW50VXRpbGl0aWVzO1xuIiwiLypcbiAqIEZpbGUgVXRpbGl0aWVzOiBUbyBiZSB1c2VkIG9uIHJlYWQvd3JpdGUgZmlsZSBvcGVyYXRpb25cbiAqL1xuXG52YXIgc2Jnbm1sVG9Kc29uID0gcmVxdWlyZSgnLi9zYmdubWwtdG8tanNvbi1jb252ZXJ0ZXInKTtcbnZhciBqc29uVG9TYmdubWwgPSByZXF1aXJlKCcuL2pzb24tdG8tc2Jnbm1sLWNvbnZlcnRlcicpO1xudmFyIHVpVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91aS11dGlsaXRpZXMnKTtcbnZhciBncmFwaFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vZ3JhcGgtdXRpbGl0aWVzJyk7XG52YXIgdXBkYXRlR3JhcGggPSBncmFwaFV0aWxpdGllcy51cGRhdGVHcmFwaC5iaW5kKGdyYXBoVXRpbGl0aWVzKTtcblxudmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xudmFyIHNhdmVBcyA9IGxpYnMuc2F2ZUFzO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIFN0YXJ0XG4vLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjI0NTc2Ny9jcmVhdGluZy1hLWJsb2ItZnJvbS1hLWJhc2U2NC1zdHJpbmctaW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gYjY0dG9CbG9iKGI2NERhdGEsIGNvbnRlbnRUeXBlLCBzbGljZVNpemUpIHtcbiAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSB8fCAnJztcbiAgc2xpY2VTaXplID0gc2xpY2VTaXplIHx8IDUxMjtcblxuICB2YXIgYnl0ZUNoYXJhY3RlcnMgPSBhdG9iKGI2NERhdGEpO1xuICB2YXIgYnl0ZUFycmF5cyA9IFtdO1xuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGJ5dGVDaGFyYWN0ZXJzLmxlbmd0aDsgb2Zmc2V0ICs9IHNsaWNlU2l6ZSkge1xuICAgIHZhciBzbGljZSA9IGJ5dGVDaGFyYWN0ZXJzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2xpY2VTaXplKTtcblxuICAgIHZhciBieXRlTnVtYmVycyA9IG5ldyBBcnJheShzbGljZS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ5dGVOdW1iZXJzW2ldID0gc2xpY2UuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICB2YXIgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZU51bWJlcnMpO1xuXG4gICAgYnl0ZUFycmF5cy5wdXNoKGJ5dGVBcnJheSk7XG4gIH1cblxuICB2YXIgYmxvYiA9IG5ldyBCbG9iKGJ5dGVBcnJheXMsIHt0eXBlOiBjb250ZW50VHlwZX0pO1xuICByZXR1cm4gYmxvYjtcbn1cblxuZnVuY3Rpb24gbG9hZFhNTERvYyhmdWxsRmlsZVBhdGgpIHtcbiAgaWYgKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCkge1xuICAgIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgeGh0dHAgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICB9XG4gIHhodHRwLm9wZW4oXCJHRVRcIiwgZnVsbEZpbGVQYXRoLCBmYWxzZSk7XG4gIHhodHRwLnNlbmQoKTtcbiAgcmV0dXJuIHhodHRwLnJlc3BvbnNlWE1MO1xufVxuXG4vLyBTaG91bGQgdGhpcyBiZSBleHBvc2VkIG9yIHNob3VsZCB0aGlzIGJlIG1vdmVkIHRvIHRoZSBoZWxwZXIgZnVuY3Rpb25zIHNlY3Rpb24/XG5mdW5jdGlvbiB0ZXh0VG9YbWxPYmplY3QodGV4dCkge1xuICBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHtcbiAgICB2YXIgZG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxET00nKTtcbiAgICBkb2MuYXN5bmMgPSAnZmFsc2UnO1xuICAgIGRvYy5sb2FkWE1MKHRleHQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgdmFyIGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcodGV4dCwgJ3RleHQveG1sJyk7XG4gIH1cbiAgcmV0dXJuIGRvYztcbn1cbi8vIEhlbHBlciBmdW5jdGlvbnMgRW5kXG5cbmZ1bmN0aW9uIGZpbGVVdGlsaXRpZXMoKSB7fVxuZmlsZVV0aWxpdGllcy5sb2FkWE1MRG9jID0gbG9hZFhNTERvYztcblxuZmlsZVV0aWxpdGllcy5zYXZlQXNQbmcgPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICB2YXIgcG5nQ29udGVudCA9IGN5LnBuZyh7c2NhbGU6IDMsIGZ1bGw6IHRydWV9KTtcblxuICAvLyB0aGlzIGlzIHRvIHJlbW92ZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwbmdDb250ZW50OiBkYXRhOmltZy9wbmc7YmFzZTY0LFxuICB2YXIgYjY0ZGF0YSA9IHBuZ0NvbnRlbnQuc3Vic3RyKHBuZ0NvbnRlbnQuaW5kZXhPZihcIixcIikgKyAxKTtcbiAgc2F2ZUFzKGI2NHRvQmxvYihiNjRkYXRhLCBcImltYWdlL3BuZ1wiKSwgZmlsZW5hbWUgfHwgXCJuZXR3b3JrLnBuZ1wiKTtcbn07XG5cbmZpbGVVdGlsaXRpZXMuc2F2ZUFzSnBnID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgdmFyIGpwZ0NvbnRlbnQgPSBjeS5qcGcoe3NjYWxlOiAzLCBmdWxsOiB0cnVlfSk7XG5cbiAgLy8gdGhpcyBpcyB0byByZW1vdmUgdGhlIGJlZ2lubmluZyBvZiB0aGUgcG5nQ29udGVudDogZGF0YTppbWcvcG5nO2Jhc2U2NCxcbiAgdmFyIGI2NGRhdGEgPSBqcGdDb250ZW50LnN1YnN0cihqcGdDb250ZW50LmluZGV4T2YoXCIsXCIpICsgMSk7XG4gIHNhdmVBcyhiNjR0b0Jsb2IoYjY0ZGF0YSwgXCJpbWFnZS9qcGdcIiksIGZpbGVuYW1lIHx8IFwibmV0d29yay5qcGdcIik7XG59O1xuXG5maWxlVXRpbGl0aWVzLmxvYWRTYW1wbGUgPSBmdW5jdGlvbihmaWxlbmFtZSwgZm9sZGVycGF0aCkge1xuICB1aVV0aWxpdGllcy5zdGFydFNwaW5uZXIoXCJsb2FkLXNwaW5uZXJcIik7XG4gIFxuICAvLyBVc2VycyBtYXkgd2FudCB0byBkbyBjdXN0b21pemVkIHRoaW5ncyB3aGlsZSBhIHNhbXBsZSBpcyBiZWluZyBsb2FkZWRcbiAgLy8gVHJpZ2dlciBhbiBldmVudCBmb3IgdGhpcyBwdXJwb3NlIGFuZCBzcGVjaWZ5IHRoZSAnZmlsZW5hbWUnIGFzIGFuIGV2ZW50IHBhcmFtZXRlclxuICAkKCBkb2N1bWVudCApLnRyaWdnZXIoIFwic2JnbnZpekxvYWRTYW1wbGVcIiwgWyBmaWxlbmFtZSBdICk7IC8vIEFsaWFzZXMgZm9yIHNiZ252aXpMb2FkU2FtcGxlU3RhcnRcbiAgJCggZG9jdW1lbnQgKS50cmlnZ2VyKCBcInNiZ252aXpMb2FkU2FtcGxlU3RhcnRcIiwgWyBmaWxlbmFtZSBdICk7XG4gIFxuICAvLyBsb2FkIHhtbCBkb2N1bWVudCB1c2UgZGVmYXVsdCBmb2xkZXIgcGF0aCBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkXG4gIHZhciB4bWxPYmplY3QgPSBsb2FkWE1MRG9jKChmb2xkZXJwYXRoIHx8ICdzYW1wbGUtYXBwL3NhbXBsZXMvJykgKyBmaWxlbmFtZSk7XG4gIFxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB1cGRhdGVHcmFwaChzYmdubWxUb0pzb24uY29udmVydCh4bWxPYmplY3QpKTtcbiAgICB1aVV0aWxpdGllcy5lbmRTcGlubmVyKFwibG9hZC1zcGlubmVyXCIpO1xuICAgICQoIGRvY3VtZW50ICkudHJpZ2dlciggXCJzYmdudml6TG9hZFNhbXBsZUVuZFwiLCBbIGZpbGVuYW1lIF0gKTsgLy8gVHJpZ2dlciBhbiBldmVudCBzaWduYWxpbmcgdGhhdCBhIHNhbXBsZSBpcyBsb2FkZWRcbiAgfSwgMCk7XG59O1xuXG4vKlxuICBjYWxsYmFjayBpcyBhIGZ1bmN0aW9uIHJlbW90ZWx5IGRlZmluZWQgdG8gYWRkIHNwZWNpZmljIGJlaGF2aW9yIHRoYXQgaXNuJ3QgaW1wbGVtZW50ZWQgaGVyZS5cbiAgaXQgaXMgY29tcGxldGVseSBvcHRpb25hbC5cbiAgc2lnbmF0dXJlOiBjYWxsYmFjayh0ZXh0WG1sKVxuKi9cbmZpbGVVdGlsaXRpZXMubG9hZFNCR05NTEZpbGUgPSBmdW5jdGlvbihmaWxlLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHVpVXRpbGl0aWVzLnN0YXJ0U3Bpbm5lcihcImxvYWQtZmlsZS1zcGlubmVyXCIpO1xuICBcbiAgLy8gVXNlcnMgbWF5IHdhbnQgdG8gZG8gY3VzdG9taXplZCB0aGluZ3Mgd2hpbGUgYW4gZXh0ZXJuYWwgZmlsZSBpcyBiZWluZyBsb2FkZWRcbiAgLy8gVHJpZ2dlciBhbiBldmVudCBmb3IgdGhpcyBwdXJwb3NlIGFuZCBzcGVjaWZ5IHRoZSAnZmlsZW5hbWUnIGFzIGFuIGV2ZW50IHBhcmFtZXRlclxuICAkKCBkb2N1bWVudCApLnRyaWdnZXIoIFwic2JnbnZpekxvYWRGaWxlXCIsIFsgZmlsZS5uYW1lIF0gKTsgLy8gQWxpYXNlcyBmb3Igc2JnbnZpekxvYWRGaWxlU3RhcnRcbiAgJCggZG9jdW1lbnQgKS50cmlnZ2VyKCBcInNiZ252aXpMb2FkRmlsZVN0YXJ0XCIsIFsgZmlsZS5uYW1lIF0gKTsgXG4gIFxuICB2YXIgdGV4dFR5cGUgPSAvdGV4dC4qLztcblxuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgdGV4dCA9IHRoaXMucmVzdWx0O1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJykgY2FsbGJhY2sodGV4dCk7XG4gICAgICB1cGRhdGVHcmFwaChzYmdubWxUb0pzb24uY29udmVydCh0ZXh0VG9YbWxPYmplY3QodGV4dCkpKTtcbiAgICAgIHVpVXRpbGl0aWVzLmVuZFNwaW5uZXIoXCJsb2FkLWZpbGUtc3Bpbm5lclwiKTtcbiAgICAgICQoIGRvY3VtZW50ICkudHJpZ2dlciggXCJzYmdudml6TG9hZEZpbGVFbmRcIiwgWyBmaWxlLm5hbWUgXSApOyAvLyBUcmlnZ2VyIGFuIGV2ZW50IHNpZ25hbGluZyB0aGF0IGEgZmlsZSBpcyBsb2FkZWRcbiAgICB9LCAwKTtcbiAgfTtcblxuICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbn07XG5maWxlVXRpbGl0aWVzLmxvYWRTQkdOTUxUZXh0ID0gZnVuY3Rpb24odGV4dERhdGEpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVHcmFwaChzYmdubWxUb0pzb24uY29udmVydCh0ZXh0VG9YbWxPYmplY3QodGV4dERhdGEpKSk7XG4gICAgICAgIHVpVXRpbGl0aWVzLmVuZFNwaW5uZXIoXCJsb2FkLWZpbGUtc3Bpbm5lclwiKTtcbiAgICB9LCAwKTtcblxufTtcblxuZmlsZVV0aWxpdGllcy5zYXZlQXNTYmdubWwgPSBmdW5jdGlvbihmaWxlbmFtZSwgcmVuZGVySW5mbykge1xuICB2YXIgc2Jnbm1sVGV4dCA9IGpzb25Ub1NiZ25tbC5jcmVhdGVTYmdubWwoZmlsZW5hbWUsIHJlbmRlckluZm8pO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtzYmdubWxUZXh0XSwge1xuICAgIHR5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04O1wiLFxuICB9KTtcbiAgc2F2ZUFzKGJsb2IsIGZpbGVuYW1lKTtcbn07XG5maWxlVXRpbGl0aWVzLmNvbnZlcnRTYmdubWxUZXh0VG9Kc29uID0gZnVuY3Rpb24oc2Jnbm1sVGV4dCl7XG4gICAgcmV0dXJuIHNiZ25tbFRvSnNvbi5jb252ZXJ0KHRleHRUb1htbE9iamVjdChzYmdubWxUZXh0KSk7XG59O1xuXG5maWxlVXRpbGl0aWVzLmNyZWF0ZUpzb24gPSBmdW5jdGlvbihqc29uKXtcbiAgICB2YXIgc2Jnbm1sVGV4dCA9IGpzb25Ub1NiZ25tbC5jcmVhdGVTYmdubWwoKTtcbiAgICByZXR1cm4gc2Jnbm1sVG9Kc29uLmNvbnZlcnQodGV4dFRvWG1sT2JqZWN0KHNiZ25tbFRleHQpKTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxlVXRpbGl0aWVzO1xuIiwiLypcbiAqIENvbW1vbiB1dGlsaXRpZXMgZm9yIHNiZ252aXogZ3JhcGhzXG4gKi9cblxudmFyIG9wdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xudmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xuXG5mdW5jdGlvbiBncmFwaFV0aWxpdGllcygpIHt9XG5cbmdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZCA9IHRydWU7XG5cbmdyYXBoVXRpbGl0aWVzLmRpc2FibGVQb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPSBmYWxzZTtcbiAgY3kuc3R5bGUoKS51cGRhdGUoKTtcbn07XG5cbmdyYXBoVXRpbGl0aWVzLmVuYWJsZVBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZCA9IHRydWU7XG4gIGN5LnN0eWxlKCkudXBkYXRlKCk7XG59O1xuXG5ncmFwaFV0aWxpdGllcy5hcmVQb3J0c0VuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZDtcbn07XG5cbmdyYXBoVXRpbGl0aWVzLnVwZGF0ZUdyYXBoID0gZnVuY3Rpb24oY3lHcmFwaCkge1xuICBjb25zb2xlLmxvZygnY3kgdXBkYXRlIGNhbGxlZCcpO1xuICAkKCBkb2N1bWVudCApLnRyaWdnZXIoIFwidXBkYXRlR3JhcGhTdGFydFwiICk7XG4gIC8vIFJlc2V0IHVuZG8vcmVkbyBzdGFjayBhbmQgYnV0dG9ucyB3aGVuIGEgbmV3IGdyYXBoIGlzIGxvYWRlZFxuICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkucmVzZXQoKTtcbi8vICAgIHRoaXMucmVzZXRVbmRvUmVkb0J1dHRvbnMoKTtcbiAgfVxuXG4gIGN5LnN0YXJ0QmF0Y2goKTtcbiAgLy8gY2xlYXIgZGF0YVxuICBjeS5yZW1vdmUoJyonKTtcbiAgY3kuYWRkKGN5R3JhcGgpO1xuXG4gIC8vYWRkIHBvc2l0aW9uIGluZm9ybWF0aW9uIHRvIGRhdGEgZm9yIHByZXNldCBsYXlvdXRcbiAgdmFyIHBvc2l0aW9uTWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY3lHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB4UG9zID0gY3lHcmFwaC5ub2Rlc1tpXS5kYXRhLmJib3gueDtcbiAgICB2YXIgeVBvcyA9IGN5R3JhcGgubm9kZXNbaV0uZGF0YS5iYm94Lnk7XG4gICAgcG9zaXRpb25NYXBbY3lHcmFwaC5ub2Rlc1tpXS5kYXRhLmlkXSA9IHsneCc6IHhQb3MsICd5JzogeVBvc307XG4gIH1cblxuICB0aGlzLnJlZnJlc2hQYWRkaW5ncygpOyAvLyBSZWNhbGN1bGF0ZXMvcmVmcmVzaGVzIHRoZSBjb21wb3VuZCBwYWRkaW5nc1xuICBjeS5lbmRCYXRjaCgpO1xuICBcbiAgdmFyIGxheW91dCA9IGN5LmxheW91dCh7XG4gICAgbmFtZTogJ3ByZXNldCcsXG4gICAgcG9zaXRpb25zOiBwb3NpdGlvbk1hcCxcbiAgICBmaXQ6IHRydWUsXG4gICAgcGFkZGluZzogNTBcbiAgfSk7XG4gIFxuICAvLyBDaGVjayB0aGlzIGZvciBjeXRvc2NhcGUuanMgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBpZiAobGF5b3V0ICYmIGxheW91dC5ydW4pIHtcbiAgICBsYXlvdXQucnVuKCk7XG4gIH1cblxuICAvLyBVcGRhdGUgdGhlIHN0eWxlXG4gIGN5LnN0eWxlKCkudXBkYXRlKCk7XG4gIC8vIEluaXRpbGl6ZSB0aGUgYmVuZCBwb2ludHMgb25jZSB0aGUgZWxlbWVudHMgYXJlIGNyZWF0ZWRcbiAgaWYgKGN5LmVkZ2VCZW5kRWRpdGluZyAmJiBjeS5lZGdlQmVuZEVkaXRpbmcoJ2luaXRpYWxpemVkJykpIHtcbiAgICBjeS5lZGdlQmVuZEVkaXRpbmcoJ2dldCcpLmluaXRCZW5kUG9pbnRzKGN5LmVkZ2VzKCkpO1xuICB9XG4gIFxuICAkKCBkb2N1bWVudCApLnRyaWdnZXIoIFwidXBkYXRlR3JhcGhFbmRcIiApO1xufTtcblxuZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlUGFkZGluZ3MgPSBmdW5jdGlvbihwYWRkaW5nUGVyY2VudCkge1xuICAvL0FzIGRlZmF1bHQgdXNlIHRoZSBjb21wb3VuZCBwYWRkaW5nIHZhbHVlXG4gIGlmICghcGFkZGluZ1BlcmNlbnQpIHtcbiAgICB2YXIgY29tcG91bmRQYWRkaW5nID0gb3B0aW9ucy5jb21wb3VuZFBhZGRpbmc7XG4gICAgcGFkZGluZ1BlcmNlbnQgPSB0eXBlb2YgY29tcG91bmRQYWRkaW5nID09PSAnZnVuY3Rpb24nID8gY29tcG91bmRQYWRkaW5nLmNhbGwoKSA6IGNvbXBvdW5kUGFkZGluZztcbiAgfVxuXG4gIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciBudW1PZlNpbXBsZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRoZU5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAodGhlTm9kZS5jaGlsZHJlbigpID09IG51bGwgfHwgdGhlTm9kZS5jaGlsZHJlbigpLmxlbmd0aCA9PSAwKSB7XG4gICAgICB0b3RhbCArPSBOdW1iZXIodGhlTm9kZS53aWR0aCgpKTtcbiAgICAgIHRvdGFsICs9IE51bWJlcih0aGVOb2RlLmhlaWdodCgpKTtcbiAgICAgIG51bU9mU2ltcGxlcysrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjYWxjX3BhZGRpbmcgPSAocGFkZGluZ1BlcmNlbnQgLyAxMDApICogTWF0aC5mbG9vcih0b3RhbCAvICgyICogbnVtT2ZTaW1wbGVzKSk7XG4gIGlmIChjYWxjX3BhZGRpbmcgPCA1KSB7XG4gICAgY2FsY19wYWRkaW5nID0gNTtcbiAgfVxuXG4gIHJldHVybiBjYWxjX3BhZGRpbmc7XG59O1xuXG5ncmFwaFV0aWxpdGllcy5yZWNhbGN1bGF0ZVBhZGRpbmdzID0gZ3JhcGhVdGlsaXRpZXMucmVmcmVzaFBhZGRpbmdzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHRoaXMuY2FsY3VsYXRlZFBhZGRpbmdzIGlzIG5vdCB3b3JraW5nIGhlcmUgXG4gIC8vIFRPRE86IHJlcGxhY2UgdGhpcyByZWZlcmVuY2Ugd2l0aCB0aGlzLmNhbGN1bGF0ZWRQYWRkaW5ncyBvbmNlIHRoZSByZWFzb24gaXMgZmlndXJlZCBvdXRcbiAgZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlZFBhZGRpbmdzID0gdGhpcy5jYWxjdWxhdGVQYWRkaW5ncygpO1xuICByZXR1cm4gZ3JhcGhVdGlsaXRpZXMuY2FsY3VsYXRlZFBhZGRpbmdzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFwaFV0aWxpdGllczsiLCJ2YXIgdHh0VXRpbCA9IHJlcXVpcmUoJy4vdGV4dC11dGlsaXRpZXMnKTtcbnZhciBlbGVtZW50VXRpbGl0aWVzID0gcmVxdWlyZSgnLi9lbGVtZW50LXV0aWxpdGllcycpO1xudmFyIGxpYnNiZ25qcyA9IHJlcXVpcmUoJ2xpYnNiZ24uanMnKTtcbnZhciByZW5kZXJFeHRlbnNpb24gPSBsaWJzYmduanMucmVuZGVyO1xudmFyIGFubm90ID0gbGlic2JnbmpzLmFubm90O1xudmFyIHBrZ1ZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uOyAvLyBuZWVkIGluZm8gYWJvdXQgc2JnbnZpeiB0byBwdXQgaW4geG1sXG52YXIgcGtnTmFtZSA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLm5hbWU7XG52YXIgcHJldHR5cHJpbnQgPSByZXF1aXJlKCdwcmV0dHktZGF0YScpLnBkO1xudmFyIGdyYXBoVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9ncmFwaC11dGlsaXRpZXMnKTtcblxudmFyIGpzb25Ub1NiZ25tbCA9IHtcbiAgICAvKlxuICAgICAgICB0YWtlcyByZW5kZXJJbmZvIGFzIGFuIG9wdGlvbmFsIGFyZ3VtZW50LiBJdCBjb250YWlucyBhbGwgdGhlIGluZm9ybWF0aW9uIG5lZWRlZCB0byBzYXZlXG4gICAgICAgIHRoZSBzdHlsZSBhbmQgY29sb3JzIHRvIHRoZSByZW5kZXIgZXh0ZW5zaW9uLiBTZWUgbmV3dC9hcHAtdXRpbGl0aWVzIGdldEFsbFN0eWxlcygpXG4gICAgICAgIFN0cnVjdHVyZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdGhlIG1hcCBiYWNrZ3JvdW5kIGNvbG9yLFxuICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgIHZhbGlkWG1sVmFsdWU6IGNvbG9yX2lkXG4gICAgICAgICAgICAgIC4uLlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgICAgIHN0eWxlS2V5MToge1xuICAgICAgICAgICAgICAgICAgICBpZExpc3Q6IGxpc3Qgb2YgdGhlIG5vZGVzIGlkcyB0aGF0IGhhdmUgdGhpcyBzdHlsZVxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0eWxlS2V5MjogLi4uXG4gICAgICAgICAgICAgICAgLi4uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAqL1xuICAgIGNyZWF0ZVNiZ25tbCA6IGZ1bmN0aW9uKGZpbGVuYW1lLCByZW5kZXJJbmZvKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbWFwSUQgPSB0eHRVdGlsLmdldFhNTFZhbGlkSWQoZmlsZW5hbWUpO1xuICAgICAgICB2YXIgaGFzRXh0ZW5zaW9uID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNSZW5kZXJFeHRlbnNpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiByZW5kZXJJbmZvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaGFzRXh0ZW5zaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIGhhc1JlbmRlckV4dGVuc2lvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL2FkZCBoZWFkZXJzXG4gICAgICAgIHhtbEhlYWRlciA9IFwiPD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnIHN0YW5kYWxvbmU9J3llcyc/PlxcblwiO1xuICAgICAgICB2YXIgc2JnbiA9IG5ldyBsaWJzYmduanMuU2Jnbih7eG1sbnM6ICdodHRwOi8vc2Jnbi5vcmcvbGlic2Jnbi8wLjMnfSk7XG4gICAgICAgIHZhciBtYXAgPSBuZXcgbGlic2JnbmpzLk1hcCh7bGFuZ3VhZ2U6ICdwcm9jZXNzIGRlc2NyaXB0aW9uJywgaWQ6IG1hcElEfSk7XG4gICAgICAgIGlmIChoYXNFeHRlbnNpb24pIHsgLy8gZXh0ZW5zaW9uIGlzIHRoZXJlXG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gbmV3IGxpYnNiZ25qcy5FeHRlbnNpb24oKTtcbiAgICAgICAgICAgIGlmIChoYXNSZW5kZXJFeHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb24uYWRkKHNlbGYuZ2V0UmVuZGVyRXh0ZW5zaW9uU2Jnbm1sKHJlbmRlckluZm8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5zZXRFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBhbGwgZ2x5cGhzXG4gICAgICAgIHZhciBnbHlwaExpc3QgPSBbXTtcbiAgICAgICAgY3kubm9kZXMoXCI6dmlzaWJsZVwiKS5lYWNoKGZ1bmN0aW9uKGVsZSwgaSl7XG4gICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGVsZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighZWxlLmlzQ2hpbGQoKSlcbiAgICAgICAgICAgICAgICBnbHlwaExpc3QgPSBnbHlwaExpc3QuY29uY2F0KHNlbGYuZ2V0R2x5cGhTYmdubWwoZWxlKSk7IC8vIHJldHVybnMgcG90ZW50aWFsbHkgbW9yZSB0aGFuIDEgZ2x5cGhcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGFkZCB0aGVtIHRvIHRoZSBtYXBcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8Z2x5cGhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtYXAuYWRkR2x5cGgoZ2x5cGhMaXN0W2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBhbGwgYXJjc1xuICAgICAgICBjeS5lZGdlcyhcIjp2aXNpYmxlXCIpLmVhY2goZnVuY3Rpb24oZWxlLCBpKXtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBlbGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgZWxlID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5hZGRBcmMoc2VsZi5nZXRBcmNTYmdubWwoZWxlKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNiZ24uc2V0TWFwKG1hcCk7XG4gICAgICAgIHJldHVybiBwcmV0dHlwcmludC54bWwoeG1sSGVhZGVyICsgc2Jnbi50b1hNTCgpKTtcbiAgICB9LFxuXG4gICAgLy8gc2VlIGNyZWF0ZVNiZ25tbCBmb3IgaW5mbyBvbiB0aGUgc3RydWN0dXJlIG9mIHJlbmRlckluZm9cbiAgICBnZXRSZW5kZXJFeHRlbnNpb25TYmdubWwgOiBmdW5jdGlvbihyZW5kZXJJbmZvKSB7XG4gICAgICAgIC8vIGluaXRpYWxpemUgdGhlIG1haW4gY29udGFpbmVyXG4gICAgICAgIHZhciByZW5kZXJJbmZvcm1hdGlvbiA9IG5ldyByZW5kZXJFeHRlbnNpb24uUmVuZGVySW5mb3JtYXRpb24oeyBpZDogJ3JlbmRlckluZm9ybWF0aW9uJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlbmRlckluZm8uYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW1OYW1lOiBwa2dOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbVZlcnNpb246IHBrZ1ZlcnNpb24gfSk7XG5cbiAgICAgICAgLy8gcG9wdWxhdGUgbGlzdCBvZiBjb2xvcnNcbiAgICAgICAgdmFyIGxpc3RPZkNvbG9yRGVmaW5pdGlvbnMgPSBuZXcgcmVuZGVyRXh0ZW5zaW9uLkxpc3RPZkNvbG9yRGVmaW5pdGlvbnMoKTtcbiAgICAgICAgZm9yICh2YXIgY29sb3IgaW4gcmVuZGVySW5mby5jb2xvcnMpIHtcbiAgICAgICAgICAgIHZhciBjb2xvckRlZmluaXRpb24gPSBuZXcgcmVuZGVyRXh0ZW5zaW9uLkNvbG9yRGVmaW5pdGlvbih7aWQ6IHJlbmRlckluZm8uY29sb3JzW2NvbG9yXSwgdmFsdWU6IGNvbG9yfSk7XG4gICAgICAgICAgICBsaXN0T2ZDb2xvckRlZmluaXRpb25zLmFkZENvbG9yRGVmaW5pdGlvbihjb2xvckRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckluZm9ybWF0aW9uLnNldExpc3RPZkNvbG9yRGVmaW5pdGlvbnMobGlzdE9mQ29sb3JEZWZpbml0aW9ucyk7XG5cbiAgICAgICAgLy8gcG9wdWxhdGVzIHN0eWxlc1xuICAgICAgICB2YXIgbGlzdE9mU3R5bGVzID0gbmV3IHJlbmRlckV4dGVuc2lvbi5MaXN0T2ZTdHlsZXMoKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlbmRlckluZm8uc3R5bGVzKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSByZW5kZXJJbmZvLnN0eWxlc1trZXldO1xuICAgICAgICAgICAgdmFyIHhtbFN0eWxlID0gbmV3IHJlbmRlckV4dGVuc2lvbi5TdHlsZSh7aWQ6IHR4dFV0aWwuZ2V0WE1MVmFsaWRJZChrZXkpLCBpZExpc3Q6IHN0eWxlLmlkTGlzdC5qb2luKCcgJyl9KTtcbiAgICAgICAgICAgIHZhciBnID0gbmV3IHJlbmRlckV4dGVuc2lvbi5SZW5kZXJHcm91cCh7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IHN0eWxlLnByb3BlcnRpZXMuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogc3R5bGUucHJvcGVydGllcy5mb250RmFtaWx5LFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IHN0eWxlLnByb3BlcnRpZXMuZm9udFdlaWdodCxcbiAgICAgICAgICAgICAgICBmb250U3R5bGU6IHN0eWxlLnByb3BlcnRpZXMuZm9udFN0eWxlLFxuICAgICAgICAgICAgICAgIGZpbGw6IHN0eWxlLnByb3BlcnRpZXMuZmlsbCwgLy8gZmlsbCBjb2xvclxuICAgICAgICAgICAgICAgIHN0cm9rZTogc3R5bGUucHJvcGVydGllcy5zdHJva2UsIC8vIHN0cm9rZSBjb2xvclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHlsZS5wcm9wZXJ0aWVzLnN0cm9rZVdpZHRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHhtbFN0eWxlLnNldFJlbmRlckdyb3VwKGcpO1xuICAgICAgICAgICAgbGlzdE9mU3R5bGVzLmFkZFN0eWxlKHhtbFN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJJbmZvcm1hdGlvbi5zZXRMaXN0T2ZTdHlsZXMobGlzdE9mU3R5bGVzKTtcblxuICAgICAgICByZXR1cm4gcmVuZGVySW5mb3JtYXRpb247XG4gICAgfSxcblxuICAgIGdldEFubm90YXRpb25FeHRlbnNpb246IGZ1bmN0aW9uKGN5RWxlbWVudCkge1xuICAgICAgICB2YXIgYW5ub3RhdGlvbnMgPSBjeUVsZW1lbnQuZGF0YSgnYW5ub3RhdGlvbnMnKTtcbiAgICAgICAgdmFyIGFubm90RXh0ID0gbmV3IGFubm90LkFubm90YXRpb24oKTtcbiAgICAgICAgdmFyIHJkZkVsZW1lbnQgPSBuZXcgYW5ub3QuUmRmRWxlbWVudCgpO1xuICAgICAgICBmb3IgKHZhciBhbm5vdElEIGluIGFubm90YXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEFubm90ID0gYW5ub3RhdGlvbnNbYW5ub3RJRF07XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIHZhbGlkaXR5IG9mIGFubm90YXRpb25cbiAgICAgICAgICAgIGlmKGN1cnJlbnRBbm5vdC5zdGF0dXMgIT0gJ3ZhbGlkYXRlZCcgfHwgIWN1cnJlbnRBbm5vdC5zZWxlY3RlZERCIHx8ICFjdXJyZW50QW5ub3QuYW5ub3RhdGlvblZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHVuY29udHJvbGxlZCB2b2NhYnVsYXJ5XG4gICAgICAgICAgICBpZihjdXJyZW50QW5ub3Quc2VsZWN0ZWRSZWxhdGlvbiA9PSBcInNpbzpTSU9fMDAwMjIzXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAgICAgb2JqW2N1cnJlbnRBbm5vdC5zZWxlY3RlZERCXSA9IGN1cnJlbnRBbm5vdC5hbm5vdGF0aW9uVmFsdWU7XG4gICAgICAgICAgICAgICAgcmRmRWxlbWVudC5hZGRDdXN0b21Qcm9wZXJ0eSgnIycrY3lFbGVtZW50LmRhdGEoJ2lkJykgLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIG9ialtjdXJyZW50QW5ub3Quc2VsZWN0ZWRSZWxhdGlvbl0gPSBjdXJyZW50QW5ub3QuYW5ub3RhdGlvblZhbHVlO1xuICAgICAgICAgICAgICAgIHJkZkVsZW1lbnQuYWRkUmVzb3VyY2UoJyMnK2N5RWxlbWVudC5kYXRhKCdpZCcpICwgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbm5vdEV4dC5zZXRSZGZFbGVtZW50KHJkZkVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gYW5ub3RFeHQ7XG4gICAgfSxcblxuICAgIGdldEdseXBoU2Jnbm1sIDogZnVuY3Rpb24obm9kZSl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG5vZGVDbGFzcyA9IG5vZGUuX3ByaXZhdGUuZGF0YS5jbGFzcztcbiAgICAgICAgdmFyIGdseXBoTGlzdCA9IFtdO1xuXG4gICAgICAgIHZhciBnbHlwaCA9IG5ldyBsaWJzYmduanMuR2x5cGgoe2lkOiBub2RlLl9wcml2YXRlLmRhdGEuaWQsIGNsYXNzXzogbm9kZUNsYXNzfSk7XG5cbiAgICAgICAgLy8gYXNzaWduIGNvbXBhcnRtZW50UmVmXG4gICAgICAgIGlmKG5vZGUucGFyZW50KCkuaXNQYXJlbnQoKSl7XG4gICAgICAgICAgICBpZihub2RlQ2xhc3MgPT09IFwiY29tcGFydG1lbnRcIil7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgZ2x5cGguY29tcGFydG1lbnRSZWYgPSBub2RlLl9wcml2YXRlLmRhdGEucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KClbMF07XG4gICAgICAgICAgICAgICAgaWYocGFyZW50Ll9wcml2YXRlLmRhdGEuY2xhc3MgPT0gXCJjb21wYXJ0bWVudFwiKVxuICAgICAgICAgICAgICAgICAgICBnbHlwaC5jb21wYXJ0bWVudFJlZiA9IHBhcmVudC5fcHJpdmF0ZS5kYXRhLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWlzYyBpbmZvcm1hdGlvblxuICAgICAgICB2YXIgbGFiZWwgPSBub2RlLl9wcml2YXRlLmRhdGEubGFiZWw7XG4gICAgICAgIGlmKHR5cGVvZiBsYWJlbCAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIGdseXBoLnNldExhYmVsKG5ldyBsaWJzYmduanMuTGFiZWwoe3RleHQ6IGxhYmVsfSkpO1xuICAgICAgICAvL2FkZCBjbG9uZSBpbmZvcm1hdGlvblxuICAgICAgICBpZih0eXBlb2Ygbm9kZS5fcHJpdmF0ZS5kYXRhLmNsb25lbWFya2VyICE9ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgZ2x5cGguc2V0Q2xvbmUobmV3IGxpYnNiZ25qcy5DbG9uZVR5cGUoKSk7XG4gICAgICAgIC8vYWRkIGJib3ggaW5mb3JtYXRpb25cbiAgICAgICAgZ2x5cGguc2V0QmJveCh0aGlzLmFkZEdseXBoQmJveChub2RlKSk7XG4gICAgICAgIC8vYWRkIHBvcnQgaW5mb3JtYXRpb25cbiAgICAgICAgdmFyIHBvcnRzID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnBvcnRzO1xuICAgICAgICBmb3IodmFyIGkgPSAwIDsgaSA8IHBvcnRzLmxlbmd0aCA7IGkrKyl7XG4gICAgICAgICAgICB2YXIgb3JpZW50YXRpb24gPSBwb3J0c1tpXS54ID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHJhdGlvIG9mIHRoZSBhcmVhIG9jY3VwaWVkIGZvciBwb3J0cyBvdmVyIHRoZSB3aG9sZSBzaGFwZVxuICAgICAgICAgICAgdmFyIHJhdGlvID0gb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyBNYXRoLmFicyhwb3J0c1tpXS55KSAvIDUwIDogTWF0aC5hYnMocG9ydHNbaV0ueCkgLyA1MDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRGl2aWRlIHRoZSBub2RlIHNpemVzIGJ5IHRoZSByYXRpbyBiZWNhdXNlIHRoYXQgc2l6ZXMgaW5jbHVkZXMgcG9ydHMgYXMgd2VsbFxuICAgICAgICAgICAgdmFyIHggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnggKyBwb3J0c1tpXS54ICogKCBub2RlLndpZHRoKCkgLyByYXRpbyApIC8gMTAwO1xuICAgICAgICAgICAgdmFyIHkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnkgKyBwb3J0c1tpXS55ICogKCBub2RlLmhlaWdodCgpIC8gcmF0aW8gKSAvIDEwMDtcblxuICAgICAgICAgICAgZ2x5cGguYWRkUG9ydChuZXcgbGlic2JnbmpzLlBvcnQoe2lkOiBwb3J0c1tpXS5pZCwgeDogeCwgeTogeX0pKTtcbiAgICAgICAgfVxuICAgICAgICAvL2FkZCBzdGF0ZSBhbmQgaW5mbyBib3ggaW5mb3JtYXRpb25cbiAgICAgICAgZm9yKHZhciBpID0gMCA7IGkgPCBub2RlLl9wcml2YXRlLmRhdGEuc3RhdGVzYW5kaW5mb3MubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBib3hHbHlwaCA9IG5vZGUuX3ByaXZhdGUuZGF0YS5zdGF0ZXNhbmRpbmZvc1tpXTtcbiAgICAgICAgICAgIHZhciBzdGF0ZXNhbmRpbmZvc0lkID0gbm9kZS5fcHJpdmF0ZS5kYXRhLmlkK1wiX1wiK2k7XG4gICAgICAgICAgICBpZihib3hHbHlwaC5jbGF6eiA9PT0gXCJzdGF0ZSB2YXJpYWJsZVwiKXtcbiAgICAgICAgICAgICAgICBnbHlwaC5hZGRHbHlwaE1lbWJlcih0aGlzLmFkZFN0YXRlQm94R2x5cGgoYm94R2x5cGgsIHN0YXRlc2FuZGluZm9zSWQsIG5vZGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYm94R2x5cGguY2xhenogPT09IFwidW5pdCBvZiBpbmZvcm1hdGlvblwiKXtcbiAgICAgICAgICAgICAgICBnbHlwaC5hZGRHbHlwaE1lbWJlcih0aGlzLmFkZEluZm9Cb3hHbHlwaChib3hHbHlwaCwgc3RhdGVzYW5kaW5mb3NJZCwgbm9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGZvciBhbm5vdGF0aW9uc1xuICAgICAgICBpZiAobm9kZS5kYXRhKCdhbm5vdGF0aW9ucycpICYmICEkLmlzRW1wdHlPYmplY3Qobm9kZS5kYXRhKCdhbm5vdGF0aW9ucycpKSkge1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbjtcbiAgICAgICAgICAgIGlmKGdseXBoLmV4dGVuc2lvbikgeyAvLyBhbiBleHRlbnNpb24gaXMgYWxyZWFkeSB0aGVyZSBmb3IgdGhpc2UgZ2x5cGhcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBnbHlwaC5leHRlbnNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBuZXcgbGlic2JnbmpzLkV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICAgIGdseXBoLnNldEV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFubm90RXh0ID0gc2VsZi5nZXRBbm5vdGF0aW9uRXh0ZW5zaW9uKG5vZGUpO1xuICAgICAgICAgICAgZXh0ZW5zaW9uLmFkZChhbm5vdEV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgZ2x5cGggbWVtYmVycyB0aGF0IGFyZSBub3Qgc3RhdGUgdmFyaWFibGVzIG9yIHVuaXQgb2YgaW5mbzogc3VidW5pdHNcbiAgICAgICAgaWYobm9kZUNsYXNzID09PSBcImNvbXBsZXhcIiB8fCBub2RlQ2xhc3MgPT09IFwic3VibWFwXCIpe1xuICAgICAgICAgICAgbm9kZS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oZWxlLCBpKXtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICBlbGUgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGhNZW1iZXJMaXN0ID0gc2VsZi5nZXRHbHlwaFNiZ25tbChlbGUpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGdseXBoTWVtYmVyTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBnbHlwaC5hZGRHbHlwaE1lbWJlcihnbHlwaE1lbWJlckxpc3RbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3VycmVudCBnbHlwaCBpcyBkb25lXG4gICAgICAgIGdseXBoTGlzdC5wdXNoKGdseXBoKTtcblxuICAgICAgICAvLyBrZWVwIGdvaW5nIHdpdGggYWxsIHRoZSBpbmNsdWRlZCBnbHlwaHNcbiAgICAgICAgaWYobm9kZUNsYXNzID09PSBcImNvbXBhcnRtZW50XCIpe1xuICAgICAgICAgICAgbm9kZS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oZWxlLCBpKXtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZWxlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICBlbGUgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbHlwaExpc3QgPSBnbHlwaExpc3QuY29uY2F0KHNlbGYuZ2V0R2x5cGhTYmdubWwoZWxlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAgZ2x5cGhMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRBcmNTYmdubWwgOiBmdW5jdGlvbihlZGdlKXtcbiAgICAgICAgLy9UZW1wb3JhcnkgaGFjayB0byByZXNvbHZlIFwidW5kZWZpbmVkXCIgYXJjIHNvdXJjZSBhbmQgdGFyZ2V0c1xuICAgICAgICB2YXIgYXJjVGFyZ2V0ID0gZWRnZS5fcHJpdmF0ZS5kYXRhLnBvcnR0YXJnZXQ7XG4gICAgICAgIHZhciBhcmNTb3VyY2UgPSBlZGdlLl9wcml2YXRlLmRhdGEucG9ydHNvdXJjZTtcblxuICAgICAgICBpZiAoYXJjU291cmNlID09IG51bGwgfHwgYXJjU291cmNlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIGFyY1NvdXJjZSA9IGVkZ2UuX3ByaXZhdGUuZGF0YS5zb3VyY2U7XG5cbiAgICAgICAgaWYgKGFyY1RhcmdldCA9PSBudWxsIHx8IGFyY1RhcmdldC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBhcmNUYXJnZXQgPSBlZGdlLl9wcml2YXRlLmRhdGEudGFyZ2V0O1xuXG4gICAgICAgIHZhciBhcmNJZCA9IGVkZ2UuX3ByaXZhdGUuZGF0YS5pZDtcbiAgICAgICAgdmFyIGFyYyA9IG5ldyBsaWJzYmduanMuQXJjKHtpZDogYXJjSWQsIHNvdXJjZTogYXJjU291cmNlLCB0YXJnZXQ6IGFyY1RhcmdldCwgY2xhc3NfOiBlZGdlLl9wcml2YXRlLmRhdGEuY2xhc3N9KTtcblxuICAgICAgICBhcmMuc2V0U3RhcnQobmV3IGxpYnNiZ25qcy5TdGFydFR5cGUoe3g6IGVkZ2UuX3ByaXZhdGUucnNjcmF0Y2guc3RhcnRYLCB5OiBlZGdlLl9wcml2YXRlLnJzY3JhdGNoLnN0YXJ0WX0pKTtcblxuICAgICAgICAvLyBFeHBvcnQgYmVuZCBwb2ludHMgaWYgZWRnZUJlbmRFZGl0aW5nRXh0ZW5zaW9uIGlzIHJlZ2lzdGVyZWRcbiAgICAgICAgaWYgKGN5LmVkZ2VCZW5kRWRpdGluZyAmJiBjeS5lZGdlQmVuZEVkaXRpbmcoJ2luaXRpYWxpemVkJykpIHtcbiAgICAgICAgICB2YXIgc2VncHRzID0gY3kuZWRnZUJlbmRFZGl0aW5nKCdnZXQnKS5nZXRTZWdtZW50UG9pbnRzKGVkZ2UpO1xuICAgICAgICAgIGlmKHNlZ3B0cyl7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBzZWdwdHMgJiYgaSA8IHNlZ3B0cy5sZW5ndGg7IGkgPSBpICsgMil7XG4gICAgICAgICAgICAgIHZhciBiZW5kWCA9IHNlZ3B0c1tpXTtcbiAgICAgICAgICAgICAgdmFyIGJlbmRZID0gc2VncHRzW2kgKyAxXTtcblxuICAgICAgICAgICAgICBhcmMuYWRkTmV4dChuZXcgbGlic2JnbmpzLk5leHRUeXBlKHt4OiBiZW5kWCwgeTogYmVuZFl9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXJjLnNldEVuZChuZXcgbGlic2JnbmpzLkVuZFR5cGUoe3g6IGVkZ2UuX3ByaXZhdGUucnNjcmF0Y2guZW5kWCwgeTogZWRnZS5fcHJpdmF0ZS5yc2NyYXRjaC5lbmRZfSkpO1xuXG4gICAgICAgIHZhciBjYXJkaW5hbGl0eSA9IGVkZ2UuX3ByaXZhdGUuZGF0YS5jYXJkaW5hbGl0eTtcbiAgICAgICAgaWYodHlwZW9mIGNhcmRpbmFsaXR5ICE9ICd1bmRlZmluZWQnICYmIGNhcmRpbmFsaXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFyYy5hZGRHbHlwaChuZXcgbGlic2JnbmpzLkdseXBoKHtcbiAgICAgICAgICAgICAgICBpZDogYXJjLmlkKydfY2FyZCcsXG4gICAgICAgICAgICAgICAgY2xhc3NfOiAnY2FyZGluYWxpdHknLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBuZXcgbGlic2JnbmpzLkxhYmVsKHt0ZXh0OiBjYXJkaW5hbGl0eX0pLFxuICAgICAgICAgICAgICAgIGJib3g6IG5ldyBsaWJzYmduanMuQmJveCh7eDogMCwgeTogMCwgdzogMCwgaDogMH0pIC8vIGR1bW15IGJib3gsIG5lZWRlZCBmb3IgZm9ybWF0IGNvbXBsaWFuY2VcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjaGVjayBmb3IgYW5ub3RhdGlvbnNcbiAgICAgICAgaWYgKGVkZ2UuZGF0YSgnYW5ub3RhdGlvbnMnKSAmJiAhJC5pc0VtcHR5T2JqZWN0KGVkZ2UuZGF0YSgnYW5ub3RhdGlvbnMnKSkpIHtcbiAgICAgICAgICAgIHZhciBleHRlbnNpb247XG4gICAgICAgICAgICBpZihhcmMuZXh0ZW5zaW9uKSB7IC8vIGFuIGV4dGVuc2lvbiBpcyBhbHJlYWR5IHRoZXJlIGZvciB0aGlzZSBhcmNcbiAgICAgICAgICAgICAgICBleHRlbnNpb24gPSBhcmMuZXh0ZW5zaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0gbmV3IGxpYnNiZ25qcy5FeHRlbnNpb24oKTtcbiAgICAgICAgICAgICAgICBhcmMuc2V0RXh0ZW5zaW9uKGV4dGVuc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYW5ub3RFeHQgPSB0aGlzLmdldEFubm90YXRpb25FeHRlbnNpb24oZWRnZSk7XG4gICAgICAgICAgICBleHRlbnNpb24uYWRkKGFubm90RXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcmM7XG4gICAgfSxcblxuICAgIGFkZEdseXBoQmJveCA6IGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIF9jbGFzcyA9IG5vZGUuZGF0YSgnY2xhc3MnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIHRoZSBub2RlIGNhbiBoYXZlIHBvcnRzIGFuZCBpdCBoYXMgZXhhY3RseSAyIHBvcnRzIHRoZW4gaXQgaXMgcmVwcmVzZW50ZWQgYnkgYSBiaWdnZXIgYmJveC5cbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIHJlcHJlc2VudCBpdCBhcyBhIHBvbHlnb24gYW5kIHNvIHRoZSB3aG9sZSBzaGFwZSBpbmNsdWRpbmcgdGhlIHBvcnRzIGFyZSByZW5kZXJlZCBpbiB0aGUgbm9kZSBiYm94LlxuICAgICAgICBpZiAoZWxlbWVudFV0aWxpdGllcy5jYW5IYXZlUG9ydHMoX2NsYXNzKSkge1xuICAgICAgICAgIGlmIChncmFwaFV0aWxpdGllcy5wb3J0c0VuYWJsZWQgPT09IHRydWUgJiYgbm9kZS5kYXRhKCdwb3J0cycpLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIHBvcnRzIGFyZSBzeW1tZXRyaWMgdG8gdGhlIG5vZGUgY2VudGVyIHNvIHVzaW5nIGp1c3Qgb25lIG9mIHRoZSBwb3J0cyBpcyBlbm91Z2hcbiAgICAgICAgICAgIHZhciBwb3J0ID0gbm9kZS5kYXRhKCdwb3J0cycpWzBdO1xuICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gcG9ydC54ID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHJhdGlvIG9mIHRoZSBhcmVhIG9jY3VwaWVkIHdpdGggcG9ydHMgb3ZlciB3aXRob3V0IHBvcnRzXG4gICAgICAgICAgICB2YXIgcmF0aW8gPSBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/IE1hdGguYWJzKHBvcnQueSkgLyA1MCA6IE1hdGguYWJzKHBvcnQueCkgLyA1MDtcbiAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgYmJveCB0byB0aGUgY2FsY3VsYXRlZCByYXRpbyB0byBnZXQgdGhlIGJib3ggb2YgdGhlIGFjdHVhbCBzaGFwZSBkaXNjbHVkaW5nIHRoZSBwb3J0c1xuICAgICAgICAgICAgd2lkdGggLz0gcmF0aW87XG4gICAgICAgICAgICBoZWlnaHQgLz0gcmF0aW87XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgeCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueCAtIHdpZHRoLzI7XG4gICAgICAgIHZhciB5ID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55IC0gaGVpZ2h0LzI7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IGxpYnNiZ25qcy5CYm94KHt4OiB4LCB5OiB5LCB3OiB3aWR0aCwgaDogaGVpZ2h0fSk7XG4gICAgfSxcblxuICAgIGFkZFN0YXRlQW5kSW5mb0Jib3ggOiBmdW5jdGlvbihub2RlLCBib3hHbHlwaCl7XG4gICAgICAgIGJveEJib3ggPSBib3hHbHlwaC5iYm94O1xuXG4gICAgICAgIHZhciB4ID0gYm94QmJveC54IC8gMTAwICogbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgeSA9IGJveEJib3gueSAvIDEwMCAqIG5vZGUuaGVpZ2h0KCk7XG5cbiAgICAgICAgeCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueCArICh4IC0gYm94QmJveC53LzIpO1xuICAgICAgICB5ID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55ICsgKHkgLSBib3hCYm94LmgvMik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBsaWJzYmduanMuQmJveCh7eDogeCwgeTogeSwgdzogYm94QmJveC53LCBoOiBib3hCYm94Lmh9KTtcbiAgICB9LFxuXG4gICAgYWRkU3RhdGVCb3hHbHlwaCA6IGZ1bmN0aW9uKG5vZGUsIGlkLCBtYWluR2x5cGgpe1xuXG4gICAgICAgIHZhciBnbHlwaCA9IG5ldyBsaWJzYmduanMuR2x5cGgoe2lkOiBpZCwgY2xhc3NfOiAnc3RhdGUgdmFyaWFibGUnfSk7XG4gICAgICAgIHZhciBzdGF0ZSA9IG5ldyBsaWJzYmduanMuU3RhdGVUeXBlKCk7XG4gICAgICAgIGlmKHR5cGVvZiBub2RlLnN0YXRlLnZhbHVlICE9ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgc3RhdGUudmFsdWUgPSBub2RlLnN0YXRlLnZhbHVlO1xuICAgICAgICBpZih0eXBlb2Ygbm9kZS5zdGF0ZS52YXJpYWJsZSAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHN0YXRlLnZhcmlhYmxlID0gbm9kZS5zdGF0ZS52YXJpYWJsZTtcbiAgICAgICAgZ2x5cGguc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgICBnbHlwaC5zZXRCYm94KHRoaXMuYWRkU3RhdGVBbmRJbmZvQmJveChtYWluR2x5cGgsIG5vZGUpKTtcblxuICAgICAgICByZXR1cm4gZ2x5cGg7XG4gICAgfSxcblxuICAgIGFkZEluZm9Cb3hHbHlwaCA6IGZ1bmN0aW9uKG5vZGUsIGlkLCBtYWluR2x5cGgpe1xuICAgICAgICB2YXIgZ2x5cGggPSBuZXcgbGlic2JnbmpzLkdseXBoKHtpZDogaWQsIGNsYXNzXzogJ3VuaXQgb2YgaW5mb3JtYXRpb24nfSk7XG4gICAgICAgIHZhciBsYWJlbCA9IG5ldyBsaWJzYmduanMuTGFiZWwoKTtcbiAgICAgICAgaWYodHlwZW9mIG5vZGUubGFiZWwudGV4dCAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIGxhYmVsLnRleHQgPSBub2RlLmxhYmVsLnRleHQ7XG4gICAgICAgIGdseXBoLnNldExhYmVsKGxhYmVsKTtcbiAgICAgICAgZ2x5cGguc2V0QmJveCh0aGlzLmFkZFN0YXRlQW5kSW5mb0Jib3gobWFpbkdseXBoLCBub2RlKSk7XG5cbiAgICAgICAgcmV0dXJuIGdseXBoO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ganNvblRvU2Jnbm1sO1xuIiwiLypcbiAqIExpc3RlbiBkb2N1bWVudCBmb3Iga2V5Ym9hcmQgaW5wdXRzIGFuZCBleHBvcnRzIHRoZSB1dGlsaXRpZXMgdGhhdCBpdCBtYWtlcyB1c2Ugb2ZcbiAqL1xudmFyIG9wdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xuXG52YXIgbGlicyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XG5cbnZhciBrZXlib2FyZElucHV0VXRpbGl0aWVzID0ge1xuICBpc051bWJlcktleTogZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiAoIGUua2V5Q29kZSA+PSA0OCAmJiBlLmtleUNvZGUgPD0gNTcgKSB8fCAoIGUua2V5Q29kZSA+PSA5NiAmJiBlLmtleUNvZGUgPD0gMTA1ICk7XG4gIH0sXG4gIGlzRG90S2V5OiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGUua2V5Q29kZSA9PT0gMTkwO1xuICB9LFxuICBpc01pbnVzU2lnbktleTogZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiBlLmtleUNvZGUgPT09IDEwOSB8fCBlLmtleUNvZGUgPT09IDE4OTtcbiAgfSxcbiAgaXNMZWZ0S2V5OiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGUua2V5Q29kZSA9PT0gMzc7XG4gIH0sXG4gIGlzUmlnaHRLZXk6IGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gZS5rZXlDb2RlID09PSAzOTtcbiAgfSxcbiAgaXNCYWNrc3BhY2VLZXk6IGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gZS5rZXlDb2RlID09PSA4O1xuICB9LFxuICBpc1RhYktleTogZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiBlLmtleUNvZGUgPT09IDk7XG4gIH0sXG4gIGlzRW50ZXJLZXk6IGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4gZS5rZXlDb2RlID09PSAxMztcbiAgfSxcbiAgaXNJbnRlZ2VyRmllbGRJbnB1dDogZnVuY3Rpb24odmFsdWUsIGUpIHtcbiAgICByZXR1cm4gdGhpcy5pc0N0cmxPckNvbW1hbmRQcmVzc2VkKGUpIHx8IHRoaXMuaXNNaW51c1NpZ25LZXkoZSkgfHwgdGhpcy5pc051bWJlcktleShlKSBcbiAgICAgICAgICAgIHx8IHRoaXMuaXNCYWNrc3BhY2VLZXkoZSkgfHwgdGhpcy5pc1RhYktleShlKSB8fCB0aGlzLmlzTGVmdEtleShlKSB8fCB0aGlzLmlzUmlnaHRLZXkoZSkgfHwgdGhpcy5pc0VudGVyS2V5KGUpO1xuICB9LFxuICBpc0Zsb2F0RmllbGRJbnB1dDogZnVuY3Rpb24odmFsdWUsIGUpIHtcbiAgICByZXR1cm4gdGhpcy5pc0ludGVnZXJGaWVsZElucHV0KHZhbHVlLCBlKSB8fCB0aGlzLmlzRG90S2V5KGUpO1xuICB9LFxuICBpc0N0cmxPckNvbW1hbmRQcmVzc2VkOiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGUuY3RybEtleSB8fCBlLm1ldGFLZXk7XG4gIH1cbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCAnLmludGVnZXItaW5wdXQnLCBmdW5jdGlvbihlKXtcbiAgICB2YXIgdmFsdWUgPSAkKHRoaXMpLmF0dHIoJ3ZhbHVlJyk7XG4gICAgcmV0dXJuIGtleWJvYXJkSW5wdXRVdGlsaXRpZXMuaXNJbnRlZ2VyRmllbGRJbnB1dCh2YWx1ZSwgZSk7XG4gIH0pO1xuICBcbiAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCAnLmZsb2F0LWlucHV0JywgZnVuY3Rpb24oZSl7XG4gICAgdmFyIHZhbHVlID0gJCh0aGlzKS5hdHRyKCd2YWx1ZScpO1xuICAgIHJldHVybiBrZXlib2FyZElucHV0VXRpbGl0aWVzLmlzRmxvYXRGaWVsZElucHV0KHZhbHVlLCBlKTtcbiAgfSk7XG4gIFxuICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJy5pbnRlZ2VyLWlucHV0LC5mbG9hdC1pbnB1dCcsIGZ1bmN0aW9uKGUpe1xuICAgIHZhciBtaW4gICA9ICQodGhpcykuYXR0cignbWluJyk7XG4gICAgdmFyIG1heCAgID0gJCh0aGlzKS5hdHRyKCdtYXgnKTtcbiAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KCQodGhpcykudmFsKCkpO1xuICAgIFxuICAgIGlmKG1pbiAhPSBudWxsKSB7XG4gICAgICBtaW4gPSBwYXJzZUZsb2F0KG1pbik7XG4gICAgfVxuICAgIFxuICAgIGlmKG1heCAhPSBudWxsKSB7XG4gICAgICBtYXggPSBwYXJzZUZsb2F0KG1heCk7XG4gICAgfVxuICAgIFxuICAgIGlmKG1pbiAhPSBudWxsICYmIHZhbHVlIDwgbWluKSB7XG4gICAgICB2YWx1ZSA9IG1pbjtcbiAgICB9XG4gICAgZWxzZSBpZihtYXggIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgdmFsdWUgPSBtYXg7XG4gICAgfVxuICAgIFxuICAgIGlmKGlzTmFOKHZhbHVlKSkge1xuICAgICAgaWYobWluICE9IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBtaW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmKG1heCAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gbWF4O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgJCh0aGlzKS52YWwoXCJcIiArIHZhbHVlKTtcbiAgfSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlib2FyZElucHV0VXRpbGl0aWVzO1xuIiwiLyogXG4gKiBVdGlsaXR5IGZpbGUgdG8gZ2V0IGFuZCBzZXQgdGhlIGxpYnJhcmllcyB0byB3aGljaCBzYmdudml6IGlzIGRlcGVuZGVudCBmcm9tIGFueSBmaWxlLlxuICovXG5cbnZhciBsaWJVdGlsaXRpZXMgPSBmdW5jdGlvbigpe1xufTtcblxubGliVXRpbGl0aWVzLnNldExpYnMgPSBmdW5jdGlvbihsaWJzKSB7XG4gIHRoaXMubGlicyA9IGxpYnM7XG59O1xuXG5saWJVdGlsaXRpZXMuZ2V0TGlicyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5saWJzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaWJVdGlsaXRpZXM7XG5cbiIsIi8qIFxuICogVGhlc2UgYXJlIHRoZSBtYWluIHV0aWxpdGllcyB0byBiZSBkaXJlY3RseSB1dGlsaXplZCBieSB0aGUgdXNlciBpbnRlcmFjdGlvbnMuXG4gKiBJZGVhbHksIHRoaXMgZmlsZSBpcyBqdXN0IHJlcXVpcmVkIGJ5IGluZGV4LmpzXG4gKi9cblxudmFyIGVsZW1lbnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuL2VsZW1lbnQtdXRpbGl0aWVzJyk7XG52YXIganNvblRvU2Jnbm1sID0gcmVxdWlyZSgnLi9qc29uLXRvLXNiZ25tbC1jb252ZXJ0ZXInKTtcbnZhciBzYmdubWxUb0pzb24gPSByZXF1aXJlKCcuL3NiZ25tbC10by1qc29uLWNvbnZlcnRlcicpO1xudmFyIG9wdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIGdyYXBoVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9ncmFwaC11dGlsaXRpZXMnKTtcblxudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xudmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XG52YXIgalF1ZXJ5ID0gJCA9IGxpYnMualF1ZXJ5O1xuXG4vLyBIZWxwZXJzIHN0YXJ0XG5mdW5jdGlvbiBiZWZvcmVQZXJmb3JtTGF5b3V0KCkge1xuICB2YXIgbm9kZXMgPSBjeS5ub2RlcygpO1xuICB2YXIgZWRnZXMgPSBjeS5lZGdlcygpO1xuXG4gIGdyYXBoVXRpbGl0aWVzLmRpc2FibGVQb3J0cygpO1xuXG4gIC8vIFRPRE8gZG8gdGhpcyBieSB1c2luZyBleHRlbnNpb24gQVBJXG4gIGN5LiQoJy5lZGdlYmVuZGVkaXRpbmctaGFzYmVuZHBvaW50cycpLnJlbW92ZUNsYXNzKCdlZGdlYmVuZGVkaXRpbmctaGFzYmVuZHBvaW50cycpO1xuICBlZGdlcy5zY3JhdGNoKCdjeWVkZ2ViZW5kZWRpdGluZ1dlaWdodHMnLCBbXSk7XG4gIGVkZ2VzLnNjcmF0Y2goJ2N5ZWRnZWJlbmRlZGl0aW5nRGlzdGFuY2VzJywgW10pO1xufTtcbi8vIEhlbHBlcnMgZW5kXG5cbmZ1bmN0aW9uIG1haW5VdGlsaXRpZXMoKSB7fVxuXG4vLyBFeHBhbmQgZ2l2ZW4gbm9kZXMuIFJlcXVpcmVzIGV4cGFuZENvbGxhcHNlIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzIHVuZG9hYmxlIG9wdGlvbi5cbm1haW5VdGlsaXRpZXMuZXhwYW5kTm9kZXMgPSBmdW5jdGlvbihub2Rlcykge1xuICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcbiAgXG4gIHZhciBub2Rlc1RvRXhwYW5kID0gZXhwYW5kQ29sbGFwc2UuZXhwYW5kYWJsZU5vZGVzKG5vZGVzKTtcbiAgaWYgKG5vZGVzVG9FeHBhbmQubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJleHBhbmRcIiwge1xuICAgICAgbm9kZXM6IG5vZGVzVG9FeHBhbmQsXG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZXhwYW5kQ29sbGFwc2UuZXhwYW5kKG5vZGVzKTtcbiAgfVxufTtcblxuLy8gQ29sbGFwc2UgZ2l2ZW4gbm9kZXMuIFJlcXVpcmVzIGV4cGFuZENvbGxhcHNlIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzIHVuZG9hYmxlIG9wdGlvbi5cbm1haW5VdGlsaXRpZXMuY29sbGFwc2VOb2RlcyA9IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIC8vIEdldCBleHBhbmRDb2xsYXBzZSBhcGlcbiAgdmFyIGV4cGFuZENvbGxhcHNlID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpO1xuICBcbiAgaWYgKGV4cGFuZENvbGxhcHNlLmNvbGxhcHNpYmxlTm9kZXMobm9kZXMpLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgY3kudW5kb1JlZG8oKS5kbyhcImNvbGxhcHNlXCIsIHtcbiAgICAgIG5vZGVzOiBub2Rlc1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGV4cGFuZENvbGxhcHNlLmNvbGxhcHNlKG5vZGVzKTtcbiAgfVxufTtcblxuLy8gQ29sbGFwc2UgYWxsIGNvbXBsZXhlcyByZWN1cnNpdmVseS4gUmVxdWlyZXMgZXhwYW5kQ29sbGFwc2UgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgdW5kb2FibGUgb3B0aW9uLlxubWFpblV0aWxpdGllcy5jb2xsYXBzZUNvbXBsZXhlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcbiAgXG4gIHZhciBjb21wbGV4ZXMgPSBjeS5ub2RlcyhcIltjbGFzcz0nY29tcGxleCddXCIpO1xuICBpZiAoZXhwYW5kQ29sbGFwc2UuY29sbGFwc2libGVOb2Rlcyhjb21wbGV4ZXMpLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJjb2xsYXBzZVJlY3Vyc2l2ZWx5XCIsIHtcbiAgICAgIG5vZGVzOiBjb21wbGV4ZXNcbiAgICB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICBleHBhbmRDb2xsYXBzZS5jb2xsYXBzZVJlY3Vyc2l2ZWx5KGNvbXBsZXhlcyk7XG4gIH1cbn07XG5cbi8vIEV4cGFuZCBhbGwgY29tcGxleGVzIHJlY3Vyc2l2ZWx5LiBSZXF1aXJlcyBleHBhbmRDb2xsYXBzZSBleHRlbnNpb24gYW5kIGNvbnNpZGVycyB1bmRvYWJsZSBvcHRpb24uXG5tYWluVXRpbGl0aWVzLmV4cGFuZENvbXBsZXhlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcbiAgXG4gIHZhciBub2RlcyA9IGV4cGFuZENvbGxhcHNlLmV4cGFuZGFibGVOb2RlcyhjeS5ub2RlcygpLmZpbHRlcihcIltjbGFzcz0nY29tcGxleCddXCIpKTtcbiAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJleHBhbmRSZWN1cnNpdmVseVwiLCB7XG4gICAgICBub2Rlczogbm9kZXNcbiAgICB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICBleHBhbmRDb2xsYXBzZS5leHBhbmRSZWN1cnNpdmVseShub2Rlcyk7XG4gIH1cbn07XG5cbi8vIENvbGxhcHNlIGFsbCBub2RlcyByZWN1cnNpdmVseS4gUmVxdWlyZXMgZXhwYW5kQ29sbGFwc2UgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgdW5kb2FibGUgb3B0aW9uLlxubWFpblV0aWxpdGllcy5jb2xsYXBzZUFsbCA9IGZ1bmN0aW9uKCkge1xuICAvLyBHZXQgZXhwYW5kQ29sbGFwc2UgYXBpXG4gIHZhciBleHBhbmRDb2xsYXBzZSA9IGN5LmV4cGFuZENvbGxhcHNlKCdnZXQnKTtcbiAgXG4gIHZhciBub2RlcyA9IGN5Lm5vZGVzKCc6dmlzaWJsZScpO1xuICBpZiAoZXhwYW5kQ29sbGFwc2UuY29sbGFwc2libGVOb2Rlcyhub2RlcykubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGlmIChvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgY3kudW5kb1JlZG8oKS5kbyhcImNvbGxhcHNlUmVjdXJzaXZlbHlcIiwge1xuICAgICAgbm9kZXM6IG5vZGVzXG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZXhwYW5kQ29sbGFwc2UuY29sbGFwc2VSZWN1cnNpdmVseShub2Rlcyk7XG4gIH1cbn07XG5cbi8vIEV4cGFuZCBhbGwgbm9kZXMgcmVjdXJzaXZlbHkuIFJlcXVpcmVzIGV4cGFuZENvbGxhcHNlIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzIHVuZG9hYmxlIG9wdGlvbi5cbm1haW5VdGlsaXRpZXMuZXhwYW5kQWxsID0gZnVuY3Rpb24oKSB7XG4gIC8vIEdldCBleHBhbmRDb2xsYXBzZSBhcGlcbiAgdmFyIGV4cGFuZENvbGxhcHNlID0gY3kuZXhwYW5kQ29sbGFwc2UoJ2dldCcpO1xuICBcbiAgdmFyIG5vZGVzID0gZXhwYW5kQ29sbGFwc2UuZXhwYW5kYWJsZU5vZGVzKGN5Lm5vZGVzKCc6dmlzaWJsZScpKTtcbiAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJleHBhbmRSZWN1cnNpdmVseVwiLCB7XG4gICAgICBub2Rlczogbm9kZXNcbiAgICB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICBleHBhbmRDb2xsYXBzZS5leHBhbmRSZWN1cnNpdmVseShub2Rlcyk7XG4gIH1cbn07XG5cbi8vIEV4dGVuZHMgdGhlIGdpdmVuIG5vZGVzIGxpc3QgaW4gYSBzbWFydCB3YXkgdG8gbGVhdmUgdGhlIG1hcCBpbnRhY3QgYW5kIGhpZGVzIHRoZSByZXN1bHRpbmcgbGlzdC4gXG4vLyBSZXF1aXJlcyB2aWV3VXRpbGl0aWVzIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxubWFpblV0aWxpdGllcy5oaWRlTm9kZXNTbWFydCA9IGZ1bmN0aW9uKF9ub2Rlcykge1xuICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgXG4gIHZhciBhbGxOb2RlcyA9IGN5Lm5vZGVzKFwiOnZpc2libGVcIik7XG4gIHZhciBub2Rlc1RvU2hvdyA9IGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kUmVtYWluaW5nTm9kZXMobm9kZXMsIGFsbE5vZGVzKTtcbiAgdmFyIG5vZGVzVG9IaWRlID0gYWxsTm9kZXMubm90KG5vZGVzVG9TaG93KTtcblxuICBpZiAobm9kZXNUb0hpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBpZihvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgY3kudW5kb1JlZG8oKS5kbyhcImhpZGVcIiwgbm9kZXNUb0hpZGUpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZpZXdVdGlsaXRpZXMuaGlkZShub2Rlc1RvSGlkZSk7XG4gIH1cbn07XG5cbi8vIEV4dGVuZHMgdGhlIGdpdmVuIG5vZGVzIGxpc3QgaW4gYSBzbWFydCB3YXkgdG8gbGVhdmUgdGhlIG1hcCBpbnRhY3QuIFxuLy8gVGhlbiB1bmhpZGVzIHRoZSByZXN1bHRpbmcgbGlzdCBhbmQgaGlkZXMgb3RoZXJzLiBSZXF1aXJlcyB2aWV3VXRpbGl0aWVzIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxubWFpblV0aWxpdGllcy5zaG93Tm9kZXNTbWFydCA9IGZ1bmN0aW9uKF9ub2Rlcykge1xuICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgXG4gIHZhciBhbGxOb2RlcyA9IGN5LmVsZW1lbnRzKCk7XG4gIHZhciBub2Rlc1RvU2hvdyA9IGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXMpO1xuICB2YXIgbm9kZXNUb0hpZGUgPSBhbGxOb2Rlcy5ub3Qobm9kZXNUb1Nob3cpO1xuICBcbiAgaWYgKG5vZGVzVG9IaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgaWYob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJoaWRlXCIsIG5vZGVzVG9IaWRlKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2aWV3VXRpbGl0aWVzLmhpZGUobm9kZXNUb0hpZGUpO1xuICB9XG59O1xuXG4vLyBVbmhpZGVzIGFsbCBlbGVtZW50cy4gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbm1haW5VdGlsaXRpZXMuc2hvd0FsbCA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuICBcbiAgaWYgKGN5LmVsZW1lbnRzKCkubGVuZ3RoID09PSBjeS5lbGVtZW50cygnOnZpc2libGUnKS5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGlmKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICBjeS51bmRvUmVkbygpLmRvKFwic2hvd1wiLCBjeS5lbGVtZW50cygpKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2aWV3VXRpbGl0aWVzLnNob3coY3kuZWxlbWVudHMoKSk7XG4gIH1cbn07XG5cbi8vIFJlbW92ZXMgdGhlIGdpdmVuIGVsZW1lbnRzIGluIGEgc2ltcGxlIHdheS4gQ29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxubWFpblV0aWxpdGllcy5kZWxldGVFbGVzU2ltcGxlID0gZnVuY3Rpb24oZWxlcykge1xuICBpZiAoZWxlcy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICBjeS51bmRvUmVkbygpLmRvKFwiZGVsZXRlRWxlc1NpbXBsZVwiLCB7XG4gICAgICBlbGVzOiBlbGVzXG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZWxlcy5yZW1vdmUoKTtcbiAgfVxufTtcblxuLy8gRXh0ZW5kcyB0aGUgZ2l2ZW4gbm9kZXMgbGlzdCBpbiBhIHNtYXJ0IHdheSB0byBsZWF2ZSB0aGUgbWFwIGludGFjdCBhbmQgcmVtb3ZlcyB0aGUgcmVzdWx0aW5nIGxpc3QuIFxuLy8gQ29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxubWFpblV0aWxpdGllcy5kZWxldGVOb2Rlc1NtYXJ0ID0gZnVuY3Rpb24oX25vZGVzKSB7XG4gIHZhciBub2RlcyA9IF9ub2Rlcy5ub2RlcygpO1xuICBpZiAobm9kZXMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGlmKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICBjeS51bmRvUmVkbygpLmRvKFwiZGVsZXRlTm9kZXNTbWFydFwiLCB7XG4gICAgICBmaXJzdFRpbWU6IHRydWUsXG4gICAgICBlbGVzOiBub2Rlc1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlTm9kZXNTbWFydChub2Rlcyk7XG4gIH1cbn07XG5cbi8vIEhpZ2hsaWdodHMgbmVpZ2hib3VycyBvZiB0aGUgZ2l2ZW4gbm9kZXMuIFJlcXVpcmVzIHZpZXdVdGlsaXRpZXMgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG5tYWluVXRpbGl0aWVzLmhpZ2hsaWdodE5laWdoYm91cnMgPSBmdW5jdGlvbihfbm9kZXMpIHtcbiAgLy8gSWYgdGhpcyBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQgd2UgY2FuIGFzc3VtZSB0aGF0IHZpZXcgdXRpbGl0aWVzIGV4dGVuc2lvbiBpcyBvbiB1c2VcbiAgdmFyIHZpZXdVdGlsaXRpZXMgPSBjeS52aWV3VXRpbGl0aWVzKCdnZXQnKTtcbiAgXG4gIHZhciBub2RlcyA9IF9ub2Rlcy5ub2RlcygpOyAvLyBFbnN1cmUgdGhhdCBub2RlcyBsaXN0IGp1c3QgaW5jbHVkZSBub2Rlc1xuICB2YXIgZWxlc1RvSGlnaGxpZ2h0ID0gZWxlbWVudFV0aWxpdGllcy5nZXROZWlnaGJvdXJzT2ZOb2Rlcyhub2Rlcyk7XG4gIGlmIChlbGVzVG9IaWdobGlnaHQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBub3RIaWdobGlnaHRlZEVsZXMgPSBjeS5lbGVtZW50cyhcIi5ub3RoaWdobGlnaHRlZFwiKS5maWx0ZXIoXCI6dmlzaWJsZVwiKTtcbiAgdmFyIGhpZ2hsaWdodGVkRWxlcyA9IGN5LmVsZW1lbnRzKCc6dmlzaWJsZScpLmRpZmZlcmVuY2Uobm90SGlnaGxpZ2h0ZWRFbGVzKTtcbiAgaWYgKGVsZXNUb0hpZ2hsaWdodC5zYW1lKGhpZ2hsaWdodGVkRWxlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGlmIChvcHRpb25zLnVuZG9hYmxlKSB7XG4gICAgY3kudW5kb1JlZG8oKS5kbyhcImhpZ2hsaWdodFwiLCBlbGVzVG9IaWdobGlnaHQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZpZXdVdGlsaXRpZXMuaGlnaGxpZ2h0KGVsZXNUb0hpZ2hsaWdodCk7XG4gIH1cbn07XG5cbi8vIEZpbmRzIHRoZSBlbGVtZW50cyB3aG9zZSBsYWJlbCBpbmNsdWRlcyB0aGUgZ2l2ZW4gbGFiZWwgYW5kIGhpZ2hsaWdodHMgcHJvY2Vzc2VzIG9mIHRob3NlIGVsZW1lbnRzLlxuLy8gUmVxdWlyZXMgdmlld1V0aWxpdGllcyBleHRlbnNpb24gYW5kIGNvbnNpZGVycyAndW5kb2FibGUnIG9wdGlvbi5cbm1haW5VdGlsaXRpZXMuc2VhcmNoQnlMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsKSB7XG4gIGlmIChsYWJlbC5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBcbiAgdmFyIG5vZGVzVG9IaWdobGlnaHQgPSBjeS5ub2RlcyhcIjp2aXNpYmxlXCIpLmZpbHRlcihmdW5jdGlvbiAoZWxlLCBpKSB7XG4gICAgaWYodHlwZW9mIGVsZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgZWxlID0gaTtcbiAgICB9XG4gICAgaWYgKGVsZS5kYXRhKFwibGFiZWxcIikgJiYgZWxlLmRhdGEoXCJsYWJlbFwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YobGFiZWwpID49IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gIGlmIChub2Rlc1RvSGlnaGxpZ2h0Lmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuXG4gIG5vZGVzVG9IaWdobGlnaHQgPSBlbGVtZW50VXRpbGl0aWVzLmV4dGVuZE5vZGVMaXN0KG5vZGVzVG9IaWdobGlnaHQpO1xuICBcbiAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICBjeS51bmRvUmVkbygpLmRvKFwiaGlnaGxpZ2h0XCIsIG5vZGVzVG9IaWdobGlnaHQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZpZXdVdGlsaXRpZXMuaGlnaGxpZ2h0KG5vZGVzVG9IaWdobGlnaHQpO1xuICB9XG59O1xuXG4vLyBIaWdobGlnaHRzIHByb2Nlc3NlcyBvZiB0aGUgZ2l2ZW4gbm9kZXMuIFJlcXVpcmVzIHZpZXdVdGlsaXRpZXMgZXh0ZW5zaW9uIGFuZCBjb25zaWRlcnMgJ3VuZG9hYmxlJyBvcHRpb24uXG5tYWluVXRpbGl0aWVzLmhpZ2hsaWdodFByb2Nlc3NlcyA9IGZ1bmN0aW9uKF9ub2Rlcykge1xuICB2YXIgbm9kZXMgPSBfbm9kZXMubm9kZXMoKTsgLy8gRW5zdXJlIHRoYXQgbm9kZXMgbGlzdCBqdXN0IGluY2x1ZGUgbm9kZXNcbiAgdmFyIGVsZXNUb0hpZ2hsaWdodCA9IGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZUxpc3Qobm9kZXMpO1xuICBpZiAoZWxlc1RvSGlnaGxpZ2h0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbm90SGlnaGxpZ2h0ZWRFbGVzID0gY3kuZWxlbWVudHMoXCIubm90aGlnaGxpZ2h0ZWRcIikuZmlsdGVyKFwiOnZpc2libGVcIik7XG4gIHZhciBoaWdobGlnaHRlZEVsZXMgPSBjeS5lbGVtZW50cygnOnZpc2libGUnKS5kaWZmZXJlbmNlKG5vdEhpZ2hsaWdodGVkRWxlcyk7XG4gIGlmIChlbGVzVG9IaWdobGlnaHQuc2FtZShoaWdobGlnaHRlZEVsZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCB3ZSBjYW4gYXNzdW1lIHRoYXQgdmlldyB1dGlsaXRpZXMgZXh0ZW5zaW9uIGlzIG9uIHVzZVxuICB2YXIgdmlld1V0aWxpdGllcyA9IGN5LnZpZXdVdGlsaXRpZXMoJ2dldCcpO1xuICBcbiAgaWYgKG9wdGlvbnMudW5kb2FibGUpIHtcbiAgICBjeS51bmRvUmVkbygpLmRvKFwiaGlnaGxpZ2h0XCIsIGVsZXNUb0hpZ2hsaWdodCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmlld1V0aWxpdGllcy5oaWdobGlnaHQoZWxlc1RvSGlnaGxpZ2h0KTtcbiAgfVxufTtcblxuLy8gVW5oaWdobGlnaHRzIGFueSBoaWdobGlnaHRlZCBlbGVtZW50LiBSZXF1aXJlcyB2aWV3VXRpbGl0aWVzIGV4dGVuc2lvbiBhbmQgY29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLlxubWFpblV0aWxpdGllcy5yZW1vdmVIaWdobGlnaHRzID0gZnVuY3Rpb24oKSB7XG4gIGlmIChlbGVtZW50VXRpbGl0aWVzLm5vbmVJc05vdEhpZ2hsaWdodGVkKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkIHdlIGNhbiBhc3N1bWUgdGhhdCB2aWV3IHV0aWxpdGllcyBleHRlbnNpb24gaXMgb24gdXNlXG4gIHZhciB2aWV3VXRpbGl0aWVzID0gY3kudmlld1V0aWxpdGllcygnZ2V0Jyk7XG4gIFxuICBpZiAob3B0aW9ucy51bmRvYWJsZSkge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJyZW1vdmVIaWdobGlnaHRzXCIpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZpZXdVdGlsaXRpZXMucmVtb3ZlSGlnaGxpZ2h0cygpO1xuICB9XG59O1xuXG4vLyBQZXJmb3JtcyBsYXlvdXQgYnkgZ2l2ZW4gbGF5b3V0T3B0aW9ucy4gQ29uc2lkZXJzICd1bmRvYWJsZScgb3B0aW9uLiBIb3dldmVyLCBieSBzZXR0aW5nIG5vdFVuZG9hYmxlIHBhcmFtZXRlclxuLy8gdG8gYSB0cnV0aHkgdmFsdWUgeW91IGNhbiBmb3JjZSBhbiB1bmRhYmxlIGxheW91dCBvcGVyYXRpb24gaW5kZXBlbmRhbnQgb2YgJ3VuZG9hYmxlJyBvcHRpb24uXG5tYWluVXRpbGl0aWVzLnBlcmZvcm1MYXlvdXQgPSBmdW5jdGlvbihsYXlvdXRPcHRpb25zLCBub3RVbmRvYWJsZSkge1xuICAvLyBUaGluZ3MgdG8gZG8gYmVmb3JlIHBlcmZvcm1pbmcgbGF5b3V0XG4gIGJlZm9yZVBlcmZvcm1MYXlvdXQoKTtcbiAgXG4gIGlmICghb3B0aW9ucy51bmRvYWJsZSB8fCBub3RVbmRvYWJsZSkgeyAvLyAnbm90VW5kb2FibGUnIGZsYWcgY2FuIGJlIHVzZWQgdG8gaGF2ZSBjb21wb3NpdGUgYWN0aW9ucyBpbiB1bmRvL3JlZG8gc3RhY2tcbiAgICB2YXIgbGF5b3V0ID0gY3kuZWxlbWVudHMoKS5maWx0ZXIoJzp2aXNpYmxlJykubGF5b3V0KGxheW91dE9wdGlvbnMpO1xuICAgIFxuICAgIC8vIENoZWNrIHRoaXMgZm9yIGN5dG9zY2FwZS5qcyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgaWYgKGxheW91dCAmJiBsYXlvdXQucnVuKSB7XG4gICAgICBsYXlvdXQucnVuKCk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGN5LnVuZG9SZWRvKCkuZG8oXCJsYXlvdXRcIiwge1xuICAgICAgb3B0aW9uczogbGF5b3V0T3B0aW9ucyxcbiAgICAgIGVsZXM6IGN5LmVsZW1lbnRzKCkuZmlsdGVyKCc6dmlzaWJsZScpXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIENyZWF0ZXMgYW4gc2Jnbm1sIGZpbGUgY29udGVudCBmcm9tIHRoZSBleGlzaW5nIGdyYXBoIGFuZCByZXR1cm5zIGl0LlxubWFpblV0aWxpdGllcy5jcmVhdGVTYmdubWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzb25Ub1NiZ25tbC5jcmVhdGVTYmdubWwoKTtcbn07XG5cbi8vIENvbnZlcnRzIGdpdmVuIHNiZ25tbCBkYXRhIHRvIGEganNvbiBvYmplY3QgaW4gYSBzcGVjaWFsIGZvcm1hdCBcbi8vIChodHRwOi8vanMuY3l0b3NjYXBlLm9yZy8jbm90YXRpb24vZWxlbWVudHMtanNvbikgYW5kIHJldHVybnMgaXQuXG5tYWluVXRpbGl0aWVzLmNvbnZlcnRTYmdubWxUb0pzb24gPSBmdW5jdGlvbihkYXRhKSB7XG4gIHJldHVybiBzYmdubWxUb0pzb24uY29udmVydChkYXRhKTtcbn07XG5cbi8vIENyZWF0ZSB0aGUgcXRpcCBjb250ZW50cyBvZiB0aGUgZ2l2ZW4gbm9kZSBhbmQgcmV0dXJucyBpdC5cbm1haW5VdGlsaXRpZXMuZ2V0UXRpcENvbnRlbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmdldFF0aXBDb250ZW50KG5vZGUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYWluVXRpbGl0aWVzOyIsIi8qXG4gKiAgRXh0ZW5kIGRlZmF1bHQgb3B0aW9ucyBhbmQgZ2V0IGN1cnJlbnQgb3B0aW9ucyBieSB1c2luZyB0aGlzIGZpbGUgXG4gKi9cblxuLy8gZGVmYXVsdCBvcHRpb25zXG52YXIgZGVmYXVsdHMgPSB7XG4gIC8vIFRoZSBwYXRoIG9mIGNvcmUgbGlicmFyeSBpbWFnZXMgd2hlbiBzYmdudml6IGlzIHJlcXVpcmVkIGZyb20gbnBtIGFuZCB0aGUgaW5kZXggaHRtbCBcbiAgLy8gZmlsZSBhbmQgbm9kZV9tb2R1bGVzIGFyZSB1bmRlciB0aGUgc2FtZSBmb2xkZXIgdGhlbiB1c2luZyB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBmaW5lXG4gIGltZ1BhdGg6ICdub2RlX21vZHVsZXMvc2JnbnZpei9zcmMvaW1nJyxcbiAgLy8gV2hldGhlciB0byBmaXQgbGFiZWxzIHRvIG5vZGVzXG4gIGZpdExhYmVsc1RvTm9kZXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vIGR5bmFtaWMgbGFiZWwgc2l6ZSBpdCBtYXkgYmUgJ3NtYWxsJywgJ3JlZ3VsYXInLCAnbGFyZ2UnXG4gIGR5bmFtaWNMYWJlbFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ3JlZ3VsYXInO1xuICB9LFxuICAvLyBwZXJjZW50YWdlIHVzZWQgdG8gY2FsY3VsYXRlIGNvbXBvdW5kIHBhZGRpbmdzXG4gIGNvbXBvdW5kUGFkZGluZzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAxMDtcbiAgfSxcbiAgLy8gZXh0cmEgcGFkZGluZyBmb3IgY29tcGFydG1lbnQgYW5kIGNvbXBsZXhlc1xuICBleHRyYUNvbXBhcnRtZW50UGFkZGluZzogMTAsXG4gIGV4dHJhQ29tcGxleFBhZGRpbmc6IDEwLFxuICAvLyBXZXRoZXIgdG8gZGlzcGxheSB0aGUgY29tcGxleCdzIGxhYmVscywgbGlrZSBjb21wYXJ0bWVudHMuXG4gIC8vIFdpbGwgYWxzbyBpbmNyZWFzZSB0aGUgcGFkZGluZ3MgYnkgZXh0cmFDb21wb3VuZFBhZGRpbmcgdG8gbWFrZSByb29tIGZvciB0aGUgbmFtZS5cbiAgc2hvd0NvbXBsZXhOYW1lOiBmYWxzZSxcbiAgLy8gVGhlIHNlbGVjdG9yIG9mIHRoZSBjb21wb25lbnQgY29udGFpbmluZyB0aGUgc2JnbiBuZXR3b3JrXG4gIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcbiAgLy8gV2hldGhlciB0aGUgYWN0aW9ucyBhcmUgdW5kb2FibGUsIHJlcXVpcmVzIGN5dG9zY2FwZS11bmRvLXJlZG8gZXh0ZW5zaW9uXG4gIHVuZG9hYmxlOiB0cnVlXG59O1xuXG52YXIgb3B0aW9uVXRpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xufTtcblxuLy8gRXh0ZW5kIHRoZSBkZWZhdWx0cyBvcHRpb25zIHdpdGggdGhlIHVzZXIgb3B0aW9uc1xub3B0aW9uVXRpbGl0aWVzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBkZWZhdWx0cykge1xuICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xuICB9XG4gIFxuICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICB9XG5cbiAgb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnMgPSByZXN1bHQ7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5vcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG9wdGlvblV0aWxpdGllcy5vcHRpb25zO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25VdGlsaXRpZXM7XG4iLCJ2YXIgZWxlbWVudFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vZWxlbWVudC11dGlsaXRpZXMnKTtcbnZhciBncmFwaFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vZ3JhcGgtdXRpbGl0aWVzJyk7XG52YXIgbGlic2JnbmpzID0gcmVxdWlyZSgnbGlic2Jnbi5qcycpO1xuXG52YXIgc2Jnbm1sVG9Kc29uID0ge1xuICBpbnNlcnRlZE5vZGVzOiB7fSxcbiAgZ2V0QWxsQ29tcGFydG1lbnRzOiBmdW5jdGlvbiAoZ2x5cGhMaXN0KSB7XG4gICAgdmFyIGNvbXBhcnRtZW50cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChnbHlwaExpc3RbaV0uY2xhc3NfID09ICdjb21wYXJ0bWVudCcpIHtcbiAgICAgICAgdmFyIGNvbXBhcnRtZW50ID0gZ2x5cGhMaXN0W2ldO1xuICAgICAgICB2YXIgYmJveCA9IGNvbXBhcnRtZW50LmJib3g7XG4gICAgICAgIGNvbXBhcnRtZW50cy5wdXNoKHtcbiAgICAgICAgICAneCc6IHBhcnNlRmxvYXQoYmJveC54KSxcbiAgICAgICAgICAneSc6IHBhcnNlRmxvYXQoYmJveC55KSxcbiAgICAgICAgICAndyc6IHBhcnNlRmxvYXQoYmJveC53KSxcbiAgICAgICAgICAnaCc6IHBhcnNlRmxvYXQoYmJveC5oKSxcbiAgICAgICAgICAnaWQnOiBjb21wYXJ0bWVudC5pZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYXJ0bWVudHMuc29ydChmdW5jdGlvbiAoYzEsIGMyKSB7XG4gICAgICBpZiAoYzEuaCAqIGMxLncgPCBjMi5oICogYzIudykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoYzEuaCAqIGMxLncgPiBjMi5oICogYzIudykge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbXBhcnRtZW50cztcbiAgfSxcbiAgaXNJbkJvdW5kaW5nQm94OiBmdW5jdGlvbiAoYmJveDEsIGJib3gyKSB7XG4gICAgaWYgKGJib3gxLnggPiBiYm94Mi54ICYmXG4gICAgICAgIGJib3gxLnkgPiBiYm94Mi55ICYmXG4gICAgICAgIGJib3gxLnggKyBiYm94MS53IDwgYmJveDIueCArIGJib3gyLncgJiZcbiAgICAgICAgYmJveDEueSArIGJib3gxLmggPCBiYm94Mi55ICsgYmJveDIuaCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgYmJveFByb3A6IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgYmJveCA9IGVsZS5iYm94O1xuXG4gICAgLy8gc2V0IHBvc2l0aW9ucyBhcyBjZW50ZXJcbiAgICBiYm94LnggPSBwYXJzZUZsb2F0KGJib3gueCkgKyBwYXJzZUZsb2F0KGJib3gudykgLyAyO1xuICAgIGJib3gueSA9IHBhcnNlRmxvYXQoYmJveC55KSArIHBhcnNlRmxvYXQoYmJveC5oKSAvIDI7XG5cbiAgICByZXR1cm4gYmJveDtcbiAgfSxcbiAgc3RhdGVBbmRJbmZvQmJveFByb3A6IGZ1bmN0aW9uIChlbGUsIHBhcmVudEJib3gpIHtcbiAgICB2YXIgeFBvcyA9IHBhcnNlRmxvYXQocGFyZW50QmJveC54KTtcbiAgICB2YXIgeVBvcyA9IHBhcnNlRmxvYXQocGFyZW50QmJveC55KTtcblxuICAgIHZhciBiYm94ID0gZWxlLmJib3g7XG5cbiAgICAvLyBzZXQgcG9zaXRpb25zIGFzIGNlbnRlclxuICAgIGJib3gueCA9IHBhcnNlRmxvYXQoYmJveC54KSArIHBhcnNlRmxvYXQoYmJveC53KSAvIDIgLSB4UG9zO1xuICAgIGJib3gueSA9IHBhcnNlRmxvYXQoYmJveC55KSArIHBhcnNlRmxvYXQoYmJveC5oKSAvIDIgLSB5UG9zO1xuXG4gICAgYmJveC54ID0gYmJveC54IC8gcGFyc2VGbG9hdChwYXJlbnRCYm94LncpICogMTAwO1xuICAgIGJib3gueSA9IGJib3gueSAvIHBhcnNlRmxvYXQocGFyZW50QmJveC5oKSAqIDEwMDtcblxuICAgIHJldHVybiBiYm94O1xuICB9LFxuICBmaW5kQ2hpbGROb2RlczogZnVuY3Rpb24gKGVsZSwgY2hpbGRUYWdOYW1lKSB7XG4gICAgLy8gZmluZCBjaGlsZCBub2RlcyBhdCBkZXB0aCBsZXZlbCBvZiAxIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gZWxlLmNoaWxkTm9kZXNbaV07XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgY2hpbGQudGFnTmFtZSA9PT0gY2hpbGRUYWdOYW1lKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG4gIGZpbmRDaGlsZE5vZGU6IGZ1bmN0aW9uIChlbGUsIGNoaWxkVGFnTmFtZSkge1xuICAgIHZhciBub2RlcyA9IHRoaXMuZmluZENoaWxkTm9kZXMoZWxlLCBjaGlsZFRhZ05hbWUpO1xuICAgIHJldHVybiBub2Rlcy5sZW5ndGggPiAwID8gbm9kZXNbMF0gOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHN0YXRlQW5kSW5mb1Byb3A6IGZ1bmN0aW9uIChlbGUsIHBhcmVudEJib3gpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHN0YXRlQW5kSW5mb0FycmF5ID0gW107XG5cbiAgICB2YXIgY2hpbGRHbHlwaHMgPSBlbGUuZ2x5cGhNZW1iZXJzOyAvLyB0aGlzLmZpbmRDaGlsZE5vZGVzKGVsZSwgJ2dseXBoJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkR2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZ2x5cGggPSBjaGlsZEdseXBoc1tpXTtcbiAgICAgIHZhciBpbmZvID0ge307XG5cbiAgICAgIGlmIChnbHlwaC5jbGFzc18gPT09ICd1bml0IG9mIGluZm9ybWF0aW9uJykge1xuICAgICAgICBpbmZvLmlkID0gZ2x5cGguaWQgfHwgdW5kZWZpbmVkO1xuICAgICAgICBpbmZvLmNsYXp6ID0gZ2x5cGguY2xhc3NfIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgaW5mby5sYWJlbCA9IHtcbiAgICAgICAgICAndGV4dCc6IChnbHlwaC5sYWJlbCAmJiBnbHlwaC5sYWJlbC50ZXh0KSB8fCB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgaW5mby5iYm94ID0gc2VsZi5zdGF0ZUFuZEluZm9CYm94UHJvcChnbHlwaCwgcGFyZW50QmJveCk7XG4gICAgICAgIHN0YXRlQW5kSW5mb0FycmF5LnB1c2goaW5mbyk7XG4gICAgICB9IGVsc2UgaWYgKGdseXBoLmNsYXNzXyA9PT0gJ3N0YXRlIHZhcmlhYmxlJykge1xuICAgICAgICBpbmZvLmlkID0gZ2x5cGguaWQgfHwgdW5kZWZpbmVkO1xuICAgICAgICBpbmZvLmNsYXp6ID0gZ2x5cGguY2xhc3NfIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2x5cGguc3RhdGU7XG4gICAgICAgIHZhciB2YWx1ZSA9IChzdGF0ZSAmJiBzdGF0ZS52YWx1ZSkgfHwgdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdmFyaWFibGUgPSAoc3RhdGUgJiYgc3RhdGUudmFyaWFibGUpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgaW5mby5zdGF0ZSA9IHtcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAndmFyaWFibGUnOiB2YXJpYWJsZVxuICAgICAgICB9O1xuICAgICAgICBpbmZvLmJib3ggPSBzZWxmLnN0YXRlQW5kSW5mb0Jib3hQcm9wKGdseXBoLCBwYXJlbnRCYm94KTtcbiAgICAgICAgc3RhdGVBbmRJbmZvQXJyYXkucHVzaChpbmZvKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiBzdGF0ZUFuZEluZm9BcnJheTtcbiAgfSxcbiAgYWRkUGFyZW50SW5mb1RvTm9kZTogZnVuY3Rpb24gKGVsZSwgbm9kZU9iaiwgcGFyZW50LCBjb21wYXJ0bWVudHMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNvbXBhcnRtZW50UmVmID0gZWxlLmNvbXBhcnRtZW50UmVmO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZU9iai5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhcnRtZW50UmVmKSB7XG4gICAgICBub2RlT2JqLnBhcmVudCA9IGNvbXBhcnRtZW50UmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlT2JqLnBhcmVudCA9ICcnO1xuXG4gICAgICAvLyBhZGQgY29tcGFydG1lbnQgYWNjb3JkaW5nIHRvIGdlb21ldHJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBhcnRtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYmJveEVsID0gZWxlLmJib3g7XG4gICAgICAgIHZhciBiYm94ID0ge1xuICAgICAgICAgICd4JzogcGFyc2VGbG9hdChiYm94RWwueCksXG4gICAgICAgICAgJ3knOiBwYXJzZUZsb2F0KGJib3hFbC55KSxcbiAgICAgICAgICAndyc6IHBhcnNlRmxvYXQoYmJveEVsLncpLFxuICAgICAgICAgICdoJzogcGFyc2VGbG9hdChiYm94RWwuaCksXG4gICAgICAgICAgJ2lkJzogZWxlLmlkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzZWxmLmlzSW5Cb3VuZGluZ0JveChiYm94LCBjb21wYXJ0bWVudHNbaV0pKSB7XG4gICAgICAgICAgbm9kZU9iai5wYXJlbnQgPSBjb21wYXJ0bWVudHNbaV0uaWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGFkZEN5dG9zY2FwZUpzTm9kZTogZnVuY3Rpb24gKGVsZSwganNvbkFycmF5LCBwYXJlbnQsIGNvbXBhcnRtZW50cykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbm9kZU9iaiA9IHt9O1xuXG4gICAgLy8gYWRkIGlkIGluZm9ybWF0aW9uXG4gICAgbm9kZU9iai5pZCA9IGVsZS5pZDtcbiAgICAvLyBhZGQgbm9kZSBib3VuZGluZyBib3ggaW5mb3JtYXRpb25cbiAgICBub2RlT2JqLmJib3ggPSBzZWxmLmJib3hQcm9wKGVsZSk7XG4gICAgLy8gYWRkIGNsYXNzIGluZm9ybWF0aW9uXG4gICAgbm9kZU9iai5jbGFzcyA9IGVsZS5jbGFzc187XG4gICAgLy8gYWRkIGxhYmVsIGluZm9ybWF0aW9uXG4gICAgbm9kZU9iai5sYWJlbCA9IChlbGUubGFiZWwgJiYgZWxlLmxhYmVsLnRleHQpIHx8IHVuZGVmaW5lZDtcbiAgICAvLyBhZGQgc3RhdGUgYW5kIGluZm8gYm94IGluZm9ybWF0aW9uXG4gICAgbm9kZU9iai5zdGF0ZXNhbmRpbmZvcyA9IHNlbGYuc3RhdGVBbmRJbmZvUHJvcChlbGUsIG5vZGVPYmouYmJveCk7XG4gICAgLy8gYWRkaW5nIHBhcmVudCBpbmZvcm1hdGlvblxuICAgIHNlbGYuYWRkUGFyZW50SW5mb1RvTm9kZShlbGUsIG5vZGVPYmosIHBhcmVudCwgY29tcGFydG1lbnRzKTtcblxuICAgIC8vIGFkZCBjbG9uZSBpbmZvcm1hdGlvblxuICAgIGlmIChlbGUuY2xvbmUpIHtcbiAgICAgIG5vZGVPYmouY2xvbmVtYXJrZXIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlT2JqLmNsb25lbWFya2VyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGFkZCBwb3J0IGluZm9ybWF0aW9uXG4gICAgdmFyIHBvcnRzID0gW107XG4gICAgdmFyIHBvcnRFbGVtZW50cyA9IGVsZS5wb3J0cztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9ydEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcG9ydEVsID0gcG9ydEVsZW1lbnRzW2ldO1xuICAgICAgdmFyIGlkID0gcG9ydEVsLmlkO1xuICAgICAgdmFyIHJlbGF0aXZlWFBvcyA9IHBhcnNlRmxvYXQocG9ydEVsLngpIC0gbm9kZU9iai5iYm94Lng7XG4gICAgICB2YXIgcmVsYXRpdmVZUG9zID0gcGFyc2VGbG9hdChwb3J0RWwueSkgLSBub2RlT2JqLmJib3gueTtcblxuICAgICAgcmVsYXRpdmVYUG9zID0gcmVsYXRpdmVYUG9zIC8gcGFyc2VGbG9hdChub2RlT2JqLmJib3gudykgKiAxMDA7XG4gICAgICByZWxhdGl2ZVlQb3MgPSByZWxhdGl2ZVlQb3MgLyBwYXJzZUZsb2F0KG5vZGVPYmouYmJveC5oKSAqIDEwMDtcblxuICAgICAgcG9ydHMucHVzaCh7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgeDogcmVsYXRpdmVYUG9zLFxuICAgICAgICB5OiByZWxhdGl2ZVlQb3NcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG5vZGVPYmoucG9ydHMgPSBwb3J0cztcbiAgICBcbiAgICB2YXIgX2NsYXNzID0gbm9kZU9iai5jbGFzcztcbiAgICAvLyBJZiB0aGUgbm9kZSBjYW4gaGF2ZSBwb3J0cyBhbmQgaXQgaGFzIGV4YWN0bHkgMiBwb3J0cyB0aGVuIGl0IHNob3VsZCBiZSByZXByZXNlbnRlZCBieSBhIGJpZ2dlciBiYm94LlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSByZXByZXNlbnQgaXQgYXMgYSBwb2x5Z29uIGFuZCBzbyB0aGUgd2hvbGUgc2hhcGUgaW5jbHVkaW5nIHRoZSBwb3J0cyBhcmUgcmVuZGVyZWQgaW4gdGhlIG5vZGUgYmJveC5cbiAgICBpZiAoZWxlbWVudFV0aWxpdGllcy5jYW5IYXZlUG9ydHMoX2NsYXNzKSkge1xuICAgICAgaWYgKGdyYXBoVXRpbGl0aWVzLnBvcnRzRW5hYmxlZCAmJiBwb3J0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIHBvcnRzIGFyZSBzeW1tZXRyaWMgdG8gdGhlIG5vZGUgY2VudGVyIHNvIHVzaW5nIGp1c3Qgb25lIG9mIHRoZSBwb3J0cyBpcyBlbm91Z2hcbiAgICAgICAgdmFyIHBvcnQgPSBwb3J0c1swXTtcbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gcG9ydC54ID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgcmF0aW8gb2YgdGhlIGFyZWEgb2NjdXBpZWQgd2l0aCBwb3J0cyBvdmVyIHdpdGhvdXQgcG9ydHNcbiAgICAgICAgdmFyIHJhdGlvID0gb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyBNYXRoLmFicyhwb3J0LnkpIC8gNTAgOiBNYXRoLmFicyhwb3J0LngpIC8gNTA7XG4gICAgICAgIC8vIE11bHRpcGx5IHRoZSBiYm94IHdpdGggdGhlIGNhbGN1bGF0ZWQgcmF0aW9cbiAgICAgICAgbm9kZU9iai5iYm94LncgPSBwYXJzZUZsb2F0KG5vZGVPYmouYmJveC53KSAqIHJhdGlvO1xuICAgICAgICBub2RlT2JqLmJib3guaCA9IHBhcnNlRmxvYXQobm9kZU9iai5iYm94LmgpICogcmF0aW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsZS5leHRlbnNpb24gJiYgZWxlLmV4dGVuc2lvbi5oYXMoJ2Fubm90YXRpb24nKSkgeyAvLyBhbm5vdGF0aW9uIGV4dGVuc2lvbiB3YXMgZm91bmRcbiAgICAgIHZhciByZGZFbGVtZW50ID0gZWxlLmV4dGVuc2lvbi5nZXQoJ2Fubm90YXRpb24nKS5yZGZFbGVtZW50O1xuICAgICAgbm9kZU9iaiA9IHNlbGYuaGFuZGxlQW5ub3RhdGlvbnMobm9kZU9iaiwgcmRmRWxlbWVudCk7XG4gICAgfVxuXG4gICAgdmFyIGN5dG9zY2FwZUpzTm9kZSA9IHtkYXRhOiBub2RlT2JqfTtcbiAgICBqc29uQXJyYXkucHVzaChjeXRvc2NhcGVKc05vZGUpO1xuICB9LFxuICAvKipcbiAgICogZ2l2ZW4gYSBmdXR1cmUgY3kgb2JqZWN0LCBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudCdzIGxpYnNiZ25qcycgZXh0ZW5zaW9uLCBwb3B1bGF0ZXMgdGhlIGFubm90YXRpb25zIGZpZWxkXG4gICAqL1xuICBoYW5kbGVBbm5vdGF0aW9uczogZnVuY3Rpb24oY3lPYmplY3QsIHJkZkVsZW1lbnQpIHtcbiAgICAvLyBsb2NhbCB1dGlsaXR5IGZ1bmN0aW9uXG4gICAgZnVuY3Rpb24gZGJGcm9tVXJsKHVybCkge1xuICAgICAgdmFyIHJlZ2V4cCA9IC9eaHR0cDpcXC9cXC9pZGVudGlmaWVycy5vcmdcXC8oLis/KVxcLy4rJC87XG4gICAgICByZXR1cm4gdXJsLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxsRWxlbWVudERhdGFBbm5vdGF0aW9uKGN5T2JqZWN0LCBhbm5vdGF0aW9uSW5kZXgsIHN0YXR1cywgc2VsZWN0ZWREQiwgc2VsZWN0ZWRSZWxhdGlvbiwgYW5ub3RhdGlvblZhbHVlKSB7XG4gICAgICBpZighY3lPYmplY3QuYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgY3lPYmplY3QuYW5ub3RhdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBhbm5vdElkID0gY3lPYmplY3QuaWQrXCItYW5ub3QtXCIrYW5ub3RhdGlvbkluZGV4O1xuXG4gICAgICBjeU9iamVjdC5hbm5vdGF0aW9uc1thbm5vdElkXSA9IHtcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBtYXkgYmUgaGF6YXJkb3VzLiBCdXQgc2V0dGluZyBpdCBhcyB1bmNoZWNrZWQgbGVhdmUgdGhlIGFubm90YXRpb24gb3V0IGlmIHRoZSBmaWxlIGlzIHNhdmVkLlxuICAgICAgICAvLyBUaGlzIHdvdWxkIGxlYWQgdG8gdGhlIHVzZXIgbG9zaW5nIGFubm90YXRpb25zIHdpdGhvdXQga25vd2luZyBpdC5cbiAgICAgICAgc3RhdHVzOiBzdGF0dXMsIC8vIDwtLSB3ZSB0cnVzdCB0aGF0IHdoYXQncyBiZWVuIGxvYWRlZCBpcyB2YWxpZC5cbiAgICAgICAgc2VsZWN0ZWREQjogc2VsZWN0ZWREQixcbiAgICAgICAgc2VsZWN0ZWRSZWxhdGlvbjogc2VsZWN0ZWRSZWxhdGlvbixcbiAgICAgICAgYW5ub3RhdGlvblZhbHVlOiBhbm5vdGF0aW9uVmFsdWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gY3lPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gd2UgYXNzdW1lIHRoYXQgdGhlIGlkIG9mIHRoZSByZGY6YWJvdXQgZmllbGQgaXMgdGhlIG9uZSBvZiB0aGUgY3VycmVudCBub2RlLCBhbmQgdGhhdCB0aGVyZSdzIG9ubHkgMSBkZXNjcmlwdGlvblxuICAgIHZhciBpZCA9IHJkZkVsZW1lbnQuZ2V0QWxsSWRzKClbMF07XG4gICAgdmFyIHJlc291cmNlcyA9IHJkZkVsZW1lbnQuZ2V0UmVzb3VyY2VzT2ZJZChpZCk7XG4gICAgdmFyIGN1c3RvbVByb3BlcnRpZXMgPSByZGZFbGVtZW50LmdldEN1c3RvbVByb3BlcnRpZXNPZklkKGlkKTtcblxuICAgIHZhciBnbG9iYWxBbm5vdEluZGV4ID0gMDtcbiAgICAvLyBoYW5kbGUgY29udHJvbGxlZCBwcm9wZXJ0aWVzXG4gICAgZm9yICh2YXIgZnVsbFF1YWxpZmllciBpbiByZXNvdXJjZXMpIHtcbiAgICAgIHZhciByZWxhdGlvbiA9IGxpYnNiZ25qcy5hbm5vdC5VdGlsLnJlZHVjZVByZWZpeChmdWxsUXVhbGlmaWVyKTtcbiAgICAgIGZvcih2YXIgaT0wOyBpPHJlc291cmNlc1tmdWxsUXVhbGlmaWVyXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSByZXNvdXJjZXNbZnVsbFF1YWxpZmllcl1baV07XG4gICAgICAgIHZhciBzZWxlY3RlZERCID0gZGJGcm9tVXJsKHZhbHVlKTtcbiAgICAgICAgY3lPYmplY3QgPSBmaWxsRWxlbWVudERhdGFBbm5vdGF0aW9uKGN5T2JqZWN0LCBnbG9iYWxBbm5vdEluZGV4LCBcInZhbGlkYXRlZFwiLCBzZWxlY3RlZERCLCByZWxhdGlvbiwgdmFsdWUpO1xuICAgICAgICBnbG9iYWxBbm5vdEluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGhhbmRsZSBjdXN0b20gcHJvcGVydGllc1xuICAgIGZvciAodmFyIGtleSBpbiBjdXN0b21Qcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgdmFsdWUgPSBjdXN0b21Qcm9wZXJ0aWVzW2tleV07XG4gICAgICBjeU9iamVjdCA9IGZpbGxFbGVtZW50RGF0YUFubm90YXRpb24oY3lPYmplY3QsIGdsb2JhbEFubm90SW5kZXgsIFwidmFsaWRhdGVkXCIsIGtleSwgXCJzaW86U0lPXzAwMDIyM1wiLCB2YWx1ZSk7XG4gICAgICBnbG9iYWxBbm5vdEluZGV4Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN5T2JqZWN0O1xuICB9LFxuICB0cmF2ZXJzZU5vZGVzOiBmdW5jdGlvbiAoZWxlLCBqc29uQXJyYXksIHBhcmVudCwgY29tcGFydG1lbnRzKSB7XG4gICAgdmFyIGVsSWQgPSBlbGUuaWQ7XG4gICAgaWYgKCFlbGVtZW50VXRpbGl0aWVzLmhhbmRsZWRFbGVtZW50c1tlbGUuY2xhc3NfXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmluc2VydGVkTm9kZXNbZWxJZF0gPSB0cnVlO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBhZGQgY29tcGxleCBub2RlcyBoZXJlXG5cbiAgICB2YXIgZWxlQ2xhc3MgPSBlbGUuY2xhc3NfO1xuXG4gICAgaWYgKGVsZUNsYXNzID09PSAnY29tcGxleCcgfHwgZWxlQ2xhc3MgPT09ICdjb21wbGV4IG11bHRpbWVyJyB8fCBlbGVDbGFzcyA9PT0gJ3N1Ym1hcCcpIHtcbiAgICAgIHNlbGYuYWRkQ3l0b3NjYXBlSnNOb2RlKGVsZSwganNvbkFycmF5LCBwYXJlbnQsIGNvbXBhcnRtZW50cyk7XG5cbiAgICAgIHZhciBjaGlsZEdseXBocyA9IGVsZS5nbHlwaE1lbWJlcnM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkR2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGNoaWxkR2x5cGhzW2ldO1xuICAgICAgICB2YXIgZ2x5cGhDbGFzcyA9IGdseXBoLmNsYXNzXztcbiAgICAgICAgaWYgKGdseXBoQ2xhc3MgIT09ICdzdGF0ZSB2YXJpYWJsZScgJiYgZ2x5cGhDbGFzcyAhPT0gJ3VuaXQgb2YgaW5mb3JtYXRpb24nKSB7XG4gICAgICAgICAgc2VsZi50cmF2ZXJzZU5vZGVzKGdseXBoLCBqc29uQXJyYXksIGVsSWQsIGNvbXBhcnRtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5hZGRDeXRvc2NhcGVKc05vZGUoZWxlLCBqc29uQXJyYXksIHBhcmVudCwgY29tcGFydG1lbnRzKTtcbiAgICB9XG4gIH0sXG4gIGdldFBvcnRzOiBmdW5jdGlvbiAoeG1sT2JqZWN0KSB7XG4gICAgcmV0dXJuICggeG1sT2JqZWN0Ll9jYWNoZWRQb3J0cyA9IHhtbE9iamVjdC5fY2FjaGVkUG9ydHMgfHwgeG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ3BvcnQnKSk7XG4gIH0sXG4gIGdldEdseXBoczogZnVuY3Rpb24gKHhtbE9iamVjdCkge1xuICAgIHZhciBnbHlwaHMgPSB4bWxPYmplY3QuX2NhY2hlZEdseXBocztcblxuICAgIGlmICghZ2x5cGhzKSB7XG4gICAgICBnbHlwaHMgPSB4bWxPYmplY3QuX2NhY2hlZEdseXBocyA9IHhtbE9iamVjdC5fY2FjaGVkR2x5cGhzIHx8IHhtbE9iamVjdC5xdWVyeVNlbGVjdG9yQWxsKCdnbHlwaCcpO1xuXG4gICAgICB2YXIgaWQyZ2x5cGggPSB4bWxPYmplY3QuX2lkMmdseXBoID0ge307XG5cbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdmFyIGcgPSBnbHlwaHNbaV07XG4gICAgICAgIHZhciBpZCA9IGcuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICAgIGlkMmdseXBoWyBpZCBdID0gZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGhzO1xuICB9LFxuICBnZXRHbHlwaEJ5SWQ6IGZ1bmN0aW9uICh4bWxPYmplY3QsIGlkKSB7XG4gICAgdGhpcy5nZXRHbHlwaHMoeG1sT2JqZWN0KTsgLy8gbWFrZSBzdXJlIGNhY2hlIGlzIGJ1aWx0XG5cbiAgICByZXR1cm4geG1sT2JqZWN0Ll9pZDJnbHlwaFtpZF07XG4gIH0sXG4gIGdldEFyY1NvdXJjZUFuZFRhcmdldDogZnVuY3Rpb24gKGFyYywgeG1sT2JqZWN0KSB7XG4gICAgLy8gc291cmNlIGFuZCB0YXJnZXQgY2FuIGJlIGluc2lkZSBvZiBhIHBvcnRcbiAgICB2YXIgc291cmNlID0gYXJjLnNvdXJjZTtcbiAgICB2YXIgdGFyZ2V0ID0gYXJjLnRhcmdldDtcbiAgICB2YXIgc291cmNlTm9kZUlkO1xuICAgIHZhciB0YXJnZXROb2RlSWQ7XG5cbiAgICB2YXIgc291cmNlRXhpc3RzID0gdGhpcy5nZXRHbHlwaEJ5SWQoeG1sT2JqZWN0LCBzb3VyY2UpO1xuICAgIHZhciB0YXJnZXRFeGlzdHMgPSB0aGlzLmdldEdseXBoQnlJZCh4bWxPYmplY3QsIHRhcmdldCk7XG5cbiAgICBpZiAoc291cmNlRXhpc3RzKSB7XG4gICAgICBzb3VyY2VOb2RlSWQgPSBzb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldEV4aXN0cykge1xuICAgICAgdGFyZ2V0Tm9kZUlkID0gdGFyZ2V0O1xuICAgIH1cblxuXG4gICAgdmFyIGk7XG4gICAgdmFyIHBvcnRFbHMgPSB0aGlzLmdldFBvcnRzKHhtbE9iamVjdCk7XG4gICAgdmFyIHBvcnQ7XG4gICAgaWYgKHNvdXJjZU5vZGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcG9ydEVscy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgcG9ydCA9IHBvcnRFbHNbaV07XG4gICAgICAgIGlmIChwb3J0LmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gc291cmNlKSB7XG4gICAgICAgICAgc291cmNlTm9kZUlkID0gcG9ydC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0YXJnZXROb2RlSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHBvcnRFbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcG9ydCA9IHBvcnRFbHNbaV07XG4gICAgICAgIGlmIChwb3J0LmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0Tm9kZUlkID0gcG9ydC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7J3NvdXJjZSc6IHNvdXJjZU5vZGVJZCwgJ3RhcmdldCc6IHRhcmdldE5vZGVJZH07XG4gIH0sXG5cbiAgZ2V0QXJjQmVuZFBvaW50UG9zaXRpb25zOiBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIGJlbmRQb2ludFBvc2l0aW9ucyA9IFtdO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gZWxlLm5leHRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBvc1ggPSBjaGlsZHJlbltpXS54O1xuICAgICAgdmFyIHBvc1kgPSBjaGlsZHJlbltpXS55O1xuXG4gICAgICBiZW5kUG9pbnRQb3NpdGlvbnMucHVzaCh7XG4gICAgICAgIHg6IHBvc1gsXG4gICAgICAgIHk6IHBvc1lcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBiZW5kUG9pbnRQb3NpdGlvbnM7XG4gIH0sXG4gIGFkZEN5dG9zY2FwZUpzRWRnZTogZnVuY3Rpb24gKGVsZSwganNvbkFycmF5LCB4bWxPYmplY3QpIHtcbiAgICBpZiAoIWVsZW1lbnRVdGlsaXRpZXMuaGFuZGxlZEVsZW1lbnRzW2VsZS5jbGFzc19dKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzb3VyY2VBbmRUYXJnZXQgPSBzZWxmLmdldEFyY1NvdXJjZUFuZFRhcmdldChlbGUsIHhtbE9iamVjdCk7XG5cbiAgICBpZiAoIXRoaXMuaW5zZXJ0ZWROb2Rlc1tzb3VyY2VBbmRUYXJnZXQuc291cmNlXSB8fCAhdGhpcy5pbnNlcnRlZE5vZGVzW3NvdXJjZUFuZFRhcmdldC50YXJnZXRdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVkZ2VPYmogPSB7fTtcbiAgICB2YXIgYmVuZFBvaW50UG9zaXRpb25zID0gc2VsZi5nZXRBcmNCZW5kUG9pbnRQb3NpdGlvbnMoZWxlKTtcblxuICAgIGVkZ2VPYmouaWQgPSBlbGUuaWQgfHwgdW5kZWZpbmVkO1xuICAgIGVkZ2VPYmouY2xhc3MgPSBlbGUuY2xhc3NfO1xuICAgIGVkZ2VPYmouYmVuZFBvaW50UG9zaXRpb25zID0gYmVuZFBvaW50UG9zaXRpb25zO1xuXG4gICAgZWRnZU9iai5jYXJkaW5hbGl0eSA9IDA7XG4gICAgaWYgKGVsZS5nbHlwaHMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGUuZ2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlbGUuZ2x5cGhzW2ldLmNsYXNzXyA9PT0gJ2NhcmRpbmFsaXR5Jykge1xuICAgICAgICAgIHZhciBsYWJlbCA9IGVsZS5nbHlwaHNbaV0ubGFiZWw7XG4gICAgICAgICAgZWRnZU9iai5jYXJkaW5hbGl0eSA9IGxhYmVsLnRleHQgfHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRnZU9iai5zb3VyY2UgPSBzb3VyY2VBbmRUYXJnZXQuc291cmNlO1xuICAgIGVkZ2VPYmoudGFyZ2V0ID0gc291cmNlQW5kVGFyZ2V0LnRhcmdldDtcblxuICAgIGVkZ2VPYmoucG9ydHNvdXJjZSA9IGVsZS5zb3VyY2U7XG4gICAgZWRnZU9iai5wb3J0dGFyZ2V0ID0gZWxlLnRhcmdldDtcblxuICAgIGlmIChlbGUuZXh0ZW5zaW9uICYmIGVsZS5leHRlbnNpb24uaGFzKCdhbm5vdGF0aW9uJykpIHsgLy8gYW5ub3RhdGlvbiBleHRlbnNpb24gd2FzIGZvdW5kXG4gICAgICB2YXIgcmRmRWxlbWVudCA9IGVsZS5leHRlbnNpb24uZ2V0KCdhbm5vdGF0aW9uJykucmRmRWxlbWVudDtcbiAgICAgIGVkZ2VPYmogPSBzZWxmLmhhbmRsZUFubm90YXRpb25zKGVkZ2VPYmosIHJkZkVsZW1lbnQpO1xuICAgIH1cblxuICAgIHZhciBjeXRvc2NhcGVKc0VkZ2UgPSB7ZGF0YTogZWRnZU9ian07XG4gICAganNvbkFycmF5LnB1c2goY3l0b3NjYXBlSnNFZGdlKTtcbiAgfSxcbiAgYXBwbHlTdHlsZTogZnVuY3Rpb24gKHJlbmRlckluZm9ybWF0aW9uLCBub2RlcywgZWRnZXMpIHtcbiAgICAvLyBnZXQgYWxsIGNvbG9yIGlkIHJlZmVyZW5jZXMgdG8gdGhlaXIgdmFsdWVcbiAgICB2YXIgY29sb3JMaXN0ID0gcmVuZGVySW5mb3JtYXRpb24ubGlzdE9mQ29sb3JEZWZpbml0aW9ucy5jb2xvckRlZmluaXRpb25zO1xuICAgIHZhciBjb2xvcklEVG9WYWx1ZSA9IHt9O1xuICAgIGZvciAodmFyIGk9MDsgaSA8IGNvbG9yTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29sb3JJRFRvVmFsdWVbY29sb3JMaXN0W2ldLmlkXSA9IGNvbG9yTGlzdFtpXS52YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IHN0eWxlIGxpc3QgdG8gZWxlbWVudElkLWluZGV4ZWQgb2JqZWN0IHBvaW50aW5nIHRvIHN0eWxlXG4gICAgLy8gYWxzbyBjb252ZXJ0IGNvbG9yIHJlZmVyZW5jZXMgdG8gY29sb3IgdmFsdWVzXG4gICAgdmFyIHN0eWxlTGlzdCA9IHJlbmRlckluZm9ybWF0aW9uLmxpc3RPZlN0eWxlcy5zdHlsZXM7XG4gICAgdmFyIGVsZW1lbnRJRFRvU3R5bGUgPSB7fTtcbiAgICBmb3IgKHZhciBpPTA7IGkgPCBzdHlsZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlTGlzdFtpXTtcbiAgICAgIHZhciByZW5kZXJHcm91cCA9IHN0eWxlLnJlbmRlckdyb3VwO1xuXG4gICAgICAvLyBjb252ZXJ0IGNvbG9yIHJlZmVyZW5jZXNcbiAgICAgIGlmIChyZW5kZXJHcm91cC5zdHJva2UgIT0gbnVsbCkge1xuICAgICAgICByZW5kZXJHcm91cC5zdHJva2UgPSBjb2xvcklEVG9WYWx1ZVtyZW5kZXJHcm91cC5zdHJva2VdO1xuICAgICAgfVxuICAgICAgaWYgKHJlbmRlckdyb3VwLmZpbGwgIT0gbnVsbCkge1xuICAgICAgICByZW5kZXJHcm91cC5maWxsID0gY29sb3JJRFRvVmFsdWVbcmVuZGVyR3JvdXAuZmlsbF07XG4gICAgICB9XG5cbiAgICAgIHZhciBpZExpc3QgPSBzdHlsZS5pZExpc3Quc3BsaXQoJyAnKTtcbiAgICAgIGZvciAodmFyIGo9MDsgaiA8IGlkTGlzdC5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgaWQgPSBpZExpc3Rbal07XG4gICAgICAgIGVsZW1lbnRJRFRvU3R5bGVbaWRdID0gcmVuZGVyR3JvdXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGV4VG9EZWNpbWFsIChoZXgpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlSW50KCcweCcraGV4KSAvIDI1NSAqIDEwMCkgLyAxMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udmVydEhleENvbG9yIChoZXgpIHtcbiAgICAgIGlmIChoZXgubGVuZ3RoID09IDcpIHsgLy8gbm8gb3BhY2l0eSBwcm92aWRlZFxuICAgICAgICByZXR1cm4ge29wYWNpdHk6IG51bGwsIGNvbG9yOiBoZXh9O1xuICAgICAgfVxuICAgICAgZWxzZSB7IC8vIGxlbmd0aCBvZiA5XG4gICAgICAgIHZhciBjb2xvciA9IGhleC5zbGljZSgwLDcpO1xuICAgICAgICB2YXIgb3BhY2l0eSA9IGhleFRvRGVjaW1hbChoZXguc2xpY2UoLTIpKTtcbiAgICAgICAgcmV0dXJuIHtvcGFjaXR5OiBvcGFjaXR5LCBjb2xvcjogY29sb3J9O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRoZSBzdHlsZSB0byBub2RlcyBhbmQgb3ZlcndyaXRlIHRoZSBkZWZhdWx0IHN0eWxlXG4gICAgZm9yICh2YXIgaT0wOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGNvbG9yIHByb3BlcnRpZXMsIHdlIG5lZWQgdG8gY2hlY2sgb3BhY2l0eVxuICAgICAgdmFyIGJnQ29sb3IgPSBlbGVtZW50SURUb1N0eWxlW25vZGUuZGF0YVsnaWQnXV0uZmlsbDtcbiAgICAgIGlmIChiZ0NvbG9yKSB7XG4gICAgICAgIHZhciByZXMgPSBjb252ZXJ0SGV4Q29sb3IoYmdDb2xvcik7XG4gICAgICAgIG5vZGUuZGF0YVsnYmFja2dyb3VuZC1jb2xvciddID0gcmVzLmNvbG9yO1xuICAgICAgICBub2RlLmRhdGFbJ2JhY2tncm91bmQtb3BhY2l0eSddID0gcmVzLm9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIHZhciBib3JkZXJDb2xvciA9IGVsZW1lbnRJRFRvU3R5bGVbbm9kZS5kYXRhWydpZCddXS5zdHJva2U7XG4gICAgICBpZiAoYm9yZGVyQ29sb3IpIHtcbiAgICAgICAgdmFyIHJlcyA9IGNvbnZlcnRIZXhDb2xvcihib3JkZXJDb2xvcik7XG4gICAgICAgIG5vZGUuZGF0YVsnYm9yZGVyLWNvbG9yJ10gPSByZXMuY29sb3I7XG4gICAgICB9XG5cbiAgICAgIHZhciBib3JkZXJXaWR0aCA9IGVsZW1lbnRJRFRvU3R5bGVbbm9kZS5kYXRhWydpZCddXS5zdHJva2VXaWR0aDtcbiAgICAgIGlmIChib3JkZXJXaWR0aCkge1xuICAgICAgICBub2RlLmRhdGFbJ2JvcmRlci13aWR0aCddID0gYm9yZGVyV2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBmb250U2l6ZSA9IGVsZW1lbnRJRFRvU3R5bGVbbm9kZS5kYXRhWydpZCddXS5mb250U2l6ZTtcbiAgICAgIGlmIChmb250U2l6ZSkge1xuICAgICAgICBub2RlLmRhdGFbJ2ZvbnQtc2l6ZSddID0gZm9udFNpemU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmb250RmFtaWx5ID0gZWxlbWVudElEVG9TdHlsZVtub2RlLmRhdGFbJ2lkJ11dLmZvbnRGYW1pbHk7XG4gICAgICBpZiAoZm9udEZhbWlseSkge1xuICAgICAgICBub2RlLmRhdGFbJ2ZvbnQtZmFtaWx5J10gPSBmb250RmFtaWx5O1xuICAgICAgfVxuXG4gICAgICB2YXIgZm9udFN0eWxlID0gZWxlbWVudElEVG9TdHlsZVtub2RlLmRhdGFbJ2lkJ11dLmZvbnRTdHlsZTtcbiAgICAgIGlmIChmb250U3R5bGUpIHtcbiAgICAgICAgbm9kZS5kYXRhWydmb250LXN0eWxlJ10gPSBmb250U3R5bGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmb250V2VpZ2h0ID0gZWxlbWVudElEVG9TdHlsZVtub2RlLmRhdGFbJ2lkJ11dLmZvbnRXZWlnaHQ7XG4gICAgICBpZiAoZm9udFdlaWdodCkge1xuICAgICAgICBub2RlLmRhdGFbJ2ZvbnQtd2VpZ2h0J10gPSBmb250V2VpZ2h0O1xuICAgICAgfVxuXG4gICAgICB2YXIgdGV4dEFuY2hvciA9IGVsZW1lbnRJRFRvU3R5bGVbbm9kZS5kYXRhWydpZCddXS50ZXh0QW5jaG9yO1xuICAgICAgaWYgKHRleHRBbmNob3IpIHtcbiAgICAgICAgbm9kZS5kYXRhWyd0ZXh0LWhhbGlnbiddID0gdGV4dEFuY2hvcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHZ0ZXh0QW5jaG9yID0gZWxlbWVudElEVG9TdHlsZVtub2RlLmRhdGFbJ2lkJ11dLnZ0ZXh0QW5jaG9yO1xuICAgICAgaWYgKHZ0ZXh0QW5jaG9yKSB7XG4gICAgICAgIG5vZGUuZGF0YVsndGV4dC12YWxpZ24nXSA9IHZ0ZXh0QW5jaG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRvIHRoZSBzYW1lIGZvciBlZGdlc1xuICAgIGZvciAodmFyIGk9MDsgaSA8IGVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZWRnZSA9IGVkZ2VzW2ldO1xuXG4gICAgICB2YXIgbGluZUNvbG9yID0gZWxlbWVudElEVG9TdHlsZVtlZGdlLmRhdGFbJ2lkJ11dLnN0cm9rZTtcbiAgICAgIGlmIChsaW5lQ29sb3IpIHtcbiAgICAgICAgdmFyIHJlcyA9IGNvbnZlcnRIZXhDb2xvcihsaW5lQ29sb3IpO1xuICAgICAgICBlZGdlLmRhdGFbJ2xpbmUtY29sb3InXSA9IHJlcy5jb2xvcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpZHRoID0gZWxlbWVudElEVG9TdHlsZVtlZGdlLmRhdGFbJ2lkJ11dLnN0cm9rZVdpZHRoO1xuICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgIGVkZ2UuZGF0YVsnd2lkdGgnXSA9IHdpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29udmVydDogZnVuY3Rpb24gKHhtbE9iamVjdCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3l0b3NjYXBlSnNOb2RlcyA9IFtdO1xuICAgIHZhciBjeXRvc2NhcGVKc0VkZ2VzID0gW107XG5cbiAgICB2YXIgc2JnbiA9IGxpYnNiZ25qcy5TYmduLmZyb21YTUwoeG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3IoJ3NiZ24nKSk7XG4gICAgdmFyIGNvbXBhcnRtZW50cyA9IHNlbGYuZ2V0QWxsQ29tcGFydG1lbnRzKHNiZ24ubWFwLmdseXBocyk7XG5cbiAgICB2YXIgZ2x5cGhzID0gc2Jnbi5tYXAuZ2x5cGhzO1xuICAgIHZhciBhcmNzID0gc2Jnbi5tYXAuYXJjcztcblxuICAgIHZhciBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgIHNlbGYudHJhdmVyc2VOb2RlcyhnbHlwaCwgY3l0b3NjYXBlSnNOb2RlcywgJycsIGNvbXBhcnRtZW50cyk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBhcmMgPSBhcmNzW2ldO1xuICAgICAgc2VsZi5hZGRDeXRvc2NhcGVKc0VkZ2UoYXJjLCBjeXRvc2NhcGVKc0VkZ2VzLCB4bWxPYmplY3QpO1xuICAgIH1cblxuICAgIGlmIChzYmduLm1hcC5leHRlbnNpb24gJiYgc2Jnbi5tYXAuZXh0ZW5zaW9uLmhhcygncmVuZGVySW5mb3JtYXRpb24nKSkgeyAvLyByZW5kZXIgZXh0ZW5zaW9uIHdhcyBmb3VuZFxuICAgICAgc2VsZi5hcHBseVN0eWxlKHNiZ24ubWFwLmV4dGVuc2lvbi5nZXQoJ3JlbmRlckluZm9ybWF0aW9uJyksIGN5dG9zY2FwZUpzTm9kZXMsIGN5dG9zY2FwZUpzRWRnZXMpO1xuICAgIH1cblxuICAgIHZhciBjeXRvc2NhcGVKc0dyYXBoID0ge307XG4gICAgY3l0b3NjYXBlSnNHcmFwaC5ub2RlcyA9IGN5dG9zY2FwZUpzTm9kZXM7XG4gICAgY3l0b3NjYXBlSnNHcmFwaC5lZGdlcyA9IGN5dG9zY2FwZUpzRWRnZXM7XG5cbiAgICB0aGlzLmluc2VydGVkTm9kZXMgPSB7fTtcblxuICAgIHJldHVybiBjeXRvc2NhcGVKc0dyYXBoO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNiZ25tbFRvSnNvbjtcbiIsIi8qXG4gKiBUZXh0IHV0aWxpdGllcyBmb3IgY29tbW9uIHVzYWdlXG4gKi9cblxudmFyIG9wdGlvblV0aWxpdGllcyA9IHJlcXVpcmUoJy4vb3B0aW9uLXV0aWxpdGllcycpO1xudmFyIG9wdGlvbnMgPSBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucygpO1xuXG52YXIgdGV4dFV0aWxpdGllcyA9IHtcbiAgLy9UT0RPOiB1c2UgQ1NTJ3MgXCJ0ZXh0LW92ZXJmbG93OmVsbGlwc2lzXCIgc3R5bGUgaW5zdGVhZCBvZiBmdW5jdGlvbiBiZWxvdz9cbiAgdHJ1bmNhdGVUZXh0OiBmdW5jdGlvbiAodGV4dFByb3AsIGZvbnQpIHtcbiAgICB2YXIgY29udGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb250ZXh0LmZvbnQgPSBmb250O1xuICAgIFxuICAgIHZhciBmaXRMYWJlbHNUb05vZGVzID0gb3B0aW9ucy5maXRMYWJlbHNUb05vZGVzO1xuICAgIGZpdExhYmVsc1RvTm9kZXMgPSB0eXBlb2YgZml0TGFiZWxzVG9Ob2RlcyA9PT0gJ2Z1bmN0aW9uJyA/IGZpdExhYmVsc1RvTm9kZXMuY2FsbCgpIDogZml0TGFiZWxzVG9Ob2RlcztcbiAgICBcbiAgICB2YXIgdGV4dCA9IHRleHRQcm9wLmxhYmVsIHx8IFwiXCI7XG4gICAgLy9JZiBmaXQgbGFiZWxzIHRvIG5vZGVzIGlzIGZhbHNlIGRvIG5vdCB0cnVuY2F0ZVxuICAgIGlmIChmaXRMYWJlbHNUb05vZGVzID09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgdmFyIHdpZHRoO1xuICAgIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgICB2YXIgZWxsaXBzaXMgPSBcIi4uXCI7XG4gICAgdmFyIHRleHRXaWR0aCA9ICh0ZXh0UHJvcC53aWR0aCA+IDMwKSA/IHRleHRQcm9wLndpZHRoIC0gMTAgOiB0ZXh0UHJvcC53aWR0aDtcbiAgICB3aGlsZSAoKHdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aCkgPiB0ZXh0V2lkdGgpIHtcbiAgICAgIC0tbGVuO1xuICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIGxlbikgKyBlbGxpcHNpcztcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0sXG5cbiAgLy8gZW5zdXJlIHRoYXQgcmV0dXJuZWQgc3RyaW5nIGZvbGxvd3MgeHNkOklEIHN0YW5kYXJkXG4gIC8vIHNob3VsZCBmb2xsb3cgcideW2EtekEtWl9dW1xcdy4tXSokJ1xuICBnZXRYTUxWYWxpZElkOiBmdW5jdGlvbihvcmlnaW5hbElkKSB7XG4gICAgdmFyIG5ld0lkID0gXCJcIjtcbiAgICB2YXIgeG1sVmFsaWRSZWdleCA9IC9eW2EtekEtWl9dW1xcdy4tXSokLztcbiAgICBpZiAoISB4bWxWYWxpZFJlZ2V4LnRlc3Qob3JpZ2luYWxJZCkpIHsgLy8gZG9lc24ndCBjb21wbHlcbiAgICAgIG5ld0lkID0gb3JpZ2luYWxJZDtcbiAgICAgIG5ld0lkID0gbmV3SWQucmVwbGFjZSgvW15cXHcuLV0vZywgXCJcIik7XG4gICAgICBpZiAoISB4bWxWYWxpZFJlZ2V4LnRlc3QobmV3SWQpKSB7IC8vIHN0aWxsIGRvZXNuJ3QgY29tcGx5XG4gICAgICAgIG5ld0lkID0gXCJfXCIgKyBuZXdJZDtcbiAgICAgICAgaWYgKCEgeG1sVmFsaWRSZWdleC50ZXN0KG5ld0lkKSkgeyAvLyBub3JtYWxseSB3ZSBzaG91bGQgbmV2ZXIgZW50ZXIgdGhpc1xuICAgICAgICAgIC8vIGlmIGZvciBzb21lIG9ic2N1cmUgcmVhc29uIHdlIHN0aWxsIGRvbid0IGNvbXBseSwgdGhyb3cgZXJyb3IuXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgbWFrZSBpZGVudGlmZXIgY29tcGx5IHRvIHhzZDpJRCByZXF1aXJlbWVudHM6IFwiK25ld0lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0lkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbElkO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHRVdGlsaXRpZXM7IiwiLypcbiAqIENvbW1vbmx5IG5lZWRlZCBVSSBVdGlsaXRpZXNcbiAqL1xuXG52YXIgb3B0aW9uVXRpbGl0aWVzID0gcmVxdWlyZSgnLi9vcHRpb24tdXRpbGl0aWVzJyk7XG52YXIgb3B0aW9ucyA9IG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zKCk7XG52YXIgbGlicyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpLmdldExpYnMoKTtcbnZhciBqUXVlcnkgPSAkID0gbGlicy5qUXVlcnk7XG5cbnZhciB1aVV0aWxpdGllcyA9IHtcbiAgc3RhcnRTcGlubmVyOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICAgIGNsYXNzTmFtZSA9ICdkZWZhdWx0LWNsYXNzJztcbiAgICB9XG4gICAgXG4gICAgaWYgKCQoJy4nICsgY2xhc3NOYW1lKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBjb250YWluZXJXaWR0aCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLndpZHRoKCk7XG4gICAgICB2YXIgY29udGFpbmVySGVpZ2h0ID0gJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3RvcikuaGVpZ2h0KCk7XG4gICAgICAkKG9wdGlvbnMubmV0d29ya0NvbnRhaW5lclNlbGVjdG9yICsgJzpwYXJlbnQnKS5wcmVwZW5kKCc8aSBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogOTk5OTk5OTsgbGVmdDogJyArIGNvbnRhaW5lcldpZHRoIC8gMiArICdweDsgdG9wOiAnICsgY29udGFpbmVySGVpZ2h0IC8gMiArICdweDtcIiBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtc3BpbiBmYS0zeCBmYS1mdyAnICsgY2xhc3NOYW1lICsgJ1wiPjwvaT4nKTtcbiAgICB9XG4gIH0sXG4gIGVuZFNwaW5uZXI6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lID0gJ2RlZmF1bHQtY2xhc3MnO1xuICAgIH1cbiAgICBcbiAgICBpZiAoJCgnLicgKyBjbGFzc05hbWUpLmxlbmd0aCA+IDApIHtcbiAgICAgICQoJy4nICsgY2xhc3NOYW1lKS5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdWlVdGlsaXRpZXM7XG5cblxuIiwiLypcbiAqIFRoaXMgZmlsZSBleHBvcnRzIHRoZSBmdW5jdGlvbnMgdG8gYmUgdXRpbGl6ZWQgaW4gdW5kb3JlZG8gZXh0ZW5zaW9uIGFjdGlvbnMgXG4gKi9cbnZhciBlbGVtZW50VXRpbGl0aWVzID0gcmVxdWlyZSgnLi9lbGVtZW50LXV0aWxpdGllcycpO1xuXG52YXIgdW5kb1JlZG9BY3Rpb25GdW5jdGlvbnMgPSB7XG4gIC8vIFNlY3Rpb24gU3RhcnRcbiAgLy8gQWRkL3JlbW92ZSBhY3Rpb24gZnVuY3Rpb25zXG4gIGRlbGV0ZUVsZXNTaW1wbGU6IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmRlbGV0ZUVsZXNTaW1wbGUocGFyYW0uZWxlcyk7XG4gIH0sXG4gIHJlc3RvcmVFbGVzOiBmdW5jdGlvbiAoZWxlcykge1xuICAgIHZhciBwYXJhbSA9IHt9O1xuICAgIHBhcmFtLmVsZXMgPSBlbGVtZW50VXRpbGl0aWVzLnJlc3RvcmVFbGVzKGVsZXMpO1xuICAgIHJldHVybiBwYXJhbTtcbiAgfSxcbiAgZGVsZXRlTm9kZXNTbWFydDogZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgaWYgKHBhcmFtLmZpcnN0VGltZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlTm9kZXNTbWFydChwYXJhbS5lbGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuZGVsZXRlRWxlc1NpbXBsZShwYXJhbS5lbGVzKTtcbiAgfSxcbiAgLy8gU2VjdGlvbiBFbmRcbiAgLy8gQWRkL3JlbW92ZSBhY3Rpb24gZnVuY3Rpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuZG9SZWRvQWN0aW9uRnVuY3Rpb25zOyIsInZhciBwa2cgPSByZXF1aXJlKCcuL3NyYy9saWJzYmduJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGtnO1xuIiwiLyohXG4gKiBhc3luY1xuICogaHR0cHM6Ly9naXRodWIuY29tL2Nhb2xhbi9hc3luY1xuICpcbiAqIENvcHlyaWdodCAyMDEwLTIwMTQgQ2FvbGFuIE1jTWFob25cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG4vKmpzaGludCBvbmV2YXI6IGZhbHNlLCBpbmRlbnQ6NCAqL1xuLypnbG9iYWwgc2V0SW1tZWRpYXRlOiBmYWxzZSwgc2V0VGltZW91dDogZmFsc2UsIGNvbnNvbGU6IGZhbHNlICovXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGFzeW5jID0ge307XG5cbiAgICAvLyBnbG9iYWwgb24gdGhlIHNlcnZlciwgd2luZG93IGluIHRoZSBicm93c2VyXG4gICAgdmFyIHJvb3QsIHByZXZpb3VzX2FzeW5jO1xuXG4gICAgcm9vdCA9IHRoaXM7XG4gICAgaWYgKHJvb3QgIT0gbnVsbCkge1xuICAgICAgcHJldmlvdXNfYXN5bmMgPSByb290LmFzeW5jO1xuICAgIH1cblxuICAgIGFzeW5jLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJvb3QuYXN5bmMgPSBwcmV2aW91c19hc3luYztcbiAgICAgICAgcmV0dXJuIGFzeW5jO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvbmx5X29uY2UoZm4pIHtcbiAgICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoXCJDYWxsYmFjayB3YXMgYWxyZWFkeSBjYWxsZWQuXCIpO1xuICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGZuLmFwcGx5KHJvb3QsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLy8vIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJsaXR5IGZ1bmN0aW9ucyAvLy8vXG5cbiAgICB2YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIHZhciBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuXG4gICAgdmFyIF9lYWNoID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKGFycltpXSwgaSwgYXJyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX21hcCA9IGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yKSB7XG4gICAgICAgIGlmIChhcnIubWFwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyLm1hcChpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgX2VhY2goYXJyLCBmdW5jdGlvbiAoeCwgaSwgYSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yKHgsIGksIGEpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICB2YXIgX3JlZHVjZSA9IGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yLCBtZW1vKSB7XG4gICAgICAgIGlmIChhcnIucmVkdWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyLnJlZHVjZShpdGVyYXRvciwgbWVtbyk7XG4gICAgICAgIH1cbiAgICAgICAgX2VhY2goYXJyLCBmdW5jdGlvbiAoeCwgaSwgYSkge1xuICAgICAgICAgICAgbWVtbyA9IGl0ZXJhdG9yKG1lbW8sIHgsIGksIGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcblxuICAgIHZhciBfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9O1xuXG4gICAgLy8vLyBleHBvcnRlZCBhc3luYyBtb2R1bGUgZnVuY3Rpb25zIC8vLy9cblxuICAgIC8vLy8gbmV4dFRpY2sgaW1wbGVtZW50YXRpb24gd2l0aCBicm93c2VyLWNvbXBhdGlibGUgZmFsbGJhY2sgLy8vL1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIShwcm9jZXNzLm5leHRUaWNrKSkge1xuICAgICAgICBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXN5bmMubmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICAvLyBub3QgYSBkaXJlY3QgYWxpYXMgZm9yIElFMTAgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlID0gYXN5bmMubmV4dFRpY2s7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhc3luYy5uZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZSA9IGFzeW5jLm5leHRUaWNrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3luYy5uZXh0VGljayA9IHByb2Nlc3MubmV4dFRpY2s7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgIC8vIG5vdCBhIGRpcmVjdCBhbGlhcyBmb3IgSUUxMCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlID0gYXN5bmMubmV4dFRpY2s7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYy5lYWNoID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmICghYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7XG4gICAgICAgIF9lYWNoKGFyciwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHgsIG9ubHlfb25jZShkb25lKSApO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gZG9uZShlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBhc3luYy5mb3JFYWNoID0gYXN5bmMuZWFjaDtcblxuICAgIGFzeW5jLmVhY2hTZXJpZXMgPSBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICAgICAgdmFyIGl0ZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvcihhcnJbY29tcGxldGVkXSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkID49IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaXRlcmF0ZSgpO1xuICAgIH07XG4gICAgYXN5bmMuZm9yRWFjaFNlcmllcyA9IGFzeW5jLmVhY2hTZXJpZXM7XG5cbiAgICBhc3luYy5lYWNoTGltaXQgPSBmdW5jdGlvbiAoYXJyLCBsaW1pdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmbiA9IF9lYWNoTGltaXQobGltaXQpO1xuICAgICAgICBmbi5hcHBseShudWxsLCBbYXJyLCBpdGVyYXRvciwgY2FsbGJhY2tdKTtcbiAgICB9O1xuICAgIGFzeW5jLmZvckVhY2hMaW1pdCA9IGFzeW5jLmVhY2hMaW1pdDtcblxuICAgIHZhciBfZWFjaExpbWl0ID0gZnVuY3Rpb24gKGxpbWl0KSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgIGlmICghYXJyLmxlbmd0aCB8fCBsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gMDtcbiAgICAgICAgICAgIHZhciBydW5uaW5nID0gMDtcblxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlcGxlbmlzaCAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlIChydW5uaW5nIDwgbGltaXQgJiYgc3RhcnRlZCA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycltzdGFydGVkIC0gMV0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsZW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH07XG4gICAgfTtcblxuXG4gICAgdmFyIGRvUGFyYWxsZWwgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbYXN5bmMuZWFjaF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBkb1BhcmFsbGVsTGltaXQgPSBmdW5jdGlvbihsaW1pdCwgZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbX2VhY2hMaW1pdChsaW1pdCldLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgZG9TZXJpZXMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbYXN5bmMuZWFjaFNlcmllc10uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG5cbiAgICB2YXIgX2FzeW5jTWFwID0gZnVuY3Rpb24gKGVhY2hmbiwgYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgYXJyID0gX21hcChhcnIsIGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4ge2luZGV4OiBpLCB2YWx1ZTogeH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcih4LnZhbHVlLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcih4LnZhbHVlLCBmdW5jdGlvbiAoZXJyLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbeC5pbmRleF0gPSB2O1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgYXN5bmMubWFwID0gZG9QYXJhbGxlbChfYXN5bmNNYXApO1xuICAgIGFzeW5jLm1hcFNlcmllcyA9IGRvU2VyaWVzKF9hc3luY01hcCk7XG4gICAgYXN5bmMubWFwTGltaXQgPSBmdW5jdGlvbiAoYXJyLCBsaW1pdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBfbWFwTGltaXQobGltaXQpKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgdmFyIF9tYXBMaW1pdCA9IGZ1bmN0aW9uKGxpbWl0KSB7XG4gICAgICAgIHJldHVybiBkb1BhcmFsbGVsTGltaXQobGltaXQsIF9hc3luY01hcCk7XG4gICAgfTtcblxuICAgIC8vIHJlZHVjZSBvbmx5IGhhcyBhIHNlcmllcyB2ZXJzaW9uLCBhcyBkb2luZyByZWR1Y2UgaW4gcGFyYWxsZWwgd29uJ3RcbiAgICAvLyB3b3JrIGluIG1hbnkgc2l0dWF0aW9ucy5cbiAgICBhc3luYy5yZWR1Y2UgPSBmdW5jdGlvbiAoYXJyLCBtZW1vLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IobWVtbywgeCwgZnVuY3Rpb24gKGVyciwgdikge1xuICAgICAgICAgICAgICAgIG1lbW8gPSB2O1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBtZW1vKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBpbmplY3QgYWxpYXNcbiAgICBhc3luYy5pbmplY3QgPSBhc3luYy5yZWR1Y2U7XG4gICAgLy8gZm9sZGwgYWxpYXNcbiAgICBhc3luYy5mb2xkbCA9IGFzeW5jLnJlZHVjZTtcblxuICAgIGFzeW5jLnJlZHVjZVJpZ2h0ID0gZnVuY3Rpb24gKGFyciwgbWVtbywgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXZlcnNlZCA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pLnJldmVyc2UoKTtcbiAgICAgICAgYXN5bmMucmVkdWNlKHJldmVyc2VkLCBtZW1vLCBpdGVyYXRvciwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLy8gZm9sZHIgYWxpYXNcbiAgICBhc3luYy5mb2xkciA9IGFzeW5jLnJlZHVjZVJpZ2h0O1xuXG4gICAgdmFyIF9maWx0ZXIgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICBhcnIgPSBfbWFwKGFyciwgZnVuY3Rpb24gKHgsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiB7aW5kZXg6IGksIHZhbHVlOiB4fTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeC52YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soX21hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgICAgICB9KSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC52YWx1ZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBhc3luYy5maWx0ZXIgPSBkb1BhcmFsbGVsKF9maWx0ZXIpO1xuICAgIGFzeW5jLmZpbHRlclNlcmllcyA9IGRvU2VyaWVzKF9maWx0ZXIpO1xuICAgIC8vIHNlbGVjdCBhbGlhc1xuICAgIGFzeW5jLnNlbGVjdCA9IGFzeW5jLmZpbHRlcjtcbiAgICBhc3luYy5zZWxlY3RTZXJpZXMgPSBhc3luYy5maWx0ZXJTZXJpZXM7XG5cbiAgICB2YXIgX3JlamVjdCA9IGZ1bmN0aW9uIChlYWNoZm4sIGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIGFyciA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHtpbmRleDogaSwgdmFsdWU6IHh9O1xuICAgICAgICB9KTtcbiAgICAgICAgZWFjaGZuKGFyciwgZnVuY3Rpb24gKHgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpdGVyYXRvcih4LnZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIGlmICghdikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soX21hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgICAgICB9KSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC52YWx1ZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBhc3luYy5yZWplY3QgPSBkb1BhcmFsbGVsKF9yZWplY3QpO1xuICAgIGFzeW5jLnJlamVjdFNlcmllcyA9IGRvU2VyaWVzKF9yZWplY3QpO1xuXG4gICAgdmFyIF9kZXRlY3QgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBtYWluX2NhbGxiYWNrKSB7XG4gICAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayh4KTtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgbWFpbl9jYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGFzeW5jLmRldGVjdCA9IGRvUGFyYWxsZWwoX2RldGVjdCk7XG4gICAgYXN5bmMuZGV0ZWN0U2VyaWVzID0gZG9TZXJpZXMoX2RldGVjdCk7XG5cbiAgICBhc3luYy5zb21lID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1haW5fY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICBtYWluX2NhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBtYWluX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgbWFpbl9jYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gYW55IGFsaWFzXG4gICAgYXN5bmMuYW55ID0gYXN5bmMuc29tZTtcblxuICAgIGFzeW5jLmV2ZXJ5ID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1haW5fY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG1haW5fY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBtYWluX2NhbGxiYWNrKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIGFsbCBhbGlhc1xuICAgIGFzeW5jLmFsbCA9IGFzeW5jLmV2ZXJ5O1xuXG4gICAgYXN5bmMuc29ydEJ5ID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGFzeW5jLm1hcChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKGVyciwgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7dmFsdWU6IHgsIGNyaXRlcmlhOiBjcml0ZXJpYX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhLCBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIF9tYXAocmVzdWx0cy5zb3J0KGZuKSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudmFsdWU7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYXN5bmMuYXV0byA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgdmFyIGtleXMgPSBfa2V5cyh0YXNrcyk7XG4gICAgICAgIHZhciByZW1haW5pbmdUYXNrcyA9IGtleXMubGVuZ3RoXG4gICAgICAgIGlmICghcmVtYWluaW5nVGFza3MpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTtcblxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICAgIHZhciBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoZm4pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRhc2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlbWFpbmluZ1Rhc2tzLS1cbiAgICAgICAgICAgIF9lYWNoKGxpc3RlbmVycy5zbGljZSgwKSwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZExpc3RlbmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghcmVtYWluaW5nVGFza3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhlQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IGZpbmFsIGNhbGxiYWNrIGZyb20gY2FsbGluZyBpdHNlbGYgaWYgaXQgZXJyb3JzXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICAgICAgICAgIHRoZUNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfZWFjaChrZXlzLCBmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSBfaXNBcnJheSh0YXNrc1trXSkgPyB0YXNrc1trXTogW3Rhc2tzW2tdXTtcbiAgICAgICAgICAgIHZhciB0YXNrQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYWZlUmVzdWx0cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfZWFjaChfa2V5cyhyZXN1bHRzKSwgZnVuY3Rpb24ocmtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZVJlc3VsdHNbcmtleV0gPSByZXN1bHRzW3JrZXldO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2FmZVJlc3VsdHNba10gPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHNhZmVSZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcCBzdWJzZXF1ZW50IGVycm9ycyBoaXR0aW5nIGNhbGxiYWNrIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzW2tdID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlKHRhc2tDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciByZXF1aXJlcyA9IHRhc2suc2xpY2UoMCwgTWF0aC5hYnModGFzay5sZW5ndGggLSAxKSkgfHwgW107XG4gICAgICAgICAgICB2YXIgcmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2UocmVxdWlyZXMsIGZ1bmN0aW9uIChhLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYSAmJiByZXN1bHRzLmhhc093blByb3BlcnR5KHgpKTtcbiAgICAgICAgICAgICAgICB9LCB0cnVlKSAmJiAhcmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocmVhZHkoKSkge1xuICAgICAgICAgICAgICAgIHRhc2tbdGFzay5sZW5ndGggLSAxXSh0YXNrQ2FsbGJhY2ssIHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVhZHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1t0YXNrLmxlbmd0aCAtIDFdKHRhc2tDYWxsYmFjaywgcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGFzeW5jLnJldHJ5ID0gZnVuY3Rpb24odGltZXMsIHRhc2ssIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBERUZBVUxUX1RJTUVTID0gNTtcbiAgICAgICAgdmFyIGF0dGVtcHRzID0gW107XG4gICAgICAgIC8vIFVzZSBkZWZhdWx0cyBpZiB0aW1lcyBub3QgcGFzc2VkXG4gICAgICAgIGlmICh0eXBlb2YgdGltZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdGFzaztcbiAgICAgICAgICAgIHRhc2sgPSB0aW1lcztcbiAgICAgICAgICAgIHRpbWVzID0gREVGQVVMVF9USU1FUztcbiAgICAgICAgfVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGltZXMgaXMgYSBudW1iZXJcbiAgICAgICAgdGltZXMgPSBwYXJzZUludCh0aW1lcywgMTApIHx8IERFRkFVTFRfVElNRVM7XG4gICAgICAgIHZhciB3cmFwcGVkVGFzayA9IGZ1bmN0aW9uKHdyYXBwZWRDYWxsYmFjaywgd3JhcHBlZFJlc3VsdHMpIHtcbiAgICAgICAgICAgIHZhciByZXRyeUF0dGVtcHQgPSBmdW5jdGlvbih0YXNrLCBmaW5hbEF0dGVtcHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2VyaWVzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzayhmdW5jdGlvbihlcnIsIHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXNDYWxsYmFjayghZXJyIHx8IGZpbmFsQXR0ZW1wdCwge2VycjogZXJyLCByZXN1bHQ6IHJlc3VsdH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCB3cmFwcGVkUmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aGlsZSAodGltZXMpIHtcbiAgICAgICAgICAgICAgICBhdHRlbXB0cy5wdXNoKHJldHJ5QXR0ZW1wdCh0YXNrLCAhKHRpbWVzLT0xKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXN5bmMuc2VyaWVzKGF0dGVtcHRzLCBmdW5jdGlvbihkb25lLCBkYXRhKXtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICh3cmFwcGVkQ2FsbGJhY2sgfHwgY2FsbGJhY2spKGRhdGEuZXJyLCBkYXRhLnJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhIGNhbGxiYWNrIGlzIHBhc3NlZCwgcnVuIHRoaXMgYXMgYSBjb250cm9sbCBmbG93XG4gICAgICAgIHJldHVybiBjYWxsYmFjayA/IHdyYXBwZWRUYXNrKCkgOiB3cmFwcGVkVGFza1xuICAgIH07XG5cbiAgICBhc3luYy53YXRlcmZhbGwgPSBmdW5jdGlvbiAodGFza3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmICghX2lzQXJyYXkodGFza3MpKSB7XG4gICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgdG8gd2F0ZXJmYWxsIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJyk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3cmFwSXRlcmF0b3IgPSBmdW5jdGlvbiAoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh3cmFwSXRlcmF0b3IobmV4dCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhc3luYy5zZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHdyYXBJdGVyYXRvcihhc3luYy5pdGVyYXRvcih0YXNrcykpKCk7XG4gICAgfTtcblxuICAgIHZhciBfcGFyYWxsZWwgPSBmdW5jdGlvbihlYWNoZm4sIHRhc2tzLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBpZiAoX2lzQXJyYXkodGFza3MpKSB7XG4gICAgICAgICAgICBlYWNoZm4ubWFwKHRhc2tzLCBmdW5jdGlvbiAoZm4sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGVyciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgICBlYWNoZm4uZWFjaChfa2V5cyh0YXNrcyksIGZ1bmN0aW9uIChrLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRhc2tzW2tdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1trXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHRzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGFzeW5jLnBhcmFsbGVsID0gZnVuY3Rpb24gKHRhc2tzLCBjYWxsYmFjaykge1xuICAgICAgICBfcGFyYWxsZWwoeyBtYXA6IGFzeW5jLm1hcCwgZWFjaDogYXN5bmMuZWFjaCB9LCB0YXNrcywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBhc3luYy5wYXJhbGxlbExpbWl0ID0gZnVuY3Rpb24odGFza3MsIGxpbWl0LCBjYWxsYmFjaykge1xuICAgICAgICBfcGFyYWxsZWwoeyBtYXA6IF9tYXBMaW1pdChsaW1pdCksIGVhY2g6IF9lYWNoTGltaXQobGltaXQpIH0sIHRhc2tzLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIGFzeW5jLnNlcmllcyA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgaWYgKF9pc0FycmF5KHRhc2tzKSkge1xuICAgICAgICAgICAgYXN5bmMubWFwU2VyaWVzKHRhc2tzLCBmdW5jdGlvbiAoZm4sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGVyciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgICBhc3luYy5lYWNoU2VyaWVzKF9rZXlzKHRhc2tzKSwgZnVuY3Rpb24gKGssIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGFza3Nba10oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzW2tdID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXN5bmMuaXRlcmF0b3IgPSBmdW5jdGlvbiAodGFza3MpIHtcbiAgICAgICAgdmFyIG1ha2VDYWxsYmFjayA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza3NbaW5kZXhdLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmbi5uZXh0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm4ubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGluZGV4IDwgdGFza3MubGVuZ3RoIC0gMSkgPyBtYWtlQ2FsbGJhY2soaW5kZXggKyAxKTogbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBtYWtlQ2FsbGJhY2soMCk7XG4gICAgfTtcblxuICAgIGFzeW5jLmFwcGx5ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShcbiAgICAgICAgICAgICAgICBudWxsLCBhcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIF9jb25jYXQgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGZuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2IpIHtcbiAgICAgICAgICAgIGZuKHgsIGZ1bmN0aW9uIChlcnIsIHkpIHtcbiAgICAgICAgICAgICAgICByID0gci5jb25jYXQoeSB8fCBbXSk7XG4gICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsIHIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGFzeW5jLmNvbmNhdCA9IGRvUGFyYWxsZWwoX2NvbmNhdCk7XG4gICAgYXN5bmMuY29uY2F0U2VyaWVzID0gZG9TZXJpZXMoX2NvbmNhdCk7XG5cbiAgICBhc3luYy53aGlsc3QgPSBmdW5jdGlvbiAodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0ZXN0KCkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhc3luYy53aGlsc3QodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBhc3luYy5kb1doaWxzdCA9IGZ1bmN0aW9uIChpdGVyYXRvciwgdGVzdCwgY2FsbGJhY2spIHtcbiAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgaWYgKHRlc3QuYXBwbHkobnVsbCwgYXJncykpIHtcbiAgICAgICAgICAgICAgICBhc3luYy5kb1doaWxzdChpdGVyYXRvciwgdGVzdCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGFzeW5jLnVudGlsID0gZnVuY3Rpb24gKHRlc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRlc3QoKSkge1xuICAgICAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzeW5jLnVudGlsKHRlc3QsIGl0ZXJhdG9yLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXN5bmMuZG9VbnRpbCA9IGZ1bmN0aW9uIChpdGVyYXRvciwgdGVzdCwgY2FsbGJhY2spIHtcbiAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgaWYgKCF0ZXN0LmFwcGx5KG51bGwsIGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgYXN5bmMuZG9VbnRpbChpdGVyYXRvciwgdGVzdCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGFzeW5jLnF1ZXVlID0gZnVuY3Rpb24gKHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbmN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbmN5ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfaW5zZXJ0KHEsIGRhdGEsIHBvcywgY2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAoIXEuc3RhcnRlZCl7XG4gICAgICAgICAgICBxLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV9pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAvLyBjYWxsIGRyYWluIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyB0YXNrc1xuICAgICAgICAgICAgIHJldHVybiBhc3luYy5zZXRJbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIGlmIChxLmRyYWluKSB7XG4gICAgICAgICAgICAgICAgICAgICBxLmRyYWluKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX2VhY2goZGF0YSwgZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgICB2YXIgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHRhc2ssXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBudWxsXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgaWYgKHBvcykge1xuICAgICAgICAgICAgICAgIHEudGFza3MudW5zaGlmdChpdGVtKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBxLnRhc2tzLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocS5zYXR1cmF0ZWQgJiYgcS50YXNrcy5sZW5ndGggPT09IHEuY29uY3VycmVuY3kpIHtcbiAgICAgICAgICAgICAgICAgIHEuc2F0dXJhdGVkKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlKHEucHJvY2Vzcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd29ya2VycyA9IDA7XG4gICAgICAgIHZhciBxID0ge1xuICAgICAgICAgICAgdGFza3M6IFtdLFxuICAgICAgICAgICAgY29uY3VycmVuY3k6IGNvbmN1cnJlbmN5LFxuICAgICAgICAgICAgc2F0dXJhdGVkOiBudWxsLFxuICAgICAgICAgICAgZW1wdHk6IG51bGwsXG4gICAgICAgICAgICBkcmFpbjogbnVsbCxcbiAgICAgICAgICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICBfaW5zZXJ0KHEsIGRhdGEsIGZhbHNlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAga2lsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBxLmRyYWluID0gbnVsbDtcbiAgICAgICAgICAgICAgcS50YXNrcyA9IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuc2hpZnQ6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICBfaW5zZXJ0KHEsIGRhdGEsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFxLnBhdXNlZCAmJiB3b3JrZXJzIDwgcS5jb25jdXJyZW5jeSAmJiBxLnRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFzayA9IHEudGFza3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHEuZW1wdHkgJiYgcS50YXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHEuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3b3JrZXJzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VycyAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2suY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmNhbGxiYWNrLmFwcGx5KHRhc2ssIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5kcmFpbiAmJiBxLnRhc2tzLmxlbmd0aCArIHdvcmtlcnMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLmRyYWluKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBxLnByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNiID0gb25seV9vbmNlKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXIodGFzay5kYXRhLCBjYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxLnRhc2tzLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydW5uaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlcnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaWRsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHEudGFza3MubGVuZ3RoICsgd29ya2VycyA9PT0gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChxLnBhdXNlZCA9PT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICBxLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHEucGF1c2VkID09PSBmYWxzZSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICBxLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gY2FsbCBxLnByb2Nlc3Mgb25jZSBwZXIgY29uY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHdvcmtlciB0byBwcmVzZXJ2ZSBmdWxsIGNvbmN1cnJlbmN5IGFmdGVyIHBhdXNlXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdyA9IDE7IHcgPD0gcS5jb25jdXJyZW5jeTsgdysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZShxLnByb2Nlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgfTtcblxuICAgIGFzeW5jLnByaW9yaXR5UXVldWUgPSBmdW5jdGlvbiAod29ya2VyLCBjb25jdXJyZW5jeSkge1xuXG4gICAgICAgIGZ1bmN0aW9uIF9jb21wYXJlVGFza3MoYSwgYil7XG4gICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIF9iaW5hcnlTZWFyY2goc2VxdWVuY2UsIGl0ZW0sIGNvbXBhcmUpIHtcbiAgICAgICAgICB2YXIgYmVnID0gLTEsXG4gICAgICAgICAgICAgIGVuZCA9IHNlcXVlbmNlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgd2hpbGUgKGJlZyA8IGVuZCkge1xuICAgICAgICAgICAgdmFyIG1pZCA9IGJlZyArICgoZW5kIC0gYmVnICsgMSkgPj4+IDEpO1xuICAgICAgICAgICAgaWYgKGNvbXBhcmUoaXRlbSwgc2VxdWVuY2VbbWlkXSkgPj0gMCkge1xuICAgICAgICAgICAgICBiZWcgPSBtaWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmQgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmVnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gX2luc2VydChxLCBkYXRhLCBwcmlvcml0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAoIXEuc3RhcnRlZCl7XG4gICAgICAgICAgICBxLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV9pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAvLyBjYWxsIGRyYWluIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyB0YXNrc1xuICAgICAgICAgICAgIHJldHVybiBhc3luYy5zZXRJbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIGlmIChxLmRyYWluKSB7XG4gICAgICAgICAgICAgICAgICAgICBxLmRyYWluKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX2VhY2goZGF0YSwgZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgICB2YXIgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHRhc2ssXG4gICAgICAgICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBudWxsXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgcS50YXNrcy5zcGxpY2UoX2JpbmFyeVNlYXJjaChxLnRhc2tzLCBpdGVtLCBfY29tcGFyZVRhc2tzKSArIDEsIDAsIGl0ZW0pO1xuXG4gICAgICAgICAgICAgIGlmIChxLnNhdHVyYXRlZCAmJiBxLnRhc2tzLmxlbmd0aCA9PT0gcS5jb25jdXJyZW5jeSkge1xuICAgICAgICAgICAgICAgICAgcS5zYXR1cmF0ZWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhc3luYy5zZXRJbW1lZGlhdGUocS5wcm9jZXNzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHdpdGggYSBub3JtYWwgcXVldWVcbiAgICAgICAgdmFyIHEgPSBhc3luYy5xdWV1ZSh3b3JrZXIsIGNvbmN1cnJlbmN5KTtcblxuICAgICAgICAvLyBPdmVycmlkZSBwdXNoIHRvIGFjY2VwdCBzZWNvbmQgcGFyYW1ldGVyIHJlcHJlc2VudGluZyBwcmlvcml0eVxuICAgICAgICBxLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgcHJpb3JpdHksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgX2luc2VydChxLCBkYXRhLCBwcmlvcml0eSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFJlbW92ZSB1bnNoaWZ0IGZ1bmN0aW9uXG4gICAgICAgIGRlbGV0ZSBxLnVuc2hpZnQ7XG5cbiAgICAgICAgcmV0dXJuIHE7XG4gICAgfTtcblxuICAgIGFzeW5jLmNhcmdvID0gZnVuY3Rpb24gKHdvcmtlciwgcGF5bG9hZCkge1xuICAgICAgICB2YXIgd29ya2luZyAgICAgPSBmYWxzZSxcbiAgICAgICAgICAgIHRhc2tzICAgICAgID0gW107XG5cbiAgICAgICAgdmFyIGNhcmdvID0ge1xuICAgICAgICAgICAgdGFza3M6IHRhc2tzLFxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgICAgIHNhdHVyYXRlZDogbnVsbCxcbiAgICAgICAgICAgIGVtcHR5OiBudWxsLFxuICAgICAgICAgICAgZHJhaW46IG51bGwsXG4gICAgICAgICAgICBkcmFpbmVkOiB0cnVlLFxuICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gW2RhdGFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZWFjaChkYXRhLCBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdGFzayxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcmdvLmRyYWluZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmdvLnNhdHVyYXRlZCAmJiB0YXNrcy5sZW5ndGggPT09IHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmdvLnNhdHVyYXRlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlKGNhcmdvLnByb2Nlc3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdvcmtpbmcpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAodGFza3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmdvLmRyYWluICYmICFjYXJnby5kcmFpbmVkKSBjYXJnby5kcmFpbigpO1xuICAgICAgICAgICAgICAgICAgICBjYXJnby5kcmFpbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0cyA9IHR5cGVvZiBwYXlsb2FkID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGFza3Muc3BsaWNlKDAsIHBheWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0YXNrcy5zcGxpY2UoMCwgdGFza3MubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIHZhciBkcyA9IF9tYXAodHMsIGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZihjYXJnby5lbXB0eSkgY2FyZ28uZW1wdHkoKTtcbiAgICAgICAgICAgICAgICB3b3JraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3b3JrZXIoZHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2luZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICBfZWFjaCh0cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jYWxsYmFjay5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvY2VzcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrcy5sZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnVubmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3b3JraW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gY2FyZ287XG4gICAgfTtcblxuICAgIHZhciBfY29uc29sZV9mbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KFtmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29uc29sZVtuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2VhY2goYXJncywgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlW25hbWVdKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XSkpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgYXN5bmMubG9nID0gX2NvbnNvbGVfZm4oJ2xvZycpO1xuICAgIGFzeW5jLmRpciA9IF9jb25zb2xlX2ZuKCdkaXInKTtcbiAgICAvKmFzeW5jLmluZm8gPSBfY29uc29sZV9mbignaW5mbycpO1xuICAgIGFzeW5jLndhcm4gPSBfY29uc29sZV9mbignd2FybicpO1xuICAgIGFzeW5jLmVycm9yID0gX2NvbnNvbGVfZm4oJ2Vycm9yJyk7Ki9cblxuICAgIGFzeW5jLm1lbW9pemUgPSBmdW5jdGlvbiAoZm4sIGhhc2hlcikge1xuICAgICAgICB2YXIgbWVtbyA9IHt9O1xuICAgICAgICB2YXIgcXVldWVzID0ge307XG4gICAgICAgIGhhc2hlciA9IGhhc2hlciB8fCBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGtleSBpbiBtZW1vKSB7XG4gICAgICAgICAgICAgICAgYXN5bmMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBtZW1vW2tleV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5IGluIHF1ZXVlcykge1xuICAgICAgICAgICAgICAgIHF1ZXVlc1trZXldLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVldWVzW2tleV0gPSBbY2FsbGJhY2tdO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KFtmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lbW9ba2V5XSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSBxdWV1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHF1ZXVlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcVtpXS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbWVtb2l6ZWQubWVtbyA9IG1lbW87XG4gICAgICAgIG1lbW9pemVkLnVubWVtb2l6ZWQgPSBmbjtcbiAgICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH07XG5cbiAgICBhc3luYy51bm1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZm4udW5tZW1vaXplZCB8fCBmbikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIGFzeW5jLnRpbWVzID0gZnVuY3Rpb24gKGNvdW50LCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb3VudGVyLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzeW5jLm1hcChjb3VudGVyLCBpdGVyYXRvciwgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBhc3luYy50aW1lc1NlcmllcyA9IGZ1bmN0aW9uIChjb3VudCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjb3VudGVyID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY291bnRlci5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc3luYy5tYXBTZXJpZXMoY291bnRlciwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgYXN5bmMuc2VxID0gZnVuY3Rpb24gKC8qIGZ1bmN0aW9ucy4uLiAqLykge1xuICAgICAgICB2YXIgZm5zID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIGFzeW5jLnJlZHVjZShmbnMsIGFyZ3MsIGZ1bmN0aW9uIChuZXdhcmdzLCBmbiwgY2IpIHtcbiAgICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBuZXdhcmdzLmNvbmNhdChbZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgICAgICBjYihlcnIsIG5leHRhcmdzKTtcbiAgICAgICAgICAgICAgICB9XSkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoYXQsIFtlcnJdLmNvbmNhdChyZXN1bHRzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYXN5bmMuY29tcG9zZSA9IGZ1bmN0aW9uICgvKiBmdW5jdGlvbnMuLi4gKi8pIHtcbiAgICAgIHJldHVybiBhc3luYy5zZXEuYXBwbHkobnVsbCwgQXJyYXkucHJvdG90eXBlLnJldmVyc2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgdmFyIF9hcHBseUVhY2ggPSBmdW5jdGlvbiAoZWFjaGZuLCBmbnMgLyphcmdzLi4uKi8pIHtcbiAgICAgICAgdmFyIGdvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiBlYWNoZm4oZm5zLCBmdW5jdGlvbiAoZm4sIGNiKSB7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncy5jb25jYXQoW2NiXSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgICAgICAgICByZXR1cm4gZ28uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ287XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGFzeW5jLmFwcGx5RWFjaCA9IGRvUGFyYWxsZWwoX2FwcGx5RWFjaCk7XG4gICAgYXN5bmMuYXBwbHlFYWNoU2VyaWVzID0gZG9TZXJpZXMoX2FwcGx5RWFjaCk7XG5cbiAgICBhc3luYy5mb3JldmVyID0gZnVuY3Rpb24gKGZuLCBjYWxsYmFjaykge1xuICAgICAgICBmdW5jdGlvbiBuZXh0KGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm4obmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dCgpO1xuICAgIH07XG5cbiAgICAvLyBOb2RlLmpzXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gYXN5bmM7XG4gICAgfVxuICAgIC8vIEFNRCAvIFJlcXVpcmVKU1xuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgIT09ICd1bmRlZmluZWQnICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBpbmNsdWRlZCBkaXJlY3RseSB2aWEgPHNjcmlwdD4gdGFnXG4gICAgZWxzZSB7XG4gICAgICAgIHJvb3QuYXN5bmMgPSBhc3luYztcbiAgICB9XG5cbn0oKSk7XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vamFrZWFyY2hpYmFsZC9lczYtcHJvbWlzZS9tYXN0ZXIvTElDRU5TRVxuICogQHZlcnNpb24gICAyLjMuMFxuICovXG5cbihmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzTWF5YmVUaGVuYWJsZSh4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkdXRpbHMkJF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzQXJyYXkgPSBsaWIkZXM2JHByb21pc2UkdXRpbHMkJF9pc0FycmF5O1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuID0gMDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR2ZXJ0eE5leHQ7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRjdXN0b21TY2hlZHVsZXJGbjtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2xpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW5dID0gY2FsbGJhY2s7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiArIDFdID0gYXJnO1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiArPSAyO1xuICAgICAgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPT09IDIpIHtcbiAgICAgICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgICAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgICAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgICAgIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4obGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRBc2FwKGFzYXBGbikge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAgPSBhc2FwRm47XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyV2luZG93ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJHbG9iYWwgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3NlcldpbmRvdyB8fCB7fTtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuICAgIC8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuICAgIC8vIG5vZGVcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTmV4dFRpY2soKSB7XG4gICAgICB2YXIgbmV4dFRpY2sgPSBwcm9jZXNzLm5leHRUaWNrO1xuICAgICAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gICAgICAvLyBzZXRJbW1lZGlhdGUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBpbnN0ZWFkXG4gICAgICB2YXIgdmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5tYXRjaCgvXig/OihcXGQrKVxcLik/KD86KFxcZCspXFwuKT8oXFwqfFxcZCspJC8pO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmVyc2lvbikgJiYgdmVyc2lvblsxXSA9PT0gJzAnICYmIHZlcnNpb25bMl0gPT09ICcxMCcpIHtcbiAgICAgICAgbmV4dFRpY2sgPSBzZXRJbW1lZGlhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIG5leHRUaWNrKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHZlcnR4XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZVZlcnR4VGltZXIoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR2ZXJ0eE5leHQobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgbGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCk7XG4gICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIG5vZGUuZGF0YSA9IChpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlYiB3b3JrZXJcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2g7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2gsIDEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbjsgaSs9Mikge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaV07XG4gICAgICAgIHZhciBhcmcgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaSsxXTtcblxuICAgICAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2krMV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhdHRlbXB0VmVydGV4KCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHIgPSByZXF1aXJlO1xuICAgICAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcbiAgICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VWZXJ0eFRpbWVyKCk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VTZXRUaW1lb3V0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoO1xuICAgIC8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG4gICAgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRpc05vZGUpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU5leHRUaWNrKCk7XG4gICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICB9IGVsc2UgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRpc1dvcmtlcikge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTWVzc2FnZUNoYW5uZWwoKTtcbiAgICB9IGVsc2UgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJGF0dGVtcHRWZXJ0ZXgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3AoKSB7fVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcgICA9IHZvaWQgMDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEID0gMTtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQgID0gMjtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUiA9IG5ldyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRFcnJvck9iamVjdCgpO1xuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc2VsZkZ1bGxmaWxsbWVudCgpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRjYW5ub3RSZXR1cm5Pd24oKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGdldFRoZW4ocHJvbWlzZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmIChzZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICBpZiAoc2VhbGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgICAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgICAgIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKSB7XG4gICAgICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0aGVuID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZ2V0VGhlbihtYXliZVRoZW5hYmxlKTtcblxuICAgICAgICBpZiAodGhlbiA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHNlbGZGdWxsZmlsbG1lbnQoKSk7XG4gICAgICB9IGVsc2UgaWYgKGxpYiRlczYkcHJvbWlzZSR1dGlscyQkb2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaChwcm9taXNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fc3RhdGUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQ7XG5cbiAgICAgIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaCwgcHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgICAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7IHJldHVybjsgfVxuICAgICAgcHJvbWlzZS5fc3RhdGUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRDtcbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gICAgICB2YXIgc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzO1xuICAgICAgdmFyIGxlbmd0aCA9IHN1YnNjcmliZXJzLmxlbmd0aDtcblxuICAgICAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICAgICAgc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICAgICAgc3Vic2NyaWJlcnNbbGVuZ3RoICsgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gICAgICBzdWJzY3JpYmVyc1tsZW5ndGggKyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRF0gID0gb25SZWplY3Rpb247XG5cbiAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoLCBwYXJlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2gocHJvbWlzZSkge1xuICAgICAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gICAgICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gICAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICAgICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRFcnJvck9iamVjdCgpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1IgPSBuZXcgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRXJyb3JPYmplY3QoKTtcblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICAgICAgdmFyIGhhc0NhbGxiYWNrID0gbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgICAgICB2YWx1ZSwgZXJyb3IsIHN1Y2NlZWRlZCwgZmFpbGVkO1xuXG4gICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgdmFsdWUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRjYW5ub3RSZXR1cm5Pd24oKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZGV0YWlsO1xuICAgICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgICAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKXtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgICBlbnVtZXJhdG9yLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgICBlbnVtZXJhdG9yLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCk7XG5cbiAgICAgIGlmIChlbnVtZXJhdG9yLl92YWxpZGF0ZUlucHV0KGlucHV0KSkge1xuICAgICAgICBlbnVtZXJhdG9yLl9pbnB1dCAgICAgPSBpbnB1dDtcbiAgICAgICAgZW51bWVyYXRvci5sZW5ndGggICAgID0gaW5wdXQubGVuZ3RoO1xuICAgICAgICBlbnVtZXJhdG9yLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICAgICAgZW51bWVyYXRvci5faW5pdCgpO1xuXG4gICAgICAgIGlmIChlbnVtZXJhdG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwoZW51bWVyYXRvci5wcm9taXNlLCBlbnVtZXJhdG9yLl9yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudW1lcmF0b3IubGVuZ3RoID0gZW51bWVyYXRvci5sZW5ndGggfHwgMDtcbiAgICAgICAgICBlbnVtZXJhdG9yLl9lbnVtZXJhdGUoKTtcbiAgICAgICAgICBpZiAoZW51bWVyYXRvci5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKGVudW1lcmF0b3IucHJvbWlzZSwgZW51bWVyYXRvci5fcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChlbnVtZXJhdG9yLnByb21pc2UsIGVudW1lcmF0b3IuX3ZhbGlkYXRpb25FcnJvcigpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlSW5wdXQgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNBcnJheShpbnB1dCk7XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGlvbkVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIH07XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvcjtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgICAgIHZhciBsZW5ndGggID0gZW51bWVyYXRvci5sZW5ndGg7XG4gICAgICB2YXIgcHJvbWlzZSA9IGVudW1lcmF0b3IucHJvbWlzZTtcbiAgICAgIHZhciBpbnB1dCAgID0gZW51bWVyYXRvci5faW5wdXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBwcm9taXNlLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZW51bWVyYXRvci5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbihlbnRyeSwgaSkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuICAgICAgdmFyIGMgPSBlbnVtZXJhdG9yLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuXG4gICAgICBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc01heWJlVGhlbmFibGUoZW50cnkpKSB7XG4gICAgICAgIGlmIChlbnRyeS5jb25zdHJ1Y3RvciA9PT0gYyAmJiBlbnRyeS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgICBlbnRyeS5fb25lcnJvciA9IG51bGw7XG4gICAgICAgICAgZW51bWVyYXRvci5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW51bWVyYXRvci5fd2lsbFNldHRsZUF0KGMucmVzb2x2ZShlbnRyeSksIGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnVtZXJhdG9yLl9yZW1haW5pbmctLTtcbiAgICAgICAgZW51bWVyYXRvci5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24oc3RhdGUsIGksIHZhbHVlKSB7XG4gICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG4gICAgICB2YXIgcHJvbWlzZSA9IGVudW1lcmF0b3IucHJvbWlzZTtcblxuICAgICAgaWYgKHByb21pc2UuX3N0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX3JlbWFpbmluZy0tO1xuXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudW1lcmF0b3IuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnVtZXJhdG9yLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCBlbnVtZXJhdG9yLl9yZXN1bHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uKHByb21pc2UsIGkpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgZW51bWVyYXRvci5fc2V0dGxlZEF0KGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX3NldHRsZWRBdChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRhbGwoZW50cmllcykge1xuICAgICAgcmV0dXJuIG5ldyBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkZGVmYXVsdCh0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRhbGw7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkcmFjZShlbnRyaWVzKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgICAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCk7XG5cbiAgICAgIGlmICghbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICBmdW5jdGlvbiBvbkZ1bGZpbGxtZW50KHZhbHVlKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblJlamVjdGlvbihyZWFzb24pIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBwcm9taXNlLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSksIHVuZGVmaW5lZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJhY2UkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyYWNlJCRyYWNlO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJHJlc29sdmUob2JqZWN0KSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgICAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkcmVzb2x2ZTtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZWplY3QkJHJlamVjdChyZWFzb24pIHtcbiAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCk7XG4gICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVqZWN0JCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVqZWN0JCRyZWplY3Q7XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGNvdW50ZXIgPSAwO1xuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJG5lZWRzUmVzb2x2ZXIoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJG5lZWRzTmV3KCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZTtcbiAgICAvKipcbiAgICAgIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgICAgIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gICAgICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgICAgIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gICAgICBUZXJtaW5vbG9neVxuICAgICAgLS0tLS0tLS0tLS1cblxuICAgICAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgICAgIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgICAgIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgICAgIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAgICAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAgICAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgICAgIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICAgICAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgICAgIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgICAgIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gICAgICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgICAgIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgICAgIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICAgICAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICAgICAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICAgICAgQmFzaWMgVXNhZ2U6XG4gICAgICAtLS0tLS0tLS0tLS1cblxuICAgICAgYGBganNcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gb24gZmFpbHVyZVxuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAvLyBvbiByZWplY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEFkdmFuY2VkIFVzYWdlOlxuICAgICAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgICAgIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gICAgICBgYGBqc1xuICAgICAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICAvLyBvbiBmdWxmaWxsbWVudFxuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIC8vIG9uIHJlamVjdGlvblxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICAgICAgYGBganNcbiAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gICAgICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICAgICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAY2xhc3MgUHJvbWlzZVxuICAgICAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICAgIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICAgIHRoaXMuX2lkID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGNvdW50ZXIrKztcbiAgICAgIHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICAgICAgaWYgKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgICAgIGlmICghbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHJlc29sdmVyKSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc1Jlc29sdmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UpKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJG5lZWRzTmV3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuYWxsID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRkZWZhdWx0O1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnJhY2UgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyYWNlJCRkZWZhdWx0O1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnJlc29sdmUgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRkZWZhdWx0O1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnJlamVjdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5fc2V0U2NoZWR1bGVyID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHNldFNjaGVkdWxlcjtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5fc2V0QXNhcCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRBc2FwO1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLl9hc2FwID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXA7XG5cbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UsXG5cbiAgICAvKipcbiAgICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICAgIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBDaGFpbmluZ1xuICAgICAgLS0tLS0tLS1cblxuICAgICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICAgIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgICB9KTtcblxuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgICAgfSk7XG4gICAgICBgYGBcbiAgICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEFzc2ltaWxhdGlvblxuICAgICAgLS0tLS0tLS0tLS0tXG5cbiAgICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBTaW1wbGUgRXhhbXBsZVxuICAgICAgLS0tLS0tLS0tLS0tLS1cblxuICAgICAgU3luY2hyb25vdXMgRXhhbXBsZVxuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH1cbiAgICAgIGBgYFxuXG4gICAgICBFcnJiYWNrIEV4YW1wbGVcblxuICAgICAgYGBganNcbiAgICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgUHJvbWlzZSBFeGFtcGxlO1xuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgICAtLS0tLS0tLS0tLS0tLVxuXG4gICAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG5cbiAgICAgIGBgYGphdmFzY3JpcHRcbiAgICAgIHZhciBhdXRob3IsIGJvb2tzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH1cbiAgICAgIGBgYFxuXG4gICAgICBFcnJiYWNrIEV4YW1wbGVcblxuICAgICAgYGBganNcblxuICAgICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG5cbiAgICAgIH1cblxuICAgICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgUHJvbWlzZSBFeGFtcGxlO1xuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICBmaW5kQXV0aG9yKCkuXG4gICAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBtZXRob2QgdGhlblxuICAgICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICAgKi9cbiAgICAgIHRoZW46IGZ1bmN0aW9uKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEICYmICFvbkZ1bGZpbGxtZW50IHx8IHN0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCAmJiAhb25SZWplY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuICAgICAgICB2YXIgcmVzdWx0ID0gcGFyZW50Ll9yZXN1bHQ7XG5cbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW3N0YXRlIC0gMV07XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGludm9rZUNhbGxiYWNrKHN0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHJlc3VsdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0sXG5cbiAgICAvKipcbiAgICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBzeW5jaHJvbm91c1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmluZEF1dGhvcigpO1xuICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH1cblxuICAgICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAbWV0aG9kIGNhdGNoXG4gICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQHJldHVybiB7UHJvbWlzZX1cbiAgICAqL1xuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJHBvbHlmaWxsKCkge1xuICAgICAgdmFyIGxvY2FsO1xuXG4gICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gICAgICBpZiAoUCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvY2FsLlByb21pc2UgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkZGVmYXVsdDtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkcG9seWZpbGw7XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZSA9IHtcbiAgICAgICdQcm9taXNlJzogbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQsXG4gICAgICAncG9seWZpbGwnOiBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJGRlZmF1bHRcbiAgICB9O1xuXG4gICAgLyogZ2xvYmFsIGRlZmluZTp0cnVlIG1vZHVsZTp0cnVlIHdpbmRvdzogdHJ1ZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICAgIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2U7IH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlWydleHBvcnRzJ10pIHtcbiAgICAgIG1vZHVsZVsnZXhwb3J0cyddID0gbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpc1snRVM2UHJvbWlzZSddID0gbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTtcbiAgICB9XG5cbiAgICBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJGRlZmF1bHQoKTtcbn0pLmNhbGwodGhpcyk7XG5cbiIsIi8vIElnbm9yZSBtb2R1bGUgZm9yIGJyb3dzZXJpZnkgKHNlZSBwYWNrYWdlLmpzb24pIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIEpTT04tTEQgQVBJLlxuICpcbiAqIEBhdXRob3IgRGF2ZSBMb25nbGV5XG4gKlxuICogQGxpY2Vuc2UgQlNEIDMtQ2xhdXNlIExpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE1IERpZ2l0YWwgQmF6YWFyLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBEaWdpdGFsIEJhemFhciwgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTXG4gKiBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEFcbiAqIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEXG4gKiBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuKGZ1bmN0aW9uKCkge1xuXG4vLyBkZXRlcm1pbmUgaWYgaW4tYnJvd3NlciBvciB1c2luZyBub2RlLmpzXG52YXIgX25vZGVqcyA9IChcbiAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcbnZhciBfYnJvd3NlciA9ICFfbm9kZWpzICYmXG4gICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpO1xuaWYoX2Jyb3dzZXIpIHtcbiAgaWYodHlwZW9mIGdsb2JhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZih0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsID0gd2luZG93O1xuICAgIH0gZWxzZSBpZih0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGdsb2JhbCA9IHNlbGY7XG4gICAgfSBlbHNlIGlmKHR5cGVvZiAkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsID0gJDtcbiAgICB9XG4gIH1cbn1cblxuLy8gYXR0YWNoZXMganNvbmxkIEFQSSB0byB0aGUgZ2l2ZW4gb2JqZWN0XG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uKGpzb25sZCkge1xuXG4vKiBDb3JlIEFQSSAqL1xuXG4vKipcbiAqIFBlcmZvcm1zIEpTT04tTEQgY29tcGFjdGlvbi5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIEpTT04tTEQgaW5wdXQgdG8gY29tcGFjdC5cbiAqIEBwYXJhbSBjdHggdGhlIGNvbnRleHQgdG8gY29tcGFjdCB3aXRoLlxuICogQHBhcmFtIFtvcHRpb25zXSBvcHRpb25zIHRvIHVzZTpcbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2NvbXBhY3RBcnJheXNdIHRydWUgdG8gY29tcGFjdCBhcnJheXMgdG8gc2luZ2xlIHZhbHVlcyB3aGVuXG4gKiAgICAgICAgICAgIGFwcHJvcHJpYXRlLCBmYWxzZSBub3QgdG8gKGRlZmF1bHQ6IHRydWUpLlxuICogICAgICAgICAgW2dyYXBoXSB0cnVlIHRvIGFsd2F5cyBvdXRwdXQgYSB0b3AtbGV2ZWwgZ3JhcGggKGRlZmF1bHQ6IGZhbHNlKS5cbiAqICAgICAgICAgIFtleHBhbmRDb250ZXh0XSBhIGNvbnRleHQgdG8gZXhwYW5kIHdpdGguXG4gKiAgICAgICAgICBbc2tpcEV4cGFuc2lvbl0gdHJ1ZSB0byBhc3N1bWUgdGhlIGlucHV0IGlzIGV4cGFuZGVkIGFuZCBza2lwXG4gKiAgICAgICAgICAgIGV4cGFuc2lvbiwgZmFsc2Ugbm90IHRvLCBkZWZhdWx0cyB0byBmYWxzZS5cbiAqICAgICAgICAgIFtkb2N1bWVudExvYWRlcih1cmwsIGNhbGxiYWNrKGVyciwgcmVtb3RlRG9jKSldIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBjb21wYWN0ZWQsIGN0eCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmpzb25sZC5jb21wYWN0ID0gZnVuY3Rpb24oaW5wdXQsIGN0eCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobmV3IFR5cGVFcnJvcignQ291bGQgbm90IGNvbXBhY3QsIHRvbyBmZXcgYXJndW1lbnRzLicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGdldCBhcmd1bWVudHNcbiAgaWYodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmKGN0eCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBqc29ubGQubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdUaGUgY29tcGFjdGlvbiBjb250ZXh0IG11c3Qgbm90IGJlIG51bGwuJyxcbiAgICAgICAgJ2pzb25sZC5Db21wYWN0RXJyb3InLCB7Y29kZTogJ2ludmFsaWQgbG9jYWwgY29udGV4dCd9KSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBub3RoaW5nIHRvIGNvbXBhY3RcbiAgaWYoaW5wdXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmKCEoJ2Jhc2UnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5iYXNlID0gKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpID8gaW5wdXQgOiAnJztcbiAgfVxuICBpZighKCdjb21wYWN0QXJyYXlzJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuY29tcGFjdEFycmF5cyA9IHRydWU7XG4gIH1cbiAgaWYoISgnZ3JhcGgnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5ncmFwaCA9IGZhbHNlO1xuICB9XG4gIGlmKCEoJ3NraXBFeHBhbnNpb24nIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5za2lwRXhwYW5zaW9uID0gZmFsc2U7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cbiAgaWYoISgnbGluaycgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmxpbmsgPSBmYWxzZTtcbiAgfVxuICBpZihvcHRpb25zLmxpbmspIHtcbiAgICAvLyBmb3JjZSBza2lwIGV4cGFuc2lvbiB3aGVuIGxpbmtpbmcsIFwibGlua1wiIGlzIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWNcbiAgICAvLyBBUEksIGl0IHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIGZyYW1pbmdcbiAgICBvcHRpb25zLnNraXBFeHBhbnNpb24gPSB0cnVlO1xuICB9XG5cbiAgdmFyIGV4cGFuZCA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmKG9wdGlvbnMuc2tpcEV4cGFuc2lvbikge1xuICAgICAgcmV0dXJuIGpzb25sZC5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGpzb25sZC5leHBhbmQoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICAvLyBleHBhbmQgaW5wdXQgdGhlbiBkbyBjb21wYWN0aW9uXG4gIGV4cGFuZChpbnB1dCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBleHBhbmRlZCkge1xuICAgIGlmKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0NvdWxkIG5vdCBleHBhbmQgaW5wdXQgYmVmb3JlIGNvbXBhY3Rpb24uJyxcbiAgICAgICAgJ2pzb25sZC5Db21wYWN0RXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICB9XG5cbiAgICAvLyBwcm9jZXNzIGNvbnRleHRcbiAgICB2YXIgYWN0aXZlQ3R4ID0gX2dldEluaXRpYWxDb250ZXh0KG9wdGlvbnMpO1xuICAgIGpzb25sZC5wcm9jZXNzQ29udGV4dChhY3RpdmVDdHgsIGN0eCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBhY3RpdmVDdHgpIHtcbiAgICAgIGlmKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgcHJvY2VzcyBjb250ZXh0IGJlZm9yZSBjb21wYWN0aW9uLicsXG4gICAgICAgICAgJ2pzb25sZC5Db21wYWN0RXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBhY3RlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGRvIGNvbXBhY3Rpb25cbiAgICAgICAgY29tcGFjdGVkID0gbmV3IFByb2Nlc3NvcigpLmNvbXBhY3QoYWN0aXZlQ3R4LCBudWxsLCBleHBhbmRlZCwgb3B0aW9ucyk7XG4gICAgICB9IGNhdGNoKGV4KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhleCk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFudXAobnVsbCwgY29tcGFjdGVkLCBhY3RpdmVDdHgsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwZXJmb3JtcyBjbGVhbiB1cCBhZnRlciBjb21wYWN0aW9uXG4gIGZ1bmN0aW9uIGNsZWFudXAoZXJyLCBjb21wYWN0ZWQsIGFjdGl2ZUN0eCwgb3B0aW9ucykge1xuICAgIGlmKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy5jb21wYWN0QXJyYXlzICYmICFvcHRpb25zLmdyYXBoICYmIF9pc0FycmF5KGNvbXBhY3RlZCkpIHtcbiAgICAgIGlmKGNvbXBhY3RlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gc2ltcGxpZnkgdG8gYSBzaW5nbGUgaXRlbVxuICAgICAgICBjb21wYWN0ZWQgPSBjb21wYWN0ZWRbMF07XG4gICAgICB9IGVsc2UgaWYoY29tcGFjdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBzaW1wbGlmeSB0byBhbiBlbXB0eSBvYmplY3RcbiAgICAgICAgY29tcGFjdGVkID0ge307XG4gICAgICB9XG4gICAgfSBlbHNlIGlmKG9wdGlvbnMuZ3JhcGggJiYgX2lzT2JqZWN0KGNvbXBhY3RlZCkpIHtcbiAgICAgIC8vIGFsd2F5cyB1c2UgYXJyYXkgaWYgZ3JhcGggb3B0aW9uIGlzIG9uXG4gICAgICBjb21wYWN0ZWQgPSBbY29tcGFjdGVkXTtcbiAgICB9XG5cbiAgICAvLyBmb2xsb3cgQGNvbnRleHQga2V5XG4gICAgaWYoX2lzT2JqZWN0KGN0eCkgJiYgJ0Bjb250ZXh0JyBpbiBjdHgpIHtcbiAgICAgIGN0eCA9IGN0eFsnQGNvbnRleHQnXTtcbiAgICB9XG5cbiAgICAvLyBidWlsZCBvdXRwdXQgY29udGV4dFxuICAgIGN0eCA9IF9jbG9uZShjdHgpO1xuICAgIGlmKCFfaXNBcnJheShjdHgpKSB7XG4gICAgICBjdHggPSBbY3R4XTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGVtcHR5IGNvbnRleHRzXG4gICAgdmFyIHRtcCA9IGN0eDtcbiAgICBjdHggPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdG1wLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZighX2lzT2JqZWN0KHRtcFtpXSkgfHwgT2JqZWN0LmtleXModG1wW2ldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGN0eC5wdXNoKHRtcFtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFycmF5IGlmIG9ubHkgb25lIGNvbnRleHRcbiAgICB2YXIgaGFzQ29udGV4dCA9IChjdHgubGVuZ3RoID4gMCk7XG4gICAgaWYoY3R4Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY3R4ID0gY3R4WzBdO1xuICAgIH1cblxuICAgIC8vIGFkZCBjb250ZXh0IGFuZC9vciBAZ3JhcGhcbiAgICBpZihfaXNBcnJheShjb21wYWN0ZWQpKSB7XG4gICAgICAvLyB1c2UgJ0BncmFwaCcga2V5d29yZFxuICAgICAgdmFyIGt3Z3JhcGggPSBfY29tcGFjdElyaShhY3RpdmVDdHgsICdAZ3JhcGgnKTtcbiAgICAgIHZhciBncmFwaCA9IGNvbXBhY3RlZDtcbiAgICAgIGNvbXBhY3RlZCA9IHt9O1xuICAgICAgaWYoaGFzQ29udGV4dCkge1xuICAgICAgICBjb21wYWN0ZWRbJ0Bjb250ZXh0J10gPSBjdHg7XG4gICAgICB9XG4gICAgICBjb21wYWN0ZWRba3dncmFwaF0gPSBncmFwaDtcbiAgICB9IGVsc2UgaWYoX2lzT2JqZWN0KGNvbXBhY3RlZCkgJiYgaGFzQ29udGV4dCkge1xuICAgICAgLy8gcmVvcmRlciBrZXlzIHNvIEBjb250ZXh0IGlzIGZpcnN0XG4gICAgICB2YXIgZ3JhcGggPSBjb21wYWN0ZWQ7XG4gICAgICBjb21wYWN0ZWQgPSB7J0Bjb250ZXh0JzogY3R4fTtcbiAgICAgIGZvcih2YXIga2V5IGluIGdyYXBoKSB7XG4gICAgICAgIGNvbXBhY3RlZFtrZXldID0gZ3JhcGhba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjYWxsYmFjayhudWxsLCBjb21wYWN0ZWQsIGFjdGl2ZUN0eCk7XG4gIH1cbn07XG5cbi8qKlxuICogUGVyZm9ybXMgSlNPTi1MRCBleHBhbnNpb24uXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIGlucHV0IHRvIGV4cGFuZC5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2Jhc2VdIHRoZSBiYXNlIElSSSB0byB1c2UuXG4gKiAgICAgICAgICBbZXhwYW5kQ29udGV4dF0gYSBjb250ZXh0IHRvIGV4cGFuZCB3aXRoLlxuICogICAgICAgICAgW2tlZXBGcmVlRmxvYXRpbmdOb2Rlc10gdHJ1ZSB0byBrZWVwIGZyZWUtZmxvYXRpbmcgbm9kZXMsXG4gKiAgICAgICAgICAgIGZhbHNlIG5vdCB0bywgZGVmYXVsdHMgdG8gZmFsc2UuXG4gKiAgICAgICAgICBbZG9jdW1lbnRMb2FkZXIodXJsLCBjYWxsYmFjayhlcnIsIHJlbW90ZURvYykpXSB0aGUgZG9jdW1lbnQgbG9hZGVyLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgZXhwYW5kZWQpIGNhbGxlZCBvbmNlIHRoZSBvcGVyYXRpb24gY29tcGxldGVzLlxuICovXG5qc29ubGQuZXhwYW5kID0gZnVuY3Rpb24oaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIGpzb25sZC5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBleHBhbmQsIHRvbyBmZXcgYXJndW1lbnRzLicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGdldCBhcmd1bWVudHNcbiAgaWYodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cbiAgaWYoISgna2VlcEZyZWVGbG9hdGluZ05vZGVzJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMua2VlcEZyZWVGbG9hdGluZ05vZGVzID0gZmFsc2U7XG4gIH1cblxuICBqc29ubGQubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgLy8gaWYgaW5wdXQgaXMgYSBzdHJpbmcsIGF0dGVtcHQgdG8gZGVyZWZlcmVuY2UgcmVtb3RlIGRvY3VtZW50XG4gICAgaWYodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbihlcnIsIHJlbW90ZURvYykge1xuICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmKCFyZW1vdGVEb2MuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICAgJ05vIHJlbW90ZSBkb2N1bWVudCBmb3VuZCBhdCB0aGUgZ2l2ZW4gVVJMLicsXG4gICAgICAgICAgICAgICdqc29ubGQuTnVsbFJlbW90ZURvY3VtZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHR5cGVvZiByZW1vdGVEb2MuZG9jdW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZW1vdGVEb2MuZG9jdW1lbnQgPSBKU09OLnBhcnNlKHJlbW90ZURvYy5kb2N1bWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICdDb3VsZCBub3QgcmV0cmlldmUgYSBKU09OLUxEIGRvY3VtZW50IGZyb20gdGhlIFVSTC4gVVJMICcgK1xuICAgICAgICAgICAgJ2RlcmVmZXJlbmNpbmcgbm90IGltcGxlbWVudGVkLicsICdqc29ubGQuTG9hZERvY3VtZW50RXJyb3InLCB7XG4gICAgICAgICAgICAgIGNvZGU6ICdsb2FkaW5nIGRvY3VtZW50IGZhaWxlZCcsXG4gICAgICAgICAgICAgIGNhdXNlOiBleCxcbiAgICAgICAgICAgICAgcmVtb3RlRG9jOiByZW1vdGVEb2NcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwYW5kKHJlbW90ZURvYyk7XG4gICAgICB9O1xuICAgICAgdmFyIHByb21pc2UgPSBvcHRpb25zLmRvY3VtZW50TG9hZGVyKGlucHV0LCBkb25lKTtcbiAgICAgIGlmKHByb21pc2UgJiYgJ3RoZW4nIGluIHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGRvbmUuYmluZChudWxsLCBudWxsKSwgZG9uZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG5vdGhpbmcgdG8gbG9hZFxuICAgIGV4cGFuZCh7Y29udGV4dFVybDogbnVsbCwgZG9jdW1lbnRVcmw6IG51bGwsIGRvY3VtZW50OiBpbnB1dH0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBleHBhbmQocmVtb3RlRG9jKSB7XG4gICAgLy8gc2V0IGRlZmF1bHQgYmFzZVxuICAgIGlmKCEoJ2Jhc2UnIGluIG9wdGlvbnMpKSB7XG4gICAgICBvcHRpb25zLmJhc2UgPSByZW1vdGVEb2MuZG9jdW1lbnRVcmwgfHwgJyc7XG4gICAgfVxuICAgIC8vIGJ1aWxkIG1ldGEtb2JqZWN0IGFuZCByZXRyaWV2ZSBhbGwgQGNvbnRleHQgVVJMc1xuICAgIHZhciBpbnB1dCA9IHtcbiAgICAgIGRvY3VtZW50OiBfY2xvbmUocmVtb3RlRG9jLmRvY3VtZW50KSxcbiAgICAgIHJlbW90ZUNvbnRleHQ6IHsnQGNvbnRleHQnOiByZW1vdGVEb2MuY29udGV4dFVybH1cbiAgICB9O1xuICAgIGlmKCdleHBhbmRDb250ZXh0JyBpbiBvcHRpb25zKSB7XG4gICAgICB2YXIgZXhwYW5kQ29udGV4dCA9IF9jbG9uZShvcHRpb25zLmV4cGFuZENvbnRleHQpO1xuICAgICAgaWYodHlwZW9mIGV4cGFuZENvbnRleHQgPT09ICdvYmplY3QnICYmICdAY29udGV4dCcgaW4gZXhwYW5kQ29udGV4dCkge1xuICAgICAgICBpbnB1dC5leHBhbmRDb250ZXh0ID0gZXhwYW5kQ29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0LmV4cGFuZENvbnRleHQgPSB7J0Bjb250ZXh0JzogZXhwYW5kQ29udGV4dH07XG4gICAgICB9XG4gICAgfVxuICAgIF9yZXRyaWV2ZUNvbnRleHRVcmxzKGlucHV0LCBvcHRpb25zLCBmdW5jdGlvbihlcnIsIGlucHV0KSB7XG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIHZhciBleHBhbmRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBwcm9jZXNzb3IgPSBuZXcgUHJvY2Vzc29yKCk7XG4gICAgICAgIHZhciBhY3RpdmVDdHggPSBfZ2V0SW5pdGlhbENvbnRleHQob3B0aW9ucyk7XG4gICAgICAgIHZhciBkb2N1bWVudCA9IGlucHV0LmRvY3VtZW50O1xuICAgICAgICB2YXIgcmVtb3RlQ29udGV4dCA9IGlucHV0LnJlbW90ZUNvbnRleHRbJ0Bjb250ZXh0J107XG5cbiAgICAgICAgLy8gcHJvY2VzcyBvcHRpb25hbCBleHBhbmRDb250ZXh0XG4gICAgICAgIGlmKGlucHV0LmV4cGFuZENvbnRleHQpIHtcbiAgICAgICAgICBhY3RpdmVDdHggPSBwcm9jZXNzb3IucHJvY2Vzc0NvbnRleHQoXG4gICAgICAgICAgICBhY3RpdmVDdHgsIGlucHV0LmV4cGFuZENvbnRleHRbJ0Bjb250ZXh0J10sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJvY2VzcyByZW1vdGUgY29udGV4dCBmcm9tIEhUVFAgTGluayBIZWFkZXJcbiAgICAgICAgaWYocmVtb3RlQ29udGV4dCkge1xuICAgICAgICAgIGFjdGl2ZUN0eCA9IHByb2Nlc3Nvci5wcm9jZXNzQ29udGV4dChcbiAgICAgICAgICAgIGFjdGl2ZUN0eCwgcmVtb3RlQ29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleHBhbmQgZG9jdW1lbnRcbiAgICAgICAgZXhwYW5kZWQgPSBwcm9jZXNzb3IuZXhwYW5kKFxuICAgICAgICAgIGFjdGl2ZUN0eCwgbnVsbCwgZG9jdW1lbnQsIG9wdGlvbnMsIGZhbHNlKTtcblxuICAgICAgICAvLyBvcHRpbWl6ZSBhd2F5IEBncmFwaCB3aXRoIG5vIG90aGVyIHByb3BlcnRpZXNcbiAgICAgICAgaWYoX2lzT2JqZWN0KGV4cGFuZGVkKSAmJiAoJ0BncmFwaCcgaW4gZXhwYW5kZWQpICYmXG4gICAgICAgICAgT2JqZWN0LmtleXMoZXhwYW5kZWQpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGV4cGFuZGVkID0gZXhwYW5kZWRbJ0BncmFwaCddO1xuICAgICAgICB9IGVsc2UgaWYoZXhwYW5kZWQgPT09IG51bGwpIHtcbiAgICAgICAgICBleHBhbmRlZCA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIHRvIGFuIGFycmF5XG4gICAgICAgIGlmKCFfaXNBcnJheShleHBhbmRlZCkpIHtcbiAgICAgICAgICBleHBhbmRlZCA9IFtleHBhbmRlZF07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZXgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGV4KTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIGV4cGFuZGVkKTtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBKU09OLUxEIGZsYXR0ZW5pbmcuXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0gY3R4IHRoZSBjb250ZXh0IHRvIHVzZSB0byBjb21wYWN0IHRoZSBmbGF0dGVuZWQgb3V0cHV0LCBvciBudWxsLlxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyB0byB1c2U6XG4gKiAgICAgICAgICBbYmFzZV0gdGhlIGJhc2UgSVJJIHRvIHVzZS5cbiAqICAgICAgICAgIFtleHBhbmRDb250ZXh0XSBhIGNvbnRleHQgdG8gZXhwYW5kIHdpdGguXG4gKiAgICAgICAgICBbZG9jdW1lbnRMb2FkZXIodXJsLCBjYWxsYmFjayhlcnIsIHJlbW90ZURvYykpXSB0aGUgZG9jdW1lbnQgbG9hZGVyLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgZmxhdHRlbmVkKSBjYWxsZWQgb25jZSB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcy5cbiAqL1xuanNvbmxkLmZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgY3R4LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybiBqc29ubGQubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjayhuZXcgVHlwZUVycm9yKCdDb3VsZCBub3QgZmxhdHRlbiwgdG9vIGZldyBhcmd1bWVudHMuJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZ2V0IGFyZ3VtZW50c1xuICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH0gZWxzZSBpZih0eXBlb2YgY3R4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBjdHg7XG4gICAgY3R4ID0gbnVsbDtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZighKCdiYXNlJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuYmFzZSA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSA/IGlucHV0IDogJyc7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cblxuICAvLyBleHBhbmQgaW5wdXRcbiAganNvbmxkLmV4cGFuZChpbnB1dCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBfaW5wdXQpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdDb3VsZCBub3QgZXhwYW5kIGlucHV0IGJlZm9yZSBmbGF0dGVuaW5nLicsXG4gICAgICAgICdqc29ubGQuRmxhdHRlbkVycm9yJywge2NhdXNlOiBlcnJ9KSk7XG4gICAgfVxuXG4gICAgdmFyIGZsYXR0ZW5lZDtcbiAgICB0cnkge1xuICAgICAgLy8gZG8gZmxhdHRlbmluZ1xuICAgICAgZmxhdHRlbmVkID0gbmV3IFByb2Nlc3NvcigpLmZsYXR0ZW4oX2lucHV0KTtcbiAgICB9IGNhdGNoKGV4KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXgpO1xuICAgIH1cblxuICAgIGlmKGN0eCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGZsYXR0ZW5lZCk7XG4gICAgfVxuXG4gICAgLy8gY29tcGFjdCByZXN1bHQgKGZvcmNlIEBncmFwaCBvcHRpb24gdG8gdHJ1ZSwgc2tpcCBleHBhbnNpb24pXG4gICAgb3B0aW9ucy5ncmFwaCA9IHRydWU7XG4gICAgb3B0aW9ucy5za2lwRXhwYW5zaW9uID0gdHJ1ZTtcbiAgICBqc29ubGQuY29tcGFjdChmbGF0dGVuZWQsIGN0eCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBjb21wYWN0ZWQpIHtcbiAgICAgIGlmKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgY29tcGFjdCBmbGF0dGVuZWQgb3V0cHV0LicsXG4gICAgICAgICAgJ2pzb25sZC5GbGF0dGVuRXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIGNvbXBhY3RlZCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBKU09OLUxEIGZyYW1pbmcuXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIGlucHV0IHRvIGZyYW1lLlxuICogQHBhcmFtIGZyYW1lIHRoZSBKU09OLUxEIGZyYW1lIHRvIHVzZS5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIGZyYW1pbmcgb3B0aW9ucy5cbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2V4cGFuZENvbnRleHRdIGEgY29udGV4dCB0byBleHBhbmQgd2l0aC5cbiAqICAgICAgICAgIFtlbWJlZF0gZGVmYXVsdCBAZW1iZWQgZmxhZzogJ0BsYXN0JywgJ0BhbHdheXMnLCAnQG5ldmVyJywgJ0BsaW5rJ1xuICogICAgICAgICAgICAoZGVmYXVsdDogJ0BsYXN0JykuXG4gKiAgICAgICAgICBbZXhwbGljaXRdIGRlZmF1bHQgQGV4cGxpY2l0IGZsYWcgKGRlZmF1bHQ6IGZhbHNlKS5cbiAqICAgICAgICAgIFtyZXF1aXJlQWxsXSBkZWZhdWx0IEByZXF1aXJlQWxsIGZsYWcgKGRlZmF1bHQ6IHRydWUpLlxuICogICAgICAgICAgW29taXREZWZhdWx0XSBkZWZhdWx0IEBvbWl0RGVmYXVsdCBmbGFnIChkZWZhdWx0OiBmYWxzZSkuXG4gKiAgICAgICAgICBbZG9jdW1lbnRMb2FkZXIodXJsLCBjYWxsYmFjayhlcnIsIHJlbW90ZURvYykpXSB0aGUgZG9jdW1lbnQgbG9hZGVyLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgZnJhbWVkKSBjYWxsZWQgb25jZSB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcy5cbiAqL1xuanNvbmxkLmZyYW1lID0gZnVuY3Rpb24oaW5wdXQsIGZyYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBqc29ubGQubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjayhuZXcgVHlwZUVycm9yKCdDb3VsZCBub3QgZnJhbWUsIHRvbyBmZXcgYXJndW1lbnRzLicpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGdldCBhcmd1bWVudHNcbiAgaWYodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYoISgnYmFzZScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmJhc2UgPSAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgPyBpbnB1dCA6ICcnO1xuICB9XG4gIGlmKCEoJ2RvY3VtZW50TG9hZGVyJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZG9jdW1lbnRMb2FkZXIgPSBqc29ubGQubG9hZERvY3VtZW50O1xuICB9XG4gIGlmKCEoJ2VtYmVkJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZW1iZWQgPSAnQGxhc3QnO1xuICB9XG4gIG9wdGlvbnMuZXhwbGljaXQgPSBvcHRpb25zLmV4cGxpY2l0IHx8IGZhbHNlO1xuICBpZighKCdyZXF1aXJlQWxsJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMucmVxdWlyZUFsbCA9IHRydWU7XG4gIH1cbiAgb3B0aW9ucy5vbWl0RGVmYXVsdCA9IG9wdGlvbnMub21pdERlZmF1bHQgfHwgZmFsc2U7XG5cbiAganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIC8vIGlmIGZyYW1lIGlzIGEgc3RyaW5nLCBhdHRlbXB0IHRvIGRlcmVmZXJlbmNlIHJlbW90ZSBkb2N1bWVudFxuICAgIGlmKHR5cGVvZiBmcmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBkb25lID0gZnVuY3Rpb24oZXJyLCByZW1vdGVEb2MpIHtcbiAgICAgICAgaWYoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZighcmVtb3RlRG9jLmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAgICdObyByZW1vdGUgZG9jdW1lbnQgZm91bmQgYXQgdGhlIGdpdmVuIFVSTC4nLFxuICAgICAgICAgICAgICAnanNvbmxkLk51bGxSZW1vdGVEb2N1bWVudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0eXBlb2YgcmVtb3RlRG9jLmRvY3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVtb3RlRG9jLmRvY3VtZW50ID0gSlNPTi5wYXJzZShyZW1vdGVEb2MuZG9jdW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChleCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAnQ291bGQgbm90IHJldHJpZXZlIGEgSlNPTi1MRCBkb2N1bWVudCBmcm9tIHRoZSBVUkwuIFVSTCAnICtcbiAgICAgICAgICAgICdkZXJlZmVyZW5jaW5nIG5vdCBpbXBsZW1lbnRlZC4nLCAnanNvbmxkLkxvYWREb2N1bWVudEVycm9yJywge1xuICAgICAgICAgICAgICBjb2RlOiAnbG9hZGluZyBkb2N1bWVudCBmYWlsZWQnLFxuICAgICAgICAgICAgICBjYXVzZTogZXgsXG4gICAgICAgICAgICAgIHJlbW90ZURvYzogcmVtb3RlRG9jXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGRvRnJhbWUocmVtb3RlRG9jKTtcbiAgICAgIH07XG4gICAgICB2YXIgcHJvbWlzZSA9IG9wdGlvbnMuZG9jdW1lbnRMb2FkZXIoZnJhbWUsIGRvbmUpO1xuICAgICAgaWYocHJvbWlzZSAmJiAndGhlbicgaW4gcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlLnRoZW4oZG9uZS5iaW5kKG51bGwsIG51bGwpLCBkb25lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbm90aGluZyB0byBsb2FkXG4gICAgZG9GcmFtZSh7Y29udGV4dFVybDogbnVsbCwgZG9jdW1lbnRVcmw6IG51bGwsIGRvY3VtZW50OiBmcmFtZX0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBkb0ZyYW1lKHJlbW90ZUZyYW1lKSB7XG4gICAgLy8gcHJlc2VydmUgZnJhbWUgY29udGV4dCBhbmQgYWRkIGFueSBMaW5rIGhlYWRlciBjb250ZXh0XG4gICAgdmFyIGZyYW1lID0gcmVtb3RlRnJhbWUuZG9jdW1lbnQ7XG4gICAgdmFyIGN0eDtcbiAgICBpZihmcmFtZSkge1xuICAgICAgY3R4ID0gZnJhbWVbJ0Bjb250ZXh0J107XG4gICAgICBpZihyZW1vdGVGcmFtZS5jb250ZXh0VXJsKSB7XG4gICAgICAgIGlmKCFjdHgpIHtcbiAgICAgICAgICBjdHggPSByZW1vdGVGcmFtZS5jb250ZXh0VXJsO1xuICAgICAgICB9IGVsc2UgaWYoX2lzQXJyYXkoY3R4KSkge1xuICAgICAgICAgIGN0eC5wdXNoKHJlbW90ZUZyYW1lLmNvbnRleHRVcmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eCA9IFtjdHgsIHJlbW90ZUZyYW1lLmNvbnRleHRVcmxdO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lWydAY29udGV4dCddID0gY3R4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4ID0gY3R4IHx8IHt9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjdHggPSB7fTtcbiAgICB9XG5cbiAgICAvLyBleHBhbmQgaW5wdXRcbiAgICBqc29ubGQuZXhwYW5kKGlucHV0LCBvcHRpb25zLCBmdW5jdGlvbihlcnIsIGV4cGFuZGVkKSB7XG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnQ291bGQgbm90IGV4cGFuZCBpbnB1dCBiZWZvcmUgZnJhbWluZy4nLFxuICAgICAgICAgICdqc29ubGQuRnJhbWVFcnJvcicsIHtjYXVzZTogZXJyfSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBleHBhbmQgZnJhbWVcbiAgICAgIHZhciBvcHRzID0gX2Nsb25lKG9wdGlvbnMpO1xuICAgICAgb3B0cy5pc0ZyYW1lID0gdHJ1ZTtcbiAgICAgIG9wdHMua2VlcEZyZWVGbG9hdGluZ05vZGVzID0gdHJ1ZTtcbiAgICAgIGpzb25sZC5leHBhbmQoZnJhbWUsIG9wdHMsIGZ1bmN0aW9uKGVyciwgZXhwYW5kZWRGcmFtZSkge1xuICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICAgJ0NvdWxkIG5vdCBleHBhbmQgZnJhbWUgYmVmb3JlIGZyYW1pbmcuJyxcbiAgICAgICAgICAgICdqc29ubGQuRnJhbWVFcnJvcicsIHtjYXVzZTogZXJyfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZyYW1lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBkbyBmcmFtaW5nXG4gICAgICAgICAgZnJhbWVkID0gbmV3IFByb2Nlc3NvcigpLmZyYW1lKGV4cGFuZGVkLCBleHBhbmRlZEZyYW1lLCBvcHRzKTtcbiAgICAgICAgfSBjYXRjaChleCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21wYWN0IHJlc3VsdCAoZm9yY2UgQGdyYXBoIG9wdGlvbiB0byB0cnVlLCBza2lwIGV4cGFuc2lvbixcbiAgICAgICAgLy8gY2hlY2sgZm9yIGxpbmtlZCBlbWJlZHMpXG4gICAgICAgIG9wdHMuZ3JhcGggPSB0cnVlO1xuICAgICAgICBvcHRzLnNraXBFeHBhbnNpb24gPSB0cnVlO1xuICAgICAgICBvcHRzLmxpbmsgPSB7fTtcbiAgICAgICAganNvbmxkLmNvbXBhY3QoZnJhbWVkLCBjdHgsIG9wdHMsIGZ1bmN0aW9uKGVyciwgY29tcGFjdGVkLCBjdHgpIHtcbiAgICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAgICdDb3VsZCBub3QgY29tcGFjdCBmcmFtZWQgb3V0cHV0LicsXG4gICAgICAgICAgICAgICdqc29ubGQuRnJhbWVFcnJvcicsIHtjYXVzZTogZXJyfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBnZXQgZ3JhcGggYWxpYXNcbiAgICAgICAgICB2YXIgZ3JhcGggPSBfY29tcGFjdElyaShjdHgsICdAZ3JhcGgnKTtcbiAgICAgICAgICAvLyByZW1vdmUgQHByZXNlcnZlIGZyb20gcmVzdWx0c1xuICAgICAgICAgIG9wdHMubGluayA9IHt9O1xuICAgICAgICAgIGNvbXBhY3RlZFtncmFwaF0gPSBfcmVtb3ZlUHJlc2VydmUoY3R4LCBjb21wYWN0ZWRbZ3JhcGhdLCBvcHRzKTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBjb21wYWN0ZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqICoqRXhwZXJpbWVudGFsKipcbiAqXG4gKiBMaW5rcyBhIEpTT04tTEQgZG9jdW1lbnQncyBub2RlcyBpbiBtZW1vcnkuXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIGRvY3VtZW50IHRvIGxpbmsuXG4gKiBAcGFyYW0gY3R4IHRoZSBKU09OLUxEIGNvbnRleHQgdG8gYXBwbHkuXG4gKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2V4cGFuZENvbnRleHRdIGEgY29udGV4dCB0byBleHBhbmQgd2l0aC5cbiAqICAgICAgICAgIFtkb2N1bWVudExvYWRlcih1cmwsIGNhbGxiYWNrKGVyciwgcmVtb3RlRG9jKSldIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBsaW5rZWQpIGNhbGxlZCBvbmNlIHRoZSBvcGVyYXRpb24gY29tcGxldGVzLlxuICovXG5qc29ubGQubGluayA9IGZ1bmN0aW9uKGlucHV0LCBjdHgsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIC8vIEFQSSBtYXRjaGVzIHJ1bm5pbmcgZnJhbWUgd2l0aCBhIHdpbGRjYXJkIGZyYW1lIGFuZCBlbWJlZDogJ0BsaW5rJ1xuICAvLyBnZXQgYXJndW1lbnRzXG4gIHZhciBmcmFtZSA9IHt9O1xuICBpZihjdHgpIHtcbiAgICBmcmFtZVsnQGNvbnRleHQnXSA9IGN0eDtcbiAgfVxuICBmcmFtZVsnQGVtYmVkJ10gPSAnQGxpbmsnO1xuICBqc29ubGQuZnJhbWUoaW5wdXQsIGZyYW1lLCBvcHRpb25zLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqICoqRGVwcmVjYXRlZCoqXG4gKlxuICogUGVyZm9ybXMgSlNPTi1MRCBvYmplY3RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIGRvY3VtZW50IHRvIG9iamVjdGlmeS5cbiAqIEBwYXJhbSBjdHggdGhlIEpTT04tTEQgY29udGV4dCB0byBhcHBseS5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2Jhc2VdIHRoZSBiYXNlIElSSSB0byB1c2UuXG4gKiAgICAgICAgICBbZXhwYW5kQ29udGV4dF0gYSBjb250ZXh0IHRvIGV4cGFuZCB3aXRoLlxuICogICAgICAgICAgW2RvY3VtZW50TG9hZGVyKHVybCwgY2FsbGJhY2soZXJyLCByZW1vdGVEb2MpKV0gdGhlIGRvY3VtZW50IGxvYWRlci5cbiAqIEBwYXJhbSBjYWxsYmFjayhlcnIsIGxpbmtlZCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmpzb25sZC5vYmplY3RpZnkgPSBmdW5jdGlvbihpbnB1dCwgY3R4LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZighKCdiYXNlJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuYmFzZSA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSA/IGlucHV0IDogJyc7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cblxuICAvLyBleHBhbmQgaW5wdXRcbiAganNvbmxkLmV4cGFuZChpbnB1dCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBfaW5wdXQpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdDb3VsZCBub3QgZXhwYW5kIGlucHV0IGJlZm9yZSBsaW5raW5nLicsXG4gICAgICAgICdqc29ubGQuTGlua0Vycm9yJywge2NhdXNlOiBlcnJ9KSk7XG4gICAgfVxuXG4gICAgdmFyIGZsYXR0ZW5lZDtcbiAgICB0cnkge1xuICAgICAgLy8gZmxhdHRlbiB0aGUgZ3JhcGhcbiAgICAgIGZsYXR0ZW5lZCA9IG5ldyBQcm9jZXNzb3IoKS5mbGF0dGVuKF9pbnB1dCk7XG4gICAgfSBjYXRjaChleCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGV4KTtcbiAgICB9XG5cbiAgICAvLyBjb21wYWN0IHJlc3VsdCAoZm9yY2UgQGdyYXBoIG9wdGlvbiB0byB0cnVlLCBza2lwIGV4cGFuc2lvbilcbiAgICBvcHRpb25zLmdyYXBoID0gdHJ1ZTtcbiAgICBvcHRpb25zLnNraXBFeHBhbnNpb24gPSB0cnVlO1xuICAgIGpzb25sZC5jb21wYWN0KGZsYXR0ZW5lZCwgY3R4LCBvcHRpb25zLCBmdW5jdGlvbihlcnIsIGNvbXBhY3RlZCwgY3R4KSB7XG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnQ291bGQgbm90IGNvbXBhY3QgZmxhdHRlbmVkIG91dHB1dCBiZWZvcmUgbGlua2luZy4nLFxuICAgICAgICAgICdqc29ubGQuTGlua0Vycm9yJywge2NhdXNlOiBlcnJ9KSk7XG4gICAgICB9XG4gICAgICAvLyBnZXQgZ3JhcGggYWxpYXNcbiAgICAgIHZhciBncmFwaCA9IF9jb21wYWN0SXJpKGN0eCwgJ0BncmFwaCcpO1xuICAgICAgdmFyIHRvcCA9IGNvbXBhY3RlZFtncmFwaF1bMF07XG5cbiAgICAgIHZhciByZWN1cnNlID0gZnVuY3Rpb24oc3ViamVjdCkge1xuICAgICAgICAvLyBjYW4ndCByZXBsYWNlIGp1c3QgYSBzdHJpbmdcbiAgICAgICAgaWYoIV9pc09iamVjdChzdWJqZWN0KSAmJiAhX2lzQXJyYXkoc3ViamVjdCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBib3R0b20gb3V0IHJlY3Vyc2lvbiBvbiByZS12aXNpdFxuICAgICAgICBpZihfaXNPYmplY3Qoc3ViamVjdCkpIHtcbiAgICAgICAgICBpZihyZWN1cnNlLnZpc2l0ZWRbc3ViamVjdFsnQGlkJ11dKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY3Vyc2UudmlzaXRlZFtzdWJqZWN0WydAaWQnXV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZWFjaCBhcnJheSBlbGVtZW50ICpvciogb2JqZWN0IGtleVxuICAgICAgICBmb3IodmFyIGsgaW4gc3ViamVjdCkge1xuICAgICAgICAgIHZhciBvYmogPSBzdWJqZWN0W2tdO1xuICAgICAgICAgIHZhciBpc2lkID0gKGpzb25sZC5nZXRDb250ZXh0VmFsdWUoY3R4LCBrLCAnQHR5cGUnKSA9PT0gJ0BpZCcpO1xuXG4gICAgICAgICAgLy8gY2FuJ3QgcmVwbGFjZSBhIG5vbi1vYmplY3Qgb3Igbm9uLWFycmF5IHVubGVzcyBpdCdzIGFuIEBpZFxuICAgICAgICAgIGlmKCFfaXNBcnJheShvYmopICYmICFfaXNPYmplY3Qob2JqKSAmJiAhaXNpZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoX2lzU3RyaW5nKG9iaikgJiYgaXNpZCkge1xuICAgICAgICAgICAgc3ViamVjdFtrXSA9IG9iaiA9IHRvcFtvYmpdO1xuICAgICAgICAgICAgcmVjdXJzZShvYmopO1xuICAgICAgICAgIH0gZWxzZSBpZihfaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGlmKF9pc1N0cmluZyhvYmpbaV0pICYmIGlzaWQpIHtcbiAgICAgICAgICAgICAgICBvYmpbaV0gPSB0b3Bbb2JqW2ldXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKF9pc09iamVjdChvYmpbaV0pICYmICdAaWQnIGluIG9ialtpXSkge1xuICAgICAgICAgICAgICAgIG9ialtpXSA9IHRvcFtvYmpbaV1bJ0BpZCddXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZWN1cnNlKG9ialtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKF9pc09iamVjdChvYmopKSB7XG4gICAgICAgICAgICB2YXIgc2lkID0gb2JqWydAaWQnXTtcbiAgICAgICAgICAgIHN1YmplY3Rba10gPSBvYmogPSB0b3Bbc2lkXTtcbiAgICAgICAgICAgIHJlY3Vyc2Uob2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZWN1cnNlLnZpc2l0ZWQgPSB7fTtcbiAgICAgIHJlY3Vyc2UodG9wKTtcblxuICAgICAgY29tcGFjdGVkLm9mX3R5cGUgPSB7fTtcbiAgICAgIGZvcih2YXIgcyBpbiB0b3ApIHtcbiAgICAgICAgaWYoISgnQHR5cGUnIGluIHRvcFtzXSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZXMgPSB0b3Bbc11bJ0B0eXBlJ107XG4gICAgICAgIGlmKCFfaXNBcnJheSh0eXBlcykpIHtcbiAgICAgICAgICB0eXBlcyA9IFt0eXBlc107XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciB0ID0gMDsgdCA8IHR5cGVzLmxlbmd0aDsgKyt0KSB7XG4gICAgICAgICAgaWYoISh0eXBlc1t0XSBpbiBjb21wYWN0ZWQub2ZfdHlwZSkpIHtcbiAgICAgICAgICAgIGNvbXBhY3RlZC5vZl90eXBlW3R5cGVzW3RdXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb21wYWN0ZWQub2ZfdHlwZVt0eXBlc1t0XV0ucHVzaCh0b3Bbc10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBjb21wYWN0ZWQpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgUkRGIGRhdGFzZXQgbm9ybWFsaXphdGlvbiBvbiB0aGUgZ2l2ZW4gaW5wdXQuIFRoZSBpbnB1dCBpcyBKU09OLUxEXG4gKiB1bmxlc3MgdGhlICdpbnB1dEZvcm1hdCcgb3B0aW9uIGlzIHVzZWQuIFRoZSBvdXRwdXQgaXMgYW4gUkRGIGRhdGFzZXRcbiAqIHVubGVzcyB0aGUgJ2Zvcm1hdCcgb3B0aW9uIGlzIHVzZWQuXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBpbnB1dCB0byBub3JtYWxpemUgYXMgSlNPTi1MRCBvciBhcyBhIGZvcm1hdCBzcGVjaWZpZWQgYnlcbiAqICAgICAgICAgIHRoZSAnaW5wdXRGb3JtYXQnIG9wdGlvbi5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2FsZ29yaXRobV0gdGhlIG5vcm1hbGl6YXRpb24gYWxnb3JpdGhtIHRvIHVzZSwgYFVSRE5BMjAxNWAgb3JcbiAqICAgICAgICAgICAgYFVSR05BMjAxMmAgKGRlZmF1bHQ6IGBVUkdOQTIwMTJgKS5cbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2V4cGFuZENvbnRleHRdIGEgY29udGV4dCB0byBleHBhbmQgd2l0aC5cbiAqICAgICAgICAgIFtpbnB1dEZvcm1hdF0gdGhlIGZvcm1hdCBpZiBpbnB1dCBpcyBub3QgSlNPTi1MRDpcbiAqICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL25xdWFkcycgZm9yIE4tUXVhZHMuXG4gKiAgICAgICAgICBbZm9ybWF0XSB0aGUgZm9ybWF0IGlmIG91dHB1dCBpcyBhIHN0cmluZzpcbiAqICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL25xdWFkcycgZm9yIE4tUXVhZHMuXG4gKiAgICAgICAgICBbZG9jdW1lbnRMb2FkZXIodXJsLCBjYWxsYmFjayhlcnIsIHJlbW90ZURvYykpXSB0aGUgZG9jdW1lbnQgbG9hZGVyLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgbm9ybWFsaXplZCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmpzb25sZC5ub3JtYWxpemUgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobmV3IFR5cGVFcnJvcignQ291bGQgbm90IG5vcm1hbGl6ZSwgdG9vIGZldyBhcmd1bWVudHMuJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZ2V0IGFyZ3VtZW50c1xuICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZighKCdhbGdvcml0aG0nIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5hbGdvcml0aG0gPSAnVVJHTkEyMDEyJztcbiAgfVxuICBpZighKCdiYXNlJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuYmFzZSA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSA/IGlucHV0IDogJyc7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cblxuICBpZignaW5wdXRGb3JtYXQnIGluIG9wdGlvbnMpIHtcbiAgICBpZihvcHRpb25zLmlucHV0Rm9ybWF0ICE9PSAnYXBwbGljYXRpb24vbnF1YWRzJykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ1Vua25vd24gbm9ybWFsaXphdGlvbiBpbnB1dCBmb3JtYXQuJyxcbiAgICAgICAgJ2pzb25sZC5Ob3JtYWxpemVFcnJvcicpKTtcbiAgICB9XG4gICAgdmFyIHBhcnNlZElucHV0ID0gX3BhcnNlTlF1YWRzKGlucHV0KTtcbiAgICAvLyBkbyBub3JtYWxpemF0aW9uXG4gICAgbmV3IFByb2Nlc3NvcigpLm5vcm1hbGl6ZShwYXJzZWRJbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIC8vIGNvbnZlcnQgdG8gUkRGIGRhdGFzZXQgdGhlbiBkbyBub3JtYWxpemF0aW9uXG4gICAgdmFyIG9wdHMgPSBfY2xvbmUob3B0aW9ucyk7XG4gICAgZGVsZXRlIG9wdHMuZm9ybWF0O1xuICAgIG9wdHMucHJvZHVjZUdlbmVyYWxpemVkUmRmID0gZmFsc2U7XG4gICAganNvbmxkLnRvUkRGKGlucHV0LCBvcHRzLCBmdW5jdGlvbihlcnIsIGRhdGFzZXQpIHtcbiAgICAgIGlmKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgY29udmVydCBpbnB1dCB0byBSREYgZGF0YXNldCBiZWZvcmUgbm9ybWFsaXphdGlvbi4nLFxuICAgICAgICAgICdqc29ubGQuTm9ybWFsaXplRXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICAgIH1cbiAgICAgIC8vIGRvIG5vcm1hbGl6YXRpb25cbiAgICAgIG5ldyBQcm9jZXNzb3IoKS5ub3JtYWxpemUoZGF0YXNldCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIFJERiBkYXRhc2V0IHRvIEpTT04tTEQuXG4gKlxuICogQHBhcmFtIGRhdGFzZXQgYSBzZXJpYWxpemVkIHN0cmluZyBvZiBSREYgaW4gYSBmb3JtYXQgc3BlY2lmaWVkIGJ5IHRoZVxuICogICAgICAgICAgZm9ybWF0IG9wdGlvbiBvciBhbiBSREYgZGF0YXNldCB0byBjb252ZXJ0LlxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyB0byB1c2U6XG4gKiAgICAgICAgICBbZm9ybWF0XSB0aGUgZm9ybWF0IGlmIGRhdGFzZXQgcGFyYW0gbXVzdCBmaXJzdCBiZSBwYXJzZWQ6XG4gKiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9ucXVhZHMnIGZvciBOLVF1YWRzIChkZWZhdWx0KS5cbiAqICAgICAgICAgIFtyZGZQYXJzZXJdIGEgY3VzdG9tIFJERi1wYXJzZXIgdG8gdXNlIHRvIHBhcnNlIHRoZSBkYXRhc2V0LlxuICogICAgICAgICAgW3VzZVJkZlR5cGVdIHRydWUgdG8gdXNlIHJkZjp0eXBlLCBmYWxzZSB0byB1c2UgQHR5cGVcbiAqICAgICAgICAgICAgKGRlZmF1bHQ6IGZhbHNlKS5cbiAqICAgICAgICAgIFt1c2VOYXRpdmVUeXBlc10gdHJ1ZSB0byBjb252ZXJ0IFhTRCB0eXBlcyBpbnRvIG5hdGl2ZSB0eXBlc1xuICogICAgICAgICAgICAoYm9vbGVhbiwgaW50ZWdlciwgZG91YmxlKSwgZmFsc2Ugbm90IHRvIChkZWZhdWx0OiBmYWxzZSkuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBvdXRwdXQpIGNhbGxlZCBvbmNlIHRoZSBvcGVyYXRpb24gY29tcGxldGVzLlxuICovXG5qc29ubGQuZnJvbVJERiA9IGZ1bmN0aW9uKGRhdGFzZXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIGpzb25sZC5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBjb252ZXJ0IGZyb20gUkRGLCB0b28gZmV3IGFyZ3VtZW50cy4nKSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBnZXQgYXJndW1lbnRzXG4gIGlmKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmKCEoJ3VzZVJkZlR5cGUnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy51c2VSZGZUeXBlID0gZmFsc2U7XG4gIH1cbiAgaWYoISgndXNlTmF0aXZlVHlwZXMnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy51c2VOYXRpdmVUeXBlcyA9IGZhbHNlO1xuICB9XG5cbiAgaWYoISgnZm9ybWF0JyBpbiBvcHRpb25zKSAmJiBfaXNTdHJpbmcoZGF0YXNldCkpIHtcbiAgICAvLyBzZXQgZGVmYXVsdCBmb3JtYXQgdG8gbnF1YWRzXG4gICAgaWYoISgnZm9ybWF0JyBpbiBvcHRpb25zKSkge1xuICAgICAgb3B0aW9ucy5mb3JtYXQgPSAnYXBwbGljYXRpb24vbnF1YWRzJztcbiAgICB9XG4gIH1cblxuICBqc29ubGQubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgLy8gaGFuZGxlIHNwZWNpYWwgZm9ybWF0XG4gICAgdmFyIHJkZlBhcnNlcjtcbiAgICBpZihvcHRpb25zLmZvcm1hdCkge1xuICAgICAgLy8gY2hlY2sgc3VwcG9ydGVkIGZvcm1hdHNcbiAgICAgIHJkZlBhcnNlciA9IG9wdGlvbnMucmRmUGFyc2VyIHx8IF9yZGZQYXJzZXJzW29wdGlvbnMuZm9ybWF0XTtcbiAgICAgIGlmKCFyZGZQYXJzZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnVW5rbm93biBpbnB1dCBmb3JtYXQuJyxcbiAgICAgICAgICAnanNvbmxkLlVua25vd25Gb3JtYXQnLCB7Zm9ybWF0OiBvcHRpb25zLmZvcm1hdH0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm8tb3AgcGFyc2VyLCBhc3N1bWUgZGF0YXNldCBhbHJlYWR5IHBhcnNlZFxuICAgICAgcmRmUGFyc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkYXRhc2V0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgY2FsbGJhY2tDYWxsZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgLy8gcmRmIHBhcnNlciBtYXkgYmUgYXN5bmMgb3Igc3luYywgYWx3YXlzIHBhc3MgY2FsbGJhY2tcbiAgICAgIGRhdGFzZXQgPSByZGZQYXJzZXIoZGF0YXNldCwgZnVuY3Rpb24oZXJyLCBkYXRhc2V0KSB7XG4gICAgICAgIGNhbGxiYWNrQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaWYoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZnJvbVJERihkYXRhc2V0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGlmKCFjYWxsYmFja0NhbGxlZCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICAvLyBoYW5kbGUgc3luY2hyb25vdXMgb3IgcHJvbWlzZS1iYXNlZCBwYXJzZXJcbiAgICBpZihkYXRhc2V0KSB7XG4gICAgICAvLyBpZiBkYXRhc2V0IGlzIGFjdHVhbGx5IGEgcHJvbWlzZVxuICAgICAgaWYoJ3RoZW4nIGluIGRhdGFzZXQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFzZXQudGhlbihmdW5jdGlvbihkYXRhc2V0KSB7XG4gICAgICAgICAgZnJvbVJERihkYXRhc2V0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIHBhcnNlciBpcyBzeW5jaHJvbm91c1xuICAgICAgZnJvbVJERihkYXRhc2V0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbVJERihkYXRhc2V0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgLy8gY29udmVydCBmcm9tIFJERlxuICAgICAgbmV3IFByb2Nlc3NvcigpLmZyb21SREYoZGF0YXNldCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIE91dHB1dHMgdGhlIFJERiBkYXRhc2V0IGZvdW5kIGluIHRoZSBnaXZlbiBKU09OLUxEIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIEpTT04tTEQgaW5wdXQuXG4gKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2V4cGFuZENvbnRleHRdIGEgY29udGV4dCB0byBleHBhbmQgd2l0aC5cbiAqICAgICAgICAgIFtmb3JtYXRdIHRoZSBmb3JtYXQgdG8gdXNlIHRvIG91dHB1dCBhIHN0cmluZzpcbiAqICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL25xdWFkcycgZm9yIE4tUXVhZHMuXG4gKiAgICAgICAgICBbcHJvZHVjZUdlbmVyYWxpemVkUmRmXSB0cnVlIHRvIG91dHB1dCBnZW5lcmFsaXplZCBSREYsIGZhbHNlXG4gKiAgICAgICAgICAgIHRvIHByb2R1Y2Ugb25seSBzdGFuZGFyZCBSREYgKGRlZmF1bHQ6IGZhbHNlKS5cbiAqICAgICAgICAgIFtkb2N1bWVudExvYWRlcih1cmwsIGNhbGxiYWNrKGVyciwgcmVtb3RlRG9jKSldIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBkYXRhc2V0KSBjYWxsZWQgb25jZSB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcy5cbiAqL1xuanNvbmxkLnRvUkRGID0gZnVuY3Rpb24oaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIGpzb25sZC5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBjb252ZXJ0IHRvIFJERiwgdG9vIGZldyBhcmd1bWVudHMuJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZ2V0IGFyZ3VtZW50c1xuICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZighKCdiYXNlJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuYmFzZSA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSA/IGlucHV0IDogJyc7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cblxuICAvLyBleHBhbmQgaW5wdXRcbiAganNvbmxkLmV4cGFuZChpbnB1dCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBleHBhbmRlZCkge1xuICAgIGlmKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0NvdWxkIG5vdCBleHBhbmQgaW5wdXQgYmVmb3JlIHNlcmlhbGl6YXRpb24gdG8gUkRGLicsXG4gICAgICAgICdqc29ubGQuUmRmRXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YXNldDtcbiAgICB0cnkge1xuICAgICAgLy8gb3V0cHV0IFJERiBkYXRhc2V0XG4gICAgICBkYXRhc2V0ID0gUHJvY2Vzc29yLnByb3RvdHlwZS50b1JERihleHBhbmRlZCwgb3B0aW9ucyk7XG4gICAgICBpZihvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICBpZihvcHRpb25zLmZvcm1hdCA9PT0gJ2FwcGxpY2F0aW9uL25xdWFkcycpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgX3RvTlF1YWRzKGRhdGFzZXQpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgJ1Vua25vd24gb3V0cHV0IGZvcm1hdC4nLFxuICAgICAgICAgICdqc29ubGQuVW5rbm93bkZvcm1hdCcsIHtmb3JtYXQ6IG9wdGlvbnMuZm9ybWF0fSk7XG4gICAgICB9XG4gICAgfSBjYXRjaChleCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGV4KTtcbiAgICB9XG4gICAgY2FsbGJhY2sobnVsbCwgZGF0YXNldCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiAqKkV4cGVyaW1lbnRhbCoqXG4gKlxuICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlIG5vZGVzIGluIHRoZSBnaXZlbiBKU09OLUxEIGlucHV0IGludG8gYSBtYXAgb2ZcbiAqIG5vZGUgSUQgPT4gbm9kZS5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIEpTT04tTEQgaW5wdXQuXG4gKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAqICAgICAgICAgIFtiYXNlXSB0aGUgYmFzZSBJUkkgdG8gdXNlLlxuICogICAgICAgICAgW2V4cGFuZENvbnRleHRdIGEgY29udGV4dCB0byBleHBhbmQgd2l0aC5cbiAqICAgICAgICAgIFtpc3N1ZXJdIGEganNvbmxkLklkZW50aWZpZXJJc3N1ZXIgdG8gdXNlIHRvIGxhYmVsIGJsYW5rIG5vZGVzLlxuICogICAgICAgICAgW25hbWVyXSAoZGVwcmVjYXRlZClcbiAqICAgICAgICAgIFtkb2N1bWVudExvYWRlcih1cmwsIGNhbGxiYWNrKGVyciwgcmVtb3RlRG9jKSldIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBub2RlTWFwKSBjYWxsZWQgb25jZSB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcy5cbiAqL1xuanNvbmxkLmNyZWF0ZU5vZGVNYXAgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobmV3IFR5cGVFcnJvcignQ291bGQgbm90IGNyZWF0ZSBub2RlIG1hcCwgdG9vIGZldyBhcmd1bWVudHMuJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZ2V0IGFyZ3VtZW50c1xuICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZighKCdiYXNlJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuYmFzZSA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSA/IGlucHV0IDogJyc7XG4gIH1cbiAgaWYoISgnZG9jdW1lbnRMb2FkZXInIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kb2N1bWVudExvYWRlciA9IGpzb25sZC5sb2FkRG9jdW1lbnQ7XG4gIH1cblxuICAvLyBleHBhbmQgaW5wdXRcbiAganNvbmxkLmV4cGFuZChpbnB1dCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBfaW5wdXQpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdDb3VsZCBub3QgZXhwYW5kIGlucHV0IGJlZm9yZSBjcmVhdGluZyBub2RlIG1hcC4nLFxuICAgICAgICAnanNvbmxkLkNyZWF0ZU5vZGVNYXBFcnJvcicsIHtjYXVzZTogZXJyfSkpO1xuICAgIH1cblxuICAgIHZhciBub2RlTWFwO1xuICAgIHRyeSB7XG4gICAgICBub2RlTWFwID0gbmV3IFByb2Nlc3NvcigpLmNyZWF0ZU5vZGVNYXAoX2lucHV0LCBvcHRpb25zKTtcbiAgICB9IGNhdGNoKGV4KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXgpO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKG51bGwsIG5vZGVNYXApO1xuICB9KTtcbn07XG5cbi8qKlxuICogKipFeHBlcmltZW50YWwqKlxuICpcbiAqIE1lcmdlcyB0d28gb3IgbW9yZSBKU09OLUxEIGRvY3VtZW50cyBpbnRvIGEgc2luZ2xlIGZsYXR0ZW5lZCBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0gZG9jcyB0aGUgSlNPTi1MRCBkb2N1bWVudHMgdG8gbWVyZ2UgdG9nZXRoZXIuXG4gKiBAcGFyYW0gY3R4IHRoZSBjb250ZXh0IHRvIHVzZSB0byBjb21wYWN0IHRoZSBtZXJnZWQgcmVzdWx0LCBvciBudWxsLlxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyB0byB1c2U6XG4gKiAgICAgICAgICBbYmFzZV0gdGhlIGJhc2UgSVJJIHRvIHVzZS5cbiAqICAgICAgICAgIFtleHBhbmRDb250ZXh0XSBhIGNvbnRleHQgdG8gZXhwYW5kIHdpdGguXG4gKiAgICAgICAgICBbaXNzdWVyXSBhIGpzb25sZC5JZGVudGlmaWVySXNzdWVyIHRvIHVzZSB0byBsYWJlbCBibGFuayBub2Rlcy5cbiAqICAgICAgICAgIFtuYW1lcl0gKGRlcHJlY2F0ZWQpLlxuICogICAgICAgICAgW21lcmdlTm9kZXNdIHRydWUgdG8gbWVyZ2UgcHJvcGVydGllcyBmb3Igbm9kZXMgd2l0aCB0aGUgc2FtZSBJRCxcbiAqICAgICAgICAgICAgZmFsc2UgdG8gaWdub3JlIG5ldyBwcm9wZXJ0aWVzIGZvciBub2RlcyB3aXRoIHRoZSBzYW1lIElEIG9uY2VcbiAqICAgICAgICAgICAgdGhlIElEIGhhcyBiZWVuIGRlZmluZWQ7IG5vdGUgdGhhdCB0aGlzIG1heSBub3QgcHJldmVudCBtZXJnaW5nXG4gKiAgICAgICAgICAgIG5ldyBwcm9wZXJ0aWVzIHdoZXJlIGEgbm9kZSBpcyBpbiB0aGUgYG9iamVjdGAgcG9zaXRpb25cbiAqICAgICAgICAgICAgKGRlZmF1bHQ6IHRydWUpLlxuICogICAgICAgICAgW2RvY3VtZW50TG9hZGVyKHVybCwgY2FsbGJhY2soZXJyLCByZW1vdGVEb2MpKV0gdGhlIGRvY3VtZW50IGxvYWRlci5cbiAqIEBwYXJhbSBjYWxsYmFjayhlcnIsIG1lcmdlZCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmpzb25sZC5tZXJnZSA9IGZ1bmN0aW9uKGRvY3MsIGN0eCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobmV3IFR5cGVFcnJvcignQ291bGQgbm90IG1lcmdlLCB0b28gZmV3IGFyZ3VtZW50cy4nKSk7XG4gICAgfSk7XG4gIH1cbiAgaWYoIV9pc0FycmF5KGRvY3MpKSB7XG4gICAgcmV0dXJuIGpzb25sZC5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBtZXJnZSwgXCJkb2NzXCIgbXVzdCBiZSBhbiBhcnJheS4nKSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBnZXQgYXJndW1lbnRzXG4gIGlmKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSBlbHNlIGlmKHR5cGVvZiBjdHggPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGN0eDtcbiAgICBjdHggPSBudWxsO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBleHBhbmQgYWxsIGRvY3VtZW50c1xuICB2YXIgZXhwYW5kZWQgPSBbXTtcbiAgdmFyIGVycm9yID0gbnVsbDtcbiAgdmFyIGNvdW50ID0gZG9jcy5sZW5ndGg7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBkb2NzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBmb3IodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICBvcHRzW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuICAgIGpzb25sZC5leHBhbmQoZG9jc1tpXSwgb3B0cywgZXhwYW5kQ29tcGxldGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kQ29tcGxldGUoZXJyLCBfaW5wdXQpIHtcbiAgICBpZihlcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZihlcnIpIHtcbiAgICAgIGVycm9yID0gZXJyO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0NvdWxkIG5vdCBleHBhbmQgaW5wdXQgYmVmb3JlIGZsYXR0ZW5pbmcuJyxcbiAgICAgICAgJ2pzb25sZC5GbGF0dGVuRXJyb3InLCB7Y2F1c2U6IGVycn0pKTtcbiAgICB9XG4gICAgZXhwYW5kZWQucHVzaChfaW5wdXQpO1xuICAgIGlmKC0tY291bnQgPT09IDApIHtcbiAgICAgIG1lcmdlKGV4cGFuZGVkKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZShleHBhbmRlZCkge1xuICAgIHZhciBtZXJnZU5vZGVzID0gdHJ1ZTtcbiAgICBpZignbWVyZ2VOb2RlcycgaW4gb3B0aW9ucykge1xuICAgICAgbWVyZ2VOb2RlcyA9IG9wdGlvbnMubWVyZ2VOb2RlcztcbiAgICB9XG5cbiAgICB2YXIgaXNzdWVyID0gb3B0aW9ucy5uYW1lciB8fCBvcHRpb25zLmlzc3VlciB8fCBuZXcgSWRlbnRpZmllcklzc3VlcignXzpiJyk7XG4gICAgdmFyIGdyYXBocyA9IHsnQGRlZmF1bHQnOiB7fX07XG5cbiAgICB2YXIgZGVmYXVsdEdyYXBoO1xuICAgIHRyeSB7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZXhwYW5kZWQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgLy8gdW5pcXVlbHkgcmVsYWJlbCBibGFuayBub2Rlc1xuICAgICAgICB2YXIgZG9jID0gZXhwYW5kZWRbaV07XG4gICAgICAgIGRvYyA9IGpzb25sZC5yZWxhYmVsQmxhbmtOb2Rlcyhkb2MsIHtcbiAgICAgICAgICBpc3N1ZXI6IG5ldyBJZGVudGlmaWVySXNzdWVyKCdfOmInICsgaSArICctJylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIG5vZGVzIHRvIHRoZSBzaGFyZWQgbm9kZSBtYXAgZ3JhcGhzIGlmIG1lcmdpbmcgbm9kZXMsIHRvIGFcbiAgICAgICAgLy8gc2VwYXJhdGUgZ3JhcGggc2V0IGlmIG5vdFxuICAgICAgICB2YXIgX2dyYXBocyA9IChtZXJnZU5vZGVzIHx8IGkgPT09IDApID8gZ3JhcGhzIDogeydAZGVmYXVsdCc6IHt9fTtcbiAgICAgICAgX2NyZWF0ZU5vZGVNYXAoZG9jLCBfZ3JhcGhzLCAnQGRlZmF1bHQnLCBpc3N1ZXIpO1xuXG4gICAgICAgIGlmKF9ncmFwaHMgIT09IGdyYXBocykge1xuICAgICAgICAgIC8vIG1lcmdlIGRvY3VtZW50IGdyYXBocyBidXQgZG9uJ3QgbWVyZ2UgZXhpc3Rpbmcgbm9kZXNcbiAgICAgICAgICBmb3IodmFyIGdyYXBoTmFtZSBpbiBfZ3JhcGhzKSB7XG4gICAgICAgICAgICB2YXIgX25vZGVNYXAgPSBfZ3JhcGhzW2dyYXBoTmFtZV07XG4gICAgICAgICAgICBpZighKGdyYXBoTmFtZSBpbiBncmFwaHMpKSB7XG4gICAgICAgICAgICAgIGdyYXBoc1tncmFwaE5hbWVdID0gX25vZGVNYXA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5vZGVNYXAgPSBncmFwaHNbZ3JhcGhOYW1lXTtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIF9ub2RlTWFwKSB7XG4gICAgICAgICAgICAgIGlmKCEoa2V5IGluIG5vZGVNYXApKSB7XG4gICAgICAgICAgICAgICAgbm9kZU1hcFtrZXldID0gX25vZGVNYXBba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBhZGQgYWxsIG5vbi1kZWZhdWx0IGdyYXBocyB0byBkZWZhdWx0IGdyYXBoXG4gICAgICBkZWZhdWx0R3JhcGggPSBfbWVyZ2VOb2RlTWFwcyhncmFwaHMpO1xuICAgIH0gY2F0Y2goZXgpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhleCk7XG4gICAgfVxuXG4gICAgLy8gcHJvZHVjZSBmbGF0dGVuZWQgb3V0cHV0XG4gICAgdmFyIGZsYXR0ZW5lZCA9IFtdO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdEdyYXBoKS5zb3J0KCk7XG4gICAgZm9yKHZhciBraSA9IDA7IGtpIDwga2V5cy5sZW5ndGg7ICsra2kpIHtcbiAgICAgIHZhciBub2RlID0gZGVmYXVsdEdyYXBoW2tleXNba2ldXTtcbiAgICAgIC8vIG9ubHkgYWRkIGZ1bGwgc3ViamVjdHMgdG8gdG9wLWxldmVsXG4gICAgICBpZighX2lzU3ViamVjdFJlZmVyZW5jZShub2RlKSkge1xuICAgICAgICBmbGF0dGVuZWQucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihjdHggPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBmbGF0dGVuZWQpO1xuICAgIH1cblxuICAgIC8vIGNvbXBhY3QgcmVzdWx0IChmb3JjZSBAZ3JhcGggb3B0aW9uIHRvIHRydWUsIHNraXAgZXhwYW5zaW9uKVxuICAgIG9wdGlvbnMuZ3JhcGggPSB0cnVlO1xuICAgIG9wdGlvbnMuc2tpcEV4cGFuc2lvbiA9IHRydWU7XG4gICAganNvbmxkLmNvbXBhY3QoZmxhdHRlbmVkLCBjdHgsIG9wdGlvbnMsIGZ1bmN0aW9uKGVyciwgY29tcGFjdGVkKSB7XG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnQ291bGQgbm90IGNvbXBhY3QgbWVyZ2VkIG91dHB1dC4nLFxuICAgICAgICAgICdqc29ubGQuTWVyZ2VFcnJvcicsIHtjYXVzZTogZXJyfSkpO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgY29tcGFjdGVkKTtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZWxhYmVscyBhbGwgYmxhbmsgbm9kZXMgaW4gdGhlIGdpdmVuIEpTT04tTEQgaW5wdXQuXG4gKlxuICogQHBhcmFtIGlucHV0IHRoZSBKU09OLUxEIGlucHV0LlxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyB0byB1c2U6XG4gKiAgICAgICAgICBbaXNzdWVyXSBhIGpzb25sZC5JZGVudGlmaWVySXNzdWVyIHRvIHVzZSB0byBsYWJlbCBibGFuayBub2Rlcy5cbiAqICAgICAgICAgIFtuYW1lcl0gKGRlcHJlY2F0ZWQpLlxuICovXG5qc29ubGQucmVsYWJlbEJsYW5rTm9kZXMgPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGlzc3VlciA9IG9wdGlvbnMubmFtZXIgfHwgb3B0aW9ucy5pc3N1ZXIgfHwgbmV3IElkZW50aWZpZXJJc3N1ZXIoJ186YicpO1xuICByZXR1cm4gX2xhYmVsQmxhbmtOb2Rlcyhpc3N1ZXIsIGlucHV0KTtcbn07XG5cbi8qKlxuICogUHJlcGVuZHMgYSBiYXNlIElSSSB0byB0aGUgZ2l2ZW4gcmVsYXRpdmUgSVJJLlxuICpcbiAqIEBwYXJhbSBiYXNlIHRoZSBiYXNlIElSSS5cbiAqIEBwYXJhbSBpcmkgdGhlIHJlbGF0aXZlIElSSS5cbiAqXG4gKiBAcmV0dXJuIHRoZSBhYnNvbHV0ZSBJUkkuXG4gKi9cbmpzb25sZC5wcmVwZW5kQmFzZSA9IGZ1bmN0aW9uKGJhc2UsIGlyaSkge1xuICByZXR1cm4gX3ByZXBlbmRCYXNlKGJhc2UsIGlyaSk7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGRvY3VtZW50IGxvYWRlciBmb3IgZXh0ZXJuYWwgZG9jdW1lbnRzLiBJZiB0aGUgZW52aXJvbm1lbnRcbiAqIGlzIG5vZGUuanMsIGEgY2FsbGJhY2stY29udGludWF0aW9uLXN0eWxlIGRvY3VtZW50IGxvYWRlciBpcyB1c2VkOyBvdGhlcndpc2UsXG4gKiBhIHByb21pc2VzLXN0eWxlIGRvY3VtZW50IGxvYWRlciBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB1cmwgdGhlIFVSTCB0byBsb2FkLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgcmVtb3RlRG9jKSBjYWxsZWQgb25jZSB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcyxcbiAqICAgICAgICAgIGlmIHVzaW5nIGEgbm9uLXByb21pc2VzIEFQSS5cbiAqXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSwgaWYgdXNpbmcgYSBwcm9taXNlcyBBUEkuXG4gKi9cbmpzb25sZC5kb2N1bWVudExvYWRlciA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgdmFyIGVyciA9IG5ldyBKc29uTGRFcnJvcihcbiAgICAnQ291bGQgbm90IHJldHJpZXZlIGEgSlNPTi1MRCBkb2N1bWVudCBmcm9tIHRoZSBVUkwuIFVSTCAnICtcbiAgICAnZGVyZWZlcmVuY2luZyBub3QgaW1wbGVtZW50ZWQuJywgJ2pzb25sZC5Mb2FkRG9jdW1lbnRFcnJvcicsXG4gICAge2NvZGU6ICdsb2FkaW5nIGRvY3VtZW50IGZhaWxlZCd9KTtcbiAgaWYoX25vZGVqcykge1xuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogbnVsbH0pO1xuICB9XG4gIHJldHVybiBqc29ubGQucHJvbWlzaWZ5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIERlcHJlY2F0ZWQgZGVmYXVsdCBkb2N1bWVudCBsb2FkZXIuIFVzZSBvciBvdmVycmlkZSBqc29ubGQuZG9jdW1lbnRMb2FkZXJcbiAqIGluc3RlYWQuXG4gKi9cbmpzb25sZC5sb2FkRG9jdW1lbnQgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gIHZhciBwcm9taXNlID0ganNvbmxkLmRvY3VtZW50TG9hZGVyKHVybCwgY2FsbGJhY2spO1xuICBpZihwcm9taXNlICYmICd0aGVuJyBpbiBwcm9taXNlKSB7XG4gICAgcHJvbWlzZS50aGVuKGNhbGxiYWNrLmJpbmQobnVsbCwgbnVsbCksIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuLyogUHJvbWlzZXMgQVBJICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBwcm9taXNlcyBBUEkgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2FwaV0gYW4gb2JqZWN0IHRvIGF0dGFjaCB0aGUgQVBJIHRvLlxuICogICAgICAgICAgW3ZlcnNpb25dICdqc29uLWxkLTEuMCcgdG8gb3V0cHV0IGEgc3RhbmRhcmQgSlNPTi1MRCAxLjAgcHJvbWlzZXNcbiAqICAgICAgICAgICAgQVBJLCAnanNvbmxkLmpzJyB0byBvdXRwdXQgdGhlIHNhbWUgd2l0aCBhdWdtZW50ZWQgcHJvcHJpZXRhcnlcbiAqICAgICAgICAgICAgbWV0aG9kcyAoZGVmYXVsdDogJ2pzb25sZC5qcycpXG4gKlxuICogQHJldHVybiB0aGUgcHJvbWlzZXMgQVBJIG9iamVjdC5cbiAqL1xuanNvbmxkLnByb21pc2VzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICB2YXIgcHJvbWlzaWZ5ID0ganNvbmxkLnByb21pc2lmeTtcblxuICAvLyBoYW5kbGUgJ2FwaScgb3B0aW9uIGFzIHZlcnNpb24sIHNldCBkZWZhdWx0c1xuICB2YXIgYXBpID0gb3B0aW9ucy5hcGkgfHwge307XG4gIHZhciB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uIHx8ICdqc29ubGQuanMnO1xuICBpZih0eXBlb2Ygb3B0aW9ucy5hcGkgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYoIW9wdGlvbnMudmVyc2lvbikge1xuICAgICAgdmVyc2lvbiA9IG9wdGlvbnMuYXBpO1xuICAgIH1cbiAgICBhcGkgPSB7fTtcbiAgfVxuXG4gIC8vIFRoZSBXZWIgSURMIHRlc3QgaGFybmVzcyB3aWxsIGNoZWNrIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBkZWZpbmVkIGluXG4gIC8vIHRoZSBmdW5jdGlvbnMgYmVsb3cuIFRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBtdXN0IGV4YWN0bHkgbWF0Y2ggdGhlXG4gIC8vIHJlcXVpcmVkIChub24tb3B0aW9uYWwpIHBhcmFtZXRlcnMgb2YgdGhlIEpzb25MZFByb2Nlc3NvciBpbnRlcmZhY2UgYXNcbiAgLy8gZGVmaW5lZCBoZXJlOlxuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvanNvbi1sZC1hcGkvI3RoZS1qc29ubGRwcm9jZXNzb3ItaW50ZXJmYWNlXG5cbiAgYXBpLmV4cGFuZCA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBleHBhbmQsIHRvbyBmZXcgYXJndW1lbnRzLicpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzaWZ5LmFwcGx5KG51bGwsIFtqc29ubGQuZXhwYW5kXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH07XG4gIGFwaS5jb21wYWN0ID0gZnVuY3Rpb24oaW5wdXQsIGN0eCkge1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZCBub3QgY29tcGFjdCwgdG9vIGZldyBhcmd1bWVudHMuJyk7XG4gICAgfVxuICAgIHZhciBjb21wYWN0ID0gZnVuY3Rpb24oaW5wdXQsIGN0eCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIGlmKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAvLyBlbnN1cmUgb25seSBvbmUgdmFsdWUgaXMgcmV0dXJuZWQgaW4gY2FsbGJhY2tcbiAgICAgIGpzb25sZC5jb21wYWN0KGlucHV0LCBjdHgsIG9wdGlvbnMsIGZ1bmN0aW9uKGVyciwgY29tcGFjdGVkKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgY29tcGFjdGVkKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShudWxsLCBbY29tcGFjdF0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB9O1xuICBhcGkuZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBmbGF0dGVuLCB0b28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShcbiAgICAgIG51bGwsIFtqc29ubGQuZmxhdHRlbl0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB9O1xuICBhcGkuZnJhbWUgPSBmdW5jdGlvbihpbnB1dCwgZnJhbWUpIHtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ291bGQgbm90IGZyYW1lLCB0b28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShudWxsLCBbanNvbmxkLmZyYW1lXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH07XG4gIGFwaS5mcm9tUkRGID0gZnVuY3Rpb24oZGF0YXNldCkge1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZCBub3QgY29udmVydCBmcm9tIFJERiwgdG9vIGZldyBhcmd1bWVudHMuJyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNpZnkuYXBwbHkoXG4gICAgICBudWxsLCBbanNvbmxkLmZyb21SREZdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfTtcbiAgYXBpLnRvUkRGID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ291bGQgbm90IGNvbnZlcnQgdG8gUkRGLCB0b28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShudWxsLCBbanNvbmxkLnRvUkRGXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH07XG4gIGFwaS5ub3JtYWxpemUgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZCBub3Qgbm9ybWFsaXplLCB0b28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShcbiAgICAgIG51bGwsIFtqc29ubGQubm9ybWFsaXplXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH07XG5cbiAgaWYodmVyc2lvbiA9PT0gJ2pzb25sZC5qcycpIHtcbiAgICBhcGkubGluayA9IGZ1bmN0aW9uKGlucHV0LCBjdHgpIHtcbiAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkIG5vdCBsaW5rLCB0b28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9taXNpZnkuYXBwbHkoXG4gICAgICAgIG51bGwsIFtqc29ubGQubGlua10uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG4gICAgYXBpLm9iamVjdGlmeSA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICByZXR1cm4gcHJvbWlzaWZ5LmFwcGx5KFxuICAgICAgICBudWxsLCBbanNvbmxkLm9iamVjdGlmeV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG4gICAgYXBpLmNyZWF0ZU5vZGVNYXAgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShcbiAgICAgICAgbnVsbCwgW2pzb25sZC5jcmVhdGVOb2RlTWFwXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgICBhcGkubWVyZ2UgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeS5hcHBseShcbiAgICAgICAgbnVsbCwgW2pzb25sZC5tZXJnZV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG4gIH1cblxuICB0cnkge1xuICAgIGpzb25sZC5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2UgfHwgcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xuICB9IGNhdGNoKGUpIHtcbiAgICB2YXIgZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBhIFByb21pc2UgaW1wbGVtZW50YXRpb24uJyk7XG4gICAgfTtcbiAgICBmb3IodmFyIG1ldGhvZCBpbiBhcGkpIHtcbiAgICAgIGFwaVttZXRob2RdID0gZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXBpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG5vZGUuanMgYXN5bmMgb3AgaW50byBhIHByb21pc2Ugdy9ib3hlZCByZXNvbHZlZCB2YWx1ZShzKS5cbiAqXG4gKiBAcGFyYW0gb3AgdGhlIG9wZXJhdGlvbiB0byBjb252ZXJ0LlxuICpcbiAqIEByZXR1cm4gdGhlIHByb21pc2UuXG4gKi9cbmpzb25sZC5wcm9taXNpZnkgPSBmdW5jdGlvbihvcCkge1xuICBpZighanNvbmxkLlByb21pc2UpIHtcbiAgICB0cnkge1xuICAgICAganNvbmxkLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZSB8fCByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGEgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbi4nKTtcbiAgICB9XG4gIH1cbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICByZXR1cm4gbmV3IGpzb25sZC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIG9wLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmKCFlcnIpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH0pO1xufTtcblxuLy8gZXh0ZW5kIGpzb25sZC5wcm9taXNlcyB3L2pzb25sZC5qcyBtZXRob2RzXG5qc29ubGQucHJvbWlzZXMoe2FwaToganNvbmxkLnByb21pc2VzfSk7XG5cbi8qIFdlYklETCBBUEkgKi9cblxuZnVuY3Rpb24gSnNvbkxkUHJvY2Vzc29yKCkge31cbkpzb25MZFByb2Nlc3Nvci5wcm90b3R5cGUgPSBqc29ubGQucHJvbWlzZXMoe3ZlcnNpb246ICdqc29uLWxkLTEuMCd9KTtcbkpzb25MZFByb2Nlc3Nvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgaWYodGhpcyBpbnN0YW5jZW9mIEpzb25MZFByb2Nlc3Nvcikge1xuICAgIHJldHVybiAnW29iamVjdCBKc29uTGRQcm9jZXNzb3JdJztcbiAgfVxuICByZXR1cm4gJ1tvYmplY3QgSnNvbkxkUHJvY2Vzc29yUHJvdG90eXBlXSc7XG59O1xuanNvbmxkLkpzb25MZFByb2Nlc3NvciA9IEpzb25MZFByb2Nlc3NvcjtcblxuLy8gSUU4IGhhcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgYnV0IGl0IG9ubHlcbi8vIHdvcmtzIG9uIERPTSBub2RlcyAtLSBzbyBmZWF0dXJlIGRldGVjdGlvblxuLy8gcmVxdWlyZXMgdHJ5L2NhdGNoIDotKFxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gISFPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5pZihjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG4gIH0gY2F0Y2goZSkge1xuICAgIGNhbkRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG4gIH1cbn1cblxuaWYoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEpzb25MZFByb2Nlc3NvciwgJ3Byb3RvdHlwZScsIHtcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2VcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShKc29uTGRQcm9jZXNzb3IucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBKc29uTGRQcm9jZXNzb3JcbiAgfSk7XG59XG5cbi8vIHNldHVwIGJyb3dzZXIgZ2xvYmFsIEpzb25MZFByb2Nlc3NvclxuaWYoX2Jyb3dzZXIgJiYgdHlwZW9mIGdsb2JhbC5Kc29uTGRQcm9jZXNzb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gIGlmKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbCwgJ0pzb25MZFByb2Nlc3NvcicsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogSnNvbkxkUHJvY2Vzc29yXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZ2xvYmFsLkpzb25MZFByb2Nlc3NvciA9IEpzb25MZFByb2Nlc3NvcjtcbiAgfVxufVxuXG4vKiBVdGlsaXR5IEFQSSAqL1xuXG4vLyBkZWZpbmUgc2V0SW1tZWRpYXRlIGFuZCBuZXh0VGlja1xuLy8vLyBuZXh0VGljayBpbXBsZW1lbnRhdGlvbiB3aXRoIGJyb3dzZXItY29tcGF0aWJsZSBmYWxsYmFjayAvLy8vXG4vLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9jYW9sYW4vYXN5bmMvYmxvYi9tYXN0ZXIvbGliL2FzeW5jLmpzXG5cbi8vIGNhcHR1cmUgdGhlIGdsb2JhbCByZWZlcmVuY2UgdG8gZ3VhcmQgYWdhaW5zdCBmYWtlVGltZXIgbW9ja3NcbnZhciBfc2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXRJbW1lZGlhdGU7XG5cbnZhciBfZGVsYXkgPSBfc2V0SW1tZWRpYXRlID8gZnVuY3Rpb24oZm4pIHtcbiAgLy8gbm90IGEgZGlyZWN0IGFsaWFzIChmb3IgSUUxMCBjb21wYXRpYmlsaXR5KVxuICBfc2V0SW1tZWRpYXRlKGZuKTtcbn0gOiBmdW5jdGlvbihmbikge1xuICBzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmlmKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcHJvY2Vzcy5uZXh0VGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICBqc29ubGQubmV4dFRpY2sgPSBwcm9jZXNzLm5leHRUaWNrO1xufSBlbHNlIHtcbiAganNvbmxkLm5leHRUaWNrID0gX2RlbGF5O1xufVxuanNvbmxkLnNldEltbWVkaWF0ZSA9IF9zZXRJbW1lZGlhdGUgPyBfZGVsYXkgOiBqc29ubGQubmV4dFRpY2s7XG5cbi8qKlxuICogUGFyc2VzIGEgbGluayBoZWFkZXIuIFRoZSByZXN1bHRzIHdpbGwgYmUga2V5J2QgYnkgdGhlIHZhbHVlIG9mIFwicmVsXCIuXG4gKlxuICogTGluazogPGh0dHA6Ly9qc29uLWxkLm9yZy9jb250ZXh0cy9wZXJzb24uanNvbmxkPjsgcmVsPVwiaHR0cDovL3d3dy53My5vcmcvbnMvanNvbi1sZCNjb250ZXh0XCI7IHR5cGU9XCJhcHBsaWNhdGlvbi9sZCtqc29uXCJcbiAqXG4gKiBQYXJzZXMgYXM6IHtcbiAqICAgJ2h0dHA6Ly93d3cudzMub3JnL25zL2pzb24tbGQjY29udGV4dCc6IHtcbiAqICAgICB0YXJnZXQ6IGh0dHA6Ly9qc29uLWxkLm9yZy9jb250ZXh0cy9wZXJzb24uanNvbmxkLFxuICogICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9sZCtqc29uJ1xuICogICB9XG4gKiB9XG4gKlxuICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBcInJlbFwiIHdpdGggdGhlIHNhbWUgSVJJLCB0aGVuIGVudHJpZXMgaW4gdGhlXG4gKiByZXN1bHRpbmcgbWFwIGZvciB0aGF0IFwicmVsXCIgd2lsbCBiZSBhcnJheXMuXG4gKlxuICogQHBhcmFtIGhlYWRlciB0aGUgbGluayBoZWFkZXIgdG8gcGFyc2UuXG4gKi9cbmpzb25sZC5wYXJzZUxpbmtIZWFkZXIgPSBmdW5jdGlvbihoZWFkZXIpIHtcbiAgdmFyIHJ2YWwgPSB7fTtcbiAgLy8gc3BsaXQgb24gdW5icmFja2V0ZWQvdW5xdW90ZWQgY29tbWFzXG4gIHZhciBlbnRyaWVzID0gaGVhZGVyLm1hdGNoKC8oPzo8W14+XSo/PnxcIlteXCJdKj9cInxbXixdKSsvZyk7XG4gIHZhciByTGlua0hlYWRlciA9IC9cXHMqPChbXj5dKj8pPlxccyooPzo7XFxzKiguKikpPy87XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIG1hdGNoID0gZW50cmllc1tpXS5tYXRjaChyTGlua0hlYWRlcik7XG4gICAgaWYoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHt0YXJnZXQ6IG1hdGNoWzFdfTtcbiAgICB2YXIgcGFyYW1zID0gbWF0Y2hbMl07XG4gICAgdmFyIHJQYXJhbXMgPSAvKC4qPyk9KD86KD86XCIoW15cIl0qPylcIil8KFteXCJdKj8pKVxccyooPzooPzo7XFxzKil8JCkvZztcbiAgICB3aGlsZShtYXRjaCA9IHJQYXJhbXMuZXhlYyhwYXJhbXMpKSB7XG4gICAgICByZXN1bHRbbWF0Y2hbMV1dID0gKG1hdGNoWzJdID09PSB1bmRlZmluZWQpID8gbWF0Y2hbM10gOiBtYXRjaFsyXTtcbiAgICB9XG4gICAgdmFyIHJlbCA9IHJlc3VsdFsncmVsJ10gfHwgJyc7XG4gICAgaWYoX2lzQXJyYXkocnZhbFtyZWxdKSkge1xuICAgICAgcnZhbFtyZWxdLnB1c2gocmVzdWx0KTtcbiAgICB9IGVsc2UgaWYocmVsIGluIHJ2YWwpIHtcbiAgICAgIHJ2YWxbcmVsXSA9IFtydmFsW3JlbF0sIHJlc3VsdF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ2YWxbcmVsXSA9IHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ2YWw7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaW1wbGUgcXVldWUgZm9yIHJlcXVlc3RpbmcgZG9jdW1lbnRzLlxuICovXG5qc29ubGQuUmVxdWVzdFF1ZXVlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlcXVlc3RzID0ge307XG59O1xuanNvbmxkLlJlcXVlc3RRdWV1ZS5wcm90b3R5cGUud3JhcExvYWRlciA9IGZ1bmN0aW9uKGxvYWRlcikge1xuICB0aGlzLl9sb2FkZXIgPSBsb2FkZXI7XG4gIHRoaXMuX3VzZVByb21pc2UgPSAobG9hZGVyLmxlbmd0aCA9PT0gMSk7XG4gIHJldHVybiB0aGlzLmFkZC5iaW5kKHRoaXMpO1xufTtcbmpzb25sZC5SZXF1ZXN0UXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGNhbGxiYWNrIG11c3QgYmUgZ2l2ZW4gaWYgbm90IHVzaW5nIHByb21pc2VzXG4gIGlmKCFjYWxsYmFjayAmJiAhc2VsZi5fdXNlUHJvbWlzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBzcGVjaWZpZWQuJyk7XG4gIH1cblxuICAvLyBQcm9taXNlLWJhc2VkIEFQSVxuICBpZihzZWxmLl91c2VQcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBqc29ubGQuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsb2FkID0gc2VsZi5fcmVxdWVzdHNbdXJsXTtcbiAgICAgIGlmKCFsb2FkKSB7XG4gICAgICAgIC8vIGxvYWQgVVJMIHRoZW4gcmVtb3ZlIGZyb20gcXVldWVcbiAgICAgICAgbG9hZCA9IHNlbGYuX3JlcXVlc3RzW3VybF0gPSBzZWxmLl9sb2FkZXIodXJsKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlbW90ZURvYykge1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuX3JlcXVlc3RzW3VybF07XG4gICAgICAgICAgICByZXR1cm4gcmVtb3RlRG9jO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuX3JlcXVlc3RzW3VybF07XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyByZXNvbHZlL3JlamVjdCBwcm9taXNlIG9uY2UgVVJMIGhhcyBiZWVuIGxvYWRlZFxuICAgICAgbG9hZC50aGVuKGZ1bmN0aW9uKHJlbW90ZURvYykge1xuICAgICAgICByZXNvbHZlKHJlbW90ZURvYyk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGNhbGxiYWNrLWJhc2VkIEFQSVxuICBpZih1cmwgaW4gc2VsZi5fcmVxdWVzdHMpIHtcbiAgICBzZWxmLl9yZXF1ZXN0c1t1cmxdLnB1c2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHNlbGYuX3JlcXVlc3RzW3VybF0gPSBbY2FsbGJhY2tdO1xuICAgIHNlbGYuX2xvYWRlcih1cmwsIGZ1bmN0aW9uKGVyciwgcmVtb3RlRG9jKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gc2VsZi5fcmVxdWVzdHNbdXJsXTtcbiAgICAgIGRlbGV0ZSBzZWxmLl9yZXF1ZXN0c1t1cmxdO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYWxsYmFja3NbaV0oZXJyLCByZW1vdGVEb2MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaW1wbGUgZG9jdW1lbnQgY2FjaGUgdGhhdCByZXRhaW5zIGRvY3VtZW50cyBmb3IgYSBzaG9ydFxuICogcGVyaW9kIG9mIHRpbWUuXG4gKlxuICogRklYTUU6IEltcGxlbWVudCBzaW1wbGUgSFRUUCBjYWNoaW5nIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHNpemUgdGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgY2FjaGUuXG4gKi9cbmpzb25sZC5Eb2N1bWVudENhY2hlID0gZnVuY3Rpb24oc2l6ZSkge1xuICB0aGlzLm9yZGVyID0gW107XG4gIHRoaXMuY2FjaGUgPSB7fTtcbiAgdGhpcy5zaXplID0gc2l6ZSB8fCA1MDtcbiAgdGhpcy5leHBpcmVzID0gMzAgKiAxMDAwO1xufTtcbmpzb25sZC5Eb2N1bWVudENhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih1cmwpIHtcbiAgaWYodXJsIGluIHRoaXMuY2FjaGUpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmNhY2hlW3VybF07XG4gICAgaWYoZW50cnkuZXhwaXJlcyA+PSArbmV3IERhdGUoKSkge1xuICAgICAgcmV0dXJuIGVudHJ5LmN0eDtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuY2FjaGVbdXJsXTtcbiAgICB0aGlzLm9yZGVyLnNwbGljZSh0aGlzLm9yZGVyLmluZGV4T2YodXJsKSwgMSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuanNvbmxkLkRvY3VtZW50Q2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHVybCwgY3R4KSB7XG4gIGlmKHRoaXMub3JkZXIubGVuZ3RoID09PSB0aGlzLnNpemUpIHtcbiAgICBkZWxldGUgdGhpcy5jYWNoZVt0aGlzLm9yZGVyLnNoaWZ0KCldO1xuICB9XG4gIHRoaXMub3JkZXIucHVzaCh1cmwpO1xuICB0aGlzLmNhY2hlW3VybF0gPSB7Y3R4OiBjdHgsIGV4cGlyZXM6ICgrbmV3IERhdGUoKSArIHRoaXMuZXhwaXJlcyl9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFjdGl2ZSBjb250ZXh0IGNhY2hlLlxuICpcbiAqIEBwYXJhbSBzaXplIHRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIGNhY2hlLlxuICovXG5qc29ubGQuQWN0aXZlQ29udGV4dENhY2hlID0gZnVuY3Rpb24oc2l6ZSkge1xuICB0aGlzLm9yZGVyID0gW107XG4gIHRoaXMuY2FjaGUgPSB7fTtcbiAgdGhpcy5zaXplID0gc2l6ZSB8fCAxMDA7XG59O1xuanNvbmxkLkFjdGl2ZUNvbnRleHRDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oYWN0aXZlQ3R4LCBsb2NhbEN0eCkge1xuICB2YXIga2V5MSA9IEpTT04uc3RyaW5naWZ5KGFjdGl2ZUN0eCk7XG4gIHZhciBrZXkyID0gSlNPTi5zdHJpbmdpZnkobG9jYWxDdHgpO1xuICB2YXIgbGV2ZWwxID0gdGhpcy5jYWNoZVtrZXkxXTtcbiAgaWYobGV2ZWwxICYmIGtleTIgaW4gbGV2ZWwxKSB7XG4gICAgcmV0dXJuIGxldmVsMVtrZXkyXTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5qc29ubGQuQWN0aXZlQ29udGV4dENhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihcbiAgYWN0aXZlQ3R4LCBsb2NhbEN0eCwgcmVzdWx0KSB7XG4gIGlmKHRoaXMub3JkZXIubGVuZ3RoID09PSB0aGlzLnNpemUpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLm9yZGVyLnNoaWZ0KCk7XG4gICAgZGVsZXRlIHRoaXMuY2FjaGVbZW50cnkuYWN0aXZlQ3R4XVtlbnRyeS5sb2NhbEN0eF07XG4gIH1cbiAgdmFyIGtleTEgPSBKU09OLnN0cmluZ2lmeShhY3RpdmVDdHgpO1xuICB2YXIga2V5MiA9IEpTT04uc3RyaW5naWZ5KGxvY2FsQ3R4KTtcbiAgdGhpcy5vcmRlci5wdXNoKHthY3RpdmVDdHg6IGtleTEsIGxvY2FsQ3R4OiBrZXkyfSk7XG4gIGlmKCEoa2V5MSBpbiB0aGlzLmNhY2hlKSkge1xuICAgIHRoaXMuY2FjaGVba2V5MV0gPSB7fTtcbiAgfVxuICB0aGlzLmNhY2hlW2tleTFdW2tleTJdID0gX2Nsb25lKHJlc3VsdCk7XG59O1xuXG4vKipcbiAqIERlZmF1bHQgSlNPTi1MRCBjYWNoZS5cbiAqL1xuanNvbmxkLmNhY2hlID0ge1xuICBhY3RpdmVDdHg6IG5ldyBqc29ubGQuQWN0aXZlQ29udGV4dENhY2hlKClcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgbG9hZGVycy5cbiAqL1xuanNvbmxkLmRvY3VtZW50TG9hZGVycyA9IHt9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBidWlsdC1pbiBqcXVlcnkgZG9jdW1lbnQgbG9hZGVyLlxuICpcbiAqIEBwYXJhbSAkIHRoZSBqcXVlcnkgaW5zdGFuY2UgdG8gdXNlLlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgc2VjdXJlOiByZXF1aXJlIGFsbCBVUkxzIHRvIHVzZSBIVFRQUy5cbiAqICAgICAgICAgIHVzZVByb21pc2U6IHRydWUgdG8gdXNlIGEgcHJvbWlzZXMgQVBJLCBmYWxzZSBmb3IgYVxuICogICAgICAgICAgICBjYWxsYmFjay1jb250aW51YXRpb24tc3R5bGUgQVBJOyBkZWZhdWx0cyB0byB0cnVlIGlmIFByb21pc2VcbiAqICAgICAgICAgICAgaXMgZ2xvYmFsbHkgZGVmaW5lZCwgZmFsc2UgaWYgbm90LlxuICpcbiAqIEByZXR1cm4gdGhlIGpxdWVyeSBkb2N1bWVudCBsb2FkZXIuXG4gKi9cbmpzb25sZC5kb2N1bWVudExvYWRlcnMuanF1ZXJ5ID0gZnVuY3Rpb24oJCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHF1ZXVlID0gbmV3IGpzb25sZC5SZXF1ZXN0UXVldWUoKTtcblxuICAvLyB1c2Ugb3B0aW9uIG9yLCBieSBkZWZhdWx0LCB1c2UgUHJvbWlzZSB3aGVuIGl0cyBkZWZpbmVkXG4gIHZhciB1c2VQcm9taXNlID0gKCd1c2VQcm9taXNlJyBpbiBvcHRpb25zID9cbiAgICBvcHRpb25zLnVzZVByb21pc2UgOiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSk7XG4gIGlmKHVzZVByb21pc2UpIHtcbiAgICByZXR1cm4gcXVldWUud3JhcExvYWRlcihmdW5jdGlvbih1cmwpIHtcbiAgICAgIHJldHVybiBqc29ubGQucHJvbWlzaWZ5KGxvYWRlciwgdXJsKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcXVldWUud3JhcExvYWRlcihsb2FkZXIpO1xuXG4gIGZ1bmN0aW9uIGxvYWRlcih1cmwsIGNhbGxiYWNrKSB7XG4gICAgaWYodXJsLmluZGV4T2YoJ2h0dHA6JykgIT09IDAgJiYgdXJsLmluZGV4T2YoJ2h0dHBzOicpICE9PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQ7IG9ubHkgXCJodHRwXCIgYW5kIFwiaHR0cHNcIiBVUkxzIGFyZSAnICtcbiAgICAgICAgJ3N1cHBvcnRlZC4nLFxuICAgICAgICAnanNvbmxkLkludmFsaWRVcmwnLCB7Y29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJywgdXJsOiB1cmx9KSxcbiAgICAgICAge2NvbnRleHRVcmw6IG51bGwsIGRvY3VtZW50VXJsOiB1cmwsIGRvY3VtZW50OiBudWxsfSk7XG4gICAgfVxuICAgIGlmKG9wdGlvbnMuc2VjdXJlICYmIHVybC5pbmRleE9mKCdodHRwcycpICE9PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQ7IHNlY3VyZSBtb2RlIGlzIGVuYWJsZWQgYW5kICcgK1xuICAgICAgICAndGhlIFVSTFxcJ3Mgc2NoZW1lIGlzIG5vdCBcImh0dHBzXCIuJyxcbiAgICAgICAgJ2pzb25sZC5JbnZhbGlkVXJsJywge2NvZGU6ICdsb2FkaW5nIGRvY3VtZW50IGZhaWxlZCcsIHVybDogdXJsfSksXG4gICAgICAgIHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogbnVsbH0pO1xuICAgIH1cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBhY2NlcHRzOiB7XG4gICAgICAgIGpzb246ICdhcHBsaWNhdGlvbi9sZCtqc29uLCBhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIC8vIGVuc3VyZSBBY2NlcHQgaGVhZGVyIGlzIHZlcnkgc3BlY2lmaWMgZm9yIEpTT04tTEQvSlNPTlxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2xkK2pzb24sIGFwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9LFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNyb3NzRG9tYWluOiB0cnVlLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgdmFyIGRvYyA9IHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogZGF0YX07XG5cbiAgICAgICAgLy8gaGFuZGxlIExpbmsgSGVhZGVyXG4gICAgICAgIHZhciBjb250ZW50VHlwZSA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgdmFyIGxpbmtIZWFkZXIgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcignTGluaycpO1xuICAgICAgICBpZihsaW5rSGVhZGVyICYmIGNvbnRlbnRUeXBlICE9PSAnYXBwbGljYXRpb24vbGQranNvbicpIHtcbiAgICAgICAgICAvLyBvbmx5IDEgcmVsYXRlZCBsaW5rIGhlYWRlciBwZXJtaXR0ZWRcbiAgICAgICAgICBsaW5rSGVhZGVyID0ganNvbmxkLnBhcnNlTGlua0hlYWRlcihsaW5rSGVhZGVyKVtMSU5LX0hFQURFUl9SRUxdO1xuICAgICAgICAgIGlmKF9pc0FycmF5KGxpbmtIZWFkZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQsIGl0IGhhcyBtb3JlIHRoYW4gb25lICcgK1xuICAgICAgICAgICAgICAnYXNzb2NpYXRlZCBIVFRQIExpbmsgSGVhZGVyLicsXG4gICAgICAgICAgICAgICdqc29ubGQuSW52YWxpZFVybCcsXG4gICAgICAgICAgICAgIHtjb2RlOiAnbXVsdGlwbGUgY29udGV4dCBsaW5rIGhlYWRlcnMnLCB1cmw6IHVybH0pLCBkb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihsaW5rSGVhZGVyKSB7XG4gICAgICAgICAgICBkb2MuY29udGV4dFVybCA9IGxpbmtIZWFkZXIudGFyZ2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRvYyk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnIpIHtcbiAgICAgICAgY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZCwgYW4gZXJyb3Igb2NjdXJyZWQuJyxcbiAgICAgICAgICAnanNvbmxkLkxvYWREb2N1bWVudEVycm9yJyxcbiAgICAgICAgICB7Y29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJywgdXJsOiB1cmwsIGNhdXNlOiBlcnJ9KSxcbiAgICAgICAgICB7Y29udGV4dFVybDogbnVsbCwgZG9jdW1lbnRVcmw6IHVybCwgZG9jdW1lbnQ6IG51bGx9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYnVpbHQtaW4gbm9kZSBkb2N1bWVudCBsb2FkZXIuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgc2VjdXJlOiByZXF1aXJlIGFsbCBVUkxzIHRvIHVzZSBIVFRQUy5cbiAqICAgICAgICAgIHN0cmljdFNTTDogdHJ1ZSB0byByZXF1aXJlIFNTTCBjZXJ0aWZpY2F0ZXMgdG8gYmUgdmFsaWQsXG4gKiAgICAgICAgICAgIGZhbHNlIG5vdCB0byAoZGVmYXVsdDogdHJ1ZSkuXG4gKiAgICAgICAgICBtYXhSZWRpcmVjdHM6IHRoZSBtYXhpbXVtIG51bWJlciBvZiByZWRpcmVjdHMgdG8gcGVybWl0LCBub25lIGJ5XG4gKiAgICAgICAgICAgIGRlZmF1bHQuXG4gKiAgICAgICAgICByZXF1ZXN0OiB0aGUgb2JqZWN0IHdoaWNoIHdpbGwgbWFrZSB0aGUgcmVxdWVzdCwgZGVmYXVsdCBpc1xuICogICAgICAgICAgICBwcm92aWRlZCBieSBgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVxdWVzdGAuXG4gKiAgICAgICAgICBoZWFkZXJzOiBhbiBhcnJheSBvZiBoZWFkZXJzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIGFzIHJlcXVlc3RcbiAqICAgICAgICAgICAgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3RlZCBkb2N1bWVudC4gQWNjZXB0IGlzIG5vdCBhbGxvd2VkLlxuICogICAgICAgICAgdXNlUHJvbWlzZTogdHJ1ZSB0byB1c2UgYSBwcm9taXNlcyBBUEksIGZhbHNlIGZvciBhXG4gKiAgICAgICAgICAgIGNhbGxiYWNrLWNvbnRpbnVhdGlvbi1zdHlsZSBBUEk7IGZhbHNlIGJ5IGRlZmF1bHQuXG4gKlxuICogQHJldHVybiB0aGUgbm9kZSBkb2N1bWVudCBsb2FkZXIuXG4gKi9cbmpzb25sZC5kb2N1bWVudExvYWRlcnMubm9kZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBzdHJpY3RTU0wgPSAoJ3N0cmljdFNTTCcgaW4gb3B0aW9ucykgPyBvcHRpb25zLnN0cmljdFNTTCA6IHRydWU7XG4gIHZhciBtYXhSZWRpcmVjdHMgPSAoJ21heFJlZGlyZWN0cycgaW4gb3B0aW9ucykgPyBvcHRpb25zLm1heFJlZGlyZWN0cyA6IC0xO1xuICB2YXIgcmVxdWVzdCA9ICgncmVxdWVzdCcgaW4gb3B0aW9ucykgPyBvcHRpb25zLnJlcXVlc3QgOiByZXF1aXJlKCdyZXF1ZXN0Jyk7XG4gIHZhciBhY2NlcHRIZWFkZXIgPSAnYXBwbGljYXRpb24vbGQranNvbiwgYXBwbGljYXRpb24vanNvbic7XG4gIHZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuICAvLyBUT0RPOiBkaXNhYmxlIGNhY2hlIHVudGlsIEhUVFAgY2FjaGluZyBpbXBsZW1lbnRlZFxuICAvL3ZhciBjYWNoZSA9IG5ldyBqc29ubGQuRG9jdW1lbnRDYWNoZSgpO1xuXG4gIHZhciBxdWV1ZSA9IG5ldyBqc29ubGQuUmVxdWVzdFF1ZXVlKCk7XG4gIGlmKG9wdGlvbnMudXNlUHJvbWlzZSkge1xuICAgIHJldHVybiBxdWV1ZS53cmFwTG9hZGVyKGZ1bmN0aW9uKHVybCkge1xuICAgICAgcmV0dXJuIGpzb25sZC5wcm9taXNpZnkobG9hZERvY3VtZW50LCB1cmwsIFtdKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgaWYoJ0FjY2VwdCcgaW4gaGVhZGVycyB8fCAnYWNjZXB0JyBpbiBoZWFkZXJzKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAnQWNjZXB0IGhlYWRlciBtYXkgbm90IGJlIHNwZWNpZmllZCBhcyBhbiBvcHRpb247IG9ubHkgXCInICtcbiAgICAgIGFjY2VwdEhlYWRlciArICdcIiBpcyBzdXBwb3J0ZWQuJyk7XG4gIH1cbiAgcmV0dXJuIHF1ZXVlLndyYXBMb2FkZXIoZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgIGxvYWREb2N1bWVudCh1cmwsIFtdLCBjYWxsYmFjayk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGxvYWREb2N1bWVudCh1cmwsIHJlZGlyZWN0cywgY2FsbGJhY2spIHtcbiAgICBpZih1cmwuaW5kZXhPZignaHR0cDonKSAhPT0gMCAmJiB1cmwuaW5kZXhPZignaHR0cHM6JykgIT09IDApIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDsgb25seSBcImh0dHBcIiBhbmQgXCJodHRwc1wiIFVSTHMgYXJlICcgK1xuICAgICAgICAnc3VwcG9ydGVkLicsXG4gICAgICAgICdqc29ubGQuSW52YWxpZFVybCcsIHtjb2RlOiAnbG9hZGluZyBkb2N1bWVudCBmYWlsZWQnLCB1cmw6IHVybH0pLFxuICAgICAgICB7Y29udGV4dFVybDogbnVsbCwgZG9jdW1lbnRVcmw6IHVybCwgZG9jdW1lbnQ6IG51bGx9KTtcbiAgICB9XG4gICAgaWYob3B0aW9ucy5zZWN1cmUgJiYgdXJsLmluZGV4T2YoJ2h0dHBzJykgIT09IDApIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDsgc2VjdXJlIG1vZGUgaXMgZW5hYmxlZCBhbmQgJyArXG4gICAgICAgICd0aGUgVVJMXFwncyBzY2hlbWUgaXMgbm90IFwiaHR0cHNcIi4nLFxuICAgICAgICAnanNvbmxkLkludmFsaWRVcmwnLCB7Y29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJywgdXJsOiB1cmx9KSxcbiAgICAgICAge2NvbnRleHRVcmw6IG51bGwsIGRvY3VtZW50VXJsOiB1cmwsIGRvY3VtZW50OiBudWxsfSk7XG4gICAgfVxuICAgIC8vIFRPRE86IGRpc2FibGUgY2FjaGUgdW50aWwgSFRUUCBjYWNoaW5nIGltcGxlbWVudGVkXG4gICAgdmFyIGRvYyA9IG51bGw7Ly9jYWNoZS5nZXQodXJsKTtcbiAgICBpZihkb2MgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBkb2MpO1xuICAgIH1cbiAgICB2YXIgaGVhZGVycyA9IHsnQWNjZXB0JzogYWNjZXB0SGVhZGVyfTtcbiAgICBmb3IodmFyIGsgaW4gb3B0aW9ucy5oZWFkZXJzKSB7IGhlYWRlcnNba10gPSBvcHRpb25zLmhlYWRlcnNba107IH1cbiAgICByZXF1ZXN0KHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIHN0cmljdFNTTDogc3RyaWN0U1NMLFxuICAgICAgZm9sbG93UmVkaXJlY3Q6IGZhbHNlXG4gICAgfSwgaGFuZGxlUmVzcG9uc2UpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UoZXJyLCByZXMsIGJvZHkpIHtcbiAgICAgIGRvYyA9IHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogYm9keSB8fCBudWxsfTtcblxuICAgICAgLy8gaGFuZGxlIGVycm9yXG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQsIGFuIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgICAgJ2pzb25sZC5Mb2FkRG9jdW1lbnRFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdsb2FkaW5nIGRvY3VtZW50IGZhaWxlZCcsIHVybDogdXJsLCBjYXVzZTogZXJyfSksIGRvYyk7XG4gICAgICB9XG4gICAgICB2YXIgc3RhdHVzVGV4dCA9IGh0dHAuU1RBVFVTX0NPREVTW3Jlcy5zdGF0dXNDb2RlXTtcbiAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDogJyArIHN0YXR1c1RleHQsXG4gICAgICAgICAgJ2pzb25sZC5JbnZhbGlkVXJsJywge1xuICAgICAgICAgICAgY29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJyxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgaHR0cFN0YXR1c0NvZGU6IHJlcy5zdGF0dXNDb2RlXG4gICAgICAgICAgfSksIGRvYyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGhhbmRsZSBMaW5rIEhlYWRlclxuICAgICAgaWYocmVzLmhlYWRlcnMubGluayAmJlxuICAgICAgICByZXMuaGVhZGVyc1snY29udGVudC10eXBlJ10gIT09ICdhcHBsaWNhdGlvbi9sZCtqc29uJykge1xuICAgICAgICAvLyBvbmx5IDEgcmVsYXRlZCBsaW5rIGhlYWRlciBwZXJtaXR0ZWRcbiAgICAgICAgdmFyIGxpbmtIZWFkZXIgPSBqc29ubGQucGFyc2VMaW5rSGVhZGVyKFxuICAgICAgICAgIHJlcy5oZWFkZXJzLmxpbmspW0xJTktfSEVBREVSX1JFTF07XG4gICAgICAgIGlmKF9pc0FycmF5KGxpbmtIZWFkZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZCwgaXQgaGFzIG1vcmUgdGhhbiBvbmUgYXNzb2NpYXRlZCAnICtcbiAgICAgICAgICAgICdIVFRQIExpbmsgSGVhZGVyLicsXG4gICAgICAgICAgICAnanNvbmxkLkludmFsaWRVcmwnLFxuICAgICAgICAgICAge2NvZGU6ICdtdWx0aXBsZSBjb250ZXh0IGxpbmsgaGVhZGVycycsIHVybDogdXJsfSksIGRvYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYobGlua0hlYWRlcikge1xuICAgICAgICAgIGRvYy5jb250ZXh0VXJsID0gbGlua0hlYWRlci50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIHJlZGlyZWN0XG4gICAgICBpZihyZXMuc3RhdHVzQ29kZSA+PSAzMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDAgJiZcbiAgICAgICAgcmVzLmhlYWRlcnMubG9jYXRpb24pIHtcbiAgICAgICAgaWYocmVkaXJlY3RzLmxlbmd0aCA9PT0gbWF4UmVkaXJlY3RzKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDsgdGhlcmUgd2VyZSB0b28gbWFueSByZWRpcmVjdHMuJyxcbiAgICAgICAgICAgICdqc29ubGQuVG9vTWFueVJlZGlyZWN0cycsIHtcbiAgICAgICAgICAgICAgY29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJyxcbiAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgIGh0dHBTdGF0dXNDb2RlOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgcmVkaXJlY3RzOiByZWRpcmVjdHNcbiAgICAgICAgICAgIH0pLCBkb2MpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHJlZGlyZWN0cy5pbmRleE9mKHVybCkgIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDsgaW5maW5pdGUgcmVkaXJlY3Rpb24gd2FzIGRldGVjdGVkLicsXG4gICAgICAgICAgICAnanNvbmxkLkluZmluaXRlUmVkaXJlY3REZXRlY3RlZCcsIHtcbiAgICAgICAgICAgICAgY29kZTogJ3JlY3Vyc2l2ZSBjb250ZXh0IGluY2x1c2lvbicsXG4gICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICBodHRwU3RhdHVzQ29kZTogcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgIHJlZGlyZWN0czogcmVkaXJlY3RzXG4gICAgICAgICAgICB9KSwgZG9jKTtcbiAgICAgICAgfVxuICAgICAgICByZWRpcmVjdHMucHVzaCh1cmwpO1xuICAgICAgICByZXR1cm4gbG9hZERvY3VtZW50KHJlcy5oZWFkZXJzLmxvY2F0aW9uLCByZWRpcmVjdHMsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIGNhY2hlIGZvciBlYWNoIHJlZGlyZWN0ZWQgVVJMXG4gICAgICByZWRpcmVjdHMucHVzaCh1cmwpO1xuICAgICAgLy8gVE9ETzogZGlzYWJsZSBjYWNoZSB1bnRpbCBIVFRQIGNhY2hpbmcgaW1wbGVtZW50ZWRcbiAgICAgIC8qZm9yKHZhciBpID0gMDsgaSA8IHJlZGlyZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYWNoZS5zZXQoXG4gICAgICAgICAgcmVkaXJlY3RzW2ldLFxuICAgICAgICAgIHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogcmVkaXJlY3RzW2ldLCBkb2N1bWVudDogYm9keX0pO1xuICAgICAgfSovXG4gICAgICBjYWxsYmFjayhlcnIsIGRvYyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBidWlsdC1pbiBYTUxIdHRwUmVxdWVzdCBkb2N1bWVudCBsb2FkZXIuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgc2VjdXJlOiByZXF1aXJlIGFsbCBVUkxzIHRvIHVzZSBIVFRQUy5cbiAqICAgICAgICAgIHVzZVByb21pc2U6IHRydWUgdG8gdXNlIGEgcHJvbWlzZXMgQVBJLCBmYWxzZSBmb3IgYVxuICogICAgICAgICAgICBjYWxsYmFjay1jb250aW51YXRpb24tc3R5bGUgQVBJOyBkZWZhdWx0cyB0byB0cnVlIGlmIFByb21pc2VcbiAqICAgICAgICAgICAgaXMgZ2xvYmFsbHkgZGVmaW5lZCwgZmFsc2UgaWYgbm90LlxuICogICAgICAgICAgW3hocl06IHRoZSBYTUxIdHRwUmVxdWVzdCBBUEkgdG8gdXNlLlxuICpcbiAqIEByZXR1cm4gdGhlIFhNTEh0dHBSZXF1ZXN0IGRvY3VtZW50IGxvYWRlci5cbiAqL1xuanNvbmxkLmRvY3VtZW50TG9hZGVycy54aHIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmxpbmsgPSAvKF58KFxcclxcbikpbGluazovaTtcbiAgdmFyIHF1ZXVlID0gbmV3IGpzb25sZC5SZXF1ZXN0UXVldWUoKTtcblxuICAvLyB1c2Ugb3B0aW9uIG9yLCBieSBkZWZhdWx0LCB1c2UgUHJvbWlzZSB3aGVuIGl0cyBkZWZpbmVkXG4gIHZhciB1c2VQcm9taXNlID0gKCd1c2VQcm9taXNlJyBpbiBvcHRpb25zID9cbiAgICBvcHRpb25zLnVzZVByb21pc2UgOiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSk7XG4gIGlmKHVzZVByb21pc2UpIHtcbiAgICByZXR1cm4gcXVldWUud3JhcExvYWRlcihmdW5jdGlvbih1cmwpIHtcbiAgICAgIHJldHVybiBqc29ubGQucHJvbWlzaWZ5KGxvYWRlciwgdXJsKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcXVldWUud3JhcExvYWRlcihsb2FkZXIpO1xuXG4gIGZ1bmN0aW9uIGxvYWRlcih1cmwsIGNhbGxiYWNrKSB7XG4gICAgaWYodXJsLmluZGV4T2YoJ2h0dHA6JykgIT09IDAgJiYgdXJsLmluZGV4T2YoJ2h0dHBzOicpICE9PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQ7IG9ubHkgXCJodHRwXCIgYW5kIFwiaHR0cHNcIiBVUkxzIGFyZSAnICtcbiAgICAgICAgJ3N1cHBvcnRlZC4nLFxuICAgICAgICAnanNvbmxkLkludmFsaWRVcmwnLCB7Y29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJywgdXJsOiB1cmx9KSxcbiAgICAgICAge2NvbnRleHRVcmw6IG51bGwsIGRvY3VtZW50VXJsOiB1cmwsIGRvY3VtZW50OiBudWxsfSk7XG4gICAgfVxuICAgIGlmKG9wdGlvbnMuc2VjdXJlICYmIHVybC5pbmRleE9mKCdodHRwcycpICE9PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQ7IHNlY3VyZSBtb2RlIGlzIGVuYWJsZWQgYW5kICcgK1xuICAgICAgICAndGhlIFVSTFxcJ3Mgc2NoZW1lIGlzIG5vdCBcImh0dHBzXCIuJyxcbiAgICAgICAgJ2pzb25sZC5JbnZhbGlkVXJsJywge2NvZGU6ICdsb2FkaW5nIGRvY3VtZW50IGZhaWxlZCcsIHVybDogdXJsfSksXG4gICAgICAgIHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogbnVsbH0pO1xuICAgIH1cbiAgICB2YXIgeGhyID0gb3B0aW9ucy54aHIgfHwgWE1MSHR0cFJlcXVlc3Q7XG4gICAgdmFyIHJlcSA9IG5ldyB4aHIoKTtcbiAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZihyZXEuc3RhdHVzID49IDQwMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdVUkwgY291bGQgbm90IGJlIGRlcmVmZXJlbmNlZDogJyArIHJlcS5zdGF0dXNUZXh0LFxuICAgICAgICAgICdqc29ubGQuTG9hZERvY3VtZW50RXJyb3InLCB7XG4gICAgICAgICAgICBjb2RlOiAnbG9hZGluZyBkb2N1bWVudCBmYWlsZWQnLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBodHRwU3RhdHVzQ29kZTogcmVxLnN0YXR1c1xuICAgICAgICAgIH0pLCB7Y29udGV4dFVybDogbnVsbCwgZG9jdW1lbnRVcmw6IHVybCwgZG9jdW1lbnQ6IG51bGx9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRvYyA9IHtjb250ZXh0VXJsOiBudWxsLCBkb2N1bWVudFVybDogdXJsLCBkb2N1bWVudDogcmVxLnJlc3BvbnNlfTtcblxuICAgICAgLy8gaGFuZGxlIExpbmsgSGVhZGVyIChhdm9pZCB1bnNhZmUgaGVhZGVyIHdhcm5pbmcgYnkgZXhpc3RlbmNlIHRlc3RpbmcpXG4gICAgICB2YXIgY29udGVudFR5cGUgPSByZXEuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgdmFyIGxpbmtIZWFkZXI7XG4gICAgICBpZihybGluay50ZXN0KHJlcS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpIHtcbiAgICAgICAgbGlua0hlYWRlciA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcignTGluaycpO1xuICAgICAgfVxuICAgICAgaWYobGlua0hlYWRlciAmJiBjb250ZW50VHlwZSAhPT0gJ2FwcGxpY2F0aW9uL2xkK2pzb24nKSB7XG4gICAgICAgIC8vIG9ubHkgMSByZWxhdGVkIGxpbmsgaGVhZGVyIHBlcm1pdHRlZFxuICAgICAgICBsaW5rSGVhZGVyID0ganNvbmxkLnBhcnNlTGlua0hlYWRlcihsaW5rSGVhZGVyKVtMSU5LX0hFQURFUl9SRUxdO1xuICAgICAgICBpZihfaXNBcnJheShsaW5rSGVhZGVyKSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQsIGl0IGhhcyBtb3JlIHRoYW4gb25lICcgK1xuICAgICAgICAgICAgJ2Fzc29jaWF0ZWQgSFRUUCBMaW5rIEhlYWRlci4nLFxuICAgICAgICAgICAgJ2pzb25sZC5JbnZhbGlkVXJsJyxcbiAgICAgICAgICAgIHtjb2RlOiAnbXVsdGlwbGUgY29udGV4dCBsaW5rIGhlYWRlcnMnLCB1cmw6IHVybH0pLCBkb2MpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGxpbmtIZWFkZXIpIHtcbiAgICAgICAgICBkb2MuY29udGV4dFVybCA9IGxpbmtIZWFkZXIudGFyZ2V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRvYyk7XG4gICAgfTtcbiAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnVVJMIGNvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQsIGFuIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgICdqc29ubGQuTG9hZERvY3VtZW50RXJyb3InLFxuICAgICAgICB7Y29kZTogJ2xvYWRpbmcgZG9jdW1lbnQgZmFpbGVkJywgdXJsOiB1cmx9KSxcbiAgICAgICAge2NvbnRleHRVcmw6IG51bGwsIGRvY3VtZW50VXJsOiB1cmwsIGRvY3VtZW50OiBudWxsfSk7XG4gICAgfTtcbiAgICByZXEub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2xkK2pzb24sIGFwcGxpY2F0aW9uL2pzb24nKTtcbiAgICByZXEuc2VuZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEFzc2lnbnMgdGhlIGRlZmF1bHQgZG9jdW1lbnQgbG9hZGVyIGZvciBleHRlcm5hbCBkb2N1bWVudCBVUkxzIHRvIGEgYnVpbHQtaW5cbiAqIGRlZmF1bHQuIFN1cHBvcnRlZCB0eXBlcyBjdXJyZW50bHkgaW5jbHVkZTogJ2pxdWVyeScgYW5kICdub2RlJy5cbiAqXG4gKiBUbyB1c2UgdGhlIGpxdWVyeSBkb2N1bWVudCBsb2FkZXIsIHRoZSBmaXJzdCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHJlZmVyZW5jZVxuICogdG8gdGhlIG1haW4ganF1ZXJ5IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gdHlwZSB0aGUgdHlwZSB0byBzZXQuXG4gKiBAcGFyYW0gW3BhcmFtc10gdGhlIHBhcmFtZXRlcnMgcmVxdWlyZWQgdG8gdXNlIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKi9cbmpzb25sZC51c2VEb2N1bWVudExvYWRlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYoISh0eXBlIGluIGpzb25sZC5kb2N1bWVudExvYWRlcnMpKSB7XG4gICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgJ1Vua25vd24gZG9jdW1lbnQgbG9hZGVyIHR5cGU6IFwiJyArIHR5cGUgKyAnXCInLFxuICAgICAgJ2pzb25sZC5Vbmtub3duRG9jdW1lbnRMb2FkZXInLFxuICAgICAge3R5cGU6IHR5cGV9KTtcbiAgfVxuXG4gIC8vIHNldCBkb2N1bWVudCBsb2FkZXJcbiAganNvbmxkLmRvY3VtZW50TG9hZGVyID0ganNvbmxkLmRvY3VtZW50TG9hZGVyc1t0eXBlXS5hcHBseShcbiAgICBqc29ubGQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgYSBsb2NhbCBjb250ZXh0LCByZXNvbHZpbmcgYW55IFVSTHMgYXMgbmVjZXNzYXJ5LCBhbmQgcmV0dXJucyBhXG4gKiBuZXcgYWN0aXZlIGNvbnRleHQgaW4gaXRzIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSBhY3RpdmVDdHggdGhlIGN1cnJlbnQgYWN0aXZlIGNvbnRleHQuXG4gKiBAcGFyYW0gbG9jYWxDdHggdGhlIGxvY2FsIGNvbnRleHQgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2RvY3VtZW50TG9hZGVyKHVybCwgY2FsbGJhY2soZXJyLCByZW1vdGVEb2MpKV0gdGhlIGRvY3VtZW50IGxvYWRlci5cbiAqIEBwYXJhbSBjYWxsYmFjayhlcnIsIGN0eCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmpzb25sZC5wcm9jZXNzQ29udGV4dCA9IGZ1bmN0aW9uKGFjdGl2ZUN0eCwgbG9jYWxDdHgpIHtcbiAgLy8gZ2V0IGFyZ3VtZW50c1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIgY2FsbGJhY2tBcmcgPSAyO1xuICBpZihhcmd1bWVudHMubGVuZ3RoID4gMykge1xuICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbMl0gfHwge307XG4gICAgY2FsbGJhY2tBcmcgKz0gMTtcbiAgfVxuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbY2FsbGJhY2tBcmddO1xuXG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYoISgnYmFzZScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmJhc2UgPSAnJztcbiAgfVxuICBpZighKCdkb2N1bWVudExvYWRlcicgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmRvY3VtZW50TG9hZGVyID0ganNvbmxkLmxvYWREb2N1bWVudDtcbiAgfVxuXG4gIC8vIHJldHVybiBpbml0aWFsIGNvbnRleHQgZWFybHkgZm9yIG51bGwgY29udGV4dFxuICBpZihsb2NhbEN0eCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBfZ2V0SW5pdGlhbENvbnRleHQob3B0aW9ucykpO1xuICB9XG5cbiAgLy8gcmV0cmlldmUgVVJMcyBpbiBsb2NhbEN0eFxuICBsb2NhbEN0eCA9IF9jbG9uZShsb2NhbEN0eCk7XG4gIGlmKCEoX2lzT2JqZWN0KGxvY2FsQ3R4KSAmJiAnQGNvbnRleHQnIGluIGxvY2FsQ3R4KSkge1xuICAgIGxvY2FsQ3R4ID0geydAY29udGV4dCc6IGxvY2FsQ3R4fTtcbiAgfVxuICBfcmV0cmlldmVDb250ZXh0VXJscyhsb2NhbEN0eCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBjdHgpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gcHJvY2VzcyBjb250ZXh0XG4gICAgICBjdHggPSBuZXcgUHJvY2Vzc29yKCkucHJvY2Vzc0NvbnRleHQoYWN0aXZlQ3R4LCBjdHgsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2goZXgpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhleCk7XG4gICAgfVxuICAgIGNhbGxiYWNrKG51bGwsIGN0eCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHN1YmplY3QgaGFzIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byBjaGVjay5cbiAqIEBwYXJhbSBwcm9wZXJ0eSB0aGUgcHJvcGVydHkgdG8gbG9vayBmb3IuXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSBzdWJqZWN0IGhhcyB0aGUgZ2l2ZW4gcHJvcGVydHksIGZhbHNlIGlmIG5vdC5cbiAqL1xuanNvbmxkLmhhc1Byb3BlcnR5ID0gZnVuY3Rpb24oc3ViamVjdCwgcHJvcGVydHkpIHtcbiAgdmFyIHJ2YWwgPSBmYWxzZTtcbiAgaWYocHJvcGVydHkgaW4gc3ViamVjdCkge1xuICAgIHZhciB2YWx1ZSA9IHN1YmplY3RbcHJvcGVydHldO1xuICAgIHJ2YWwgPSAoIV9pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPiAwKTtcbiAgfVxuICByZXR1cm4gcnZhbDtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gc3ViamVjdC5cbiAqXG4gKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byBjaGVjay5cbiAqIEBwYXJhbSBwcm9wZXJ0eSB0aGUgcHJvcGVydHkgdG8gY2hlY2suXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgZXhpc3RzLCBmYWxzZSBpZiBub3QuXG4gKi9cbmpzb25sZC5oYXNWYWx1ZSA9IGZ1bmN0aW9uKHN1YmplY3QsIHByb3BlcnR5LCB2YWx1ZSkge1xuICB2YXIgcnZhbCA9IGZhbHNlO1xuICBpZihqc29ubGQuaGFzUHJvcGVydHkoc3ViamVjdCwgcHJvcGVydHkpKSB7XG4gICAgdmFyIHZhbCA9IHN1YmplY3RbcHJvcGVydHldO1xuICAgIHZhciBpc0xpc3QgPSBfaXNMaXN0KHZhbCk7XG4gICAgaWYoX2lzQXJyYXkodmFsKSB8fCBpc0xpc3QpIHtcbiAgICAgIGlmKGlzTGlzdCkge1xuICAgICAgICB2YWwgPSB2YWxbJ0BsaXN0J107XG4gICAgICB9XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmKGpzb25sZC5jb21wYXJlVmFsdWVzKHZhbHVlLCB2YWxbaV0pKSB7XG4gICAgICAgICAgcnZhbCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYoIV9pc0FycmF5KHZhbHVlKSkge1xuICAgICAgLy8gYXZvaWQgbWF0Y2hpbmcgdGhlIHNldCBvZiB2YWx1ZXMgd2l0aCBhbiBhcnJheSB2YWx1ZSBwYXJhbWV0ZXJcbiAgICAgIHJ2YWwgPSBqc29ubGQuY29tcGFyZVZhbHVlcyh2YWx1ZSwgdmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ2YWw7XG59O1xuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byBhIHN1YmplY3QuIElmIHRoZSB2YWx1ZSBpcyBhbiBhcnJheSwgYWxsIHZhbHVlcyBpbiB0aGVcbiAqIGFycmF5IHdpbGwgYmUgYWRkZWQuXG4gKlxuICogQHBhcmFtIHN1YmplY3QgdGhlIHN1YmplY3QgdG8gYWRkIHRoZSB2YWx1ZSB0by5cbiAqIEBwYXJhbSBwcm9wZXJ0eSB0aGUgcHJvcGVydHkgdGhhdCByZWxhdGVzIHRoZSB2YWx1ZSB0byB0aGUgc3ViamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gYWRkLlxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyB0byB1c2U6XG4gKiAgICAgICAgW3Byb3BlcnR5SXNBcnJheV0gdHJ1ZSBpZiB0aGUgcHJvcGVydHkgaXMgYWx3YXlzIGFuIGFycmF5LCBmYWxzZVxuICogICAgICAgICAgaWYgbm90IChkZWZhdWx0OiBmYWxzZSkuXG4gKiAgICAgICAgW2FsbG93RHVwbGljYXRlXSB0cnVlIHRvIGFsbG93IGR1cGxpY2F0ZXMsIGZhbHNlIG5vdCB0byAodXNlcyBhXG4gKiAgICAgICAgICBzaW1wbGUgc2hhbGxvdyBjb21wYXJpc29uIG9mIHN1YmplY3QgSUQgb3IgdmFsdWUpIChkZWZhdWx0OiB0cnVlKS5cbiAqL1xuanNvbmxkLmFkZFZhbHVlID0gZnVuY3Rpb24oc3ViamVjdCwgcHJvcGVydHksIHZhbHVlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZighKCdwcm9wZXJ0eUlzQXJyYXknIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkgPSBmYWxzZTtcbiAgfVxuICBpZighKCdhbGxvd0R1cGxpY2F0ZScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmFsbG93RHVwbGljYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmKF9pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmKHZhbHVlLmxlbmd0aCA9PT0gMCAmJiBvcHRpb25zLnByb3BlcnR5SXNBcnJheSAmJlxuICAgICAgIShwcm9wZXJ0eSBpbiBzdWJqZWN0KSkge1xuICAgICAgc3ViamVjdFtwcm9wZXJ0eV0gPSBbXTtcbiAgICB9XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgICBqc29ubGQuYWRkVmFsdWUoc3ViamVjdCwgcHJvcGVydHksIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZihwcm9wZXJ0eSBpbiBzdWJqZWN0KSB7XG4gICAgLy8gY2hlY2sgaWYgc3ViamVjdCBhbHJlYWR5IGhhcyB2YWx1ZSBpZiBkdXBsaWNhdGVzIG5vdCBhbGxvd2VkXG4gICAgdmFyIGhhc1ZhbHVlID0gKCFvcHRpb25zLmFsbG93RHVwbGljYXRlICYmXG4gICAgICBqc29ubGQuaGFzVmFsdWUoc3ViamVjdCwgcHJvcGVydHksIHZhbHVlKSk7XG5cbiAgICAvLyBtYWtlIHByb3BlcnR5IGFuIGFycmF5IGlmIHZhbHVlIG5vdCBwcmVzZW50IG9yIGFsd2F5cyBhbiBhcnJheVxuICAgIGlmKCFfaXNBcnJheShzdWJqZWN0W3Byb3BlcnR5XSkgJiZcbiAgICAgICghaGFzVmFsdWUgfHwgb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkpKSB7XG4gICAgICBzdWJqZWN0W3Byb3BlcnR5XSA9IFtzdWJqZWN0W3Byb3BlcnR5XV07XG4gICAgfVxuXG4gICAgLy8gYWRkIG5ldyB2YWx1ZVxuICAgIGlmKCFoYXNWYWx1ZSkge1xuICAgICAgc3ViamVjdFtwcm9wZXJ0eV0ucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGFkZCBuZXcgdmFsdWUgYXMgc2V0IG9yIHNpbmdsZSB2YWx1ZVxuICAgIHN1YmplY3RbcHJvcGVydHldID0gb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkgPyBbdmFsdWVdIDogdmFsdWU7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0cyBhbGwgb2YgdGhlIHZhbHVlcyBmb3IgYSBzdWJqZWN0J3MgcHJvcGVydHkgYXMgYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHN1YmplY3QgdGhlIHN1YmplY3QuXG4gKiBAcGFyYW0gcHJvcGVydHkgdGhlIHByb3BlcnR5LlxuICpcbiAqIEByZXR1cm4gYWxsIG9mIHRoZSB2YWx1ZXMgZm9yIGEgc3ViamVjdCdzIHByb3BlcnR5IGFzIGFuIGFycmF5LlxuICovXG5qc29ubGQuZ2V0VmFsdWVzID0gZnVuY3Rpb24oc3ViamVjdCwgcHJvcGVydHkpIHtcbiAgdmFyIHJ2YWwgPSBzdWJqZWN0W3Byb3BlcnR5XSB8fCBbXTtcbiAgaWYoIV9pc0FycmF5KHJ2YWwpKSB7XG4gICAgcnZhbCA9IFtydmFsXTtcbiAgfVxuICByZXR1cm4gcnZhbDtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHByb3BlcnR5IGZyb20gYSBzdWJqZWN0LlxuICpcbiAqIEBwYXJhbSBzdWJqZWN0IHRoZSBzdWJqZWN0LlxuICogQHBhcmFtIHByb3BlcnR5IHRoZSBwcm9wZXJ0eS5cbiAqL1xuanNvbmxkLnJlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24oc3ViamVjdCwgcHJvcGVydHkpIHtcbiAgZGVsZXRlIHN1YmplY3RbcHJvcGVydHldO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSBhIHN1YmplY3QuXG4gKlxuICogQHBhcmFtIHN1YmplY3QgdGhlIHN1YmplY3QuXG4gKiBAcGFyYW0gcHJvcGVydHkgdGhlIHByb3BlcnR5IHRoYXQgcmVsYXRlcyB0aGUgdmFsdWUgdG8gdGhlIHN1YmplY3QuXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW3Byb3BlcnR5SXNBcnJheV0gdHJ1ZSBpZiB0aGUgcHJvcGVydHkgaXMgYWx3YXlzIGFuIGFycmF5LCBmYWxzZVxuICogICAgICAgICAgICBpZiBub3QgKGRlZmF1bHQ6IGZhbHNlKS5cbiAqL1xuanNvbmxkLnJlbW92ZVZhbHVlID0gZnVuY3Rpb24oc3ViamVjdCwgcHJvcGVydHksIHZhbHVlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZighKCdwcm9wZXJ0eUlzQXJyYXknIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgdmFsdWVcbiAgdmFyIHZhbHVlcyA9IGpzb25sZC5nZXRWYWx1ZXMoc3ViamVjdCwgcHJvcGVydHkpLmZpbHRlcihmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuICFqc29ubGQuY29tcGFyZVZhbHVlcyhlLCB2YWx1ZSk7XG4gIH0pO1xuXG4gIGlmKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICBqc29ubGQucmVtb3ZlUHJvcGVydHkoc3ViamVjdCwgcHJvcGVydHkpO1xuICB9IGVsc2UgaWYodmFsdWVzLmxlbmd0aCA9PT0gMSAmJiAhb3B0aW9ucy5wcm9wZXJ0eUlzQXJyYXkpIHtcbiAgICBzdWJqZWN0W3Byb3BlcnR5XSA9IHZhbHVlc1swXTtcbiAgfSBlbHNlIHtcbiAgICBzdWJqZWN0W3Byb3BlcnR5XSA9IHZhbHVlcztcbiAgfVxufTtcblxuLyoqXG4gKiBDb21wYXJlcyB0d28gSlNPTi1MRCB2YWx1ZXMgZm9yIGVxdWFsaXR5LiBUd28gSlNPTi1MRCB2YWx1ZXMgd2lsbCBiZVxuICogY29uc2lkZXJlZCBlcXVhbCBpZjpcbiAqXG4gKiAxLiBUaGV5IGFyZSBib3RoIHByaW1pdGl2ZXMgb2YgdGhlIHNhbWUgdHlwZSBhbmQgdmFsdWUuXG4gKiAyLiBUaGV5IGFyZSBib3RoIEB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBAdmFsdWUsIEB0eXBlLCBAbGFuZ3VhZ2UsXG4gKiAgIGFuZCBAaW5kZXgsIE9SXG4gKiAzLiBUaGV5IGJvdGggaGF2ZSBAaWRzIHRoZXkgYXJlIHRoZSBzYW1lLlxuICpcbiAqIEBwYXJhbSB2MSB0aGUgZmlyc3QgdmFsdWUuXG4gKiBAcGFyYW0gdjIgdGhlIHNlY29uZCB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdjEgYW5kIHYyIGFyZSBjb25zaWRlcmVkIGVxdWFsLCBmYWxzZSBpZiBub3QuXG4gKi9cbmpzb25sZC5jb21wYXJlVmFsdWVzID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gIC8vIDEuIGVxdWFsIHByaW1pdGl2ZXNcbiAgaWYodjEgPT09IHYyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyAyLiBlcXVhbCBAdmFsdWVzXG4gIGlmKF9pc1ZhbHVlKHYxKSAmJiBfaXNWYWx1ZSh2MikgJiZcbiAgICB2MVsnQHZhbHVlJ10gPT09IHYyWydAdmFsdWUnXSAmJlxuICAgIHYxWydAdHlwZSddID09PSB2MlsnQHR5cGUnXSAmJlxuICAgIHYxWydAbGFuZ3VhZ2UnXSA9PT0gdjJbJ0BsYW5ndWFnZSddICYmXG4gICAgdjFbJ0BpbmRleCddID09PSB2MlsnQGluZGV4J10pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIDMuIGVxdWFsIEBpZHNcbiAgaWYoX2lzT2JqZWN0KHYxKSAmJiAoJ0BpZCcgaW4gdjEpICYmIF9pc09iamVjdCh2MikgJiYgKCdAaWQnIGluIHYyKSkge1xuICAgIHJldHVybiB2MVsnQGlkJ10gPT09IHYyWydAaWQnXTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBhY3RpdmUgY29udGV4dCBrZXkgYW5kIHR5cGUsIG51bGwgaWYgbm9uZSBpc1xuICogc2V0LlxuICpcbiAqIEBwYXJhbSBjdHggdGhlIGFjdGl2ZSBjb250ZXh0LlxuICogQHBhcmFtIGtleSB0aGUgY29udGV4dCBrZXkuXG4gKiBAcGFyYW0gW3R5cGVdIHRoZSB0eXBlIG9mIHZhbHVlIHRvIGdldCAoZWc6ICdAaWQnLCAnQHR5cGUnKSwgaWYgbm90XG4gKiAgICAgICAgICBzcGVjaWZpZWQgZ2V0cyB0aGUgZW50aXJlIGVudHJ5IGZvciBhIGtleSwgbnVsbCBpZiBub3QgZm91bmQuXG4gKlxuICogQHJldHVybiB0aGUgdmFsdWUuXG4gKi9cbmpzb25sZC5nZXRDb250ZXh0VmFsdWUgPSBmdW5jdGlvbihjdHgsIGtleSwgdHlwZSkge1xuICB2YXIgcnZhbCA9IG51bGw7XG5cbiAgLy8gcmV0dXJuIG51bGwgZm9yIGludmFsaWQga2V5XG4gIGlmKGtleSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBydmFsO1xuICB9XG5cbiAgLy8gZ2V0IGRlZmF1bHQgbGFuZ3VhZ2VcbiAgaWYodHlwZSA9PT0gJ0BsYW5ndWFnZScgJiYgKHR5cGUgaW4gY3R4KSkge1xuICAgIHJ2YWwgPSBjdHhbdHlwZV07XG4gIH1cblxuICAvLyBnZXQgc3BlY2lmaWMgZW50cnkgaW5mb3JtYXRpb25cbiAgaWYoY3R4Lm1hcHBpbmdzW2tleV0pIHtcbiAgICB2YXIgZW50cnkgPSBjdHgubWFwcGluZ3Nba2V5XTtcblxuICAgIGlmKF9pc1VuZGVmaW5lZCh0eXBlKSkge1xuICAgICAgLy8gcmV0dXJuIHdob2xlIGVudHJ5XG4gICAgICBydmFsID0gZW50cnk7XG4gICAgfSBlbHNlIGlmKHR5cGUgaW4gZW50cnkpIHtcbiAgICAgIC8vIHJldHVybiBlbnRyeSB2YWx1ZSBmb3IgdHlwZVxuICAgICAgcnZhbCA9IGVudHJ5W3R5cGVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydmFsO1xufTtcblxuLyoqIFJlZ2lzdGVyZWQgUkRGIGRhdGFzZXQgcGFyc2VycyBoYXNoZWQgYnkgY29udGVudC10eXBlLiAqL1xudmFyIF9yZGZQYXJzZXJzID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFuIFJERiBkYXRhc2V0IHBhcnNlciBieSBjb250ZW50LXR5cGUsIGZvciB1c2Ugd2l0aFxuICoganNvbmxkLmZyb21SREYuIEFuIFJERiBkYXRhc2V0IHBhcnNlciB3aWxsIGFsd2F5cyBiZSBnaXZlbiB0d28gcGFyYW1ldGVycyxcbiAqIGEgc3RyaW5nIG9mIGlucHV0IGFuZCBhIGNhbGxiYWNrLiBBbiBSREYgZGF0YXNldCBwYXJzZXIgY2FuIGJlIHN5bmNocm9ub3VzXG4gKiBvciBhc3luY2hyb25vdXMuXG4gKlxuICogSWYgdGhlIHBhcnNlciBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZCBvciBudWxsIHRoZW4gaXQgd2lsbCBiZSBhc3N1bWVkIHRvXG4gKiBiZSBhc3luY2hyb25vdXMgdy9hIGNvbnRpbnVhdGlvbi1wYXNzaW5nIHN0eWxlIGFuZCB0aGUgY2FsbGJhY2sgcGFyYW1ldGVyXG4gKiBnaXZlbiB0byB0aGUgcGFyc2VyIE1VU1QgYmUgaW52b2tlZC5cbiAqXG4gKiBJZiBpdCByZXR1cm5zIGEgUHJvbWlzZSwgdGhlbiBpdCB3aWxsIGJlIGFzc3VtZWQgdG8gYmUgYXN5bmNocm9ub3VzLCBidXQgdGhlXG4gKiBjYWxsYmFjayBwYXJhbWV0ZXIgTVVTVCBOT1QgYmUgaW52b2tlZC4gSXQgc2hvdWxkIGluc3RlYWQgYmUgaWdub3JlZC5cbiAqXG4gKiBJZiBpdCByZXR1cm5zIGFuIFJERiBkYXRhc2V0LCBpdCB3aWxsIGJlIGFzc3VtZWQgdG8gYmUgc3luY2hyb25vdXMgYW5kIHRoZVxuICogY2FsbGJhY2sgcGFyYW1ldGVyIE1VU1QgTk9UIGJlIGludm9rZWQuIEl0IHNob3VsZCBpbnN0ZWFkIGJlIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIGNvbnRlbnRUeXBlIHRoZSBjb250ZW50LXR5cGUgZm9yIHRoZSBwYXJzZXIuXG4gKiBAcGFyYW0gcGFyc2VyKGlucHV0LCBjYWxsYmFjayhlcnIsIGRhdGFzZXQpKSB0aGUgcGFyc2VyIGZ1bmN0aW9uICh0YWtlcyBhXG4gKiAgICAgICAgICBzdHJpbmcgYXMgYSBwYXJhbWV0ZXIgYW5kIGVpdGhlciByZXR1cm5zIG51bGwvdW5kZWZpbmVkIGFuZCB1c2VzXG4gKiAgICAgICAgICB0aGUgZ2l2ZW4gY2FsbGJhY2ssIHJldHVybnMgYSBQcm9taXNlLCBvciByZXR1cm5zIGFuIFJERiBkYXRhc2V0KS5cbiAqL1xuanNvbmxkLnJlZ2lzdGVyUkRGUGFyc2VyID0gZnVuY3Rpb24oY29udGVudFR5cGUsIHBhcnNlcikge1xuICBfcmRmUGFyc2Vyc1tjb250ZW50VHlwZV0gPSBwYXJzZXI7XG59O1xuXG4vKipcbiAqIFVucmVnaXN0ZXJzIGFuIFJERiBkYXRhc2V0IHBhcnNlciBieSBjb250ZW50LXR5cGUuXG4gKlxuICogQHBhcmFtIGNvbnRlbnRUeXBlIHRoZSBjb250ZW50LXR5cGUgZm9yIHRoZSBwYXJzZXIuXG4gKi9cbmpzb25sZC51bnJlZ2lzdGVyUkRGUGFyc2VyID0gZnVuY3Rpb24oY29udGVudFR5cGUpIHtcbiAgZGVsZXRlIF9yZGZQYXJzZXJzW2NvbnRlbnRUeXBlXTtcbn07XG5cbmlmKF9ub2RlanMpIHtcbiAgLy8gbmVlZGVkIGZvciBzZXJpYWxpemF0aW9uIG9mIFhNTCBsaXRlcmFsc1xuICBpZih0eXBlb2YgWE1MU2VyaWFsaXplciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgWE1MU2VyaWFsaXplciA9IG51bGw7XG4gIH1cbiAgaWYodHlwZW9mIE5vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIE5vZGUgPSB7XG4gICAgICBFTEVNRU5UX05PREU6IDEsXG4gICAgICBBVFRSSUJVVEVfTk9ERTogMixcbiAgICAgIFRFWFRfTk9ERTogMyxcbiAgICAgIENEQVRBX1NFQ1RJT05fTk9ERTogNCxcbiAgICAgIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTogNSxcbiAgICAgIEVOVElUWV9OT0RFOiA2LFxuICAgICAgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOiA3LFxuICAgICAgQ09NTUVOVF9OT0RFOiA4LFxuICAgICAgRE9DVU1FTlRfTk9ERTogOSxcbiAgICAgIERPQ1VNRU5UX1RZUEVfTk9ERTogMTAsXG4gICAgICBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOiAxMSxcbiAgICAgIE5PVEFUSU9OX05PREU6MTJcbiAgICB9O1xuICB9XG59XG5cbi8vIGNvbnN0YW50c1xudmFyIFhTRF9CT09MRUFOID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW4nO1xudmFyIFhTRF9ET1VCTEUgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZG91YmxlJztcbnZhciBYU0RfSU5URUdFUiA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNpbnRlZ2VyJztcbnZhciBYU0RfU1RSSU5HID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI3N0cmluZyc7XG5cbnZhciBSREYgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyc7XG52YXIgUkRGX0xJU1QgPSBSREYgKyAnTGlzdCc7XG52YXIgUkRGX0ZJUlNUID0gUkRGICsgJ2ZpcnN0JztcbnZhciBSREZfUkVTVCA9IFJERiArICdyZXN0JztcbnZhciBSREZfTklMID0gUkRGICsgJ25pbCc7XG52YXIgUkRGX1RZUEUgPSBSREYgKyAndHlwZSc7XG52YXIgUkRGX1BMQUlOX0xJVEVSQUwgPSBSREYgKyAnUGxhaW5MaXRlcmFsJztcbnZhciBSREZfWE1MX0xJVEVSQUwgPSBSREYgKyAnWE1MTGl0ZXJhbCc7XG52YXIgUkRGX09CSkVDVCA9IFJERiArICdvYmplY3QnO1xudmFyIFJERl9MQU5HU1RSSU5HID0gUkRGICsgJ2xhbmdTdHJpbmcnO1xuXG52YXIgTElOS19IRUFERVJfUkVMID0gJ2h0dHA6Ly93d3cudzMub3JnL25zL2pzb24tbGQjY29udGV4dCc7XG52YXIgTUFYX0NPTlRFWFRfVVJMUyA9IDEwO1xuXG4vKipcbiAqIEEgSlNPTi1MRCBFcnJvci5cbiAqXG4gKiBAcGFyYW0gbXNnIHRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHR5cGUgdGhlIGVycm9yIHR5cGUuXG4gKiBAcGFyYW0gZGV0YWlscyB0aGUgZXJyb3IgZGV0YWlscy5cbiAqL1xudmFyIEpzb25MZEVycm9yID0gZnVuY3Rpb24obXNnLCB0eXBlLCBkZXRhaWxzKSB7XG4gIGlmKF9ub2RlanMpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2UgaWYodHlwZW9mIEVycm9yICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG4gIHRoaXMubmFtZSA9IHR5cGUgfHwgJ2pzb25sZC5FcnJvcic7XG4gIHRoaXMubWVzc2FnZSA9IG1zZyB8fCAnQW4gdW5zcGVjaWZpZWQgSlNPTi1MRCBlcnJvciBvY2N1cnJlZC4nO1xuICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzIHx8IHt9O1xufTtcbmlmKF9ub2RlanMpIHtcbiAgcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzKEpzb25MZEVycm9yLCBFcnJvcik7XG59IGVsc2UgaWYodHlwZW9mIEVycm9yICE9PSAndW5kZWZpbmVkJykge1xuICBKc29uTGRFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IEpTT04tTEQgUHJvY2Vzc29yLlxuICovXG52YXIgUHJvY2Vzc29yID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjb21wYWN0cyBhbiBlbGVtZW50IHVzaW5nIHRoZSBnaXZlbiBhY3RpdmUgY29udGV4dC4gQWxsIHZhbHVlc1xuICogbXVzdCBiZSBpbiBleHBhbmRlZCBmb3JtIGJlZm9yZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgYWN0aXZlIGNvbnRleHQgdG8gdXNlLlxuICogQHBhcmFtIGFjdGl2ZVByb3BlcnR5IHRoZSBjb21wYWN0ZWQgcHJvcGVydHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiAgICAgICAgICB0byBjb21wYWN0LCBudWxsIGZvciBub25lLlxuICogQHBhcmFtIGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gY29tcGFjdC5cbiAqIEBwYXJhbSBvcHRpb25zIHRoZSBjb21wYWN0aW9uIG9wdGlvbnMuXG4gKlxuICogQHJldHVybiB0aGUgY29tcGFjdGVkIHZhbHVlLlxuICovXG5Qcm9jZXNzb3IucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbihcbiAgYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAvLyByZWN1cnNpdmVseSBjb21wYWN0IGFycmF5XG4gIGlmKF9pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgdmFyIHJ2YWwgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7ICsraSkge1xuICAgICAgLy8gY29tcGFjdCwgZHJvcHBpbmcgYW55IG51bGwgdmFsdWVzXG4gICAgICB2YXIgY29tcGFjdGVkID0gdGhpcy5jb21wYWN0KFxuICAgICAgICBhY3RpdmVDdHgsIGFjdGl2ZVByb3BlcnR5LCBlbGVtZW50W2ldLCBvcHRpb25zKTtcbiAgICAgIGlmKGNvbXBhY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICBydmFsLnB1c2goY29tcGFjdGVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYob3B0aW9ucy5jb21wYWN0QXJyYXlzICYmIHJ2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyB1c2Ugc2luZ2xlIGVsZW1lbnQgaWYgbm8gY29udGFpbmVyIGlzIHNwZWNpZmllZFxuICAgICAgdmFyIGNvbnRhaW5lciA9IGpzb25sZC5nZXRDb250ZXh0VmFsdWUoXG4gICAgICAgIGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAY29udGFpbmVyJyk7XG4gICAgICBpZihjb250YWluZXIgPT09IG51bGwpIHtcbiAgICAgICAgcnZhbCA9IHJ2YWxbMF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydmFsO1xuICB9XG5cbiAgLy8gcmVjdXJzaXZlbHkgY29tcGFjdCBvYmplY3RcbiAgaWYoX2lzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgaWYob3B0aW9ucy5saW5rICYmICdAaWQnIGluIGVsZW1lbnQgJiYgZWxlbWVudFsnQGlkJ10gaW4gb3B0aW9ucy5saW5rKSB7XG4gICAgICAvLyBjaGVjayBmb3IgYSBsaW5rZWQgZWxlbWVudCB0byByZXVzZVxuICAgICAgdmFyIGxpbmtlZCA9IG9wdGlvbnMubGlua1tlbGVtZW50WydAaWQnXV07XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGlua2VkLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmKGxpbmtlZFtpXS5leHBhbmRlZCA9PT0gZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBsaW5rZWRbaV0uY29tcGFjdGVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZG8gdmFsdWUgY29tcGFjdGlvbiBvbiBAdmFsdWVzIGFuZCBzdWJqZWN0IHJlZmVyZW5jZXNcbiAgICBpZihfaXNWYWx1ZShlbGVtZW50KSB8fCBfaXNTdWJqZWN0UmVmZXJlbmNlKGVsZW1lbnQpKSB7XG4gICAgICB2YXIgcnZhbCA9IF9jb21wYWN0VmFsdWUoYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgZWxlbWVudCk7XG4gICAgICBpZihvcHRpb25zLmxpbmsgJiYgX2lzU3ViamVjdFJlZmVyZW5jZShlbGVtZW50KSkge1xuICAgICAgICAvLyBzdG9yZSBsaW5rZWQgZWxlbWVudFxuICAgICAgICBpZighKGVsZW1lbnRbJ0BpZCddIGluIG9wdGlvbnMubGluaykpIHtcbiAgICAgICAgICBvcHRpb25zLmxpbmtbZWxlbWVudFsnQGlkJ11dID0gW107XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5saW5rW2VsZW1lbnRbJ0BpZCddXS5wdXNoKHtleHBhbmRlZDogZWxlbWVudCwgY29tcGFjdGVkOiBydmFsfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnZhbDtcbiAgICB9XG5cbiAgICAvLyBGSVhNRTogYXZvaWQgbWlzdXNlIG9mIGFjdGl2ZSBwcm9wZXJ0eSBhcyBhbiBleHBhbmRlZCBwcm9wZXJ0eT9cbiAgICB2YXIgaW5zaWRlUmV2ZXJzZSA9IChhY3RpdmVQcm9wZXJ0eSA9PT0gJ0ByZXZlcnNlJyk7XG5cbiAgICB2YXIgcnZhbCA9IHt9O1xuXG4gICAgaWYob3B0aW9ucy5saW5rICYmICdAaWQnIGluIGVsZW1lbnQpIHtcbiAgICAgIC8vIHN0b3JlIGxpbmtlZCBlbGVtZW50XG4gICAgICBpZighKGVsZW1lbnRbJ0BpZCddIGluIG9wdGlvbnMubGluaykpIHtcbiAgICAgICAgb3B0aW9ucy5saW5rW2VsZW1lbnRbJ0BpZCddXSA9IFtdO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5saW5rW2VsZW1lbnRbJ0BpZCddXS5wdXNoKHtleHBhbmRlZDogZWxlbWVudCwgY29tcGFjdGVkOiBydmFsfSk7XG4gICAgfVxuXG4gICAgLy8gcHJvY2VzcyBlbGVtZW50IGtleXMgaW4gb3JkZXJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVsZW1lbnQpLnNvcnQoKTtcbiAgICBmb3IodmFyIGtpID0gMDsga2kgPCBrZXlzLmxlbmd0aDsgKytraSkge1xuICAgICAgdmFyIGV4cGFuZGVkUHJvcGVydHkgPSBrZXlzW2tpXTtcbiAgICAgIHZhciBleHBhbmRlZFZhbHVlID0gZWxlbWVudFtleHBhbmRlZFByb3BlcnR5XTtcblxuICAgICAgLy8gY29tcGFjdCBAaWQgYW5kIEB0eXBlKHMpXG4gICAgICBpZihleHBhbmRlZFByb3BlcnR5ID09PSAnQGlkJyB8fCBleHBhbmRlZFByb3BlcnR5ID09PSAnQHR5cGUnKSB7XG4gICAgICAgIHZhciBjb21wYWN0ZWRWYWx1ZTtcblxuICAgICAgICAvLyBjb21wYWN0IHNpbmdsZSBAaWRcbiAgICAgICAgaWYoX2lzU3RyaW5nKGV4cGFuZGVkVmFsdWUpKSB7XG4gICAgICAgICAgY29tcGFjdGVkVmFsdWUgPSBfY29tcGFjdElyaShcbiAgICAgICAgICAgIGFjdGl2ZUN0eCwgZXhwYW5kZWRWYWx1ZSwgbnVsbCxcbiAgICAgICAgICAgIHt2b2NhYjogKGV4cGFuZGVkUHJvcGVydHkgPT09ICdAdHlwZScpfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXhwYW5kZWQgdmFsdWUgbXVzdCBiZSBhIEB0eXBlIGFycmF5XG4gICAgICAgICAgY29tcGFjdGVkVmFsdWUgPSBbXTtcbiAgICAgICAgICBmb3IodmFyIHZpID0gMDsgdmkgPCBleHBhbmRlZFZhbHVlLmxlbmd0aDsgKyt2aSkge1xuICAgICAgICAgICAgY29tcGFjdGVkVmFsdWUucHVzaChfY29tcGFjdElyaShcbiAgICAgICAgICAgICAgYWN0aXZlQ3R4LCBleHBhbmRlZFZhbHVlW3ZpXSwgbnVsbCwge3ZvY2FiOiB0cnVlfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZSBrZXl3b3JkIGFsaWFzIGFuZCBhZGQgdmFsdWVcbiAgICAgICAgdmFyIGFsaWFzID0gX2NvbXBhY3RJcmkoYWN0aXZlQ3R4LCBleHBhbmRlZFByb3BlcnR5KTtcbiAgICAgICAgdmFyIGlzQXJyYXkgPSAoX2lzQXJyYXkoY29tcGFjdGVkVmFsdWUpICYmIGV4cGFuZGVkVmFsdWUubGVuZ3RoID09PSAwKTtcbiAgICAgICAganNvbmxkLmFkZFZhbHVlKFxuICAgICAgICAgIHJ2YWwsIGFsaWFzLCBjb21wYWN0ZWRWYWx1ZSwge3Byb3BlcnR5SXNBcnJheTogaXNBcnJheX0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIEByZXZlcnNlXG4gICAgICBpZihleHBhbmRlZFByb3BlcnR5ID09PSAnQHJldmVyc2UnKSB7XG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNvbXBhY3QgZXhwYW5kZWQgdmFsdWVcbiAgICAgICAgdmFyIGNvbXBhY3RlZFZhbHVlID0gdGhpcy5jb21wYWN0KFxuICAgICAgICAgIGFjdGl2ZUN0eCwgJ0ByZXZlcnNlJywgZXhwYW5kZWRWYWx1ZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGRvdWJsZS1yZXZlcnNlZCBwcm9wZXJ0aWVzXG4gICAgICAgIGZvcih2YXIgY29tcGFjdGVkUHJvcGVydHkgaW4gY29tcGFjdGVkVmFsdWUpIHtcbiAgICAgICAgICBpZihhY3RpdmVDdHgubWFwcGluZ3NbY29tcGFjdGVkUHJvcGVydHldICYmXG4gICAgICAgICAgICBhY3RpdmVDdHgubWFwcGluZ3NbY29tcGFjdGVkUHJvcGVydHldLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbXBhY3RlZFZhbHVlW2NvbXBhY3RlZFByb3BlcnR5XTtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBqc29ubGQuZ2V0Q29udGV4dFZhbHVlKFxuICAgICAgICAgICAgICBhY3RpdmVDdHgsIGNvbXBhY3RlZFByb3BlcnR5LCAnQGNvbnRhaW5lcicpO1xuICAgICAgICAgICAgdmFyIHVzZUFycmF5ID0gKGNvbnRhaW5lciA9PT0gJ0BzZXQnIHx8ICFvcHRpb25zLmNvbXBhY3RBcnJheXMpO1xuICAgICAgICAgICAganNvbmxkLmFkZFZhbHVlKFxuICAgICAgICAgICAgICBydmFsLCBjb21wYWN0ZWRQcm9wZXJ0eSwgdmFsdWUsIHtwcm9wZXJ0eUlzQXJyYXk6IHVzZUFycmF5fSk7XG4gICAgICAgICAgICBkZWxldGUgY29tcGFjdGVkVmFsdWVbY29tcGFjdGVkUHJvcGVydHldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGNvbXBhY3RlZFZhbHVlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gdXNlIGtleXdvcmQgYWxpYXMgYW5kIGFkZCB2YWx1ZVxuICAgICAgICAgIHZhciBhbGlhcyA9IF9jb21wYWN0SXJpKGFjdGl2ZUN0eCwgZXhwYW5kZWRQcm9wZXJ0eSk7XG4gICAgICAgICAganNvbmxkLmFkZFZhbHVlKHJ2YWwsIGFsaWFzLCBjb21wYWN0ZWRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIEBpbmRleCBwcm9wZXJ0eVxuICAgICAgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BpbmRleCcpIHtcbiAgICAgICAgLy8gZHJvcCBAaW5kZXggaWYgaW5zaWRlIGFuIEBpbmRleCBjb250YWluZXJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGpzb25sZC5nZXRDb250ZXh0VmFsdWUoXG4gICAgICAgICAgYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgJ0Bjb250YWluZXInKTtcbiAgICAgICAgaWYoY29udGFpbmVyID09PSAnQGluZGV4Jykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXNlIGtleXdvcmQgYWxpYXMgYW5kIGFkZCB2YWx1ZVxuICAgICAgICB2YXIgYWxpYXMgPSBfY29tcGFjdElyaShhY3RpdmVDdHgsIGV4cGFuZGVkUHJvcGVydHkpO1xuICAgICAgICBqc29ubGQuYWRkVmFsdWUocnZhbCwgYWxpYXMsIGV4cGFuZGVkVmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2tpcCBhcnJheSBwcm9jZXNzaW5nIGZvciBrZXl3b3JkcyB0aGF0IGFyZW4ndCBAZ3JhcGggb3IgQGxpc3RcbiAgICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgIT09ICdAZ3JhcGgnICYmIGV4cGFuZGVkUHJvcGVydHkgIT09ICdAbGlzdCcgJiZcbiAgICAgICAgX2lzS2V5d29yZChleHBhbmRlZFByb3BlcnR5KSkge1xuICAgICAgICAvLyB1c2Uga2V5d29yZCBhbGlhcyBhbmQgYWRkIHZhbHVlIGFzIGlzXG4gICAgICAgIHZhciBhbGlhcyA9IF9jb21wYWN0SXJpKGFjdGl2ZUN0eCwgZXhwYW5kZWRQcm9wZXJ0eSk7XG4gICAgICAgIGpzb25sZC5hZGRWYWx1ZShydmFsLCBhbGlhcywgZXhwYW5kZWRWYWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RlOiBleHBhbmRlZCB2YWx1ZSBtdXN0IGJlIGFuIGFycmF5IGR1ZSB0byBleHBhbnNpb24gYWxnb3JpdGhtLlxuXG4gICAgICAvLyBwcmVzZXJ2ZSBlbXB0eSBhcnJheXNcbiAgICAgIGlmKGV4cGFuZGVkVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBpdGVtQWN0aXZlUHJvcGVydHkgPSBfY29tcGFjdElyaShcbiAgICAgICAgICBhY3RpdmVDdHgsIGV4cGFuZGVkUHJvcGVydHksIGV4cGFuZGVkVmFsdWUsIHt2b2NhYjogdHJ1ZX0sXG4gICAgICAgICAgaW5zaWRlUmV2ZXJzZSk7XG4gICAgICAgIGpzb25sZC5hZGRWYWx1ZShcbiAgICAgICAgICBydmFsLCBpdGVtQWN0aXZlUHJvcGVydHksIGV4cGFuZGVkVmFsdWUsIHtwcm9wZXJ0eUlzQXJyYXk6IHRydWV9KTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVjdXNpdmVseSBwcm9jZXNzIGFycmF5IHZhbHVlc1xuICAgICAgZm9yKHZhciB2aSA9IDA7IHZpIDwgZXhwYW5kZWRWYWx1ZS5sZW5ndGg7ICsrdmkpIHtcbiAgICAgICAgdmFyIGV4cGFuZGVkSXRlbSA9IGV4cGFuZGVkVmFsdWVbdmldO1xuXG4gICAgICAgIC8vIGNvbXBhY3QgcHJvcGVydHkgYW5kIGdldCBjb250YWluZXIgdHlwZVxuICAgICAgICB2YXIgaXRlbUFjdGl2ZVByb3BlcnR5ID0gX2NvbXBhY3RJcmkoXG4gICAgICAgICAgYWN0aXZlQ3R4LCBleHBhbmRlZFByb3BlcnR5LCBleHBhbmRlZEl0ZW0sIHt2b2NhYjogdHJ1ZX0sXG4gICAgICAgICAgaW5zaWRlUmV2ZXJzZSk7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBqc29ubGQuZ2V0Q29udGV4dFZhbHVlKFxuICAgICAgICAgIGFjdGl2ZUN0eCwgaXRlbUFjdGl2ZVByb3BlcnR5LCAnQGNvbnRhaW5lcicpO1xuXG4gICAgICAgIC8vIGdldCBAbGlzdCB2YWx1ZSBpZiBhcHByb3ByaWF0ZVxuICAgICAgICB2YXIgaXNMaXN0ID0gX2lzTGlzdChleHBhbmRlZEl0ZW0pO1xuICAgICAgICB2YXIgbGlzdCA9IG51bGw7XG4gICAgICAgIGlmKGlzTGlzdCkge1xuICAgICAgICAgIGxpc3QgPSBleHBhbmRlZEl0ZW1bJ0BsaXN0J107XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZWN1cnNpdmVseSBjb21wYWN0IGV4cGFuZGVkIGl0ZW1cbiAgICAgICAgdmFyIGNvbXBhY3RlZEl0ZW0gPSB0aGlzLmNvbXBhY3QoXG4gICAgICAgICAgYWN0aXZlQ3R4LCBpdGVtQWN0aXZlUHJvcGVydHksIGlzTGlzdCA/IGxpc3QgOiBleHBhbmRlZEl0ZW0sIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGhhbmRsZSBAbGlzdFxuICAgICAgICBpZihpc0xpc3QpIHtcbiAgICAgICAgICAvLyBlbnN1cmUgQGxpc3QgdmFsdWUgaXMgYW4gYXJyYXlcbiAgICAgICAgICBpZighX2lzQXJyYXkoY29tcGFjdGVkSXRlbSkpIHtcbiAgICAgICAgICAgIGNvbXBhY3RlZEl0ZW0gPSBbY29tcGFjdGVkSXRlbV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoY29udGFpbmVyICE9PSAnQGxpc3QnKSB7XG4gICAgICAgICAgICAvLyB3cmFwIHVzaW5nIEBsaXN0IGFsaWFzXG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IHt9O1xuICAgICAgICAgICAgd3JhcHBlcltfY29tcGFjdElyaShhY3RpdmVDdHgsICdAbGlzdCcpXSA9IGNvbXBhY3RlZEl0ZW07XG4gICAgICAgICAgICBjb21wYWN0ZWRJdGVtID0gd3JhcHBlcjtcblxuICAgICAgICAgICAgLy8gaW5jbHVkZSBAaW5kZXggZnJvbSBleHBhbmRlZCBAbGlzdCwgaWYgYW55XG4gICAgICAgICAgICBpZignQGluZGV4JyBpbiBleHBhbmRlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgY29tcGFjdGVkSXRlbVtfY29tcGFjdElyaShhY3RpdmVDdHgsICdAaW5kZXgnKV0gPVxuICAgICAgICAgICAgICAgIGV4cGFuZGVkSXRlbVsnQGluZGV4J107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGl0ZW1BY3RpdmVQcm9wZXJ0eSBpbiBydmFsKSB7XG4gICAgICAgICAgICAvLyBjYW4ndCB1c2UgQGxpc3QgY29udGFpbmVyIGZvciBtb3JlIHRoYW4gMSBsaXN0XG4gICAgICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAgICdKU09OLUxEIGNvbXBhY3QgZXJyb3I7IHByb3BlcnR5IGhhcyBhIFwiQGxpc3RcIiBAY29udGFpbmVyICcgK1xuICAgICAgICAgICAgICAncnVsZSBidXQgdGhlcmUgaXMgbW9yZSB0aGFuIGEgc2luZ2xlIEBsaXN0IHRoYXQgbWF0Y2hlcyAnICtcbiAgICAgICAgICAgICAgJ3RoZSBjb21wYWN0ZWQgdGVybSBpbiB0aGUgZG9jdW1lbnQuIENvbXBhY3Rpb24gbWlnaHQgbWl4ICcgK1xuICAgICAgICAgICAgICAndW53YW50ZWQgaXRlbXMgaW50byB0aGUgbGlzdC4nLFxuICAgICAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdjb21wYWN0aW9uIHRvIGxpc3Qgb2YgbGlzdHMnfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGxhbmd1YWdlIGFuZCBpbmRleCBtYXBzXG4gICAgICAgIGlmKGNvbnRhaW5lciA9PT0gJ0BsYW5ndWFnZScgfHwgY29udGFpbmVyID09PSAnQGluZGV4Jykge1xuICAgICAgICAgIC8vIGdldCBvciBjcmVhdGUgdGhlIG1hcCBvYmplY3RcbiAgICAgICAgICB2YXIgbWFwT2JqZWN0O1xuICAgICAgICAgIGlmKGl0ZW1BY3RpdmVQcm9wZXJ0eSBpbiBydmFsKSB7XG4gICAgICAgICAgICBtYXBPYmplY3QgPSBydmFsW2l0ZW1BY3RpdmVQcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJ2YWxbaXRlbUFjdGl2ZVByb3BlcnR5XSA9IG1hcE9iamVjdCA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIGNvbnRhaW5lciBpcyBhIGxhbmd1YWdlIG1hcCwgc2ltcGxpZnkgY29tcGFjdGVkIHZhbHVlIHRvXG4gICAgICAgICAgLy8gYSBzaW1wbGUgc3RyaW5nXG4gICAgICAgICAgaWYoY29udGFpbmVyID09PSAnQGxhbmd1YWdlJyAmJiBfaXNWYWx1ZShjb21wYWN0ZWRJdGVtKSkge1xuICAgICAgICAgICAgY29tcGFjdGVkSXRlbSA9IGNvbXBhY3RlZEl0ZW1bJ0B2YWx1ZSddO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFkZCBjb21wYWN0IHZhbHVlIHRvIG1hcCBvYmplY3QgdXNpbmcga2V5IGZyb20gZXhwYW5kZWQgdmFsdWVcbiAgICAgICAgICAvLyBiYXNlZCBvbiB0aGUgY29udGFpbmVyIHR5cGVcbiAgICAgICAgICBqc29ubGQuYWRkVmFsdWUobWFwT2JqZWN0LCBleHBhbmRlZEl0ZW1bY29udGFpbmVyXSwgY29tcGFjdGVkSXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdXNlIGFuIGFycmF5IGlmOiBjb21wYWN0QXJyYXlzIGZsYWcgaXMgZmFsc2UsXG4gICAgICAgICAgLy8gQGNvbnRhaW5lciBpcyBAc2V0IG9yIEBsaXN0ICwgdmFsdWUgaXMgYW4gZW1wdHlcbiAgICAgICAgICAvLyBhcnJheSwgb3Iga2V5IGlzIEBncmFwaFxuICAgICAgICAgIHZhciBpc0FycmF5ID0gKCFvcHRpb25zLmNvbXBhY3RBcnJheXMgfHwgY29udGFpbmVyID09PSAnQHNldCcgfHxcbiAgICAgICAgICAgIGNvbnRhaW5lciA9PT0gJ0BsaXN0JyB8fFxuICAgICAgICAgICAgKF9pc0FycmF5KGNvbXBhY3RlZEl0ZW0pICYmIGNvbXBhY3RlZEl0ZW0ubGVuZ3RoID09PSAwKSB8fFxuICAgICAgICAgICAgZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BsaXN0JyB8fCBleHBhbmRlZFByb3BlcnR5ID09PSAnQGdyYXBoJyk7XG5cbiAgICAgICAgICAvLyBhZGQgY29tcGFjdCB2YWx1ZVxuICAgICAgICAgIGpzb25sZC5hZGRWYWx1ZShcbiAgICAgICAgICAgIHJ2YWwsIGl0ZW1BY3RpdmVQcm9wZXJ0eSwgY29tcGFjdGVkSXRlbSxcbiAgICAgICAgICAgIHtwcm9wZXJ0eUlzQXJyYXk6IGlzQXJyYXl9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydmFsO1xuICB9XG5cbiAgLy8gb25seSBwcmltaXRpdmVzIHJlbWFpbiB3aGljaCBhcmUgYWxyZWFkeSBjb21wYWN0XG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBleHBhbmRzIGFuIGVsZW1lbnQgdXNpbmcgdGhlIGdpdmVuIGNvbnRleHQuIEFueSBjb250ZXh0IGluXG4gKiB0aGUgZWxlbWVudCB3aWxsIGJlIHJlbW92ZWQuIEFsbCBjb250ZXh0IFVSTHMgbXVzdCBoYXZlIGJlZW4gcmV0cmlldmVkXG4gKiBiZWZvcmUgY2FsbGluZyB0aGlzIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0gYWN0aXZlQ3R4IHRoZSBjb250ZXh0IHRvIHVzZS5cbiAqIEBwYXJhbSBhY3RpdmVQcm9wZXJ0eSB0aGUgcHJvcGVydHkgZm9yIHRoZSBlbGVtZW50LCBudWxsIGZvciBub25lLlxuICogQHBhcmFtIGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gZXhwYW5kLlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIGV4cGFuc2lvbiBvcHRpb25zLlxuICogQHBhcmFtIGluc2lkZUxpc3QgdHJ1ZSBpZiB0aGUgZWxlbWVudCBpcyBhIGxpc3QsIGZhbHNlIGlmIG5vdC5cbiAqXG4gKiBAcmV0dXJuIHRoZSBleHBhbmRlZCB2YWx1ZS5cbiAqL1xuUHJvY2Vzc29yLnByb3RvdHlwZS5leHBhbmQgPSBmdW5jdGlvbihcbiAgYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgZWxlbWVudCwgb3B0aW9ucywgaW5zaWRlTGlzdCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gbm90aGluZyB0byBleHBhbmRcbiAgaWYoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmKCFfaXNBcnJheShlbGVtZW50KSAmJiAhX2lzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgLy8gZHJvcCBmcmVlLWZsb2F0aW5nIHNjYWxhcnMgdGhhdCBhcmUgbm90IGluIGxpc3RzXG4gICAgaWYoIWluc2lkZUxpc3QgJiYgKGFjdGl2ZVByb3BlcnR5ID09PSBudWxsIHx8XG4gICAgICBfZXhwYW5kSXJpKGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksIHt2b2NhYjogdHJ1ZX0pID09PSAnQGdyYXBoJykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIGV4cGFuZCBlbGVtZW50IGFjY29yZGluZyB0byB2YWx1ZSBleHBhbnNpb24gcnVsZXNcbiAgICByZXR1cm4gX2V4cGFuZFZhbHVlKGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksIGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gcmVjdXJzaXZlbHkgZXhwYW5kIGFycmF5XG4gIGlmKF9pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgdmFyIHJ2YWwgPSBbXTtcbiAgICB2YXIgY29udGFpbmVyID0ganNvbmxkLmdldENvbnRleHRWYWx1ZShcbiAgICAgIGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAY29udGFpbmVyJyk7XG4gICAgaW5zaWRlTGlzdCA9IGluc2lkZUxpc3QgfHwgY29udGFpbmVyID09PSAnQGxpc3QnO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICAvLyBleHBhbmQgZWxlbWVudFxuICAgICAgdmFyIGUgPSBzZWxmLmV4cGFuZChhY3RpdmVDdHgsIGFjdGl2ZVByb3BlcnR5LCBlbGVtZW50W2ldLCBvcHRpb25zKTtcbiAgICAgIGlmKGluc2lkZUxpc3QgJiYgKF9pc0FycmF5KGUpIHx8IF9pc0xpc3QoZSkpKSB7XG4gICAgICAgIC8vIGxpc3RzIG9mIGxpc3RzIGFyZSBpbGxlZ2FsXG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgbGlzdHMgb2YgbGlzdHMgYXJlIG5vdCBwZXJtaXR0ZWQuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdsaXN0IG9mIGxpc3RzJ30pO1xuICAgICAgfVxuICAgICAgLy8gZHJvcCBudWxsIHZhbHVlc1xuICAgICAgaWYoZSAhPT0gbnVsbCkge1xuICAgICAgICBpZihfaXNBcnJheShlKSkge1xuICAgICAgICAgIHJ2YWwgPSBydmFsLmNvbmNhdChlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydmFsLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJ2YWw7XG4gIH1cblxuICAvLyByZWN1cnNpdmVseSBleHBhbmQgb2JqZWN0OlxuXG4gIC8vIGlmIGVsZW1lbnQgaGFzIGEgY29udGV4dCwgcHJvY2VzcyBpdFxuICBpZignQGNvbnRleHQnIGluIGVsZW1lbnQpIHtcbiAgICBhY3RpdmVDdHggPSBzZWxmLnByb2Nlc3NDb250ZXh0KGFjdGl2ZUN0eCwgZWxlbWVudFsnQGNvbnRleHQnXSwgb3B0aW9ucyk7XG4gIH1cblxuICAvLyBleHBhbmQgdGhlIGFjdGl2ZSBwcm9wZXJ0eVxuICB2YXIgZXhwYW5kZWRBY3RpdmVQcm9wZXJ0eSA9IF9leHBhbmRJcmkoXG4gICAgYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwge3ZvY2FiOiB0cnVlfSk7XG5cbiAgdmFyIHJ2YWwgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlbGVtZW50KS5zb3J0KCk7XG4gIGZvcih2YXIga2kgPSAwOyBraSA8IGtleXMubGVuZ3RoOyArK2tpKSB7XG4gICAgdmFyIGtleSA9IGtleXNba2ldO1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnRba2V5XTtcbiAgICB2YXIgZXhwYW5kZWRWYWx1ZTtcblxuICAgIC8vIHNraXAgQGNvbnRleHRcbiAgICBpZihrZXkgPT09ICdAY29udGV4dCcpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGV4cGFuZCBwcm9wZXJ0eVxuICAgIHZhciBleHBhbmRlZFByb3BlcnR5ID0gX2V4cGFuZElyaShhY3RpdmVDdHgsIGtleSwge3ZvY2FiOiB0cnVlfSk7XG5cbiAgICAvLyBkcm9wIG5vbi1hYnNvbHV0ZSBJUkkga2V5cyB0aGF0IGFyZW4ndCBrZXl3b3Jkc1xuICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgPT09IG51bGwgfHxcbiAgICAgICEoX2lzQWJzb2x1dGVJcmkoZXhwYW5kZWRQcm9wZXJ0eSkgfHwgX2lzS2V5d29yZChleHBhbmRlZFByb3BlcnR5KSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmKF9pc0tleXdvcmQoZXhwYW5kZWRQcm9wZXJ0eSkpIHtcbiAgICAgIGlmKGV4cGFuZGVkQWN0aXZlUHJvcGVydHkgPT09ICdAcmV2ZXJzZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhIGtleXdvcmQgY2Fubm90IGJlIHVzZWQgYXMgYSBAcmV2ZXJzZSAnICtcbiAgICAgICAgICAncHJvcGVydHkuJywgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdpbnZhbGlkIHJldmVyc2UgcHJvcGVydHkgbWFwJywgdmFsdWU6IHZhbHVlfSk7XG4gICAgICB9XG4gICAgICBpZihleHBhbmRlZFByb3BlcnR5IGluIHJ2YWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBjb2xsaWRpbmcga2V5d29yZHMgZGV0ZWN0ZWQuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAgICB7Y29kZTogJ2NvbGxpZGluZyBrZXl3b3JkcycsIGtleXdvcmQ6IGV4cGFuZGVkUHJvcGVydHl9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzeW50YXggZXJyb3IgaWYgQGlkIGlzIG5vdCBhIHN0cmluZ1xuICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgPT09ICdAaWQnICYmICFfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBpZighb3B0aW9ucy5pc0ZyYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgXCJAaWRcIiB2YWx1ZSBtdXN0IGEgc3RyaW5nLicsXG4gICAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsIHtjb2RlOiAnaW52YWxpZCBAaWQgdmFsdWUnLCB2YWx1ZTogdmFsdWV9KTtcbiAgICAgIH1cbiAgICAgIGlmKCFfaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgXCJAaWRcIiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuICcgK1xuICAgICAgICAgICdvYmplY3QuJywgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdpbnZhbGlkIEBpZCB2YWx1ZScsIHZhbHVlOiB2YWx1ZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgPT09ICdAdHlwZScpIHtcbiAgICAgIF92YWxpZGF0ZVR5cGVWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQGdyYXBoIG11c3QgYmUgYW4gYXJyYXkgb3IgYW4gb2JqZWN0XG4gICAgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BncmFwaCcgJiZcbiAgICAgICEoX2lzT2JqZWN0KHZhbHVlKSB8fCBfaXNBcnJheSh2YWx1ZSkpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBcIkBncmFwaFwiIHZhbHVlIG11c3Qgbm90IGJlIGFuICcgK1xuICAgICAgICAnb2JqZWN0IG9yIGFuIGFycmF5LicsXG4gICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLCB7Y29kZTogJ2ludmFsaWQgQGdyYXBoIHZhbHVlJywgdmFsdWU6IHZhbHVlfSk7XG4gICAgfVxuXG4gICAgLy8gQHZhbHVlIG11c3Qgbm90IGJlIGFuIG9iamVjdCBvciBhbiBhcnJheVxuICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgPT09ICdAdmFsdWUnICYmXG4gICAgICAoX2lzT2JqZWN0KHZhbHVlKSB8fCBfaXNBcnJheSh2YWx1ZSkpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBcIkB2YWx1ZVwiIHZhbHVlIG11c3Qgbm90IGJlIGFuICcgK1xuICAgICAgICAnb2JqZWN0IG9yIGFuIGFycmF5LicsXG4gICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICB7Y29kZTogJ2ludmFsaWQgdmFsdWUgb2JqZWN0IHZhbHVlJywgdmFsdWU6IHZhbHVlfSk7XG4gICAgfVxuXG4gICAgLy8gQGxhbmd1YWdlIG11c3QgYmUgYSBzdHJpbmdcbiAgICBpZihleHBhbmRlZFByb3BlcnR5ID09PSAnQGxhbmd1YWdlJykge1xuICAgICAgaWYodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gZHJvcCBudWxsIEBsYW5ndWFnZSB2YWx1ZXMsIHRoZXkgZXhwYW5kIGFzIGlmIHRoZXkgZGlkbid0IGV4aXN0XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYoIV9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBcIkBsYW5ndWFnZVwiIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAgICB7Y29kZTogJ2ludmFsaWQgbGFuZ3VhZ2UtdGFnZ2VkIHN0cmluZycsIHZhbHVlOiB2YWx1ZX0pO1xuICAgICAgfVxuICAgICAgLy8gZW5zdXJlIGxhbmd1YWdlIHZhbHVlIGlzIGxvd2VyY2FzZVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8vIEBpbmRleCBtdXN0IGJlIGEgc3RyaW5nXG4gICAgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BpbmRleCcpIHtcbiAgICAgIGlmKCFfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgXCJAaW5kZXhcIiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLicsXG4gICAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdpbnZhbGlkIEBpbmRleCB2YWx1ZScsIHZhbHVlOiB2YWx1ZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEByZXZlcnNlIG11c3QgYmUgYW4gb2JqZWN0XG4gICAgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0ByZXZlcnNlJykge1xuICAgICAgaWYoIV9pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBcIkByZXZlcnNlXCIgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIEByZXZlcnNlIHZhbHVlJywgdmFsdWU6IHZhbHVlfSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGFuZGVkVmFsdWUgPSBzZWxmLmV4cGFuZChhY3RpdmVDdHgsICdAcmV2ZXJzZScsIHZhbHVlLCBvcHRpb25zKTtcblxuICAgICAgLy8gcHJvcGVydGllcyBkb3VibGUtcmV2ZXJzZWRcbiAgICAgIGlmKCdAcmV2ZXJzZScgaW4gZXhwYW5kZWRWYWx1ZSkge1xuICAgICAgICBmb3IodmFyIHByb3BlcnR5IGluIGV4cGFuZGVkVmFsdWVbJ0ByZXZlcnNlJ10pIHtcbiAgICAgICAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICAgICAgICBydmFsLCBwcm9wZXJ0eSwgZXhwYW5kZWRWYWx1ZVsnQHJldmVyc2UnXVtwcm9wZXJ0eV0sXG4gICAgICAgICAgICB7cHJvcGVydHlJc0FycmF5OiB0cnVlfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRklYTUU6IGNhbiB0aGlzIGJlIG1lcmdlZCB3aXRoIGNvZGUgYmVsb3cgdG8gc2ltcGxpZnk/XG4gICAgICAvLyBtZXJnZSBpbiBhbGwgcmV2ZXJzZWQgcHJvcGVydGllc1xuICAgICAgdmFyIHJldmVyc2VNYXAgPSBydmFsWydAcmV2ZXJzZSddIHx8IG51bGw7XG4gICAgICBmb3IodmFyIHByb3BlcnR5IGluIGV4cGFuZGVkVmFsdWUpIHtcbiAgICAgICAgaWYocHJvcGVydHkgPT09ICdAcmV2ZXJzZScpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZihyZXZlcnNlTWFwID09PSBudWxsKSB7XG4gICAgICAgICAgcmV2ZXJzZU1hcCA9IHJ2YWxbJ0ByZXZlcnNlJ10gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBqc29ubGQuYWRkVmFsdWUocmV2ZXJzZU1hcCwgcHJvcGVydHksIFtdLCB7cHJvcGVydHlJc0FycmF5OiB0cnVlfSk7XG4gICAgICAgIHZhciBpdGVtcyA9IGV4cGFuZGVkVmFsdWVbcHJvcGVydHldO1xuICAgICAgICBmb3IodmFyIGlpID0gMDsgaWkgPCBpdGVtcy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2lpXTtcbiAgICAgICAgICBpZihfaXNWYWx1ZShpdGVtKSB8fCBfaXNMaXN0KGl0ZW0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBcIkByZXZlcnNlXCIgdmFsdWUgbXVzdCBub3QgYmUgYSAnICtcbiAgICAgICAgICAgICAgJ0B2YWx1ZSBvciBhbiBAbGlzdC4nLCAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAgICAgICAge2NvZGU6ICdpbnZhbGlkIHJldmVyc2UgcHJvcGVydHkgdmFsdWUnLCB2YWx1ZTogZXhwYW5kZWRWYWx1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICAgICAgICByZXZlcnNlTWFwLCBwcm9wZXJ0eSwgaXRlbSwge3Byb3BlcnR5SXNBcnJheTogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXIgPSBqc29ubGQuZ2V0Q29udGV4dFZhbHVlKGFjdGl2ZUN0eCwga2V5LCAnQGNvbnRhaW5lcicpO1xuXG4gICAgaWYoY29udGFpbmVyID09PSAnQGxhbmd1YWdlJyAmJiBfaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAvLyBoYW5kbGUgbGFuZ3VhZ2UgbWFwIGNvbnRhaW5lciAoc2tpcCBpZiB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0KVxuICAgICAgZXhwYW5kZWRWYWx1ZSA9IF9leHBhbmRMYW5ndWFnZU1hcCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmKGNvbnRhaW5lciA9PT0gJ0BpbmRleCcgJiYgX2lzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgLy8gaGFuZGxlIGluZGV4IGNvbnRhaW5lciAoc2tpcCBpZiB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0KVxuICAgICAgZXhwYW5kZWRWYWx1ZSA9IChmdW5jdGlvbiBfZXhwYW5kSW5kZXhNYXAoYWN0aXZlUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHJ2YWwgPSBbXTtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSkuc29ydCgpO1xuICAgICAgICBmb3IodmFyIGtpID0gMDsga2kgPCBrZXlzLmxlbmd0aDsgKytraSkge1xuICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2tpXTtcbiAgICAgICAgICB2YXIgdmFsID0gdmFsdWVba2V5XTtcbiAgICAgICAgICBpZighX2lzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbCA9IHNlbGYuZXhwYW5kKGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksIHZhbCwgb3B0aW9ucywgZmFsc2UpO1xuICAgICAgICAgIGZvcih2YXIgdmkgPSAwOyB2aSA8IHZhbC5sZW5ndGg7ICsrdmkpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdmFsW3ZpXTtcbiAgICAgICAgICAgIGlmKCEoJ0BpbmRleCcgaW4gaXRlbSkpIHtcbiAgICAgICAgICAgICAgaXRlbVsnQGluZGV4J10gPSBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydmFsLnB1c2goaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydmFsO1xuICAgICAgfSkoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVjdXJzZSBpbnRvIEBsaXN0IG9yIEBzZXRcbiAgICAgIHZhciBpc0xpc3QgPSAoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BsaXN0Jyk7XG4gICAgICBpZihpc0xpc3QgfHwgZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BzZXQnKSB7XG4gICAgICAgIHZhciBuZXh0QWN0aXZlUHJvcGVydHkgPSBhY3RpdmVQcm9wZXJ0eTtcbiAgICAgICAgaWYoaXNMaXN0ICYmIGV4cGFuZGVkQWN0aXZlUHJvcGVydHkgPT09ICdAZ3JhcGgnKSB7XG4gICAgICAgICAgbmV4dEFjdGl2ZVByb3BlcnR5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBleHBhbmRlZFZhbHVlID0gc2VsZi5leHBhbmQoXG4gICAgICAgICAgYWN0aXZlQ3R4LCBuZXh0QWN0aXZlUHJvcGVydHksIHZhbHVlLCBvcHRpb25zLCBpc0xpc3QpO1xuICAgICAgICBpZihpc0xpc3QgJiYgX2lzTGlzdChleHBhbmRlZFZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBsaXN0cyBvZiBsaXN0cyBhcmUgbm90IHBlcm1pdHRlZC4nLFxuICAgICAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsIHtjb2RlOiAnbGlzdCBvZiBsaXN0cyd9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgZXhwYW5kIHZhbHVlIHdpdGgga2V5IGFzIG5ldyBhY3RpdmUgcHJvcGVydHlcbiAgICAgICAgZXhwYW5kZWRWYWx1ZSA9IHNlbGYuZXhwYW5kKGFjdGl2ZUN0eCwga2V5LCB2YWx1ZSwgb3B0aW9ucywgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRyb3AgbnVsbCB2YWx1ZXMgaWYgcHJvcGVydHkgaXMgbm90IEB2YWx1ZVxuICAgIGlmKGV4cGFuZGVkVmFsdWUgPT09IG51bGwgJiYgZXhwYW5kZWRQcm9wZXJ0eSAhPT0gJ0B2YWx1ZScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgZXhwYW5kZWQgdmFsdWUgdG8gQGxpc3QgaWYgY29udGFpbmVyIHNwZWNpZmllcyBpdFxuICAgIGlmKGV4cGFuZGVkUHJvcGVydHkgIT09ICdAbGlzdCcgJiYgIV9pc0xpc3QoZXhwYW5kZWRWYWx1ZSkgJiZcbiAgICAgIGNvbnRhaW5lciA9PT0gJ0BsaXN0Jykge1xuICAgICAgLy8gZW5zdXJlIGV4cGFuZGVkIHZhbHVlIGlzIGFuIGFycmF5XG4gICAgICBleHBhbmRlZFZhbHVlID0gKF9pc0FycmF5KGV4cGFuZGVkVmFsdWUpID9cbiAgICAgICAgZXhwYW5kZWRWYWx1ZSA6IFtleHBhbmRlZFZhbHVlXSk7XG4gICAgICBleHBhbmRlZFZhbHVlID0geydAbGlzdCc6IGV4cGFuZGVkVmFsdWV9O1xuICAgIH1cblxuICAgIC8vIEZJWE1FOiBjYW4gdGhpcyBiZSBtZXJnZWQgd2l0aCBjb2RlIGFib3ZlIHRvIHNpbXBsaWZ5P1xuICAgIC8vIG1lcmdlIGluIHJldmVyc2UgcHJvcGVydGllc1xuICAgIGlmKGFjdGl2ZUN0eC5tYXBwaW5nc1trZXldICYmIGFjdGl2ZUN0eC5tYXBwaW5nc1trZXldLnJldmVyc2UpIHtcbiAgICAgIHZhciByZXZlcnNlTWFwID0gcnZhbFsnQHJldmVyc2UnXSA9IHJ2YWxbJ0ByZXZlcnNlJ10gfHwge307XG4gICAgICBpZighX2lzQXJyYXkoZXhwYW5kZWRWYWx1ZSkpIHtcbiAgICAgICAgZXhwYW5kZWRWYWx1ZSA9IFtleHBhbmRlZFZhbHVlXTtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgaWkgPSAwOyBpaSA8IGV4cGFuZGVkVmFsdWUubGVuZ3RoOyArK2lpKSB7XG4gICAgICAgIHZhciBpdGVtID0gZXhwYW5kZWRWYWx1ZVtpaV07XG4gICAgICAgIGlmKF9pc1ZhbHVlKGl0ZW0pIHx8IF9pc0xpc3QoaXRlbSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgXCJAcmV2ZXJzZVwiIHZhbHVlIG11c3Qgbm90IGJlIGEgJyArXG4gICAgICAgICAgICAnQHZhbHVlIG9yIGFuIEBsaXN0LicsICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICAgICAge2NvZGU6ICdpbnZhbGlkIHJldmVyc2UgcHJvcGVydHkgdmFsdWUnLCB2YWx1ZTogZXhwYW5kZWRWYWx1ZX0pO1xuICAgICAgICB9XG4gICAgICAgIGpzb25sZC5hZGRWYWx1ZShcbiAgICAgICAgICByZXZlcnNlTWFwLCBleHBhbmRlZFByb3BlcnR5LCBpdGVtLCB7cHJvcGVydHlJc0FycmF5OiB0cnVlfSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhZGQgdmFsdWUgZm9yIHByb3BlcnR5XG4gICAgLy8gdXNlIGFuIGFycmF5IGV4Y2VwdCBmb3IgY2VydGFpbiBrZXl3b3Jkc1xuICAgIHZhciB1c2VBcnJheSA9XG4gICAgICBbJ0BpbmRleCcsICdAaWQnLCAnQHR5cGUnLCAnQHZhbHVlJywgJ0BsYW5ndWFnZSddLmluZGV4T2YoXG4gICAgICAgIGV4cGFuZGVkUHJvcGVydHkpID09PSAtMTtcbiAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICBydmFsLCBleHBhbmRlZFByb3BlcnR5LCBleHBhbmRlZFZhbHVlLCB7cHJvcGVydHlJc0FycmF5OiB1c2VBcnJheX0pO1xuICB9XG5cbiAgLy8gZ2V0IHByb3BlcnR5IGNvdW50IG9uIGV4cGFuZGVkIG91dHB1dFxuICBrZXlzID0gT2JqZWN0LmtleXMocnZhbCk7XG4gIHZhciBjb3VudCA9IGtleXMubGVuZ3RoO1xuXG4gIGlmKCdAdmFsdWUnIGluIHJ2YWwpIHtcbiAgICAvLyBAdmFsdWUgbXVzdCBvbmx5IGhhdmUgQGxhbmd1YWdlIG9yIEB0eXBlXG4gICAgaWYoJ0B0eXBlJyBpbiBydmFsICYmICdAbGFuZ3VhZ2UnIGluIHJ2YWwpIHtcbiAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IGFuIGVsZW1lbnQgY29udGFpbmluZyBcIkB2YWx1ZVwiIG1heSBub3QgJyArXG4gICAgICAgICdjb250YWluIGJvdGggXCJAdHlwZVwiIGFuZCBcIkBsYW5ndWFnZVwiLicsXG4gICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLCB7Y29kZTogJ2ludmFsaWQgdmFsdWUgb2JqZWN0JywgZWxlbWVudDogcnZhbH0pO1xuICAgIH1cbiAgICB2YXIgdmFsaWRDb3VudCA9IGNvdW50IC0gMTtcbiAgICBpZignQHR5cGUnIGluIHJ2YWwpIHtcbiAgICAgIHZhbGlkQ291bnQgLT0gMTtcbiAgICB9XG4gICAgaWYoJ0BpbmRleCcgaW4gcnZhbCkge1xuICAgICAgdmFsaWRDb3VudCAtPSAxO1xuICAgIH1cbiAgICBpZignQGxhbmd1YWdlJyBpbiBydmFsKSB7XG4gICAgICB2YWxpZENvdW50IC09IDE7XG4gICAgfVxuICAgIGlmKHZhbGlkQ291bnQgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IGFuIGVsZW1lbnQgY29udGFpbmluZyBcIkB2YWx1ZVwiIG1heSBvbmx5ICcgK1xuICAgICAgICAnaGF2ZSBhbiBcIkBpbmRleFwiIHByb3BlcnR5IGFuZCBhdCBtb3N0IG9uZSBvdGhlciBwcm9wZXJ0eSAnICtcbiAgICAgICAgJ3doaWNoIGNhbiBiZSBcIkB0eXBlXCIgb3IgXCJAbGFuZ3VhZ2VcIi4nLFxuICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIHZhbHVlIG9iamVjdCcsIGVsZW1lbnQ6IHJ2YWx9KTtcbiAgICB9XG4gICAgLy8gZHJvcCBudWxsIEB2YWx1ZXNcbiAgICBpZihydmFsWydAdmFsdWUnXSA9PT0gbnVsbCkge1xuICAgICAgcnZhbCA9IG51bGw7XG4gICAgfSBlbHNlIGlmKCdAbGFuZ3VhZ2UnIGluIHJ2YWwgJiYgIV9pc1N0cmluZyhydmFsWydAdmFsdWUnXSkpIHtcbiAgICAgIC8vIGlmIEBsYW5ndWFnZSBpcyBwcmVzZW50LCBAdmFsdWUgbXVzdCBiZSBhIHN0cmluZ1xuICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgb25seSBzdHJpbmdzIG1heSBiZSBsYW5ndWFnZS10YWdnZWQuJyxcbiAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgIHtjb2RlOiAnaW52YWxpZCBsYW5ndWFnZS10YWdnZWQgdmFsdWUnLCBlbGVtZW50OiBydmFsfSk7XG4gICAgfSBlbHNlIGlmKCdAdHlwZScgaW4gcnZhbCAmJiAoIV9pc0Fic29sdXRlSXJpKHJ2YWxbJ0B0eXBlJ10pIHx8XG4gICAgICBydmFsWydAdHlwZSddLmluZGV4T2YoJ186JykgPT09IDApKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhbiBlbGVtZW50IGNvbnRhaW5pbmcgXCJAdmFsdWVcIiBhbmQgXCJAdHlwZVwiICcgK1xuICAgICAgICAnbXVzdCBoYXZlIGFuIGFic29sdXRlIElSSSBmb3IgdGhlIHZhbHVlIG9mIFwiQHR5cGVcIi4nLFxuICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIHR5cGVkIHZhbHVlJywgZWxlbWVudDogcnZhbH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmKCdAdHlwZScgaW4gcnZhbCAmJiAhX2lzQXJyYXkocnZhbFsnQHR5cGUnXSkpIHtcbiAgICAvLyBjb252ZXJ0IEB0eXBlIHRvIGFuIGFycmF5XG4gICAgcnZhbFsnQHR5cGUnXSA9IFtydmFsWydAdHlwZSddXTtcbiAgfSBlbHNlIGlmKCdAc2V0JyBpbiBydmFsIHx8ICdAbGlzdCcgaW4gcnZhbCkge1xuICAgIC8vIGhhbmRsZSBAc2V0IGFuZCBAbGlzdFxuICAgIGlmKGNvdW50ID4gMSAmJiAhKGNvdW50ID09PSAyICYmICdAaW5kZXgnIGluIHJ2YWwpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBpZiBhbiBlbGVtZW50IGhhcyB0aGUgcHJvcGVydHkgXCJAc2V0XCIgJyArXG4gICAgICAgICdvciBcIkBsaXN0XCIsIHRoZW4gaXQgY2FuIGhhdmUgYXQgbW9zdCBvbmUgb3RoZXIgcHJvcGVydHkgdGhhdCBpcyAnICtcbiAgICAgICAgJ1wiQGluZGV4XCIuJywgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgIHtjb2RlOiAnaW52YWxpZCBzZXQgb3IgbGlzdCBvYmplY3QnLCBlbGVtZW50OiBydmFsfSk7XG4gICAgfVxuICAgIC8vIG9wdGltaXplIGF3YXkgQHNldFxuICAgIGlmKCdAc2V0JyBpbiBydmFsKSB7XG4gICAgICBydmFsID0gcnZhbFsnQHNldCddO1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHJ2YWwpO1xuICAgICAgY291bnQgPSBrZXlzLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZihjb3VudCA9PT0gMSAmJiAnQGxhbmd1YWdlJyBpbiBydmFsKSB7XG4gICAgLy8gZHJvcCBvYmplY3RzIHdpdGggb25seSBAbGFuZ3VhZ2VcbiAgICBydmFsID0gbnVsbDtcbiAgfVxuXG4gIC8vIGRyb3AgY2VydGFpbiB0b3AtbGV2ZWwgb2JqZWN0cyB0aGF0IGRvIG5vdCBvY2N1ciBpbiBsaXN0c1xuICBpZihfaXNPYmplY3QocnZhbCkgJiZcbiAgICAhb3B0aW9ucy5rZWVwRnJlZUZsb2F0aW5nTm9kZXMgJiYgIWluc2lkZUxpc3QgJiZcbiAgICAoYWN0aXZlUHJvcGVydHkgPT09IG51bGwgfHwgZXhwYW5kZWRBY3RpdmVQcm9wZXJ0eSA9PT0gJ0BncmFwaCcpKSB7XG4gICAgLy8gZHJvcCBlbXB0eSBvYmplY3QsIHRvcC1sZXZlbCBAdmFsdWUvQGxpc3QsIG9yIG9iamVjdCB3aXRoIG9ubHkgQGlkXG4gICAgaWYoY291bnQgPT09IDAgfHwgJ0B2YWx1ZScgaW4gcnZhbCB8fCAnQGxpc3QnIGluIHJ2YWwgfHxcbiAgICAgIChjb3VudCA9PT0gMSAmJiAnQGlkJyBpbiBydmFsKSkge1xuICAgICAgcnZhbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ2YWw7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBKU09OLUxEIG5vZGUgbWFwIChub2RlIElEID0+IG5vZGUpLlxuICpcbiAqIEBwYXJhbSBpbnB1dCB0aGUgZXhwYW5kZWQgSlNPTi1MRCB0byBjcmVhdGUgYSBub2RlIG1hcCBvZi5cbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgW2lzc3Vlcl0gYSBqc29ubGQuSWRlbnRpZmllcklzc3VlciB0byB1c2UgdG8gbGFiZWwgYmxhbmsgbm9kZXMuXG4gKiAgICAgICAgICBbbmFtZXJdIChkZXByZWNhdGVkKS5cbiAqXG4gKiBAcmV0dXJuIHRoZSBub2RlIG1hcC5cbiAqL1xuUHJvY2Vzc29yLnByb3RvdHlwZS5jcmVhdGVOb2RlTWFwID0gZnVuY3Rpb24oaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gcHJvZHVjZSBhIG1hcCBvZiBhbGwgc3ViamVjdHMgYW5kIG5hbWUgZWFjaCBibm9kZVxuICB2YXIgaXNzdWVyID0gb3B0aW9ucy5uYW1lciB8fCBvcHRpb25zLmlzc3VlciB8fCBuZXcgSWRlbnRpZmllcklzc3VlcignXzpiJyk7XG4gIHZhciBncmFwaHMgPSB7J0BkZWZhdWx0Jzoge319O1xuICBfY3JlYXRlTm9kZU1hcChpbnB1dCwgZ3JhcGhzLCAnQGRlZmF1bHQnLCBpc3N1ZXIpO1xuXG4gIC8vIGFkZCBhbGwgbm9uLWRlZmF1bHQgZ3JhcGhzIHRvIGRlZmF1bHQgZ3JhcGhcbiAgcmV0dXJuIF9tZXJnZU5vZGVNYXBzKGdyYXBocyk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIEpTT04tTEQgZmxhdHRlbmluZy5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIGV4cGFuZGVkIEpTT04tTEQgdG8gZmxhdHRlbi5cbiAqXG4gKiBAcmV0dXJuIHRoZSBmbGF0dGVuZWQgb3V0cHV0LlxuICovXG5Qcm9jZXNzb3IucHJvdG90eXBlLmZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCkge1xuICB2YXIgZGVmYXVsdEdyYXBoID0gdGhpcy5jcmVhdGVOb2RlTWFwKGlucHV0KTtcblxuICAvLyBwcm9kdWNlIGZsYXR0ZW5lZCBvdXRwdXRcbiAgdmFyIGZsYXR0ZW5lZCA9IFtdO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRHcmFwaCkuc29ydCgpO1xuICBmb3IodmFyIGtpID0gMDsga2kgPCBrZXlzLmxlbmd0aDsgKytraSkge1xuICAgIHZhciBub2RlID0gZGVmYXVsdEdyYXBoW2tleXNba2ldXTtcbiAgICAvLyBvbmx5IGFkZCBmdWxsIHN1YmplY3RzIHRvIHRvcC1sZXZlbFxuICAgIGlmKCFfaXNTdWJqZWN0UmVmZXJlbmNlKG5vZGUpKSB7XG4gICAgICBmbGF0dGVuZWQucHVzaChub2RlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZsYXR0ZW5lZDtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgSlNPTi1MRCBmcmFtaW5nLlxuICpcbiAqIEBwYXJhbSBpbnB1dCB0aGUgZXhwYW5kZWQgSlNPTi1MRCB0byBmcmFtZS5cbiAqIEBwYXJhbSBmcmFtZSB0aGUgZXhwYW5kZWQgSlNPTi1MRCBmcmFtZSB0byB1c2UuXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgZnJhbWluZyBvcHRpb25zLlxuICpcbiAqIEByZXR1cm4gdGhlIGZyYW1lZCBvdXRwdXQuXG4gKi9cblByb2Nlc3Nvci5wcm90b3R5cGUuZnJhbWUgPSBmdW5jdGlvbihpbnB1dCwgZnJhbWUsIG9wdGlvbnMpIHtcbiAgLy8gY3JlYXRlIGZyYW1pbmcgc3RhdGVcbiAgdmFyIHN0YXRlID0ge1xuICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgZ3JhcGhzOiB7J0BkZWZhdWx0Jzoge30sICdAbWVyZ2VkJzoge319LFxuICAgIHN1YmplY3RTdGFjazogW10sXG4gICAgbGluazoge31cbiAgfTtcblxuICAvLyBwcm9kdWNlIGEgbWFwIG9mIGFsbCBncmFwaHMgYW5kIG5hbWUgZWFjaCBibm9kZVxuICAvLyBGSVhNRTogY3VycmVudGx5IHVzZXMgc3ViamVjdHMgZnJvbSBAbWVyZ2VkIGdyYXBoIG9ubHlcbiAgdmFyIGlzc3VlciA9IG5ldyBJZGVudGlmaWVySXNzdWVyKCdfOmInKTtcbiAgX2NyZWF0ZU5vZGVNYXAoaW5wdXQsIHN0YXRlLmdyYXBocywgJ0BtZXJnZWQnLCBpc3N1ZXIpO1xuICBzdGF0ZS5zdWJqZWN0cyA9IHN0YXRlLmdyYXBoc1snQG1lcmdlZCddO1xuXG4gIC8vIGZyYW1lIHRoZSBzdWJqZWN0c1xuICB2YXIgZnJhbWVkID0gW107XG4gIF9mcmFtZShzdGF0ZSwgT2JqZWN0LmtleXMoc3RhdGUuc3ViamVjdHMpLnNvcnQoKSwgZnJhbWUsIGZyYW1lZCwgbnVsbCk7XG4gIHJldHVybiBmcmFtZWQ7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIG5vcm1hbGl6YXRpb24gb24gdGhlIGdpdmVuIFJERiBkYXRhc2V0LlxuICpcbiAqIEBwYXJhbSBkYXRhc2V0IHRoZSBSREYgZGF0YXNldCB0byBub3JtYWxpemUuXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgbm9ybWFsaXphdGlvbiBvcHRpb25zLlxuICogQHBhcmFtIGNhbGxiYWNrKGVyciwgbm9ybWFsaXplZCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cblByb2Nlc3Nvci5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24oZGF0YXNldCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYob3B0aW9ucy5hbGdvcml0aG0gPT09ICdVUkROQTIwMTUnKSB7XG4gICAgcmV0dXJuIG5ldyBVUkROQTIwMTUob3B0aW9ucykubWFpbihkYXRhc2V0LCBjYWxsYmFjayk7XG4gIH1cbiAgaWYob3B0aW9ucy5hbGdvcml0aG0gPT09ICdVUkdOQTIwMTInKSB7XG4gICAgcmV0dXJuIG5ldyBVUkdOQTIwMTIob3B0aW9ucykubWFpbihkYXRhc2V0LCBjYWxsYmFjayk7XG4gIH1cbiAgY2FsbGJhY2sobmV3IEVycm9yKFxuICAgICdJbnZhbGlkIFJERiBEYXRhc2V0IE5vcm1hbGl6YXRpb24gYWxnb3JpdGhtOiAnICsgb3B0aW9ucy5hbGdvcml0aG0pKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYW4gUkRGIGRhdGFzZXQgdG8gSlNPTi1MRC5cbiAqXG4gKiBAcGFyYW0gZGF0YXNldCB0aGUgUkRGIGRhdGFzZXQuXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgUkRGIHNlcmlhbGl6YXRpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSBjYWxsYmFjayhlcnIsIG91dHB1dCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cblByb2Nlc3Nvci5wcm90b3R5cGUuZnJvbVJERiA9IGZ1bmN0aW9uKGRhdGFzZXQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBkZWZhdWx0R3JhcGggPSB7fTtcbiAgdmFyIGdyYXBoTWFwID0geydAZGVmYXVsdCc6IGRlZmF1bHRHcmFwaH07XG4gIHZhciByZWZlcmVuY2VkT25jZSA9IHt9O1xuXG4gIGZvcih2YXIgbmFtZSBpbiBkYXRhc2V0KSB7XG4gICAgdmFyIGdyYXBoID0gZGF0YXNldFtuYW1lXTtcbiAgICBpZighKG5hbWUgaW4gZ3JhcGhNYXApKSB7XG4gICAgICBncmFwaE1hcFtuYW1lXSA9IHt9O1xuICAgIH1cbiAgICBpZihuYW1lICE9PSAnQGRlZmF1bHQnICYmICEobmFtZSBpbiBkZWZhdWx0R3JhcGgpKSB7XG4gICAgICBkZWZhdWx0R3JhcGhbbmFtZV0gPSB7J0BpZCc6IG5hbWV9O1xuICAgIH1cbiAgICB2YXIgbm9kZU1hcCA9IGdyYXBoTWFwW25hbWVdO1xuICAgIGZvcih2YXIgdGkgPSAwOyB0aSA8IGdyYXBoLmxlbmd0aDsgKyt0aSkge1xuICAgICAgdmFyIHRyaXBsZSA9IGdyYXBoW3RpXTtcblxuICAgICAgLy8gZ2V0IHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0XG4gICAgICB2YXIgcyA9IHRyaXBsZS5zdWJqZWN0LnZhbHVlO1xuICAgICAgdmFyIHAgPSB0cmlwbGUucHJlZGljYXRlLnZhbHVlO1xuICAgICAgdmFyIG8gPSB0cmlwbGUub2JqZWN0O1xuXG4gICAgICBpZighKHMgaW4gbm9kZU1hcCkpIHtcbiAgICAgICAgbm9kZU1hcFtzXSA9IHsnQGlkJzogc307XG4gICAgICB9XG4gICAgICB2YXIgbm9kZSA9IG5vZGVNYXBbc107XG5cbiAgICAgIHZhciBvYmplY3RJc0lkID0gKG8udHlwZSA9PT0gJ0lSSScgfHwgby50eXBlID09PSAnYmxhbmsgbm9kZScpO1xuICAgICAgaWYob2JqZWN0SXNJZCAmJiAhKG8udmFsdWUgaW4gbm9kZU1hcCkpIHtcbiAgICAgICAgbm9kZU1hcFtvLnZhbHVlXSA9IHsnQGlkJzogby52YWx1ZX07XG4gICAgICB9XG5cbiAgICAgIGlmKHAgPT09IFJERl9UWVBFICYmICFvcHRpb25zLnVzZVJkZlR5cGUgJiYgb2JqZWN0SXNJZCkge1xuICAgICAgICBqc29ubGQuYWRkVmFsdWUobm9kZSwgJ0B0eXBlJywgby52YWx1ZSwge3Byb3BlcnR5SXNBcnJheTogdHJ1ZX0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gX1JERlRvT2JqZWN0KG8sIG9wdGlvbnMudXNlTmF0aXZlVHlwZXMpO1xuICAgICAganNvbmxkLmFkZFZhbHVlKG5vZGUsIHAsIHZhbHVlLCB7cHJvcGVydHlJc0FycmF5OiB0cnVlfSk7XG5cbiAgICAgIC8vIG9iamVjdCBtYXkgYmUgYW4gUkRGIGxpc3QvcGFydGlhbCBsaXN0IG5vZGUgYnV0IHdlIGNhbid0IGtub3cgZWFzaWx5XG4gICAgICAvLyB1bnRpbCBhbGwgdHJpcGxlcyBhcmUgcmVhZFxuICAgICAgaWYob2JqZWN0SXNJZCkge1xuICAgICAgICBpZihvLnZhbHVlID09PSBSREZfTklMKSB7XG4gICAgICAgICAgLy8gdHJhY2sgcmRmOm5pbCB1bmlxdWVseSBwZXIgZ3JhcGhcbiAgICAgICAgICB2YXIgb2JqZWN0ID0gbm9kZU1hcFtvLnZhbHVlXTtcbiAgICAgICAgICBpZighKCd1c2FnZXMnIGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIG9iamVjdC51c2FnZXMgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0LnVzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgICBwcm9wZXJ0eTogcCxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYoby52YWx1ZSBpbiByZWZlcmVuY2VkT25jZSkge1xuICAgICAgICAgIC8vIG9iamVjdCByZWZlcmVuY2VkIG1vcmUgdGhhbiBvbmNlXG4gICAgICAgICAgcmVmZXJlbmNlZE9uY2Vbby52YWx1ZV0gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHNpbmdsZSByZWZlcmVuY2VcbiAgICAgICAgICByZWZlcmVuY2VkT25jZVtvLnZhbHVlXSA9IHtcbiAgICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgICBwcm9wZXJ0eTogcCxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBjb252ZXJ0IGxpbmtlZCBsaXN0cyB0byBAbGlzdCBhcnJheXNcbiAgZm9yKHZhciBuYW1lIGluIGdyYXBoTWFwKSB7XG4gICAgdmFyIGdyYXBoT2JqZWN0ID0gZ3JhcGhNYXBbbmFtZV07XG5cbiAgICAvLyBubyBAbGlzdHMgdG8gYmUgY29udmVydGVkLCBjb250aW51ZVxuICAgIGlmKCEoUkRGX05JTCBpbiBncmFwaE9iamVjdCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGl0ZXJhdGUgYmFja3dhcmRzIHRocm91Z2ggZWFjaCBSREYgbGlzdFxuICAgIHZhciBuaWwgPSBncmFwaE9iamVjdFtSREZfTklMXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbmlsLnVzYWdlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHVzYWdlID0gbmlsLnVzYWdlc1tpXTtcbiAgICAgIHZhciBub2RlID0gdXNhZ2Uubm9kZTtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHVzYWdlLnByb3BlcnR5O1xuICAgICAgdmFyIGhlYWQgPSB1c2FnZS52YWx1ZTtcbiAgICAgIHZhciBsaXN0ID0gW107XG4gICAgICB2YXIgbGlzdE5vZGVzID0gW107XG5cbiAgICAgIC8vIGVuc3VyZSBub2RlIGlzIGEgd2VsbC1mb3JtZWQgbGlzdCBub2RlOyBpdCBtdXN0OlxuICAgICAgLy8gMS4gQmUgcmVmZXJlbmNlZCBvbmx5IG9uY2UuXG4gICAgICAvLyAyLiBIYXZlIGFuIGFycmF5IGZvciByZGY6Zmlyc3QgdGhhdCBoYXMgMSBpdGVtLlxuICAgICAgLy8gMy4gSGF2ZSBhbiBhcnJheSBmb3IgcmRmOnJlc3QgdGhhdCBoYXMgMSBpdGVtLlxuICAgICAgLy8gNC4gSGF2ZSBubyBrZXlzIG90aGVyIHRoYW46IEBpZCwgcmRmOmZpcnN0LCByZGY6cmVzdCwgYW5kLFxuICAgICAgLy8gICBvcHRpb25hbGx5LCBAdHlwZSB3aGVyZSB0aGUgdmFsdWUgaXMgcmRmOkxpc3QuXG4gICAgICB2YXIgbm9kZUtleUNvdW50ID0gT2JqZWN0LmtleXMobm9kZSkubGVuZ3RoO1xuICAgICAgd2hpbGUocHJvcGVydHkgPT09IFJERl9SRVNUICYmXG4gICAgICAgIF9pc09iamVjdChyZWZlcmVuY2VkT25jZVtub2RlWydAaWQnXV0pICYmXG4gICAgICAgIF9pc0FycmF5KG5vZGVbUkRGX0ZJUlNUXSkgJiYgbm9kZVtSREZfRklSU1RdLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBfaXNBcnJheShub2RlW1JERl9SRVNUXSkgJiYgbm9kZVtSREZfUkVTVF0ubGVuZ3RoID09PSAxICYmXG4gICAgICAgIChub2RlS2V5Q291bnQgPT09IDMgfHwgKG5vZGVLZXlDb3VudCA9PT0gNCAmJiBfaXNBcnJheShub2RlWydAdHlwZSddKSAmJlxuICAgICAgICAgIG5vZGVbJ0B0eXBlJ10ubGVuZ3RoID09PSAxICYmIG5vZGVbJ0B0eXBlJ11bMF0gPT09IFJERl9MSVNUKSkpIHtcbiAgICAgICAgbGlzdC5wdXNoKG5vZGVbUkRGX0ZJUlNUXVswXSk7XG4gICAgICAgIGxpc3ROb2Rlcy5wdXNoKG5vZGVbJ0BpZCddKTtcblxuICAgICAgICAvLyBnZXQgbmV4dCBub2RlLCBtb3ZpbmcgYmFja3dhcmRzIHRocm91Z2ggbGlzdFxuICAgICAgICB1c2FnZSA9IHJlZmVyZW5jZWRPbmNlW25vZGVbJ0BpZCddXTtcbiAgICAgICAgbm9kZSA9IHVzYWdlLm5vZGU7XG4gICAgICAgIHByb3BlcnR5ID0gdXNhZ2UucHJvcGVydHk7XG4gICAgICAgIGhlYWQgPSB1c2FnZS52YWx1ZTtcbiAgICAgICAgbm9kZUtleUNvdW50ID0gT2JqZWN0LmtleXMobm9kZSkubGVuZ3RoO1xuXG4gICAgICAgIC8vIGlmIG5vZGUgaXMgbm90IGEgYmxhbmsgbm9kZSwgdGhlbiBsaXN0IGhlYWQgZm91bmRcbiAgICAgICAgaWYobm9kZVsnQGlkJ10uaW5kZXhPZignXzonKSAhPT0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZSBsaXN0IGlzIG5lc3RlZCBpbiBhbm90aGVyIGxpc3RcbiAgICAgIGlmKHByb3BlcnR5ID09PSBSREZfRklSU1QpIHtcbiAgICAgICAgLy8gZW1wdHkgbGlzdFxuICAgICAgICBpZihub2RlWydAaWQnXSA9PT0gUkRGX05JTCkge1xuICAgICAgICAgIC8vIGNhbid0IGNvbnZlcnQgcmRmOm5pbCB0byBhIEBsaXN0IG9iamVjdCBiZWNhdXNlIGl0IHdvdWxkXG4gICAgICAgICAgLy8gcmVzdWx0IGluIGEgbGlzdCBvZiBsaXN0cyB3aGljaCBpc24ndCBzdXBwb3J0ZWRcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZXNlcnZlIGxpc3QgaGVhZFxuICAgICAgICBoZWFkID0gZ3JhcGhPYmplY3RbaGVhZFsnQGlkJ11dW1JERl9SRVNUXVswXTtcbiAgICAgICAgbGlzdC5wb3AoKTtcbiAgICAgICAgbGlzdE5vZGVzLnBvcCgpO1xuICAgICAgfVxuXG4gICAgICAvLyB0cmFuc2Zvcm0gbGlzdCBpbnRvIEBsaXN0IG9iamVjdFxuICAgICAgZGVsZXRlIGhlYWRbJ0BpZCddO1xuICAgICAgaGVhZFsnQGxpc3QnXSA9IGxpc3QucmV2ZXJzZSgpO1xuICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGxpc3ROb2Rlcy5sZW5ndGg7ICsraikge1xuICAgICAgICBkZWxldGUgZ3JhcGhPYmplY3RbbGlzdE5vZGVzW2pdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGUgbmlsLnVzYWdlcztcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIHN1YmplY3RzID0gT2JqZWN0LmtleXMoZGVmYXVsdEdyYXBoKS5zb3J0KCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBzdWJqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBzdWJqZWN0ID0gc3ViamVjdHNbaV07XG4gICAgdmFyIG5vZGUgPSBkZWZhdWx0R3JhcGhbc3ViamVjdF07XG4gICAgaWYoc3ViamVjdCBpbiBncmFwaE1hcCkge1xuICAgICAgdmFyIGdyYXBoID0gbm9kZVsnQGdyYXBoJ10gPSBbXTtcbiAgICAgIHZhciBncmFwaE9iamVjdCA9IGdyYXBoTWFwW3N1YmplY3RdO1xuICAgICAgdmFyIHN1YmplY3RzXyA9IE9iamVjdC5rZXlzKGdyYXBoT2JqZWN0KS5zb3J0KCk7XG4gICAgICBmb3IodmFyIHNpID0gMDsgc2kgPCBzdWJqZWN0c18ubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBub2RlXyA9IGdyYXBoT2JqZWN0W3N1YmplY3RzX1tzaV1dO1xuICAgICAgICAvLyBvbmx5IGFkZCBmdWxsIHN1YmplY3RzIHRvIHRvcC1sZXZlbFxuICAgICAgICBpZighX2lzU3ViamVjdFJlZmVyZW5jZShub2RlXykpIHtcbiAgICAgICAgICBncmFwaC5wdXNoKG5vZGVfKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBvbmx5IGFkZCBmdWxsIHN1YmplY3RzIHRvIHRvcC1sZXZlbFxuICAgIGlmKCFfaXNTdWJqZWN0UmVmZXJlbmNlKG5vZGUpKSB7XG4gICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xufTtcblxuLyoqXG4gKiBPdXRwdXRzIGFuIFJERiBkYXRhc2V0IGZvciB0aGUgZXhwYW5kZWQgSlNPTi1MRCBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIGV4cGFuZGVkIEpTT04tTEQgaW5wdXQuXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgUkRGIHNlcmlhbGl6YXRpb24gb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJuIHRoZSBSREYgZGF0YXNldC5cbiAqL1xuUHJvY2Vzc29yLnByb3RvdHlwZS50b1JERiA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gIC8vIGNyZWF0ZSBub2RlIG1hcCBmb3IgZGVmYXVsdCBncmFwaCAoYW5kIGFueSBuYW1lZCBncmFwaHMpXG4gIHZhciBpc3N1ZXIgPSBuZXcgSWRlbnRpZmllcklzc3VlcignXzpiJyk7XG4gIHZhciBub2RlTWFwID0geydAZGVmYXVsdCc6IHt9fTtcbiAgX2NyZWF0ZU5vZGVNYXAoaW5wdXQsIG5vZGVNYXAsICdAZGVmYXVsdCcsIGlzc3Vlcik7XG5cbiAgdmFyIGRhdGFzZXQgPSB7fTtcbiAgdmFyIGdyYXBoTmFtZXMgPSBPYmplY3Qua2V5cyhub2RlTWFwKS5zb3J0KCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBncmFwaE5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGdyYXBoTmFtZSA9IGdyYXBoTmFtZXNbaV07XG4gICAgLy8gc2tpcCByZWxhdGl2ZSBJUklzXG4gICAgaWYoZ3JhcGhOYW1lID09PSAnQGRlZmF1bHQnIHx8IF9pc0Fic29sdXRlSXJpKGdyYXBoTmFtZSkpIHtcbiAgICAgIGRhdGFzZXRbZ3JhcGhOYW1lXSA9IF9ncmFwaFRvUkRGKG5vZGVNYXBbZ3JhcGhOYW1lXSwgaXNzdWVyLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFzZXQ7XG59O1xuXG4vKipcbiAqIFByb2Nlc3NlcyBhIGxvY2FsIGNvbnRleHQgYW5kIHJldHVybnMgYSBuZXcgYWN0aXZlIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgY3VycmVudCBhY3RpdmUgY29udGV4dC5cbiAqIEBwYXJhbSBsb2NhbEN0eCB0aGUgbG9jYWwgY29udGV4dCB0byBwcm9jZXNzLlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIGNvbnRleHQgcHJvY2Vzc2luZyBvcHRpb25zLlxuICpcbiAqIEByZXR1cm4gdGhlIG5ldyBhY3RpdmUgY29udGV4dC5cbiAqL1xuUHJvY2Vzc29yLnByb3RvdHlwZS5wcm9jZXNzQ29udGV4dCA9IGZ1bmN0aW9uKGFjdGl2ZUN0eCwgbG9jYWxDdHgsIG9wdGlvbnMpIHtcbiAgLy8gbm9ybWFsaXplIGxvY2FsIGNvbnRleHQgdG8gYW4gYXJyYXkgb2YgQGNvbnRleHQgb2JqZWN0c1xuICBpZihfaXNPYmplY3QobG9jYWxDdHgpICYmICdAY29udGV4dCcgaW4gbG9jYWxDdHggJiZcbiAgICBfaXNBcnJheShsb2NhbEN0eFsnQGNvbnRleHQnXSkpIHtcbiAgICBsb2NhbEN0eCA9IGxvY2FsQ3R4WydAY29udGV4dCddO1xuICB9XG4gIHZhciBjdHhzID0gX2lzQXJyYXkobG9jYWxDdHgpID8gbG9jYWxDdHggOiBbbG9jYWxDdHhdO1xuXG4gIC8vIG5vIGNvbnRleHRzIGluIGFycmF5LCBjbG9uZSBleGlzdGluZyBjb250ZXh0XG4gIGlmKGN0eHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUN0eC5jbG9uZSgpO1xuICB9XG5cbiAgLy8gcHJvY2VzcyBlYWNoIGNvbnRleHQgaW4gb3JkZXIsIHVwZGF0ZSBhY3RpdmUgY29udGV4dFxuICAvLyBvbiBlYWNoIGl0ZXJhdGlvbiB0byBlbnN1cmUgcHJvcGVyIGNhY2hpbmdcbiAgdmFyIHJ2YWwgPSBhY3RpdmVDdHg7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBjdHhzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGN0eCA9IGN0eHNbaV07XG5cbiAgICAvLyByZXNldCB0byBpbml0aWFsIGNvbnRleHRcbiAgICBpZihjdHggPT09IG51bGwpIHtcbiAgICAgIHJ2YWwgPSBhY3RpdmVDdHggPSBfZ2V0SW5pdGlhbENvbnRleHQob3B0aW9ucyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBkZXJlZmVyZW5jZSBAY29udGV4dCBrZXkgaWYgcHJlc2VudFxuICAgIGlmKF9pc09iamVjdChjdHgpICYmICdAY29udGV4dCcgaW4gY3R4KSB7XG4gICAgICBjdHggPSBjdHhbJ0Bjb250ZXh0J107XG4gICAgfVxuXG4gICAgLy8gY29udGV4dCBtdXN0IGJlIGFuIG9iamVjdCBieSBub3csIGFsbCBVUkxzIHJldHJpZXZlZCBiZWZvcmUgdGhpcyBjYWxsXG4gICAgaWYoIV9pc09iamVjdChjdHgpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBAY29udGV4dCBtdXN0IGJlIGFuIG9iamVjdC4nLFxuICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIGxvY2FsIGNvbnRleHQnLCBjb250ZXh0OiBjdHh9KTtcbiAgICB9XG5cbiAgICAvLyBnZXQgY29udGV4dCBmcm9tIGNhY2hlIGlmIGF2YWlsYWJsZVxuICAgIGlmKGpzb25sZC5jYWNoZS5hY3RpdmVDdHgpIHtcbiAgICAgIHZhciBjYWNoZWQgPSBqc29ubGQuY2FjaGUuYWN0aXZlQ3R4LmdldChhY3RpdmVDdHgsIGN0eCk7XG4gICAgICBpZihjYWNoZWQpIHtcbiAgICAgICAgcnZhbCA9IGFjdGl2ZUN0eCA9IGNhY2hlZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGFjdGl2ZSBjb250ZXh0IGFuZCBjbG9uZSBuZXcgb25lIGJlZm9yZSB1cGRhdGluZ1xuICAgIGFjdGl2ZUN0eCA9IHJ2YWw7XG4gICAgcnZhbCA9IHJ2YWwuY2xvbmUoKTtcblxuICAgIC8vIGRlZmluZSBjb250ZXh0IG1hcHBpbmdzIGZvciBrZXlzIGluIGxvY2FsIGNvbnRleHRcbiAgICB2YXIgZGVmaW5lZCA9IHt9O1xuXG4gICAgLy8gaGFuZGxlIEBiYXNlXG4gICAgaWYoJ0BiYXNlJyBpbiBjdHgpIHtcbiAgICAgIHZhciBiYXNlID0gY3R4WydAYmFzZSddO1xuXG4gICAgICAvLyBjbGVhciBiYXNlXG4gICAgICBpZihiYXNlID09PSBudWxsKSB7XG4gICAgICAgIGJhc2UgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmKCFfaXNTdHJpbmcoYmFzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyB0aGUgdmFsdWUgb2YgXCJAYmFzZVwiIGluIGEgJyArXG4gICAgICAgICAgJ0Bjb250ZXh0IG11c3QgYmUgYSBzdHJpbmcgb3IgbnVsbC4nLFxuICAgICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLCB7Y29kZTogJ2ludmFsaWQgYmFzZSBJUkknLCBjb250ZXh0OiBjdHh9KTtcbiAgICAgIH0gZWxzZSBpZihiYXNlICE9PSAnJyAmJiAhX2lzQWJzb2x1dGVJcmkoYmFzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyB0aGUgdmFsdWUgb2YgXCJAYmFzZVwiIGluIGEgJyArXG4gICAgICAgICAgJ0Bjb250ZXh0IG11c3QgYmUgYW4gYWJzb2x1dGUgSVJJIG9yIHRoZSBlbXB0eSBzdHJpbmcuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIGJhc2UgSVJJJywgY29udGV4dDogY3R4fSk7XG4gICAgICB9XG5cbiAgICAgIGlmKGJhc2UgIT09IG51bGwpIHtcbiAgICAgICAgYmFzZSA9IGpzb25sZC51cmwucGFyc2UoYmFzZSB8fCAnJyk7XG4gICAgICB9XG4gICAgICBydmFsWydAYmFzZSddID0gYmFzZTtcbiAgICAgIGRlZmluZWRbJ0BiYXNlJ10gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBAdm9jYWJcbiAgICBpZignQHZvY2FiJyBpbiBjdHgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGN0eFsnQHZvY2FiJ107XG4gICAgICBpZih2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgcnZhbFsnQHZvY2FiJ107XG4gICAgICB9IGVsc2UgaWYoIV9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyB0aGUgdmFsdWUgb2YgXCJAdm9jYWJcIiBpbiBhICcgK1xuICAgICAgICAgICdAY29udGV4dCBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bGwuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIHZvY2FiIG1hcHBpbmcnLCBjb250ZXh0OiBjdHh9KTtcbiAgICAgIH0gZWxzZSBpZighX2lzQWJzb2x1dGVJcmkodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgdGhlIHZhbHVlIG9mIFwiQHZvY2FiXCIgaW4gYSAnICtcbiAgICAgICAgICAnQGNvbnRleHQgbXVzdCBiZSBhbiBhYnNvbHV0ZSBJUkkuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIHZvY2FiIG1hcHBpbmcnLCBjb250ZXh0OiBjdHh9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJ2YWxbJ0B2b2NhYiddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBkZWZpbmVkWydAdm9jYWInXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIEBsYW5ndWFnZVxuICAgIGlmKCdAbGFuZ3VhZ2UnIGluIGN0eCkge1xuICAgICAgdmFyIHZhbHVlID0gY3R4WydAbGFuZ3VhZ2UnXTtcbiAgICAgIGlmKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBydmFsWydAbGFuZ3VhZ2UnXTtcbiAgICAgIH0gZWxzZSBpZighX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IHRoZSB2YWx1ZSBvZiBcIkBsYW5ndWFnZVwiIGluIGEgJyArXG4gICAgICAgICAgJ0Bjb250ZXh0IG11c3QgYmUgYSBzdHJpbmcgb3IgbnVsbC4nLFxuICAgICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICAgIHtjb2RlOiAnaW52YWxpZCBkZWZhdWx0IGxhbmd1YWdlJywgY29udGV4dDogY3R4fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydmFsWydAbGFuZ3VhZ2UnXSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgICBkZWZpbmVkWydAbGFuZ3VhZ2UnXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gcHJvY2VzcyBhbGwgb3RoZXIga2V5c1xuICAgIGZvcih2YXIga2V5IGluIGN0eCkge1xuICAgICAgX2NyZWF0ZVRlcm1EZWZpbml0aW9uKHJ2YWwsIGN0eCwga2V5LCBkZWZpbmVkKTtcbiAgICB9XG5cbiAgICAvLyBjYWNoZSByZXN1bHRcbiAgICBpZihqc29ubGQuY2FjaGUuYWN0aXZlQ3R4KSB7XG4gICAgICBqc29ubGQuY2FjaGUuYWN0aXZlQ3R4LnNldChhY3RpdmVDdHgsIGN0eCwgcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ2YWw7XG59O1xuXG4vKipcbiAqIEV4cGFuZHMgYSBsYW5ndWFnZSBtYXAuXG4gKlxuICogQHBhcmFtIGxhbmd1YWdlTWFwIHRoZSBsYW5ndWFnZSBtYXAgdG8gZXhwYW5kLlxuICpcbiAqIEByZXR1cm4gdGhlIGV4cGFuZGVkIGxhbmd1YWdlIG1hcC5cbiAqL1xuZnVuY3Rpb24gX2V4cGFuZExhbmd1YWdlTWFwKGxhbmd1YWdlTWFwKSB7XG4gIHZhciBydmFsID0gW107XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMobGFuZ3VhZ2VNYXApLnNvcnQoKTtcbiAgZm9yKHZhciBraSA9IDA7IGtpIDwga2V5cy5sZW5ndGg7ICsra2kpIHtcbiAgICB2YXIga2V5ID0ga2V5c1traV07XG4gICAgdmFyIHZhbCA9IGxhbmd1YWdlTWFwW2tleV07XG4gICAgaWYoIV9pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhbCA9IFt2YWxdO1xuICAgIH1cbiAgICBmb3IodmFyIHZpID0gMDsgdmkgPCB2YWwubGVuZ3RoOyArK3ZpKSB7XG4gICAgICB2YXIgaXRlbSA9IHZhbFt2aV07XG4gICAgICBpZihpdGVtID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gbnVsbCB2YWx1ZXMgYXJlIGFsbG93ZWQgKDguNSkgYnV0IGlnbm9yZWQgKDMuMSlcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmKCFfaXNTdHJpbmcoaXRlbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBsYW5ndWFnZSBtYXAgdmFsdWVzIG11c3QgYmUgc3RyaW5ncy4nLFxuICAgICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICAgIHtjb2RlOiAnaW52YWxpZCBsYW5ndWFnZSBtYXAgdmFsdWUnLCBsYW5ndWFnZU1hcDogbGFuZ3VhZ2VNYXB9KTtcbiAgICAgIH1cbiAgICAgIHJ2YWwucHVzaCh7XG4gICAgICAgICdAdmFsdWUnOiBpdGVtLFxuICAgICAgICAnQGxhbmd1YWdlJzoga2V5LnRvTG93ZXJDYXNlKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcnZhbDtcbn1cblxuLyoqXG4gKiBMYWJlbHMgdGhlIGJsYW5rIG5vZGVzIGluIHRoZSBnaXZlbiB2YWx1ZSB1c2luZyB0aGUgZ2l2ZW4gSWRlbnRpZmllcklzc3Vlci5cbiAqXG4gKiBAcGFyYW0gaXNzdWVyIHRoZSBJZGVudGlmaWVySXNzdWVyIHRvIHVzZS5cbiAqIEBwYXJhbSBlbGVtZW50IHRoZSBlbGVtZW50IHdpdGggYmxhbmsgbm9kZXMgdG8gcmVuYW1lLlxuICpcbiAqIEByZXR1cm4gdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIF9sYWJlbEJsYW5rTm9kZXMoaXNzdWVyLCBlbGVtZW50KSB7XG4gIGlmKF9pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyArK2kpIHtcbiAgICAgIGVsZW1lbnRbaV0gPSBfbGFiZWxCbGFua05vZGVzKGlzc3VlciwgZWxlbWVudFtpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYoX2lzTGlzdChlbGVtZW50KSkge1xuICAgIGVsZW1lbnRbJ0BsaXN0J10gPSBfbGFiZWxCbGFua05vZGVzKGlzc3VlciwgZWxlbWVudFsnQGxpc3QnXSk7XG4gIH0gZWxzZSBpZihfaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAvLyByZWxhYmVsIGJsYW5rIG5vZGVcbiAgICBpZihfaXNCbGFua05vZGUoZWxlbWVudCkpIHtcbiAgICAgIGVsZW1lbnRbJ0BpZCddID0gaXNzdWVyLmdldElkKGVsZW1lbnRbJ0BpZCddKTtcbiAgICB9XG5cbiAgICAvLyByZWN1cnNpdmVseSBhcHBseSB0byBhbGwga2V5c1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZWxlbWVudCkuc29ydCgpO1xuICAgIGZvcih2YXIga2kgPSAwOyBraSA8IGtleXMubGVuZ3RoOyArK2tpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1traV07XG4gICAgICBpZihrZXkgIT09ICdAaWQnKSB7XG4gICAgICAgIGVsZW1lbnRba2V5XSA9IF9sYWJlbEJsYW5rTm9kZXMoaXNzdWVyLCBlbGVtZW50W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG4vKipcbiAqIEV4cGFuZHMgdGhlIGdpdmVuIHZhbHVlIGJ5IHVzaW5nIHRoZSBjb2VyY2lvbiBhbmQga2V5d29yZCBydWxlcyBpbiB0aGVcbiAqIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgYWN0aXZlIGNvbnRleHQgdG8gdXNlLlxuICogQHBhcmFtIGFjdGl2ZVByb3BlcnR5IHRoZSBhY3RpdmUgcHJvcGVydHkgdGhlIHZhbHVlIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gZXhwYW5kLlxuICpcbiAqIEByZXR1cm4gdGhlIGV4cGFuZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBfZXhwYW5kVmFsdWUoYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gbm90aGluZyB0byBleHBhbmRcbiAgaWYodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gc3BlY2lhbC1jYXNlIGV4cGFuZCBAaWQgYW5kIEB0eXBlIChza2lwcyAnQGlkJyBleHBhbnNpb24pXG4gIHZhciBleHBhbmRlZFByb3BlcnR5ID0gX2V4cGFuZElyaShhY3RpdmVDdHgsIGFjdGl2ZVByb3BlcnR5LCB7dm9jYWI6IHRydWV9KTtcbiAgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BpZCcpIHtcbiAgICByZXR1cm4gX2V4cGFuZElyaShhY3RpdmVDdHgsIHZhbHVlLCB7YmFzZTogdHJ1ZX0pO1xuICB9IGVsc2UgaWYoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0B0eXBlJykge1xuICAgIHJldHVybiBfZXhwYW5kSXJpKGFjdGl2ZUN0eCwgdmFsdWUsIHt2b2NhYjogdHJ1ZSwgYmFzZTogdHJ1ZX0pO1xuICB9XG5cbiAgLy8gZ2V0IHR5cGUgZGVmaW5pdGlvbiBmcm9tIGNvbnRleHRcbiAgdmFyIHR5cGUgPSBqc29ubGQuZ2V0Q29udGV4dFZhbHVlKGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAdHlwZScpO1xuXG4gIC8vIGRvIEBpZCBleHBhbnNpb24gKGF1dG9tYXRpYyBmb3IgQGdyYXBoKVxuICBpZih0eXBlID09PSAnQGlkJyB8fCAoZXhwYW5kZWRQcm9wZXJ0eSA9PT0gJ0BncmFwaCcgJiYgX2lzU3RyaW5nKHZhbHVlKSkpIHtcbiAgICByZXR1cm4geydAaWQnOiBfZXhwYW5kSXJpKGFjdGl2ZUN0eCwgdmFsdWUsIHtiYXNlOiB0cnVlfSl9O1xuICB9XG4gIC8vIGRvIEBpZCBleHBhbnNpb24gdy92b2NhYlxuICBpZih0eXBlID09PSAnQHZvY2FiJykge1xuICAgIHJldHVybiB7J0BpZCc6IF9leHBhbmRJcmkoYWN0aXZlQ3R4LCB2YWx1ZSwge3ZvY2FiOiB0cnVlLCBiYXNlOiB0cnVlfSl9O1xuICB9XG5cbiAgLy8gZG8gbm90IGV4cGFuZCBrZXl3b3JkIHZhbHVlc1xuICBpZihfaXNLZXl3b3JkKGV4cGFuZGVkUHJvcGVydHkpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdmFyIHJ2YWwgPSB7fTtcblxuICBpZih0eXBlICE9PSBudWxsKSB7XG4gICAgLy8gb3RoZXIgdHlwZVxuICAgIHJ2YWxbJ0B0eXBlJ10gPSB0eXBlO1xuICB9IGVsc2UgaWYoX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgIC8vIGNoZWNrIGZvciBsYW5ndWFnZSB0YWdnaW5nIGZvciBzdHJpbmdzXG4gICAgdmFyIGxhbmd1YWdlID0ganNvbmxkLmdldENvbnRleHRWYWx1ZShcbiAgICAgIGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAbGFuZ3VhZ2UnKTtcbiAgICBpZihsYW5ndWFnZSAhPT0gbnVsbCkge1xuICAgICAgcnZhbFsnQGxhbmd1YWdlJ10gPSBsYW5ndWFnZTtcbiAgICB9XG4gIH1cbiAgLy8gZG8gY29udmVyc2lvbiBvZiB2YWx1ZXMgdGhhdCBhcmVuJ3QgYmFzaWMgSlNPTiB0eXBlcyB0byBzdHJpbmdzXG4gIGlmKFsnYm9vbGVhbicsICdudW1iZXInLCAnc3RyaW5nJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID09PSAtMSkge1xuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuICBydmFsWydAdmFsdWUnXSA9IHZhbHVlO1xuXG4gIHJldHVybiBydmFsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgUkRGIHRyaXBsZXMgZm9yIHRoZSBnaXZlbiBncmFwaC5cbiAqXG4gKiBAcGFyYW0gZ3JhcGggdGhlIGdyYXBoIHRvIGNyZWF0ZSBSREYgdHJpcGxlcyBmb3IuXG4gKiBAcGFyYW0gaXNzdWVyIGEgSWRlbnRpZmllcklzc3VlciBmb3IgYXNzaWduaW5nIGJsYW5rIG5vZGUgbmFtZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgUkRGIHNlcmlhbGl6YXRpb24gb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJuIHRoZSBhcnJheSBvZiBSREYgdHJpcGxlcyBmb3IgdGhlIGdpdmVuIGdyYXBoLlxuICovXG5mdW5jdGlvbiBfZ3JhcGhUb1JERihncmFwaCwgaXNzdWVyLCBvcHRpb25zKSB7XG4gIHZhciBydmFsID0gW107XG5cbiAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKGdyYXBoKS5zb3J0KCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgaWQgPSBpZHNbaV07XG4gICAgdmFyIG5vZGUgPSBncmFwaFtpZF07XG4gICAgdmFyIHByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhub2RlKS5zb3J0KCk7XG4gICAgZm9yKHZhciBwaSA9IDA7IHBpIDwgcHJvcGVydGllcy5sZW5ndGg7ICsrcGkpIHtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbcGldO1xuICAgICAgdmFyIGl0ZW1zID0gbm9kZVtwcm9wZXJ0eV07XG4gICAgICBpZihwcm9wZXJ0eSA9PT0gJ0B0eXBlJykge1xuICAgICAgICBwcm9wZXJ0eSA9IFJERl9UWVBFO1xuICAgICAgfSBlbHNlIGlmKF9pc0tleXdvcmQocHJvcGVydHkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBmb3IodmFyIGlpID0gMDsgaWkgPCBpdGVtcy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpaV07XG5cbiAgICAgICAgLy8gUkRGIHN1YmplY3RcbiAgICAgICAgdmFyIHN1YmplY3QgPSB7fTtcbiAgICAgICAgc3ViamVjdC50eXBlID0gKGlkLmluZGV4T2YoJ186JykgPT09IDApID8gJ2JsYW5rIG5vZGUnIDogJ0lSSSc7XG4gICAgICAgIHN1YmplY3QudmFsdWUgPSBpZDtcblxuICAgICAgICAvLyBza2lwIHJlbGF0aXZlIElSSSBzdWJqZWN0c1xuICAgICAgICBpZighX2lzQWJzb2x1dGVJcmkoaWQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSREYgcHJlZGljYXRlXG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSB7fTtcbiAgICAgICAgcHJlZGljYXRlLnR5cGUgPSAocHJvcGVydHkuaW5kZXhPZignXzonKSA9PT0gMCkgPyAnYmxhbmsgbm9kZScgOiAnSVJJJztcbiAgICAgICAgcHJlZGljYXRlLnZhbHVlID0gcHJvcGVydHk7XG5cbiAgICAgICAgLy8gc2tpcCByZWxhdGl2ZSBJUkkgcHJlZGljYXRlc1xuICAgICAgICBpZighX2lzQWJzb2x1dGVJcmkocHJvcGVydHkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBza2lwIGJsYW5rIG5vZGUgcHJlZGljYXRlcyB1bmxlc3MgcHJvZHVjaW5nIGdlbmVyYWxpemVkIFJERlxuICAgICAgICBpZihwcmVkaWNhdGUudHlwZSA9PT0gJ2JsYW5rIG5vZGUnICYmICFvcHRpb25zLnByb2R1Y2VHZW5lcmFsaXplZFJkZikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udmVydCBAbGlzdCB0byB0cmlwbGVzXG4gICAgICAgIGlmKF9pc0xpc3QoaXRlbSkpIHtcbiAgICAgICAgICBfbGlzdFRvUkRGKGl0ZW1bJ0BsaXN0J10sIGlzc3Vlciwgc3ViamVjdCwgcHJlZGljYXRlLCBydmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb252ZXJ0IHZhbHVlIG9yIG5vZGUgb2JqZWN0IHRvIHRyaXBsZVxuICAgICAgICAgIHZhciBvYmplY3QgPSBfb2JqZWN0VG9SREYoaXRlbSk7XG4gICAgICAgICAgLy8gc2tpcCBudWxsIG9iamVjdHMgKHRoZXkgYXJlIHJlbGF0aXZlIElSSXMpXG4gICAgICAgICAgaWYob2JqZWN0KSB7XG4gICAgICAgICAgICBydmFsLnB1c2goe3N1YmplY3Q6IHN1YmplY3QsIHByZWRpY2F0ZTogcHJlZGljYXRlLCBvYmplY3Q6IG9iamVjdH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydmFsO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgQGxpc3QgdmFsdWUgaW50byBsaW5rZWQgbGlzdCBvZiBibGFuayBub2RlIFJERiB0cmlwbGVzXG4gKiAoYW4gUkRGIGNvbGxlY3Rpb24pLlxuICpcbiAqIEBwYXJhbSBsaXN0IHRoZSBAbGlzdCB2YWx1ZS5cbiAqIEBwYXJhbSBpc3N1ZXIgYSBJZGVudGlmaWVySXNzdWVyIGZvciBhc3NpZ25pbmcgYmxhbmsgbm9kZSBuYW1lcy5cbiAqIEBwYXJhbSBzdWJqZWN0IHRoZSBzdWJqZWN0IGZvciB0aGUgaGVhZCBvZiB0aGUgbGlzdC5cbiAqIEBwYXJhbSBwcmVkaWNhdGUgdGhlIHByZWRpY2F0ZSBmb3IgdGhlIGhlYWQgb2YgdGhlIGxpc3QuXG4gKiBAcGFyYW0gdHJpcGxlcyB0aGUgYXJyYXkgb2YgdHJpcGxlcyB0byBhcHBlbmQgdG8uXG4gKi9cbmZ1bmN0aW9uIF9saXN0VG9SREYobGlzdCwgaXNzdWVyLCBzdWJqZWN0LCBwcmVkaWNhdGUsIHRyaXBsZXMpIHtcbiAgdmFyIGZpcnN0ID0ge3R5cGU6ICdJUkknLCB2YWx1ZTogUkRGX0ZJUlNUfTtcbiAgdmFyIHJlc3QgPSB7dHlwZTogJ0lSSScsIHZhbHVlOiBSREZfUkVTVH07XG4gIHZhciBuaWwgPSB7dHlwZTogJ0lSSScsIHZhbHVlOiBSREZfTklMfTtcblxuICBmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcblxuICAgIHZhciBibGFua05vZGUgPSB7dHlwZTogJ2JsYW5rIG5vZGUnLCB2YWx1ZTogaXNzdWVyLmdldElkKCl9O1xuICAgIHRyaXBsZXMucHVzaCh7c3ViamVjdDogc3ViamVjdCwgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogYmxhbmtOb2RlfSk7XG5cbiAgICBzdWJqZWN0ID0gYmxhbmtOb2RlO1xuICAgIHByZWRpY2F0ZSA9IGZpcnN0O1xuICAgIHZhciBvYmplY3QgPSBfb2JqZWN0VG9SREYoaXRlbSk7XG5cbiAgICAvLyBza2lwIG51bGwgb2JqZWN0cyAodGhleSBhcmUgcmVsYXRpdmUgSVJJcylcbiAgICBpZihvYmplY3QpIHtcbiAgICAgIHRyaXBsZXMucHVzaCh7c3ViamVjdDogc3ViamVjdCwgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0fSk7XG4gICAgfVxuXG4gICAgcHJlZGljYXRlID0gcmVzdDtcbiAgfVxuXG4gIHRyaXBsZXMucHVzaCh7c3ViamVjdDogc3ViamVjdCwgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogbmlsfSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBKU09OLUxEIHZhbHVlIG9iamVjdCB0byBhbiBSREYgbGl0ZXJhbCBvciBhIEpTT04tTEQgc3RyaW5nIG9yXG4gKiBub2RlIG9iamVjdCB0byBhbiBSREYgcmVzb3VyY2UuXG4gKlxuICogQHBhcmFtIGl0ZW0gdGhlIEpTT04tTEQgdmFsdWUgb3Igbm9kZSBvYmplY3QuXG4gKlxuICogQHJldHVybiB0aGUgUkRGIGxpdGVyYWwgb3IgUkRGIHJlc291cmNlLlxuICovXG5mdW5jdGlvbiBfb2JqZWN0VG9SREYoaXRlbSkge1xuICB2YXIgb2JqZWN0ID0ge307XG5cbiAgLy8gY29udmVydCB2YWx1ZSBvYmplY3QgdG8gUkRGXG4gIGlmKF9pc1ZhbHVlKGl0ZW0pKSB7XG4gICAgb2JqZWN0LnR5cGUgPSAnbGl0ZXJhbCc7XG4gICAgdmFyIHZhbHVlID0gaXRlbVsnQHZhbHVlJ107XG4gICAgdmFyIGRhdGF0eXBlID0gaXRlbVsnQHR5cGUnXSB8fCBudWxsO1xuXG4gICAgLy8gY29udmVydCB0byBYU0QgZGF0YXR5cGVzIGFzIGFwcHJvcHJpYXRlXG4gICAgaWYoX2lzQm9vbGVhbih2YWx1ZSkpIHtcbiAgICAgIG9iamVjdC52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICBvYmplY3QuZGF0YXR5cGUgPSBkYXRhdHlwZSB8fCBYU0RfQk9PTEVBTjtcbiAgICB9IGVsc2UgaWYoX2lzRG91YmxlKHZhbHVlKSB8fCBkYXRhdHlwZSA9PT0gWFNEX0RPVUJMRSkge1xuICAgICAgaWYoIV9pc0RvdWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIGNhbm9uaWNhbCBkb3VibGUgcmVwcmVzZW50YXRpb25cbiAgICAgIG9iamVjdC52YWx1ZSA9IHZhbHVlLnRvRXhwb25lbnRpYWwoMTUpLnJlcGxhY2UoLyhcXGQpMCplXFwrPy8sICckMUUnKTtcbiAgICAgIG9iamVjdC5kYXRhdHlwZSA9IGRhdGF0eXBlIHx8IFhTRF9ET1VCTEU7XG4gICAgfSBlbHNlIGlmKF9pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgIG9iamVjdC52YWx1ZSA9IHZhbHVlLnRvRml4ZWQoMCk7XG4gICAgICBvYmplY3QuZGF0YXR5cGUgPSBkYXRhdHlwZSB8fCBYU0RfSU5URUdFUjtcbiAgICB9IGVsc2UgaWYoJ0BsYW5ndWFnZScgaW4gaXRlbSkge1xuICAgICAgb2JqZWN0LnZhbHVlID0gdmFsdWU7XG4gICAgICBvYmplY3QuZGF0YXR5cGUgPSBkYXRhdHlwZSB8fCBSREZfTEFOR1NUUklORztcbiAgICAgIG9iamVjdC5sYW5ndWFnZSA9IGl0ZW1bJ0BsYW5ndWFnZSddO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3QudmFsdWUgPSB2YWx1ZTtcbiAgICAgIG9iamVjdC5kYXRhdHlwZSA9IGRhdGF0eXBlIHx8IFhTRF9TVFJJTkc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbnZlcnQgc3RyaW5nL25vZGUgb2JqZWN0IHRvIFJERlxuICAgIHZhciBpZCA9IF9pc09iamVjdChpdGVtKSA/IGl0ZW1bJ0BpZCddIDogaXRlbTtcbiAgICBvYmplY3QudHlwZSA9IChpZC5pbmRleE9mKCdfOicpID09PSAwKSA/ICdibGFuayBub2RlJyA6ICdJUkknO1xuICAgIG9iamVjdC52YWx1ZSA9IGlkO1xuICB9XG5cbiAgLy8gc2tpcCByZWxhdGl2ZSBJUklzXG4gIGlmKG9iamVjdC50eXBlID09PSAnSVJJJyAmJiAhX2lzQWJzb2x1dGVJcmkob2JqZWN0LnZhbHVlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSREYgdHJpcGxlIG9iamVjdCB0byBhIEpTT04tTEQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBvIHRoZSBSREYgdHJpcGxlIG9iamVjdCB0byBjb252ZXJ0LlxuICogQHBhcmFtIHVzZU5hdGl2ZVR5cGVzIHRydWUgdG8gb3V0cHV0IG5hdGl2ZSB0eXBlcywgZmFsc2Ugbm90IHRvLlxuICpcbiAqIEByZXR1cm4gdGhlIEpTT04tTEQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBfUkRGVG9PYmplY3QobywgdXNlTmF0aXZlVHlwZXMpIHtcbiAgLy8gY29udmVydCBJUkkvYmxhbmsgbm9kZSBvYmplY3QgdG8gSlNPTi1MRFxuICBpZihvLnR5cGUgPT09ICdJUkknIHx8IG8udHlwZSA9PT0gJ2JsYW5rIG5vZGUnKSB7XG4gICAgcmV0dXJuIHsnQGlkJzogby52YWx1ZX07XG4gIH1cblxuICAvLyBjb252ZXJ0IGxpdGVyYWwgdG8gSlNPTi1MRFxuICB2YXIgcnZhbCA9IHsnQHZhbHVlJzogby52YWx1ZX07XG5cbiAgLy8gYWRkIGxhbmd1YWdlXG4gIGlmKG8ubGFuZ3VhZ2UpIHtcbiAgICBydmFsWydAbGFuZ3VhZ2UnXSA9IG8ubGFuZ3VhZ2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHR5cGUgPSBvLmRhdGF0eXBlO1xuICAgIGlmKCF0eXBlKSB7XG4gICAgICB0eXBlID0gWFNEX1NUUklORztcbiAgICB9XG4gICAgLy8gdXNlIG5hdGl2ZSB0eXBlcyBmb3IgY2VydGFpbiB4c2QgdHlwZXNcbiAgICBpZih1c2VOYXRpdmVUeXBlcykge1xuICAgICAgaWYodHlwZSA9PT0gWFNEX0JPT0xFQU4pIHtcbiAgICAgICAgaWYocnZhbFsnQHZhbHVlJ10gPT09ICd0cnVlJykge1xuICAgICAgICAgIHJ2YWxbJ0B2YWx1ZSddID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmKHJ2YWxbJ0B2YWx1ZSddID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgcnZhbFsnQHZhbHVlJ10gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKF9pc051bWVyaWMocnZhbFsnQHZhbHVlJ10pKSB7XG4gICAgICAgIGlmKHR5cGUgPT09IFhTRF9JTlRFR0VSKSB7XG4gICAgICAgICAgdmFyIGkgPSBwYXJzZUludChydmFsWydAdmFsdWUnXSwgMTApO1xuICAgICAgICAgIGlmKGkudG9GaXhlZCgwKSA9PT0gcnZhbFsnQHZhbHVlJ10pIHtcbiAgICAgICAgICAgIHJ2YWxbJ0B2YWx1ZSddID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSBYU0RfRE9VQkxFKSB7XG4gICAgICAgICAgcnZhbFsnQHZhbHVlJ10gPSBwYXJzZUZsb2F0KHJ2YWxbJ0B2YWx1ZSddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZG8gbm90IGFkZCBuYXRpdmUgdHlwZVxuICAgICAgaWYoW1hTRF9CT09MRUFOLCBYU0RfSU5URUdFUiwgWFNEX0RPVUJMRSwgWFNEX1NUUklOR11cbiAgICAgICAgLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICAgIHJ2YWxbJ0B0eXBlJ10gPSB0eXBlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZih0eXBlICE9PSBYU0RfU1RSSU5HKSB7XG4gICAgICBydmFsWydAdHlwZSddID0gdHlwZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnZhbDtcbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0d28gUkRGIHRyaXBsZXMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB0MSB0aGUgZmlyc3QgdHJpcGxlLlxuICogQHBhcmFtIHQyIHRoZSBzZWNvbmQgdHJpcGxlLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJpcGxlcyBhcmUgdGhlIHNhbWUsIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2NvbXBhcmVSREZUcmlwbGVzKHQxLCB0Mikge1xuICB2YXIgYXR0cnMgPSBbJ3N1YmplY3QnLCAncHJlZGljYXRlJywgJ29iamVjdCddO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGlmKHQxW2F0dHJdLnR5cGUgIT09IHQyW2F0dHJdLnR5cGUgfHwgdDFbYXR0cl0udmFsdWUgIT09IHQyW2F0dHJdLnZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmKHQxLm9iamVjdC5sYW5ndWFnZSAhPT0gdDIub2JqZWN0Lmxhbmd1YWdlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmKHQxLm9iamVjdC5kYXRhdHlwZSAhPT0gdDIub2JqZWN0LmRhdGF0eXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIERFRklORSBVUkROQTIwMTUgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnZhciBVUkROQTIwMTUgPSAoZnVuY3Rpb24oKSB7XG5cbnZhciBQT1NJVElPTlMgPSB7J3N1YmplY3QnOiAncycsICdvYmplY3QnOiAnbycsICduYW1lJzogJ2cnfTtcblxudmFyIE5vcm1hbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMubmFtZSA9ICdVUkROQTIwMTUnO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmJsYW5rTm9kZUluZm8gPSB7fTtcbiAgdGhpcy5oYXNoVG9CbGFua05vZGVzID0ge307XG4gIHRoaXMuY2Fub25pY2FsSXNzdWVyID0gbmV3IElkZW50aWZpZXJJc3N1ZXIoJ186YzE0bicpO1xuICB0aGlzLnF1YWRzID0gW107XG4gIHRoaXMuc2NoZWR1bGUgPSB7fTtcbiAgaWYoJ21heENhbGxTdGFja0RlcHRoJyBpbiBvcHRpb25zKSB7XG4gICAgdGhpcy5zY2hlZHVsZS5NQVhfREVQVEggPSBvcHRpb25zLm1heENhbGxTdGFja0RlcHRoO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2NoZWR1bGUuTUFYX0RFUFRIID0gNTAwO1xuICB9XG4gIGlmKCdtYXhUb3RhbENhbGxTdGFja0RlcHRoJyBpbiBvcHRpb25zKSB7XG4gICAgdGhpcy5zY2hlZHVsZS5NQVhfVE9UQUxfREVQVEggPSBvcHRpb25zLm1heENhbGxTdGFja0RlcHRoO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2NoZWR1bGUuTUFYX1RPVEFMX0RFUFRIID0gMHhGRkZGRkZGRjtcbiAgfVxuICB0aGlzLnNjaGVkdWxlLmRlcHRoID0gMDtcbiAgdGhpcy5zY2hlZHVsZS50b3RhbERlcHRoID0gMDtcbiAgaWYoJ3RpbWVTbGljZScgaW4gb3B0aW9ucykge1xuICAgIHRoaXMuc2NoZWR1bGUudGltZVNsaWNlID0gb3B0aW9ucy50aW1lU2xpY2U7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWlsbGlzZWNvbmRzXG4gICAgdGhpcy5zY2hlZHVsZS50aW1lU2xpY2UgPSAxMDtcbiAgfVxufTtcblxuLy8gZG8gc29tZSB3b3JrIGluIGEgdGltZSBzbGljZSwgYnV0IGluIHNlcmlhbFxuTm9ybWFsaXplLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbihmbiwgY2FsbGJhY2spIHtcbiAgdmFyIHNjaGVkdWxlID0gdGhpcy5zY2hlZHVsZTtcblxuICBpZihzY2hlZHVsZS50b3RhbERlcHRoID49IHNjaGVkdWxlLk1BWF9UT1RBTF9ERVBUSCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXG4gICAgICAnTWF4aW11bSB0b3RhbCBjYWxsIHN0YWNrIGRlcHRoIGV4Y2VlZGVkOyBub3JtYWxpemF0aW9uIGFib3J0aW5nLicpKTtcbiAgfVxuXG4gIChmdW5jdGlvbiB3b3JrKCkge1xuICAgIGlmKHNjaGVkdWxlLmRlcHRoID09PSBzY2hlZHVsZS5NQVhfREVQVEgpIHtcbiAgICAgIC8vIHN0YWNrIHRvbyBkZWVwLCBydW4gb24gbmV4dCB0aWNrXG4gICAgICBzY2hlZHVsZS5kZXB0aCA9IDA7XG4gICAgICBzY2hlZHVsZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4ganNvbmxkLm5leHRUaWNrKHdvcmspO1xuICAgIH1cblxuICAgIC8vIGlmIG5vdCB5ZXQgcnVubmluZywgZm9yY2UgcnVuXG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmKCFzY2hlZHVsZS5ydW5uaW5nKSB7XG4gICAgICBzY2hlZHVsZS5zdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgc2NoZWR1bGUuZGVhZGxpbmUgPSBzY2hlZHVsZS5zdGFydCArIHNjaGVkdWxlLnRpbWVTbGljZTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBzaG91bGQgYWxzbyBpbmNsdWRlIGFuIGVzdGltYXRlIG9mIGV4cGVjdGVkV29ya1RpbWVcbiAgICBpZihub3cgPCBzY2hlZHVsZS5kZWFkbGluZSkge1xuICAgICAgc2NoZWR1bGUucnVubmluZyA9IHRydWU7XG4gICAgICBzY2hlZHVsZS5kZXB0aCsrO1xuICAgICAgc2NoZWR1bGUudG90YWxEZXB0aCsrO1xuICAgICAgcmV0dXJuIGZuKGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIHNjaGVkdWxlLmRlcHRoLS07XG4gICAgICAgIHNjaGVkdWxlLnRvdGFsRGVwdGgtLTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbm90IGVub3VnaCB0aW1lIGxlZnQgaW4gdGhpcyBzbGljZSwgcnVuIGFmdGVyIGxldHRpbmcgYnJvd3NlclxuICAgIC8vIGRvIHNvbWUgb3RoZXIgdGhpbmdzXG4gICAgc2NoZWR1bGUuZGVwdGggPSAwO1xuICAgIHNjaGVkdWxlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICBqc29ubGQuc2V0SW1tZWRpYXRlKHdvcmspO1xuICB9KSgpO1xufTtcblxuLy8gYXN5bmNocm9ub3VzbHkgbG9vcFxuTm9ybWFsaXplLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oaXRlcmFibGUsIGZuLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpdGVyYXRvcjtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW5ndGg7XG4gIGlmKF9pc0FycmF5KGl0ZXJhYmxlKSkge1xuICAgIGxlbmd0aCA9IGl0ZXJhYmxlLmxlbmd0aDtcbiAgICBpdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYoaWR4ID09PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaXRlcmF0b3IudmFsdWUgPSBpdGVyYWJsZVtpZHgrK107XG4gICAgICBpdGVyYXRvci5rZXkgPSBpZHg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaXRlcmFibGUpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZihpZHggPT09IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpdGVyYXRvci5rZXkgPSBrZXlzW2lkeCsrXTtcbiAgICAgIGl0ZXJhdG9yLnZhbHVlID0gaXRlcmFibGVbaXRlcmF0b3Iua2V5XTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH1cblxuICAoZnVuY3Rpb24gaXRlcmF0ZShlcnIsIHJlc3VsdCkge1xuICAgIGlmKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICAgIGlmKGl0ZXJhdG9yKCkpIHtcbiAgICAgIHJldHVybiBzZWxmLmRvV29yayhmdW5jdGlvbigpIHtcbiAgICAgICAgZm4oaXRlcmF0b3IudmFsdWUsIGl0ZXJhdG9yLmtleSwgaXRlcmF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2FsbGJhY2soKTtcbiAgfSkoKTtcbn07XG5cbi8vIGFzeW5jaHJvbm91cyB3YXRlcmZhbGxcbk5vcm1hbGl6ZS5wcm90b3R5cGUud2F0ZXJmYWxsID0gZnVuY3Rpb24oZm5zLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNlbGYuZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuLCBpZHgsIGNhbGxiYWNrKSB7XG4gICAgc2VsZi5kb1dvcmsoZm4sIGNhbGxiYWNrKTtcbiAgfSwgY2FsbGJhY2spO1xufTtcblxuLy8gYXN5bmNocm9ub3VzIHdoaWxlXG5Ob3JtYWxpemUucHJvdG90eXBlLndoaWxzdCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm4sIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgKGZ1bmN0aW9uIGxvb3AoZXJyKSB7XG4gICAgaWYoZXJyKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgaWYoIWNvbmRpdGlvbigpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgc2VsZi5kb1dvcmsoZm4sIGxvb3ApO1xuICB9KSgpO1xufTtcblxuLy8gNC40KSBOb3JtYWxpemF0aW9uIEFsZ29yaXRobVxuTm9ybWFsaXplLnByb3RvdHlwZS5tYWluID0gZnVuY3Rpb24oZGF0YXNldCwgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnNjaGVkdWxlLnN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciByZXN1bHQ7XG5cbiAgLy8gaGFuZGxlIGludmFsaWQgb3V0cHV0IGZvcm1hdFxuICBpZihzZWxmLm9wdGlvbnMuZm9ybWF0KSB7XG4gICAgaWYoc2VsZi5vcHRpb25zLmZvcm1hdCAhPT0gJ2FwcGxpY2F0aW9uL25xdWFkcycpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdVbmtub3duIG91dHB1dCBmb3JtYXQuJyxcbiAgICAgICAgJ2pzb25sZC5Vbmtub3duRm9ybWF0Jywge2Zvcm1hdDogc2VsZi5vcHRpb25zLmZvcm1hdH0pKTtcbiAgICB9XG4gIH1cblxuICAvLyAxKSBDcmVhdGUgdGhlIG5vcm1hbGl6YXRpb24gc3RhdGUuXG5cbiAgLy8gTm90ZTogT3B0aW1pemUgYnkgZ2VuZXJhdGluZyBub24tbm9ybWFsaXplZCBibGFuayBub2RlIG1hcCBjb25jdXJyZW50bHkuXG4gIHZhciBub25Ob3JtYWxpemVkID0ge307XG5cbiAgc2VsZi53YXRlcmZhbGwoW1xuICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAvLyAyKSBGb3IgZXZlcnkgcXVhZCBpbiBpbnB1dCBkYXRhc2V0OlxuICAgICAgc2VsZi5mb3JFYWNoKGRhdGFzZXQsIGZ1bmN0aW9uKHRyaXBsZXMsIGdyYXBoTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYoZ3JhcGhOYW1lID09PSAnQGRlZmF1bHQnKSB7XG4gICAgICAgICAgZ3JhcGhOYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmZvckVhY2godHJpcGxlcywgZnVuY3Rpb24ocXVhZCwgaWR4LCBjYWxsYmFjaykge1xuICAgICAgICAgIGlmKGdyYXBoTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYoZ3JhcGhOYW1lLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgICAgICAgcXVhZC5uYW1lID0ge3R5cGU6ICdibGFuayBub2RlJywgdmFsdWU6IGdyYXBoTmFtZX07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWFkLm5hbWUgPSB7dHlwZTogJ0lSSScsIHZhbHVlOiBncmFwaE5hbWV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLnF1YWRzLnB1c2gocXVhZCk7XG5cbiAgICAgICAgICAvLyAyLjEpIEZvciBlYWNoIGJsYW5rIG5vZGUgdGhhdCBvY2N1cnMgaW4gdGhlIHF1YWQsIGFkZCBhIHJlZmVyZW5jZVxuICAgICAgICAgIC8vIHRvIHRoZSBxdWFkIHVzaW5nIHRoZSBibGFuayBub2RlIGlkZW50aWZpZXIgaW4gdGhlIGJsYW5rIG5vZGUgdG9cbiAgICAgICAgICAvLyBxdWFkcyBtYXAsIGNyZWF0aW5nIGEgbmV3IGVudHJ5IGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICBzZWxmLmZvckVhY2hDb21wb25lbnQocXVhZCwgZnVuY3Rpb24oY29tcG9uZW50KSB7XG4gICAgICAgICAgICBpZihjb21wb25lbnQudHlwZSAhPT0gJ2JsYW5rIG5vZGUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpZCA9IGNvbXBvbmVudC52YWx1ZTtcbiAgICAgICAgICAgIGlmKGlkIGluIHNlbGYuYmxhbmtOb2RlSW5mbykge1xuICAgICAgICAgICAgICBzZWxmLmJsYW5rTm9kZUluZm9baWRdLnF1YWRzLnB1c2gocXVhZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub25Ob3JtYWxpemVkW2lkXSA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuYmxhbmtOb2RlSW5mb1tpZF0gPSB7cXVhZHM6IFtxdWFkXX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIC8vIDMpIENyZWF0ZSBhIGxpc3Qgb2Ygbm9uLW5vcm1hbGl6ZWQgYmxhbmsgbm9kZSBpZGVudGlmaWVyc1xuICAgICAgLy8gbm9uLW5vcm1hbGl6ZWQgaWRlbnRpZmllcnMgYW5kIHBvcHVsYXRlIGl0IHVzaW5nIHRoZSBrZXlzIGZyb20gdGhlXG4gICAgICAvLyBibGFuayBub2RlIHRvIHF1YWRzIG1hcC5cbiAgICAgIC8vIE5vdGU6IFdlIHVzZSBhIG1hcCBoZXJlIGFuZCBpdCB3YXMgZ2VuZXJhdGVkIGR1cmluZyBzdGVwIDIuXG5cbiAgICAgIC8vIDQpIEluaXRpYWxpemUgc2ltcGxlLCBhIGJvb2xlYW4gZmxhZywgdG8gdHJ1ZS5cbiAgICAgIHZhciBzaW1wbGUgPSB0cnVlO1xuXG4gICAgICAvLyA1KSBXaGlsZSBzaW1wbGUgaXMgdHJ1ZSwgaXNzdWUgY2Fub25pY2FsIGlkZW50aWZpZXJzIGZvciBibGFuayBub2RlczpcbiAgICAgIHNlbGYud2hpbHN0KGZ1bmN0aW9uKCkgeyByZXR1cm4gc2ltcGxlOyB9LCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAvLyA1LjEpIFNldCBzaW1wbGUgdG8gZmFsc2UuXG4gICAgICAgIHNpbXBsZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIDUuMikgQ2xlYXIgaGFzaCB0byBibGFuayBub2RlcyBtYXAuXG4gICAgICAgIHNlbGYuaGFzaFRvQmxhbmtOb2RlcyA9IHt9O1xuXG4gICAgICAgIHNlbGYud2F0ZXJmYWxsKFtcbiAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gNS4zKSBGb3IgZWFjaCBibGFuayBub2RlIGlkZW50aWZpZXIgaWRlbnRpZmllciBpbiBub24tbm9ybWFsaXplZFxuICAgICAgICAgICAgLy8gaWRlbnRpZmllcnM6XG4gICAgICAgICAgICBzZWxmLmZvckVhY2gobm9uTm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUsIGlkLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyA1LjMuMSkgQ3JlYXRlIGEgaGFzaCwgaGFzaCwgYWNjb3JkaW5nIHRvIHRoZSBIYXNoIEZpcnN0IERlZ3JlZVxuICAgICAgICAgICAgICAvLyBRdWFkcyBhbGdvcml0aG0uXG4gICAgICAgICAgICAgIHNlbGYuaGFzaEZpcnN0RGVncmVlUXVhZHMoaWQsIGZ1bmN0aW9uKGVyciwgaGFzaCkge1xuICAgICAgICAgICAgICAgIGlmKGVycikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDUuMy4yKSBBZGQgaGFzaCBhbmQgaWRlbnRpZmllciB0byBoYXNoIHRvIGJsYW5rIG5vZGVzIG1hcCxcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGluZyBhIG5ldyBlbnRyeSBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICAgICAgaWYoaGFzaCBpbiBzZWxmLmhhc2hUb0JsYW5rTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuaGFzaFRvQmxhbmtOb2Rlc1toYXNoXS5wdXNoKGlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2VsZi5oYXNoVG9CbGFua05vZGVzW2hhc2hdID0gW2lkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gNS40KSBGb3IgZWFjaCBoYXNoIHRvIGlkZW50aWZpZXIgbGlzdCBtYXBwaW5nIGluIGhhc2ggdG8gYmxhbmtcbiAgICAgICAgICAgIC8vIG5vZGVzIG1hcCwgbGV4aWNvZ3JhcGhpY2FsbHktc29ydGVkIGJ5IGhhc2g6XG4gICAgICAgICAgICB2YXIgaGFzaGVzID0gT2JqZWN0LmtleXMoc2VsZi5oYXNoVG9CbGFua05vZGVzKS5zb3J0KCk7XG4gICAgICAgICAgICBzZWxmLmZvckVhY2goaGFzaGVzLCBmdW5jdGlvbihoYXNoLCBpLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyA1LjQuMSkgSWYgdGhlIGxlbmd0aCBvZiBpZGVudGlmaWVyIGxpc3QgaXMgZ3JlYXRlciB0aGFuIDEsXG4gICAgICAgICAgICAgIC8vIGNvbnRpbnVlIHRvIHRoZSBuZXh0IG1hcHBpbmcuXG4gICAgICAgICAgICAgIHZhciBpZExpc3QgPSBzZWxmLmhhc2hUb0JsYW5rTm9kZXNbaGFzaF07XG4gICAgICAgICAgICAgIGlmKGlkTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyA1LjQuMikgVXNlIHRoZSBJc3N1ZSBJZGVudGlmaWVyIGFsZ29yaXRobSwgcGFzc2luZyBjYW5vbmljYWxcbiAgICAgICAgICAgICAgLy8gaXNzdWVyIGFuZCB0aGUgc2luZ2xlIGJsYW5rIG5vZGUgaWRlbnRpZmllciBpbiBpZGVudGlmaWVyXG4gICAgICAgICAgICAgIC8vIGxpc3QsIGlkZW50aWZpZXIsIHRvIGlzc3VlIGEgY2Fub25pY2FsIHJlcGxhY2VtZW50IGlkZW50aWZpZXJcbiAgICAgICAgICAgICAgLy8gZm9yIGlkZW50aWZpZXIuXG4gICAgICAgICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGNoYW5naW5nIGBnZXRJZGAgdG8gYGlzc3VlYFxuICAgICAgICAgICAgICB2YXIgaWQgPSBpZExpc3RbMF07XG4gICAgICAgICAgICAgIHNlbGYuY2Fub25pY2FsSXNzdWVyLmdldElkKGlkKTtcblxuICAgICAgICAgICAgICAvLyA1LjQuMykgUmVtb3ZlIGlkZW50aWZpZXIgZnJvbSBub24tbm9ybWFsaXplZCBpZGVudGlmaWVycy5cbiAgICAgICAgICAgICAgZGVsZXRlIG5vbk5vcm1hbGl6ZWRbaWRdO1xuXG4gICAgICAgICAgICAgIC8vIDUuNC40KSBSZW1vdmUgaGFzaCBmcm9tIHRoZSBoYXNoIHRvIGJsYW5rIG5vZGVzIG1hcC5cbiAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuaGFzaFRvQmxhbmtOb2Rlc1toYXNoXTtcblxuICAgICAgICAgICAgICAvLyA1LjQuNSkgU2V0IHNpbXBsZSB0byB0cnVlLlxuICAgICAgICAgICAgICBzaW1wbGUgPSB0cnVlO1xuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgXSwgY2FsbGJhY2spO1xuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIC8vIDYpIEZvciBlYWNoIGhhc2ggdG8gaWRlbnRpZmllciBsaXN0IG1hcHBpbmcgaW4gaGFzaCB0byBibGFuayBub2RlcyBtYXAsXG4gICAgICAvLyBsZXhpY29ncmFwaGljYWxseS1zb3J0ZWQgYnkgaGFzaDpcbiAgICAgIHZhciBoYXNoZXMgPSBPYmplY3Qua2V5cyhzZWxmLmhhc2hUb0JsYW5rTm9kZXMpLnNvcnQoKTtcbiAgICAgIHNlbGYuZm9yRWFjaChoYXNoZXMsIGZ1bmN0aW9uKGhhc2gsIGlkeCwgY2FsbGJhY2spIHtcbiAgICAgICAgLy8gNi4xKSBDcmVhdGUgaGFzaCBwYXRoIGxpc3Qgd2hlcmUgZWFjaCBpdGVtIHdpbGwgYmUgYSByZXN1bHQgb2ZcbiAgICAgICAgLy8gcnVubmluZyB0aGUgSGFzaCBOLURlZ3JlZSBRdWFkcyBhbGdvcml0aG0uXG4gICAgICAgIHZhciBoYXNoUGF0aExpc3QgPSBbXTtcblxuICAgICAgICAvLyA2LjIpIEZvciBlYWNoIGJsYW5rIG5vZGUgaWRlbnRpZmllciBpZGVudGlmaWVyIGluIGlkZW50aWZpZXIgbGlzdDpcbiAgICAgICAgdmFyIGlkTGlzdCA9IHNlbGYuaGFzaFRvQmxhbmtOb2Rlc1toYXNoXTtcbiAgICAgICAgc2VsZi53YXRlcmZhbGwoW1xuICAgICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzZWxmLmZvckVhY2goaWRMaXN0LCBmdW5jdGlvbihpZCwgaWR4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyA2LjIuMSkgSWYgYSBjYW5vbmljYWwgaWRlbnRpZmllciBoYXMgYWxyZWFkeSBiZWVuIGlzc3VlZCBmb3JcbiAgICAgICAgICAgICAgLy8gaWRlbnRpZmllciwgY29udGludWUgdG8gdGhlIG5leHQgaWRlbnRpZmllci5cbiAgICAgICAgICAgICAgaWYoc2VsZi5jYW5vbmljYWxJc3N1ZXIuaGFzSWQoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyA2LjIuMikgQ3JlYXRlIHRlbXBvcmFyeSBpc3N1ZXIsIGFuIGlkZW50aWZpZXIgaXNzdWVyXG4gICAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHdpdGggdGhlIHByZWZpeCBfOmIuXG4gICAgICAgICAgICAgIHZhciBpc3N1ZXIgPSBuZXcgSWRlbnRpZmllcklzc3VlcignXzpiJyk7XG5cbiAgICAgICAgICAgICAgLy8gNi4yLjMpIFVzZSB0aGUgSXNzdWUgSWRlbnRpZmllciBhbGdvcml0aG0sIHBhc3NpbmcgdGVtcG9yYXJ5XG4gICAgICAgICAgICAgIC8vIGlzc3VlciBhbmQgaWRlbnRpZmllciwgdG8gaXNzdWUgYSBuZXcgdGVtcG9yYXJ5IGJsYW5rIG5vZGVcbiAgICAgICAgICAgICAgLy8gaWRlbnRpZmllciBmb3IgaWRlbnRpZmllci5cbiAgICAgICAgICAgICAgaXNzdWVyLmdldElkKGlkKTtcblxuICAgICAgICAgICAgICAvLyA2LjIuNCkgUnVuIHRoZSBIYXNoIE4tRGVncmVlIFF1YWRzIGFsZ29yaXRobSwgcGFzc2luZ1xuICAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgaXNzdWVyLCBhbmQgYXBwZW5kIHRoZSByZXN1bHQgdG8gdGhlIGhhc2ggcGF0aCBsaXN0LlxuICAgICAgICAgICAgICBzZWxmLmhhc2hORGVncmVlUXVhZHMoaWQsIGlzc3VlciwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXNoUGF0aExpc3QucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIDYuMykgRm9yIGVhY2ggcmVzdWx0IGluIHRoZSBoYXNoIHBhdGggbGlzdCxcbiAgICAgICAgICAgIC8vIGxleGljb2dyYXBoaWNhbGx5LXNvcnRlZCBieSB0aGUgaGFzaCBpbiByZXN1bHQ6XG4gICAgICAgICAgICBoYXNoUGF0aExpc3Quc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoYS5oYXNoIDwgYi5oYXNoKSA/IC0xIDogKChhLmhhc2ggPiBiLmhhc2gpID8gMSA6IDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLmZvckVhY2goaGFzaFBhdGhMaXN0LCBmdW5jdGlvbihyZXN1bHQsIGlkeCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gNi4zLjEpIEZvciBlYWNoIGJsYW5rIG5vZGUgaWRlbnRpZmllciwgZXhpc3RpbmcgaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgLy8gdGhhdCB3YXMgaXNzdWVkIGEgdGVtcG9yYXJ5IGlkZW50aWZpZXIgYnkgaWRlbnRpZmllciBpc3N1ZXJcbiAgICAgICAgICAgICAgLy8gaW4gcmVzdWx0LCBpc3N1ZSBhIGNhbm9uaWNhbCBpZGVudGlmaWVyLCBpbiB0aGUgc2FtZSBvcmRlcixcbiAgICAgICAgICAgICAgLy8gdXNpbmcgdGhlIElzc3VlIElkZW50aWZpZXIgYWxnb3JpdGhtLCBwYXNzaW5nIGNhbm9uaWNhbFxuICAgICAgICAgICAgICAvLyBpc3N1ZXIgYW5kIGV4aXN0aW5nIGlkZW50aWZpZXIuXG4gICAgICAgICAgICAgIGZvcih2YXIgZXhpc3RpbmcgaW4gcmVzdWx0Lmlzc3Vlci5leGlzdGluZykge1xuICAgICAgICAgICAgICAgIHNlbGYuY2Fub25pY2FsSXNzdWVyLmdldElkKGV4aXN0aW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgXSwgY2FsbGJhY2spO1xuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0sIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAvKiBOb3RlOiBBdCB0aGlzIHBvaW50IGFsbCBibGFuayBub2RlcyBpbiB0aGUgc2V0IG9mIFJERiBxdWFkcyBoYXZlIGJlZW5cbiAgICAgIGFzc2lnbmVkIGNhbm9uaWNhbCBpZGVudGlmaWVycywgd2hpY2ggaGF2ZSBiZWVuIHN0b3JlZCBpbiB0aGUgY2Fub25pY2FsXG4gICAgICBpc3N1ZXIuIEhlcmUgZWFjaCBxdWFkIGlzIHVwZGF0ZWQgYnkgYXNzaWduaW5nIGVhY2ggb2YgaXRzIGJsYW5rIG5vZGVzXG4gICAgICBpdHMgbmV3IGlkZW50aWZpZXIuICovXG5cbiAgICAgIC8vIDcpIEZvciBlYWNoIHF1YWQsIHF1YWQsIGluIGlucHV0IGRhdGFzZXQ6XG4gICAgICB2YXIgbm9ybWFsaXplZCA9IFtdO1xuICAgICAgc2VsZi53YXRlcmZhbGwoW1xuICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIHNlbGYuZm9yRWFjaChzZWxmLnF1YWRzLCBmdW5jdGlvbihxdWFkLCBpZHgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyA3LjEpIENyZWF0ZSBhIGNvcHksIHF1YWQgY29weSwgb2YgcXVhZCBhbmQgcmVwbGFjZSBhbnkgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIGJsYW5rIG5vZGUgaWRlbnRpZmllcnMgdXNpbmcgdGhlIGNhbm9uaWNhbCBpZGVudGlmaWVyc1xuICAgICAgICAgICAgLy8gcHJldmlvdXNseSBpc3N1ZWQgYnkgY2Fub25pY2FsIGlzc3Vlci5cbiAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9wdGltaXplIGF3YXkgdGhlIGNvcHkgaGVyZS5cbiAgICAgICAgICAgIHNlbGYuZm9yRWFjaENvbXBvbmVudChxdWFkLCBmdW5jdGlvbihjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgaWYoY29tcG9uZW50LnR5cGUgPT09ICdibGFuayBub2RlJyAmJlxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC52YWx1ZS5pbmRleE9mKHNlbGYuY2Fub25pY2FsSXNzdWVyLnByZWZpeCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQudmFsdWUgPSBzZWxmLmNhbm9uaWNhbElzc3Vlci5nZXRJZChjb21wb25lbnQudmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIDcuMikgQWRkIHF1YWQgY29weSB0byB0aGUgbm9ybWFsaXplZCBkYXRhc2V0LlxuICAgICAgICAgICAgbm9ybWFsaXplZC5wdXNoKF90b05RdWFkKHF1YWQpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIC8vIHNvcnQgbm9ybWFsaXplZCBvdXRwdXRcbiAgICAgICAgICBub3JtYWxpemVkLnNvcnQoKTtcblxuICAgICAgICAgIC8vIDgpIFJldHVybiB0aGUgbm9ybWFsaXplZCBkYXRhc2V0LlxuICAgICAgICAgIGlmKHNlbGYub3B0aW9ucy5mb3JtYXQgPT09ICdhcHBsaWNhdGlvbi9ucXVhZHMnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVkLmpvaW4oJycpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzdWx0ID0gX3BhcnNlTlF1YWRzKG5vcm1hbGl6ZWQuam9pbignJykpO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIF0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIF0sIGZ1bmN0aW9uKGVycikge1xuICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgfSk7XG59O1xuXG4vLyA0LjYpIEhhc2ggRmlyc3QgRGVncmVlIFF1YWRzXG5Ob3JtYWxpemUucHJvdG90eXBlLmhhc2hGaXJzdERlZ3JlZVF1YWRzID0gZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyByZXR1cm4gY2FjaGVkIGhhc2hcbiAgdmFyIGluZm8gPSBzZWxmLmJsYW5rTm9kZUluZm9baWRdO1xuICBpZignaGFzaCcgaW4gaW5mbykge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBpbmZvLmhhc2gpO1xuICB9XG5cbiAgLy8gMSkgSW5pdGlhbGl6ZSBucXVhZHMgdG8gYW4gZW1wdHkgbGlzdC4gSXQgd2lsbCBiZSB1c2VkIHRvIHN0b3JlIHF1YWRzIGluXG4gIC8vIE4tUXVhZHMgZm9ybWF0LlxuICB2YXIgbnF1YWRzID0gW107XG5cbiAgLy8gMikgR2V0IHRoZSBsaXN0IG9mIHF1YWRzIHF1YWRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVmZXJlbmNlIGJsYW5rIG5vZGVcbiAgLy8gaWRlbnRpZmllciBpbiB0aGUgYmxhbmsgbm9kZSB0byBxdWFkcyBtYXAuXG4gIHZhciBxdWFkcyA9IGluZm8ucXVhZHM7XG5cbiAgLy8gMykgRm9yIGVhY2ggcXVhZCBxdWFkIGluIHF1YWRzOlxuICBzZWxmLmZvckVhY2gocXVhZHMsIGZ1bmN0aW9uKHF1YWQsIGlkeCwgY2FsbGJhY2spIHtcbiAgICAvLyAzLjEpIFNlcmlhbGl6ZSB0aGUgcXVhZCBpbiBOLVF1YWRzIGZvcm1hdCB3aXRoIHRoZSBmb2xsb3dpbmcgc3BlY2lhbFxuICAgIC8vIHJ1bGU6XG5cbiAgICAvLyAzLjEuMSkgSWYgYW55IGNvbXBvbmVudCBpbiBxdWFkIGlzIGFuIGJsYW5rIG5vZGUsIHRoZW4gc2VyaWFsaXplIGl0XG4gICAgLy8gdXNpbmcgYSBzcGVjaWFsIGlkZW50aWZpZXIgYXMgZm9sbG93czpcbiAgICB2YXIgY29weSA9IHtwcmVkaWNhdGU6IHF1YWQucHJlZGljYXRlfTtcbiAgICBzZWxmLmZvckVhY2hDb21wb25lbnQocXVhZCwgZnVuY3Rpb24oY29tcG9uZW50LCBrZXkpIHtcbiAgICAgIC8vIDMuMS4yKSBJZiB0aGUgYmxhbmsgbm9kZSdzIGV4aXN0aW5nIGJsYW5rIG5vZGUgaWRlbnRpZmllciBtYXRjaGVzIHRoZVxuICAgICAgLy8gcmVmZXJlbmNlIGJsYW5rIG5vZGUgaWRlbnRpZmllciB0aGVuIHVzZSB0aGUgYmxhbmsgbm9kZSBpZGVudGlmaWVyIF86YSxcbiAgICAgIC8vIG90aGVyd2lzZSwgdXNlIHRoZSBibGFuayBub2RlIGlkZW50aWZpZXIgXzp6LlxuICAgICAgY29weVtrZXldID0gc2VsZi5tb2RpZnlGaXJzdERlZ3JlZUNvbXBvbmVudChpZCwgY29tcG9uZW50LCBrZXkpO1xuICAgIH0pO1xuICAgIG5xdWFkcy5wdXNoKF90b05RdWFkKGNvcHkpKTtcbiAgICBjYWxsYmFjaygpO1xuICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgICAvLyA0KSBTb3J0IG5xdWFkcyBpbiBsZXhpY29ncmFwaGljYWwgb3JkZXIuXG4gICAgbnF1YWRzLnNvcnQoKTtcblxuICAgIC8vIDUpIFJldHVybiB0aGUgaGFzaCB0aGF0IHJlc3VsdHMgZnJvbSBwYXNzaW5nIHRoZSBzb3J0ZWQsIGpvaW5lZCBucXVhZHNcbiAgICAvLyB0aHJvdWdoIHRoZSBoYXNoIGFsZ29yaXRobS5cbiAgICBpbmZvLmhhc2ggPSBOb3JtYWxpemVIYXNoLmhhc2hOUXVhZHMoc2VsZi5uYW1lLCBucXVhZHMpO1xuICAgIGNhbGxiYWNrKG51bGwsIGluZm8uaGFzaCk7XG4gIH0pO1xufTtcblxuLy8gaGVscGVyIGZvciBtb2RpZnlpbmcgY29tcG9uZW50IGR1cmluZyBIYXNoIEZpcnN0IERlZ3JlZSBRdWFkc1xuTm9ybWFsaXplLnByb3RvdHlwZS5tb2RpZnlGaXJzdERlZ3JlZUNvbXBvbmVudCA9IGZ1bmN0aW9uKGlkLCBjb21wb25lbnQpIHtcbiAgaWYoY29tcG9uZW50LnR5cGUgIT09ICdibGFuayBub2RlJykge1xuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cbiAgY29tcG9uZW50ID0gX2Nsb25lKGNvbXBvbmVudCk7XG4gIGNvbXBvbmVudC52YWx1ZSA9IChjb21wb25lbnQudmFsdWUgPT09IGlkID8gJ186YScgOiAnXzp6Jyk7XG4gIHJldHVybiBjb21wb25lbnQ7XG59O1xuXG4vLyA0LjcpIEhhc2ggUmVsYXRlZCBCbGFuayBOb2RlXG5Ob3JtYWxpemUucHJvdG90eXBlLmhhc2hSZWxhdGVkQmxhbmtOb2RlID0gZnVuY3Rpb24oXG4gIHJlbGF0ZWQsIHF1YWQsIGlzc3VlciwgcG9zaXRpb24sIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyAxKSBTZXQgdGhlIGlkZW50aWZpZXIgdG8gdXNlIGZvciByZWxhdGVkLCBwcmVmZXJyaW5nIGZpcnN0IHRoZSBjYW5vbmljYWxcbiAgLy8gaWRlbnRpZmllciBmb3IgcmVsYXRlZCBpZiBpc3N1ZWQsIHNlY29uZCB0aGUgaWRlbnRpZmllciBpc3N1ZWQgYnkgaXNzdWVyXG4gIC8vIGlmIGlzc3VlZCwgYW5kIGxhc3QsIGlmIG5lY2Vzc2FyeSwgdGhlIHJlc3VsdCBvZiB0aGUgSGFzaCBGaXJzdCBEZWdyZWVcbiAgLy8gUXVhZHMgYWxnb3JpdGhtLCBwYXNzaW5nIHJlbGF0ZWQuXG4gIHZhciBpZDtcbiAgc2VsZi53YXRlcmZhbGwoW1xuICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBpZihzZWxmLmNhbm9uaWNhbElzc3Vlci5oYXNJZChyZWxhdGVkKSkge1xuICAgICAgICBpZCA9IHNlbGYuY2Fub25pY2FsSXNzdWVyLmdldElkKHJlbGF0ZWQpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIGlmKGlzc3Vlci5oYXNJZChyZWxhdGVkKSkge1xuICAgICAgICBpZCA9IGlzc3Vlci5nZXRJZChyZWxhdGVkKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICBzZWxmLmhhc2hGaXJzdERlZ3JlZVF1YWRzKHJlbGF0ZWQsIGZ1bmN0aW9uKGVyciwgaGFzaCkge1xuICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBpZCA9IGhhc2g7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIF0sIGZ1bmN0aW9uKGVycikge1xuICAgIGlmKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgfVxuXG4gICAgLy8gMikgSW5pdGlhbGl6ZSBhIHN0cmluZyBpbnB1dCB0byB0aGUgdmFsdWUgb2YgcG9zaXRpb24uXG4gICAgLy8gTm90ZTogV2UgdXNlIGEgaGFzaCBvYmplY3QgaW5zdGVhZC5cbiAgICB2YXIgbWQgPSBuZXcgTm9ybWFsaXplSGFzaChzZWxmLm5hbWUpO1xuICAgIG1kLnVwZGF0ZShwb3NpdGlvbik7XG5cbiAgICAvLyAzKSBJZiBwb3NpdGlvbiBpcyBub3QgZywgYXBwZW5kIDwsIHRoZSB2YWx1ZSBvZiB0aGUgcHJlZGljYXRlIGluIHF1YWQsXG4gICAgLy8gYW5kID4gdG8gaW5wdXQuXG4gICAgaWYocG9zaXRpb24gIT09ICdnJykge1xuICAgICAgbWQudXBkYXRlKHNlbGYuZ2V0UmVsYXRlZFByZWRpY2F0ZShxdWFkKSk7XG4gICAgfVxuXG4gICAgLy8gNCkgQXBwZW5kIGlkZW50aWZpZXIgdG8gaW5wdXQuXG4gICAgbWQudXBkYXRlKGlkKTtcblxuICAgIC8vIDUpIFJldHVybiB0aGUgaGFzaCB0aGF0IHJlc3VsdHMgZnJvbSBwYXNzaW5nIGlucHV0IHRocm91Z2ggdGhlIGhhc2hcbiAgICAvLyBhbGdvcml0aG0uXG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG1kLmRpZ2VzdCgpKTtcbiAgfSk7XG59O1xuXG4vLyBoZWxwZXIgZm9yIGdldHRpbmcgYSByZWxhdGVkIHByZWRpY2F0ZVxuTm9ybWFsaXplLnByb3RvdHlwZS5nZXRSZWxhdGVkUHJlZGljYXRlID0gZnVuY3Rpb24ocXVhZCkge1xuICByZXR1cm4gJzwnICsgcXVhZC5wcmVkaWNhdGUudmFsdWUgKyAnPic7XG59O1xuXG4vLyA0LjgpIEhhc2ggTi1EZWdyZWUgUXVhZHNcbk5vcm1hbGl6ZS5wcm90b3R5cGUuaGFzaE5EZWdyZWVRdWFkcyA9IGZ1bmN0aW9uKGlkLCBpc3N1ZXIsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyAxKSBDcmVhdGUgYSBoYXNoIHRvIHJlbGF0ZWQgYmxhbmsgbm9kZXMgbWFwIGZvciBzdG9yaW5nIGhhc2hlcyB0aGF0XG4gIC8vIGlkZW50aWZ5IHJlbGF0ZWQgYmxhbmsgbm9kZXMuXG4gIC8vIE5vdGU6IDIpIGFuZCAzKSBoYW5kbGVkIHdpdGhpbiBgY3JlYXRlSGFzaFRvUmVsYXRlZGBcbiAgdmFyIGhhc2hUb1JlbGF0ZWQ7XG4gIHZhciBtZCA9IG5ldyBOb3JtYWxpemVIYXNoKHNlbGYubmFtZSk7XG4gIHNlbGYud2F0ZXJmYWxsKFtcbiAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgc2VsZi5jcmVhdGVIYXNoVG9SZWxhdGVkKGlkLCBpc3N1ZXIsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmKGVycikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGhhc2hUb1JlbGF0ZWQgPSByZXN1bHQ7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAvLyA0KSBDcmVhdGUgYW4gZW1wdHkgc3RyaW5nLCBkYXRhIHRvIGhhc2guXG4gICAgICAvLyBOb3RlOiBXZSBjcmVhdGVkIGEgaGFzaCBvYmplY3QgYG1kYCBhYm92ZSBpbnN0ZWFkLlxuXG4gICAgICAvLyA1KSBGb3IgZWFjaCByZWxhdGVkIGhhc2ggdG8gYmxhbmsgbm9kZSBsaXN0IG1hcHBpbmcgaW4gaGFzaCB0byByZWxhdGVkXG4gICAgICAvLyBibGFuayBub2RlcyBtYXAsIHNvcnRlZCBsZXhpY29ncmFwaGljYWxseSBieSByZWxhdGVkIGhhc2g6XG4gICAgICB2YXIgaGFzaGVzID0gT2JqZWN0LmtleXMoaGFzaFRvUmVsYXRlZCkuc29ydCgpO1xuICAgICAgc2VsZi5mb3JFYWNoKGhhc2hlcywgZnVuY3Rpb24oaGFzaCwgaWR4LCBjYWxsYmFjaykge1xuICAgICAgICAvLyA1LjEpIEFwcGVuZCB0aGUgcmVsYXRlZCBoYXNoIHRvIHRoZSBkYXRhIHRvIGhhc2guXG4gICAgICAgIG1kLnVwZGF0ZShoYXNoKTtcblxuICAgICAgICAvLyA1LjIpIENyZWF0ZSBhIHN0cmluZyBjaG9zZW4gcGF0aC5cbiAgICAgICAgdmFyIGNob3NlblBhdGggPSAnJztcblxuICAgICAgICAvLyA1LjMpIENyZWF0ZSBhbiB1bnNldCBjaG9zZW4gaXNzdWVyIHZhcmlhYmxlLlxuICAgICAgICB2YXIgY2hvc2VuSXNzdWVyO1xuXG4gICAgICAgIC8vIDUuNCkgRm9yIGVhY2ggcGVybXV0YXRpb24gb2YgYmxhbmsgbm9kZSBsaXN0OlxuICAgICAgICB2YXIgcGVybXV0YXRvciA9IG5ldyBQZXJtdXRhdG9yKGhhc2hUb1JlbGF0ZWRbaGFzaF0pO1xuICAgICAgICBzZWxmLndoaWxzdChcbiAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBlcm11dGF0b3IuaGFzTmV4dCgpOyB9LFxuICAgICAgICAgIGZ1bmN0aW9uKG5leHRQZXJtdXRhdGlvbikge1xuICAgICAgICAgIHZhciBwZXJtdXRhdGlvbiA9IHBlcm11dGF0b3IubmV4dCgpO1xuXG4gICAgICAgICAgLy8gNS40LjEpIENyZWF0ZSBhIGNvcHkgb2YgaXNzdWVyLCBpc3N1ZXIgY29weS5cbiAgICAgICAgICB2YXIgaXNzdWVyQ29weSA9IGlzc3Vlci5jbG9uZSgpO1xuXG4gICAgICAgICAgLy8gNS40LjIpIENyZWF0ZSBhIHN0cmluZyBwYXRoLlxuICAgICAgICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICAgICAgICAvLyA1LjQuMykgQ3JlYXRlIGEgcmVjdXJzaW9uIGxpc3QsIHRvIHN0b3JlIGJsYW5rIG5vZGUgaWRlbnRpZmllcnNcbiAgICAgICAgICAvLyB0aGF0IG11c3QgYmUgcmVjdXJzaXZlbHkgcHJvY2Vzc2VkIGJ5IHRoaXMgYWxnb3JpdGhtLlxuICAgICAgICAgIHZhciByZWN1cnNpb25MaXN0ID0gW107XG5cbiAgICAgICAgICBzZWxmLndhdGVyZmFsbChbXG4gICAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyA1LjQuNCkgRm9yIGVhY2ggcmVsYXRlZCBpbiBwZXJtdXRhdGlvbjpcbiAgICAgICAgICAgICAgc2VsZi5mb3JFYWNoKHBlcm11dGF0aW9uLCBmdW5jdGlvbihyZWxhdGVkLCBpZHgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gNS40LjQuMSkgSWYgYSBjYW5vbmljYWwgaWRlbnRpZmllciBoYXMgYmVlbiBpc3N1ZWQgZm9yXG4gICAgICAgICAgICAgICAgLy8gcmVsYXRlZCwgYXBwZW5kIGl0IHRvIHBhdGguXG4gICAgICAgICAgICAgICAgaWYoc2VsZi5jYW5vbmljYWxJc3N1ZXIuaGFzSWQocmVsYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgIHBhdGggKz0gc2VsZi5jYW5vbmljYWxJc3N1ZXIuZ2V0SWQocmVsYXRlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIDUuNC40LjIpIE90aGVyd2lzZTpcbiAgICAgICAgICAgICAgICAgIC8vIDUuNC40LjIuMSkgSWYgaXNzdWVyIGNvcHkgaGFzIG5vdCBpc3N1ZWQgYW4gaWRlbnRpZmllciBmb3JcbiAgICAgICAgICAgICAgICAgIC8vIHJlbGF0ZWQsIGFwcGVuZCByZWxhdGVkIHRvIHJlY3Vyc2lvbiBsaXN0LlxuICAgICAgICAgICAgICAgICAgaWYoIWlzc3VlckNvcHkuaGFzSWQocmVsYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uTGlzdC5wdXNoKHJlbGF0ZWQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gNS40LjQuMi4yKSBVc2UgdGhlIElzc3VlIElkZW50aWZpZXIgYWxnb3JpdGhtLCBwYXNzaW5nXG4gICAgICAgICAgICAgICAgICAvLyBpc3N1ZXIgY29weSBhbmQgcmVsYXRlZCBhbmQgYXBwZW5kIHRoZSByZXN1bHQgdG8gcGF0aC5cbiAgICAgICAgICAgICAgICAgIHBhdGggKz0gaXNzdWVyQ29weS5nZXRJZChyZWxhdGVkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyA1LjQuNC4zKSBJZiBjaG9zZW4gcGF0aCBpcyBub3QgZW1wdHkgYW5kIHRoZSBsZW5ndGggb2YgcGF0aFxuICAgICAgICAgICAgICAgIC8vIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbGVuZ3RoIG9mIGNob3NlbiBwYXRoIGFuZFxuICAgICAgICAgICAgICAgIC8vIHBhdGggaXMgbGV4aWNvZ3JhcGhpY2FsbHkgZ3JlYXRlciB0aGFuIGNob3NlbiBwYXRoLCB0aGVuXG4gICAgICAgICAgICAgICAgLy8gc2tpcCB0byB0aGUgbmV4dCBwZXJtdXRhdGlvbi5cbiAgICAgICAgICAgICAgICBpZihjaG9zZW5QYXRoLmxlbmd0aCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgcGF0aC5sZW5ndGggPj0gY2hvc2VuUGF0aC5sZW5ndGggJiYgcGF0aCA+IGNob3NlblBhdGgpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBtYXkgY2F1c2UgaW5hY2N1cmF0ZSB0b3RhbCBkZXB0aCBjYWxjdWxhdGlvblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRQZXJtdXRhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gNS40LjUpIEZvciBlYWNoIHJlbGF0ZWQgaW4gcmVjdXJzaW9uIGxpc3Q6XG4gICAgICAgICAgICAgIHNlbGYuZm9yRWFjaChyZWN1cnNpb25MaXN0LCBmdW5jdGlvbihyZWxhdGVkLCBpZHgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gNS40LjUuMSkgU2V0IHJlc3VsdCB0byB0aGUgcmVzdWx0IG9mIHJlY3Vyc2l2ZWx5IGV4ZWN1dGluZ1xuICAgICAgICAgICAgICAgIC8vIHRoZSBIYXNoIE4tRGVncmVlIFF1YWRzIGFsZ29yaXRobSwgcGFzc2luZyByZWxhdGVkIGZvclxuICAgICAgICAgICAgICAgIC8vIGlkZW50aWZpZXIgYW5kIGlzc3VlciBjb3B5IGZvciBwYXRoIGlkZW50aWZpZXIgaXNzdWVyLlxuICAgICAgICAgICAgICAgIHNlbGYuaGFzaE5EZWdyZWVRdWFkcyhcbiAgICAgICAgICAgICAgICAgIHJlbGF0ZWQsIGlzc3VlckNvcHksIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIDUuNC41LjIpIFVzZSB0aGUgSXNzdWUgSWRlbnRpZmllciBhbGdvcml0aG0sIHBhc3NpbmcgaXNzdWVyXG4gICAgICAgICAgICAgICAgICAvLyBjb3B5IGFuZCByZWxhdGVkIGFuZCBhcHBlbmQgdGhlIHJlc3VsdCB0byBwYXRoLlxuICAgICAgICAgICAgICAgICAgcGF0aCArPSBpc3N1ZXJDb3B5LmdldElkKHJlbGF0ZWQpO1xuXG4gICAgICAgICAgICAgICAgICAvLyA1LjQuNS4zKSBBcHBlbmQgPCwgdGhlIGhhc2ggaW4gcmVzdWx0LCBhbmQgPiB0byBwYXRoLlxuICAgICAgICAgICAgICAgICAgcGF0aCArPSAnPCcgKyByZXN1bHQuaGFzaCArICc+JztcblxuICAgICAgICAgICAgICAgICAgLy8gNS40LjUuNCkgU2V0IGlzc3VlciBjb3B5IHRvIHRoZSBpZGVudGlmaWVyIGlzc3VlciBpblxuICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgaXNzdWVyQ29weSA9IHJlc3VsdC5pc3N1ZXI7XG5cbiAgICAgICAgICAgICAgICAgIC8vIDUuNC41LjUpIElmIGNob3NlbiBwYXRoIGlzIG5vdCBlbXB0eSBhbmQgdGhlIGxlbmd0aCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgICAvLyBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGxlbmd0aCBvZiBjaG9zZW4gcGF0aCBhbmRcbiAgICAgICAgICAgICAgICAgIC8vIHBhdGggaXMgbGV4aWNvZ3JhcGhpY2FsbHkgZ3JlYXRlciB0aGFuIGNob3NlbiBwYXRoLCB0aGVuXG4gICAgICAgICAgICAgICAgICAvLyBza2lwIHRvIHRoZSBuZXh0IHBlcm11dGF0aW9uLlxuICAgICAgICAgICAgICAgICAgaWYoY2hvc2VuUGF0aC5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5sZW5ndGggPj0gY2hvc2VuUGF0aC5sZW5ndGggJiYgcGF0aCA+IGNob3NlblBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IG1heSBjYXVzZSBpbmFjY3VyYXRlIHRvdGFsIGRlcHRoIGNhbGN1bGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0UGVybXV0YXRpb24oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyA1LjQuNikgSWYgY2hvc2VuIHBhdGggaXMgZW1wdHkgb3IgcGF0aCBpcyBsZXhpY29ncmFwaGljYWxseVxuICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gY2hvc2VuIHBhdGgsIHNldCBjaG9zZW4gcGF0aCB0byBwYXRoIGFuZCBjaG9zZW5cbiAgICAgICAgICAgICAgLy8gaXNzdWVyIHRvIGlzc3VlciBjb3B5LlxuICAgICAgICAgICAgICBpZihjaG9zZW5QYXRoLmxlbmd0aCA9PT0gMCB8fCBwYXRoIDwgY2hvc2VuUGF0aCkge1xuICAgICAgICAgICAgICAgIGNob3NlblBhdGggPSBwYXRoO1xuICAgICAgICAgICAgICAgIGNob3Nlbklzc3VlciA9IGlzc3VlckNvcHk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLCBuZXh0UGVybXV0YXRpb24pO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDUuNSkgQXBwZW5kIGNob3NlbiBwYXRoIHRvIGRhdGEgdG8gaGFzaC5cbiAgICAgICAgICBtZC51cGRhdGUoY2hvc2VuUGF0aCk7XG5cbiAgICAgICAgICAvLyA1LjYpIFJlcGxhY2UgaXNzdWVyLCBieSByZWZlcmVuY2UsIHdpdGggY2hvc2VuIGlzc3Vlci5cbiAgICAgICAgICBpc3N1ZXIgPSBjaG9zZW5Jc3N1ZXI7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBjYWxsYmFjayk7XG4gICAgfVxuICBdLCBmdW5jdGlvbihlcnIpIHtcbiAgICAvLyA2KSBSZXR1cm4gaXNzdWVyIGFuZCB0aGUgaGFzaCB0aGF0IHJlc3VsdHMgZnJvbSBwYXNzaW5nIGRhdGEgdG8gaGFzaFxuICAgIC8vIHRocm91Z2ggdGhlIGhhc2ggYWxnb3JpdGhtLlxuICAgIGNhbGxiYWNrKGVyciwge2hhc2g6IG1kLmRpZ2VzdCgpLCBpc3N1ZXI6IGlzc3Vlcn0pO1xuICB9KTtcbn07XG5cbi8vIGhlbHBlciBmb3IgY3JlYXRpbmcgaGFzaCB0byByZWxhdGVkIGJsYW5rIG5vZGVzIG1hcFxuTm9ybWFsaXplLnByb3RvdHlwZS5jcmVhdGVIYXNoVG9SZWxhdGVkID0gZnVuY3Rpb24oaWQsIGlzc3VlciwgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIDEpIENyZWF0ZSBhIGhhc2ggdG8gcmVsYXRlZCBibGFuayBub2RlcyBtYXAgZm9yIHN0b3JpbmcgaGFzaGVzIHRoYXRcbiAgLy8gaWRlbnRpZnkgcmVsYXRlZCBibGFuayBub2Rlcy5cbiAgdmFyIGhhc2hUb1JlbGF0ZWQgPSB7fTtcblxuICAvLyAyKSBHZXQgYSByZWZlcmVuY2UsIHF1YWRzLCB0byB0aGUgbGlzdCBvZiBxdWFkcyBpbiB0aGUgYmxhbmsgbm9kZSB0b1xuICAvLyBxdWFkcyBtYXAgZm9yIHRoZSBrZXkgaWRlbnRpZmllci5cbiAgdmFyIHF1YWRzID0gc2VsZi5ibGFua05vZGVJbmZvW2lkXS5xdWFkcztcblxuICAvLyAzKSBGb3IgZWFjaCBxdWFkIGluIHF1YWRzOlxuICBzZWxmLmZvckVhY2gocXVhZHMsIGZ1bmN0aW9uKHF1YWQsIGlkeCwgY2FsbGJhY2spIHtcbiAgICAvLyAzLjEpIEZvciBlYWNoIGNvbXBvbmVudCBpbiBxdWFkLCBpZiBjb21wb25lbnQgaXMgdGhlIHN1YmplY3QsIG9iamVjdCxcbiAgICAvLyBhbmQgZ3JhcGggbmFtZSBhbmQgaXQgaXMgYSBibGFuayBub2RlIHRoYXQgaXMgbm90IGlkZW50aWZpZWQgYnlcbiAgICAvLyBpZGVudGlmaWVyOlxuICAgIHNlbGYuZm9yRWFjaChxdWFkLCBmdW5jdGlvbihjb21wb25lbnQsIGtleSwgY2FsbGJhY2spIHtcbiAgICAgIGlmKGtleSA9PT0gJ3ByZWRpY2F0ZScgfHxcbiAgICAgICAgIShjb21wb25lbnQudHlwZSA9PT0gJ2JsYW5rIG5vZGUnICYmIGNvbXBvbmVudC52YWx1ZSAhPT0gaWQpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgLy8gMy4xLjEpIFNldCBoYXNoIHRvIHRoZSByZXN1bHQgb2YgdGhlIEhhc2ggUmVsYXRlZCBCbGFuayBOb2RlXG4gICAgICAvLyBhbGdvcml0aG0sIHBhc3NpbmcgdGhlIGJsYW5rIG5vZGUgaWRlbnRpZmllciBmb3IgY29tcG9uZW50IGFzXG4gICAgICAvLyByZWxhdGVkLCBxdWFkLCBwYXRoIGlkZW50aWZpZXIgaXNzdWVyIGFzIGlzc3VlciwgYW5kIHBvc2l0aW9uIGFzXG4gICAgICAvLyBlaXRoZXIgcywgbywgb3IgZyBiYXNlZCBvbiB3aGV0aGVyIGNvbXBvbmVudCBpcyBhIHN1YmplY3QsIG9iamVjdCxcbiAgICAgIC8vIGdyYXBoIG5hbWUsIHJlc3BlY3RpdmVseS5cbiAgICAgIHZhciByZWxhdGVkID0gY29tcG9uZW50LnZhbHVlO1xuICAgICAgdmFyIHBvc2l0aW9uID0gUE9TSVRJT05TW2tleV07XG4gICAgICBzZWxmLmhhc2hSZWxhdGVkQmxhbmtOb2RlKFxuICAgICAgICByZWxhdGVkLCBxdWFkLCBpc3N1ZXIsIHBvc2l0aW9uLCBmdW5jdGlvbihlcnIsIGhhc2gpIHtcbiAgICAgICAgaWYoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjIpIEFkZCBhIG1hcHBpbmcgb2YgaGFzaCB0byB0aGUgYmxhbmsgbm9kZSBpZGVudGlmaWVyIGZvclxuICAgICAgICAvLyBjb21wb25lbnQgdG8gaGFzaCB0byByZWxhdGVkIGJsYW5rIG5vZGVzIG1hcCwgYWRkaW5nIGFuIGVudHJ5IGFzXG4gICAgICAgIC8vIG5lY2Vzc2FyeS5cbiAgICAgICAgaWYoaGFzaCBpbiBoYXNoVG9SZWxhdGVkKSB7XG4gICAgICAgICAgaGFzaFRvUmVsYXRlZFtoYXNoXS5wdXNoKHJlbGF0ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc2hUb1JlbGF0ZWRbaGFzaF0gPSBbcmVsYXRlZF07XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgIH0sIGNhbGxiYWNrKTtcbiAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgY2FsbGJhY2soZXJyLCBoYXNoVG9SZWxhdGVkKTtcbiAgfSk7XG59O1xuXG4vLyBoZWxwZXIgdGhhdCBpdGVyYXRlcyBvdmVyIHF1YWQgY29tcG9uZW50cyAoc2tpcHMgcHJlZGljYXRlKVxuTm9ybWFsaXplLnByb3RvdHlwZS5mb3JFYWNoQ29tcG9uZW50ID0gZnVuY3Rpb24ocXVhZCwgb3ApIHtcbiAgZm9yKHZhciBrZXkgaW4gcXVhZCkge1xuICAgIC8vIHNraXAgYHByZWRpY2F0ZWBcbiAgICBpZihrZXkgPT09ICdwcmVkaWNhdGUnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgb3AocXVhZFtrZXldLCBrZXksIHF1YWQpO1xuICB9XG59O1xuXG5yZXR1cm4gTm9ybWFsaXplO1xuXG59KSgpOyAvLyBlbmQgb2YgZGVmaW5lIFVSRE5BMjAxNVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIERFRklORSBVUkdOQTIwMTIgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnZhciBVUkdOQTIwMTIgPSAoZnVuY3Rpb24oKSB7XG5cbnZhciBOb3JtYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIFVSRE5BMjAxNS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLm5hbWUgPSAnVVJHTkEyMDEyJztcbn07XG5Ob3JtYWxpemUucHJvdG90eXBlID0gbmV3IFVSRE5BMjAxNSgpO1xuXG4vLyBoZWxwZXIgZm9yIG1vZGlmeWluZyBjb21wb25lbnQgZHVyaW5nIEhhc2ggRmlyc3QgRGVncmVlIFF1YWRzXG5Ob3JtYWxpemUucHJvdG90eXBlLm1vZGlmeUZpcnN0RGVncmVlQ29tcG9uZW50ID0gZnVuY3Rpb24oaWQsIGNvbXBvbmVudCwga2V5KSB7XG4gIGlmKGNvbXBvbmVudC50eXBlICE9PSAnYmxhbmsgbm9kZScpIHtcbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9XG4gIGNvbXBvbmVudCA9IF9jbG9uZShjb21wb25lbnQpO1xuICBpZihrZXkgPT09ICduYW1lJykge1xuICAgIGNvbXBvbmVudC52YWx1ZSA9ICdfOmcnO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudC52YWx1ZSA9IChjb21wb25lbnQudmFsdWUgPT09IGlkID8gJ186YScgOiAnXzp6Jyk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG5cbi8vIGhlbHBlciBmb3IgZ2V0dGluZyBhIHJlbGF0ZWQgcHJlZGljYXRlXG5Ob3JtYWxpemUucHJvdG90eXBlLmdldFJlbGF0ZWRQcmVkaWNhdGUgPSBmdW5jdGlvbihxdWFkKSB7XG4gIHJldHVybiBxdWFkLnByZWRpY2F0ZS52YWx1ZTtcbn07XG5cbi8vIGhlbHBlciBmb3IgY3JlYXRpbmcgaGFzaCB0byByZWxhdGVkIGJsYW5rIG5vZGVzIG1hcFxuTm9ybWFsaXplLnByb3RvdHlwZS5jcmVhdGVIYXNoVG9SZWxhdGVkID0gZnVuY3Rpb24oaWQsIGlzc3VlciwgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIDEpIENyZWF0ZSBhIGhhc2ggdG8gcmVsYXRlZCBibGFuayBub2RlcyBtYXAgZm9yIHN0b3JpbmcgaGFzaGVzIHRoYXRcbiAgLy8gaWRlbnRpZnkgcmVsYXRlZCBibGFuayBub2Rlcy5cbiAgdmFyIGhhc2hUb1JlbGF0ZWQgPSB7fTtcblxuICAvLyAyKSBHZXQgYSByZWZlcmVuY2UsIHF1YWRzLCB0byB0aGUgbGlzdCBvZiBxdWFkcyBpbiB0aGUgYmxhbmsgbm9kZSB0b1xuICAvLyBxdWFkcyBtYXAgZm9yIHRoZSBrZXkgaWRlbnRpZmllci5cbiAgdmFyIHF1YWRzID0gc2VsZi5ibGFua05vZGVJbmZvW2lkXS5xdWFkcztcblxuICAvLyAzKSBGb3IgZWFjaCBxdWFkIGluIHF1YWRzOlxuICBzZWxmLmZvckVhY2gocXVhZHMsIGZ1bmN0aW9uKHF1YWQsIGlkeCwgY2FsbGJhY2spIHtcbiAgICAvLyAzLjEpIElmIHRoZSBxdWFkJ3Mgc3ViamVjdCBpcyBhIGJsYW5rIG5vZGUgdGhhdCBkb2VzIG5vdCBtYXRjaFxuICAgIC8vIGlkZW50aWZpZXIsIHNldCBoYXNoIHRvIHRoZSByZXN1bHQgb2YgdGhlIEhhc2ggUmVsYXRlZCBCbGFuayBOb2RlXG4gICAgLy8gYWxnb3JpdGhtLCBwYXNzaW5nIHRoZSBibGFuayBub2RlIGlkZW50aWZpZXIgZm9yIHN1YmplY3QgYXMgcmVsYXRlZCxcbiAgICAvLyBxdWFkLCBwYXRoIGlkZW50aWZpZXIgaXNzdWVyIGFzIGlzc3VlciwgYW5kIHAgYXMgcG9zaXRpb24uXG4gICAgdmFyIHBvc2l0aW9uO1xuICAgIHZhciByZWxhdGVkO1xuICAgIGlmKHF1YWQuc3ViamVjdC50eXBlID09PSAnYmxhbmsgbm9kZScgJiYgcXVhZC5zdWJqZWN0LnZhbHVlICE9PSBpZCkge1xuICAgICAgcmVsYXRlZCA9IHF1YWQuc3ViamVjdC52YWx1ZTtcbiAgICAgIHBvc2l0aW9uID0gJ3AnO1xuICAgIH0gZWxzZSBpZihxdWFkLm9iamVjdC50eXBlID09PSAnYmxhbmsgbm9kZScgJiYgcXVhZC5vYmplY3QudmFsdWUgIT09IGlkKSB7XG4gICAgICAvLyAzLjIpIE90aGVyd2lzZSwgaWYgcXVhZCdzIG9iamVjdCBpcyBhIGJsYW5rIG5vZGUgdGhhdCBkb2VzIG5vdCBtYXRjaFxuICAgICAgLy8gaWRlbnRpZmllciwgdG8gdGhlIHJlc3VsdCBvZiB0aGUgSGFzaCBSZWxhdGVkIEJsYW5rIE5vZGUgYWxnb3JpdGhtLFxuICAgICAgLy8gcGFzc2luZyB0aGUgYmxhbmsgbm9kZSBpZGVudGlmaWVyIGZvciBvYmplY3QgYXMgcmVsYXRlZCwgcXVhZCwgcGF0aFxuICAgICAgLy8gaWRlbnRpZmllciBpc3N1ZXIgYXMgaXNzdWVyLCBhbmQgciBhcyBwb3NpdGlvbi5cbiAgICAgIHJlbGF0ZWQgPSBxdWFkLm9iamVjdC52YWx1ZTtcbiAgICAgIHBvc2l0aW9uID0gJ3InO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAzLjMpIE90aGVyd2lzZSwgY29udGludWUgdG8gdGhlIG5leHQgcXVhZC5cbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICAvLyAzLjQpIEFkZCBhIG1hcHBpbmcgb2YgaGFzaCB0byB0aGUgYmxhbmsgbm9kZSBpZGVudGlmaWVyIGZvciB0aGVcbiAgICAvLyBjb21wb25lbnQgdGhhdCBtYXRjaGVkIChzdWJqZWN0IG9yIG9iamVjdCkgdG8gaGFzaCB0byByZWxhdGVkIGJsYW5rXG4gICAgLy8gbm9kZXMgbWFwLCBhZGRpbmcgYW4gZW50cnkgYXMgbmVjZXNzYXJ5LlxuICAgIHNlbGYuaGFzaFJlbGF0ZWRCbGFua05vZGUoXG4gICAgICByZWxhdGVkLCBxdWFkLCBpc3N1ZXIsIHBvc2l0aW9uLCBmdW5jdGlvbihlcnIsIGhhc2gpIHtcbiAgICAgIGlmKGhhc2ggaW4gaGFzaFRvUmVsYXRlZCkge1xuICAgICAgICBoYXNoVG9SZWxhdGVkW2hhc2hdLnB1c2gocmVsYXRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNoVG9SZWxhdGVkW2hhc2hdID0gW3JlbGF0ZWRdO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgY2FsbGJhY2soZXJyLCBoYXNoVG9SZWxhdGVkKTtcbiAgfSk7XG59O1xuXG5yZXR1cm4gTm9ybWFsaXplO1xuXG59KSgpOyAvLyBlbmQgb2YgZGVmaW5lIFVSR05BMjAxMlxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZSBzdWJqZWN0cyBpbiB0aGUgZ2l2ZW4gSlNPTi1MRCBleHBhbmRlZCBpbnB1dFxuICogaW50byBhIG5vZGUgbWFwLlxuICpcbiAqIEBwYXJhbSBpbnB1dCB0aGUgSlNPTi1MRCBleHBhbmRlZCBpbnB1dC5cbiAqIEBwYXJhbSBncmFwaHMgYSBtYXAgb2YgZ3JhcGggbmFtZSB0byBzdWJqZWN0IG1hcC5cbiAqIEBwYXJhbSBncmFwaCB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBncmFwaC5cbiAqIEBwYXJhbSBpc3N1ZXIgdGhlIGJsYW5rIG5vZGUgaWRlbnRpZmllciBpc3N1ZXIuXG4gKiBAcGFyYW0gbmFtZSB0aGUgbmFtZSBhc3NpZ25lZCB0byB0aGUgY3VycmVudCBpbnB1dCBpZiBpdCBpcyBhIGJub2RlLlxuICogQHBhcmFtIGxpc3QgdGhlIGxpc3QgdG8gYXBwZW5kIHRvLCBudWxsIGZvciBub25lLlxuICovXG5mdW5jdGlvbiBfY3JlYXRlTm9kZU1hcChpbnB1dCwgZ3JhcGhzLCBncmFwaCwgaXNzdWVyLCBuYW1lLCBsaXN0KSB7XG4gIC8vIHJlY3Vyc2UgdGhyb3VnaCBhcnJheVxuICBpZihfaXNBcnJheShpbnB1dCkpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyArK2kpIHtcbiAgICAgIF9jcmVhdGVOb2RlTWFwKGlucHV0W2ldLCBncmFwaHMsIGdyYXBoLCBpc3N1ZXIsIHVuZGVmaW5lZCwgbGlzdCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGFkZCBub24tb2JqZWN0IHRvIGxpc3RcbiAgaWYoIV9pc09iamVjdChpbnB1dCkpIHtcbiAgICBpZihsaXN0KSB7XG4gICAgICBsaXN0LnB1c2goaW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhZGQgdmFsdWVzIHRvIGxpc3RcbiAgaWYoX2lzVmFsdWUoaW5wdXQpKSB7XG4gICAgaWYoJ0B0eXBlJyBpbiBpbnB1dCkge1xuICAgICAgdmFyIHR5cGUgPSBpbnB1dFsnQHR5cGUnXTtcbiAgICAgIC8vIHJlbmFtZSBAdHlwZSBibGFuayBub2RlXG4gICAgICBpZih0eXBlLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgaW5wdXRbJ0B0eXBlJ10gPSB0eXBlID0gaXNzdWVyLmdldElkKHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihsaXN0KSB7XG4gICAgICBsaXN0LnB1c2goaW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBOb3RlOiBBdCB0aGlzIHBvaW50LCBpbnB1dCBtdXN0IGJlIGEgc3ViamVjdC5cblxuICAvLyBzcGVjIHJlcXVpcmVzIEB0eXBlIHRvIGJlIG5hbWVkIGZpcnN0LCBzbyBhc3NpZ24gbmFtZXMgZWFybHlcbiAgaWYoJ0B0eXBlJyBpbiBpbnB1dCkge1xuICAgIHZhciB0eXBlcyA9IGlucHV0WydAdHlwZSddO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIGlmKHR5cGUuaW5kZXhPZignXzonKSA9PT0gMCkge1xuICAgICAgICBpc3N1ZXIuZ2V0SWQodHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gZ2V0IG5hbWUgZm9yIHN1YmplY3RcbiAgaWYoX2lzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgbmFtZSA9IF9pc0JsYW5rTm9kZShpbnB1dCkgPyBpc3N1ZXIuZ2V0SWQoaW5wdXRbJ0BpZCddKSA6IGlucHV0WydAaWQnXTtcbiAgfVxuXG4gIC8vIGFkZCBzdWJqZWN0IHJlZmVyZW5jZSB0byBsaXN0XG4gIGlmKGxpc3QpIHtcbiAgICBsaXN0LnB1c2goeydAaWQnOiBuYW1lfSk7XG4gIH1cblxuICAvLyBjcmVhdGUgbmV3IHN1YmplY3Qgb3IgbWVyZ2UgaW50byBleGlzdGluZyBvbmVcbiAgdmFyIHN1YmplY3RzID0gZ3JhcGhzW2dyYXBoXTtcbiAgdmFyIHN1YmplY3QgPSBzdWJqZWN0c1tuYW1lXSA9IHN1YmplY3RzW25hbWVdIHx8IHt9O1xuICBzdWJqZWN0WydAaWQnXSA9IG5hbWU7XG4gIHZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoaW5wdXQpLnNvcnQoKTtcbiAgZm9yKHZhciBwaSA9IDA7IHBpIDwgcHJvcGVydGllcy5sZW5ndGg7ICsrcGkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW3BpXTtcblxuICAgIC8vIHNraXAgQGlkXG4gICAgaWYocHJvcGVydHkgPT09ICdAaWQnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgcmV2ZXJzZSBwcm9wZXJ0aWVzXG4gICAgaWYocHJvcGVydHkgPT09ICdAcmV2ZXJzZScpIHtcbiAgICAgIHZhciByZWZlcmVuY2VkTm9kZSA9IHsnQGlkJzogbmFtZX07XG4gICAgICB2YXIgcmV2ZXJzZU1hcCA9IGlucHV0WydAcmV2ZXJzZSddO1xuICAgICAgZm9yKHZhciByZXZlcnNlUHJvcGVydHkgaW4gcmV2ZXJzZU1hcCkge1xuICAgICAgICB2YXIgaXRlbXMgPSByZXZlcnNlTWFwW3JldmVyc2VQcm9wZXJ0eV07XG4gICAgICAgIGZvcih2YXIgaWkgPSAwOyBpaSA8IGl0ZW1zLmxlbmd0aDsgKytpaSkge1xuICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaWldO1xuICAgICAgICAgIHZhciBpdGVtTmFtZSA9IGl0ZW1bJ0BpZCddO1xuICAgICAgICAgIGlmKF9pc0JsYW5rTm9kZShpdGVtKSkge1xuICAgICAgICAgICAgaXRlbU5hbWUgPSBpc3N1ZXIuZ2V0SWQoaXRlbU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY3JlYXRlTm9kZU1hcChpdGVtLCBncmFwaHMsIGdyYXBoLCBpc3N1ZXIsIGl0ZW1OYW1lKTtcbiAgICAgICAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICAgICAgICBzdWJqZWN0c1tpdGVtTmFtZV0sIHJldmVyc2VQcm9wZXJ0eSwgcmVmZXJlbmNlZE5vZGUsXG4gICAgICAgICAgICB7cHJvcGVydHlJc0FycmF5OiB0cnVlLCBhbGxvd0R1cGxpY2F0ZTogZmFsc2V9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gcmVjdXJzZSBpbnRvIGdyYXBoXG4gICAgaWYocHJvcGVydHkgPT09ICdAZ3JhcGgnKSB7XG4gICAgICAvLyBhZGQgZ3JhcGggc3ViamVjdHMgbWFwIGVudHJ5XG4gICAgICBpZighKG5hbWUgaW4gZ3JhcGhzKSkge1xuICAgICAgICBncmFwaHNbbmFtZV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBnID0gKGdyYXBoID09PSAnQG1lcmdlZCcpID8gZ3JhcGggOiBuYW1lO1xuICAgICAgX2NyZWF0ZU5vZGVNYXAoaW5wdXRbcHJvcGVydHldLCBncmFwaHMsIGcsIGlzc3Vlcik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb3B5IG5vbi1AdHlwZSBrZXl3b3Jkc1xuICAgIGlmKHByb3BlcnR5ICE9PSAnQHR5cGUnICYmIF9pc0tleXdvcmQocHJvcGVydHkpKSB7XG4gICAgICBpZihwcm9wZXJ0eSA9PT0gJ0BpbmRleCcgJiYgcHJvcGVydHkgaW4gc3ViamVjdCAmJlxuICAgICAgICAoaW5wdXRbcHJvcGVydHldICE9PSBzdWJqZWN0W3Byb3BlcnR5XSB8fFxuICAgICAgICBpbnB1dFtwcm9wZXJ0eV1bJ0BpZCddICE9PSBzdWJqZWN0W3Byb3BlcnR5XVsnQGlkJ10pKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgY29uZmxpY3RpbmcgQGluZGV4IHByb3BlcnR5IGRldGVjdGVkLicsXG4gICAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdjb25mbGljdGluZyBpbmRleGVzJywgc3ViamVjdDogc3ViamVjdH0pO1xuICAgICAgfVxuICAgICAgc3ViamVjdFtwcm9wZXJ0eV0gPSBpbnB1dFtwcm9wZXJ0eV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBpdGVyYXRlIG92ZXIgb2JqZWN0c1xuICAgIHZhciBvYmplY3RzID0gaW5wdXRbcHJvcGVydHldO1xuXG4gICAgLy8gaWYgcHJvcGVydHkgaXMgYSBibm9kZSwgYXNzaWduIGl0IGEgbmV3IGlkXG4gICAgaWYocHJvcGVydHkuaW5kZXhPZignXzonKSA9PT0gMCkge1xuICAgICAgcHJvcGVydHkgPSBpc3N1ZXIuZ2V0SWQocHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8vIGVuc3VyZSBwcm9wZXJ0eSBpcyBhZGRlZCBmb3IgZW1wdHkgYXJyYXlzXG4gICAgaWYob2JqZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGpzb25sZC5hZGRWYWx1ZShzdWJqZWN0LCBwcm9wZXJ0eSwgW10sIHtwcm9wZXJ0eUlzQXJyYXk6IHRydWV9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmb3IodmFyIG9pID0gMDsgb2kgPCBvYmplY3RzLmxlbmd0aDsgKytvaSkge1xuICAgICAgdmFyIG8gPSBvYmplY3RzW29pXTtcblxuICAgICAgaWYocHJvcGVydHkgPT09ICdAdHlwZScpIHtcbiAgICAgICAgLy8gcmVuYW1lIEB0eXBlIGJsYW5rIG5vZGVzXG4gICAgICAgIG8gPSAoby5pbmRleE9mKCdfOicpID09PSAwKSA/IGlzc3Vlci5nZXRJZChvKSA6IG87XG4gICAgICB9XG5cbiAgICAgIC8vIGhhbmRsZSBlbWJlZGRlZCBzdWJqZWN0IG9yIHN1YmplY3QgcmVmZXJlbmNlXG4gICAgICBpZihfaXNTdWJqZWN0KG8pIHx8IF9pc1N1YmplY3RSZWZlcmVuY2UobykpIHtcbiAgICAgICAgLy8gcmVsYWJlbCBibGFuayBub2RlIEBpZFxuICAgICAgICB2YXIgaWQgPSBfaXNCbGFua05vZGUobykgPyBpc3N1ZXIuZ2V0SWQob1snQGlkJ10pIDogb1snQGlkJ107XG5cbiAgICAgICAgLy8gYWRkIHJlZmVyZW5jZSBhbmQgcmVjdXJzZVxuICAgICAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICAgICAgc3ViamVjdCwgcHJvcGVydHksIHsnQGlkJzogaWR9LFxuICAgICAgICAgIHtwcm9wZXJ0eUlzQXJyYXk6IHRydWUsIGFsbG93RHVwbGljYXRlOiBmYWxzZX0pO1xuICAgICAgICBfY3JlYXRlTm9kZU1hcChvLCBncmFwaHMsIGdyYXBoLCBpc3N1ZXIsIGlkKTtcbiAgICAgIH0gZWxzZSBpZihfaXNMaXN0KG8pKSB7XG4gICAgICAgIC8vIGhhbmRsZSBAbGlzdFxuICAgICAgICB2YXIgX2xpc3QgPSBbXTtcbiAgICAgICAgX2NyZWF0ZU5vZGVNYXAob1snQGxpc3QnXSwgZ3JhcGhzLCBncmFwaCwgaXNzdWVyLCBuYW1lLCBfbGlzdCk7XG4gICAgICAgIG8gPSB7J0BsaXN0JzogX2xpc3R9O1xuICAgICAgICBqc29ubGQuYWRkVmFsdWUoXG4gICAgICAgICAgc3ViamVjdCwgcHJvcGVydHksIG8sXG4gICAgICAgICAge3Byb3BlcnR5SXNBcnJheTogdHJ1ZSwgYWxsb3dEdXBsaWNhdGU6IGZhbHNlfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBoYW5kbGUgQHZhbHVlXG4gICAgICAgIF9jcmVhdGVOb2RlTWFwKG8sIGdyYXBocywgZ3JhcGgsIGlzc3VlciwgbmFtZSk7XG4gICAgICAgIGpzb25sZC5hZGRWYWx1ZShcbiAgICAgICAgICBzdWJqZWN0LCBwcm9wZXJ0eSwgbywge3Byb3BlcnR5SXNBcnJheTogdHJ1ZSwgYWxsb3dEdXBsaWNhdGU6IGZhbHNlfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9tZXJnZU5vZGVNYXBzKGdyYXBocykge1xuICAvLyBhZGQgYWxsIG5vbi1kZWZhdWx0IGdyYXBocyB0byBkZWZhdWx0IGdyYXBoXG4gIHZhciBkZWZhdWx0R3JhcGggPSBncmFwaHNbJ0BkZWZhdWx0J107XG4gIHZhciBncmFwaE5hbWVzID0gT2JqZWN0LmtleXMoZ3JhcGhzKS5zb3J0KCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBncmFwaE5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGdyYXBoTmFtZSA9IGdyYXBoTmFtZXNbaV07XG4gICAgaWYoZ3JhcGhOYW1lID09PSAnQGRlZmF1bHQnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIG5vZGVNYXAgPSBncmFwaHNbZ3JhcGhOYW1lXTtcbiAgICB2YXIgc3ViamVjdCA9IGRlZmF1bHRHcmFwaFtncmFwaE5hbWVdO1xuICAgIGlmKCFzdWJqZWN0KSB7XG4gICAgICBkZWZhdWx0R3JhcGhbZ3JhcGhOYW1lXSA9IHN1YmplY3QgPSB7XG4gICAgICAgICdAaWQnOiBncmFwaE5hbWUsXG4gICAgICAgICdAZ3JhcGgnOiBbXVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYoISgnQGdyYXBoJyBpbiBzdWJqZWN0KSkge1xuICAgICAgc3ViamVjdFsnQGdyYXBoJ10gPSBbXTtcbiAgICB9XG4gICAgdmFyIGdyYXBoID0gc3ViamVjdFsnQGdyYXBoJ107XG4gICAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKG5vZGVNYXApLnNvcnQoKTtcbiAgICBmb3IodmFyIGlpID0gMDsgaWkgPCBpZHMubGVuZ3RoOyArK2lpKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVNYXBbaWRzW2lpXV07XG4gICAgICAvLyBvbmx5IGFkZCBmdWxsIHN1YmplY3RzXG4gICAgICBpZighX2lzU3ViamVjdFJlZmVyZW5jZShub2RlKSkge1xuICAgICAgICBncmFwaC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdEdyYXBoO1xufVxuXG4vKipcbiAqIEZyYW1lcyBzdWJqZWN0cyBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGZyYW1lLlxuICpcbiAqIEBwYXJhbSBzdGF0ZSB0aGUgY3VycmVudCBmcmFtaW5nIHN0YXRlLlxuICogQHBhcmFtIHN1YmplY3RzIHRoZSBzdWJqZWN0cyB0byBmaWx0ZXIuXG4gKiBAcGFyYW0gZnJhbWUgdGhlIGZyYW1lLlxuICogQHBhcmFtIHBhcmVudCB0aGUgcGFyZW50IHN1YmplY3Qgb3IgdG9wLWxldmVsIGFycmF5LlxuICogQHBhcmFtIHByb3BlcnR5IHRoZSBwYXJlbnQgcHJvcGVydHksIGluaXRpYWxpemVkIHRvIG51bGwuXG4gKi9cbmZ1bmN0aW9uIF9mcmFtZShzdGF0ZSwgc3ViamVjdHMsIGZyYW1lLCBwYXJlbnQsIHByb3BlcnR5KSB7XG4gIC8vIHZhbGlkYXRlIHRoZSBmcmFtZVxuICBfdmFsaWRhdGVGcmFtZShmcmFtZSk7XG4gIGZyYW1lID0gZnJhbWVbMF07XG5cbiAgLy8gZ2V0IGZsYWdzIGZvciBjdXJyZW50IGZyYW1lXG4gIHZhciBvcHRpb25zID0gc3RhdGUub3B0aW9ucztcbiAgdmFyIGZsYWdzID0ge1xuICAgIGVtYmVkOiBfZ2V0RnJhbWVGbGFnKGZyYW1lLCBvcHRpb25zLCAnZW1iZWQnKSxcbiAgICBleHBsaWNpdDogX2dldEZyYW1lRmxhZyhmcmFtZSwgb3B0aW9ucywgJ2V4cGxpY2l0JyksXG4gICAgcmVxdWlyZUFsbDogX2dldEZyYW1lRmxhZyhmcmFtZSwgb3B0aW9ucywgJ3JlcXVpcmVBbGwnKVxuICB9O1xuXG4gIC8vIGZpbHRlciBvdXQgc3ViamVjdHMgdGhhdCBtYXRjaCB0aGUgZnJhbWVcbiAgdmFyIG1hdGNoZXMgPSBfZmlsdGVyU3ViamVjdHMoc3RhdGUsIHN1YmplY3RzLCBmcmFtZSwgZmxhZ3MpO1xuXG4gIC8vIGFkZCBtYXRjaGVzIHRvIG91dHB1dFxuICB2YXIgaWRzID0gT2JqZWN0LmtleXMobWF0Y2hlcykuc29ydCgpO1xuICBmb3IodmFyIGlkeCA9IDA7IGlkeCA8IGlkcy5sZW5ndGg7ICsraWR4KSB7XG4gICAgdmFyIGlkID0gaWRzW2lkeF07XG4gICAgdmFyIHN1YmplY3QgPSBtYXRjaGVzW2lkXTtcblxuICAgIGlmKGZsYWdzLmVtYmVkID09PSAnQGxpbmsnICYmIGlkIGluIHN0YXRlLmxpbmspIHtcbiAgICAgIC8vIFRPRE86IG1heSB3YW50IHRvIGFsc28gbWF0Y2ggYW4gZXhpc3RpbmcgbGlua2VkIHN1YmplY3QgYWdhaW5zdFxuICAgICAgLy8gdGhlIGN1cnJlbnQgZnJhbWUgLi4uIHNvIGRpZmZlcmVudCBmcmFtZXMgY291bGQgcHJvZHVjZSBkaWZmZXJlbnRcbiAgICAgIC8vIHN1YmplY3RzIHRoYXQgYXJlIG9ubHkgc2hhcmVkIGluLW1lbW9yeSB3aGVuIHRoZSBmcmFtZXMgYXJlIHRoZSBzYW1lXG5cbiAgICAgIC8vIGFkZCBleGlzdGluZyBsaW5rZWQgc3ViamVjdFxuICAgICAgX2FkZEZyYW1lT3V0cHV0KHBhcmVudCwgcHJvcGVydHksIHN0YXRlLmxpbmtbaWRdKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIE5vdGU6IEluIG9yZGVyIHRvIHRyZWF0IGVhY2ggdG9wLWxldmVsIG1hdGNoIGFzIGEgY29tcGFydG1lbnRhbGl6ZWRcbiAgICByZXN1bHQsIGNsZWFyIHRoZSB1bmlxdWUgZW1iZWRkZWQgc3ViamVjdHMgbWFwIHdoZW4gdGhlIHByb3BlcnR5IGlzIG51bGwsXG4gICAgd2hpY2ggb25seSBvY2N1cnMgYXQgdGhlIHRvcC1sZXZlbC4gKi9cbiAgICBpZihwcm9wZXJ0eSA9PT0gbnVsbCkge1xuICAgICAgc3RhdGUudW5pcXVlRW1iZWRzID0ge307XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgb3V0cHV0IGZvciBzdWJqZWN0XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuICAgIG91dHB1dFsnQGlkJ10gPSBpZDtcbiAgICBzdGF0ZS5saW5rW2lkXSA9IG91dHB1dDtcblxuICAgIC8vIGlmIGVtYmVkIGlzIEBuZXZlciBvciBpZiBhIGNpcmN1bGFyIHJlZmVyZW5jZSB3b3VsZCBiZSBjcmVhdGVkIGJ5IGFuXG4gICAgLy8gZW1iZWQsIHRoZSBzdWJqZWN0IGNhbm5vdCBiZSBlbWJlZGRlZCwganVzdCBhZGQgdGhlIHJlZmVyZW5jZTtcbiAgICAvLyBub3RlIHRoYXQgYSBjaXJjdWxhciByZWZlcmVuY2Ugd29uJ3Qgb2NjdXIgd2hlbiB0aGUgZW1iZWQgZmxhZyBpc1xuICAgIC8vIGBAbGlua2AgYXMgdGhlIGFib3ZlIGNoZWNrIHdpbGwgc2hvcnQtY2lyY3VpdCBiZWZvcmUgcmVhY2hpbmcgdGhpcyBwb2ludFxuICAgIGlmKGZsYWdzLmVtYmVkID09PSAnQG5ldmVyJyB8fFxuICAgICAgX2NyZWF0ZXNDaXJjdWxhclJlZmVyZW5jZShzdWJqZWN0LCBzdGF0ZS5zdWJqZWN0U3RhY2spKSB7XG4gICAgICBfYWRkRnJhbWVPdXRwdXQocGFyZW50LCBwcm9wZXJ0eSwgb3V0cHV0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGlmIG9ubHkgdGhlIGxhc3QgbWF0Y2ggc2hvdWxkIGJlIGVtYmVkZGVkXG4gICAgaWYoZmxhZ3MuZW1iZWQgPT09ICdAbGFzdCcpIHtcbiAgICAgIC8vIHJlbW92ZSBhbnkgZXhpc3RpbmcgZW1iZWRcbiAgICAgIGlmKGlkIGluIHN0YXRlLnVuaXF1ZUVtYmVkcykge1xuICAgICAgICBfcmVtb3ZlRW1iZWQoc3RhdGUsIGlkKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLnVuaXF1ZUVtYmVkc1tpZF0gPSB7cGFyZW50OiBwYXJlbnQsIHByb3BlcnR5OiBwcm9wZXJ0eX07XG4gICAgfVxuXG4gICAgLy8gcHVzaCBtYXRjaGluZyBzdWJqZWN0IG9udG8gc3RhY2sgdG8gZW5hYmxlIGNpcmN1bGFyIGVtYmVkIGNoZWNrc1xuICAgIHN0YXRlLnN1YmplY3RTdGFjay5wdXNoKHN1YmplY3QpO1xuXG4gICAgLy8gaXRlcmF0ZSBvdmVyIHN1YmplY3QgcHJvcGVydGllc1xuICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN1YmplY3QpLnNvcnQoKTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgIC8vIGNvcHkga2V5d29yZHMgdG8gb3V0cHV0XG4gICAgICBpZihfaXNLZXl3b3JkKHByb3ApKSB7XG4gICAgICAgIG91dHB1dFtwcm9wXSA9IF9jbG9uZShzdWJqZWN0W3Byb3BdKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGV4cGxpY2l0IGlzIG9uIGFuZCBwcm9wZXJ0eSBpc24ndCBpbiB0aGUgZnJhbWUsIHNraXAgcHJvY2Vzc2luZ1xuICAgICAgaWYoZmxhZ3MuZXhwbGljaXQgJiYgIShwcm9wIGluIGZyYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gYWRkIG9iamVjdHNcbiAgICAgIHZhciBvYmplY3RzID0gc3ViamVjdFtwcm9wXTtcbiAgICAgIGZvcih2YXIgb2kgPSAwOyBvaSA8IG9iamVjdHMubGVuZ3RoOyArK29pKSB7XG4gICAgICAgIHZhciBvID0gb2JqZWN0c1tvaV07XG5cbiAgICAgICAgLy8gcmVjdXJzZSBpbnRvIGxpc3RcbiAgICAgICAgaWYoX2lzTGlzdChvKSkge1xuICAgICAgICAgIC8vIGFkZCBlbXB0eSBsaXN0XG4gICAgICAgICAgdmFyIGxpc3QgPSB7J0BsaXN0JzogW119O1xuICAgICAgICAgIF9hZGRGcmFtZU91dHB1dChvdXRwdXQsIHByb3AsIGxpc3QpO1xuXG4gICAgICAgICAgLy8gYWRkIGxpc3Qgb2JqZWN0c1xuICAgICAgICAgIHZhciBzcmMgPSBvWydAbGlzdCddO1xuICAgICAgICAgIGZvcih2YXIgbiBpbiBzcmMpIHtcbiAgICAgICAgICAgIG8gPSBzcmNbbl07XG4gICAgICAgICAgICBpZihfaXNTdWJqZWN0UmVmZXJlbmNlKG8pKSB7XG4gICAgICAgICAgICAgIHZhciBzdWJmcmFtZSA9IChwcm9wIGluIGZyYW1lID9cbiAgICAgICAgICAgICAgICBmcmFtZVtwcm9wXVswXVsnQGxpc3QnXSA6IF9jcmVhdGVJbXBsaWNpdEZyYW1lKGZsYWdzKSk7XG4gICAgICAgICAgICAgIC8vIHJlY3Vyc2UgaW50byBzdWJqZWN0IHJlZmVyZW5jZVxuICAgICAgICAgICAgICBfZnJhbWUoc3RhdGUsIFtvWydAaWQnXV0sIHN1YmZyYW1lLCBsaXN0LCAnQGxpc3QnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluY2x1ZGUgb3RoZXIgdmFsdWVzIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICAgICAgX2FkZEZyYW1lT3V0cHV0KGxpc3QsICdAbGlzdCcsIF9jbG9uZShvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoX2lzU3ViamVjdFJlZmVyZW5jZShvKSkge1xuICAgICAgICAgIC8vIHJlY3Vyc2UgaW50byBzdWJqZWN0IHJlZmVyZW5jZVxuICAgICAgICAgIHZhciBzdWJmcmFtZSA9IChwcm9wIGluIGZyYW1lID9cbiAgICAgICAgICAgIGZyYW1lW3Byb3BdIDogX2NyZWF0ZUltcGxpY2l0RnJhbWUoZmxhZ3MpKTtcbiAgICAgICAgICBfZnJhbWUoc3RhdGUsIFtvWydAaWQnXV0sIHN1YmZyYW1lLCBvdXRwdXQsIHByb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGluY2x1ZGUgb3RoZXIgdmFsdWVzIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICBfYWRkRnJhbWVPdXRwdXQob3V0cHV0LCBwcm9wLCBfY2xvbmUobykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGRlZmF1bHRzXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoZnJhbWUpLnNvcnQoKTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgIC8vIHNraXAga2V5d29yZHNcbiAgICAgIGlmKF9pc0tleXdvcmQocHJvcCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIG9taXQgZGVmYXVsdCBpcyBvZmYsIHRoZW4gaW5jbHVkZSBkZWZhdWx0IHZhbHVlcyBmb3IgcHJvcGVydGllc1xuICAgICAgLy8gdGhhdCBhcHBlYXIgaW4gdGhlIG5leHQgZnJhbWUgYnV0IGFyZSBub3QgaW4gdGhlIG1hdGNoaW5nIHN1YmplY3RcbiAgICAgIHZhciBuZXh0ID0gZnJhbWVbcHJvcF1bMF07XG4gICAgICB2YXIgb21pdERlZmF1bHRPbiA9IF9nZXRGcmFtZUZsYWcobmV4dCwgb3B0aW9ucywgJ29taXREZWZhdWx0Jyk7XG4gICAgICBpZighb21pdERlZmF1bHRPbiAmJiAhKHByb3AgaW4gb3V0cHV0KSkge1xuICAgICAgICB2YXIgcHJlc2VydmUgPSAnQG51bGwnO1xuICAgICAgICBpZignQGRlZmF1bHQnIGluIG5leHQpIHtcbiAgICAgICAgICBwcmVzZXJ2ZSA9IF9jbG9uZShuZXh0WydAZGVmYXVsdCddKTtcbiAgICAgICAgfVxuICAgICAgICBpZighX2lzQXJyYXkocHJlc2VydmUpKSB7XG4gICAgICAgICAgcHJlc2VydmUgPSBbcHJlc2VydmVdO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dFtwcm9wXSA9IFt7J0BwcmVzZXJ2ZSc6IHByZXNlcnZlfV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIG91dHB1dCB0byBwYXJlbnRcbiAgICBfYWRkRnJhbWVPdXRwdXQocGFyZW50LCBwcm9wZXJ0eSwgb3V0cHV0KTtcblxuICAgIC8vIHBvcCBtYXRjaGluZyBzdWJqZWN0IGZyb20gY2lyY3VsYXIgcmVmLWNoZWNraW5nIHN0YWNrXG4gICAgc3RhdGUuc3ViamVjdFN0YWNrLnBvcCgpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbXBsaWNpdCBmcmFtZSB3aGVuIHJlY3Vyc2luZyB0aHJvdWdoIHN1YmplY3QgbWF0Y2hlcy4gSWZcbiAqIGEgZnJhbWUgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGZyYW1lIGZvciBhIHBhcnRpY3VsYXIgcHJvcGVydHksIHRoZW5cbiAqIGEgd2lsZGNhcmQgY2hpbGQgZnJhbWUgd2lsbCBiZSBjcmVhdGVkIHRoYXQgdXNlcyB0aGUgc2FtZSBmbGFncyB0aGF0IHRoZVxuICogcGFyZW50IGZyYW1lIHVzZWQuXG4gKlxuICogQHBhcmFtIGZsYWdzIHRoZSBjdXJyZW50IGZyYW1pbmcgZmxhZ3MuXG4gKlxuICogQHJldHVybiB0aGUgaW1wbGljaXQgZnJhbWUuXG4gKi9cbmZ1bmN0aW9uIF9jcmVhdGVJbXBsaWNpdEZyYW1lKGZsYWdzKSB7XG4gIHZhciBmcmFtZSA9IHt9O1xuICBmb3IodmFyIGtleSBpbiBmbGFncykge1xuICAgIGlmKGZsYWdzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgZnJhbWVbJ0AnICsga2V5XSA9IFtmbGFnc1trZXldXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtmcmFtZV07XG59XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBjdXJyZW50IHN1YmplY3Qgc3RhY2sgdG8gc2VlIGlmIGVtYmVkZGluZyB0aGUgZ2l2ZW4gc3ViamVjdFxuICogd291bGQgY2F1c2UgYSBjaXJjdWxhciByZWZlcmVuY2UuXG4gKlxuICogQHBhcmFtIHN1YmplY3RUb0VtYmVkIHRoZSBzdWJqZWN0IHRvIGVtYmVkLlxuICogQHBhcmFtIHN1YmplY3RTdGFjayB0aGUgY3VycmVudCBzdGFjayBvZiBzdWJqZWN0cy5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgYSBjaXJjdWxhciByZWZlcmVuY2Ugd291bGQgYmUgY3JlYXRlZCwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfY3JlYXRlc0NpcmN1bGFyUmVmZXJlbmNlKHN1YmplY3RUb0VtYmVkLCBzdWJqZWN0U3RhY2spIHtcbiAgZm9yKHZhciBpID0gc3ViamVjdFN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYoc3ViamVjdFN0YWNrW2ldWydAaWQnXSA9PT0gc3ViamVjdFRvRW1iZWRbJ0BpZCddKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGZyYW1lIGZsYWcgdmFsdWUgZm9yIHRoZSBnaXZlbiBmbGFnIG5hbWUuXG4gKlxuICogQHBhcmFtIGZyYW1lIHRoZSBmcmFtZS5cbiAqIEBwYXJhbSBvcHRpb25zIHRoZSBmcmFtaW5nIG9wdGlvbnMuXG4gKiBAcGFyYW0gbmFtZSB0aGUgZmxhZyBuYW1lLlxuICpcbiAqIEByZXR1cm4gdGhlIGZsYWcgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIF9nZXRGcmFtZUZsYWcoZnJhbWUsIG9wdGlvbnMsIG5hbWUpIHtcbiAgdmFyIGZsYWcgPSAnQCcgKyBuYW1lO1xuICB2YXIgcnZhbCA9IChmbGFnIGluIGZyYW1lID8gZnJhbWVbZmxhZ11bMF0gOiBvcHRpb25zW25hbWVdKTtcbiAgaWYobmFtZSA9PT0gJ2VtYmVkJykge1xuICAgIC8vIGRlZmF1bHQgaXMgXCJAbGFzdFwiXG4gICAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgc3VwcG9ydCBmb3IgXCJlbWJlZFwiIG1hcHM6XG4gICAgLy8gdHJ1ZSA9PiBcIkBsYXN0XCJcbiAgICAvLyBmYWxzZSA9PiBcIkBuZXZlclwiXG4gICAgaWYocnZhbCA9PT0gdHJ1ZSkge1xuICAgICAgcnZhbCA9ICdAbGFzdCc7XG4gICAgfSBlbHNlIGlmKHJ2YWwgPT09IGZhbHNlKSB7XG4gICAgICBydmFsID0gJ0BuZXZlcic7XG4gICAgfSBlbHNlIGlmKHJ2YWwgIT09ICdAYWx3YXlzJyAmJiBydmFsICE9PSAnQG5ldmVyJyAmJiBydmFsICE9PSAnQGxpbmsnKSB7XG4gICAgICBydmFsID0gJ0BsYXN0JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ2YWw7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIGEgSlNPTi1MRCBmcmFtZSwgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIGlmIHRoZSBmcmFtZSBpcyBpbnZhbGlkLlxuICpcbiAqIEBwYXJhbSBmcmFtZSB0aGUgZnJhbWUgdG8gdmFsaWRhdGUuXG4gKi9cbmZ1bmN0aW9uIF92YWxpZGF0ZUZyYW1lKGZyYW1lKSB7XG4gIGlmKCFfaXNBcnJheShmcmFtZSkgfHwgZnJhbWUubGVuZ3RoICE9PSAxIHx8ICFfaXNPYmplY3QoZnJhbWVbMF0pKSB7XG4gICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IGEgSlNPTi1MRCBmcmFtZSBtdXN0IGJlIGEgc2luZ2xlIG9iamVjdC4nLFxuICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsIHtmcmFtZTogZnJhbWV9KTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBtYXAgb2YgYWxsIG9mIHRoZSBzdWJqZWN0cyB0aGF0IG1hdGNoIGEgcGFyc2VkIGZyYW1lLlxuICpcbiAqIEBwYXJhbSBzdGF0ZSB0aGUgY3VycmVudCBmcmFtaW5nIHN0YXRlLlxuICogQHBhcmFtIHN1YmplY3RzIHRoZSBzZXQgb2Ygc3ViamVjdHMgdG8gZmlsdGVyLlxuICogQHBhcmFtIGZyYW1lIHRoZSBwYXJzZWQgZnJhbWUuXG4gKiBAcGFyYW0gZmxhZ3MgdGhlIGZyYW1lIGZsYWdzLlxuICpcbiAqIEByZXR1cm4gYWxsIG9mIHRoZSBtYXRjaGVkIHN1YmplY3RzLlxuICovXG5mdW5jdGlvbiBfZmlsdGVyU3ViamVjdHMoc3RhdGUsIHN1YmplY3RzLCBmcmFtZSwgZmxhZ3MpIHtcbiAgLy8gZmlsdGVyIHN1YmplY3RzIGluIEBpZCBvcmRlclxuICB2YXIgcnZhbCA9IHt9O1xuICBmb3IodmFyIGkgPSAwOyBpIDwgc3ViamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgaWQgPSBzdWJqZWN0c1tpXTtcbiAgICB2YXIgc3ViamVjdCA9IHN0YXRlLnN1YmplY3RzW2lkXTtcbiAgICBpZihfZmlsdGVyU3ViamVjdChzdWJqZWN0LCBmcmFtZSwgZmxhZ3MpKSB7XG4gICAgICBydmFsW2lkXSA9IHN1YmplY3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiBydmFsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc3ViamVjdCBtYXRjaGVzIHRoZSBnaXZlbiBmcmFtZS5cbiAqXG4gKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byBjaGVjay5cbiAqIEBwYXJhbSBmcmFtZSB0aGUgZnJhbWUgdG8gY2hlY2suXG4gKiBAcGFyYW0gZmxhZ3MgdGhlIGZyYW1lIGZsYWdzLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc3ViamVjdCBtYXRjaGVzLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9maWx0ZXJTdWJqZWN0KHN1YmplY3QsIGZyYW1lLCBmbGFncykge1xuICAvLyBjaGVjayBAdHlwZSAob2JqZWN0IHZhbHVlIG1lYW5zICdhbnknIHR5cGUsIGZhbGwgdGhyb3VnaCB0byBkdWNrdHlwaW5nKVxuICBpZignQHR5cGUnIGluIGZyYW1lICYmXG4gICAgIShmcmFtZVsnQHR5cGUnXS5sZW5ndGggPT09IDEgJiYgX2lzT2JqZWN0KGZyYW1lWydAdHlwZSddWzBdKSkpIHtcbiAgICB2YXIgdHlwZXMgPSBmcmFtZVsnQHR5cGUnXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIC8vIGFueSBtYXRjaGluZyBAdHlwZSBpcyBhIG1hdGNoXG4gICAgICBpZihqc29ubGQuaGFzVmFsdWUoc3ViamVjdCwgJ0B0eXBlJywgdHlwZXNbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBjaGVjayBkdWNrdHlwZVxuICB2YXIgd2lsZGNhcmQgPSB0cnVlO1xuICB2YXIgbWF0Y2hlc1NvbWUgPSBmYWxzZTtcbiAgZm9yKHZhciBrZXkgaW4gZnJhbWUpIHtcbiAgICBpZihfaXNLZXl3b3JkKGtleSkpIHtcbiAgICAgIC8vIHNraXAgbm9uLUBpZCBhbmQgbm9uLUB0eXBlXG4gICAgICBpZihrZXkgIT09ICdAaWQnICYmIGtleSAhPT0gJ0B0eXBlJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHdpbGRjYXJkID0gZmFsc2U7XG5cbiAgICAgIC8vIGNoZWNrIEBpZCBmb3IgYSBzcGVjaWZpYyBAaWQgdmFsdWVcbiAgICAgIGlmKGtleSA9PT0gJ0BpZCcgJiYgX2lzU3RyaW5nKGZyYW1lW2tleV0pKSB7XG4gICAgICAgIGlmKHN1YmplY3Rba2V5XSAhPT0gZnJhbWVba2V5XSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaGVzU29tZSA9IHRydWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdpbGRjYXJkID0gZmFsc2U7XG5cbiAgICBpZihrZXkgaW4gc3ViamVjdCkge1xuICAgICAgLy8gZnJhbWVba2V5XSA9PT0gW10gbWVhbnMgZG8gbm90IG1hdGNoIGlmIHByb3BlcnR5IGlzIHByZXNlbnRcbiAgICAgIGlmKF9pc0FycmF5KGZyYW1lW2tleV0pICYmIGZyYW1lW2tleV0ubGVuZ3RoID09PSAwICYmXG4gICAgICAgIHN1YmplY3Rba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG1hdGNoZXNTb21lID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGFsbCBwcm9wZXJ0aWVzIG11c3QgbWF0Y2ggdG8gYmUgYSBkdWNrIHVubGVzcyBhIEBkZWZhdWx0IGlzIHNwZWNpZmllZFxuICAgIHZhciBoYXNEZWZhdWx0ID0gKF9pc0FycmF5KGZyYW1lW2tleV0pICYmIF9pc09iamVjdChmcmFtZVtrZXldWzBdKSAmJlxuICAgICAgJ0BkZWZhdWx0JyBpbiBmcmFtZVtrZXldWzBdKTtcbiAgICBpZihmbGFncy5yZXF1aXJlQWxsICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gcmV0dXJuIHRydWUgaWYgd2lsZGNhcmQgb3Igc3ViamVjdCBtYXRjaGVzIHNvbWUgcHJvcGVydGllc1xuICByZXR1cm4gd2lsZGNhcmQgfHwgbWF0Y2hlc1NvbWU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbiBleGlzdGluZyBlbWJlZC5cbiAqXG4gKiBAcGFyYW0gc3RhdGUgdGhlIGN1cnJlbnQgZnJhbWluZyBzdGF0ZS5cbiAqIEBwYXJhbSBpZCB0aGUgQGlkIG9mIHRoZSBlbWJlZCB0byByZW1vdmUuXG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVFbWJlZChzdGF0ZSwgaWQpIHtcbiAgLy8gZ2V0IGV4aXN0aW5nIGVtYmVkXG4gIHZhciBlbWJlZHMgPSBzdGF0ZS51bmlxdWVFbWJlZHM7XG4gIHZhciBlbWJlZCA9IGVtYmVkc1tpZF07XG4gIHZhciBwYXJlbnQgPSBlbWJlZC5wYXJlbnQ7XG4gIHZhciBwcm9wZXJ0eSA9IGVtYmVkLnByb3BlcnR5O1xuXG4gIC8vIGNyZWF0ZSByZWZlcmVuY2UgdG8gcmVwbGFjZSBlbWJlZFxuICB2YXIgc3ViamVjdCA9IHsnQGlkJzogaWR9O1xuXG4gIC8vIHJlbW92ZSBleGlzdGluZyBlbWJlZFxuICBpZihfaXNBcnJheShwYXJlbnQpKSB7XG4gICAgLy8gcmVwbGFjZSBzdWJqZWN0IHdpdGggcmVmZXJlbmNlXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHBhcmVudC5sZW5ndGg7ICsraSkge1xuICAgICAgaWYoanNvbmxkLmNvbXBhcmVWYWx1ZXMocGFyZW50W2ldLCBzdWJqZWN0KSkge1xuICAgICAgICBwYXJlbnRbaV0gPSBzdWJqZWN0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVwbGFjZSBzdWJqZWN0IHdpdGggcmVmZXJlbmNlXG4gICAgdmFyIHVzZUFycmF5ID0gX2lzQXJyYXkocGFyZW50W3Byb3BlcnR5XSk7XG4gICAganNvbmxkLnJlbW92ZVZhbHVlKHBhcmVudCwgcHJvcGVydHksIHN1YmplY3QsIHtwcm9wZXJ0eUlzQXJyYXk6IHVzZUFycmF5fSk7XG4gICAganNvbmxkLmFkZFZhbHVlKHBhcmVudCwgcHJvcGVydHksIHN1YmplY3QsIHtwcm9wZXJ0eUlzQXJyYXk6IHVzZUFycmF5fSk7XG4gIH1cblxuICAvLyByZWN1cnNpdmVseSByZW1vdmUgZGVwZW5kZW50IGRhbmdsaW5nIGVtYmVkc1xuICB2YXIgcmVtb3ZlRGVwZW5kZW50cyA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgLy8gZ2V0IGVtYmVkIGtleXMgYXMgYSBzZXBhcmF0ZSBhcnJheSB0byBlbmFibGUgZGVsZXRpbmcga2V5cyBpbiBtYXBcbiAgICB2YXIgaWRzID0gT2JqZWN0LmtleXMoZW1iZWRzKTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgbmV4dCA9IGlkc1tpXTtcbiAgICAgIGlmKG5leHQgaW4gZW1iZWRzICYmIF9pc09iamVjdChlbWJlZHNbbmV4dF0ucGFyZW50KSAmJlxuICAgICAgICBlbWJlZHNbbmV4dF0ucGFyZW50WydAaWQnXSA9PT0gaWQpIHtcbiAgICAgICAgZGVsZXRlIGVtYmVkc1tuZXh0XTtcbiAgICAgICAgcmVtb3ZlRGVwZW5kZW50cyhuZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJlbW92ZURlcGVuZGVudHMoaWQpO1xufVxuXG4vKipcbiAqIEFkZHMgZnJhbWluZyBvdXRwdXQgdG8gdGhlIGdpdmVuIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50IHRoZSBwYXJlbnQgdG8gYWRkIHRvLlxuICogQHBhcmFtIHByb3BlcnR5IHRoZSBwYXJlbnQgcHJvcGVydHkuXG4gKiBAcGFyYW0gb3V0cHV0IHRoZSBvdXRwdXQgdG8gYWRkLlxuICovXG5mdW5jdGlvbiBfYWRkRnJhbWVPdXRwdXQocGFyZW50LCBwcm9wZXJ0eSwgb3V0cHV0KSB7XG4gIGlmKF9pc09iamVjdChwYXJlbnQpKSB7XG4gICAganNvbmxkLmFkZFZhbHVlKHBhcmVudCwgcHJvcGVydHksIG91dHB1dCwge3Byb3BlcnR5SXNBcnJheTogdHJ1ZX0pO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudC5wdXNoKG91dHB1dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBAcHJlc2VydmUga2V5d29yZHMgYXMgdGhlIGxhc3Qgc3RlcCBvZiB0aGUgZnJhbWluZyBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIGN0eCB0aGUgYWN0aXZlIGNvbnRleHQgdXNlZCB0byBjb21wYWN0IHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBpbnB1dCB0aGUgZnJhbWVkLCBjb21wYWN0ZWQgb3V0cHV0LlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIGNvbXBhY3Rpb24gb3B0aW9ucyB1c2VkLlxuICpcbiAqIEByZXR1cm4gdGhlIHJlc3VsdGluZyBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVQcmVzZXJ2ZShjdHgsIGlucHV0LCBvcHRpb25zKSB7XG4gIC8vIHJlY3Vyc2UgdGhyb3VnaCBhcnJheXNcbiAgaWYoX2lzQXJyYXkoaW5wdXQpKSB7XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHJlc3VsdCA9IF9yZW1vdmVQcmVzZXJ2ZShjdHgsIGlucHV0W2ldLCBvcHRpb25zKTtcbiAgICAgIC8vIGRyb3AgbnVsbHMgZnJvbSBhcnJheXNcbiAgICAgIGlmKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICBvdXRwdXQucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnB1dCA9IG91dHB1dDtcbiAgfSBlbHNlIGlmKF9pc09iamVjdChpbnB1dCkpIHtcbiAgICAvLyByZW1vdmUgQHByZXNlcnZlXG4gICAgaWYoJ0BwcmVzZXJ2ZScgaW4gaW5wdXQpIHtcbiAgICAgIGlmKGlucHV0WydAcHJlc2VydmUnXSA9PT0gJ0BudWxsJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnB1dFsnQHByZXNlcnZlJ107XG4gICAgfVxuXG4gICAgLy8gc2tpcCBAdmFsdWVzXG4gICAgaWYoX2lzVmFsdWUoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gcmVjdXJzZSB0aHJvdWdoIEBsaXN0c1xuICAgIGlmKF9pc0xpc3QoaW5wdXQpKSB7XG4gICAgICBpbnB1dFsnQGxpc3QnXSA9IF9yZW1vdmVQcmVzZXJ2ZShjdHgsIGlucHV0WydAbGlzdCddLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgaW4tbWVtb3J5IGxpbmtlZCBub2Rlc1xuICAgIHZhciBpZEFsaWFzID0gX2NvbXBhY3RJcmkoY3R4LCAnQGlkJyk7XG4gICAgaWYoaWRBbGlhcyBpbiBpbnB1dCkge1xuICAgICAgdmFyIGlkID0gaW5wdXRbaWRBbGlhc107XG4gICAgICBpZihpZCBpbiBvcHRpb25zLmxpbmspIHtcbiAgICAgICAgdmFyIGlkeCA9IG9wdGlvbnMubGlua1tpZF0uaW5kZXhPZihpbnB1dCk7XG4gICAgICAgIGlmKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgICAvLyBwcmV2ZW50IGNpcmN1bGFyIHZpc2l0YXRpb25cbiAgICAgICAgICBvcHRpb25zLmxpbmtbaWRdLnB1c2goaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFscmVhZHkgdmlzaXRlZFxuICAgICAgICAgIHJldHVybiBvcHRpb25zLmxpbmtbaWRdW2lkeF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByZXZlbnQgY2lyY3VsYXIgdmlzaXRhdGlvblxuICAgICAgICBvcHRpb25zLmxpbmtbaWRdID0gW2lucHV0XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZWN1cnNlIHRocm91Z2ggcHJvcGVydGllc1xuICAgIGZvcih2YXIgcHJvcCBpbiBpbnB1dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IF9yZW1vdmVQcmVzZXJ2ZShjdHgsIGlucHV0W3Byb3BdLCBvcHRpb25zKTtcbiAgICAgIHZhciBjb250YWluZXIgPSBqc29ubGQuZ2V0Q29udGV4dFZhbHVlKGN0eCwgcHJvcCwgJ0Bjb250YWluZXInKTtcbiAgICAgIGlmKG9wdGlvbnMuY29tcGFjdEFycmF5cyAmJiBfaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdFswXTtcbiAgICAgIH1cbiAgICAgIGlucHV0W3Byb3BdID0gcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5wdXQ7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgdHdvIHN0cmluZ3MgZmlyc3QgYmFzZWQgb24gbGVuZ3RoIGFuZCB0aGVuIGxleGljb2dyYXBoaWNhbGx5LlxuICpcbiAqIEBwYXJhbSBhIHRoZSBmaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0gYiB0aGUgc2Vjb25kIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJuIC0xIGlmIGEgPCBiLCAxIGlmIGEgPiBiLCAwIGlmIGEgPT0gYi5cbiAqL1xuZnVuY3Rpb24gX2NvbXBhcmVTaG9ydGVzdExlYXN0KGEsIGIpIHtcbiAgaWYoYS5sZW5ndGggPCBiLmxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZihiLmxlbmd0aCA8IGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYoYSA9PT0gYikge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiAoYSA8IGIpID8gLTEgOiAxO1xufVxuXG4vKipcbiAqIFBpY2tzIHRoZSBwcmVmZXJyZWQgY29tcGFjdGlvbiB0ZXJtIGZyb20gdGhlIGdpdmVuIGludmVyc2UgY29udGV4dCBlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYWN0aXZlQ3R4IHRoZSBhY3RpdmUgY29udGV4dC5cbiAqIEBwYXJhbSBpcmkgdGhlIElSSSB0byBwaWNrIHRoZSB0ZXJtIGZvci5cbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gcGljayB0aGUgdGVybSBmb3IuXG4gKiBAcGFyYW0gY29udGFpbmVycyB0aGUgcHJlZmVycmVkIGNvbnRhaW5lcnMuXG4gKiBAcGFyYW0gdHlwZU9yTGFuZ3VhZ2UgZWl0aGVyICdAdHlwZScgb3IgJ0BsYW5ndWFnZScuXG4gKiBAcGFyYW0gdHlwZU9yTGFuZ3VhZ2VWYWx1ZSB0aGUgcHJlZmVycmVkIHZhbHVlIGZvciAnQHR5cGUnIG9yICdAbGFuZ3VhZ2UnLlxuICpcbiAqIEByZXR1cm4gdGhlIHByZWZlcnJlZCB0ZXJtLlxuICovXG5mdW5jdGlvbiBfc2VsZWN0VGVybShcbiAgYWN0aXZlQ3R4LCBpcmksIHZhbHVlLCBjb250YWluZXJzLCB0eXBlT3JMYW5ndWFnZSwgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSkge1xuICBpZih0eXBlT3JMYW5ndWFnZVZhbHVlID09PSBudWxsKSB7XG4gICAgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSA9ICdAbnVsbCc7XG4gIH1cblxuICAvLyBwcmVmZXJlbmNlcyBmb3IgdGhlIHZhbHVlIG9mIEB0eXBlIG9yIEBsYW5ndWFnZVxuICB2YXIgcHJlZnMgPSBbXTtcblxuICAvLyBkZXRlcm1pbmUgcHJlZnMgZm9yIEBpZCBiYXNlZCBvbiB3aGV0aGVyIG9yIG5vdCB2YWx1ZSBjb21wYWN0cyB0byBhIHRlcm1cbiAgaWYoKHR5cGVPckxhbmd1YWdlVmFsdWUgPT09ICdAaWQnIHx8IHR5cGVPckxhbmd1YWdlVmFsdWUgPT09ICdAcmV2ZXJzZScpICYmXG4gICAgX2lzU3ViamVjdFJlZmVyZW5jZSh2YWx1ZSkpIHtcbiAgICAvLyBwcmVmZXIgQHJldmVyc2UgZmlyc3RcbiAgICBpZih0eXBlT3JMYW5ndWFnZVZhbHVlID09PSAnQHJldmVyc2UnKSB7XG4gICAgICBwcmVmcy5wdXNoKCdAcmV2ZXJzZScpO1xuICAgIH1cbiAgICAvLyB0cnkgdG8gY29tcGFjdCB2YWx1ZSB0byBhIHRlcm1cbiAgICB2YXIgdGVybSA9IF9jb21wYWN0SXJpKGFjdGl2ZUN0eCwgdmFsdWVbJ0BpZCddLCBudWxsLCB7dm9jYWI6IHRydWV9KTtcbiAgICBpZih0ZXJtIGluIGFjdGl2ZUN0eC5tYXBwaW5ncyAmJlxuICAgICAgYWN0aXZlQ3R4Lm1hcHBpbmdzW3Rlcm1dICYmXG4gICAgICBhY3RpdmVDdHgubWFwcGluZ3NbdGVybV1bJ0BpZCddID09PSB2YWx1ZVsnQGlkJ10pIHtcbiAgICAgIC8vIHByZWZlciBAdm9jYWJcbiAgICAgIHByZWZzLnB1c2guYXBwbHkocHJlZnMsIFsnQHZvY2FiJywgJ0BpZCddKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcHJlZmVyIEBpZFxuICAgICAgcHJlZnMucHVzaC5hcHBseShwcmVmcywgWydAaWQnLCAnQHZvY2FiJ10pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwcmVmcy5wdXNoKHR5cGVPckxhbmd1YWdlVmFsdWUpO1xuICB9XG4gIHByZWZzLnB1c2goJ0Bub25lJyk7XG5cbiAgdmFyIGNvbnRhaW5lck1hcCA9IGFjdGl2ZUN0eC5pbnZlcnNlW2lyaV07XG4gIGZvcih2YXIgY2kgPSAwOyBjaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyArK2NpKSB7XG4gICAgLy8gaWYgY29udGFpbmVyIG5vdCBhdmFpbGFibGUgaW4gdGhlIG1hcCwgY29udGludWVcbiAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyc1tjaV07XG4gICAgaWYoIShjb250YWluZXIgaW4gY29udGFpbmVyTWFwKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHR5cGVPckxhbmd1YWdlVmFsdWVNYXAgPSBjb250YWluZXJNYXBbY29udGFpbmVyXVt0eXBlT3JMYW5ndWFnZV07XG4gICAgZm9yKHZhciBwaSA9IDA7IHBpIDwgcHJlZnMubGVuZ3RoOyArK3BpKSB7XG4gICAgICAvLyBpZiB0eXBlL2xhbmd1YWdlIG9wdGlvbiBub3QgYXZhaWxhYmxlIGluIHRoZSBtYXAsIGNvbnRpbnVlXG4gICAgICB2YXIgcHJlZiA9IHByZWZzW3BpXTtcbiAgICAgIGlmKCEocHJlZiBpbiB0eXBlT3JMYW5ndWFnZVZhbHVlTWFwKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2VsZWN0IHRlcm1cbiAgICAgIHJldHVybiB0eXBlT3JMYW5ndWFnZVZhbHVlTWFwW3ByZWZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENvbXBhY3RzIGFuIElSSSBvciBrZXl3b3JkIGludG8gYSB0ZXJtIG9yIHByZWZpeCBpZiBpdCBjYW4gYmUuIElmIHRoZVxuICogSVJJIGhhcyBhbiBhc3NvY2lhdGVkIHZhbHVlIGl0IG1heSBiZSBwYXNzZWQuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgYWN0aXZlIGNvbnRleHQgdG8gdXNlLlxuICogQHBhcmFtIGlyaSB0aGUgSVJJIHRvIGNvbXBhY3QuXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNoZWNrIG9yIG51bGwuXG4gKiBAcGFyYW0gcmVsYXRpdmVUbyBvcHRpb25zIGZvciBob3cgdG8gY29tcGFjdCBJUklzOlxuICogICAgICAgICAgdm9jYWI6IHRydWUgdG8gc3BsaXQgYWZ0ZXIgQHZvY2FiLCBmYWxzZSBub3QgdG8uXG4gKiBAcGFyYW0gcmV2ZXJzZSB0cnVlIGlmIGEgcmV2ZXJzZSBwcm9wZXJ0eSBpcyBiZWluZyBjb21wYWN0ZWQsIGZhbHNlIGlmIG5vdC5cbiAqXG4gKiBAcmV0dXJuIHRoZSBjb21wYWN0ZWQgdGVybSwgcHJlZml4LCBrZXl3b3JkIGFsaWFzLCBvciB0aGUgb3JpZ2luYWwgSVJJLlxuICovXG5mdW5jdGlvbiBfY29tcGFjdElyaShhY3RpdmVDdHgsIGlyaSwgdmFsdWUsIHJlbGF0aXZlVG8sIHJldmVyc2UpIHtcbiAgLy8gY2FuJ3QgY29tcGFjdCBudWxsXG4gIGlmKGlyaSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBpcmk7XG4gIH1cblxuICAvLyBkZWZhdWx0IHZhbHVlIGFuZCBwYXJlbnQgdG8gbnVsbFxuICBpZihfaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBudWxsO1xuICB9XG4gIC8vIGRlZmF1bHQgcmV2ZXJzZSB0byBmYWxzZVxuICBpZihfaXNVbmRlZmluZWQocmV2ZXJzZSkpIHtcbiAgICByZXZlcnNlID0gZmFsc2U7XG4gIH1cbiAgcmVsYXRpdmVUbyA9IHJlbGF0aXZlVG8gfHwge307XG5cbiAgdmFyIGludmVyc2VDdHggPSBhY3RpdmVDdHguZ2V0SW52ZXJzZSgpO1xuXG4gIC8vIGlmIHRlcm0gaXMgYSBrZXl3b3JkLCBpdCBjYW4gb25seSBiZSBjb21wYWN0ZWQgdG8gYSBzaW1wbGUgYWxpYXNcbiAgaWYoX2lzS2V5d29yZChpcmkpKSB7XG4gICAgaWYoaXJpIGluIGludmVyc2VDdHgpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlQ3R4W2lyaV1bJ0Bub25lJ11bJ0B0eXBlJ11bJ0Bub25lJ107XG4gICAgfVxuICAgIHJldHVybiBpcmk7XG4gIH1cblxuICAvLyB1c2UgaW52ZXJzZSBjb250ZXh0IHRvIHBpY2sgYSB0ZXJtIGlmIGlyaSBpcyByZWxhdGl2ZSB0byB2b2NhYlxuICBpZihyZWxhdGl2ZVRvLnZvY2FiICYmIGlyaSBpbiBpbnZlcnNlQ3R4KSB7XG4gICAgdmFyIGRlZmF1bHRMYW5ndWFnZSA9IGFjdGl2ZUN0eFsnQGxhbmd1YWdlJ10gfHwgJ0Bub25lJztcblxuICAgIC8vIHByZWZlciBAaW5kZXggaWYgYXZhaWxhYmxlIGluIHZhbHVlXG4gICAgdmFyIGNvbnRhaW5lcnMgPSBbXTtcbiAgICBpZihfaXNPYmplY3QodmFsdWUpICYmICdAaW5kZXgnIGluIHZhbHVlKSB7XG4gICAgICBjb250YWluZXJzLnB1c2goJ0BpbmRleCcpO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHRzIGZvciB0ZXJtIHNlbGVjdGlvbiBiYXNlZCBvbiB0eXBlL2xhbmd1YWdlXG4gICAgdmFyIHR5cGVPckxhbmd1YWdlID0gJ0BsYW5ndWFnZSc7XG4gICAgdmFyIHR5cGVPckxhbmd1YWdlVmFsdWUgPSAnQG51bGwnO1xuXG4gICAgaWYocmV2ZXJzZSkge1xuICAgICAgdHlwZU9yTGFuZ3VhZ2UgPSAnQHR5cGUnO1xuICAgICAgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSA9ICdAcmV2ZXJzZSc7XG4gICAgICBjb250YWluZXJzLnB1c2goJ0BzZXQnKTtcbiAgICB9IGVsc2UgaWYoX2lzTGlzdCh2YWx1ZSkpIHtcbiAgICAgIC8vIGNob29zZSB0aGUgbW9zdCBzcGVjaWZpYyB0ZXJtIHRoYXQgd29ya3MgZm9yIGFsbCBlbGVtZW50cyBpbiBAbGlzdFxuICAgICAgLy8gb25seSBzZWxlY3QgQGxpc3QgY29udGFpbmVycyBpZiBAaW5kZXggaXMgTk9UIGluIHZhbHVlXG4gICAgICBpZighKCdAaW5kZXgnIGluIHZhbHVlKSkge1xuICAgICAgICBjb250YWluZXJzLnB1c2goJ0BsaXN0Jyk7XG4gICAgICB9XG4gICAgICB2YXIgbGlzdCA9IHZhbHVlWydAbGlzdCddO1xuICAgICAgdmFyIGNvbW1vbkxhbmd1YWdlID0gKGxpc3QubGVuZ3RoID09PSAwKSA/IGRlZmF1bHRMYW5ndWFnZSA6IG51bGw7XG4gICAgICB2YXIgY29tbW9uVHlwZSA9IG51bGw7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgIHZhciBpdGVtTGFuZ3VhZ2UgPSAnQG5vbmUnO1xuICAgICAgICB2YXIgaXRlbVR5cGUgPSAnQG5vbmUnO1xuICAgICAgICBpZihfaXNWYWx1ZShpdGVtKSkge1xuICAgICAgICAgIGlmKCdAbGFuZ3VhZ2UnIGluIGl0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW1MYW5ndWFnZSA9IGl0ZW1bJ0BsYW5ndWFnZSddO1xuICAgICAgICAgIH0gZWxzZSBpZignQHR5cGUnIGluIGl0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW1UeXBlID0gaXRlbVsnQHR5cGUnXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGxhaW4gbGl0ZXJhbFxuICAgICAgICAgICAgaXRlbUxhbmd1YWdlID0gJ0BudWxsJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVR5cGUgPSAnQGlkJztcbiAgICAgICAgfVxuICAgICAgICBpZihjb21tb25MYW5ndWFnZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbW1vbkxhbmd1YWdlID0gaXRlbUxhbmd1YWdlO1xuICAgICAgICB9IGVsc2UgaWYoaXRlbUxhbmd1YWdlICE9PSBjb21tb25MYW5ndWFnZSAmJiBfaXNWYWx1ZShpdGVtKSkge1xuICAgICAgICAgIGNvbW1vbkxhbmd1YWdlID0gJ0Bub25lJztcbiAgICAgICAgfVxuICAgICAgICBpZihjb21tb25UeXBlID09PSBudWxsKSB7XG4gICAgICAgICAgY29tbW9uVHlwZSA9IGl0ZW1UeXBlO1xuICAgICAgICB9IGVsc2UgaWYoaXRlbVR5cGUgIT09IGNvbW1vblR5cGUpIHtcbiAgICAgICAgICBjb21tb25UeXBlID0gJ0Bub25lJztcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVyZSBhcmUgZGlmZmVyZW50IGxhbmd1YWdlcyBhbmQgdHlwZXMgaW4gdGhlIGxpc3QsIHNvIGNob29zZVxuICAgICAgICAvLyB0aGUgbW9zdCBnZW5lcmljIHRlcm0sIG5vIG5lZWQgdG8ga2VlcCBpdGVyYXRpbmcgdGhlIGxpc3RcbiAgICAgICAgaWYoY29tbW9uTGFuZ3VhZ2UgPT09ICdAbm9uZScgJiYgY29tbW9uVHlwZSA9PT0gJ0Bub25lJykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb21tb25MYW5ndWFnZSA9IGNvbW1vbkxhbmd1YWdlIHx8ICdAbm9uZSc7XG4gICAgICBjb21tb25UeXBlID0gY29tbW9uVHlwZSB8fCAnQG5vbmUnO1xuICAgICAgaWYoY29tbW9uVHlwZSAhPT0gJ0Bub25lJykge1xuICAgICAgICB0eXBlT3JMYW5ndWFnZSA9ICdAdHlwZSc7XG4gICAgICAgIHR5cGVPckxhbmd1YWdlVmFsdWUgPSBjb21tb25UeXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSA9IGNvbW1vbkxhbmd1YWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZihfaXNWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgaWYoJ0BsYW5ndWFnZScgaW4gdmFsdWUgJiYgISgnQGluZGV4JyBpbiB2YWx1ZSkpIHtcbiAgICAgICAgICBjb250YWluZXJzLnB1c2goJ0BsYW5ndWFnZScpO1xuICAgICAgICAgIHR5cGVPckxhbmd1YWdlVmFsdWUgPSB2YWx1ZVsnQGxhbmd1YWdlJ107XG4gICAgICAgIH0gZWxzZSBpZignQHR5cGUnIGluIHZhbHVlKSB7XG4gICAgICAgICAgdHlwZU9yTGFuZ3VhZ2UgPSAnQHR5cGUnO1xuICAgICAgICAgIHR5cGVPckxhbmd1YWdlVmFsdWUgPSB2YWx1ZVsnQHR5cGUnXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZU9yTGFuZ3VhZ2UgPSAnQHR5cGUnO1xuICAgICAgICB0eXBlT3JMYW5ndWFnZVZhbHVlID0gJ0BpZCc7XG4gICAgICB9XG4gICAgICBjb250YWluZXJzLnB1c2goJ0BzZXQnKTtcbiAgICB9XG5cbiAgICAvLyBkbyB0ZXJtIHNlbGVjdGlvblxuICAgIGNvbnRhaW5lcnMucHVzaCgnQG5vbmUnKTtcbiAgICB2YXIgdGVybSA9IF9zZWxlY3RUZXJtKFxuICAgICAgYWN0aXZlQ3R4LCBpcmksIHZhbHVlLCBjb250YWluZXJzLCB0eXBlT3JMYW5ndWFnZSwgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSk7XG4gICAgaWYodGVybSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRlcm07XG4gICAgfVxuICB9XG5cbiAgLy8gbm8gdGVybSBtYXRjaCwgdXNlIEB2b2NhYiBpZiBhdmFpbGFibGVcbiAgaWYocmVsYXRpdmVUby52b2NhYikge1xuICAgIGlmKCdAdm9jYWInIGluIGFjdGl2ZUN0eCkge1xuICAgICAgLy8gZGV0ZXJtaW5lIGlmIHZvY2FiIGlzIGEgcHJlZml4IG9mIHRoZSBpcmlcbiAgICAgIHZhciB2b2NhYiA9IGFjdGl2ZUN0eFsnQHZvY2FiJ107XG4gICAgICBpZihpcmkuaW5kZXhPZih2b2NhYikgPT09IDAgJiYgaXJpICE9PSB2b2NhYikge1xuICAgICAgICAvLyB1c2Ugc3VmZml4IGFzIHJlbGF0aXZlIGlyaSBpZiBpdCBpcyBub3QgYSB0ZXJtIGluIHRoZSBhY3RpdmUgY29udGV4dFxuICAgICAgICB2YXIgc3VmZml4ID0gaXJpLnN1YnN0cih2b2NhYi5sZW5ndGgpO1xuICAgICAgICBpZighKHN1ZmZpeCBpbiBhY3RpdmVDdHgubWFwcGluZ3MpKSB7XG4gICAgICAgICAgcmV0dXJuIHN1ZmZpeDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vIHRlcm0gb3IgQHZvY2FiIG1hdGNoLCBjaGVjayBmb3IgcG9zc2libGUgQ1VSSUVzXG4gIHZhciBjaG9pY2UgPSBudWxsO1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIHBhcnRpYWxNYXRjaGVzID0gW107XG4gIHZhciBpcmlNYXAgPSBhY3RpdmVDdHguZmFzdEN1cmllTWFwO1xuICAvLyBjaGVjayBmb3IgcGFydGlhbCBtYXRjaGVzIG9mIGFnYWluc3QgYGlyaWAsIHdoaWNoIG1lYW5zIGxvb2sgdW50aWxcbiAgLy8gaXJpLmxlbmd0aCAtIDEsIG5vdCBmdWxsIGxlbmd0aFxuICB2YXIgbWF4UGFydGlhbExlbmd0aCA9IGlyaS5sZW5ndGggLSAxO1xuICBmb3IoOyBpZHggPCBtYXhQYXJ0aWFsTGVuZ3RoICYmIGlyaVtpZHhdIGluIGlyaU1hcDsgKytpZHgpIHtcbiAgICBpcmlNYXAgPSBpcmlNYXBbaXJpW2lkeF1dO1xuICAgIGlmKCcnIGluIGlyaU1hcCkge1xuICAgICAgcGFydGlhbE1hdGNoZXMucHVzaChpcmlNYXBbJyddWzBdKTtcbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgcGFydGlhbCBtYXRjaGVzIGluIHJldmVyc2Ugb3JkZXIgdG8gcHJlZmVyIGxvbmdlc3Qgb25lcyBmaXJzdFxuICBmb3IodmFyIGkgPSBwYXJ0aWFsTWF0Y2hlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIHZhciBlbnRyeSA9IHBhcnRpYWxNYXRjaGVzW2ldO1xuICAgIHZhciB0ZXJtcyA9IGVudHJ5LnRlcm1zO1xuICAgIGZvcih2YXIgdGkgPSAwOyB0aSA8IHRlcm1zLmxlbmd0aDsgKyt0aSkge1xuICAgICAgLy8gYSBDVVJJRSBpcyB1c2FibGUgaWY6XG4gICAgICAvLyAxLiBpdCBoYXMgbm8gbWFwcGluZywgT1JcbiAgICAgIC8vIDIuIHZhbHVlIGlzIG51bGwsIHdoaWNoIG1lYW5zIHdlJ3JlIG5vdCBjb21wYWN0aW5nIGFuIEB2YWx1ZSwgQU5EXG4gICAgICAvLyAgIHRoZSBtYXBwaW5nIG1hdGNoZXMgdGhlIElSSVxuICAgICAgdmFyIGN1cmllID0gdGVybXNbdGldICsgJzonICsgaXJpLnN1YnN0cihlbnRyeS5pcmkubGVuZ3RoKTtcbiAgICAgIHZhciBpc1VzYWJsZUN1cmllID0gKCEoY3VyaWUgaW4gYWN0aXZlQ3R4Lm1hcHBpbmdzKSB8fFxuICAgICAgICAodmFsdWUgPT09IG51bGwgJiYgYWN0aXZlQ3R4Lm1hcHBpbmdzW2N1cmllXVsnQGlkJ10gPT09IGlyaSkpO1xuXG4gICAgICAvLyBzZWxlY3QgY3VyaWUgaWYgaXQgaXMgc2hvcnRlciBvciB0aGUgc2FtZSBsZW5ndGggYnV0IGxleGljb2dyYXBoaWNhbGx5XG4gICAgICAvLyBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgY2hvaWNlXG4gICAgICBpZihpc1VzYWJsZUN1cmllICYmIChjaG9pY2UgPT09IG51bGwgfHxcbiAgICAgICAgX2NvbXBhcmVTaG9ydGVzdExlYXN0KGN1cmllLCBjaG9pY2UpIDwgMCkpIHtcbiAgICAgICAgY2hvaWNlID0gY3VyaWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcmV0dXJuIGNob3NlbiBjdXJpZVxuICBpZihjaG9pY2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gY2hvaWNlO1xuICB9XG5cbiAgLy8gY29tcGFjdCBJUkkgcmVsYXRpdmUgdG8gYmFzZVxuICBpZighcmVsYXRpdmVUby52b2NhYikge1xuICAgIHJldHVybiBfcmVtb3ZlQmFzZShhY3RpdmVDdHhbJ0BiYXNlJ10sIGlyaSk7XG4gIH1cblxuICAvLyByZXR1cm4gSVJJIGFzIGlzXG4gIHJldHVybiBpcmk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgdmFsdWUgY29tcGFjdGlvbiBvbiBhbiBvYmplY3Qgd2l0aCAnQHZhbHVlJyBvciAnQGlkJyBhcyB0aGUgb25seVxuICogcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgYWN0aXZlIGNvbnRleHQuXG4gKiBAcGFyYW0gYWN0aXZlUHJvcGVydHkgdGhlIGFjdGl2ZSBwcm9wZXJ0eSB0aGF0IHBvaW50cyB0byB0aGUgdmFsdWUuXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNvbXBhY3QuXG4gKlxuICogQHJldHVybiB0aGUgY29tcGFjdGlvbiByZXN1bHQuXG4gKi9cbmZ1bmN0aW9uIF9jb21wYWN0VmFsdWUoYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gdmFsdWUgaXMgYSBAdmFsdWVcbiAgaWYoX2lzVmFsdWUodmFsdWUpKSB7XG4gICAgLy8gZ2V0IGNvbnRleHQgcnVsZXNcbiAgICB2YXIgdHlwZSA9IGpzb25sZC5nZXRDb250ZXh0VmFsdWUoYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgJ0B0eXBlJyk7XG4gICAgdmFyIGxhbmd1YWdlID0ganNvbmxkLmdldENvbnRleHRWYWx1ZShcbiAgICAgIGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAbGFuZ3VhZ2UnKTtcbiAgICB2YXIgY29udGFpbmVyID0ganNvbmxkLmdldENvbnRleHRWYWx1ZShcbiAgICAgIGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksICdAY29udGFpbmVyJyk7XG5cbiAgICAvLyB3aGV0aGVyIG9yIG5vdCB0aGUgdmFsdWUgaGFzIGFuIEBpbmRleCB0aGF0IG11c3QgYmUgcHJlc2VydmVkXG4gICAgdmFyIHByZXNlcnZlSW5kZXggPSAoKCdAaW5kZXgnIGluIHZhbHVlKSAmJlxuICAgICAgY29udGFpbmVyICE9PSAnQGluZGV4Jyk7XG5cbiAgICAvLyBpZiB0aGVyZSdzIG5vIEBpbmRleCB0byBwcmVzZXJ2ZSAuLi5cbiAgICBpZighcHJlc2VydmVJbmRleCkge1xuICAgICAgLy8gbWF0Y2hpbmcgQHR5cGUgb3IgQGxhbmd1YWdlIHNwZWNpZmllZCBpbiBjb250ZXh0LCBjb21wYWN0IHZhbHVlXG4gICAgICBpZih2YWx1ZVsnQHR5cGUnXSA9PT0gdHlwZSB8fCB2YWx1ZVsnQGxhbmd1YWdlJ10gPT09IGxhbmd1YWdlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVsnQHZhbHVlJ107XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIGp1c3QgdGhlIHZhbHVlIG9mIEB2YWx1ZSBpZiBhbGwgYXJlIHRydWU6XG4gICAgLy8gMS4gQHZhbHVlIGlzIHRoZSBvbmx5IGtleSBvciBAaW5kZXggaXNuJ3QgYmVpbmcgcHJlc2VydmVkXG4gICAgLy8gMi4gdGhlcmUgaXMgbm8gZGVmYXVsdCBsYW5ndWFnZSBvciBAdmFsdWUgaXMgbm90IGEgc3RyaW5nIG9yXG4gICAgLy8gICB0aGUga2V5IGhhcyBhIG1hcHBpbmcgd2l0aCBhIG51bGwgQGxhbmd1YWdlXG4gICAgdmFyIGtleUNvdW50ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aDtcbiAgICB2YXIgaXNWYWx1ZU9ubHlLZXkgPSAoa2V5Q291bnQgPT09IDEgfHxcbiAgICAgIChrZXlDb3VudCA9PT0gMiAmJiAoJ0BpbmRleCcgaW4gdmFsdWUpICYmICFwcmVzZXJ2ZUluZGV4KSk7XG4gICAgdmFyIGhhc0RlZmF1bHRMYW5ndWFnZSA9ICgnQGxhbmd1YWdlJyBpbiBhY3RpdmVDdHgpO1xuICAgIHZhciBpc1ZhbHVlU3RyaW5nID0gX2lzU3RyaW5nKHZhbHVlWydAdmFsdWUnXSk7XG4gICAgdmFyIGhhc051bGxNYXBwaW5nID0gKGFjdGl2ZUN0eC5tYXBwaW5nc1thY3RpdmVQcm9wZXJ0eV0gJiZcbiAgICAgIGFjdGl2ZUN0eC5tYXBwaW5nc1thY3RpdmVQcm9wZXJ0eV1bJ0BsYW5ndWFnZSddID09PSBudWxsKTtcbiAgICBpZihpc1ZhbHVlT25seUtleSAmJlxuICAgICAgKCFoYXNEZWZhdWx0TGFuZ3VhZ2UgfHwgIWlzVmFsdWVTdHJpbmcgfHwgaGFzTnVsbE1hcHBpbmcpKSB7XG4gICAgICByZXR1cm4gdmFsdWVbJ0B2YWx1ZSddO1xuICAgIH1cblxuICAgIHZhciBydmFsID0ge307XG5cbiAgICAvLyBwcmVzZXJ2ZSBAaW5kZXhcbiAgICBpZihwcmVzZXJ2ZUluZGV4KSB7XG4gICAgICBydmFsW19jb21wYWN0SXJpKGFjdGl2ZUN0eCwgJ0BpbmRleCcpXSA9IHZhbHVlWydAaW5kZXgnXTtcbiAgICB9XG5cbiAgICBpZignQHR5cGUnIGluIHZhbHVlKSB7XG4gICAgICAvLyBjb21wYWN0IEB0eXBlIElSSVxuICAgICAgcnZhbFtfY29tcGFjdElyaShhY3RpdmVDdHgsICdAdHlwZScpXSA9IF9jb21wYWN0SXJpKFxuICAgICAgICBhY3RpdmVDdHgsIHZhbHVlWydAdHlwZSddLCBudWxsLCB7dm9jYWI6IHRydWV9KTtcbiAgICB9IGVsc2UgaWYoJ0BsYW5ndWFnZScgaW4gdmFsdWUpIHtcbiAgICAgIC8vIGFsaWFzIEBsYW5ndWFnZVxuICAgICAgcnZhbFtfY29tcGFjdElyaShhY3RpdmVDdHgsICdAbGFuZ3VhZ2UnKV0gPSB2YWx1ZVsnQGxhbmd1YWdlJ107XG4gICAgfVxuXG4gICAgLy8gYWxpYXMgQHZhbHVlXG4gICAgcnZhbFtfY29tcGFjdElyaShhY3RpdmVDdHgsICdAdmFsdWUnKV0gPSB2YWx1ZVsnQHZhbHVlJ107XG5cbiAgICByZXR1cm4gcnZhbDtcbiAgfVxuXG4gIC8vIHZhbHVlIGlzIGEgc3ViamVjdCByZWZlcmVuY2VcbiAgdmFyIGV4cGFuZGVkUHJvcGVydHkgPSBfZXhwYW5kSXJpKGFjdGl2ZUN0eCwgYWN0aXZlUHJvcGVydHksIHt2b2NhYjogdHJ1ZX0pO1xuICB2YXIgdHlwZSA9IGpzb25sZC5nZXRDb250ZXh0VmFsdWUoYWN0aXZlQ3R4LCBhY3RpdmVQcm9wZXJ0eSwgJ0B0eXBlJyk7XG4gIHZhciBjb21wYWN0ZWQgPSBfY29tcGFjdElyaShcbiAgICBhY3RpdmVDdHgsIHZhbHVlWydAaWQnXSwgbnVsbCwge3ZvY2FiOiB0eXBlID09PSAnQHZvY2FiJ30pO1xuXG4gIC8vIGNvbXBhY3QgdG8gc2NhbGFyXG4gIGlmKHR5cGUgPT09ICdAaWQnIHx8IHR5cGUgPT09ICdAdm9jYWInIHx8IGV4cGFuZGVkUHJvcGVydHkgPT09ICdAZ3JhcGgnKSB7XG4gICAgcmV0dXJuIGNvbXBhY3RlZDtcbiAgfVxuXG4gIHZhciBydmFsID0ge307XG4gIHJ2YWxbX2NvbXBhY3RJcmkoYWN0aXZlQ3R4LCAnQGlkJyldID0gY29tcGFjdGVkO1xuICByZXR1cm4gcnZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVybSBkZWZpbml0aW9uIGR1cmluZyBjb250ZXh0IHByb2Nlc3NpbmcuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgY3VycmVudCBhY3RpdmUgY29udGV4dC5cbiAqIEBwYXJhbSBsb2NhbEN0eCB0aGUgbG9jYWwgY29udGV4dCBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0gdGVybSB0aGUgdGVybSBpbiB0aGUgbG9jYWwgY29udGV4dCB0byBkZWZpbmUgdGhlIG1hcHBpbmcgZm9yLlxuICogQHBhcmFtIGRlZmluZWQgYSBtYXAgb2YgZGVmaW5pbmcvZGVmaW5lZCBrZXlzIHRvIGRldGVjdCBjeWNsZXMgYW5kIHByZXZlbnRcbiAqICAgICAgICAgIGRvdWJsZSBkZWZpbml0aW9ucy5cbiAqL1xuZnVuY3Rpb24gX2NyZWF0ZVRlcm1EZWZpbml0aW9uKGFjdGl2ZUN0eCwgbG9jYWxDdHgsIHRlcm0sIGRlZmluZWQpIHtcbiAgaWYodGVybSBpbiBkZWZpbmVkKSB7XG4gICAgLy8gdGVybSBhbHJlYWR5IGRlZmluZWRcbiAgICBpZihkZWZpbmVkW3Rlcm1dKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGN5Y2xlIGRldGVjdGVkXG4gICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgJ0N5Y2xpY2FsIGNvbnRleHQgZGVmaW5pdGlvbiBkZXRlY3RlZC4nLFxuICAgICAgJ2pzb25sZC5DeWNsaWNhbENvbnRleHQnLFxuICAgICAge2NvZGU6ICdjeWNsaWMgSVJJIG1hcHBpbmcnLCBjb250ZXh0OiBsb2NhbEN0eCwgdGVybTogdGVybX0pO1xuICB9XG5cbiAgLy8gbm93IGRlZmluaW5nIHRlcm1cbiAgZGVmaW5lZFt0ZXJtXSA9IGZhbHNlO1xuXG4gIGlmKF9pc0tleXdvcmQodGVybSkpIHtcbiAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsga2V5d29yZHMgY2Fubm90IGJlIG92ZXJyaWRkZW4uJyxcbiAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAge2NvZGU6ICdrZXl3b3JkIHJlZGVmaW5pdGlvbicsIGNvbnRleHQ6IGxvY2FsQ3R4LCB0ZXJtOiB0ZXJtfSk7XG4gIH1cblxuICBpZih0ZXJtID09PSAnJykge1xuICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhIHRlcm0gY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZy4nLFxuICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICB7Y29kZTogJ2ludmFsaWQgdGVybSBkZWZpbml0aW9uJywgY29udGV4dDogbG9jYWxDdHh9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBvbGQgbWFwcGluZ1xuICBpZihhY3RpdmVDdHgubWFwcGluZ3NbdGVybV0pIHtcbiAgICBkZWxldGUgYWN0aXZlQ3R4Lm1hcHBpbmdzW3Rlcm1dO1xuICB9XG5cbiAgLy8gZ2V0IGNvbnRleHQgdGVybSB2YWx1ZVxuICB2YXIgdmFsdWUgPSBsb2NhbEN0eFt0ZXJtXTtcblxuICAvLyBjbGVhciBjb250ZXh0IGVudHJ5XG4gIGlmKHZhbHVlID09PSBudWxsIHx8IChfaXNPYmplY3QodmFsdWUpICYmIHZhbHVlWydAaWQnXSA9PT0gbnVsbCkpIHtcbiAgICBhY3RpdmVDdHgubWFwcGluZ3NbdGVybV0gPSBudWxsO1xuICAgIGRlZmluZWRbdGVybV0gPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNvbnZlcnQgc2hvcnQtaGFuZCB2YWx1ZSB0byBvYmplY3Qgdy9AaWRcbiAgaWYoX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhbHVlID0geydAaWQnOiB2YWx1ZX07XG4gIH1cblxuICBpZighX2lzT2JqZWN0KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBAY29udGV4dCBwcm9wZXJ0eSB2YWx1ZXMgbXVzdCBiZSAnICtcbiAgICAgICdzdHJpbmdzIG9yIG9iamVjdHMuJyxcbiAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAge2NvZGU6ICdpbnZhbGlkIHRlcm0gZGVmaW5pdGlvbicsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gIH1cblxuICAvLyBjcmVhdGUgbmV3IG1hcHBpbmdcbiAgdmFyIG1hcHBpbmcgPSBhY3RpdmVDdHgubWFwcGluZ3NbdGVybV0gPSB7fTtcbiAgbWFwcGluZy5yZXZlcnNlID0gZmFsc2U7XG5cbiAgaWYoJ0ByZXZlcnNlJyBpbiB2YWx1ZSkge1xuICAgIGlmKCdAaWQnIGluIHZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhIEByZXZlcnNlIHRlcm0gZGVmaW5pdGlvbiBtdXN0IG5vdCAnICtcbiAgICAgICAgJ2NvbnRhaW4gQGlkLicsICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICB7Y29kZTogJ2ludmFsaWQgcmV2ZXJzZSBwcm9wZXJ0eScsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gICAgfVxuICAgIHZhciByZXZlcnNlID0gdmFsdWVbJ0ByZXZlcnNlJ107XG4gICAgaWYoIV9pc1N0cmluZyhyZXZlcnNlKSkge1xuICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgYSBAY29udGV4dCBAcmV2ZXJzZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLicsXG4gICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLCB7Y29kZTogJ2ludmFsaWQgSVJJIG1hcHBpbmcnLCBjb250ZXh0OiBsb2NhbEN0eH0pO1xuICAgIH1cblxuICAgIC8vIGV4cGFuZCBhbmQgYWRkIEBpZCBtYXBwaW5nXG4gICAgdmFyIGlkID0gX2V4cGFuZElyaShcbiAgICAgIGFjdGl2ZUN0eCwgcmV2ZXJzZSwge3ZvY2FiOiB0cnVlLCBiYXNlOiBmYWxzZX0sIGxvY2FsQ3R4LCBkZWZpbmVkKTtcbiAgICBpZighX2lzQWJzb2x1dGVJcmkoaWQpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhIEBjb250ZXh0IEByZXZlcnNlIHZhbHVlIG11c3QgYmUgYW4gJyArXG4gICAgICAgICdhYnNvbHV0ZSBJUkkgb3IgYSBibGFuayBub2RlIGlkZW50aWZpZXIuJyxcbiAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsIHtjb2RlOiAnaW52YWxpZCBJUkkgbWFwcGluZycsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gICAgfVxuICAgIG1hcHBpbmdbJ0BpZCddID0gaWQ7XG4gICAgbWFwcGluZy5yZXZlcnNlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmKCdAaWQnIGluIHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdmFsdWVbJ0BpZCddO1xuICAgIGlmKCFfaXNTdHJpbmcoaWQpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhIEBjb250ZXh0IEBpZCB2YWx1ZSBtdXN0IGJlIGFuIGFycmF5ICcgK1xuICAgICAgICAnb2Ygc3RyaW5ncyBvciBhIHN0cmluZy4nLFxuICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJywge2NvZGU6ICdpbnZhbGlkIElSSSBtYXBwaW5nJywgY29udGV4dDogbG9jYWxDdHh9KTtcbiAgICB9XG4gICAgaWYoaWQgIT09IHRlcm0pIHtcbiAgICAgIC8vIGV4cGFuZCBhbmQgYWRkIEBpZCBtYXBwaW5nXG4gICAgICBpZCA9IF9leHBhbmRJcmkoXG4gICAgICAgIGFjdGl2ZUN0eCwgaWQsIHt2b2NhYjogdHJ1ZSwgYmFzZTogZmFsc2V9LCBsb2NhbEN0eCwgZGVmaW5lZCk7XG4gICAgICBpZighX2lzQWJzb2x1dGVJcmkoaWQpICYmICFfaXNLZXl3b3JkKGlkKSkge1xuICAgICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IGEgQGNvbnRleHQgQGlkIHZhbHVlIG11c3QgYmUgYW4gJyArXG4gICAgICAgICAgJ2Fic29sdXRlIElSSSwgYSBibGFuayBub2RlIGlkZW50aWZpZXIsIG9yIGEga2V5d29yZC4nLFxuICAgICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICAgIHtjb2RlOiAnaW52YWxpZCBJUkkgbWFwcGluZycsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gICAgICB9XG4gICAgICBtYXBwaW5nWydAaWQnXSA9IGlkO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFsd2F5cyBjb21wdXRlIHdoZXRoZXIgdGVybSBoYXMgYSBjb2xvbiBhcyBhbiBvcHRpbWl6YXRpb24gZm9yXG4gIC8vIF9jb21wYWN0SXJpXG4gIHZhciBjb2xvbiA9IHRlcm0uaW5kZXhPZignOicpO1xuICBtYXBwaW5nLl90ZXJtSGFzQ29sb24gPSAoY29sb24gIT09IC0xKTtcblxuICBpZighKCdAaWQnIGluIG1hcHBpbmcpKSB7XG4gICAgLy8gc2VlIGlmIHRoZSB0ZXJtIGhhcyBhIHByZWZpeFxuICAgIGlmKG1hcHBpbmcuX3Rlcm1IYXNDb2xvbikge1xuICAgICAgdmFyIHByZWZpeCA9IHRlcm0uc3Vic3RyKDAsIGNvbG9uKTtcbiAgICAgIGlmKHByZWZpeCBpbiBsb2NhbEN0eCkge1xuICAgICAgICAvLyBkZWZpbmUgcGFyZW50IHByZWZpeFxuICAgICAgICBfY3JlYXRlVGVybURlZmluaXRpb24oYWN0aXZlQ3R4LCBsb2NhbEN0eCwgcHJlZml4LCBkZWZpbmVkKTtcbiAgICAgIH1cblxuICAgICAgaWYoYWN0aXZlQ3R4Lm1hcHBpbmdzW3ByZWZpeF0pIHtcbiAgICAgICAgLy8gc2V0IEBpZCBiYXNlZCBvbiBwcmVmaXggcGFyZW50XG4gICAgICAgIHZhciBzdWZmaXggPSB0ZXJtLnN1YnN0cihjb2xvbiArIDEpO1xuICAgICAgICBtYXBwaW5nWydAaWQnXSA9IGFjdGl2ZUN0eC5tYXBwaW5nc1twcmVmaXhdWydAaWQnXSArIHN1ZmZpeDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRlcm0gaXMgYW4gYWJzb2x1dGUgSVJJXG4gICAgICAgIG1hcHBpbmdbJ0BpZCddID0gdGVybTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm9uLUlSSXMgKm11c3QqIGRlZmluZSBAaWRzIGlmIEB2b2NhYiBpcyBub3QgYXZhaWxhYmxlXG4gICAgICBpZighKCdAdm9jYWInIGluIGFjdGl2ZUN0eCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBAY29udGV4dCB0ZXJtcyBtdXN0IGRlZmluZSBhbiBAaWQuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAgICB7Y29kZTogJ2ludmFsaWQgSVJJIG1hcHBpbmcnLCBjb250ZXh0OiBsb2NhbEN0eCwgdGVybTogdGVybX0pO1xuICAgICAgfVxuICAgICAgLy8gcHJlcGVuZCB2b2NhYiB0byB0ZXJtXG4gICAgICBtYXBwaW5nWydAaWQnXSA9IGFjdGl2ZUN0eFsnQHZvY2FiJ10gKyB0ZXJtO1xuICAgIH1cbiAgfVxuXG4gIC8vIElSSSBtYXBwaW5nIG5vdyBkZWZpbmVkXG4gIGRlZmluZWRbdGVybV0gPSB0cnVlO1xuXG4gIGlmKCdAdHlwZScgaW4gdmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IHZhbHVlWydAdHlwZSddO1xuICAgIGlmKCFfaXNTdHJpbmcodHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IGFuIEBjb250ZXh0IEB0eXBlIHZhbHVlcyBtdXN0IGJlIGEgc3RyaW5nLicsXG4gICAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLFxuICAgICAgICB7Y29kZTogJ2ludmFsaWQgdHlwZSBtYXBwaW5nJywgY29udGV4dDogbG9jYWxDdHh9KTtcbiAgICB9XG5cbiAgICBpZih0eXBlICE9PSAnQGlkJyAmJiB0eXBlICE9PSAnQHZvY2FiJykge1xuICAgICAgLy8gZXhwYW5kIEB0eXBlIHRvIGZ1bGwgSVJJXG4gICAgICB0eXBlID0gX2V4cGFuZElyaShcbiAgICAgICAgYWN0aXZlQ3R4LCB0eXBlLCB7dm9jYWI6IHRydWUsIGJhc2U6IGZhbHNlfSwgbG9jYWxDdHgsIGRlZmluZWQpO1xuICAgICAgaWYoIV9pc0Fic29sdXRlSXJpKHR5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgYW4gQGNvbnRleHQgQHR5cGUgdmFsdWUgbXVzdCBiZSBhbiAnICtcbiAgICAgICAgICAnYWJzb2x1dGUgSVJJLicsXG4gICAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgICAge2NvZGU6ICdpbnZhbGlkIHR5cGUgbWFwcGluZycsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gICAgICB9XG4gICAgICBpZih0eXBlLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBhbiBAY29udGV4dCBAdHlwZSB2YWx1ZXMgbXVzdCBiZSBhbiBJUkksICcgK1xuICAgICAgICAgICdub3QgYSBibGFuayBub2RlIGlkZW50aWZpZXIuJyxcbiAgICAgICAgICAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAgICB7Y29kZTogJ2ludmFsaWQgdHlwZSBtYXBwaW5nJywgY29udGV4dDogbG9jYWxDdHh9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhZGQgQHR5cGUgdG8gbWFwcGluZ1xuICAgIG1hcHBpbmdbJ0B0eXBlJ10gPSB0eXBlO1xuICB9XG5cbiAgaWYoJ0Bjb250YWluZXInIGluIHZhbHVlKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IHZhbHVlWydAY29udGFpbmVyJ107XG4gICAgaWYoY29udGFpbmVyICE9PSAnQGxpc3QnICYmIGNvbnRhaW5lciAhPT0gJ0BzZXQnICYmXG4gICAgICBjb250YWluZXIgIT09ICdAaW5kZXgnICYmIGNvbnRhaW5lciAhPT0gJ0BsYW5ndWFnZScpIHtcbiAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IEBjb250ZXh0IEBjb250YWluZXIgdmFsdWUgbXVzdCBiZSAnICtcbiAgICAgICAgJ29uZSBvZiB0aGUgZm9sbG93aW5nOiBAbGlzdCwgQHNldCwgQGluZGV4LCBvciBAbGFuZ3VhZ2UuJyxcbiAgICAgICAgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgIHtjb2RlOiAnaW52YWxpZCBjb250YWluZXIgbWFwcGluZycsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gICAgfVxuICAgIGlmKG1hcHBpbmcucmV2ZXJzZSAmJiBjb250YWluZXIgIT09ICdAaW5kZXgnICYmIGNvbnRhaW5lciAhPT0gJ0BzZXQnICYmXG4gICAgICBjb250YWluZXIgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IEBjb250ZXh0IEBjb250YWluZXIgdmFsdWUgZm9yIGEgQHJldmVyc2UgJyArXG4gICAgICAgICd0eXBlIGRlZmluaXRpb24gbXVzdCBiZSBAaW5kZXggb3IgQHNldC4nLCAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgICAge2NvZGU6ICdpbnZhbGlkIHJldmVyc2UgcHJvcGVydHknLCBjb250ZXh0OiBsb2NhbEN0eH0pO1xuICAgIH1cblxuICAgIC8vIGFkZCBAY29udGFpbmVyIHRvIG1hcHBpbmdcbiAgICBtYXBwaW5nWydAY29udGFpbmVyJ10gPSBjb250YWluZXI7XG4gIH1cblxuICBpZignQGxhbmd1YWdlJyBpbiB2YWx1ZSAmJiAhKCdAdHlwZScgaW4gdmFsdWUpKSB7XG4gICAgdmFyIGxhbmd1YWdlID0gdmFsdWVbJ0BsYW5ndWFnZSddO1xuICAgIGlmKGxhbmd1YWdlICE9PSBudWxsICYmICFfaXNTdHJpbmcobGFuZ3VhZ2UpKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIEpTT04tTEQgc3ludGF4OyBAY29udGV4dCBAbGFuZ3VhZ2UgdmFsdWUgbXVzdCBiZSAnICtcbiAgICAgICAgJ2Egc3RyaW5nIG9yIG51bGwuJywgJ2pzb25sZC5TeW50YXhFcnJvcicsXG4gICAgICAgIHtjb2RlOiAnaW52YWxpZCBsYW5ndWFnZSBtYXBwaW5nJywgY29udGV4dDogbG9jYWxDdHh9KTtcbiAgICB9XG5cbiAgICAvLyBhZGQgQGxhbmd1YWdlIHRvIG1hcHBpbmdcbiAgICBpZihsYW5ndWFnZSAhPT0gbnVsbCkge1xuICAgICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBtYXBwaW5nWydAbGFuZ3VhZ2UnXSA9IGxhbmd1YWdlO1xuICB9XG5cbiAgLy8gZGlzYWxsb3cgYWxpYXNpbmcgQGNvbnRleHQgYW5kIEBwcmVzZXJ2ZVxuICB2YXIgaWQgPSBtYXBwaW5nWydAaWQnXTtcbiAgaWYoaWQgPT09ICdAY29udGV4dCcgfHwgaWQgPT09ICdAcHJlc2VydmUnKSB7XG4gICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgJ0ludmFsaWQgSlNPTi1MRCBzeW50YXg7IEBjb250ZXh0IGFuZCBAcHJlc2VydmUgY2Fubm90IGJlIGFsaWFzZWQuJyxcbiAgICAgICdqc29ubGQuU3ludGF4RXJyb3InLCB7Y29kZTogJ2ludmFsaWQga2V5d29yZCBhbGlhcycsIGNvbnRleHQ6IGxvY2FsQ3R4fSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBhbmRzIGEgc3RyaW5nIHRvIGEgZnVsbCBJUkkuIFRoZSBzdHJpbmcgbWF5IGJlIGEgdGVybSwgYSBwcmVmaXgsIGFcbiAqIHJlbGF0aXZlIElSSSwgb3IgYW4gYWJzb2x1dGUgSVJJLiBUaGUgYXNzb2NpYXRlZCBhYnNvbHV0ZSBJUkkgd2lsbCBiZVxuICogcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIGFjdGl2ZUN0eCB0aGUgY3VycmVudCBhY3RpdmUgY29udGV4dC5cbiAqIEBwYXJhbSB2YWx1ZSB0aGUgc3RyaW5nIHRvIGV4cGFuZC5cbiAqIEBwYXJhbSByZWxhdGl2ZVRvIG9wdGlvbnMgZm9yIGhvdyB0byByZXNvbHZlIHJlbGF0aXZlIElSSXM6XG4gKiAgICAgICAgICBiYXNlOiB0cnVlIHRvIHJlc29sdmUgYWdhaW5zdCB0aGUgYmFzZSBJUkksIGZhbHNlIG5vdCB0by5cbiAqICAgICAgICAgIHZvY2FiOiB0cnVlIHRvIGNvbmNhdGVuYXRlIGFmdGVyIEB2b2NhYiwgZmFsc2Ugbm90IHRvLlxuICogQHBhcmFtIGxvY2FsQ3R4IHRoZSBsb2NhbCBjb250ZXh0IGJlaW5nIHByb2Nlc3NlZCAob25seSBnaXZlbiBpZiBjYWxsZWRcbiAqICAgICAgICAgIGR1cmluZyBjb250ZXh0IHByb2Nlc3NpbmcpLlxuICogQHBhcmFtIGRlZmluZWQgYSBtYXAgZm9yIHRyYWNraW5nIGN5Y2xlcyBpbiBjb250ZXh0IGRlZmluaXRpb25zIChvbmx5IGdpdmVuXG4gKiAgICAgICAgICBpZiBjYWxsZWQgZHVyaW5nIGNvbnRleHQgcHJvY2Vzc2luZykuXG4gKlxuICogQHJldHVybiB0aGUgZXhwYW5kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIF9leHBhbmRJcmkoYWN0aXZlQ3R4LCB2YWx1ZSwgcmVsYXRpdmVUbywgbG9jYWxDdHgsIGRlZmluZWQpIHtcbiAgLy8gYWxyZWFkeSBleHBhbmRlZFxuICBpZih2YWx1ZSA9PT0gbnVsbCB8fCBfaXNLZXl3b3JkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIGVuc3VyZSB2YWx1ZSBpcyBpbnRlcnByZXRlZCBhcyBhIHN0cmluZ1xuICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cbiAgLy8gZGVmaW5lIHRlcm0gZGVwZW5kZW5jeSBpZiBub3QgZGVmaW5lZFxuICBpZihsb2NhbEN0eCAmJiB2YWx1ZSBpbiBsb2NhbEN0eCAmJiBkZWZpbmVkW3ZhbHVlXSAhPT0gdHJ1ZSkge1xuICAgIF9jcmVhdGVUZXJtRGVmaW5pdGlvbihhY3RpdmVDdHgsIGxvY2FsQ3R4LCB2YWx1ZSwgZGVmaW5lZCk7XG4gIH1cblxuICByZWxhdGl2ZVRvID0gcmVsYXRpdmVUbyB8fCB7fTtcbiAgaWYocmVsYXRpdmVUby52b2NhYikge1xuICAgIHZhciBtYXBwaW5nID0gYWN0aXZlQ3R4Lm1hcHBpbmdzW3ZhbHVlXTtcblxuICAgIC8vIHZhbHVlIGlzIGV4cGxpY2l0bHkgaWdub3JlZCB3aXRoIGEgbnVsbCBtYXBwaW5nXG4gICAgaWYobWFwcGluZyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYobWFwcGluZykge1xuICAgICAgLy8gdmFsdWUgaXMgYSB0ZXJtXG4gICAgICByZXR1cm4gbWFwcGluZ1snQGlkJ107XG4gICAgfVxuICB9XG5cbiAgLy8gc3BsaXQgdmFsdWUgaW50byBwcmVmaXg6c3VmZml4XG4gIHZhciBjb2xvbiA9IHZhbHVlLmluZGV4T2YoJzonKTtcbiAgaWYoY29sb24gIT09IC0xKSB7XG4gICAgdmFyIHByZWZpeCA9IHZhbHVlLnN1YnN0cigwLCBjb2xvbik7XG4gICAgdmFyIHN1ZmZpeCA9IHZhbHVlLnN1YnN0cihjb2xvbiArIDEpO1xuXG4gICAgLy8gZG8gbm90IGV4cGFuZCBibGFuayBub2RlcyAocHJlZml4IG9mICdfJykgb3IgYWxyZWFkeS1hYnNvbHV0ZVxuICAgIC8vIElSSXMgKHN1ZmZpeCBvZiAnLy8nKVxuICAgIGlmKHByZWZpeCA9PT0gJ18nIHx8IHN1ZmZpeC5pbmRleE9mKCcvLycpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gcHJlZml4IGRlcGVuZGVuY3kgbm90IGRlZmluZWQsIGRlZmluZSBpdFxuICAgIGlmKGxvY2FsQ3R4ICYmIHByZWZpeCBpbiBsb2NhbEN0eCkge1xuICAgICAgX2NyZWF0ZVRlcm1EZWZpbml0aW9uKGFjdGl2ZUN0eCwgbG9jYWxDdHgsIHByZWZpeCwgZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgLy8gdXNlIG1hcHBpbmcgaWYgcHJlZml4IGlzIGRlZmluZWRcbiAgICB2YXIgbWFwcGluZyA9IGFjdGl2ZUN0eC5tYXBwaW5nc1twcmVmaXhdO1xuICAgIGlmKG1hcHBpbmcpIHtcbiAgICAgIHJldHVybiBtYXBwaW5nWydAaWQnXSArIHN1ZmZpeDtcbiAgICB9XG5cbiAgICAvLyBhbHJlYWR5IGFic29sdXRlIElSSVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIHByZXBlbmQgdm9jYWJcbiAgaWYocmVsYXRpdmVUby52b2NhYiAmJiAnQHZvY2FiJyBpbiBhY3RpdmVDdHgpIHtcbiAgICByZXR1cm4gYWN0aXZlQ3R4WydAdm9jYWInXSArIHZhbHVlO1xuICB9XG5cbiAgLy8gcHJlcGVuZCBiYXNlXG4gIHZhciBydmFsID0gdmFsdWU7XG4gIGlmKHJlbGF0aXZlVG8uYmFzZSkge1xuICAgIHJ2YWwgPSBqc29ubGQucHJlcGVuZEJhc2UoYWN0aXZlQ3R4WydAYmFzZSddLCBydmFsKTtcbiAgfVxuXG4gIHJldHVybiBydmFsO1xufVxuXG5mdW5jdGlvbiBfcHJlcGVuZEJhc2UoYmFzZSwgaXJpKSB7XG4gIC8vIHNraXAgSVJJIHByb2Nlc3NpbmdcbiAgaWYoYmFzZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBpcmk7XG4gIH1cbiAgLy8gYWxyZWFkeSBhbiBhYnNvbHV0ZSBJUklcbiAgaWYoaXJpLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gaXJpO1xuICB9XG5cbiAgLy8gcGFyc2UgYmFzZSBpZiBpdCBpcyBhIHN0cmluZ1xuICBpZihfaXNTdHJpbmcoYmFzZSkpIHtcbiAgICBiYXNlID0ganNvbmxkLnVybC5wYXJzZShiYXNlIHx8ICcnKTtcbiAgfVxuXG4gIC8vIHBhcnNlIGdpdmVuIElSSVxuICB2YXIgcmVsID0ganNvbmxkLnVybC5wYXJzZShpcmkpO1xuXG4gIC8vIHBlciBSRkMzOTg2IDUuMi4yXG4gIHZhciB0cmFuc2Zvcm0gPSB7XG4gICAgcHJvdG9jb2w6IGJhc2UucHJvdG9jb2wgfHwgJydcbiAgfTtcblxuICBpZihyZWwuYXV0aG9yaXR5ICE9PSBudWxsKSB7XG4gICAgdHJhbnNmb3JtLmF1dGhvcml0eSA9IHJlbC5hdXRob3JpdHk7XG4gICAgdHJhbnNmb3JtLnBhdGggPSByZWwucGF0aDtcbiAgICB0cmFuc2Zvcm0ucXVlcnkgPSByZWwucXVlcnk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtLmF1dGhvcml0eSA9IGJhc2UuYXV0aG9yaXR5O1xuXG4gICAgaWYocmVsLnBhdGggPT09ICcnKSB7XG4gICAgICB0cmFuc2Zvcm0ucGF0aCA9IGJhc2UucGF0aDtcbiAgICAgIGlmKHJlbC5xdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICB0cmFuc2Zvcm0ucXVlcnkgPSByZWwucXVlcnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2Zvcm0ucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZihyZWwucGF0aC5pbmRleE9mKCcvJykgPT09IDApIHtcbiAgICAgICAgLy8gSVJJIHJlcHJlc2VudHMgYW4gYWJzb2x1dGUgcGF0aFxuICAgICAgICB0cmFuc2Zvcm0ucGF0aCA9IHJlbC5wYXRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbWVyZ2UgcGF0aHNcbiAgICAgICAgdmFyIHBhdGggPSBiYXNlLnBhdGg7XG5cbiAgICAgICAgLy8gYXBwZW5kIHJlbGF0aXZlIHBhdGggdG8gdGhlIGVuZCBvZiB0aGUgbGFzdCBkaXJlY3RvcnkgZnJvbSBiYXNlXG4gICAgICAgIGlmKHJlbC5wYXRoICE9PSAnJykge1xuICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBwYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgICAgICBpZihwYXRoLmxlbmd0aCA+IDAgJiYgcGF0aC5zdWJzdHIoLTEpICE9PSAnLycpIHtcbiAgICAgICAgICAgIHBhdGggKz0gJy8nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXRoICs9IHJlbC5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNmb3JtLnBhdGggPSBwYXRoO1xuICAgICAgfVxuICAgICAgdHJhbnNmb3JtLnF1ZXJ5ID0gcmVsLnF1ZXJ5O1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlbW92ZSBzbGFzaGVzIGFuZCBkb3RzIGluIHBhdGhcbiAgdHJhbnNmb3JtLnBhdGggPSBfcmVtb3ZlRG90U2VnbWVudHModHJhbnNmb3JtLnBhdGgsICEhdHJhbnNmb3JtLmF1dGhvcml0eSk7XG5cbiAgLy8gY29uc3RydWN0IFVSTFxuICB2YXIgcnZhbCA9IHRyYW5zZm9ybS5wcm90b2NvbDtcbiAgaWYodHJhbnNmb3JtLmF1dGhvcml0eSAhPT0gbnVsbCkge1xuICAgIHJ2YWwgKz0gJy8vJyArIHRyYW5zZm9ybS5hdXRob3JpdHk7XG4gIH1cbiAgcnZhbCArPSB0cmFuc2Zvcm0ucGF0aDtcbiAgaWYodHJhbnNmb3JtLnF1ZXJ5ICE9PSBudWxsKSB7XG4gICAgcnZhbCArPSAnPycgKyB0cmFuc2Zvcm0ucXVlcnk7XG4gIH1cbiAgaWYocmVsLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgcnZhbCArPSAnIycgKyByZWwuZnJhZ21lbnQ7XG4gIH1cblxuICAvLyBoYW5kbGUgZW1wdHkgYmFzZVxuICBpZihydmFsID09PSAnJykge1xuICAgIHJ2YWwgPSAnLi8nO1xuICB9XG5cbiAgcmV0dXJuIHJ2YWw7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhIGJhc2UgSVJJIGZyb20gdGhlIGdpdmVuIGFic29sdXRlIElSSS5cbiAqXG4gKiBAcGFyYW0gYmFzZSB0aGUgYmFzZSBJUkkuXG4gKiBAcGFyYW0gaXJpIHRoZSBhYnNvbHV0ZSBJUkkuXG4gKlxuICogQHJldHVybiB0aGUgcmVsYXRpdmUgSVJJIGlmIHJlbGF0aXZlIHRvIGJhc2UsIG90aGVyd2lzZSB0aGUgYWJzb2x1dGUgSVJJLlxuICovXG5mdW5jdGlvbiBfcmVtb3ZlQmFzZShiYXNlLCBpcmkpIHtcbiAgLy8gc2tpcCBJUkkgcHJvY2Vzc2luZ1xuICBpZihiYXNlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGlyaTtcbiAgfVxuXG4gIGlmKF9pc1N0cmluZyhiYXNlKSkge1xuICAgIGJhc2UgPSBqc29ubGQudXJsLnBhcnNlKGJhc2UgfHwgJycpO1xuICB9XG5cbiAgLy8gZXN0YWJsaXNoIGJhc2Ugcm9vdFxuICB2YXIgcm9vdCA9ICcnO1xuICBpZihiYXNlLmhyZWYgIT09ICcnKSB7XG4gICAgcm9vdCArPSAoYmFzZS5wcm90b2NvbCB8fCAnJykgKyAnLy8nICsgKGJhc2UuYXV0aG9yaXR5IHx8ICcnKTtcbiAgfSBlbHNlIGlmKGlyaS5pbmRleE9mKCcvLycpKSB7XG4gICAgLy8gc3VwcG9ydCBuZXR3b3JrLXBhdGggcmVmZXJlbmNlIHdpdGggZW1wdHkgYmFzZVxuICAgIHJvb3QgKz0gJy8vJztcbiAgfVxuXG4gIC8vIElSSSBub3QgcmVsYXRpdmUgdG8gYmFzZVxuICBpZihpcmkuaW5kZXhPZihyb290KSAhPT0gMCkge1xuICAgIHJldHVybiBpcmk7XG4gIH1cblxuICAvLyByZW1vdmUgcm9vdCBmcm9tIElSSSBhbmQgcGFyc2UgcmVtYWluZGVyXG4gIHZhciByZWwgPSBqc29ubGQudXJsLnBhcnNlKGlyaS5zdWJzdHIocm9vdC5sZW5ndGgpKTtcblxuICAvLyByZW1vdmUgcGF0aCBzZWdtZW50cyB0aGF0IG1hdGNoIChkbyBub3QgcmVtb3ZlIGxhc3Qgc2VnbWVudCB1bmxlc3MgdGhlcmVcbiAgLy8gaXMgYSBoYXNoIG9yIHF1ZXJ5KVxuICB2YXIgYmFzZVNlZ21lbnRzID0gYmFzZS5ub3JtYWxpemVkUGF0aC5zcGxpdCgnLycpO1xuICB2YXIgaXJpU2VnbWVudHMgPSByZWwubm9ybWFsaXplZFBhdGguc3BsaXQoJy8nKTtcbiAgdmFyIGxhc3QgPSAocmVsLmZyYWdtZW50IHx8IHJlbC5xdWVyeSkgPyAwIDogMTtcbiAgd2hpbGUoYmFzZVNlZ21lbnRzLmxlbmd0aCA+IDAgJiYgaXJpU2VnbWVudHMubGVuZ3RoID4gbGFzdCkge1xuICAgIGlmKGJhc2VTZWdtZW50c1swXSAhPT0gaXJpU2VnbWVudHNbMF0pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBiYXNlU2VnbWVudHMuc2hpZnQoKTtcbiAgICBpcmlTZWdtZW50cy5zaGlmdCgpO1xuICB9XG5cbiAgLy8gdXNlICcuLi8nIGZvciBlYWNoIG5vbi1tYXRjaGluZyBiYXNlIHNlZ21lbnRcbiAgdmFyIHJ2YWwgPSAnJztcbiAgaWYoYmFzZVNlZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAvLyBkb24ndCBjb3VudCB0aGUgbGFzdCBzZWdtZW50IChpZiBpdCBlbmRzIHdpdGggJy8nIGxhc3QgcGF0aCBkb2Vzbid0XG4gICAgLy8gY291bnQgYW5kIGlmIGl0IGRvZXNuJ3QgZW5kIHdpdGggJy8nIGl0IGlzbid0IGEgcGF0aClcbiAgICBiYXNlU2VnbWVudHMucG9wKCk7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGJhc2VTZWdtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgcnZhbCArPSAnLi4vJztcbiAgICB9XG4gIH1cblxuICAvLyBwcmVwZW5kIHJlbWFpbmluZyBzZWdtZW50c1xuICBydmFsICs9IGlyaVNlZ21lbnRzLmpvaW4oJy8nKTtcblxuICAvLyBhZGQgcXVlcnkgYW5kIGhhc2hcbiAgaWYocmVsLnF1ZXJ5ICE9PSBudWxsKSB7XG4gICAgcnZhbCArPSAnPycgKyByZWwucXVlcnk7XG4gIH1cbiAgaWYocmVsLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgcnZhbCArPSAnIycgKyByZWwuZnJhZ21lbnQ7XG4gIH1cblxuICAvLyBoYW5kbGUgZW1wdHkgYmFzZVxuICBpZihydmFsID09PSAnJykge1xuICAgIHJ2YWwgPSAnLi8nO1xuICB9XG5cbiAgcmV0dXJuIHJ2YWw7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5pdGlhbCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAqICAgICAgICAgIFtiYXNlXSB0aGUgZG9jdW1lbnQgYmFzZSBJUkkuXG4gKlxuICogQHJldHVybiB0aGUgaW5pdGlhbCBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBfZ2V0SW5pdGlhbENvbnRleHQob3B0aW9ucykge1xuICB2YXIgYmFzZSA9IGpzb25sZC51cmwucGFyc2Uob3B0aW9ucy5iYXNlIHx8ICcnKTtcbiAgcmV0dXJuIHtcbiAgICAnQGJhc2UnOiBiYXNlLFxuICAgIG1hcHBpbmdzOiB7fSxcbiAgICBpbnZlcnNlOiBudWxsLFxuICAgIGdldEludmVyc2U6IF9jcmVhdGVJbnZlcnNlQ29udGV4dCxcbiAgICBjbG9uZTogX2Nsb25lQWN0aXZlQ29udGV4dFxuICB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gaW52ZXJzZSBjb250ZXh0IGZvciB1c2UgaW4gdGhlIGNvbXBhY3Rpb24gYWxnb3JpdGhtLCBpZlxuICAgKiBub3QgYWxyZWFkeSBnZW5lcmF0ZWQgZm9yIHRoZSBnaXZlbiBhY3RpdmUgY29udGV4dC5cbiAgICpcbiAgICogQHJldHVybiB0aGUgaW52ZXJzZSBjb250ZXh0LlxuICAgKi9cbiAgZnVuY3Rpb24gX2NyZWF0ZUludmVyc2VDb250ZXh0KCkge1xuICAgIHZhciBhY3RpdmVDdHggPSB0aGlzO1xuXG4gICAgLy8gbGF6aWx5IGNyZWF0ZSBpbnZlcnNlXG4gICAgaWYoYWN0aXZlQ3R4LmludmVyc2UpIHtcbiAgICAgIHJldHVybiBhY3RpdmVDdHguaW52ZXJzZTtcbiAgICB9XG4gICAgdmFyIGludmVyc2UgPSBhY3RpdmVDdHguaW52ZXJzZSA9IHt9O1xuXG4gICAgLy8gdmFyaWFibGVzIGZvciBidWlsZGluZyBmYXN0IENVUklFIG1hcFxuICAgIHZhciBmYXN0Q3VyaWVNYXAgPSBhY3RpdmVDdHguZmFzdEN1cmllTWFwID0ge307XG4gICAgdmFyIGlyaXNUb1Rlcm1zID0ge307XG5cbiAgICAvLyBoYW5kbGUgZGVmYXVsdCBsYW5ndWFnZVxuICAgIHZhciBkZWZhdWx0TGFuZ3VhZ2UgPSBhY3RpdmVDdHhbJ0BsYW5ndWFnZSddIHx8ICdAbm9uZSc7XG5cbiAgICAvLyBjcmVhdGUgdGVybSBzZWxlY3Rpb25zIGZvciBlYWNoIG1hcHBpbmcgaW4gdGhlIGNvbnRleHQsIG9yZGVyZWQgYnlcbiAgICAvLyBzaG9ydGVzdCBhbmQgdGhlbiBsZXhpY29ncmFwaGljYWxseSBsZWFzdFxuICAgIHZhciBtYXBwaW5ncyA9IGFjdGl2ZUN0eC5tYXBwaW5ncztcbiAgICB2YXIgdGVybXMgPSBPYmplY3Qua2V5cyhtYXBwaW5ncykuc29ydChfY29tcGFyZVNob3J0ZXN0TGVhc3QpO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0ZXJtcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHRlcm0gPSB0ZXJtc1tpXTtcbiAgICAgIHZhciBtYXBwaW5nID0gbWFwcGluZ3NbdGVybV07XG4gICAgICBpZihtYXBwaW5nID09PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGFpbmVyID0gbWFwcGluZ1snQGNvbnRhaW5lciddIHx8ICdAbm9uZSc7XG5cbiAgICAgIC8vIGl0ZXJhdGUgb3ZlciBldmVyeSBJUkkgaW4gdGhlIG1hcHBpbmdcbiAgICAgIHZhciBpZHMgPSBtYXBwaW5nWydAaWQnXTtcbiAgICAgIGlmKCFfaXNBcnJheShpZHMpKSB7XG4gICAgICAgIGlkcyA9IFtpZHNdO1xuICAgICAgfVxuICAgICAgZm9yKHZhciBpaSA9IDA7IGlpIDwgaWRzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICB2YXIgaXJpID0gaWRzW2lpXTtcbiAgICAgICAgdmFyIGVudHJ5ID0gaW52ZXJzZVtpcmldO1xuICAgICAgICB2YXIgaXNLZXl3b3JkID0gX2lzS2V5d29yZChpcmkpO1xuXG4gICAgICAgIGlmKCFlbnRyeSkge1xuICAgICAgICAgIC8vIGluaXRpYWxpemUgZW50cnlcbiAgICAgICAgICBpbnZlcnNlW2lyaV0gPSBlbnRyeSA9IHt9O1xuXG4gICAgICAgICAgaWYoIWlzS2V5d29yZCAmJiAhbWFwcGluZy5fdGVybUhhc0NvbG9uKSB7XG4gICAgICAgICAgICAvLyBpbml0IElSSSB0byB0ZXJtIG1hcCBhbmQgZmFzdCBDVVJJRSBwcmVmaXhlc1xuICAgICAgICAgICAgaXJpc1RvVGVybXNbaXJpXSA9IFt0ZXJtXTtcbiAgICAgICAgICAgIHZhciBmYXN0Q3VyaWVFbnRyeSA9IHtpcmk6IGlyaSwgdGVybXM6IGlyaXNUb1Rlcm1zW2lyaV19O1xuICAgICAgICAgICAgaWYoaXJpWzBdIGluIGZhc3RDdXJpZU1hcCkge1xuICAgICAgICAgICAgICBmYXN0Q3VyaWVNYXBbaXJpWzBdXS5wdXNoKGZhc3RDdXJpZUVudHJ5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZhc3RDdXJpZU1hcFtpcmlbMF1dID0gW2Zhc3RDdXJpZUVudHJ5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZighaXNLZXl3b3JkICYmICFtYXBwaW5nLl90ZXJtSGFzQ29sb24pIHtcbiAgICAgICAgICAvLyBhZGQgSVJJIHRvIHRlcm0gbWF0Y2hcbiAgICAgICAgICBpcmlzVG9UZXJtc1tpcmldLnB1c2godGVybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgbmV3IGVudHJ5XG4gICAgICAgIGlmKCFlbnRyeVtjb250YWluZXJdKSB7XG4gICAgICAgICAgZW50cnlbY29udGFpbmVyXSA9IHtcbiAgICAgICAgICAgICdAbGFuZ3VhZ2UnOiB7fSxcbiAgICAgICAgICAgICdAdHlwZSc6IHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyeSA9IGVudHJ5W2NvbnRhaW5lcl07XG5cbiAgICAgICAgaWYobWFwcGluZy5yZXZlcnNlKSB7XG4gICAgICAgICAgLy8gdGVybSBpcyBwcmVmZXJyZWQgZm9yIHZhbHVlcyB1c2luZyBAcmV2ZXJzZVxuICAgICAgICAgIF9hZGRQcmVmZXJyZWRUZXJtKG1hcHBpbmcsIHRlcm0sIGVudHJ5WydAdHlwZSddLCAnQHJldmVyc2UnKTtcbiAgICAgICAgfSBlbHNlIGlmKCdAdHlwZScgaW4gbWFwcGluZykge1xuICAgICAgICAgIC8vIHRlcm0gaXMgcHJlZmVycmVkIGZvciB2YWx1ZXMgdXNpbmcgc3BlY2lmaWMgdHlwZVxuICAgICAgICAgIF9hZGRQcmVmZXJyZWRUZXJtKG1hcHBpbmcsIHRlcm0sIGVudHJ5WydAdHlwZSddLCBtYXBwaW5nWydAdHlwZSddKTtcbiAgICAgICAgfSBlbHNlIGlmKCdAbGFuZ3VhZ2UnIGluIG1hcHBpbmcpIHtcbiAgICAgICAgICAvLyB0ZXJtIGlzIHByZWZlcnJlZCBmb3IgdmFsdWVzIHVzaW5nIHNwZWNpZmljIGxhbmd1YWdlXG4gICAgICAgICAgdmFyIGxhbmd1YWdlID0gbWFwcGluZ1snQGxhbmd1YWdlJ10gfHwgJ0BudWxsJztcbiAgICAgICAgICBfYWRkUHJlZmVycmVkVGVybShtYXBwaW5nLCB0ZXJtLCBlbnRyeVsnQGxhbmd1YWdlJ10sIGxhbmd1YWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0ZXJtIGlzIHByZWZlcnJlZCBmb3IgdmFsdWVzIHcvZGVmYXVsdCBsYW5ndWFnZSBvciBubyB0eXBlIGFuZFxuICAgICAgICAgIC8vIG5vIGxhbmd1YWdlXG4gICAgICAgICAgLy8gYWRkIGFuIGVudHJ5IGZvciB0aGUgZGVmYXVsdCBsYW5ndWFnZVxuICAgICAgICAgIF9hZGRQcmVmZXJyZWRUZXJtKG1hcHBpbmcsIHRlcm0sIGVudHJ5WydAbGFuZ3VhZ2UnXSwgZGVmYXVsdExhbmd1YWdlKTtcblxuICAgICAgICAgIC8vIGFkZCBlbnRyaWVzIGZvciBubyB0eXBlIGFuZCBubyBsYW5ndWFnZVxuICAgICAgICAgIF9hZGRQcmVmZXJyZWRUZXJtKG1hcHBpbmcsIHRlcm0sIGVudHJ5WydAdHlwZSddLCAnQG5vbmUnKTtcbiAgICAgICAgICBfYWRkUHJlZmVycmVkVGVybShtYXBwaW5nLCB0ZXJtLCBlbnRyeVsnQGxhbmd1YWdlJ10sICdAbm9uZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgZmFzdCBDVVJJRSBtYXBcbiAgICBmb3IodmFyIGtleSBpbiBmYXN0Q3VyaWVNYXApIHtcbiAgICAgIF9idWlsZElyaU1hcChmYXN0Q3VyaWVNYXAsIGtleSwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludmVyc2U7XG4gIH1cblxuICAvKipcbiAgICogUnVucyBhIHJlY3Vyc2l2ZSBhbGdvcml0aG0gdG8gYnVpbGQgYSBsb29rdXAgbWFwIGZvciBxdWlja2x5IGZpbmRpbmdcbiAgICogcG90ZW50aWFsIENVUklFcy5cbiAgICpcbiAgICogQHBhcmFtIGlyaU1hcCB0aGUgbWFwIHRvIGJ1aWxkLlxuICAgKiBAcGFyYW0ga2V5IHRoZSBjdXJyZW50IGtleSBpbiB0aGUgbWFwIHRvIHdvcmsgb24uXG4gICAqIEBwYXJhbSBpZHggdGhlIGluZGV4IGludG8gdGhlIElSSSB0byBjb21wYXJlLlxuICAgKi9cbiAgZnVuY3Rpb24gX2J1aWxkSXJpTWFwKGlyaU1hcCwga2V5LCBpZHgpIHtcbiAgICB2YXIgZW50cmllcyA9IGlyaU1hcFtrZXldO1xuICAgIHZhciBuZXh0ID0gaXJpTWFwW2tleV0gPSB7fTtcblxuICAgIHZhciBpcmk7XG4gICAgdmFyIGxldHRlcjtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7ICsraSkge1xuICAgICAgaXJpID0gZW50cmllc1tpXS5pcmk7XG4gICAgICBpZihpZHggPj0gaXJpLmxlbmd0aCkge1xuICAgICAgICBsZXR0ZXIgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldHRlciA9IGlyaVtpZHhdO1xuICAgICAgfVxuICAgICAgaWYobGV0dGVyIGluIG5leHQpIHtcbiAgICAgICAgbmV4dFtsZXR0ZXJdLnB1c2goZW50cmllc1tpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0W2xldHRlcl0gPSBbZW50cmllc1tpXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yKHZhciBrZXkgaW4gbmV4dCkge1xuICAgICAgaWYoa2V5ID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIF9idWlsZElyaU1hcChuZXh0LCBrZXksIGlkeCArIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSB0ZXJtIGZvciB0aGUgZ2l2ZW4gZW50cnkgaWYgbm90IGFscmVhZHkgYWRkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBtYXBwaW5nIHRoZSB0ZXJtIG1hcHBpbmcuXG4gICAqIEBwYXJhbSB0ZXJtIHRoZSB0ZXJtIHRvIGFkZC5cbiAgICogQHBhcmFtIGVudHJ5IHRoZSBpbnZlcnNlIGNvbnRleHQgdHlwZU9yTGFuZ3VhZ2UgZW50cnkgdG8gYWRkIHRvLlxuICAgKiBAcGFyYW0gdHlwZU9yTGFuZ3VhZ2VWYWx1ZSB0aGUga2V5IGluIHRoZSBlbnRyeSB0byBhZGQgdG8uXG4gICAqL1xuICBmdW5jdGlvbiBfYWRkUHJlZmVycmVkVGVybShtYXBwaW5nLCB0ZXJtLCBlbnRyeSwgdHlwZU9yTGFuZ3VhZ2VWYWx1ZSkge1xuICAgIGlmKCEodHlwZU9yTGFuZ3VhZ2VWYWx1ZSBpbiBlbnRyeSkpIHtcbiAgICAgIGVudHJ5W3R5cGVPckxhbmd1YWdlVmFsdWVdID0gdGVybTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIGFuIGFjdGl2ZSBjb250ZXh0LCBjcmVhdGluZyBhIGNoaWxkIGFjdGl2ZSBjb250ZXh0LlxuICAgKlxuICAgKiBAcmV0dXJuIGEgY2xvbmUgKGNoaWxkKSBvZiB0aGUgYWN0aXZlIGNvbnRleHQuXG4gICAqL1xuICBmdW5jdGlvbiBfY2xvbmVBY3RpdmVDb250ZXh0KCkge1xuICAgIHZhciBjaGlsZCA9IHt9O1xuICAgIGNoaWxkWydAYmFzZSddID0gdGhpc1snQGJhc2UnXTtcbiAgICBjaGlsZC5tYXBwaW5ncyA9IF9jbG9uZSh0aGlzLm1hcHBpbmdzKTtcbiAgICBjaGlsZC5jbG9uZSA9IHRoaXMuY2xvbmU7XG4gICAgY2hpbGQuaW52ZXJzZSA9IG51bGw7XG4gICAgY2hpbGQuZ2V0SW52ZXJzZSA9IHRoaXMuZ2V0SW52ZXJzZTtcbiAgICBpZignQGxhbmd1YWdlJyBpbiB0aGlzKSB7XG4gICAgICBjaGlsZFsnQGxhbmd1YWdlJ10gPSB0aGlzWydAbGFuZ3VhZ2UnXTtcbiAgICB9XG4gICAgaWYoJ0B2b2NhYicgaW4gdGhpcykge1xuICAgICAgY2hpbGRbJ0B2b2NhYiddID0gdGhpc1snQHZvY2FiJ107XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIHZhbHVlIGlzIGEga2V5d29yZC5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIGtleXdvcmQsIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2lzS2V5d29yZCh2KSB7XG4gIGlmKCFfaXNTdHJpbmcodikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3dpdGNoKHYpIHtcbiAgY2FzZSAnQGJhc2UnOlxuICBjYXNlICdAY29udGV4dCc6XG4gIGNhc2UgJ0Bjb250YWluZXInOlxuICBjYXNlICdAZGVmYXVsdCc6XG4gIGNhc2UgJ0BlbWJlZCc6XG4gIGNhc2UgJ0BleHBsaWNpdCc6XG4gIGNhc2UgJ0BncmFwaCc6XG4gIGNhc2UgJ0BpZCc6XG4gIGNhc2UgJ0BpbmRleCc6XG4gIGNhc2UgJ0BsYW5ndWFnZSc6XG4gIGNhc2UgJ0BsaXN0JzpcbiAgY2FzZSAnQG9taXREZWZhdWx0JzpcbiAgY2FzZSAnQHByZXNlcnZlJzpcbiAgY2FzZSAnQHJlcXVpcmVBbGwnOlxuICBjYXNlICdAcmV2ZXJzZSc6XG4gIGNhc2UgJ0BzZXQnOlxuICBjYXNlICdAdHlwZSc6XG4gIGNhc2UgJ0B2YWx1ZSc6XG4gIGNhc2UgJ0B2b2NhYic6XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gT2JqZWN0LlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGFuIE9iamVjdCwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNPYmplY3Qodikge1xuICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gZW1wdHkgT2JqZWN0LlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGFuIGVtcHR5IE9iamVjdCwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNFbXB0eU9iamVjdCh2KSB7XG4gIHJldHVybiBfaXNPYmplY3QodikgJiYgT2JqZWN0LmtleXModikubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gQXJyYXkuXG4gKlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYW4gQXJyYXksIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2lzQXJyYXkodikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYSB2YWxpZCBAdHlwZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKi9cbmZ1bmN0aW9uIF92YWxpZGF0ZVR5cGVWYWx1ZSh2KSB7XG4gIC8vIGNhbiBiZSBhIHN0cmluZyBvciBhbiBlbXB0eSBvYmplY3RcbiAgaWYoX2lzU3RyaW5nKHYpIHx8IF9pc0VtcHR5T2JqZWN0KHYpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBhcnJheVxuICB2YXIgaXNWYWxpZCA9IGZhbHNlO1xuICBpZihfaXNBcnJheSh2KSkge1xuICAgIC8vIG11c3QgY29udGFpbiBvbmx5IHN0cmluZ3NcbiAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7ICsraSkge1xuICAgICAgaWYoIShfaXNTdHJpbmcodltpXSkpKSB7XG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYoIWlzVmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAnSW52YWxpZCBKU09OLUxEIHN5bnRheDsgXCJAdHlwZVwiIHZhbHVlIG11c3QgYSBzdHJpbmcsIGFuIGFycmF5IG9mICcgK1xuICAgICAgJ3N0cmluZ3MsIG9yIGFuIGVtcHR5IG9iamVjdC4nLCAnanNvbmxkLlN5bnRheEVycm9yJyxcbiAgICAgIHtjb2RlOiAnaW52YWxpZCB0eXBlIHZhbHVlJywgdmFsdWU6IHZ9KTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBTdHJpbmcuXG4gKlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSBTdHJpbmcsIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2lzU3RyaW5nKHYpIHtcbiAgcmV0dXJuICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgfHxcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFN0cmluZ10nKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgTnVtYmVyLlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgTnVtYmVyLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9pc051bWJlcih2KSB7XG4gIHJldHVybiAodHlwZW9mIHYgPT09ICdudW1iZXInIHx8XG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBOdW1iZXJdJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRvdWJsZS5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIGRvdWJsZSwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNEb3VibGUodikge1xuICByZXR1cm4gX2lzTnVtYmVyKHYpICYmIFN0cmluZyh2KS5pbmRleE9mKCcuJykgIT09IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbnVtZXJpYy5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9pc051bWVyaWModikge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodikpICYmIGlzRmluaXRlKHYpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBCb29sZWFuLlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgQm9vbGVhbiwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNCb29sZWFuKHYpIHtcbiAgcmV0dXJuICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBCb29sZWFuXScpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNVbmRlZmluZWQodikge1xuICByZXR1cm4gKHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHN1YmplY3Qgd2l0aCBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgc3ViamVjdCB3aXRoIHByb3BlcnRpZXMsIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2lzU3ViamVjdCh2KSB7XG4gIC8vIE5vdGU6IEEgdmFsdWUgaXMgYSBzdWJqZWN0IGlmIGFsbCBvZiB0aGVzZSBob2xkIHRydWU6XG4gIC8vIDEuIEl0IGlzIGFuIE9iamVjdC5cbiAgLy8gMi4gSXQgaXMgbm90IGEgQHZhbHVlLCBAc2V0LCBvciBAbGlzdC5cbiAgLy8gMy4gSXQgaGFzIG1vcmUgdGhhbiAxIGtleSBPUiBhbnkgZXhpc3Rpbmcga2V5IGlzIG5vdCBAaWQuXG4gIHZhciBydmFsID0gZmFsc2U7XG4gIGlmKF9pc09iamVjdCh2KSAmJlxuICAgICEoKCdAdmFsdWUnIGluIHYpIHx8ICgnQHNldCcgaW4gdikgfHwgKCdAbGlzdCcgaW4gdikpKSB7XG4gICAgdmFyIGtleUNvdW50ID0gT2JqZWN0LmtleXModikubGVuZ3RoO1xuICAgIHJ2YWwgPSAoa2V5Q291bnQgPiAxIHx8ICEoJ0BpZCcgaW4gdikpO1xuICB9XG4gIHJldHVybiBydmFsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBzdWJqZWN0IHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIHN1YmplY3QgcmVmZXJlbmNlLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9pc1N1YmplY3RSZWZlcmVuY2Uodikge1xuICAvLyBOb3RlOiBBIHZhbHVlIGlzIGEgc3ViamVjdCByZWZlcmVuY2UgaWYgYWxsIG9mIHRoZXNlIGhvbGQgdHJ1ZTpcbiAgLy8gMS4gSXQgaXMgYW4gT2JqZWN0LlxuICAvLyAyLiBJdCBoYXMgYSBzaW5nbGUga2V5OiBAaWQuXG4gIHJldHVybiAoX2lzT2JqZWN0KHYpICYmIE9iamVjdC5rZXlzKHYpLmxlbmd0aCA9PT0gMSAmJiAoJ0BpZCcgaW4gdikpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBAdmFsdWUuXG4gKlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSBAdmFsdWUsIGZhbHNlIGlmIG5vdC5cbiAqL1xuZnVuY3Rpb24gX2lzVmFsdWUodikge1xuICAvLyBOb3RlOiBBIHZhbHVlIGlzIGEgQHZhbHVlIGlmIGFsbCBvZiB0aGVzZSBob2xkIHRydWU6XG4gIC8vIDEuIEl0IGlzIGFuIE9iamVjdC5cbiAgLy8gMi4gSXQgaGFzIHRoZSBAdmFsdWUgcHJvcGVydHkuXG4gIHJldHVybiBfaXNPYmplY3QodikgJiYgKCdAdmFsdWUnIGluIHYpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBAbGlzdC5cbiAqXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIEBsaXN0LCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9pc0xpc3Qodikge1xuICAvLyBOb3RlOiBBIHZhbHVlIGlzIGEgQGxpc3QgaWYgYWxsIG9mIHRoZXNlIGhvbGQgdHJ1ZTpcbiAgLy8gMS4gSXQgaXMgYW4gT2JqZWN0LlxuICAvLyAyLiBJdCBoYXMgdGhlIEBsaXN0IHByb3BlcnR5LlxuICByZXR1cm4gX2lzT2JqZWN0KHYpICYmICgnQGxpc3QnIGluIHYpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBibGFuayBub2RlLlxuICpcbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZSB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgYmxhbmsgbm9kZSwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfaXNCbGFua05vZGUodikge1xuICAvLyBOb3RlOiBBIHZhbHVlIGlzIGEgYmxhbmsgbm9kZSBpZiBhbGwgb2YgdGhlc2UgaG9sZCB0cnVlOlxuICAvLyAxLiBJdCBpcyBhbiBPYmplY3QuXG4gIC8vIDIuIElmIGl0IGhhcyBhbiBAaWQga2V5IGl0cyB2YWx1ZSBiZWdpbnMgd2l0aCAnXzonLlxuICAvLyAzLiBJdCBoYXMgbm8ga2V5cyBPUiBpcyBub3QgYSBAdmFsdWUsIEBzZXQsIG9yIEBsaXN0LlxuICB2YXIgcnZhbCA9IGZhbHNlO1xuICBpZihfaXNPYmplY3QodikpIHtcbiAgICBpZignQGlkJyBpbiB2KSB7XG4gICAgICBydmFsID0gKHZbJ0BpZCddLmluZGV4T2YoJ186JykgPT09IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBydmFsID0gKE9iamVjdC5rZXlzKHYpLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAhKCgnQHZhbHVlJyBpbiB2KSB8fCAoJ0BzZXQnIGluIHYpIHx8ICgnQGxpc3QnIGluIHYpKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBydmFsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gYWJzb2x1dGUgSVJJLCBmYWxzZSBpZiBub3QuXG4gKlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYW4gYWJzb2x1dGUgSVJJLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9pc0Fic29sdXRlSXJpKHYpIHtcbiAgcmV0dXJuIF9pc1N0cmluZyh2KSAmJiB2LmluZGV4T2YoJzonKSAhPT0gLTE7XG59XG5cbi8qKlxuICogQ2xvbmVzIGFuIG9iamVjdCwgYXJyYXksIG9yIHN0cmluZy9udW1iZXIuIElmIGEgdHlwZWQgSmF2YVNjcmlwdCBvYmplY3RcbiAqIGlzIGdpdmVuLCBzdWNoIGFzIGEgRGF0ZSwgaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqXG4gKiBAcmV0dXJuIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIF9jbG9uZSh2YWx1ZSkge1xuICBpZih2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJ2YWw7XG4gICAgaWYoX2lzQXJyYXkodmFsdWUpKSB7XG4gICAgICBydmFsID0gW107XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcnZhbFtpXSA9IF9jbG9uZSh2YWx1ZVtpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmKF9pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHJ2YWwgPSB7fTtcbiAgICAgIGZvcih2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHJ2YWxba2V5XSA9IF9jbG9uZSh2YWx1ZVtrZXldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcnZhbCA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBydmFsO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBGaW5kcyBhbGwgQGNvbnRleHQgVVJMcyBpbiB0aGUgZ2l2ZW4gSlNPTi1MRCBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgdGhlIEpTT04tTEQgaW5wdXQuXG4gKiBAcGFyYW0gdXJscyBhIG1hcCBvZiBVUkxzICh1cmwgPT4gZmFsc2UvQGNvbnRleHRzKS5cbiAqIEBwYXJhbSByZXBsYWNlIHRydWUgdG8gcmVwbGFjZSB0aGUgVVJMcyBpbiB0aGUgZ2l2ZW4gaW5wdXQgd2l0aCB0aGVcbiAqICAgICAgICAgICBAY29udGV4dHMgZnJvbSB0aGUgdXJscyBtYXAsIGZhbHNlIG5vdCB0by5cbiAqIEBwYXJhbSBiYXNlIHRoZSBiYXNlIElSSSB0byB1c2UgdG8gcmVzb2x2ZSByZWxhdGl2ZSBJUklzLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiBuZXcgVVJMcyB0byByZXRyaWV2ZSB3ZXJlIGZvdW5kLCBmYWxzZSBpZiBub3QuXG4gKi9cbmZ1bmN0aW9uIF9maW5kQ29udGV4dFVybHMoaW5wdXQsIHVybHMsIHJlcGxhY2UsIGJhc2UpIHtcbiAgdmFyIGNvdW50ID0gT2JqZWN0LmtleXModXJscykubGVuZ3RoO1xuICBpZihfaXNBcnJheShpbnB1dCkpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyArK2kpIHtcbiAgICAgIF9maW5kQ29udGV4dFVybHMoaW5wdXRbaV0sIHVybHMsIHJlcGxhY2UsIGJhc2UpO1xuICAgIH1cbiAgICByZXR1cm4gKGNvdW50IDwgT2JqZWN0LmtleXModXJscykubGVuZ3RoKTtcbiAgfSBlbHNlIGlmKF9pc09iamVjdChpbnB1dCkpIHtcbiAgICBmb3IodmFyIGtleSBpbiBpbnB1dCkge1xuICAgICAgaWYoa2V5ICE9PSAnQGNvbnRleHQnKSB7XG4gICAgICAgIF9maW5kQ29udGV4dFVybHMoaW5wdXRba2V5XSwgdXJscywgcmVwbGFjZSwgYmFzZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgQGNvbnRleHRcbiAgICAgIHZhciBjdHggPSBpbnB1dFtrZXldO1xuXG4gICAgICAvLyBhcnJheSBAY29udGV4dFxuICAgICAgaWYoX2lzQXJyYXkoY3R4KSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gY3R4Lmxlbmd0aDtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFyIF9jdHggPSBjdHhbaV07XG4gICAgICAgICAgaWYoX2lzU3RyaW5nKF9jdHgpKSB7XG4gICAgICAgICAgICBfY3R4ID0ganNvbmxkLnByZXBlbmRCYXNlKGJhc2UsIF9jdHgpO1xuICAgICAgICAgICAgLy8gcmVwbGFjZSB3L0Bjb250ZXh0IGlmIHJlcXVlc3RlZFxuICAgICAgICAgICAgaWYocmVwbGFjZSkge1xuICAgICAgICAgICAgICBfY3R4ID0gdXJsc1tfY3R4XTtcbiAgICAgICAgICAgICAgaWYoX2lzQXJyYXkoX2N0eCkpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgZmxhdHRlbmVkIGNvbnRleHRcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGN0eCwgW2ksIDFdLmNvbmNhdChfY3R4KSk7XG4gICAgICAgICAgICAgICAgaSArPSBfY3R4Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gY3R4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHhbaV0gPSBfY3R4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYoIShfY3R4IGluIHVybHMpKSB7XG4gICAgICAgICAgICAgIC8vIEBjb250ZXh0IFVSTCBmb3VuZFxuICAgICAgICAgICAgICB1cmxzW19jdHhdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYoX2lzU3RyaW5nKGN0eCkpIHtcbiAgICAgICAgLy8gc3RyaW5nIEBjb250ZXh0XG4gICAgICAgIGN0eCA9IGpzb25sZC5wcmVwZW5kQmFzZShiYXNlLCBjdHgpO1xuICAgICAgICAvLyByZXBsYWNlIHcvQGNvbnRleHQgaWYgcmVxdWVzdGVkXG4gICAgICAgIGlmKHJlcGxhY2UpIHtcbiAgICAgICAgICBpbnB1dFtrZXldID0gdXJsc1tjdHhdO1xuICAgICAgICB9IGVsc2UgaWYoIShjdHggaW4gdXJscykpIHtcbiAgICAgICAgICAvLyBAY29udGV4dCBVUkwgZm91bmRcbiAgICAgICAgICB1cmxzW2N0eF0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGNvdW50IDwgT2JqZWN0LmtleXModXJscykubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIGV4dGVybmFsIEBjb250ZXh0IFVSTHMgdXNpbmcgdGhlIGdpdmVuIGRvY3VtZW50IGxvYWRlci4gRXZlcnlcbiAqIGluc3RhbmNlIG9mIEBjb250ZXh0IGluIHRoZSBpbnB1dCB0aGF0IHJlZmVycyB0byBhIFVSTCB3aWxsIGJlIHJlcGxhY2VkXG4gKiB3aXRoIHRoZSBKU09OIEBjb250ZXh0IGZvdW5kIGF0IHRoYXQgVVJMLlxuICpcbiAqIEBwYXJhbSBpbnB1dCB0aGUgSlNPTi1MRCBpbnB1dCB3aXRoIHBvc3NpYmxlIGNvbnRleHRzLlxuICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gdXNlOlxuICogICAgICAgICAgZG9jdW1lbnRMb2FkZXIodXJsLCBjYWxsYmFjayhlcnIsIHJlbW90ZURvYykpIHRoZSBkb2N1bWVudCBsb2FkZXIuXG4gKiBAcGFyYW0gY2FsbGJhY2soZXJyLCBpbnB1dCkgY2FsbGVkIG9uY2UgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmZ1bmN0aW9uIF9yZXRyaWV2ZUNvbnRleHRVcmxzKGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAvLyBpZiBhbnkgZXJyb3Igb2NjdXJzIGR1cmluZyBVUkwgcmVzb2x1dGlvbiwgcXVpdFxuICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gIC8vIHJlY3Vyc2l2ZSBkb2N1bWVudCBsb2FkZXJcbiAgdmFyIGRvY3VtZW50TG9hZGVyID0gb3B0aW9ucy5kb2N1bWVudExvYWRlcjtcbiAgdmFyIHJldHJpZXZlID0gZnVuY3Rpb24oaW5wdXQsIGN5Y2xlcywgZG9jdW1lbnRMb2FkZXIsIGJhc2UsIGNhbGxiYWNrKSB7XG4gICAgaWYoT2JqZWN0LmtleXMoY3ljbGVzKS5sZW5ndGggPiBNQVhfQ09OVEVYVF9VUkxTKSB7XG4gICAgICBlcnJvciA9IG5ldyBKc29uTGRFcnJvcihcbiAgICAgICAgJ01heGltdW0gbnVtYmVyIG9mIEBjb250ZXh0IFVSTHMgZXhjZWVkZWQuJyxcbiAgICAgICAgJ2pzb25sZC5Db250ZXh0VXJsRXJyb3InLFxuICAgICAgICB7Y29kZTogJ2xvYWRpbmcgcmVtb3RlIGNvbnRleHQgZmFpbGVkJywgbWF4OiBNQVhfQ09OVEVYVF9VUkxTfSk7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgIH1cblxuICAgIC8vIGZvciB0cmFja2luZyB0aGUgVVJMcyB0byByZXRyaWV2ZVxuICAgIHZhciB1cmxzID0ge307XG5cbiAgICAvLyBmaW5pc2hlZCB3aWxsIGJlIGNhbGxlZCBvbmNlIHRoZSBVUkwgcXVldWUgaXMgZW1wdHlcbiAgICB2YXIgZmluaXNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlcGxhY2UgYWxsIFVSTHMgaW4gdGhlIGlucHV0XG4gICAgICBfZmluZENvbnRleHRVcmxzKGlucHV0LCB1cmxzLCB0cnVlLCBiYXNlKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGlucHV0KTtcbiAgICB9O1xuXG4gICAgLy8gZmluZCBhbGwgVVJMcyBpbiB0aGUgZ2l2ZW4gaW5wdXRcbiAgICBpZighX2ZpbmRDb250ZXh0VXJscyhpbnB1dCwgdXJscywgZmFsc2UsIGJhc2UpKSB7XG4gICAgICAvLyBubyBuZXcgVVJMcyBpbiBpbnB1dFxuICAgICAgcmV0dXJuIGZpbmlzaGVkKCk7XG4gICAgfVxuXG4gICAgLy8gcXVldWUgYWxsIHVucmV0cmlldmVkIFVSTHNcbiAgICB2YXIgcXVldWUgPSBbXTtcbiAgICBmb3IodmFyIHVybCBpbiB1cmxzKSB7XG4gICAgICBpZih1cmxzW3VybF0gPT09IGZhbHNlKSB7XG4gICAgICAgIHF1ZXVlLnB1c2godXJsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXRyaWV2ZSBVUkxzIGluIHF1ZXVlXG4gICAgdmFyIGNvdW50ID0gcXVldWUubGVuZ3RoO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAvLyBjaGVjayBmb3IgY29udGV4dCBVUkwgY3ljbGVcbiAgICAgICAgaWYodXJsIGluIGN5Y2xlcykge1xuICAgICAgICAgIGVycm9yID0gbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICAgJ0N5Y2xpY2FsIEBjb250ZXh0IFVSTHMgZGV0ZWN0ZWQuJyxcbiAgICAgICAgICAgICdqc29ubGQuQ29udGV4dFVybEVycm9yJyxcbiAgICAgICAgICAgIHtjb2RlOiAncmVjdXJzaXZlIGNvbnRleHQgaW5jbHVzaW9uJywgdXJsOiB1cmx9KTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfY3ljbGVzID0gX2Nsb25lKGN5Y2xlcyk7XG4gICAgICAgIF9jeWNsZXNbdXJsXSA9IHRydWU7XG4gICAgICAgIHZhciBkb25lID0gZnVuY3Rpb24oZXJyLCByZW1vdGVEb2MpIHtcbiAgICAgICAgICAvLyBzaG9ydC1jaXJjdWl0IGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aXRoIGFub3RoZXIgVVJMXG4gICAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY3R4ID0gcmVtb3RlRG9jID8gcmVtb3RlRG9jLmRvY3VtZW50IDogbnVsbDtcblxuICAgICAgICAgIC8vIHBhcnNlIHN0cmluZyBjb250ZXh0IGFzIEpTT05cbiAgICAgICAgICBpZighZXJyICYmIF9pc1N0cmluZyhjdHgpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjdHggPSBKU09OLnBhcnNlKGN0eCk7XG4gICAgICAgICAgICB9IGNhdGNoKGV4KSB7XG4gICAgICAgICAgICAgIGVyciA9IGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGVuc3VyZSBjdHggaXMgYW4gb2JqZWN0XG4gICAgICAgICAgaWYoZXJyKSB7XG4gICAgICAgICAgICBlcnIgPSBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICAgICAgICdEZXJlZmVyZW5jaW5nIGEgVVJMIGRpZCBub3QgcmVzdWx0IGluIGEgdmFsaWQgSlNPTi1MRCBvYmplY3QuICcgK1xuICAgICAgICAgICAgICAnUG9zc2libGUgY2F1c2VzIGFyZSBhbiBpbmFjY2Vzc2libGUgVVJMIHBlcmhhcHMgZHVlIHRvICcgK1xuICAgICAgICAgICAgICAnYSBzYW1lLW9yaWdpbiBwb2xpY3kgKGVuc3VyZSB0aGUgc2VydmVyIHVzZXMgQ09SUyBpZiB5b3UgYXJlICcgK1xuICAgICAgICAgICAgICAndXNpbmcgY2xpZW50LXNpZGUgSmF2YVNjcmlwdCksIHRvbyBtYW55IHJlZGlyZWN0cywgYSAnICtcbiAgICAgICAgICAgICAgJ25vbi1KU09OIHJlc3BvbnNlLCBvciBtb3JlIHRoYW4gb25lIEhUVFAgTGluayBIZWFkZXIgd2FzICcgK1xuICAgICAgICAgICAgICAncHJvdmlkZWQgZm9yIGEgcmVtb3RlIGNvbnRleHQuJyxcbiAgICAgICAgICAgICAgJ2pzb25sZC5JbnZhbGlkVXJsJyxcbiAgICAgICAgICAgICAge2NvZGU6ICdsb2FkaW5nIHJlbW90ZSBjb250ZXh0IGZhaWxlZCcsIHVybDogdXJsLCBjYXVzZTogZXJyfSk7XG4gICAgICAgICAgfSBlbHNlIGlmKCFfaXNPYmplY3QoY3R4KSkge1xuICAgICAgICAgICAgZXJyID0gbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICAgICAnRGVyZWZlcmVuY2luZyBhIFVSTCBkaWQgbm90IHJlc3VsdCBpbiBhIEpTT04gb2JqZWN0LiBUaGUgJyArXG4gICAgICAgICAgICAgICdyZXNwb25zZSB3YXMgdmFsaWQgSlNPTiwgYnV0IGl0IHdhcyBub3QgYSBKU09OIG9iamVjdC4nLFxuICAgICAgICAgICAgICAnanNvbmxkLkludmFsaWRVcmwnLFxuICAgICAgICAgICAgICB7Y29kZTogJ2ludmFsaWQgcmVtb3RlIGNvbnRleHQnLCB1cmw6IHVybCwgY2F1c2U6IGVycn0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihlcnIpIHtcbiAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1c2UgZW1wdHkgY29udGV4dCBpZiBubyBAY29udGV4dCBrZXkgaXMgcHJlc2VudFxuICAgICAgICAgIGlmKCEoJ0Bjb250ZXh0JyBpbiBjdHgpKSB7XG4gICAgICAgICAgICBjdHggPSB7J0Bjb250ZXh0Jzoge319O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHggPSB7J0Bjb250ZXh0JzogY3R4WydAY29udGV4dCddfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhcHBlbmQgY29udGV4dCBVUkwgdG8gY29udGV4dCBpZiBnaXZlblxuICAgICAgICAgIGlmKHJlbW90ZURvYy5jb250ZXh0VXJsKSB7XG4gICAgICAgICAgICBpZighX2lzQXJyYXkoY3R4WydAY29udGV4dCddKSkge1xuICAgICAgICAgICAgICBjdHhbJ0Bjb250ZXh0J10gPSBbY3R4WydAY29udGV4dCddXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eFsnQGNvbnRleHQnXS5wdXNoKHJlbW90ZURvYy5jb250ZXh0VXJsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZWN1cnNlXG4gICAgICAgICAgcmV0cmlldmUoY3R4LCBfY3ljbGVzLCBkb2N1bWVudExvYWRlciwgdXJsLCBmdW5jdGlvbihlcnIsIGN0eCkge1xuICAgICAgICAgICAgaWYoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsc1t1cmxdID0gY3R4WydAY29udGV4dCddO1xuICAgICAgICAgICAgY291bnQgLT0gMTtcbiAgICAgICAgICAgIGlmKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIGZpbmlzaGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwcm9taXNlID0gZG9jdW1lbnRMb2FkZXIodXJsLCBkb25lKTtcbiAgICAgICAgaWYocHJvbWlzZSAmJiAndGhlbicgaW4gcHJvbWlzZSkge1xuICAgICAgICAgIHByb21pc2UudGhlbihkb25lLmJpbmQobnVsbCwgbnVsbCksIGRvbmUpO1xuICAgICAgICB9XG4gICAgICB9KHF1ZXVlW2ldKSk7XG4gICAgfVxuICB9O1xuICByZXRyaWV2ZShpbnB1dCwge30sIGRvY3VtZW50TG9hZGVyLCBvcHRpb25zLmJhc2UsIGNhbGxiYWNrKTtcbn1cblxuLy8gZGVmaW5lIGpzIDEuOC41IE9iamVjdC5rZXlzIG1ldGhvZCBpZiBub3QgcHJlc2VudFxuaWYoIU9iamVjdC5rZXlzKSB7XG4gIE9iamVjdC5rZXlzID0gZnVuY3Rpb24obykge1xuICAgIGlmKG8gIT09IE9iamVjdChvKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTtcbiAgICB9XG4gICAgdmFyIHJ2YWwgPSBbXTtcbiAgICBmb3IodmFyIHAgaW4gbykge1xuICAgICAgaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSB7XG4gICAgICAgIHJ2YWwucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJ2YWw7XG4gIH07XG59XG5cbi8qKlxuICogUGFyc2VzIFJERiBpbiB0aGUgZm9ybSBvZiBOLVF1YWRzLlxuICpcbiAqIEBwYXJhbSBpbnB1dCB0aGUgTi1RdWFkcyBpbnB1dCB0byBwYXJzZS5cbiAqXG4gKiBAcmV0dXJuIGFuIFJERiBkYXRhc2V0LlxuICovXG5mdW5jdGlvbiBfcGFyc2VOUXVhZHMoaW5wdXQpIHtcbiAgLy8gZGVmaW5lIHBhcnRpYWwgcmVnZXhlc1xuICB2YXIgaXJpID0gJyg/OjwoW146XSs6W14+XSopPiknO1xuICB2YXIgYm5vZGUgPSAnKF86KD86W0EtWmEtejAtOV0rKSknO1xuICB2YXIgcGxhaW4gPSAnXCIoW15cIlxcXFxcXFxcXSooPzpcXFxcXFxcXC5bXlwiXFxcXFxcXFxdKikqKVwiJztcbiAgdmFyIGRhdGF0eXBlID0gJyg/OlxcXFxeXFxcXF4nICsgaXJpICsgJyknO1xuICB2YXIgbGFuZ3VhZ2UgPSAnKD86QChbYS16XSsoPzotW2EtejAtOV0rKSopKSc7XG4gIHZhciBsaXRlcmFsID0gJyg/OicgKyBwbGFpbiArICcoPzonICsgZGF0YXR5cGUgKyAnfCcgKyBsYW5ndWFnZSArICcpPyknO1xuICB2YXIgY29tbWVudCA9ICcoPzojLiopPyc7XG4gIHZhciB3cyA9ICdbIFxcXFx0XSsnO1xuICB2YXIgd3NvID0gJ1sgXFxcXHRdKic7XG4gIHZhciBlb2xuID0gLyg/Olxcclxcbil8KD86XFxuKXwoPzpcXHIpL2c7XG4gIHZhciBlbXB0eSA9IG5ldyBSZWdFeHAoJ14nICsgd3NvICsgY29tbWVudCArICckJyk7XG5cbiAgLy8gZGVmaW5lIHF1YWQgcGFydCByZWdleGVzXG4gIHZhciBzdWJqZWN0ID0gJyg/OicgKyBpcmkgKyAnfCcgKyBibm9kZSArICcpJyArIHdzO1xuICB2YXIgcHJvcGVydHkgPSBpcmkgKyB3cztcbiAgdmFyIG9iamVjdCA9ICcoPzonICsgaXJpICsgJ3wnICsgYm5vZGUgKyAnfCcgKyBsaXRlcmFsICsgJyknICsgd3NvO1xuICB2YXIgZ3JhcGhOYW1lID0gJyg/OlxcXFwufCg/Oig/OicgKyBpcmkgKyAnfCcgKyBibm9kZSArICcpJyArIHdzbyArICdcXFxcLikpJztcblxuICAvLyBmdWxsIHF1YWQgcmVnZXhcbiAgdmFyIHF1YWQgPSBuZXcgUmVnRXhwKFxuICAgICdeJyArIHdzbyArIHN1YmplY3QgKyBwcm9wZXJ0eSArIG9iamVjdCArIGdyYXBoTmFtZSArIHdzbyArIGNvbW1lbnQgKyAnJCcpO1xuXG4gIC8vIGJ1aWxkIFJERiBkYXRhc2V0XG4gIHZhciBkYXRhc2V0ID0ge307XG5cbiAgLy8gc3BsaXQgTi1RdWFkIGlucHV0IGludG8gbGluZXNcbiAgdmFyIGxpbmVzID0gaW5wdXQuc3BsaXQoZW9sbik7XG4gIHZhciBsaW5lTnVtYmVyID0gMDtcbiAgZm9yKHZhciBsaSA9IDA7IGxpIDwgbGluZXMubGVuZ3RoOyArK2xpKSB7XG4gICAgdmFyIGxpbmUgPSBsaW5lc1tsaV07XG4gICAgbGluZU51bWJlcisrO1xuXG4gICAgLy8gc2tpcCBlbXB0eSBsaW5lc1xuICAgIGlmKGVtcHR5LnRlc3QobGluZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHBhcnNlIHF1YWRcbiAgICB2YXIgbWF0Y2ggPSBsaW5lLm1hdGNoKHF1YWQpO1xuICAgIGlmKG1hdGNoID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgSnNvbkxkRXJyb3IoXG4gICAgICAgICdFcnJvciB3aGlsZSBwYXJzaW5nIE4tUXVhZHM7IGludmFsaWQgcXVhZC4nLFxuICAgICAgICAnanNvbmxkLlBhcnNlRXJyb3InLCB7bGluZTogbGluZU51bWJlcn0pO1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBSREYgdHJpcGxlXG4gICAgdmFyIHRyaXBsZSA9IHt9O1xuXG4gICAgLy8gZ2V0IHN1YmplY3RcbiAgICBpZighX2lzVW5kZWZpbmVkKG1hdGNoWzFdKSkge1xuICAgICAgdHJpcGxlLnN1YmplY3QgPSB7dHlwZTogJ0lSSScsIHZhbHVlOiBtYXRjaFsxXX07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaXBsZS5zdWJqZWN0ID0ge3R5cGU6ICdibGFuayBub2RlJywgdmFsdWU6IG1hdGNoWzJdfTtcbiAgICB9XG5cbiAgICAvLyBnZXQgcHJlZGljYXRlXG4gICAgdHJpcGxlLnByZWRpY2F0ZSA9IHt0eXBlOiAnSVJJJywgdmFsdWU6IG1hdGNoWzNdfTtcblxuICAgIC8vIGdldCBvYmplY3RcbiAgICBpZighX2lzVW5kZWZpbmVkKG1hdGNoWzRdKSkge1xuICAgICAgdHJpcGxlLm9iamVjdCA9IHt0eXBlOiAnSVJJJywgdmFsdWU6IG1hdGNoWzRdfTtcbiAgICB9IGVsc2UgaWYoIV9pc1VuZGVmaW5lZChtYXRjaFs1XSkpIHtcbiAgICAgIHRyaXBsZS5vYmplY3QgPSB7dHlwZTogJ2JsYW5rIG5vZGUnLCB2YWx1ZTogbWF0Y2hbNV19O1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmlwbGUub2JqZWN0ID0ge3R5cGU6ICdsaXRlcmFsJ307XG4gICAgICBpZighX2lzVW5kZWZpbmVkKG1hdGNoWzddKSkge1xuICAgICAgICB0cmlwbGUub2JqZWN0LmRhdGF0eXBlID0gbWF0Y2hbN107XG4gICAgICB9IGVsc2UgaWYoIV9pc1VuZGVmaW5lZChtYXRjaFs4XSkpIHtcbiAgICAgICAgdHJpcGxlLm9iamVjdC5kYXRhdHlwZSA9IFJERl9MQU5HU1RSSU5HO1xuICAgICAgICB0cmlwbGUub2JqZWN0Lmxhbmd1YWdlID0gbWF0Y2hbOF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlwbGUub2JqZWN0LmRhdGF0eXBlID0gWFNEX1NUUklORztcbiAgICAgIH1cbiAgICAgIHZhciB1bmVzY2FwZWQgPSBtYXRjaFs2XVxuICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcdC9nLCAnXFx0JylcbiAgICAgICAgLnJlcGxhY2UoL1xcXFxuL2csICdcXG4nKVxuICAgICAgICAucmVwbGFjZSgvXFxcXHIvZywgJ1xccicpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuICAgICAgdHJpcGxlLm9iamVjdC52YWx1ZSA9IHVuZXNjYXBlZDtcbiAgICB9XG5cbiAgICAvLyBnZXQgZ3JhcGggbmFtZSAoJ0BkZWZhdWx0JyBpcyB1c2VkIGZvciB0aGUgZGVmYXVsdCBncmFwaClcbiAgICB2YXIgbmFtZSA9ICdAZGVmYXVsdCc7XG4gICAgaWYoIV9pc1VuZGVmaW5lZChtYXRjaFs5XSkpIHtcbiAgICAgIG5hbWUgPSBtYXRjaFs5XTtcbiAgICB9IGVsc2UgaWYoIV9pc1VuZGVmaW5lZChtYXRjaFsxMF0pKSB7XG4gICAgICBuYW1lID0gbWF0Y2hbMTBdO1xuICAgIH1cblxuICAgIC8vIGluaXRpYWxpemUgZ3JhcGggaW4gZGF0YXNldFxuICAgIGlmKCEobmFtZSBpbiBkYXRhc2V0KSkge1xuICAgICAgZGF0YXNldFtuYW1lXSA9IFt0cmlwbGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhZGQgdHJpcGxlIGlmIHVuaXF1ZSB0byBpdHMgZ3JhcGhcbiAgICAgIHZhciB1bmlxdWUgPSB0cnVlO1xuICAgICAgdmFyIHRyaXBsZXMgPSBkYXRhc2V0W25hbWVdO1xuICAgICAgZm9yKHZhciB0aSA9IDA7IHVuaXF1ZSAmJiB0aSA8IHRyaXBsZXMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIGlmKF9jb21wYXJlUkRGVHJpcGxlcyh0cmlwbGVzW3RpXSwgdHJpcGxlKSkge1xuICAgICAgICAgIHVuaXF1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZih1bmlxdWUpIHtcbiAgICAgICAgdHJpcGxlcy5wdXNoKHRyaXBsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbi8vIHJlZ2lzdGVyIHRoZSBOLVF1YWRzIFJERiBwYXJzZXJcbmpzb25sZC5yZWdpc3RlclJERlBhcnNlcignYXBwbGljYXRpb24vbnF1YWRzJywgX3BhcnNlTlF1YWRzKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSREYgZGF0YXNldCB0byBOLVF1YWRzLlxuICpcbiAqIEBwYXJhbSBkYXRhc2V0IHRoZSBSREYgZGF0YXNldCB0byBjb252ZXJ0LlxuICpcbiAqIEByZXR1cm4gdGhlIE4tUXVhZHMgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBfdG9OUXVhZHMoZGF0YXNldCkge1xuICB2YXIgcXVhZHMgPSBbXTtcbiAgZm9yKHZhciBncmFwaE5hbWUgaW4gZGF0YXNldCkge1xuICAgIHZhciB0cmlwbGVzID0gZGF0YXNldFtncmFwaE5hbWVdO1xuICAgIGZvcih2YXIgdGkgPSAwOyB0aSA8IHRyaXBsZXMubGVuZ3RoOyArK3RpKSB7XG4gICAgICB2YXIgdHJpcGxlID0gdHJpcGxlc1t0aV07XG4gICAgICBpZihncmFwaE5hbWUgPT09ICdAZGVmYXVsdCcpIHtcbiAgICAgICAgZ3JhcGhOYW1lID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHF1YWRzLnB1c2goX3RvTlF1YWQodHJpcGxlLCBncmFwaE5hbWUpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHF1YWRzLnNvcnQoKS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSREYgdHJpcGxlIGFuZCBncmFwaCBuYW1lIHRvIGFuIE4tUXVhZCBzdHJpbmcgKGEgc2luZ2xlIHF1YWQpLlxuICpcbiAqIEBwYXJhbSB0cmlwbGUgdGhlIFJERiB0cmlwbGUgb3IgcXVhZCB0byBjb252ZXJ0IChhIHRyaXBsZSBvciBxdWFkIG1heSBiZVxuICogICAgICAgICAgcGFzc2VkLCBpZiBhIHRyaXBsZSBpcyBwYXNzZWQgdGhlbiBgZ3JhcGhOYW1lYCBzaG91bGQgYmUgZ2l2ZW5cbiAqICAgICAgICAgIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIGdyYXBoIHRoZSB0cmlwbGUgaXMgaW4sIGBudWxsYCBmb3JcbiAqICAgICAgICAgIHRoZSBkZWZhdWx0IGdyYXBoKS5cbiAqIEBwYXJhbSBncmFwaE5hbWUgdGhlIG5hbWUgb2YgdGhlIGdyYXBoIGNvbnRhaW5pbmcgdGhlIHRyaXBsZSwgbnVsbCBmb3JcbiAqICAgICAgICAgIHRoZSBkZWZhdWx0IGdyYXBoLlxuICpcbiAqIEByZXR1cm4gdGhlIE4tUXVhZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIF90b05RdWFkKHRyaXBsZSwgZ3JhcGhOYW1lKSB7XG4gIHZhciBzID0gdHJpcGxlLnN1YmplY3Q7XG4gIHZhciBwID0gdHJpcGxlLnByZWRpY2F0ZTtcbiAgdmFyIG8gPSB0cmlwbGUub2JqZWN0O1xuICB2YXIgZyA9IGdyYXBoTmFtZSB8fCBudWxsO1xuICBpZignbmFtZScgaW4gdHJpcGxlICYmIHRyaXBsZS5uYW1lKSB7XG4gICAgZyA9IHRyaXBsZS5uYW1lLnZhbHVlO1xuICB9XG5cbiAgdmFyIHF1YWQgPSAnJztcblxuICAvLyBzdWJqZWN0IGlzIGFuIElSSVxuICBpZihzLnR5cGUgPT09ICdJUkknKSB7XG4gICAgcXVhZCArPSAnPCcgKyBzLnZhbHVlICsgJz4nO1xuICB9IGVsc2Uge1xuICAgIHF1YWQgKz0gcy52YWx1ZTtcbiAgfVxuICBxdWFkICs9ICcgJztcblxuICAvLyBwcmVkaWNhdGUgaXMgYW4gSVJJXG4gIGlmKHAudHlwZSA9PT0gJ0lSSScpIHtcbiAgICBxdWFkICs9ICc8JyArIHAudmFsdWUgKyAnPic7XG4gIH0gZWxzZSB7XG4gICAgcXVhZCArPSBwLnZhbHVlO1xuICB9XG4gIHF1YWQgKz0gJyAnO1xuXG4gIC8vIG9iamVjdCBpcyBJUkksIGJub2RlLCBvciBsaXRlcmFsXG4gIGlmKG8udHlwZSA9PT0gJ0lSSScpIHtcbiAgICBxdWFkICs9ICc8JyArIG8udmFsdWUgKyAnPic7XG4gIH0gZWxzZSBpZihvLnR5cGUgPT09ICdibGFuayBub2RlJykge1xuICAgIHF1YWQgKz0gby52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXNjYXBlZCA9IG8udmFsdWVcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXFx0L2csICdcXFxcdCcpXG4gICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAucmVwbGFjZSgvXFxcIi9nLCAnXFxcXFwiJyk7XG4gICAgcXVhZCArPSAnXCInICsgZXNjYXBlZCArICdcIic7XG4gICAgaWYoby5kYXRhdHlwZSA9PT0gUkRGX0xBTkdTVFJJTkcpIHtcbiAgICAgIGlmKG8ubGFuZ3VhZ2UpIHtcbiAgICAgICAgcXVhZCArPSAnQCcgKyBvLmxhbmd1YWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZihvLmRhdGF0eXBlICE9PSBYU0RfU1RSSU5HKSB7XG4gICAgICBxdWFkICs9ICdeXjwnICsgby5kYXRhdHlwZSArICc+JztcbiAgICB9XG4gIH1cblxuICAvLyBncmFwaFxuICBpZihnICE9PSBudWxsICYmIGcgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmKGcuaW5kZXhPZignXzonKSAhPT0gMCkge1xuICAgICAgcXVhZCArPSAnIDwnICsgZyArICc+JztcbiAgICB9IGVsc2Uge1xuICAgICAgcXVhZCArPSAnICcgKyBnO1xuICAgIH1cbiAgfVxuXG4gIHF1YWQgKz0gJyAuXFxuJztcbiAgcmV0dXJuIHF1YWQ7XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBSREYgZGF0YXNldCBmb3VuZCB2aWEgdGhlIGRhdGEgb2JqZWN0IGZyb20gdGhlIFJERmEgQVBJLlxuICpcbiAqIEBwYXJhbSBkYXRhIHRoZSBSREZhIEFQSSBkYXRhIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHRoZSBSREYgZGF0YXNldC5cbiAqL1xuZnVuY3Rpb24gX3BhcnNlUmRmYUFwaURhdGEoZGF0YSkge1xuICB2YXIgZGF0YXNldCA9IHt9O1xuICBkYXRhc2V0WydAZGVmYXVsdCddID0gW107XG5cbiAgdmFyIHN1YmplY3RzID0gZGF0YS5nZXRTdWJqZWN0cygpO1xuICBmb3IodmFyIHNpID0gMDsgc2kgPCBzdWJqZWN0cy5sZW5ndGg7ICsrc2kpIHtcbiAgICB2YXIgc3ViamVjdCA9IHN1YmplY3RzW3NpXTtcbiAgICBpZihzdWJqZWN0ID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBnZXQgYWxsIHJlbGF0ZWQgdHJpcGxlc1xuICAgIHZhciB0cmlwbGVzID0gZGF0YS5nZXRTdWJqZWN0VHJpcGxlcyhzdWJqZWN0KTtcbiAgICBpZih0cmlwbGVzID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHByZWRpY2F0ZXMgPSB0cmlwbGVzLnByZWRpY2F0ZXM7XG4gICAgZm9yKHZhciBwcmVkaWNhdGUgaW4gcHJlZGljYXRlcykge1xuICAgICAgLy8gaXRlcmF0ZSBvdmVyIG9iamVjdHNcbiAgICAgIHZhciBvYmplY3RzID0gcHJlZGljYXRlc1twcmVkaWNhdGVdLm9iamVjdHM7XG4gICAgICBmb3IodmFyIG9pID0gMDsgb2kgPCBvYmplY3RzLmxlbmd0aDsgKytvaSkge1xuICAgICAgICB2YXIgb2JqZWN0ID0gb2JqZWN0c1tvaV07XG5cbiAgICAgICAgLy8gY3JlYXRlIFJERiB0cmlwbGVcbiAgICAgICAgdmFyIHRyaXBsZSA9IHt9O1xuXG4gICAgICAgIC8vIGFkZCBzdWJqZWN0XG4gICAgICAgIGlmKHN1YmplY3QuaW5kZXhPZignXzonKSA9PT0gMCkge1xuICAgICAgICAgIHRyaXBsZS5zdWJqZWN0ID0ge3R5cGU6ICdibGFuayBub2RlJywgdmFsdWU6IHN1YmplY3R9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyaXBsZS5zdWJqZWN0ID0ge3R5cGU6ICdJUkknLCB2YWx1ZTogc3ViamVjdH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcHJlZGljYXRlXG4gICAgICAgIGlmKHByZWRpY2F0ZS5pbmRleE9mKCdfOicpID09PSAwKSB7XG4gICAgICAgICAgdHJpcGxlLnByZWRpY2F0ZSA9IHt0eXBlOiAnYmxhbmsgbm9kZScsIHZhbHVlOiBwcmVkaWNhdGV9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyaXBsZS5wcmVkaWNhdGUgPSB7dHlwZTogJ0lSSScsIHZhbHVlOiBwcmVkaWNhdGV9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VyaWFsaXplIFhNTCBsaXRlcmFsXG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdC52YWx1ZTtcbiAgICAgICAgaWYob2JqZWN0LnR5cGUgPT09IFJERl9YTUxfTElURVJBTCkge1xuICAgICAgICAgIC8vIGluaXRpYWxpemUgWE1MU2VyaWFsaXplclxuICAgICAgICAgIGlmKCFYTUxTZXJpYWxpemVyKSB7XG4gICAgICAgICAgICBfZGVmaW5lWE1MU2VyaWFsaXplcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7XG4gICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICBmb3IodmFyIHggPSAwOyB4IDwgb2JqZWN0LnZhbHVlLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICBpZihvYmplY3QudmFsdWVbeF0ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IHNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcob2JqZWN0LnZhbHVlW3hdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihvYmplY3QudmFsdWVbeF0ubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IG9iamVjdC52YWx1ZVt4XS5ub2RlVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIG9iamVjdFxuICAgICAgICB0cmlwbGUub2JqZWN0ID0ge307XG5cbiAgICAgICAgLy8gb2JqZWN0IGlzIGFuIElSSVxuICAgICAgICBpZihvYmplY3QudHlwZSA9PT0gUkRGX09CSkVDVCkge1xuICAgICAgICAgIGlmKG9iamVjdC52YWx1ZS5pbmRleE9mKCdfOicpID09PSAwKSB7XG4gICAgICAgICAgICB0cmlwbGUub2JqZWN0LnR5cGUgPSAnYmxhbmsgbm9kZSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyaXBsZS5vYmplY3QudHlwZSA9ICdJUkknO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvYmplY3QgaXMgYSBsaXRlcmFsXG4gICAgICAgICAgdHJpcGxlLm9iamVjdC50eXBlID0gJ2xpdGVyYWwnO1xuICAgICAgICAgIGlmKG9iamVjdC50eXBlID09PSBSREZfUExBSU5fTElURVJBTCkge1xuICAgICAgICAgICAgaWYob2JqZWN0Lmxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgIHRyaXBsZS5vYmplY3QuZGF0YXR5cGUgPSBSREZfTEFOR1NUUklORztcbiAgICAgICAgICAgICAgdHJpcGxlLm9iamVjdC5sYW5ndWFnZSA9IG9iamVjdC5sYW5ndWFnZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyaXBsZS5vYmplY3QuZGF0YXR5cGUgPSBYU0RfU1RSSU5HO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmlwbGUub2JqZWN0LmRhdGF0eXBlID0gb2JqZWN0LnR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyaXBsZS5vYmplY3QudmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAvLyBhZGQgdHJpcGxlIHRvIGRhdGFzZXQgaW4gZGVmYXVsdCBncmFwaFxuICAgICAgICBkYXRhc2V0WydAZGVmYXVsdCddLnB1c2godHJpcGxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YXNldDtcbn1cblxuLy8gcmVnaXN0ZXIgdGhlIFJERmEgQVBJIFJERiBwYXJzZXJcbmpzb25sZC5yZWdpc3RlclJERlBhcnNlcigncmRmYS1hcGknLCBfcGFyc2VSZGZhQXBpRGF0YSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBJZGVudGlmaWVySXNzdWVyLiBBIElkZW50aWZpZXJJc3N1ZXIgaXNzdWVzIHVuaXF1ZVxuICogaWRlbnRpZmllcnMsIGtlZXBpbmcgdHJhY2sgb2YgYW55IHByZXZpb3VzbHkgaXNzdWVkIGlkZW50aWZpZXJzLlxuICpcbiAqIEBwYXJhbSBwcmVmaXggdGhlIHByZWZpeCB0byB1c2UgKCc8cHJlZml4Pjxjb3VudGVyPicpLlxuICovXG5mdW5jdGlvbiBJZGVudGlmaWVySXNzdWVyKHByZWZpeCkge1xuICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgdGhpcy5jb3VudGVyID0gMDtcbiAgdGhpcy5leGlzdGluZyA9IHt9O1xufVxuanNvbmxkLklkZW50aWZpZXJJc3N1ZXIgPSBJZGVudGlmaWVySXNzdWVyO1xuLy8gYmFja3dhcmRzLWNvbXBhYmlsaXR5XG5qc29ubGQuVW5pcXVlTmFtZXIgPSBJZGVudGlmaWVySXNzdWVyO1xuXG4vKipcbiAqIENvcGllcyB0aGlzIElkZW50aWZpZXJJc3N1ZXIuXG4gKlxuICogQHJldHVybiBhIGNvcHkgb2YgdGhpcyBJZGVudGlmaWVySXNzdWVyLlxuICovXG5JZGVudGlmaWVySXNzdWVyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29weSA9IG5ldyBJZGVudGlmaWVySXNzdWVyKHRoaXMucHJlZml4KTtcbiAgY29weS5jb3VudGVyID0gdGhpcy5jb3VudGVyO1xuICBjb3B5LmV4aXN0aW5nID0gX2Nsb25lKHRoaXMuZXhpc3RpbmcpO1xuICByZXR1cm4gY29weTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbmV3IGlkZW50aWZpZXIgZm9yIHRoZSBnaXZlbiBvbGQgaWRlbnRpZmllciwgd2hlcmUgaWYgbm8gb2xkXG4gKiBpZGVudGlmaWVyIGlzIGdpdmVuIGEgbmV3IGlkZW50aWZpZXIgd2lsbCBiZSBnZW5lcmF0ZWQuXG4gKlxuICogQHBhcmFtIFtvbGRdIHRoZSBvbGQgaWRlbnRpZmllciB0byBnZXQgdGhlIG5ldyBpZGVudGlmaWVyIGZvci5cbiAqXG4gKiBAcmV0dXJuIHRoZSBuZXcgaWRlbnRpZmllci5cbiAqL1xuSWRlbnRpZmllcklzc3Vlci5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbihvbGQpIHtcbiAgLy8gcmV0dXJuIGV4aXN0aW5nIG9sZCBpZGVudGlmaWVyXG4gIGlmKG9sZCAmJiBvbGQgaW4gdGhpcy5leGlzdGluZykge1xuICAgIHJldHVybiB0aGlzLmV4aXN0aW5nW29sZF07XG4gIH1cblxuICAvLyBnZXQgbmV4dCBpZGVudGlmaWVyXG4gIHZhciBpZGVudGlmaWVyID0gdGhpcy5wcmVmaXggKyB0aGlzLmNvdW50ZXI7XG4gIHRoaXMuY291bnRlciArPSAxO1xuXG4gIC8vIHNhdmUgbWFwcGluZ1xuICBpZihvbGQpIHtcbiAgICB0aGlzLmV4aXN0aW5nW29sZF0gPSBpZGVudGlmaWVyO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXI7XG59O1xuLy8gYWxpYXNcbklkZW50aWZpZXJJc3N1ZXIucHJvdG90eXBlLmdldE5hbWUgPSBJZGVudGlmaWVySXNzdWVyLnByb3RvdHlwZS5nZXROYW1lO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2xkIGlkZW50aWZlciBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkIGEgbmV3XG4gKiBpZGVudGlmaWVyLlxuICpcbiAqIEBwYXJhbSBvbGQgdGhlIG9sZCBpZGVudGlmaWVyIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgb2xkIGlkZW50aWZpZXIgaGFzIGJlZW4gYXNzaWduZWQgYSBuZXcgaWRlbnRpZmllciwgZmFsc2VcbiAqICAgaWYgbm90LlxuICovXG5JZGVudGlmaWVySXNzdWVyLnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uKG9sZCkge1xuICByZXR1cm4gKG9sZCBpbiB0aGlzLmV4aXN0aW5nKTtcbn07XG4vLyBhbGlhc1xuSWRlbnRpZmllcklzc3Vlci5wcm90b3R5cGUuaXNOYW1lZCA9IElkZW50aWZpZXJJc3N1ZXIucHJvdG90eXBlLmhhc0lkO1xuXG4vKipcbiAqIEEgUGVybXV0YXRvciBpdGVyYXRlcyBvdmVyIGFsbCBwb3NzaWJsZSBwZXJtdXRhdGlvbnMgb2YgdGhlIGdpdmVuIGFycmF5XG4gKiBvZiBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0gbGlzdCB0aGUgYXJyYXkgb2YgZWxlbWVudHMgdG8gaXRlcmF0ZSBvdmVyLlxuICovXG52YXIgUGVybXV0YXRvciA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgLy8gb3JpZ2luYWwgYXJyYXlcbiAgdGhpcy5saXN0ID0gbGlzdC5zb3J0KCk7XG4gIC8vIGluZGljYXRlcyB3aGV0aGVyIHRoZXJlIGFyZSBtb3JlIHBlcm11dGF0aW9uc1xuICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgLy8gZGlyZWN0aW9uYWwgaW5mbyBmb3IgcGVybXV0YXRpb24gYWxnb3JpdGhtXG4gIHRoaXMubGVmdCA9IHt9O1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHRoaXMubGVmdFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGFub3RoZXIgcGVybXV0YXRpb24uXG4gKlxuICogQHJldHVybiB0cnVlIGlmIHRoZXJlIGlzIGFub3RoZXIgcGVybXV0YXRpb24sIGZhbHNlIGlmIG5vdC5cbiAqL1xuUGVybXV0YXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMuZG9uZTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbmV4dCBwZXJtdXRhdGlvbi4gQ2FsbCBoYXNOZXh0KCkgdG8gZW5zdXJlIHRoZXJlIGlzIGFub3RoZXIgb25lXG4gKiBmaXJzdC5cbiAqXG4gKiBAcmV0dXJuIHRoZSBuZXh0IHBlcm11dGF0aW9uLlxuICovXG5QZXJtdXRhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvcHkgY3VycmVudCBwZXJtdXRhdGlvblxuICB2YXIgcnZhbCA9IHRoaXMubGlzdC5zbGljZSgpO1xuXG4gIC8qIENhbGN1bGF0ZSB0aGUgbmV4dCBwZXJtdXRhdGlvbiB1c2luZyB0aGUgU3RlaW5oYXVzLUpvaG5zb24tVHJvdHRlclxuICAgcGVybXV0YXRpb24gYWxnb3JpdGhtLiAqL1xuXG4gIC8vIGdldCBsYXJnZXN0IG1vYmlsZSBlbGVtZW50IGtcbiAgLy8gKG1vYmlsZTogZWxlbWVudCBpcyBncmVhdGVyIHRoYW4gdGhlIG9uZSBpdCBpcyBsb29raW5nIGF0KVxuICB2YXIgayA9IG51bGw7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5saXN0Lmxlbmd0aDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmxpc3RbaV07XG4gICAgdmFyIGxlZnQgPSB0aGlzLmxlZnRbZWxlbWVudF07XG4gICAgaWYoKGsgPT09IG51bGwgfHwgZWxlbWVudCA+IGspICYmXG4gICAgICAoKGxlZnQgJiYgaSA+IDAgJiYgZWxlbWVudCA+IHRoaXMubGlzdFtpIC0gMV0pIHx8XG4gICAgICAoIWxlZnQgJiYgaSA8IChsZW5ndGggLSAxKSAmJiBlbGVtZW50ID4gdGhpcy5saXN0W2kgKyAxXSkpKSB7XG4gICAgICBrID0gZWxlbWVudDtcbiAgICAgIHBvcyA9IGk7XG4gICAgfVxuICB9XG5cbiAgLy8gbm8gbW9yZSBwZXJtdXRhdGlvbnNcbiAgaWYoayA9PT0gbnVsbCkge1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gc3dhcCBrIGFuZCB0aGUgZWxlbWVudCBpdCBpcyBsb29raW5nIGF0XG4gICAgdmFyIHN3YXAgPSB0aGlzLmxlZnRba10gPyBwb3MgLSAxIDogcG9zICsgMTtcbiAgICB0aGlzLmxpc3RbcG9zXSA9IHRoaXMubGlzdFtzd2FwXTtcbiAgICB0aGlzLmxpc3Rbc3dhcF0gPSBrO1xuXG4gICAgLy8gcmV2ZXJzZSB0aGUgZGlyZWN0aW9uIG9mIGFsbCBlbGVtZW50cyBsYXJnZXIgdGhhbiBrXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBpZih0aGlzLmxpc3RbaV0gPiBrKSB7XG4gICAgICAgIHRoaXMubGVmdFt0aGlzLmxpc3RbaV1dID0gIXRoaXMubGVmdFt0aGlzLmxpc3RbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydmFsO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIERFRklORSBOT1JNQUxJWkFUSU9OIEhBU0ggQVBJIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgTm9ybWFsaXplSGFzaCBmb3IgdXNlIGJ5IHRoZSBnaXZlbiBub3JtYWxpemF0aW9uIGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0gYWxnb3JpdGhtIHRoZSBSREYgRGF0YXNldCBOb3JtYWxpemF0aW9uIGFsZ29yaXRobSB0byB1c2U6XG4gKiAgICAgICAgICAnVVJETkEyMDE1JyBvciAnVVJHTkEyMDEyJy5cbiAqL1xudmFyIE5vcm1hbGl6ZUhhc2ggPSBmdW5jdGlvbihhbGdvcml0aG0pIHtcbiAgaWYoISh0aGlzIGluc3RhbmNlb2YgTm9ybWFsaXplSGFzaCkpIHtcbiAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZUhhc2goYWxnb3JpdGhtKTtcbiAgfVxuICBpZihbJ1VSRE5BMjAxNScsICdVUkdOQTIwMTInXS5pbmRleE9mKGFsZ29yaXRobSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0ludmFsaWQgUkRGIERhdGFzZXQgTm9ybWFsaXphdGlvbiBhbGdvcml0aG06ICcgKyBhbGdvcml0aG0pO1xuICB9XG4gIE5vcm1hbGl6ZUhhc2guX2luaXQuY2FsbCh0aGlzLCBhbGdvcml0aG0pO1xufTtcbk5vcm1hbGl6ZUhhc2guaGFzaE5RdWFkcyA9IGZ1bmN0aW9uKGFsZ29yaXRobSwgbnF1YWRzKSB7XG4gIHZhciBtZCA9IG5ldyBOb3JtYWxpemVIYXNoKGFsZ29yaXRobSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBucXVhZHMubGVuZ3RoOyArK2kpIHtcbiAgICBtZC51cGRhdGUobnF1YWRzW2ldKTtcbiAgfVxuICByZXR1cm4gbWQuZGlnZXN0KCk7XG59O1xuXG4vLyBzd2l0Y2ggZGVmaW5pdGlvbiBvZiBOb3JtYWxpemVIYXNoIGJhc2VkIG9uIGVudmlyb25tZW50XG4oZnVuY3Rpb24oX25vZGVqcykge1xuXG5pZihfbm9kZWpzKSB7XG4gIC8vIGRlZmluZSBOb3JtYWxpemVIYXNoIHVzaW5nIG5hdGl2ZSBjcnlwdG8gbGliXG4gIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgTm9ybWFsaXplSGFzaC5faW5pdCA9IGZ1bmN0aW9uKGFsZ29yaXRobSkge1xuICAgIGlmKGFsZ29yaXRobSA9PT0gJ1VSRE5BMjAxNScpIHtcbiAgICAgIGFsZ29yaXRobSA9ICdzaGEyNTYnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhc3N1bWUgVVJHTkEyMDEyXG4gICAgICBhbGdvcml0aG0gPSAnc2hhMSc7XG4gICAgfVxuICAgIHRoaXMubWQgPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0pO1xuICB9O1xuICBOb3JtYWxpemVIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihtc2cpIHtcbiAgICByZXR1cm4gdGhpcy5tZC51cGRhdGUobXNnLCAndXRmOCcpO1xuICB9O1xuICBOb3JtYWxpemVIYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZC5kaWdlc3QoJ2hleCcpO1xuICB9O1xuICByZXR1cm47XG59XG5cbi8vIGRlZmluZSBOb3JtYWxpemVIYXNoIHVzaW5nIEphdmFTY3JpcHRcbk5vcm1hbGl6ZUhhc2guX2luaXQgPSBmdW5jdGlvbihhbGdvcml0aG0pIHtcbiAgaWYoYWxnb3JpdGhtID09PSAnVVJETkEyMDE1Jykge1xuICAgIGFsZ29yaXRobSA9IG5ldyBzaGEyNTYuQWxnb3JpdGhtKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYXNzdW1lIFVSR05BMjAxMlxuICAgIGFsZ29yaXRobSA9IG5ldyBzaGExLkFsZ29yaXRobSgpO1xuICB9XG4gIHRoaXMubWQgPSBuZXcgTWVzc2FnZURpZ2VzdChhbGdvcml0aG0pO1xufTtcbk5vcm1hbGl6ZUhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG1zZykge1xuICByZXR1cm4gdGhpcy5tZC51cGRhdGUobXNnKTtcbn07XG5Ob3JtYWxpemVIYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWQuZGlnZXN0KCkudG9IZXgoKTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBERUZJTkUgTUVTU0FHRSBESUdFU1QgQVBJIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IE1lc3NhZ2VEaWdlc3QuXG4gKlxuICogQHBhcmFtIGFsZ29yaXRobSB0aGUgYWxnb3JpdGhtIHRvIHVzZS5cbiAqL1xudmFyIE1lc3NhZ2VEaWdlc3QgPSBmdW5jdGlvbihhbGdvcml0aG0pIHtcbiAgaWYoISh0aGlzIGluc3RhbmNlb2YgTWVzc2FnZURpZ2VzdCkpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2VEaWdlc3QoYWxnb3JpdGhtKTtcbiAgfVxuXG4gIHRoaXMuX2FsZ29yaXRobSA9IGFsZ29yaXRobTtcblxuICAvLyBjcmVhdGUgc2hhcmVkIHBhZGRpbmcgYXMgbmVlZGVkXG4gIGlmKCFNZXNzYWdlRGlnZXN0Ll9wYWRkaW5nIHx8XG4gICAgTWVzc2FnZURpZ2VzdC5fcGFkZGluZy5sZW5ndGggPCB0aGlzLl9hbGdvcml0aG0uYmxvY2tTaXplKSB7XG4gICAgTWVzc2FnZURpZ2VzdC5fcGFkZGluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4KTtcbiAgICB2YXIgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHgwMCk7XG4gICAgdmFyIG4gPSA2NDtcbiAgICB3aGlsZShuID4gMCkge1xuICAgICAgaWYobiAmIDEpIHtcbiAgICAgICAgTWVzc2FnZURpZ2VzdC5fcGFkZGluZyArPSBjO1xuICAgICAgfVxuICAgICAgbiA+Pj49IDE7XG4gICAgICBpZihuID4gMCkge1xuICAgICAgICBjICs9IGM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gc3RhcnQgZGlnZXN0IGF1dG9tYXRpY2FsbHkgZm9yIGZpcnN0IHRpbWVcbiAgdGhpcy5zdGFydCgpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgdGhlIGRpZ2VzdC5cbiAqXG4gKiBAcmV0dXJuIHRoaXMgZGlnZXN0IG9iamVjdC5cbiAqL1xuTWVzc2FnZURpZ2VzdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgLy8gdXAgdG8gNTYtYml0IG1lc3NhZ2UgbGVuZ3RoIGZvciBjb252ZW5pZW5jZVxuICB0aGlzLm1lc3NhZ2VMZW5ndGggPSAwO1xuXG4gIC8vIGZ1bGwgbWVzc2FnZSBsZW5ndGhcbiAgdGhpcy5mdWxsTWVzc2FnZUxlbmd0aCA9IFtdO1xuICB2YXIgaW50MzJzID0gdGhpcy5fYWxnb3JpdGhtLm1lc3NhZ2VMZW5ndGhTaXplIC8gNDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGludDMyczsgKytpKSB7XG4gICAgdGhpcy5mdWxsTWVzc2FnZUxlbmd0aC5wdXNoKDApO1xuICB9XG5cbiAgLy8gaW5wdXQgYnVmZmVyXG4gIHRoaXMuX2lucHV0ID0gbmV3IE1lc3NhZ2VEaWdlc3QuQnl0ZUJ1ZmZlcigpO1xuXG4gIC8vIGdldCBzdGFydGluZyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gdGhpcy5fYWxnb3JpdGhtLnN0YXJ0KCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGRpZ2VzdCB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlIGlucHV0LiBUaGUgaW5wdXQgbXVzdCBiZVxuICogYSBzdHJpbmcgb2YgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gbXNnIHRoZSBtZXNzYWdlIGlucHV0IHRvIHVwZGF0ZSB3aXRoIChCeXRlQnVmZmVyIG9yIHN0cmluZykuXG4gKlxuICogQHJldHVybiB0aGlzIGRpZ2VzdCBvYmplY3QuXG4gKi9cbk1lc3NhZ2VEaWdlc3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG1zZykge1xuICAvLyBlbmNvZGUgbWVzc2FnZSBhcyBhIFVURi04IGVuY29kZWQgYmluYXJ5IHN0cmluZ1xuICBtc2cgPSBuZXcgTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChtc2cpKSk7XG5cbiAgLy8gdXBkYXRlIG1lc3NhZ2UgbGVuZ3RoXG4gIHRoaXMubWVzc2FnZUxlbmd0aCArPSBtc2cubGVuZ3RoKCk7XG4gIHZhciBsZW4gPSBtc2cubGVuZ3RoKCk7XG4gIGxlbiA9IFsobGVuIC8gMHgxMDAwMDAwMDApID4+PiAwLCBsZW4gPj4+IDBdO1xuICBmb3IodmFyIGkgPSB0aGlzLmZ1bGxNZXNzYWdlTGVuZ3RoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdGhpcy5mdWxsTWVzc2FnZUxlbmd0aFtpXSArPSBsZW5bMV07XG4gICAgbGVuWzFdID0gbGVuWzBdICsgKCh0aGlzLmZ1bGxNZXNzYWdlTGVuZ3RoW2ldIC8gMHgxMDAwMDAwMDApID4+PiAwKTtcbiAgICB0aGlzLmZ1bGxNZXNzYWdlTGVuZ3RoW2ldID0gdGhpcy5mdWxsTWVzc2FnZUxlbmd0aFtpXSA+Pj4gMDtcbiAgICBsZW5bMF0gPSAoKGxlblsxXSAvIDB4MTAwMDAwMDAwKSA+Pj4gMCk7XG4gIH1cblxuICAvLyBhZGQgYnl0ZXMgdG8gaW5wdXQgYnVmZmVyXG4gIHRoaXMuX2lucHV0LnB1dEJ5dGVzKG1zZy5ieXRlcygpKTtcblxuICAvLyBkaWdlc3QgYmxvY2tzXG4gIHdoaWxlKHRoaXMuX2lucHV0Lmxlbmd0aCgpID49IHRoaXMuX2FsZ29yaXRobS5ibG9ja1NpemUpIHtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5fYWxnb3JpdGhtLmRpZ2VzdCh0aGlzLnN0YXRlLCB0aGlzLl9pbnB1dCk7XG4gIH1cblxuICAvLyBjb21wYWN0IGlucHV0IGJ1ZmZlciBldmVyeSAySyBvciBpZiBlbXB0eVxuICBpZih0aGlzLl9pbnB1dC5yZWFkID4gMjA0OCB8fCB0aGlzLl9pbnB1dC5sZW5ndGgoKSA9PT0gMCkge1xuICAgIHRoaXMuX2lucHV0LmNvbXBhY3QoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBQcm9kdWNlcyB0aGUgZGlnZXN0LlxuICpcbiAqIEByZXR1cm4gYSBieXRlIGJ1ZmZlciBjb250YWluaW5nIHRoZSBkaWdlc3QgdmFsdWUuXG4gKi9cbk1lc3NhZ2VEaWdlc3QucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICAvKiBOb3RlOiBIZXJlIHdlIGNvcHkgdGhlIHJlbWFpbmluZyBieXRlcyBpbiB0aGUgaW5wdXQgYnVmZmVyIGFuZCBhZGQgdGhlXG4gIGFwcHJvcHJpYXRlIHBhZGRpbmcuIFRoZW4gd2UgZG8gdGhlIGZpbmFsIHVwZGF0ZSBvbiBhIGNvcHkgb2YgdGhlIHN0YXRlIHNvXG4gIHRoYXQgaWYgdGhlIHVzZXIgd2FudHMgdG8gZ2V0IGludGVybWVkaWF0ZSBkaWdlc3RzIHRoZXkgY2FuIGRvIHNvLiAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgbXVzdCBiZSBhZGRlZCB0byB0aGUgbWVzc2FnZSB0b1xuICBlbnN1cmUgaXRzIGxlbmd0aCBpcyBhcHByb3ByaWF0ZWx5IGNvbmdydWVudC4gSW4gb3RoZXIgd29yZHMsIHRoZSBkYXRhIHRvXG4gIGJlIGRpZ2VzdGVkIG11c3QgYmUgYSBtdWx0aXBsZSBvZiBgYmxvY2tTaXplYC4gVGhpcyBkYXRhIGluY2x1ZGVzIHRoZVxuICBtZXNzYWdlLCBzb21lIHBhZGRpbmcsIGFuZCB0aGUgbGVuZ3RoIG9mIHRoZSBtZXNzYWdlLiBTaW5jZSB0aGUgbGVuZ3RoIG9mXG4gIHRoZSBtZXNzYWdlIHdpbGwgYmUgZW5jb2RlZCBhcyBgbWVzc2FnZUxlbmd0aFNpemVgIGJ5dGVzLCB0aGF0IG1lYW5zIHRoYXRcbiAgdGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgZGF0YSBtdXN0IGhhdmUgYGJsb2NrU2l6ZWAgLSBgbWVzc2FnZUxlbmd0aFNpemVgXG4gIGJ5dGVzIG9mIG1lc3NhZ2UgYW5kIHBhZGRpbmcuIFRoZXJlZm9yZSwgdGhlIGxlbmd0aCBvZiB0aGUgbWVzc2FnZSBwbHVzIHRoZVxuICBwYWRkaW5nIG11c3QgYmUgY29uZ3J1ZW50IHRvIFggbW9kIGBibG9ja1NpemVgIGJlY2F1c2VcbiAgYGJsb2NrU2l6ZWAgLSBgbWVzc2FnZUxlbmd0aFNpemVgID0gWC5cblxuICBGb3IgZXhhbXBsZSwgU0hBLTEgaXMgY29uZ3J1ZW50IHRvIDQ0OCBtb2QgNTEyIGFuZCBTSEEtNTEyIGlzIGNvbmdydWVudCB0b1xuICA4OTYgbW9kIDEwMjQuIFNIQS0xIHVzZXMgYSBgYmxvY2tTaXplYCBvZiA2NCBieXRlcyAoNTEyIGJpdHMpIGFuZCBhXG4gIGBtZXNzYWdlTGVuZ3RoU2l6ZWAgb2YgOCBieXRlcyAoNjQgYml0cykuIFNIQS01MTIgdXNlcyBhIGBibG9ja1NpemVgIG9mXG4gIDEyOCBieXRlcyAoMTAyNCBiaXRzKSBhbmQgYSBgbWVzc2FnZUxlbmd0aFNpemVgIG9mIDE2IGJ5dGVzICgxMjggYml0cykuXG5cbiAgSW4gb3JkZXIgdG8gZmlsbCB1cCB0aGUgbWVzc2FnZSBsZW5ndGggaXQgbXVzdCBiZSBmaWxsZWQgd2l0aCBwYWRkaW5nIHRoYXRcbiAgYmVnaW5zIHdpdGggMSBiaXQgZm9sbG93ZWQgYnkgYWxsIDAgYml0cy4gUGFkZGluZyBtdXN0ICphbHdheXMqIGJlIHByZXNlbnQsXG4gIHNvIGlmIHRoZSBtZXNzYWdlIGxlbmd0aCBpcyBhbHJlYWR5IGNvbmdydWVudCwgdGhlbiBgYmxvY2tTaXplYCBwYWRkaW5nIGJpdHNcbiAgbXVzdCBiZSBhZGRlZC4gKi9cblxuICAvLyBjcmVhdGUgZmluYWwgYmxvY2tcbiAgdmFyIGZpbmFsQmxvY2sgPSBuZXcgTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyKCk7XG4gIGZpbmFsQmxvY2sucHV0Qnl0ZXModGhpcy5faW5wdXQuYnl0ZXMoKSk7XG5cbiAgLy8gY29tcHV0ZSByZW1haW5pbmcgc2l6ZSB0byBiZSBkaWdlc3RlZCAoaW5jbHVkZSBtZXNzYWdlIGxlbmd0aCBzaXplKVxuICB2YXIgcmVtYWluaW5nID0gKFxuICAgIHRoaXMuZnVsbE1lc3NhZ2VMZW5ndGhbdGhpcy5mdWxsTWVzc2FnZUxlbmd0aC5sZW5ndGggLSAxXSArXG4gICAgdGhpcy5fYWxnb3JpdGhtLm1lc3NhZ2VMZW5ndGhTaXplKTtcblxuICAvLyBhZGQgcGFkZGluZyBmb3Igb3ZlcmZsb3cgYmxvY2tTaXplIC0gb3ZlcmZsb3dcbiAgLy8gX3BhZGRpbmcgc3RhcnRzIHdpdGggMSBieXRlIHdpdGggZmlyc3QgYml0IGlzIHNldCAoYnl0ZSB2YWx1ZSAxMjgpLCB0aGVuXG4gIC8vIHRoZXJlIG1heSBiZSB1cCB0byAoYmxvY2tTaXplIC0gMSkgb3RoZXIgcGFkIGJ5dGVzXG4gIHZhciBvdmVyZmxvdyA9IHJlbWFpbmluZyAmICh0aGlzLl9hbGdvcml0aG0uYmxvY2tTaXplIC0gMSk7XG4gIGZpbmFsQmxvY2sucHV0Qnl0ZXMoTWVzc2FnZURpZ2VzdC5fcGFkZGluZy5zdWJzdHIoXG4gICAgMCwgdGhpcy5fYWxnb3JpdGhtLmJsb2NrU2l6ZSAtIG92ZXJmbG93KSk7XG5cbiAgLy8gc2VyaWFsaXplIG1lc3NhZ2UgbGVuZ3RoIGluIGJpdHMgaW4gYmlnLWVuZGlhbiBvcmRlcjsgc2luY2UgbGVuZ3RoXG4gIC8vIGlzIHN0b3JlZCBpbiBieXRlcyB3ZSBtdWx0aXBseSBieSA4IChsZWZ0IHNoaWZ0IGJ5IDMgYW5kIG1lcmdlIGluXG4gIC8vIHJlbWFpbmRlciBmcm9tIClcbiAgdmFyIG1lc3NhZ2VMZW5ndGggPSBuZXcgTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyKCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmZ1bGxNZXNzYWdlTGVuZ3RoLmxlbmd0aDsgKytpKSB7XG4gICAgbWVzc2FnZUxlbmd0aC5wdXRJbnQzMigodGhpcy5mdWxsTWVzc2FnZUxlbmd0aFtpXSA8PCAzKSB8XG4gICAgICAodGhpcy5mdWxsTWVzc2FnZUxlbmd0aFtpICsgMV0gPj4+IDI4KSk7XG4gIH1cblxuICAvLyB3cml0ZSB0aGUgbGVuZ3RoIG9mIHRoZSBtZXNzYWdlIChhbGdvcml0aG0tc3BlY2lmaWMpXG4gIHRoaXMuX2FsZ29yaXRobS53cml0ZU1lc3NhZ2VMZW5ndGgoZmluYWxCbG9jaywgbWVzc2FnZUxlbmd0aCk7XG5cbiAgLy8gZGlnZXN0IGZpbmFsIGJsb2NrXG4gIHZhciBzdGF0ZSA9IHRoaXMuX2FsZ29yaXRobS5kaWdlc3QodGhpcy5zdGF0ZS5jb3B5KCksIGZpbmFsQmxvY2spO1xuXG4gIC8vIHdyaXRlIHN0YXRlIHRvIGJ1ZmZlclxuICB2YXIgcnZhbCA9IG5ldyBNZXNzYWdlRGlnZXN0LkJ5dGVCdWZmZXIoKTtcbiAgc3RhdGUud3JpdGUocnZhbCk7XG4gIHJldHVybiBydmFsO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2ltcGxlIGJ5dGUgYnVmZmVyIGZvciBtZXNzYWdlIGRpZ2VzdCBvcGVyYXRpb25zLlxuICpcbiAqIEBwYXJhbSBkYXRhIHRoZSBkYXRhIHRvIHB1dCBpbiB0aGUgYnVmZmVyLlxuICovXG5NZXNzYWdlRGlnZXN0LkJ5dGVCdWZmZXIgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kYXRhID0gJyc7XG4gIH1cbiAgdGhpcy5yZWFkID0gMDtcbn07XG5cbi8qKlxuICogUHV0cyBhIDMyLWJpdCBpbnRlZ2VyIGludG8gdGhpcyBidWZmZXIgaW4gYmlnLWVuZGlhbiBvcmRlci5cbiAqXG4gKiBAcGFyYW0gaSB0aGUgMzItYml0IGludGVnZXIuXG4gKi9cbk1lc3NhZ2VEaWdlc3QuQnl0ZUJ1ZmZlci5wcm90b3R5cGUucHV0SW50MzIgPSBmdW5jdGlvbihpKSB7XG4gIHRoaXMuZGF0YSArPSAoXG4gICAgU3RyaW5nLmZyb21DaGFyQ29kZShpID4+IDI0ICYgMHhGRikgK1xuICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoaSA+PiAxNiAmIDB4RkYpICtcbiAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgPj4gOCAmIDB4RkYpICtcbiAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgJiAweEZGKSk7XG59O1xuXG4vKipcbiAqIEdldHMgYSAzMi1iaXQgaW50ZWdlciBmcm9tIHRoaXMgYnVmZmVyIGluIGJpZy1lbmRpYW4gb3JkZXIgYW5kXG4gKiBhZHZhbmNlcyB0aGUgcmVhZCBwb2ludGVyIGJ5IDQuXG4gKlxuICogQHJldHVybiB0aGUgd29yZC5cbiAqL1xuTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyLnByb3RvdHlwZS5nZXRJbnQzMiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcnZhbCA9IChcbiAgICB0aGlzLmRhdGEuY2hhckNvZGVBdCh0aGlzLnJlYWQpIDw8IDI0IF5cbiAgICB0aGlzLmRhdGEuY2hhckNvZGVBdCh0aGlzLnJlYWQgKyAxKSA8PCAxNiBeXG4gICAgdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy5yZWFkICsgMikgPDwgOCBeXG4gICAgdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy5yZWFkICsgMykpO1xuICB0aGlzLnJlYWQgKz0gNDtcbiAgcmV0dXJuIHJ2YWw7XG59O1xuXG4vKipcbiAqIFB1dHMgdGhlIGdpdmVuIGJ5dGVzIGludG8gdGhpcyBidWZmZXIuXG4gKlxuICogQHBhcmFtIGJ5dGVzIHRoZSBieXRlcyBhcyBhIGJpbmFyeS1lbmNvZGVkIHN0cmluZy5cbiAqL1xuTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyLnByb3RvdHlwZS5wdXRCeXRlcyA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHRoaXMuZGF0YSArPSBieXRlcztcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgYnl0ZXMgaW4gdGhpcyBidWZmZXIuXG4gKlxuICogQHJldHVybiBhIHN0cmluZyBmdWxsIG9mIFVURi04IGVuY29kZWQgY2hhcmFjdGVycy5cbiAqL1xuTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLnNsaWNlKHRoaXMucmVhZCk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIG51bWJlciBvZiBieXRlcyBpbiB0aGlzIGJ1ZmZlci5cbiAqXG4gKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gdGhpcyBidWZmZXIuXG4gKi9cbk1lc3NhZ2VEaWdlc3QuQnl0ZUJ1ZmZlci5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoIC0gdGhpcy5yZWFkO1xufTtcblxuLyoqXG4gKiBDb21wYWN0cyB0aGlzIGJ1ZmZlci5cbiAqL1xuTWVzc2FnZURpZ2VzdC5CeXRlQnVmZmVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnJlYWQpO1xuICB0aGlzLnJlYWQgPSAwO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGJ1ZmZlciB0byBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJuIGEgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICovXG5NZXNzYWdlRGlnZXN0LkJ5dGVCdWZmZXIucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBydmFsID0gJyc7XG4gIGZvcih2YXIgaSA9IHRoaXMucmVhZDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiID0gdGhpcy5kYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYoYiA8IDE2KSB7XG4gICAgICBydmFsICs9ICcwJztcbiAgICB9XG4gICAgcnZhbCArPSBiLnRvU3RyaW5nKDE2KTtcbiAgfVxuICByZXR1cm4gcnZhbDtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIERFRklORSBTSEEtMSBBTEdPUklUSE0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudmFyIHNoYTEgPSB7XG4gIC8vIHVzZWQgZm9yIHdvcmQgc3RvcmFnZVxuICBfdzogbnVsbFxufTtcblxuc2hhMS5BbGdvcml0aG0gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5uYW1lID0gJ3NoYTEnLFxuICB0aGlzLmJsb2NrU2l6ZSA9IDY0O1xuICB0aGlzLmRpZ2VzdExlbmd0aCA9IDIwO1xuICB0aGlzLm1lc3NhZ2VMZW5ndGhTaXplID0gODtcbn07XG5cbnNoYTEuQWxnb3JpdGhtLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZighc2hhMS5fdykge1xuICAgIHNoYTEuX3cgPSBuZXcgQXJyYXkoODApO1xuICB9XG4gIHJldHVybiBzaGExLl9jcmVhdGVTdGF0ZSgpO1xufTtcblxuc2hhMS5BbGdvcml0aG0ucHJvdG90eXBlLndyaXRlTWVzc2FnZUxlbmd0aCA9IGZ1bmN0aW9uKFxuICBmaW5hbEJsb2NrLCBtZXNzYWdlTGVuZ3RoKSB7XG4gIC8vIG1lc3NhZ2UgbGVuZ3RoIGlzIGluIGJpdHMgYW5kIGluIGJpZy1lbmRpYW4gb3JkZXI7IHNpbXBseSBhcHBlbmRcbiAgZmluYWxCbG9jay5wdXRCeXRlcyhtZXNzYWdlTGVuZ3RoLmJ5dGVzKCkpO1xufTtcblxuc2hhMS5BbGdvcml0aG0ucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uKHMsIGlucHV0KSB7XG4gIC8vIGNvbnN1bWUgNTEyIGJpdCAoNjQgYnl0ZSkgY2h1bmtzXG4gIHZhciB0LCBhLCBiLCBjLCBkLCBlLCBmLCBpO1xuICB2YXIgbGVuID0gaW5wdXQubGVuZ3RoKCk7XG4gIHZhciBfdyA9IHNoYTEuX3c7XG4gIHdoaWxlKGxlbiA+PSA2NCkge1xuICAgIC8vIGluaXRpYWxpemUgaGFzaCB2YWx1ZSBmb3IgdGhpcyBjaHVua1xuICAgIGEgPSBzLmgwO1xuICAgIGIgPSBzLmgxO1xuICAgIGMgPSBzLmgyO1xuICAgIGQgPSBzLmgzO1xuICAgIGUgPSBzLmg0O1xuXG4gICAgLy8gdGhlIF93IGFycmF5IHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggc2l4dGVlbiAzMi1iaXQgYmlnLWVuZGlhbiB3b3Jkc1xuICAgIC8vIGFuZCB0aGVuIGV4dGVuZGVkIGludG8gODAgMzItYml0IHdvcmRzIGFjY29yZGluZyB0byBTSEEtMSBhbGdvcml0aG1cbiAgICAvLyBhbmQgZm9yIDMyLTc5IHVzaW5nIE1heCBMb2NrdHl1a2hpbidzIG9wdGltaXphdGlvblxuXG4gICAgLy8gcm91bmQgMVxuICAgIGZvcihpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIHQgPSBpbnB1dC5nZXRJbnQzMigpO1xuICAgICAgX3dbaV0gPSB0O1xuICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xuICAgICAgdCA9ICgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyAweDVBODI3OTk5ICsgdDtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gdDtcbiAgICB9XG4gICAgZm9yKDsgaSA8IDIwOyArK2kpIHtcbiAgICAgIHQgPSAoX3dbaSAtIDNdIF4gX3dbaSAtIDhdIF4gX3dbaSAtIDE0XSBeIF93W2kgLSAxNl0pO1xuICAgICAgdCA9ICh0IDw8IDEpIHwgKHQgPj4+IDMxKTtcbiAgICAgIF93W2ldID0gdDtcbiAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcbiAgICAgIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgMHg1QTgyNzk5OSArIHQ7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IHQ7XG4gICAgfVxuICAgIC8vIHJvdW5kIDJcbiAgICBmb3IoOyBpIDwgMzI7ICsraSkge1xuICAgICAgdCA9IChfd1tpIC0gM10gXiBfd1tpIC0gOF0gXiBfd1tpIC0gMTRdIF4gX3dbaSAtIDE2XSk7XG4gICAgICB0ID0gKHQgPDwgMSkgfCAodCA+Pj4gMzEpO1xuICAgICAgX3dbaV0gPSB0O1xuICAgICAgZiA9IGIgXiBjIF4gZDtcbiAgICAgIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgMHg2RUQ5RUJBMSArIHQ7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IHQ7XG4gICAgfVxuICAgIGZvcig7IGkgPCA0MDsgKytpKSB7XG4gICAgICB0ID0gKF93W2kgLSA2XSBeIF93W2kgLSAxNl0gXiBfd1tpIC0gMjhdIF4gX3dbaSAtIDMyXSk7XG4gICAgICB0ID0gKHQgPDwgMikgfCAodCA+Pj4gMzApO1xuICAgICAgX3dbaV0gPSB0O1xuICAgICAgZiA9IGIgXiBjIF4gZDtcbiAgICAgIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgMHg2RUQ5RUJBMSArIHQ7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IHQ7XG4gICAgfVxuICAgIC8vIHJvdW5kIDNcbiAgICBmb3IoOyBpIDwgNjA7ICsraSkge1xuICAgICAgdCA9IChfd1tpIC0gNl0gXiBfd1tpIC0gMTZdIF4gX3dbaSAtIDI4XSBeIF93W2kgLSAzMl0pO1xuICAgICAgdCA9ICh0IDw8IDIpIHwgKHQgPj4+IDMwKTtcbiAgICAgIF93W2ldID0gdDtcbiAgICAgIGYgPSAoYiAmIGMpIHwgKGQgJiAoYiBeIGMpKTtcbiAgICAgIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgMHg4RjFCQkNEQyArIHQ7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IHQ7XG4gICAgfVxuICAgIC8vIHJvdW5kIDRcbiAgICBmb3IoOyBpIDwgODA7ICsraSkge1xuICAgICAgdCA9IChfd1tpIC0gNl0gXiBfd1tpIC0gMTZdIF4gX3dbaSAtIDI4XSBeIF93W2kgLSAzMl0pO1xuICAgICAgdCA9ICh0IDw8IDIpIHwgKHQgPj4+IDMwKTtcbiAgICAgIF93W2ldID0gdDtcbiAgICAgIGYgPSBiIF4gYyBeIGQ7XG4gICAgICB0ID0gKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBmICsgZSArIDB4Q0E2MkMxRDYgKyB0O1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSB0O1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBoYXNoIHN0YXRlXG4gICAgcy5oMCA9IChzLmgwICsgYSkgfCAwO1xuICAgIHMuaDEgPSAocy5oMSArIGIpIHwgMDtcbiAgICBzLmgyID0gKHMuaDIgKyBjKSB8IDA7XG4gICAgcy5oMyA9IChzLmgzICsgZCkgfCAwO1xuICAgIHMuaDQgPSAocy5oNCArIGUpIHwgMDtcblxuICAgIGxlbiAtPSA2NDtcbiAgfVxuXG4gIHJldHVybiBzO1xufTtcblxuc2hhMS5fY3JlYXRlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YXRlID0ge1xuICAgIGgwOiAweDY3NDUyMzAxLFxuICAgIGgxOiAweEVGQ0RBQjg5LFxuICAgIGgyOiAweDk4QkFEQ0ZFLFxuICAgIGgzOiAweDEwMzI1NDc2LFxuICAgIGg0OiAweEMzRDJFMUYwXG4gIH07XG4gIHN0YXRlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcnZhbCA9IHNoYTEuX2NyZWF0ZVN0YXRlKCk7XG4gICAgcnZhbC5oMCA9IHN0YXRlLmgwO1xuICAgIHJ2YWwuaDEgPSBzdGF0ZS5oMTtcbiAgICBydmFsLmgyID0gc3RhdGUuaDI7XG4gICAgcnZhbC5oMyA9IHN0YXRlLmgzO1xuICAgIHJ2YWwuaDQgPSBzdGF0ZS5oNDtcbiAgICByZXR1cm4gcnZhbDtcbiAgfTtcbiAgc3RhdGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgICBidWZmZXIucHV0SW50MzIoc3RhdGUuaDApO1xuICAgIGJ1ZmZlci5wdXRJbnQzMihzdGF0ZS5oMSk7XG4gICAgYnVmZmVyLnB1dEludDMyKHN0YXRlLmgyKTtcbiAgICBidWZmZXIucHV0SW50MzIoc3RhdGUuaDMpO1xuICAgIGJ1ZmZlci5wdXRJbnQzMihzdGF0ZS5oNCk7XG4gIH07XG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gREVGSU5FIFNIQS0yNTYgQUxHT1JJVEhNIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudmFyIHNoYTI1NiA9IHtcbiAgLy8gc2hhcmVkIHN0YXRlXG4gIF9rOiBudWxsLFxuICBfdzogbnVsbFxufTtcblxuc2hhMjU2LkFsZ29yaXRobSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm5hbWUgPSAnc2hhMjU2JyxcbiAgdGhpcy5ibG9ja1NpemUgPSA2NDtcbiAgdGhpcy5kaWdlc3RMZW5ndGggPSAzMjtcbiAgdGhpcy5tZXNzYWdlTGVuZ3RoU2l6ZSA9IDg7XG59O1xuXG5zaGEyNTYuQWxnb3JpdGhtLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZighc2hhMjU2Ll9rKSB7XG4gICAgc2hhMjU2Ll9pbml0KCk7XG4gIH1cbiAgcmV0dXJuIHNoYTI1Ni5fY3JlYXRlU3RhdGUoKTtcbn07XG5cbnNoYTI1Ni5BbGdvcml0aG0ucHJvdG90eXBlLndyaXRlTWVzc2FnZUxlbmd0aCA9IGZ1bmN0aW9uKFxuICBmaW5hbEJsb2NrLCBtZXNzYWdlTGVuZ3RoKSB7XG4gIC8vIG1lc3NhZ2UgbGVuZ3RoIGlzIGluIGJpdHMgYW5kIGluIGJpZy1lbmRpYW4gb3JkZXI7IHNpbXBseSBhcHBlbmRcbiAgZmluYWxCbG9jay5wdXRCeXRlcyhtZXNzYWdlTGVuZ3RoLmJ5dGVzKCkpO1xufTtcblxuc2hhMjU2LkFsZ29yaXRobS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24ocywgaW5wdXQpIHtcbiAgLy8gY29uc3VtZSA1MTIgYml0ICg2NCBieXRlKSBjaHVua3NcbiAgdmFyIHQxLCB0MiwgczAsIHMxLCBjaCwgbWFqLCBpLCBhLCBiLCBjLCBkLCBlLCBmLCBnLCBoO1xuICB2YXIgbGVuID0gaW5wdXQubGVuZ3RoKCk7XG4gIHZhciBfayA9IHNoYTI1Ni5faztcbiAgdmFyIF93ID0gc2hhMjU2Ll93O1xuICB3aGlsZShsZW4gPj0gNjQpIHtcbiAgICAvLyB0aGUgdyBhcnJheSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIHNpeHRlZW4gMzItYml0IGJpZy1lbmRpYW4gd29yZHNcbiAgICAvLyBhbmQgdGhlbiBleHRlbmRlZCBpbnRvIDY0IDMyLWJpdCB3b3JkcyBhY2NvcmRpbmcgdG8gU0hBLTI1NlxuICAgIGZvcihpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIF93W2ldID0gaW5wdXQuZ2V0SW50MzIoKTtcbiAgICB9XG4gICAgZm9yKDsgaSA8IDY0OyArK2kpIHtcbiAgICAgIC8vIFhPUiB3b3JkIDIgd29yZHMgYWdvIHJvdCByaWdodCAxNywgcm90IHJpZ2h0IDE5LCBzaGZ0IHJpZ2h0IDEwXG4gICAgICB0MSA9IF93W2kgLSAyXTtcbiAgICAgIHQxID1cbiAgICAgICAgKCh0MSA+Pj4gMTcpIHwgKHQxIDw8IDE1KSkgXlxuICAgICAgICAoKHQxID4+PiAxOSkgfCAodDEgPDwgMTMpKSBeXG4gICAgICAgICh0MSA+Pj4gMTApO1xuICAgICAgLy8gWE9SIHdvcmQgMTUgd29yZHMgYWdvIHJvdCByaWdodCA3LCByb3QgcmlnaHQgMTgsIHNoZnQgcmlnaHQgM1xuICAgICAgdDIgPSBfd1tpIC0gMTVdO1xuICAgICAgdDIgPVxuICAgICAgICAoKHQyID4+PiA3KSB8ICh0MiA8PCAyNSkpIF5cbiAgICAgICAgKCh0MiA+Pj4gMTgpIHwgKHQyIDw8IDE0KSkgXlxuICAgICAgICAodDIgPj4+IDMpO1xuICAgICAgLy8gc3VtKHQxLCB3b3JkIDcgYWdvLCB0Miwgd29yZCAxNiBhZ28pIG1vZHVsbyAyXjMyXG4gICAgICBfd1tpXSA9ICh0MSArIF93W2kgLSA3XSArIHQyICsgX3dbaSAtIDE2XSkgfCAwO1xuICAgIH1cblxuICAgIC8vIGluaXRpYWxpemUgaGFzaCB2YWx1ZSBmb3IgdGhpcyBjaHVua1xuICAgIGEgPSBzLmgwO1xuICAgIGIgPSBzLmgxO1xuICAgIGMgPSBzLmgyO1xuICAgIGQgPSBzLmgzO1xuICAgIGUgPSBzLmg0O1xuICAgIGYgPSBzLmg1O1xuICAgIGcgPSBzLmg2O1xuICAgIGggPSBzLmg3O1xuXG4gICAgLy8gcm91bmQgZnVuY3Rpb25cbiAgICBmb3IoaSA9IDA7IGkgPCA2NDsgKytpKSB7XG4gICAgICAvLyBTdW0xKGUpXG4gICAgICBzMSA9XG4gICAgICAgICgoZSA+Pj4gNikgfCAoZSA8PCAyNikpIF5cbiAgICAgICAgKChlID4+PiAxMSkgfCAoZSA8PCAyMSkpIF5cbiAgICAgICAgKChlID4+PiAyNSkgfCAoZSA8PCA3KSk7XG4gICAgICAvLyBDaChlLCBmLCBnKSAob3B0aW1pemVkIHRoZSBzYW1lIHdheSBhcyBTSEEtMSlcbiAgICAgIGNoID0gZyBeIChlICYgKGYgXiBnKSk7XG4gICAgICAvLyBTdW0wKGEpXG4gICAgICBzMCA9XG4gICAgICAgICgoYSA+Pj4gMikgfCAoYSA8PCAzMCkpIF5cbiAgICAgICAgKChhID4+PiAxMykgfCAoYSA8PCAxOSkpIF5cbiAgICAgICAgKChhID4+PiAyMikgfCAoYSA8PCAxMCkpO1xuICAgICAgLy8gTWFqKGEsIGIsIGMpIChvcHRpbWl6ZWQgdGhlIHNhbWUgd2F5IGFzIFNIQS0xKVxuICAgICAgbWFqID0gKGEgJiBiKSB8IChjICYgKGEgXiBiKSk7XG5cbiAgICAgIC8vIG1haW4gYWxnb3JpdGhtXG4gICAgICB0MSA9IGggKyBzMSArIGNoICsgX2tbaV0gKyBfd1tpXTtcbiAgICAgIHQyID0gczAgKyBtYWo7XG4gICAgICBoID0gZztcbiAgICAgIGcgPSBmO1xuICAgICAgZiA9IGU7XG4gICAgICBlID0gKGQgKyB0MSkgfCAwO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gYjtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGhhc2ggc3RhdGVcbiAgICBzLmgwID0gKHMuaDAgKyBhKSB8IDA7XG4gICAgcy5oMSA9IChzLmgxICsgYikgfCAwO1xuICAgIHMuaDIgPSAocy5oMiArIGMpIHwgMDtcbiAgICBzLmgzID0gKHMuaDMgKyBkKSB8IDA7XG4gICAgcy5oNCA9IChzLmg0ICsgZSkgfCAwO1xuICAgIHMuaDUgPSAocy5oNSArIGYpIHwgMDtcbiAgICBzLmg2ID0gKHMuaDYgKyBnKSB8IDA7XG4gICAgcy5oNyA9IChzLmg3ICsgaCkgfCAwO1xuICAgIGxlbiAtPSA2NDtcbiAgfVxuXG4gIHJldHVybiBzO1xufTtcblxuc2hhMjU2Ll9jcmVhdGVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhdGUgPSB7XG4gICAgaDA6IDB4NkEwOUU2NjcsXG4gICAgaDE6IDB4QkI2N0FFODUsXG4gICAgaDI6IDB4M0M2RUYzNzIsXG4gICAgaDM6IDB4QTU0RkY1M0EsXG4gICAgaDQ6IDB4NTEwRTUyN0YsXG4gICAgaDU6IDB4OUIwNTY4OEMsXG4gICAgaDY6IDB4MUY4M0Q5QUIsXG4gICAgaDc6IDB4NUJFMENEMTlcbiAgfTtcbiAgc3RhdGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBydmFsID0gc2hhMjU2Ll9jcmVhdGVTdGF0ZSgpO1xuICAgIHJ2YWwuaDAgPSBzdGF0ZS5oMDtcbiAgICBydmFsLmgxID0gc3RhdGUuaDE7XG4gICAgcnZhbC5oMiA9IHN0YXRlLmgyO1xuICAgIHJ2YWwuaDMgPSBzdGF0ZS5oMztcbiAgICBydmFsLmg0ID0gc3RhdGUuaDQ7XG4gICAgcnZhbC5oNSA9IHN0YXRlLmg1O1xuICAgIHJ2YWwuaDYgPSBzdGF0ZS5oNjtcbiAgICBydmFsLmg3ID0gc3RhdGUuaDc7XG4gICAgcmV0dXJuIHJ2YWw7XG4gIH07XG4gIHN0YXRlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgYnVmZmVyLnB1dEludDMyKHN0YXRlLmgwKTtcbiAgICBidWZmZXIucHV0SW50MzIoc3RhdGUuaDEpO1xuICAgIGJ1ZmZlci5wdXRJbnQzMihzdGF0ZS5oMik7XG4gICAgYnVmZmVyLnB1dEludDMyKHN0YXRlLmgzKTtcbiAgICBidWZmZXIucHV0SW50MzIoc3RhdGUuaDQpO1xuICAgIGJ1ZmZlci5wdXRJbnQzMihzdGF0ZS5oNSk7XG4gICAgYnVmZmVyLnB1dEludDMyKHN0YXRlLmg2KTtcbiAgICBidWZmZXIucHV0SW50MzIoc3RhdGUuaDcpO1xuICB9O1xuICByZXR1cm4gc3RhdGU7XG59O1xuXG5zaGEyNTYuX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY3JlYXRlIEsgdGFibGUgZm9yIFNIQS0yNTZcbiAgc2hhMjU2Ll9rID0gW1xuICAgIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gICAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAgIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gICAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAgIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gICAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAgIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gICAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAgIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gICAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAgIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJdO1xuXG4gIC8vIHVzZWQgZm9yIHdvcmQgc3RvcmFnZVxuICBzaGEyNTYuX3cgPSBuZXcgQXJyYXkoNjQpO1xufTtcblxufSkoX25vZGVqcyk7IC8vIGVuZCBkZWZpbml0aW9uIG9mIE5vcm1hbGl6ZUhhc2hcblxuaWYoIVhNTFNlcmlhbGl6ZXIpIHtcblxudmFyIF9kZWZpbmVYTUxTZXJpYWxpemVyID0gZnVuY3Rpb24oKSB7XG4gIFhNTFNlcmlhbGl6ZXIgPSByZXF1aXJlKCd4bWxkb20nKS5YTUxTZXJpYWxpemVyO1xufTtcblxufSAvLyBlbmQgX2RlZmluZVhNTFNlcmlhbGl6ZXJcblxuLy8gZGVmaW5lIFVSTCBwYXJzZXJcbi8vIHBhcnNlVXJpIDEuMi4yXG4vLyAoYykgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+XG4vLyBNSVQgTGljZW5zZVxuLy8gd2l0aCBsb2NhbCBqc29ubGQuanMgbW9kaWZpY2F0aW9uc1xuanNvbmxkLnVybCA9IHt9O1xuanNvbmxkLnVybC5wYXJzZXJzID0ge1xuICBzaW1wbGU6IHtcbiAgICAvLyBSRkMgMzk4NiBiYXNpYyBwYXJ0c1xuICAgIGtleXM6IFsnaHJlZicsJ3NjaGVtZScsJ2F1dGhvcml0eScsJ3BhdGgnLCdxdWVyeScsJ2ZyYWdtZW50J10sXG4gICAgcmVnZXg6IC9eKD86KFteOlxcLz8jXSspOik/KD86XFwvXFwvKFteXFwvPyNdKikpPyhbXj8jXSopKD86XFw/KFteI10qKSk/KD86IyguKikpPy9cbiAgfSxcbiAgZnVsbDoge1xuICAgIGtleXM6IFsnaHJlZicsJ3Byb3RvY29sJywnc2NoZW1lJywnYXV0aG9yaXR5JywnYXV0aCcsJ3VzZXInLCdwYXNzd29yZCcsJ2hvc3RuYW1lJywncG9ydCcsJ3BhdGgnLCdkaXJlY3RvcnknLCdmaWxlJywncXVlcnknLCdmcmFnbWVudCddLFxuICAgIHJlZ2V4OiAvXigoW146XFwvPyNdKyk6KT8oPzpcXC9cXC8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPyhbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyg/OigoKD86W14/I1xcL10qXFwvKSopKFtePyNdKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvXG4gIH1cbn07XG5qc29ubGQudXJsLnBhcnNlID0gZnVuY3Rpb24oc3RyLCBwYXJzZXIpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIgbyA9IGpzb25sZC51cmwucGFyc2Vyc1twYXJzZXIgfHwgJ2Z1bGwnXTtcbiAgdmFyIG0gPSBvLnJlZ2V4LmV4ZWMoc3RyKTtcbiAgdmFyIGkgPSBvLmtleXMubGVuZ3RoO1xuICB3aGlsZShpLS0pIHtcbiAgICBwYXJzZWRbby5rZXlzW2ldXSA9IChtW2ldID09PSB1bmRlZmluZWQpID8gbnVsbCA6IG1baV07XG4gIH1cbiAgcGFyc2VkLm5vcm1hbGl6ZWRQYXRoID0gX3JlbW92ZURvdFNlZ21lbnRzKHBhcnNlZC5wYXRoLCAhIXBhcnNlZC5hdXRob3JpdHkpO1xuICByZXR1cm4gcGFyc2VkO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGRvdCBzZWdtZW50cyBmcm9tIGEgVVJMIHBhdGguXG4gKlxuICogQHBhcmFtIHBhdGggdGhlIHBhdGggdG8gcmVtb3ZlIGRvdCBzZWdtZW50cyBmcm9tLlxuICogQHBhcmFtIGhhc0F1dGhvcml0eSB0cnVlIGlmIHRoZSBVUkwgaGFzIGFuIGF1dGhvcml0eSwgZmFsc2UgaWYgbm90LlxuICovXG5mdW5jdGlvbiBfcmVtb3ZlRG90U2VnbWVudHMocGF0aCwgaGFzQXV0aG9yaXR5KSB7XG4gIHZhciBydmFsID0gJyc7XG5cbiAgaWYocGF0aC5pbmRleE9mKCcvJykgPT09IDApIHtcbiAgICBydmFsID0gJy8nO1xuICB9XG5cbiAgLy8gUkZDIDM5ODYgNS4yLjQgKHJld29ya2VkKVxuICB2YXIgaW5wdXQgPSBwYXRoLnNwbGl0KCcvJyk7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgd2hpbGUoaW5wdXQubGVuZ3RoID4gMCkge1xuICAgIGlmKGlucHV0WzBdID09PSAnLicgfHwgKGlucHV0WzBdID09PSAnJyAmJiBpbnB1dC5sZW5ndGggPiAxKSkge1xuICAgICAgaW5wdXQuc2hpZnQoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZihpbnB1dFswXSA9PT0gJy4uJykge1xuICAgICAgaW5wdXQuc2hpZnQoKTtcbiAgICAgIGlmKGhhc0F1dGhvcml0eSB8fFxuICAgICAgICAob3V0cHV0Lmxlbmd0aCA+IDAgJiYgb3V0cHV0W291dHB1dC5sZW5ndGggLSAxXSAhPT0gJy4uJykpIHtcbiAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGVhZGluZyByZWxhdGl2ZSBVUkwgJy4uJ1xuICAgICAgICBvdXRwdXQucHVzaCgnLi4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBvdXRwdXQucHVzaChpbnB1dC5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBydmFsICsgb3V0cHV0LmpvaW4oJy8nKTtcbn1cblxuaWYoX25vZGVqcykge1xuICAvLyB1c2Ugbm9kZSBkb2N1bWVudCBsb2FkZXIgYnkgZGVmYXVsdFxuICBqc29ubGQudXNlRG9jdW1lbnRMb2FkZXIoJ25vZGUnKTtcbn0gZWxzZSBpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIHVzZSB4aHIgZG9jdW1lbnQgbG9hZGVyIGJ5IGRlZmF1bHRcbiAganNvbmxkLnVzZURvY3VtZW50TG9hZGVyKCd4aHInKTtcbn1cblxuaWYoX25vZGVqcykge1xuICBqc29ubGQudXNlID0gZnVuY3Rpb24oZXh0ZW5zaW9uKSB7XG4gICAgc3dpdGNoKGV4dGVuc2lvbikge1xuICAgICAgLy8gVE9ETzogRGVwcmVjYXRlZCBhcyBvZiAwLjQuMC4gUmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgICBjYXNlICdyZXF1ZXN0JzpcbiAgICAgICAgLy8gdXNlIG5vZGUgSlNPTi1MRCByZXF1ZXN0IGV4dGVuc2lvblxuICAgICAgICBqc29ubGQucmVxdWVzdCA9IHJlcXVpcmUoJ2pzb25sZC1yZXF1ZXN0Jyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEpzb25MZEVycm9yKFxuICAgICAgICAgICdVbmtub3duIGV4dGVuc2lvbi4nLFxuICAgICAgICAgICdqc29ubGQuVW5rbm93bkV4dGVuc2lvbicsIHtleHRlbnNpb246IGV4dGVuc2lvbn0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBleHBvc2UgdmVyc2lvblxuICB2YXIgX21vZHVsZSA9IHtleHBvcnRzOiB7fSwgZmlsZW5hbWU6IF9fZGlybmFtZX07XG4gIHJlcXVpcmUoJ3BrZ2luZm8nKShfbW9kdWxlLCAndmVyc2lvbicpO1xuICBqc29ubGQudmVyc2lvbiA9IF9tb2R1bGUuZXhwb3J0cy52ZXJzaW9uO1xufVxuXG4vLyBlbmQgb2YganNvbmxkIEFQSSBmYWN0b3J5XG5yZXR1cm4ganNvbmxkO1xufTtcblxuLy8gZXh0ZXJuYWwgQVBJczpcblxuLy8gdXNlZCB0byBnZW5lcmF0ZSBhIG5ldyBqc29ubGQgQVBJIGluc3RhbmNlXG52YXIgZmFjdG9yeSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gd3JhcHBlcihmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFjdG9yeSgpO1xuICB9KTtcbn07XG5cbmlmKCFfbm9kZWpzICYmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpKSB7XG4gIC8vIGV4cG9ydCBBTUQgQVBJXG4gIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgLy8gbm93IHRoYXQgbW9kdWxlIGlzIGRlZmluZWQsIHdyYXAgbWFpbiBqc29ubGQgQVBJIGluc3RhbmNlXG4gICAgd3JhcHBlcihmYWN0b3J5KTtcbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfSk7XG59IGVsc2Uge1xuICAvLyB3cmFwIHRoZSBtYWluIGpzb25sZCBBUEkgaW5zdGFuY2VcbiAgd3JhcHBlcihmYWN0b3J5KTtcblxuICBpZih0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gZXhwb3J0IENvbW1vbkpTL25vZGVqcyBBUElcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4gIH1cblxuICBpZihfYnJvd3Nlcikge1xuICAgIC8vIGV4cG9ydCBzaW1wbGUgYnJvd3NlciBBUElcbiAgICBpZih0eXBlb2YganNvbmxkID09PSAndW5kZWZpbmVkJykge1xuICAgICAganNvbmxkID0ganNvbmxkanMgPSBmYWN0b3J5O1xuICAgIH0gZWxzZSB7XG4gICAgICBqc29ubGRqcyA9IGZhY3Rvcnk7XG4gICAgfVxuICB9XG59XG5cbnJldHVybiBmYWN0b3J5O1xuXG59KSgpO1xuIiwiLy8gUmVwbGFjZSBsb2NhbCByZXF1aXJlIGJ5IGEgbGF6eSBsb2FkZXJcbnZhciBnbG9iYWxSZXF1aXJlID0gcmVxdWlyZTtcbnJlcXVpcmUgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gRXhwb3NlIHN1Ym1vZHVsZXNcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIExleGVyOiAgICAgICAgcmVxdWlyZSgnLi9saWIvTjNMZXhlcicpLFxuICBQYXJzZXI6ICAgICAgIHJlcXVpcmUoJy4vbGliL04zUGFyc2VyJyksXG4gIFdyaXRlcjogICAgICAgcmVxdWlyZSgnLi9saWIvTjNXcml0ZXInKSxcbiAgU3RvcmU6ICAgICAgICByZXF1aXJlKCcuL2xpYi9OM1N0b3JlJyksXG4gIFN0cmVhbVBhcnNlcjogcmVxdWlyZSgnLi9saWIvTjNTdHJlYW1QYXJzZXInKSxcbiAgU3RyZWFtV3JpdGVyOiByZXF1aXJlKCcuL2xpYi9OM1N0cmVhbVdyaXRlcicpLFxuICBVdGlsOiAgICAgICAgIHJlcXVpcmUoJy4vbGliL04zVXRpbCcpLFxufTtcblxuLy8gTG9hZCBzdWJtb2R1bGVzIG9uIGZpcnN0IGFjY2Vzc1xuT2JqZWN0LmtleXMoZXhwb3J0cykuZm9yRWFjaChmdW5jdGlvbiAoc3VibW9kdWxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBzdWJtb2R1bGUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlbGV0ZSBleHBvcnRzW3N1Ym1vZHVsZV07XG4gICAgICByZXR1cm4gZXhwb3J0c1tzdWJtb2R1bGVdID0gZ2xvYmFsUmVxdWlyZSgnLi9saWIvTjMnICsgc3VibW9kdWxlKTtcbiAgICB9LFxuICB9KTtcbn0pO1xuIiwiLy8gKipOM0xleGVyKiogdG9rZW5pemVzIE4zIGRvY3VtZW50cy5cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGltbWVkaWF0ZWx5ID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHNldEltbWVkaWF0ZSA6XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZnVuYykgeyBzZXRUaW1lb3V0KGZ1bmMsIDApOyB9O1xuXG4vLyBSZWd1bGFyIGV4cHJlc3Npb24gYW5kIHJlcGxhY2VtZW50IHN0cmluZyB0byBlc2NhcGUgTjMgc3RyaW5ncy5cbi8vIE5vdGUgaG93IHdlIGNhdGNoIGludmFsaWQgdW5pY29kZSBzZXF1ZW5jZXMgc2VwYXJhdGVseSAodGhleSB3aWxsIHRyaWdnZXIgYW4gZXJyb3IpLlxudmFyIGVzY2FwZVNlcXVlbmNlID0gL1xcXFx1KFthLWZBLUYwLTldezR9KXxcXFxcVShbYS1mQS1GMC05XXs4fSl8XFxcXFt1VV18XFxcXCguKS9nO1xudmFyIGVzY2FwZVJlcGxhY2VtZW50cyA9IHtcbiAgJ1xcXFwnOiAnXFxcXCcsIFwiJ1wiOiBcIidcIiwgJ1wiJzogJ1wiJyxcbiAgJ24nOiAnXFxuJywgJ3InOiAnXFxyJywgJ3QnOiAnXFx0JywgJ2YnOiAnXFxmJywgJ2InOiAnXFxiJyxcbiAgJ18nOiAnXycsICd+JzogJ34nLCAnLic6ICcuJywgJy0nOiAnLScsICchJzogJyEnLCAnJCc6ICckJywgJyYnOiAnJicsXG4gICcoJzogJygnLCAnKSc6ICcpJywgJyonOiAnKicsICcrJzogJysnLCAnLCc6ICcsJywgJzsnOiAnOycsICc9JzogJz0nLFxuICAnLyc6ICcvJywgJz8nOiAnPycsICcjJzogJyMnLCAnQCc6ICdAJywgJyUnOiAnJScsXG59O1xudmFyIGlsbGVnYWxJcmlDaGFycyA9IC9bXFx4MDAtXFx4MjA8PlxcXFxcIlxce1xcfVxcfFxcXlxcYF0vO1xuXG4vLyAjIyBDb25zdHJ1Y3RvclxuZnVuY3Rpb24gTjNMZXhlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOM0xleGVyKSlcbiAgICByZXR1cm4gbmV3IE4zTGV4ZXIob3B0aW9ucyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIEluIGxpbmUgbW9kZSAoTi1UcmlwbGVzIG9yIE4tUXVhZHMpLCBvbmx5IHNpbXBsZSBmZWF0dXJlcyBtYXkgYmUgcGFyc2VkXG4gIGlmIChvcHRpb25zLmxpbmVNb2RlKSB7XG4gICAgLy8gRG9uJ3QgdG9rZW5pemUgc3BlY2lhbCBsaXRlcmFsc1xuICAgIHRoaXMuX3RyaXBsZVF1b3RlZFN0cmluZyA9IHRoaXMuX251bWJlciA9IHRoaXMuX2Jvb2xlYW4gPSAvJDBeLztcbiAgICAvLyBTd2FwIHRoZSB0b2tlbml6ZSBtZXRob2QgZm9yIGEgcmVzdHJpY3RlZCB2ZXJzaW9uXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3Rva2VuaXplID0gdGhpcy50b2tlbml6ZTtcbiAgICB0aGlzLnRva2VuaXplID0gZnVuY3Rpb24gKGlucHV0LCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5fdG9rZW5pemUoaW5wdXQsIGZ1bmN0aW9uIChlcnJvciwgdG9rZW4pIHtcbiAgICAgICAgaWYgKCFlcnJvciAmJiAvXig/OklSSXxwcmVmaXhlZHxsaXRlcmFsfGxhbmdjb2RlfHR5cGV8XFwufGVvZikkLy50ZXN0KHRva2VuLnR5cGUpKVxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVycm9yLCB0b2tlbik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlcnJvciB8fCBzZWxmLl9zeW50YXhFcnJvcih0b2tlbi50eXBlLCBjYWxsYmFjayA9IG51bGwpKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgLy8gRW5hYmxlIE4zIGZ1bmN0aW9uYWxpdHkgYnkgZGVmYXVsdFxuICB0aGlzLl9uM01vZGUgPSBvcHRpb25zLm4zICE9PSBmYWxzZTtcbiAgLy8gRGlzYWJsZSBjb21tZW50IHRva2VucyBieSBkZWZhdWx0XG4gIHRoaXMuX2NvbW1lbnRzID0gISFvcHRpb25zLmNvbW1lbnRzO1xufVxuXG5OM0xleGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gIyMgUmVndWxhciBleHByZXNzaW9uc1xuICAvLyBJdCdzIHNsaWdodGx5IGZhc3RlciB0byBoYXZlIHRoZXNlIGFzIHByb3BlcnRpZXMgdGhhbiBhcyBpbi1zY29wZSB2YXJpYWJsZXNcblxuICBfaXJpOiAvXjwoKD86W14gPD57fVxcXFxdfFxcXFxbdVVdKSspPlsgXFx0XSovLCAvLyBJUkkgd2l0aCBlc2NhcGUgc2VxdWVuY2VzOyBuZWVkcyBzYW5pdHkgY2hlY2sgYWZ0ZXIgdW5lc2NhcGluZ1xuICBfdW5lc2NhcGVkSXJpOiAvXjwoW15cXHgwMC1cXHgyMDw+XFxcXFwiXFx7XFx9XFx8XFxeXFxgXSopPlsgXFx0XSovLCAvLyBJUkkgd2l0aG91dCBlc2NhcGUgc2VxdWVuY2VzOyBubyB1bmVzY2FwaW5nXG4gIF91bmVzY2FwZWRTdHJpbmc6IC9eXCJbXlwiXFxcXF0rXCIoPz1bXlwiXFxcXF0pLywgLy8gbm9uLWVtcHR5IHN0cmluZyB3aXRob3V0IGVzY2FwZSBzZXF1ZW5jZXNcbiAgX3NpbmdsZVF1b3RlZFN0cmluZzogL15cIlteXCJcXFxcXSooPzpcXFxcLlteXCJcXFxcXSopKlwiKD89W15cIlxcXFxdKXxeJ1teJ1xcXFxdKig/OlxcXFwuW14nXFxcXF0qKSonKD89W14nXFxcXF0pLyxcbiAgX3RyaXBsZVF1b3RlZFN0cmluZzogL15cIlwiKFwiW15cIlxcXFxdKig/Oig/OlxcXFwufFwiKD8hXCJcIikpW15cIlxcXFxdKikqXCIpXCJcInxeJycoJ1teJ1xcXFxdKig/Oig/OlxcXFwufCcoPyEnJykpW14nXFxcXF0qKSonKScnLyxcbiAgX2xhbmdjb2RlOiAvXkAoW2Etel0rKD86LVthLXowLTldKykqKSg/PVteYS16MC05XFwtXSkvaSxcbiAgX3ByZWZpeDogL14oKD86W0EtWmEtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKD86XFwuP1tcXC0wLTlBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKik/Oig/PVsjXFxzPF0pLyxcbiAgX3ByZWZpeGVkOiAvXigoPzpbQS1aYS16XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyZmZcXHUwMzcwLVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwNzAtXFx1MjE4ZlxcdTJjMDAtXFx1MmZlZlxcdTMwMDEtXFx1ZDdmZlxcdWY5MDAtXFx1ZmRjZlxcdWZkZjAtXFx1ZmZmZF18W1xcdWQ4MDAtXFx1ZGI3Zl1bXFx1ZGMwMC1cXHVkZmZmXSkoPzpcXC4/W1xcLTAtOUEtWl9hLXpcXHhiN1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDNmXFx1MjA0MFxcdTIwNzAtXFx1MjE4ZlxcdTJjMDAtXFx1MmZlZlxcdTMwMDEtXFx1ZDdmZlxcdWY5MDAtXFx1ZmRjZlxcdWZkZjAtXFx1ZmZmZF18W1xcdWQ4MDAtXFx1ZGI3Zl1bXFx1ZGMwMC1cXHVkZmZmXSkqKT86KCg/Oig/OlswLTpBLVpfYS16XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyZmZcXHUwMzcwLVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwNzAtXFx1MjE4ZlxcdTJjMDAtXFx1MmZlZlxcdTMwMDEtXFx1ZDdmZlxcdWY5MDAtXFx1ZmRjZlxcdWZkZjAtXFx1ZmZmZF18W1xcdWQ4MDAtXFx1ZGI3Zl1bXFx1ZGMwMC1cXHVkZmZmXXwlWzAtOWEtZkEtRl17Mn18XFxcXFshIy1cXC87PT9cXC1AX35dKSg/Oig/OltcXC5cXC0wLTpBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl18JVswLTlhLWZBLUZdezJ9fFxcXFxbISMtXFwvOz0/XFwtQF9+XSkqKD86W1xcLTAtOkEtWl9hLXpcXHhiN1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDNmXFx1MjA0MFxcdTIwNzAtXFx1MjE4ZlxcdTJjMDAtXFx1MmZlZlxcdTMwMDEtXFx1ZDdmZlxcdWY5MDAtXFx1ZmRjZlxcdWZkZjAtXFx1ZmZmZF18W1xcdWQ4MDAtXFx1ZGI3Zl1bXFx1ZGMwMC1cXHVkZmZmXXwlWzAtOWEtZkEtRl17Mn18XFxcXFshIy1cXC87PT9cXC1AX35dKSk/KT8pKD86WyBcXHRdK3woPz1cXC4/Wyw7IVxcXlxccyMoKVxcW1xcXVxce1xcfVwiJzxdKSkvLFxuICBfdmFyaWFibGU6IC9eXFw/KD86KD86W0EtWl9hLXpcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSg/OltcXC0wLTpBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKikoPz1bLiw7IVxcXlxccyMoKVxcW1xcXVxce1xcfVwiJzxdKS8sXG4gIF9ibGFuazogL15fOigoPzpbMC05QS1aX2EtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKD86XFwuP1tcXC0wLTlBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKikoPzpbIFxcdF0rfCg/PVxcLj9bLDs6XFxzIygpXFxbXFxdXFx7XFx9XCInPF0pKS8sXG4gIF9udW1iZXI6IC9eW1xcLStdPyg/OlxcZCtcXC4/XFxkKihbZUVdKD86W1xcLVxcK10pP1xcZCspfFxcZCpcXC4/XFxkKykoPz1bLiw7OlxccyMoKVxcW1xcXVxce1xcfVwiJzxdKS8sXG4gIF9ib29sZWFuOiAvXig/OnRydWV8ZmFsc2UpKD89Wy4sO1xccyMoKVxcW1xcXVxce1xcfVwiJzxdKS8sXG4gIF9rZXl3b3JkOiAvXkBbYS16XSsoPz1bXFxzIzxdKS9pLFxuICBfc3BhcnFsS2V5d29yZDogL14oPzpQUkVGSVh8QkFTRXxHUkFQSCkoPz1bXFxzIzxdKS9pLFxuICBfc2hvcnRQcmVkaWNhdGVzOiAvXmEoPz1cXHMrfDwpLyxcbiAgX25ld2xpbmU6IC9eWyBcXHRdKig/OiNbXlxcblxccl0qKT8oPzpcXHJcXG58XFxufFxccilbIFxcdF0qLyxcbiAgX2NvbW1lbnQ6IC8jKFteXFxuXFxyXSopLyxcbiAgX3doaXRlc3BhY2U6IC9eWyBcXHRdKy8sXG4gIF9lbmRPZkZpbGU6IC9eKD86I1teXFxuXFxyXSopPyQvLFxuXG4gIC8vICMjIFByaXZhdGUgbWV0aG9kc1xuXG4gIC8vICMjIyBgX3Rva2VuaXplVG9FbmRgIHRva2VuaXplcyBhcyBmb3IgYXMgcG9zc2libGUsIGVtaXR0aW5nIHRva2VucyB0aHJvdWdoIHRoZSBjYWxsYmFja1xuICBfdG9rZW5pemVUb0VuZDogZnVuY3Rpb24gKGNhbGxiYWNrLCBpbnB1dEZpbmlzaGVkKSB7XG4gICAgLy8gQ29udGludWUgcGFyc2luZyBhcyBmYXIgYXMgcG9zc2libGU7IHRoZSBsb29wIHdpbGwgcmV0dXJuIGV2ZW50dWFsbHlcbiAgICB2YXIgaW5wdXQgPSB0aGlzLl9pbnB1dCwgb3V0cHV0Q29tbWVudHMgPSB0aGlzLl9jb21tZW50cztcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgLy8gQ291bnQgYW5kIHNraXAgd2hpdGVzcGFjZSBsaW5lc1xuICAgICAgdmFyIHdoaXRlU3BhY2VNYXRjaCwgY29tbWVudDtcbiAgICAgIHdoaWxlICh3aGl0ZVNwYWNlTWF0Y2ggPSB0aGlzLl9uZXdsaW5lLmV4ZWMoaW5wdXQpKSB7XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgY29tbWVudFxuICAgICAgICBpZiAob3V0cHV0Q29tbWVudHMgJiYgKGNvbW1lbnQgPSB0aGlzLl9jb21tZW50LmV4ZWMod2hpdGVTcGFjZU1hdGNoWzBdKSkpXG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgeyBsaW5lOiB0aGlzLl9saW5lLCB0eXBlOiAnY29tbWVudCcsIHZhbHVlOiBjb21tZW50WzFdLCBwcmVmaXg6ICcnIH0pO1xuICAgICAgICAvLyBBZHZhbmNlIHRoZSBpbnB1dFxuICAgICAgICBpbnB1dCA9IGlucHV0LnN1YnN0cih3aGl0ZVNwYWNlTWF0Y2hbMF0ubGVuZ3RoLCBpbnB1dC5sZW5ndGgpO1xuICAgICAgICB0aGlzLl9saW5lKys7XG4gICAgICB9XG4gICAgICAvLyBTa2lwIHdoaXRlc3BhY2Ugb24gY3VycmVudCBsaW5lXG4gICAgICBpZiAod2hpdGVTcGFjZU1hdGNoID0gdGhpcy5fd2hpdGVzcGFjZS5leGVjKGlucHV0KSlcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIod2hpdGVTcGFjZU1hdGNoWzBdLmxlbmd0aCwgaW5wdXQubGVuZ3RoKTtcblxuICAgICAgLy8gU3RvcCBmb3Igbm93IGlmIHdlJ3JlIGF0IHRoZSBlbmRcbiAgICAgIGlmICh0aGlzLl9lbmRPZkZpbGUudGVzdChpbnB1dCkpIHtcbiAgICAgICAgLy8gSWYgdGhlIGlucHV0IGlzIGZpbmlzaGVkLCBlbWl0IEVPRlxuICAgICAgICBpZiAoaW5wdXRGaW5pc2hlZCkge1xuICAgICAgICAgIC8vIFRyeSB0byBmaW5kIGEgZmluYWwgY29tbWVudFxuICAgICAgICAgIGlmIChvdXRwdXRDb21tZW50cyAmJiAoY29tbWVudCA9IHRoaXMuX2NvbW1lbnQuZXhlYyhpbnB1dCkpKVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgeyBsaW5lOiB0aGlzLl9saW5lLCB0eXBlOiAnY29tbWVudCcsIHZhbHVlOiBjb21tZW50WzFdLCBwcmVmaXg6ICcnIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKGlucHV0ID0gbnVsbCwgeyBsaW5lOiB0aGlzLl9saW5lLCB0eXBlOiAnZW9mJywgdmFsdWU6ICcnLCBwcmVmaXg6ICcnIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgICAgfVxuXG4gICAgICAvLyBMb29rIGZvciBzcGVjaWZpYyB0b2tlbiB0eXBlcyBiYXNlZCBvbiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICB2YXIgbGluZSA9IHRoaXMuX2xpbmUsIHR5cGUgPSAnJywgdmFsdWUgPSAnJywgcHJlZml4ID0gJycsXG4gICAgICAgICAgZmlyc3RDaGFyID0gaW5wdXRbMF0sIG1hdGNoID0gbnVsbCwgbWF0Y2hMZW5ndGggPSAwLCB1bmVzY2FwZWQsIGluY29uY2x1c2l2ZSA9IGZhbHNlO1xuICAgICAgc3dpdGNoIChmaXJzdENoYXIpIHtcbiAgICAgIGNhc2UgJ14nOlxuICAgICAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IDMgdG9rZW5zIGxvb2thaGVhZCB0byBkaXN0aW5ndWlzaCBeXjxJUkk+IGFuZCBeXnByZTpmaXhlZFxuICAgICAgICBpZiAoaW5wdXQubGVuZ3RoIDwgMylcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgdHlwZVxuICAgICAgICBlbHNlIGlmIChpbnB1dFsxXSA9PT0gJ14nKSB7XG4gICAgICAgICAgdGhpcy5fcHJldlRva2VuVHlwZSA9ICdeXic7XG4gICAgICAgICAgLy8gTW92ZSB0byB0eXBlIElSSSBvciBwcmVmaXhlZCBuYW1lXG4gICAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIoMik7XG4gICAgICAgICAgaWYgKGlucHV0WzBdICE9PSAnPCcpIHtcbiAgICAgICAgICAgIGluY29uY2x1c2l2ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbm8gdHlwZSwgaXQgbXVzdCBiZSBhIHBhdGggZXhwcmVzc2lvblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5fbjNNb2RlKSB7XG4gICAgICAgICAgICBtYXRjaExlbmd0aCA9IDE7XG4gICAgICAgICAgICB0eXBlID0gJ14nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBGYWxsIHRocm91Z2ggaW4gY2FzZSB0aGUgdHlwZSBpcyBhbiBJUklcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGZ1bGwgSVJJIHdpdGhvdXQgZXNjYXBlIHNlcXVlbmNlc1xuICAgICAgICBpZiAobWF0Y2ggPSB0aGlzLl91bmVzY2FwZWRJcmkuZXhlYyhpbnB1dCkpXG4gICAgICAgICAgdHlwZSA9ICdJUkknLCB2YWx1ZSA9IG1hdGNoWzFdO1xuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGZ1bGwgSVJJIHdpdGggZXNjYXBlIHNlcXVlbmNlc1xuICAgICAgICBlbHNlIGlmIChtYXRjaCA9IHRoaXMuX2lyaS5leGVjKGlucHV0KSkge1xuICAgICAgICAgIHVuZXNjYXBlZCA9IHRoaXMuX3VuZXNjYXBlKG1hdGNoWzFdKTtcbiAgICAgICAgICBpZiAodW5lc2NhcGVkID09PSBudWxsIHx8IGlsbGVnYWxJcmlDaGFycy50ZXN0KHVuZXNjYXBlZCkpXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0U3ludGF4RXJyb3IodGhpcyk7XG4gICAgICAgICAgdHlwZSA9ICdJUkknLCB2YWx1ZSA9IHVuZXNjYXBlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGJhY2t3YXJkcyBpbXBsaWNhdGlvbiBhcnJvd1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9uM01vZGUgJiYgaW5wdXQubGVuZ3RoID4gMSAmJiBpbnB1dFsxXSA9PT0gJz0nKVxuICAgICAgICAgIHR5cGUgPSAnaW52ZXJzZScsIG1hdGNoTGVuZ3RoID0gMiwgdmFsdWUgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL2xvZyNpbXBsaWVzJztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ18nOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGJsYW5rIG5vZGUuIFNpbmNlIGl0IGNhbiBjb250YWluIChidXQgbm90IGVuZCB3aXRoKSBhIGRvdCxcbiAgICAgICAgLy8gd2UgYWx3YXlzIG5lZWQgYSBub24tZG90IGNoYXJhY3RlciBiZWZvcmUgZGVjaWRpbmcgaXQgaXMgYSBwcmVmaXhlZCBuYW1lLlxuICAgICAgICAvLyBUaGVyZWZvcmUsIHRyeSBpbnNlcnRpbmcgYSBzcGFjZSBpZiB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dC5cbiAgICAgICAgaWYgKChtYXRjaCA9IHRoaXMuX2JsYW5rLmV4ZWMoaW5wdXQpKSB8fFxuICAgICAgICAgICAgaW5wdXRGaW5pc2hlZCAmJiAobWF0Y2ggPSB0aGlzLl9ibGFuay5leGVjKGlucHV0ICsgJyAnKSkpXG4gICAgICAgICAgdHlwZSA9ICdibGFuaycsIHByZWZpeCA9ICdfJywgdmFsdWUgPSBtYXRjaFsxXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1wiJzpcbiAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgbm9uLWVtcHR5IGRvdWJsZS1xdW90ZWQgbGl0ZXJhbCB3aXRob3V0IGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAgICAgaWYgKG1hdGNoID0gdGhpcy5fdW5lc2NhcGVkU3RyaW5nLmV4ZWMoaW5wdXQpKVxuICAgICAgICAgIHR5cGUgPSAnbGl0ZXJhbCcsIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGFueSBvdGhlciBsaXRlcmFsIHdyYXBwZWQgaW4gYSBwYWlyIG9mIHNpbmdsZSBvciBkb3VibGUgcXVvdGVzXG4gICAgICAgIGVsc2UgaWYgKG1hdGNoID0gdGhpcy5fc2luZ2xlUXVvdGVkU3RyaW5nLmV4ZWMoaW5wdXQpKSB7XG4gICAgICAgICAgdW5lc2NhcGVkID0gdGhpcy5fdW5lc2NhcGUobWF0Y2hbMF0pO1xuICAgICAgICAgIGlmICh1bmVzY2FwZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0U3ludGF4RXJyb3IodGhpcyk7XG4gICAgICAgICAgdHlwZSA9ICdsaXRlcmFsJywgdmFsdWUgPSB1bmVzY2FwZWQucmVwbGFjZSgvXid8JyQvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBsaXRlcmFsIHdyYXBwZWQgaW4gdGhyZWUgcGFpcnMgb2Ygc2luZ2xlIG9yIGRvdWJsZSBxdW90ZXNcbiAgICAgICAgZWxzZSBpZiAobWF0Y2ggPSB0aGlzLl90cmlwbGVRdW90ZWRTdHJpbmcuZXhlYyhpbnB1dCkpIHtcbiAgICAgICAgICB1bmVzY2FwZWQgPSBtYXRjaFsxXSB8fCBtYXRjaFsyXTtcbiAgICAgICAgICAvLyBDb3VudCB0aGUgbmV3bGluZXMgYW5kIGFkdmFuY2UgbGluZSBjb3VudGVyXG4gICAgICAgICAgdGhpcy5fbGluZSArPSB1bmVzY2FwZWQuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLykubGVuZ3RoIC0gMTtcbiAgICAgICAgICB1bmVzY2FwZWQgPSB0aGlzLl91bmVzY2FwZSh1bmVzY2FwZWQpO1xuICAgICAgICAgIGlmICh1bmVzY2FwZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0U3ludGF4RXJyb3IodGhpcyk7XG4gICAgICAgICAgdHlwZSA9ICdsaXRlcmFsJywgdmFsdWUgPSB1bmVzY2FwZWQucmVwbGFjZSgvXid8JyQvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJz8nOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIHZhcmlhYmxlXG4gICAgICAgIGlmICh0aGlzLl9uM01vZGUgJiYgKG1hdGNoID0gdGhpcy5fdmFyaWFibGUuZXhlYyhpbnB1dCkpKVxuICAgICAgICAgIHR5cGUgPSAndmFyJywgdmFsdWUgPSBtYXRjaFswXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGxhbmd1YWdlIGNvZGVcbiAgICAgICAgaWYgKHRoaXMuX3ByZXZUb2tlblR5cGUgPT09ICdsaXRlcmFsJyAmJiAobWF0Y2ggPSB0aGlzLl9sYW5nY29kZS5leGVjKGlucHV0KSkpXG4gICAgICAgICAgdHlwZSA9ICdsYW5nY29kZScsIHZhbHVlID0gbWF0Y2hbMV07XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEga2V5d29yZFxuICAgICAgICBlbHNlIGlmIChtYXRjaCA9IHRoaXMuX2tleXdvcmQuZXhlYyhpbnB1dCkpXG4gICAgICAgICAgdHlwZSA9IG1hdGNoWzBdO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLic6XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgZG90IGFzIHB1bmN0dWF0aW9uXG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDEgPyBpbnB1dEZpbmlzaGVkIDogKGlucHV0WzFdIDwgJzAnIHx8IGlucHV0WzFdID4gJzknKSkge1xuICAgICAgICAgIHR5cGUgPSAnLic7XG4gICAgICAgICAgbWF0Y2hMZW5ndGggPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhbGwgdGhyb3VnaCB0byBudW1lcmljYWwgY2FzZSAoY291bGQgYmUgYSBkZWNpbWFsIGRvdClcblxuICAgICAgY2FzZSAnMCc6XG4gICAgICBjYXNlICcxJzpcbiAgICAgIGNhc2UgJzInOlxuICAgICAgY2FzZSAnMyc6XG4gICAgICBjYXNlICc0JzpcbiAgICAgIGNhc2UgJzUnOlxuICAgICAgY2FzZSAnNic6XG4gICAgICBjYXNlICc3JzpcbiAgICAgIGNhc2UgJzgnOlxuICAgICAgY2FzZSAnOSc6XG4gICAgICBjYXNlICcrJzpcbiAgICAgIGNhc2UgJy0nOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIG51bWJlclxuICAgICAgICBpZiAobWF0Y2ggPSB0aGlzLl9udW1iZXIuZXhlYyhpbnB1dCkpIHtcbiAgICAgICAgICB0eXBlID0gJ2xpdGVyYWwnO1xuICAgICAgICAgIHZhbHVlID0gJ1wiJyArIG1hdGNoWzBdICsgJ1wiXl5odHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSMnICtcbiAgICAgICAgICAgICAgICAgIChtYXRjaFsxXSA/ICdkb3VibGUnIDogKC9eWytcXC1dP1xcZCskLy50ZXN0KG1hdGNoWzBdKSA/ICdpbnRlZ2VyJyA6ICdkZWNpbWFsJykpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAncCc6XG4gICAgICBjYXNlICdQJzpcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnZyc6XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgU1BBUlFMLXN0eWxlIGtleXdvcmRcbiAgICAgICAgaWYgKG1hdGNoID0gdGhpcy5fc3BhcnFsS2V5d29yZC5leGVjKGlucHV0KSlcbiAgICAgICAgICB0eXBlID0gbWF0Y2hbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluY29uY2x1c2l2ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmJzpcbiAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggYSBib29sZWFuXG4gICAgICAgIGlmIChtYXRjaCA9IHRoaXMuX2Jvb2xlYW4uZXhlYyhpbnB1dCkpXG4gICAgICAgICAgdHlwZSA9ICdsaXRlcmFsJywgdmFsdWUgPSAnXCInICsgbWF0Y2hbMF0gKyAnXCJeXmh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW4nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgaW5jb25jbHVzaXZlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhbiBhYmJyZXZpYXRlZCBwcmVkaWNhdGVcbiAgICAgICAgaWYgKG1hdGNoID0gdGhpcy5fc2hvcnRQcmVkaWNhdGVzLmV4ZWMoaW5wdXQpKVxuICAgICAgICAgIHR5cGUgPSAnYWJicmV2aWF0aW9uJywgdmFsdWUgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgaW5jb25jbHVzaXZlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJz0nOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhbiBpbXBsaWNhdGlvbiBhcnJvdyBvciBlcXVhbHMgc2lnblxuICAgICAgICBpZiAodGhpcy5fbjNNb2RlICYmIGlucHV0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0eXBlID0gJ2FiYnJldmlhdGlvbic7XG4gICAgICAgICAgaWYgKGlucHV0WzFdICE9PSAnPicpXG4gICAgICAgICAgICBtYXRjaExlbmd0aCA9IDEsIHZhbHVlID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDIvMDcvb3dsI3NhbWVBcyc7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWF0Y2hMZW5ndGggPSAyLCB2YWx1ZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL3N3YXAvbG9nI2ltcGxpZXMnO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICchJzpcbiAgICAgICAgaWYgKCF0aGlzLl9uM01vZGUpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcsJzpcbiAgICAgIGNhc2UgJzsnOlxuICAgICAgY2FzZSAnWyc6XG4gICAgICBjYXNlICddJzpcbiAgICAgIGNhc2UgJygnOlxuICAgICAgY2FzZSAnKSc6XG4gICAgICBjYXNlICd7JzpcbiAgICAgIGNhc2UgJ30nOlxuICAgICAgICAvLyBUaGUgbmV4dCB0b2tlbiBpcyBwdW5jdHVhdGlvblxuICAgICAgICBtYXRjaExlbmd0aCA9IDE7XG4gICAgICAgIHR5cGUgPSBmaXJzdENoYXI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpbmNvbmNsdXNpdmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBTb21lIGZpcnN0IGNoYXJhY3RlcnMgZG8gbm90IGFsbG93IGFuIGltbWVkaWF0ZSBkZWNpc2lvbiwgc28gaW5zcGVjdCBtb3JlXG4gICAgICBpZiAoaW5jb25jbHVzaXZlKSB7XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgcHJlZml4XG4gICAgICAgIGlmICgodGhpcy5fcHJldlRva2VuVHlwZSA9PT0gJ0BwcmVmaXgnIHx8IHRoaXMuX3ByZXZUb2tlblR5cGUgPT09ICdQUkVGSVgnKSAmJlxuICAgICAgICAgICAgKG1hdGNoID0gdGhpcy5fcHJlZml4LmV4ZWMoaW5wdXQpKSlcbiAgICAgICAgICB0eXBlID0gJ3ByZWZpeCcsIHZhbHVlID0gbWF0Y2hbMV0gfHwgJyc7XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgcHJlZml4ZWQgbmFtZS4gU2luY2UgaXQgY2FuIGNvbnRhaW4gKGJ1dCBub3QgZW5kIHdpdGgpIGEgZG90LFxuICAgICAgICAvLyB3ZSBhbHdheXMgbmVlZCBhIG5vbi1kb3QgY2hhcmFjdGVyIGJlZm9yZSBkZWNpZGluZyBpdCBpcyBhIHByZWZpeGVkIG5hbWUuXG4gICAgICAgIC8vIFRoZXJlZm9yZSwgdHJ5IGluc2VydGluZyBhIHNwYWNlIGlmIHdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSB0aGlzLl9wcmVmaXhlZC5leGVjKGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAgaW5wdXRGaW5pc2hlZCAmJiAobWF0Y2ggPSB0aGlzLl9wcmVmaXhlZC5leGVjKGlucHV0ICsgJyAnKSkpXG4gICAgICAgICAgdHlwZSA9ICdwcmVmaXhlZCcsIHByZWZpeCA9IG1hdGNoWzFdIHx8ICcnLCB2YWx1ZSA9IHRoaXMuX3VuZXNjYXBlKG1hdGNoWzJdKTtcbiAgICAgIH1cblxuICAgICAgLy8gQSB0eXBlIHRva2VuIGlzIHNwZWNpYWw6IGl0IGNhbiBvbmx5IGJlIGVtaXR0ZWQgYWZ0ZXIgYW4gSVJJIG9yIHByZWZpeGVkIG5hbWUgaXMgcmVhZFxuICAgICAgaWYgKHRoaXMuX3ByZXZUb2tlblR5cGUgPT09ICdeXicpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3ByZWZpeGVkJzogdHlwZSA9ICd0eXBlJzsgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0lSSSc6ICAgICAgdHlwZSA9ICd0eXBlSVJJJzsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6ICAgICAgICAgdHlwZSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFdoYXQgaWYgbm90aGluZyBvZiB0aGUgYWJvdmUgd2FzIGZvdW5kP1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIC8vIFdlIGNvdWxkIGJlIGluIHN0cmVhbWluZyBtb2RlLCBhbmQgdGhlbiB3ZSBqdXN0IHdhaXQgZm9yIG1vcmUgaW5wdXQgdG8gYXJyaXZlLlxuICAgICAgICAvLyBPdGhlcndpc2UsIGEgc3ludGF4IGVycm9yIGhhcyBvY2N1cnJlZCBpbiB0aGUgaW5wdXQuXG4gICAgICAgIC8vIE9uZSBleGNlcHRpb246IGVycm9yIG9uIGFuIHVuYWNjb3VudGVkIGxpbmVicmVhayAoPSBub3QgaW5zaWRlIGEgdHJpcGxlLXF1b3RlZCBsaXRlcmFsKS5cbiAgICAgICAgaWYgKGlucHV0RmluaXNoZWQgfHwgKCEvXicnJ3xeXCJcIlwiLy50ZXN0KGlucHV0KSAmJiAvXFxufFxcci8udGVzdChpbnB1dCkpKVxuICAgICAgICAgIHJldHVybiByZXBvcnRTeW50YXhFcnJvcih0aGlzKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgICAgfVxuXG4gICAgICAvLyBFbWl0IHRoZSBwYXJzZWQgdG9rZW5cbiAgICAgIGNhbGxiYWNrKG51bGwsIHsgbGluZTogbGluZSwgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlLCBwcmVmaXg6IHByZWZpeCB9KTtcbiAgICAgIHRoaXMuX3ByZXZUb2tlblR5cGUgPSB0eXBlO1xuXG4gICAgICAvLyBBZHZhbmNlIHRvIG5leHQgcGFydCB0byB0b2tlbml6ZVxuICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIobWF0Y2hMZW5ndGggfHwgbWF0Y2hbMF0ubGVuZ3RoLCBpbnB1dC5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8vIFNpZ25hbHMgdGhlIHN5bnRheCBlcnJvciB0aHJvdWdoIHRoZSBjYWxsYmFja1xuICAgIGZ1bmN0aW9uIHJlcG9ydFN5bnRheEVycm9yKHNlbGYpIHsgY2FsbGJhY2soc2VsZi5fc3ludGF4RXJyb3IoL15cXFMqLy5leGVjKGlucHV0KVswXSkpOyB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfdW5lc2NhcGVgIHJlcGxhY2VzIE4zIGVzY2FwZSBjb2RlcyBieSB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnNcbiAgX3VuZXNjYXBlOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaXRlbS5yZXBsYWNlKGVzY2FwZVNlcXVlbmNlLCBmdW5jdGlvbiAoc2VxdWVuY2UsIHVuaWNvZGU0LCB1bmljb2RlOCwgZXNjYXBlZENoYXIpIHtcbiAgICAgICAgdmFyIGNoYXJDb2RlO1xuICAgICAgICBpZiAodW5pY29kZTQpIHtcbiAgICAgICAgICBjaGFyQ29kZSA9IHBhcnNlSW50KHVuaWNvZGU0LCAxNik7XG4gICAgICAgICAgaWYgKGlzTmFOKGNoYXJDb2RlKSkgdGhyb3cgbmV3IEVycm9yKCk7IC8vIGNhbiBuZXZlciBoYXBwZW4gKHJlZ2V4KSwgYnV0IGhlbHBzIHBlcmZvcm1hbmNlXG4gICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pY29kZTgpIHtcbiAgICAgICAgICBjaGFyQ29kZSA9IHBhcnNlSW50KHVuaWNvZGU4LCAxNik7XG4gICAgICAgICAgaWYgKGlzTmFOKGNoYXJDb2RlKSkgdGhyb3cgbmV3IEVycm9yKCk7IC8vIGNhbiBuZXZlciBoYXBwZW4gKHJlZ2V4KSwgYnV0IGhlbHBzIHBlcmZvcm1hbmNlXG4gICAgICAgICAgaWYgKGNoYXJDb2RlIDw9IDB4RkZGRikgcmV0dXJuIGZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZSgweEQ4MDAgKyAoKGNoYXJDb2RlIC09IDB4MTAwMDApIC8gMHg0MDApLCAweERDMDAgKyAoY2hhckNvZGUgJiAweDNGRikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IGVzY2FwZVJlcGxhY2VtZW50c1tlc2NhcGVkQ2hhcl07XG4gICAgICAgICAgaWYgKCFyZXBsYWNlbWVudClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgIHJldHVybiByZXBsYWNlbWVudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyByZXR1cm4gbnVsbDsgfVxuICB9LFxuXG4gIC8vICMjIyBgX3N5bnRheEVycm9yYCBjcmVhdGVzIGEgc3ludGF4IGVycm9yIGZvciB0aGUgZ2l2ZW4gaXNzdWVcbiAgX3N5bnRheEVycm9yOiBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignVW5leHBlY3RlZCBcIicgKyBpc3N1ZSArICdcIiBvbiBsaW5lICcgKyB0aGlzLl9saW5lICsgJy4nKTtcbiAgfSxcblxuXG4gIC8vICMjIFB1YmxpYyBtZXRob2RzXG5cbiAgLy8gIyMjIGB0b2tlbml6ZWAgc3RhcnRzIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiBhbiBOMyBkb2N1bWVudCBpbnRvIGFuIGFycmF5IG9mIHRva2Vucy5cbiAgLy8gVGhlIGlucHV0IGNhbiBiZSBhIHN0cmluZyBvciBhIHN0cmVhbS5cbiAgdG9rZW5pemU6IGZ1bmN0aW9uIChpbnB1dCwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5fbGluZSA9IDE7XG5cbiAgICAvLyBJZiB0aGUgaW5wdXQgaXMgYSBzdHJpbmcsIGNvbnRpbnVvdXNseSBlbWl0IHRva2VucyB0aHJvdWdoIHRoZSBjYWxsYmFjayB1bnRpbCB0aGUgZW5kXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAvLyBJZiBhIGNhbGxiYWNrIHdhcyBwYXNzZWQsIGFzeW5jaHJvbm91c2x5IGNhbGwgaXRcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIGltbWVkaWF0ZWx5KGZ1bmN0aW9uICgpIHsgc2VsZi5fdG9rZW5pemVUb0VuZChjYWxsYmFjaywgdHJ1ZSk7IH0pO1xuICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHBhc3NlZCwgdG9rZW5pemUgc3luY2hyb25vdXNseSBhbmQgcmV0dXJuXG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdLCBlcnJvcjtcbiAgICAgICAgdGhpcy5fdG9rZW5pemVUb0VuZChmdW5jdGlvbiAoZSwgdCkgeyBlID8gKGVycm9yID0gZSkgOiB0b2tlbnMucHVzaCh0KTsgfSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgdGhlIGlucHV0IG11c3QgYmUgYSBzdHJlYW1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX2lucHV0ID0gJyc7XG4gICAgICBpZiAodHlwZW9mIGlucHV0LnNldEVuY29kaW5nID09PSAnZnVuY3Rpb24nKVxuICAgICAgICBpbnB1dC5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgLy8gQWRkcyB0aGUgZGF0YSBjaHVuayB0byB0aGUgYnVmZmVyIGFuZCBwYXJzZXMgYXMgZmFyIGFzIHBvc3NpYmxlXG4gICAgICBpbnB1dC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChzZWxmLl9pbnB1dCAhPT0gbnVsbCkge1xuICAgICAgICAgIHNlbGYuX2lucHV0ICs9IGRhdGE7XG4gICAgICAgICAgc2VsZi5fdG9rZW5pemVUb0VuZChjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFBhcnNlcyB1bnRpbCB0aGUgZW5kXG4gICAgICBpbnB1dC5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5faW5wdXQgIT09IG51bGwpXG4gICAgICAgICAgc2VsZi5fdG9rZW5pemVUb0VuZChjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyAjIyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IE4zTGV4ZXI7XG4iLCIvLyAqKk4zUGFyc2VyKiogcGFyc2VzIE4zIGRvY3VtZW50cy5cbnZhciBOM0xleGVyID0gcmVxdWlyZSgnLi9OM0xleGVyJyk7XG5cbnZhciBSREZfUFJFRklYID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnLFxuICAgIFJERl9OSUwgICAgPSBSREZfUFJFRklYICsgJ25pbCcsXG4gICAgUkRGX0ZJUlNUICA9IFJERl9QUkVGSVggKyAnZmlyc3QnLFxuICAgIFJERl9SRVNUICAgPSBSREZfUFJFRklYICsgJ3Jlc3QnO1xuXG52YXIgUVVBTlRJRklFUlNfR1JBUEggPSAndXJuOm4zOnF1YW50aWZpZXJzJztcblxudmFyIGFic29sdXRlSVJJID0gL15bYS16XVthLXowLTkrLi1dKjovaSxcbiAgICBzY2hlbWVBdXRob3JpdHkgPSAvXig/OihbYS16XVthLXowLTkrLi1dKjopKT8oPzpcXC9cXC9bXlxcL10qKT8vaSxcbiAgICBkb3RTZWdtZW50cyA9IC8oPzpefFxcLylcXC5cXC4/KD86JHxbXFwvIz9dKS87XG5cbi8vIFRoZSBuZXh0IElEIGZvciBuZXcgYmxhbmsgbm9kZXNcbnZhciBibGFua05vZGVQcmVmaXggPSAwLCBibGFua05vZGVDb3VudCA9IDA7XG5cbi8vICMjIENvbnN0cnVjdG9yXG5mdW5jdGlvbiBOM1BhcnNlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOM1BhcnNlcikpXG4gICAgcmV0dXJuIG5ldyBOM1BhcnNlcihvcHRpb25zKTtcbiAgdGhpcy5fY29udGV4dFN0YWNrID0gW107XG4gIHRoaXMuX2dyYXBoID0gbnVsbDtcblxuICAvLyBTZXQgdGhlIGRvY3VtZW50IElSSVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5fc2V0QmFzZShvcHRpb25zLmRvY3VtZW50SVJJKTtcblxuICAvLyBTZXQgc3VwcG9ydGVkIGZlYXR1cmVzIGRlcGVuZGluZyBvbiB0aGUgZm9ybWF0XG4gIHZhciBmb3JtYXQgPSAodHlwZW9mIG9wdGlvbnMuZm9ybWF0ID09PSAnc3RyaW5nJykgP1xuICAgICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXQubWF0Y2goL1xcdyokLylbMF0udG9Mb3dlckNhc2UoKSA6ICcnLFxuICAgICAgaXNUdXJ0bGUgPSBmb3JtYXQgPT09ICd0dXJ0bGUnLCBpc1RyaUcgPSBmb3JtYXQgPT09ICd0cmlnJyxcbiAgICAgIGlzTlRyaXBsZXMgPSAvdHJpcGxlLy50ZXN0KGZvcm1hdCksIGlzTlF1YWRzID0gL3F1YWQvLnRlc3QoZm9ybWF0KSxcbiAgICAgIGlzTjMgPSB0aGlzLl9uM01vZGUgPSAvbjMvLnRlc3QoZm9ybWF0KSxcbiAgICAgIGlzTGluZU1vZGUgPSBpc05UcmlwbGVzIHx8IGlzTlF1YWRzO1xuICBpZiAoISh0aGlzLl9zdXBwb3J0c05hbWVkR3JhcGhzID0gIShpc1R1cnRsZSB8fCBpc04zKSkpXG4gICAgdGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaCA9IHRoaXMuX3JlYWRQcmVkaWNhdGU7XG4gIHRoaXMuX3N1cHBvcnRzUXVhZHMgPSAhKGlzVHVydGxlIHx8IGlzVHJpRyB8fCBpc05UcmlwbGVzIHx8IGlzTjMpO1xuICAvLyBEaXNhYmxlIHJlbGF0aXZlIElSSXMgaW4gTi1UcmlwbGVzIG9yIE4tUXVhZHMgbW9kZVxuICBpZiAoaXNMaW5lTW9kZSkge1xuICAgIHRoaXMuX2Jhc2UgPSAnJztcbiAgICB0aGlzLl9yZXNvbHZlSVJJID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICB0aGlzLl9lcnJvcignRGlzYWxsb3dlZCByZWxhdGl2ZSBJUkknLCB0b2tlbik7XG4gICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2sgPSBub29wLCB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIHRoaXMuX2JsYW5rTm9kZVByZWZpeCA9IHR5cGVvZiBvcHRpb25zLmJsYW5rTm9kZVByZWZpeCAhPT0gJ3N0cmluZycgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ186JyArIG9wdGlvbnMuYmxhbmtOb2RlUHJlZml4LnJlcGxhY2UoL15fOi8sICcnKTtcbiAgdGhpcy5fbGV4ZXIgPSBvcHRpb25zLmxleGVyIHx8IG5ldyBOM0xleGVyKHsgbGluZU1vZGU6IGlzTGluZU1vZGUsIG4zOiBpc04zIH0pO1xuICAvLyBEaXNhYmxlIGV4cGxpY2l0IHF1YW50aWZpZXJzIGJ5IGRlZmF1bHRcbiAgdGhpcy5fZXhwbGljaXRRdWFudGlmaWVycyA9ICEhb3B0aW9ucy5leHBsaWNpdFF1YW50aWZpZXJzO1xufVxuXG4vLyAjIyBQcml2YXRlIGNsYXNzIG1ldGhvZHNcblxuLy8gIyMjIGBfcmVzZXRCbGFua05vZGVJZHNgIHJlc3RhcnRzIGJsYW5rIG5vZGUgaWRlbnRpZmljYXRpb25cbk4zUGFyc2VyLl9yZXNldEJsYW5rTm9kZUlkcyA9IGZ1bmN0aW9uICgpIHtcbiAgYmxhbmtOb2RlUHJlZml4ID0gYmxhbmtOb2RlQ291bnQgPSAwO1xufTtcblxuTjNQYXJzZXIucHJvdG90eXBlID0ge1xuICAvLyAjIyBQcml2YXRlIG1ldGhvZHNcblxuICAvLyAjIyMgYF9zZXRCYXNlYCBzZXRzIHRoZSBiYXNlIElSSSB0byByZXNvbHZlIHJlbGF0aXZlIElSSXNcbiAgX3NldEJhc2U6IGZ1bmN0aW9uIChiYXNlSVJJKSB7XG4gICAgaWYgKCFiYXNlSVJJKVxuICAgICAgdGhpcy5fYmFzZSA9IG51bGw7XG4gICAgZWxzZSB7XG4gICAgICAvLyBSZW1vdmUgZnJhZ21lbnQgaWYgcHJlc2VudFxuICAgICAgdmFyIGZyYWdtZW50UG9zID0gYmFzZUlSSS5pbmRleE9mKCcjJyk7XG4gICAgICBpZiAoZnJhZ21lbnRQb3MgPj0gMClcbiAgICAgICAgYmFzZUlSSSA9IGJhc2VJUkkuc3Vic3RyKDAsIGZyYWdtZW50UG9zKTtcbiAgICAgIC8vIFNldCBiYXNlIElSSSBhbmQgaXRzIGNvbXBvbmVudHNcbiAgICAgIHRoaXMuX2Jhc2UgPSBiYXNlSVJJO1xuICAgICAgdGhpcy5fYmFzZVBhdGggICA9IGJhc2VJUkkuaW5kZXhPZignLycpIDwgMCA/IGJhc2VJUkkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VJUkkucmVwbGFjZSgvW15cXC8/XSooPzpcXD8uKik/JC8sICcnKTtcbiAgICAgIGJhc2VJUkkgPSBiYXNlSVJJLm1hdGNoKHNjaGVtZUF1dGhvcml0eSk7XG4gICAgICB0aGlzLl9iYXNlUm9vdCAgID0gYmFzZUlSSVswXTtcbiAgICAgIHRoaXMuX2Jhc2VTY2hlbWUgPSBiYXNlSVJJWzFdO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9zYXZlQ29udGV4dGAgc3RvcmVzIHRoZSBjdXJyZW50IHBhcnNpbmcgY29udGV4dFxuICAvLyB3aGVuIGVudGVyaW5nIGEgbmV3IHNjb3BlIChsaXN0LCBibGFuayBub2RlLCBmb3JtdWxhKVxuICBfc2F2ZUNvbnRleHQ6IGZ1bmN0aW9uICh0eXBlLCBncmFwaCwgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICB2YXIgbjNNb2RlID0gdGhpcy5fbjNNb2RlO1xuICAgIHRoaXMuX2NvbnRleHRTdGFjay5wdXNoKHtcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsIHByZWRpY2F0ZTogcHJlZGljYXRlLCBvYmplY3Q6IG9iamVjdCxcbiAgICAgIGdyYXBoOiBncmFwaCwgdHlwZTogdHlwZSxcbiAgICAgIGludmVyc2U6IG4zTW9kZSA/IHRoaXMuX2ludmVyc2VQcmVkaWNhdGUgOiBmYWxzZSxcbiAgICAgIGJsYW5rUHJlZml4OiBuM01vZGUgPyB0aGlzLl9wcmVmaXhlcy5fIDogJycsXG4gICAgICBxdWFudGlmaWVkOiBuM01vZGUgPyB0aGlzLl9xdWFudGlmaWVkIDogbnVsbCxcbiAgICB9KTtcbiAgICAvLyBUaGUgc2V0dGluZ3MgYmVsb3cgb25seSBhcHBseSB0byBOMyBzdHJlYW1zXG4gICAgaWYgKG4zTW9kZSkge1xuICAgICAgLy8gRXZlcnkgbmV3IHNjb3BlIHJlc2V0cyB0aGUgcHJlZGljYXRlIGRpcmVjdGlvblxuICAgICAgdGhpcy5faW52ZXJzZVByZWRpY2F0ZSA9IGZhbHNlO1xuICAgICAgLy8gSW4gTjMsIGJsYW5rIG5vZGVzIGFyZSBzY29wZWQgdG8gYSBmb3JtdWxhXG4gICAgICAvLyAodXNpbmcgYSBkb3QgYXMgc2VwYXJhdG9yLCBhcyBhIGJsYW5rIG5vZGUgbGFiZWwgY2Fubm90IHN0YXJ0IHdpdGggaXQpXG4gICAgICB0aGlzLl9wcmVmaXhlcy5fID0gdGhpcy5fZ3JhcGggKyAnLic7XG4gICAgICAvLyBRdWFudGlmaWVycyBhcmUgc2NvcGVkIHRvIGEgZm9ybXVsYVxuICAgICAgdGhpcy5fcXVhbnRpZmllZCA9IE9iamVjdC5jcmVhdGUodGhpcy5fcXVhbnRpZmllZCk7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3Jlc3RvcmVDb250ZXh0YCByZXN0b3JlcyB0aGUgcGFyZW50IGNvbnRleHRcbiAgLy8gd2hlbiBsZWF2aW5nIGEgc2NvcGUgKGxpc3QsIGJsYW5rIG5vZGUsIGZvcm11bGEpXG4gIF9yZXN0b3JlQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5fY29udGV4dFN0YWNrLnBvcCgpLCBuM01vZGUgPSB0aGlzLl9uM01vZGU7XG4gICAgdGhpcy5fc3ViamVjdCAgID0gY29udGV4dC5zdWJqZWN0O1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IGNvbnRleHQucHJlZGljYXRlO1xuICAgIHRoaXMuX29iamVjdCAgICA9IGNvbnRleHQub2JqZWN0O1xuICAgIHRoaXMuX2dyYXBoICAgICA9IGNvbnRleHQuZ3JhcGg7XG4gICAgLy8gVGhlIHNldHRpbmdzIGJlbG93IG9ubHkgYXBwbHkgdG8gTjMgc3RyZWFtc1xuICAgIGlmIChuM01vZGUpIHtcbiAgICAgIHRoaXMuX2ludmVyc2VQcmVkaWNhdGUgPSBjb250ZXh0LmludmVyc2U7XG4gICAgICB0aGlzLl9wcmVmaXhlcy5fID0gY29udGV4dC5ibGFua1ByZWZpeDtcbiAgICAgIHRoaXMuX3F1YW50aWZpZWQgPSBjb250ZXh0LnF1YW50aWZpZWQ7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRJblRvcENvbnRleHRgIHJlYWRzIGEgdG9rZW4gd2hlbiBpbiB0aGUgdG9wIGNvbnRleHRcbiAgX3JlYWRJblRvcENvbnRleHQ6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIC8vIElmIGFuIEVPRiB0b2tlbiBhcnJpdmVzIGluIHRoZSB0b3AgY29udGV4dCwgc2lnbmFsIHRoYXQgd2UncmUgZG9uZVxuICAgIGNhc2UgJ2VvZic6XG4gICAgICBpZiAodGhpcy5fZ3JhcGggIT09IG51bGwpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5jbG9zZWQgZ3JhcGgnLCB0b2tlbik7XG4gICAgICBkZWxldGUgdGhpcy5fcHJlZml4ZXMuXztcbiAgICAgIHJldHVybiB0aGlzLl9jYWxsYmFjayhudWxsLCBudWxsLCB0aGlzLl9wcmVmaXhlcyk7XG4gICAgLy8gSXQgY291bGQgYmUgYSBwcmVmaXggZGVjbGFyYXRpb25cbiAgICBjYXNlICdQUkVGSVgnOlxuICAgICAgdGhpcy5fc3BhcnFsU3R5bGUgPSB0cnVlO1xuICAgIGNhc2UgJ0BwcmVmaXgnOlxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRQcmVmaXg7XG4gICAgLy8gSXQgY291bGQgYmUgYSBiYXNlIGRlY2xhcmF0aW9uXG4gICAgY2FzZSAnQkFTRSc6XG4gICAgICB0aGlzLl9zcGFycWxTdHlsZSA9IHRydWU7XG4gICAgY2FzZSAnQGJhc2UnOlxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRCYXNlSVJJO1xuICAgIC8vIEl0IGNvdWxkIGJlIGEgZ3JhcGhcbiAgICBjYXNlICd7JzpcbiAgICAgIGlmICh0aGlzLl9zdXBwb3J0c05hbWVkR3JhcGhzKSB7XG4gICAgICAgIHRoaXMuX2dyYXBoID0gJyc7XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZFN1YmplY3Q7XG4gICAgICB9XG4gICAgY2FzZSAnR1JBUEgnOlxuICAgICAgaWYgKHRoaXMuX3N1cHBvcnRzTmFtZWRHcmFwaHMpXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkTmFtZWRHcmFwaExhYmVsO1xuICAgIC8vIE90aGVyd2lzZSwgdGhlIG5leHQgdG9rZW4gbXVzdCBiZSBhIHN1YmplY3RcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRTdWJqZWN0KHRva2VuKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZEVudGl0eWAgcmVhZHMgYW4gSVJJLCBwcmVmaXhlZCBuYW1lLCBibGFuayBub2RlLCBvciB2YXJpYWJsZVxuICBfcmVhZEVudGl0eTogZnVuY3Rpb24gKHRva2VuLCBxdWFudGlmaWVyKSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIC8vIFJlYWQgYSByZWxhdGl2ZSBvciBhYnNvbHV0ZSBJUklcbiAgICBjYXNlICdJUkknOlxuICAgIGNhc2UgJ3R5cGVJUkknOlxuICAgICAgdmFsdWUgPSAodGhpcy5fYmFzZSA9PT0gbnVsbCB8fCBhYnNvbHV0ZUlSSS50ZXN0KHRva2VuLnZhbHVlKSkgP1xuICAgICAgICAgICAgICB0b2tlbi52YWx1ZSA6IHRoaXMuX3Jlc29sdmVJUkkodG9rZW4pO1xuICAgICAgYnJlYWs7XG4gICAgLy8gUmVhZCBhIGJsYW5rIG5vZGUgb3IgcHJlZml4ZWQgbmFtZVxuICAgIGNhc2UgJ3R5cGUnOlxuICAgIGNhc2UgJ2JsYW5rJzpcbiAgICBjYXNlICdwcmVmaXhlZCc6XG4gICAgICB2YXIgcHJlZml4ID0gdGhpcy5fcHJlZml4ZXNbdG9rZW4ucHJlZml4XTtcbiAgICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmRlZmluZWQgcHJlZml4IFwiJyArIHRva2VuLnByZWZpeCArICc6XCInLCB0b2tlbik7XG4gICAgICB2YWx1ZSA9IHByZWZpeCArIHRva2VuLnZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgLy8gUmVhZCBhIHZhcmlhYmxlXG4gICAgY2FzZSAndmFyJzpcbiAgICAgIHJldHVybiB0b2tlbi52YWx1ZTtcbiAgICAvLyBFdmVyeXRoaW5nIGVsc2UgaXMgbm90IGFuIGVudGl0eVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGVudGl0eSBidXQgZ290ICcgKyB0b2tlbi50eXBlLCB0b2tlbik7XG4gICAgfVxuICAgIC8vIEluIE4zIG1vZGUsIHJlcGxhY2UgdGhlIGVudGl0eSBpZiBpdCBpcyBxdWFudGlmaWVkXG4gICAgaWYgKCFxdWFudGlmaWVyICYmIHRoaXMuX24zTW9kZSAmJiAodmFsdWUgaW4gdGhpcy5fcXVhbnRpZmllZCkpXG4gICAgICB2YWx1ZSA9IHRoaXMuX3F1YW50aWZpZWRbdmFsdWVdO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkU3ViamVjdGAgcmVhZHMgYSB0cmlwbGUncyBzdWJqZWN0XG4gIF9yZWFkU3ViamVjdDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gbnVsbDtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdbJzpcbiAgICAgIC8vIFN0YXJ0IGEgbmV3IHRyaXBsZSB3aXRoIGEgbmV3IGJsYW5rIG5vZGUgYXMgc3ViamVjdFxuICAgICAgdGhpcy5fc2F2ZUNvbnRleHQoJ2JsYW5rJywgdGhpcy5fZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJqZWN0ID0gJ186YicgKyBibGFua05vZGVDb3VudCsrLCBudWxsLCBudWxsKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkQmxhbmtOb2RlSGVhZDtcbiAgICBjYXNlICcoJzpcbiAgICAgIC8vIFN0YXJ0IGEgbmV3IGxpc3RcbiAgICAgIHRoaXMuX3NhdmVDb250ZXh0KCdsaXN0JywgdGhpcy5fZ3JhcGgsIFJERl9OSUwsIG51bGwsIG51bGwpO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZExpc3RJdGVtO1xuICAgIGNhc2UgJ3snOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgZm9ybXVsYVxuICAgICAgaWYgKCF0aGlzLl9uM01vZGUpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5leHBlY3RlZCBncmFwaCcsIHRva2VuKTtcbiAgICAgIHRoaXMuX3NhdmVDb250ZXh0KCdmb3JtdWxhJywgdGhpcy5fZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ncmFwaCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKywgbnVsbCwgbnVsbCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFN1YmplY3Q7XG4gICAgY2FzZSAnfSc6XG4gICAgICAgLy8gTm8gc3ViamVjdDsgdGhlIGdyYXBoIGluIHdoaWNoIHdlIGFyZSByZWFkaW5nIGlzIGNsb3NlZCBpbnN0ZWFkXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFB1bmN0dWF0aW9uKHRva2VuKTtcbiAgICBjYXNlICdAZm9yU29tZSc6XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3ByZWRpY2F0ZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL3N3YXAvcmVpZnkjZm9yU29tZSc7XG4gICAgICB0aGlzLl9xdWFudGlmaWVkUHJlZml4ID0gJ186Yic7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFF1YW50aWZpZXJMaXN0O1xuICAgIGNhc2UgJ0Bmb3JBbGwnOlxuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICB0aGlzLl9wcmVkaWNhdGUgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL3JlaWZ5I2ZvckFsbCc7XG4gICAgICB0aGlzLl9xdWFudGlmaWVkUHJlZml4ID0gJz9iLSc7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFF1YW50aWZpZXJMaXN0O1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBSZWFkIHRoZSBzdWJqZWN0IGVudGl0eVxuICAgICAgaWYgKCh0aGlzLl9zdWJqZWN0ID0gdGhpcy5fcmVhZEVudGl0eSh0b2tlbikpID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIC8vIEluIE4zIG1vZGUsIHRoZSBzdWJqZWN0IG1pZ2h0IGJlIGEgcGF0aFxuICAgICAgaWYgKHRoaXMuX24zTW9kZSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFBhdGhSZWFkZXIodGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaCk7XG4gICAgfVxuXG4gICAgLy8gVGhlIG5leHQgdG9rZW4gbXVzdCBiZSBhIHByZWRpY2F0ZSxcbiAgICAvLyBvciwgaWYgdGhlIHN1YmplY3Qgd2FzIGFjdHVhbGx5IGEgZ3JhcGggSVJJLCBhIG5hbWVkIGdyYXBoXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRQcmVkaWNhdGVPck5hbWVkR3JhcGg7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZFByZWRpY2F0ZWAgcmVhZHMgYSB0cmlwbGUncyBwcmVkaWNhdGVcbiAgX3JlYWRQcmVkaWNhdGU6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciB0eXBlID0gdG9rZW4udHlwZTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbnZlcnNlJzpcbiAgICAgIHRoaXMuX2ludmVyc2VQcmVkaWNhdGUgPSB0cnVlO1xuICAgIGNhc2UgJ2FiYnJldmlhdGlvbic6XG4gICAgICB0aGlzLl9wcmVkaWNhdGUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJy4nOlxuICAgIGNhc2UgJ10nOlxuICAgIGNhc2UgJ30nOlxuICAgICAgLy8gRXhwZWN0ZWQgcHJlZGljYXRlIGRpZG4ndCBjb21lLCBtdXN0IGhhdmUgYmVlbiB0cmFpbGluZyBzZW1pY29sb25cbiAgICAgIGlmICh0aGlzLl9wcmVkaWNhdGUgPT09IG51bGwpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5leHBlY3RlZCAnICsgdHlwZSwgdG9rZW4pO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ10nID8gdGhpcy5fcmVhZEJsYW5rTm9kZVRhaWwodG9rZW4pIDogdGhpcy5fcmVhZFB1bmN0dWF0aW9uKHRva2VuKTtcbiAgICBjYXNlICc7JzpcbiAgICAgIC8vIEV4dHJhIHNlbWljb2xvbnMgY2FuIGJlIHNhZmVseSBpZ25vcmVkXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFByZWRpY2F0ZTtcbiAgICBjYXNlICdibGFuayc6XG4gICAgICBpZiAoIXRoaXMuX24zTW9kZSlcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdEaXNhbGxvd2VkIGJsYW5rIG5vZGUgYXMgcHJlZGljYXRlJywgdG9rZW4pO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoKHRoaXMuX3ByZWRpY2F0ZSA9IHRoaXMuX3JlYWRFbnRpdHkodG9rZW4pKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFRoZSBuZXh0IHRva2VuIG11c3QgYmUgYW4gb2JqZWN0XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRPYmplY3Q7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZE9iamVjdGAgcmVhZHMgYSB0cmlwbGUncyBvYmplY3RcbiAgX3JlYWRPYmplY3Q6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIGNhc2UgJ2xpdGVyYWwnOlxuICAgICAgdGhpcy5fb2JqZWN0ID0gdG9rZW4udmFsdWU7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZERhdGFUeXBlT3JMYW5nO1xuICAgIGNhc2UgJ1snOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgdHJpcGxlIHdpdGggYSBuZXcgYmxhbmsgbm9kZSBhcyBzdWJqZWN0XG4gICAgICB0aGlzLl9zYXZlQ29udGV4dCgnYmxhbmsnLCB0aGlzLl9ncmFwaCwgdGhpcy5fc3ViamVjdCwgdGhpcy5fcHJlZGljYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ViamVjdCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKyk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJsYW5rTm9kZUhlYWQ7XG4gICAgY2FzZSAnKCc6XG4gICAgICAvLyBTdGFydCBhIG5ldyBsaXN0XG4gICAgICB0aGlzLl9zYXZlQ29udGV4dCgnbGlzdCcsIHRoaXMuX2dyYXBoLCB0aGlzLl9zdWJqZWN0LCB0aGlzLl9wcmVkaWNhdGUsIFJERl9OSUwpO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZExpc3RJdGVtO1xuICAgIGNhc2UgJ3snOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgZm9ybXVsYVxuICAgICAgaWYgKCF0aGlzLl9uM01vZGUpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5leHBlY3RlZCBncmFwaCcsIHRva2VuKTtcbiAgICAgIHRoaXMuX3NhdmVDb250ZXh0KCdmb3JtdWxhJywgdGhpcy5fZ3JhcGgsIHRoaXMuX3N1YmplY3QsIHRoaXMuX3ByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyYXBoID0gJ186YicgKyBibGFua05vZGVDb3VudCsrKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkU3ViamVjdDtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gUmVhZCB0aGUgb2JqZWN0IGVudGl0eVxuICAgICAgaWYgKCh0aGlzLl9vYmplY3QgPSB0aGlzLl9yZWFkRW50aXR5KHRva2VuKSkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgLy8gSW4gTjMgbW9kZSwgdGhlIG9iamVjdCBtaWdodCBiZSBhIHBhdGhcbiAgICAgIGlmICh0aGlzLl9uM01vZGUpXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQYXRoUmVhZGVyKHRoaXMuX2dldENvbnRleHRFbmRSZWFkZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaGAgcmVhZHMgYSB0cmlwbGUncyBwcmVkaWNhdGUsIG9yIGEgbmFtZWQgZ3JhcGhcbiAgX3JlYWRQcmVkaWNhdGVPck5hbWVkR3JhcGg6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHJldHVybiB0b2tlbi50eXBlID09PSAneycgPyB0aGlzLl9yZWFkR3JhcGgodG9rZW4pIDogdGhpcy5fcmVhZFByZWRpY2F0ZSh0b2tlbik7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZEdyYXBoYCByZWFkcyBhIGdyYXBoXG4gIF9yZWFkR3JhcGg6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAneycpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGdyYXBoIGJ1dCBnb3QgJyArIHRva2VuLnR5cGUsIHRva2VuKTtcbiAgICAvLyBUaGUgXCJzdWJqZWN0XCIgd2UgcmVhZCBpcyBhY3R1YWxseSB0aGUgR1JBUEgncyBsYWJlbFxuICAgIHRoaXMuX2dyYXBoID0gdGhpcy5fc3ViamVjdCwgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRTdWJqZWN0O1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRCbGFua05vZGVIZWFkYCByZWFkcyB0aGUgaGVhZCBvZiBhIGJsYW5rIG5vZGVcbiAgX3JlYWRCbGFua05vZGVIZWFkOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ10nKSB7XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkQmxhbmtOb2RlVGFpbCh0b2tlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fcHJlZGljYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkUHJlZGljYXRlKHRva2VuKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZEJsYW5rTm9kZVRhaWxgIHJlYWRzIHRoZSBlbmQgb2YgYSBibGFuayBub2RlXG4gIF9yZWFkQmxhbmtOb2RlVGFpbDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgIT09ICddJylcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkQmxhbmtOb2RlUHVuY3R1YXRpb24odG9rZW4pO1xuXG4gICAgLy8gU3RvcmUgYmxhbmsgbm9kZSB0cmlwbGVcbiAgICBpZiAodGhpcy5fc3ViamVjdCAhPT0gbnVsbClcbiAgICAgIHRoaXMuX3RyaXBsZSh0aGlzLl9zdWJqZWN0LCB0aGlzLl9wcmVkaWNhdGUsIHRoaXMuX29iamVjdCwgdGhpcy5fZ3JhcGgpO1xuXG4gICAgLy8gUmVzdG9yZSB0aGUgcGFyZW50IGNvbnRleHQgY29udGFpbmluZyB0aGlzIGJsYW5rIG5vZGVcbiAgICB2YXIgZW1wdHkgPSB0aGlzLl9wcmVkaWNhdGUgPT09IG51bGw7XG4gICAgdGhpcy5fcmVzdG9yZUNvbnRleHQoKTtcbiAgICAvLyBJZiB0aGUgYmxhbmsgbm9kZSB3YXMgdGhlIHN1YmplY3QsIGNvbnRpbnVlIHJlYWRpbmcgdGhlIHByZWRpY2F0ZVxuICAgIGlmICh0aGlzLl9vYmplY3QgPT09IG51bGwpXG4gICAgICAvLyBJZiB0aGUgYmxhbmsgbm9kZSB3YXMgZW1wdHksIGl0IGNvdWxkIGJlIGEgbmFtZWQgZ3JhcGggbGFiZWxcbiAgICAgIHJldHVybiBlbXB0eSA/IHRoaXMuX3JlYWRQcmVkaWNhdGVPck5hbWVkR3JhcGggOiB0aGlzLl9yZWFkUHJlZGljYXRlQWZ0ZXJCbGFuaztcbiAgICAvLyBJZiB0aGUgYmxhbmsgbm9kZSB3YXMgdGhlIG9iamVjdCwgcmVzdG9yZSBwcmV2aW91cyBjb250ZXh0IGFuZCByZWFkIHB1bmN0dWF0aW9uXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuX2dldENvbnRleHRFbmRSZWFkZXIoKTtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUHJlZGljYXRlQWZ0ZXJCbGFua2AgcmVhZHMgYSBwcmVkaWNhdGUgYWZ0ZXIgYW4gYW5vbnltb3VzIGJsYW5rIG5vZGVcbiAgX3JlYWRQcmVkaWNhdGVBZnRlckJsYW5rOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAvLyBJZiBhIGRvdCBmb2xsb3dzIGEgYmxhbmsgbm9kZSBpbiB0b3AgY29udGV4dCwgdGhlcmUgaXMgbm8gcHJlZGljYXRlXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICcuJyAmJiAhdGhpcy5fY29udGV4dFN0YWNrLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7IC8vIGNhbmNlbCB0aGUgY3VycmVudCB0cmlwbGVcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkUHVuY3R1YXRpb24odG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZFByZWRpY2F0ZSh0b2tlbik7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZExpc3RJdGVtYCByZWFkcyBpdGVtcyBmcm9tIGEgbGlzdFxuICBfcmVhZExpc3RJdGVtOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgaXRlbSA9IG51bGwsICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBpdGVtIG9mIHRoZSBsaXN0XG4gICAgICAgIGxpc3QgPSBudWxsLCAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbGlzdCBpdHNlbGZcbiAgICAgICAgcHJldkxpc3QgPSB0aGlzLl9zdWJqZWN0LCAgICAgICAgIC8vIFRoZSBwcmV2aW91cyBsaXN0IHRoYXQgY29udGFpbnMgdGhpcyBsaXN0XG4gICAgICAgIHN0YWNrID0gdGhpcy5fY29udGV4dFN0YWNrLCAgICAgICAvLyBUaGUgc3RhY2sgb2YgcGFyZW50IGNvbnRleHRzXG4gICAgICAgIHBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLCAvLyBUaGUgcGFyZW50IGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgbGlzdFxuICAgICAgICBuZXh0ID0gdGhpcy5fcmVhZExpc3RJdGVtLCAgICAgICAgLy8gVGhlIG5leHQgZnVuY3Rpb24gdG8gZXhlY3V0ZVxuICAgICAgICBpdGVtQ29tcGxldGUgPSB0cnVlOyAgICAgICAgICAgICAgLy8gV2hldGhlciB0aGUgaXRlbSBoYXMgYmVlbiByZWFkIGZ1bGx5XG5cbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdbJzpcbiAgICAgIC8vIFN0YWNrIHRoZSBjdXJyZW50IGxpc3QgdHJpcGxlIGFuZCBzdGFydCBhIG5ldyB0cmlwbGUgd2l0aCBhIGJsYW5rIG5vZGUgYXMgc3ViamVjdFxuICAgICAgdGhpcy5fc2F2ZUNvbnRleHQoJ2JsYW5rJywgdGhpcy5fZ3JhcGgsIGxpc3QgPSAnXzpiJyArIGJsYW5rTm9kZUNvdW50KyssXG4gICAgICAgICAgICAgICAgICAgICAgICBSREZfRklSU1QsIHRoaXMuX3N1YmplY3QgPSBpdGVtID0gJ186YicgKyBibGFua05vZGVDb3VudCsrKTtcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkQmxhbmtOb2RlSGVhZDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJygnOlxuICAgICAgLy8gU3RhY2sgdGhlIGN1cnJlbnQgbGlzdCB0cmlwbGUgYW5kIHN0YXJ0IGEgbmV3IGxpc3RcbiAgICAgIHRoaXMuX3NhdmVDb250ZXh0KCdsaXN0JywgdGhpcy5fZ3JhcGgsIGxpc3QgPSAnXzpiJyArIGJsYW5rTm9kZUNvdW50KyssXG4gICAgICAgICAgICAgICAgICAgICAgICBSREZfRklSU1QsIFJERl9OSUwpO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcpJzpcbiAgICAgIC8vIENsb3NpbmcgdGhlIGxpc3Q7IHJlc3RvcmUgdGhlIHBhcmVudCBjb250ZXh0XG4gICAgICB0aGlzLl9yZXN0b3JlQ29udGV4dCgpO1xuICAgICAgLy8gSWYgdGhpcyBsaXN0IGlzIGNvbnRhaW5lZCB3aXRoaW4gYSBwYXJlbnQgbGlzdCwgcmV0dXJuIHRoZSBtZW1iZXJzaGlwIHRyaXBsZSBoZXJlLlxuICAgICAgLy8gVGhpcyB3aWxsIGJlIGA8cGFyZW50IGxpc3QgZWxlbWVudD4gcmRmOmZpcnN0IDx0aGlzIGxpc3Q+LmAuXG4gICAgICBpZiAoc3RhY2subGVuZ3RoICE9PSAwICYmIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnR5cGUgPT09ICdsaXN0JylcbiAgICAgICAgdGhpcy5fdHJpcGxlKHRoaXMuX3N1YmplY3QsIHRoaXMuX3ByZWRpY2F0ZSwgdGhpcy5fb2JqZWN0LCB0aGlzLl9ncmFwaCk7XG4gICAgICAvLyBXYXMgdGhpcyBsaXN0IHRoZSBwYXJlbnQncyBzdWJqZWN0P1xuICAgICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgbmV4dCB0b2tlbiBpcyB0aGUgcHJlZGljYXRlXG4gICAgICAgIG5leHQgPSB0aGlzLl9yZWFkUHJlZGljYXRlO1xuICAgICAgICAvLyBObyBsaXN0IHRhaWwgaWYgdGhpcyB3YXMgYW4gZW1wdHkgbGlzdFxuICAgICAgICBpZiAodGhpcy5fc3ViamVjdCA9PT0gUkRGX05JTClcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBsaXN0IHdhcyBpbiB0aGUgcGFyZW50IGNvbnRleHQncyBvYmplY3RcbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXh0ID0gdGhpcy5fZ2V0Q29udGV4dEVuZFJlYWRlcigpO1xuICAgICAgICAvLyBObyBsaXN0IHRhaWwgaWYgdGhpcyB3YXMgYW4gZW1wdHkgbGlzdFxuICAgICAgICBpZiAodGhpcy5fb2JqZWN0ID09PSBSREZfTklMKVxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgfVxuICAgICAgLy8gQ2xvc2UgdGhlIGxpc3QgYnkgbWFraW5nIHRoZSBoZWFkIG5pbFxuICAgICAgbGlzdCA9IFJERl9OSUw7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsaXRlcmFsJzpcbiAgICAgIGl0ZW0gPSB0b2tlbi52YWx1ZTtcbiAgICAgIGl0ZW1Db21wbGV0ZSA9IGZhbHNlOyAvLyBDYW4gc3RpbGwgaGF2ZSBhIGRhdGF0eXBlIG9yIGxhbmd1YWdlXG4gICAgICBuZXh0ID0gdGhpcy5fcmVhZExpc3RJdGVtRGF0YVR5cGVPckxhbmc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKChpdGVtID0gdGhpcy5fcmVhZEVudGl0eSh0b2tlbikpID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAgLy8gQ3JlYXRlIGEgbmV3IGJsYW5rIG5vZGUgaWYgbm8gaXRlbSBoZWFkIHdhcyBhc3NpZ25lZCB5ZXRcbiAgICBpZiAobGlzdCA9PT0gbnVsbClcbiAgICAgIHRoaXMuX3N1YmplY3QgPSBsaXN0ID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuXG4gICAgLy8gSXMgdGhpcyB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgbGlzdD9cbiAgICBpZiAocHJldkxpc3QgPT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgbGlzdCBpcyBlaXRoZXIgdGhlIHN1YmplY3Qgb3IgdGhlIG9iamVjdCBvZiBpdHMgcGFyZW50XG4gICAgICBpZiAocGFyZW50LnByZWRpY2F0ZSA9PT0gbnVsbClcbiAgICAgICAgcGFyZW50LnN1YmplY3QgPSBsaXN0O1xuICAgICAgZWxzZVxuICAgICAgICBwYXJlbnQub2JqZWN0ID0gbGlzdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBDb250aW51ZSB0aGUgcHJldmlvdXMgbGlzdCB3aXRoIHRoZSBjdXJyZW50IGxpc3RcbiAgICAgIHRoaXMuX3RyaXBsZShwcmV2TGlzdCwgUkRGX1JFU1QsIGxpc3QsIHRoaXMuX2dyYXBoKTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBpdGVtJ3MgdmFsdWVcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgLy8gSW4gTjMgbW9kZSwgdGhlIGl0ZW0gbWlnaHQgYmUgYSBwYXRoXG4gICAgICBpZiAodGhpcy5fbjNNb2RlICYmICh0b2tlbi50eXBlID09PSAnSVJJJyB8fCB0b2tlbi50eXBlID09PSAncHJlZml4ZWQnKSkge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgY29udGV4dCB0byBhZGQgdGhlIGl0ZW0ncyBwYXRoXG4gICAgICAgIHRoaXMuX3NhdmVDb250ZXh0KCdpdGVtJywgdGhpcy5fZ3JhcGgsIGxpc3QsIFJERl9GSVJTVCwgaXRlbSk7XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSBpdGVtLCB0aGlzLl9wcmVkaWNhdGUgPSBudWxsO1xuICAgICAgICAvLyBfcmVhZFBhdGggd2lsbCByZXN0b3JlIHRoZSBjb250ZXh0IGFuZCBvdXRwdXQgdGhlIGl0ZW1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFBhdGhSZWFkZXIodGhpcy5fcmVhZExpc3RJdGVtKTtcbiAgICAgIH1cbiAgICAgIC8vIE91dHB1dCB0aGUgaXRlbSBpZiBpdCBpcyBjb21wbGV0ZVxuICAgICAgaWYgKGl0ZW1Db21wbGV0ZSlcbiAgICAgICAgdGhpcy5fdHJpcGxlKGxpc3QsIFJERl9GSVJTVCwgaXRlbSwgdGhpcy5fZ3JhcGgpO1xuICAgICAgLy8gT3RoZXJ3aXNlLCBzYXZlIGl0IGZvciBjb21wbGV0aW9uXG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX29iamVjdCA9IGl0ZW07XG4gICAgfVxuICAgIHJldHVybiBuZXh0O1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWREYXRhVHlwZU9yTGFuZ2AgcmVhZHMgYW4gX29wdGlvbmFsXyBkYXRhIHR5cGUgb3IgbGFuZ3VhZ2VcbiAgX3JlYWREYXRhVHlwZU9yTGFuZzogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbXBsZXRlTGl0ZXJhbCh0b2tlbiwgZmFsc2UpO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRMaXN0SXRlbURhdGFUeXBlT3JMYW5nYCByZWFkcyBhbiBfb3B0aW9uYWxfIGRhdGEgdHlwZSBvciBsYW5ndWFnZSBpbiBhIGxpc3RcbiAgX3JlYWRMaXN0SXRlbURhdGFUeXBlT3JMYW5nOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcGxldGVMaXRlcmFsKHRva2VuLCB0cnVlKTtcbiAgfSxcblxuICAvLyAjIyMgYF9jb21wbGV0ZUxpdGVyYWxgIGNvbXBsZXRlcyB0aGUgb2JqZWN0IHdpdGggYSBkYXRhIHR5cGUgb3IgbGFuZ3VhZ2VcbiAgX2NvbXBsZXRlTGl0ZXJhbDogZnVuY3Rpb24gKHRva2VuLCBsaXN0SXRlbSkge1xuICAgIHZhciBzdWZmaXggPSBmYWxzZTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAvLyBBZGQgYSBcIl5edHlwZVwiIHN1ZmZpeCBmb3IgdHlwZXMgKElSSXMgYW5kIGJsYW5rIG5vZGVzKVxuICAgIGNhc2UgJ3R5cGUnOlxuICAgIGNhc2UgJ3R5cGVJUkknOlxuICAgICAgc3VmZml4ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX29iamVjdCArPSAnXl4nICsgdGhpcy5fcmVhZEVudGl0eSh0b2tlbik7XG4gICAgICBicmVhaztcbiAgICAvLyBBZGQgYW4gXCJAbGFuZ1wiIHN1ZmZpeCBmb3IgbGFuZ3VhZ2UgdGFnc1xuICAgIGNhc2UgJ2xhbmdjb2RlJzpcbiAgICAgIHN1ZmZpeCA9IHRydWU7XG4gICAgICB0aGlzLl9vYmplY3QgKz0gJ0AnICsgdG9rZW4udmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGxpdGVyYWwgd2FzIHBhcnQgb2YgYSBsaXN0LCB3cml0ZSB0aGUgaXRlbVxuICAgIC8vICh3ZSBjb3VsZCBhbHNvIGNoZWNrIHRoZSBjb250ZXh0IHN0YWNrLCBidXQgcGFzc2luZyBpbiBhIGZsYWcgaXMgZmFzdGVyKVxuICAgIGlmIChsaXN0SXRlbSlcbiAgICAgIHRoaXMuX3RyaXBsZSh0aGlzLl9zdWJqZWN0LCBSREZfRklSU1QsIHRoaXMuX29iamVjdCwgdGhpcy5fZ3JhcGgpO1xuICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIHJlc3Qgb2YgdGhlIGlucHV0XG4gICAgaWYgKHN1ZmZpeClcbiAgICAgIHJldHVybiB0aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCk7XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9yZWFkQ2FsbGJhY2sgPSB0aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZENhbGxiYWNrKHRva2VuKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZEZvcm11bGFUYWlsYCByZWFkcyB0aGUgZW5kIG9mIGEgZm9ybXVsYVxuICBfcmVhZEZvcm11bGFUYWlsOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ30nKVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRQdW5jdHVhdGlvbih0b2tlbik7XG5cbiAgICAvLyBTdG9yZSB0aGUgbGFzdCB0cmlwbGUgb2YgdGhlIGZvcm11bGFcbiAgICBpZiAodGhpcy5fc3ViamVjdCAhPT0gbnVsbClcbiAgICAgIHRoaXMuX3RyaXBsZSh0aGlzLl9zdWJqZWN0LCB0aGlzLl9wcmVkaWNhdGUsIHRoaXMuX29iamVjdCwgdGhpcy5fZ3JhcGgpO1xuXG4gICAgLy8gUmVzdG9yZSB0aGUgcGFyZW50IGNvbnRleHQgY29udGFpbmluZyB0aGlzIGZvcm11bGFcbiAgICB0aGlzLl9yZXN0b3JlQ29udGV4dCgpO1xuICAgIC8vIElmIHRoZSBmb3JtdWxhIHdhcyB0aGUgc3ViamVjdCwgY29udGludWUgcmVhZGluZyB0aGUgcHJlZGljYXRlLlxuICAgIC8vIElmIHRoZSBmb3JtdWxhIHdhcyB0aGUgb2JqZWN0LCByZWFkIHB1bmN0dWF0aW9uLlxuICAgIHJldHVybiB0aGlzLl9vYmplY3QgPT09IG51bGwgPyB0aGlzLl9yZWFkUHJlZGljYXRlIDogdGhpcy5fZ2V0Q29udGV4dEVuZFJlYWRlcigpO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRQdW5jdHVhdGlvbmAgcmVhZHMgcHVuY3R1YXRpb24gYmV0d2VlbiB0cmlwbGVzIG9yIHRyaXBsZSBwYXJ0c1xuICBfcmVhZFB1bmN0dWF0aW9uOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgbmV4dCwgc3ViamVjdCA9IHRoaXMuX3N1YmplY3QsIGdyYXBoID0gdGhpcy5fZ3JhcGgsXG4gICAgICAgIGludmVyc2VQcmVkaWNhdGUgPSB0aGlzLl9pbnZlcnNlUHJlZGljYXRlO1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIC8vIEEgY2xvc2luZyBicmFjZSBlbmRzIGEgZ3JhcGhcbiAgICBjYXNlICd9JzpcbiAgICAgIGlmICh0aGlzLl9ncmFwaCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmV4cGVjdGVkIGdyYXBoIGNsb3NpbmcnLCB0b2tlbik7XG4gICAgICBpZiAodGhpcy5fbjNNb2RlKVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZEZvcm11bGFUYWlsKHRva2VuKTtcbiAgICAgIHRoaXMuX2dyYXBoID0gbnVsbDtcbiAgICAvLyBBIGRvdCBqdXN0IGVuZHMgdGhlIHN0YXRlbWVudCwgd2l0aG91dCBzaGFyaW5nIGFueXRoaW5nIHdpdGggdGhlIG5leHRcbiAgICBjYXNlICcuJzpcbiAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgbmV4dCA9IHRoaXMuX2NvbnRleHRTdGFjay5sZW5ndGggPyB0aGlzLl9yZWFkU3ViamVjdCA6IHRoaXMuX3JlYWRJblRvcENvbnRleHQ7XG4gICAgICBpZiAoaW52ZXJzZVByZWRpY2F0ZSkgdGhpcy5faW52ZXJzZVByZWRpY2F0ZSA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgLy8gU2VtaWNvbG9uIG1lYW5zIHRoZSBzdWJqZWN0IGlzIHNoYXJlZDsgcHJlZGljYXRlIGFuZCBvYmplY3QgYXJlIGRpZmZlcmVudFxuICAgIGNhc2UgJzsnOlxuICAgICAgbmV4dCA9IHRoaXMuX3JlYWRQcmVkaWNhdGU7XG4gICAgICBicmVhaztcbiAgICAvLyBDb21tYSBtZWFucyBib3RoIHRoZSBzdWJqZWN0IGFuZCBwcmVkaWNhdGUgYXJlIHNoYXJlZDsgdGhlIG9iamVjdCBpcyBkaWZmZXJlbnRcbiAgICBjYXNlICcsJzpcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkT2JqZWN0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEFuIGVudGl0eSBtZWFucyB0aGlzIGlzIGEgcXVhZCAob25seSBhbGxvd2VkIGlmIG5vdCBhbHJlYWR5IGluc2lkZSBhIGdyYXBoKVxuICAgICAgaWYgKHRoaXMuX3N1cHBvcnRzUXVhZHMgJiYgdGhpcy5fZ3JhcGggPT09IG51bGwgJiYgKGdyYXBoID0gdGhpcy5fcmVhZEVudGl0eSh0b2tlbikpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRRdWFkUHVuY3R1YXRpb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBwdW5jdHVhdGlvbiB0byBmb2xsb3cgXCInICsgdGhpcy5fb2JqZWN0ICsgJ1wiJywgdG9rZW4pO1xuICAgIH1cbiAgICAvLyBBIHRyaXBsZSBoYXMgYmVlbiBjb21wbGV0ZWQgbm93LCBzbyByZXR1cm4gaXRcbiAgICBpZiAoc3ViamVjdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIHByZWRpY2F0ZSA9IHRoaXMuX3ByZWRpY2F0ZSwgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgaWYgKCFpbnZlcnNlUHJlZGljYXRlKVxuICAgICAgICB0aGlzLl90cmlwbGUoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsICBncmFwaCk7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX3RyaXBsZShvYmplY3QsICBwcmVkaWNhdGUsIHN1YmplY3QsIGdyYXBoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG5cbiAgICAvLyAjIyMgYF9yZWFkQmxhbmtOb2RlUHVuY3R1YXRpb25gIHJlYWRzIHB1bmN0dWF0aW9uIGluIGEgYmxhbmsgbm9kZVxuICBfcmVhZEJsYW5rTm9kZVB1bmN0dWF0aW9uOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgbmV4dDtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAvLyBTZW1pY29sb24gbWVhbnMgdGhlIHN1YmplY3QgaXMgc2hhcmVkOyBwcmVkaWNhdGUgYW5kIG9iamVjdCBhcmUgZGlmZmVyZW50XG4gICAgY2FzZSAnOyc6XG4gICAgICBuZXh0ID0gdGhpcy5fcmVhZFByZWRpY2F0ZTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIENvbW1hIG1lYW5zIGJvdGggdGhlIHN1YmplY3QgYW5kIHByZWRpY2F0ZSBhcmUgc2hhcmVkOyB0aGUgb2JqZWN0IGlzIGRpZmZlcmVudFxuICAgIGNhc2UgJywnOlxuICAgICAgbmV4dCA9IHRoaXMuX3JlYWRPYmplY3Q7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBwdW5jdHVhdGlvbiB0byBmb2xsb3cgXCInICsgdGhpcy5fb2JqZWN0ICsgJ1wiJywgdG9rZW4pO1xuICAgIH1cbiAgICAvLyBBIHRyaXBsZSBoYXMgYmVlbiBjb21wbGV0ZWQgbm93LCBzbyByZXR1cm4gaXRcbiAgICB0aGlzLl90cmlwbGUodGhpcy5fc3ViamVjdCwgdGhpcy5fcHJlZGljYXRlLCB0aGlzLl9vYmplY3QsIHRoaXMuX2dyYXBoKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUXVhZFB1bmN0dWF0aW9uYCByZWFkcyBwdW5jdHVhdGlvbiBhZnRlciBhIHF1YWRcbiAgX3JlYWRRdWFkUHVuY3R1YXRpb246IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnLicpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGRvdCB0byBmb2xsb3cgcXVhZCcsIHRva2VuKTtcbiAgICByZXR1cm4gdGhpcy5fcmVhZEluVG9wQ29udGV4dDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUHJlZml4YCByZWFkcyB0aGUgcHJlZml4IG9mIGEgcHJlZml4IGRlY2xhcmF0aW9uXG4gIF9yZWFkUHJlZml4OiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ3ByZWZpeCcpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIHByZWZpeCB0byBmb2xsb3cgQHByZWZpeCcsIHRva2VuKTtcbiAgICB0aGlzLl9wcmVmaXggPSB0b2tlbi52YWx1ZTtcbiAgICByZXR1cm4gdGhpcy5fcmVhZFByZWZpeElSSTtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUHJlZml4SVJJYCByZWFkcyB0aGUgSVJJIG9mIGEgcHJlZml4IGRlY2xhcmF0aW9uXG4gIF9yZWFkUHJlZml4SVJJOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ0lSSScpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIElSSSB0byBmb2xsb3cgcHJlZml4IFwiJyArIHRoaXMuX3ByZWZpeCArICc6XCInLCB0b2tlbik7XG4gICAgdmFyIHByZWZpeElSSSA9IHRoaXMuX3JlYWRFbnRpdHkodG9rZW4pO1xuICAgIHRoaXMuX3ByZWZpeGVzW3RoaXMuX3ByZWZpeF0gPSBwcmVmaXhJUkk7XG4gICAgdGhpcy5fcHJlZml4Q2FsbGJhY2sodGhpcy5fcHJlZml4LCBwcmVmaXhJUkkpO1xuICAgIHJldHVybiB0aGlzLl9yZWFkRGVjbGFyYXRpb25QdW5jdHVhdGlvbjtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkQmFzZUlSSWAgcmVhZHMgdGhlIElSSSBvZiBhIGJhc2UgZGVjbGFyYXRpb25cbiAgX3JlYWRCYXNlSVJJOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ0lSSScpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIElSSSB0byBmb2xsb3cgYmFzZSBkZWNsYXJhdGlvbicsIHRva2VuKTtcbiAgICB0aGlzLl9zZXRCYXNlKHRoaXMuX2Jhc2UgPT09IG51bGwgfHwgYWJzb2x1dGVJUkkudGVzdCh0b2tlbi52YWx1ZSkgP1xuICAgICAgICAgICAgICAgICAgdG9rZW4udmFsdWUgOiB0aGlzLl9yZXNvbHZlSVJJKHRva2VuKSk7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWREZWNsYXJhdGlvblB1bmN0dWF0aW9uO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWROYW1lZEdyYXBoTGFiZWxgIHJlYWRzIHRoZSBsYWJlbCBvZiBhIG5hbWVkIGdyYXBoXG4gIF9yZWFkTmFtZWRHcmFwaExhYmVsOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdJUkknOlxuICAgIGNhc2UgJ2JsYW5rJzpcbiAgICBjYXNlICdwcmVmaXhlZCc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFN1YmplY3QodG9rZW4pLCB0aGlzLl9yZWFkR3JhcGg7XG4gICAgY2FzZSAnWyc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZE5hbWVkR3JhcGhCbGFua0xhYmVsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0ludmFsaWQgZ3JhcGggbGFiZWwnLCB0b2tlbik7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWROYW1lZEdyYXBoTGFiZWxgIHJlYWRzIGEgYmxhbmsgbm9kZSBsYWJlbCBvZiBhIG5hbWVkIGdyYXBoXG4gIF9yZWFkTmFtZWRHcmFwaEJsYW5rTGFiZWw6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnXScpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0ludmFsaWQgZ3JhcGggbGFiZWwnLCB0b2tlbik7XG4gICAgdGhpcy5fc3ViamVjdCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKztcbiAgICByZXR1cm4gdGhpcy5fcmVhZEdyYXBoO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWREZWNsYXJhdGlvblB1bmN0dWF0aW9uYCByZWFkcyB0aGUgcHVuY3R1YXRpb24gb2YgYSBkZWNsYXJhdGlvblxuICBfcmVhZERlY2xhcmF0aW9uUHVuY3R1YXRpb246IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIC8vIFNQQVJRTC1zdHlsZSBkZWNsYXJhdGlvbnMgZG9uJ3QgaGF2ZSBwdW5jdHVhdGlvblxuICAgIGlmICh0aGlzLl9zcGFycWxTdHlsZSkge1xuICAgICAgdGhpcy5fc3BhcnFsU3R5bGUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkSW5Ub3BDb250ZXh0KHRva2VuKTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJy4nKVxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBkZWNsYXJhdGlvbiB0byBlbmQgd2l0aCBhIGRvdCcsIHRva2VuKTtcbiAgICByZXR1cm4gdGhpcy5fcmVhZEluVG9wQ29udGV4dDtcbiAgfSxcblxuICAvLyBSZWFkcyBhIGxpc3Qgb2YgcXVhbnRpZmllZCBzeW1ib2xzIGZyb20gYSBAZm9yU29tZSBvciBAZm9yQWxsIHN0YXRlbWVudFxuICBfcmVhZFF1YW50aWZpZXJMaXN0OiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgZW50aXR5O1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIGNhc2UgJ0lSSSc6XG4gICAgY2FzZSAncHJlZml4ZWQnOlxuICAgICAgaWYgKChlbnRpdHkgPSB0aGlzLl9yZWFkRW50aXR5KHRva2VuLCB0cnVlKSkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5leHBlY3RlZCAnICsgdG9rZW4udHlwZSwgdG9rZW4pO1xuICAgIH1cbiAgICAvLyBXaXRob3V0IGV4cGxpY2l0IHF1YW50aWZpZXJzLCBtYXAgZW50aXRpZXMgdG8gYSBxdWFudGlmaWVkIGVudGl0eVxuICAgIGlmICghdGhpcy5fZXhwbGljaXRRdWFudGlmaWVycylcbiAgICAgIHRoaXMuX3F1YW50aWZpZWRbZW50aXR5XSA9IHRoaXMuX3F1YW50aWZpZWRQcmVmaXggKyBibGFua05vZGVDb3VudCsrO1xuICAgIC8vIFdpdGggZXhwbGljaXQgcXVhbnRpZmllcnMsIG91dHB1dCB0aGUgcmVpZmllZCBxdWFudGlmaWVyXG4gICAgZWxzZSB7XG4gICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBpdGVtLCBzdGFydCBhIG5ldyBxdWFudGlmaWVyIGxpc3RcbiAgICAgIGlmICh0aGlzLl9zdWJqZWN0ID09PSBudWxsKVxuICAgICAgICB0aGlzLl90cmlwbGUodGhpcy5fZ3JhcGggfHwgJycsIHRoaXMuX3ByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSAnXzpiJyArIGJsYW5rTm9kZUNvdW50KyssIFFVQU5USUZJRVJTX0dSQVBIKTtcbiAgICAgIC8vIE90aGVyd2lzZSwgY29udGludWUgdGhlIHByZXZpb3VzIGxpc3RcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5fdHJpcGxlKHRoaXMuX3N1YmplY3QsIFJERl9SRVNULFxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ViamVjdCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKywgUVVBTlRJRklFUlNfR1JBUEgpO1xuICAgICAgLy8gT3V0cHV0IHRoZSBsaXN0IGl0ZW1cbiAgICAgIHRoaXMuX3RyaXBsZSh0aGlzLl9zdWJqZWN0LCBSREZfRklSU1QsIGVudGl0eSwgUVVBTlRJRklFUlNfR1JBUEgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZFF1YW50aWZpZXJQdW5jdHVhdGlvbjtcbiAgfSxcblxuICAvLyBSZWFkcyBwdW5jdHVhdGlvbiBmcm9tIGEgQGZvclNvbWUgb3IgQGZvckFsbCBzdGF0ZW1lbnRcbiAgX3JlYWRRdWFudGlmaWVyUHVuY3R1YXRpb246IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIC8vIFJlYWQgbW9yZSBxdWFudGlmaWVyc1xuICAgIGlmICh0b2tlbi50eXBlID09PSAnLCcpXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFF1YW50aWZpZXJMaXN0O1xuICAgIC8vIEVuZCBvZiB0aGUgcXVhbnRpZmllciBsaXN0XG4gICAgZWxzZSB7XG4gICAgICAvLyBXaXRoIGV4cGxpY2l0IHF1YW50aWZpZXJzLCBjbG9zZSB0aGUgcXVhbnRpZmllciBsaXN0XG4gICAgICBpZiAodGhpcy5fZXhwbGljaXRRdWFudGlmaWVycykge1xuICAgICAgICB0aGlzLl90cmlwbGUodGhpcy5fc3ViamVjdCwgUkRGX1JFU1QsIFJERl9OSUwsIFFVQU5USUZJRVJTX0dSQVBIKTtcbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBSZWFkIGEgZG90XG4gICAgICB0aGlzLl9yZWFkQ2FsbGJhY2sgPSB0aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZENhbGxiYWNrKHRva2VuKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfZ2V0UGF0aFJlYWRlcmAgcmVhZHMgYSBwb3RlbnRpYWwgcGF0aCBhbmQgdGhlbiByZXN1bWVzIHdpdGggdGhlIGdpdmVuIGZ1bmN0aW9uXG4gIF9nZXRQYXRoUmVhZGVyOiBmdW5jdGlvbiAoYWZ0ZXJQYXRoKSB7XG4gICAgdGhpcy5fYWZ0ZXJQYXRoID0gYWZ0ZXJQYXRoO1xuICAgIHJldHVybiB0aGlzLl9yZWFkUGF0aDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUGF0aGAgcmVhZHMgYSBwb3RlbnRpYWwgcGF0aFxuICBfcmVhZFBhdGg6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIC8vIEZvcndhcmQgcGF0aFxuICAgIGNhc2UgJyEnOiByZXR1cm4gdGhpcy5fcmVhZEZvcndhcmRQYXRoO1xuICAgIC8vIEJhY2t3YXJkIHBhdGhcbiAgICBjYXNlICdeJzogcmV0dXJuIHRoaXMuX3JlYWRCYWNrd2FyZFBhdGg7XG4gICAgLy8gTm90IGEgcGF0aDsgcmVzdW1lIHJlYWRpbmcgd2hlcmUgd2UgbGVmdCBvZmZcbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIHN0YWNrID0gdGhpcy5fY29udGV4dFN0YWNrLCBwYXJlbnQgPSBzdGFjay5sZW5ndGggJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBJZiB3ZSB3ZXJlIHJlYWRpbmcgYSBsaXN0IGl0ZW0sIHdlIHN0aWxsIG5lZWQgdG8gb3V0cHV0IGl0XG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC50eXBlID09PSAnaXRlbScpIHtcbiAgICAgICAgLy8gVGhlIGxpc3QgaXRlbSBpcyB0aGUgcmVtYWluaW5nIHN1YmVqY3QgYWZ0ZXIgcmVhZGluZyB0aGUgcGF0aFxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX3N1YmplY3Q7XG4gICAgICAgIC8vIFN3aXRjaCBiYWNrIHRvIHRoZSBjb250ZXh0IG9mIHRoZSBsaXN0XG4gICAgICAgIHRoaXMuX3Jlc3RvcmVDb250ZXh0KCk7XG4gICAgICAgIC8vIE91dHB1dCB0aGUgbGlzdCBpdGVtXG4gICAgICAgIHRoaXMuX3RyaXBsZSh0aGlzLl9zdWJqZWN0LCBSREZfRklSU1QsIGl0ZW0sIHRoaXMuX2dyYXBoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9hZnRlclBhdGgodG9rZW4pO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkRm9yd2FyZFBhdGhgIHJlYWRzIGEgJyEnIHBhdGhcbiAgX3JlYWRGb3J3YXJkUGF0aDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdmFyIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0ID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuICAgIC8vIFRoZSBuZXh0IHRva2VuIGlzIHRoZSBwcmVkaWNhdGVcbiAgICBpZiAoKHByZWRpY2F0ZSA9IHRoaXMuX3JlYWRFbnRpdHkodG9rZW4pKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuO1xuICAgIC8vIElmIHdlIHdlcmUgcmVhZGluZyBhIHN1YmplY3QsIHJlcGxhY2UgdGhlIHN1YmplY3QgYnkgdGhlIHBhdGgncyBvYmplY3RcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlID09PSBudWxsKVxuICAgICAgc3ViamVjdCA9IHRoaXMuX3N1YmplY3QsIHRoaXMuX3N1YmplY3QgPSBvYmplY3Q7XG4gICAgLy8gSWYgd2Ugd2VyZSByZWFkaW5nIGFuIG9iamVjdCwgcmVwbGFjZSB0aGUgc3ViamVjdCBieSB0aGUgcGF0aCdzIG9iamVjdFxuICAgIGVsc2VcbiAgICAgIHN1YmplY3QgPSB0aGlzLl9vYmplY3QsICB0aGlzLl9vYmplY3QgID0gb2JqZWN0O1xuICAgIC8vIEVtaXQgdGhlIHBhdGgncyBjdXJyZW50IHRyaXBsZSBhbmQgcmVhZCBpdHMgbmV4dCBzZWN0aW9uXG4gICAgdGhpcy5fdHJpcGxlKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCB0aGlzLl9ncmFwaCk7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRQYXRoO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRCYWNrd2FyZFBhdGhgIHJlYWRzIGEgJ14nIHBhdGhcbiAgX3JlYWRCYWNrd2FyZFBhdGg6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciBzdWJqZWN0ID0gJ186YicgKyBibGFua05vZGVDb3VudCsrLCBwcmVkaWNhdGUsIG9iamVjdDtcbiAgICAvLyBUaGUgbmV4dCB0b2tlbiBpcyB0aGUgcHJlZGljYXRlXG4gICAgaWYgKChwcmVkaWNhdGUgPSB0aGlzLl9yZWFkRW50aXR5KHRva2VuKSkgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcbiAgICAvLyBJZiB3ZSB3ZXJlIHJlYWRpbmcgYSBzdWJqZWN0LCByZXBsYWNlIHRoZSBzdWJqZWN0IGJ5IHRoZSBwYXRoJ3Mgc3ViamVjdFxuICAgIGlmICh0aGlzLl9wcmVkaWNhdGUgPT09IG51bGwpXG4gICAgICBvYmplY3QgPSB0aGlzLl9zdWJqZWN0LCB0aGlzLl9zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAvLyBJZiB3ZSB3ZXJlIHJlYWRpbmcgYW4gb2JqZWN0LCByZXBsYWNlIHRoZSBzdWJqZWN0IGJ5IHRoZSBwYXRoJ3Mgc3ViamVjdFxuICAgIGVsc2VcbiAgICAgIG9iamVjdCA9IHRoaXMuX29iamVjdCwgIHRoaXMuX29iamVjdCAgPSBzdWJqZWN0O1xuICAgIC8vIEVtaXQgdGhlIHBhdGgncyBjdXJyZW50IHRyaXBsZSBhbmQgcmVhZCBpdHMgbmV4dCBzZWN0aW9uXG4gICAgdGhpcy5fdHJpcGxlKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCB0aGlzLl9ncmFwaCk7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRQYXRoO1xuICB9LFxuXG4gIC8vICMjIyBgX2dldENvbnRleHRFbmRSZWFkZXJgIGdldHMgdGhlIG5leHQgcmVhZGVyIGZ1bmN0aW9uIGF0IHRoZSBlbmQgb2YgYSBjb250ZXh0XG4gIF9nZXRDb250ZXh0RW5kUmVhZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRleHRTdGFjayA9IHRoaXMuX2NvbnRleHRTdGFjaztcbiAgICBpZiAoIWNvbnRleHRTdGFjay5sZW5ndGgpXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFB1bmN0dWF0aW9uO1xuXG4gICAgc3dpdGNoIChjb250ZXh0U3RhY2tbY29udGV4dFN0YWNrLmxlbmd0aCAtIDFdLnR5cGUpIHtcbiAgICBjYXNlICdibGFuayc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJsYW5rTm9kZVRhaWw7XG4gICAgY2FzZSAnbGlzdCc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZExpc3RJdGVtO1xuICAgIGNhc2UgJ2Zvcm11bGEnOlxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRGb3JtdWxhVGFpbDtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfdHJpcGxlYCBlbWl0cyBhIHRyaXBsZSB0aHJvdWdoIHRoZSBjYWxsYmFja1xuICBfdHJpcGxlOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2sobnVsbCxcbiAgICAgIHsgc3ViamVjdDogc3ViamVjdCwgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0LCBncmFwaDogZ3JhcGggfHwgJycgfSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfZXJyb3JgIGVtaXRzIGFuIGVycm9yIG1lc3NhZ2UgdGhyb3VnaCB0aGUgY2FsbGJhY2tcbiAgX2Vycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgdG9rZW4pIHtcbiAgICB0aGlzLl9jYWxsYmFjayhuZXcgRXJyb3IobWVzc2FnZSArICcgb24gbGluZSAnICsgdG9rZW4ubGluZSArICcuJykpO1xuICB9LFxuXG4gIC8vICMjIyBgX3Jlc29sdmVJUklgIHJlc29sdmVzIGEgcmVsYXRpdmUgSVJJIHRva2VuIGFnYWluc3QgdGhlIGJhc2UgcGF0aCxcbiAgLy8gYXNzdW1pbmcgdGhhdCBhIGJhc2UgcGF0aCBoYXMgYmVlbiBzZXQgYW5kIHRoYXQgdGhlIElSSSBpcyBpbmRlZWQgcmVsYXRpdmVcbiAgX3Jlc29sdmVJUkk6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciBpcmkgPSB0b2tlbi52YWx1ZTtcbiAgICBzd2l0Y2ggKGlyaVswXSkge1xuICAgIC8vIEFuIGVtcHR5IHJlbGF0aXZlIElSSSBpbmRpY2F0ZXMgdGhlIGJhc2UgSVJJXG4gICAgY2FzZSB1bmRlZmluZWQ6IHJldHVybiB0aGlzLl9iYXNlO1xuICAgIC8vIFJlc29sdmUgcmVsYXRpdmUgZnJhZ21lbnQgSVJJcyBhZ2FpbnN0IHRoZSBiYXNlIElSSVxuICAgIGNhc2UgJyMnOiByZXR1cm4gdGhpcy5fYmFzZSArIGlyaTtcbiAgICAvLyBSZXNvbHZlIHJlbGF0aXZlIHF1ZXJ5IHN0cmluZyBJUklzIGJ5IHJlcGxhY2luZyB0aGUgcXVlcnkgc3RyaW5nXG4gICAgY2FzZSAnPyc6IHJldHVybiB0aGlzLl9iYXNlLnJlcGxhY2UoLyg/OlxcPy4qKT8kLywgaXJpKTtcbiAgICAvLyBSZXNvbHZlIHJvb3QtcmVsYXRpdmUgSVJJcyBhdCB0aGUgcm9vdCBvZiB0aGUgYmFzZSBJUklcbiAgICBjYXNlICcvJzpcbiAgICAgIC8vIFJlc29sdmUgc2NoZW1lLXJlbGF0aXZlIElSSXMgdG8gdGhlIHNjaGVtZVxuICAgICAgcmV0dXJuIChpcmlbMV0gPT09ICcvJyA/IHRoaXMuX2Jhc2VTY2hlbWUgOiB0aGlzLl9iYXNlUm9vdCkgKyB0aGlzLl9yZW1vdmVEb3RTZWdtZW50cyhpcmkpO1xuICAgIC8vIFJlc29sdmUgYWxsIG90aGVyIElSSXMgYXQgdGhlIGJhc2UgSVJJJ3MgcGF0aFxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlRG90U2VnbWVudHModGhpcy5fYmFzZVBhdGggKyBpcmkpO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9yZW1vdmVEb3RTZWdtZW50c2AgcmVzb2x2ZXMgJy4vJyBhbmQgJy4uLycgcGF0aCBzZWdtZW50cyBpbiBhbiBJUkkgYXMgcGVyIFJGQzM5ODZcbiAgX3JlbW92ZURvdFNlZ21lbnRzOiBmdW5jdGlvbiAoaXJpKSB7XG4gICAgLy8gRG9uJ3QgbW9kaWZ5IHRoZSBJUkkgaWYgaXQgZG9lcyBub3QgY29udGFpbiBhbnkgZG90IHNlZ21lbnRzXG4gICAgaWYgKCFkb3RTZWdtZW50cy50ZXN0KGlyaSkpXG4gICAgICByZXR1cm4gaXJpO1xuXG4gICAgLy8gU3RhcnQgd2l0aCBhbiBpbWFnaW5hcnkgc2xhc2ggYmVmb3JlIHRoZSBJUkkgaW4gb3JkZXIgdG8gcmVzb2x2ZSB0cmFpbGluZyAnLi8nIGFuZCAnLi4vJ1xuICAgIHZhciByZXN1bHQgPSAnJywgbGVuZ3RoID0gaXJpLmxlbmd0aCwgaSA9IC0xLCBwYXRoU3RhcnQgPSAtMSwgc2VnbWVudFN0YXJ0ID0gMCwgbmV4dCA9ICcvJztcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBzd2l0Y2ggKG5leHQpIHtcbiAgICAgIC8vIFRoZSBwYXRoIHN0YXJ0cyB3aXRoIHRoZSBmaXJzdCBzbGFzaCBhZnRlciB0aGUgYXV0aG9yaXR5XG4gICAgICBjYXNlICc6JzpcbiAgICAgICAgaWYgKHBhdGhTdGFydCA8IDApIHtcbiAgICAgICAgICAvLyBTa2lwIHR3byBzbGFzaGVzIGJlZm9yZSB0aGUgYXV0aG9yaXR5XG4gICAgICAgICAgaWYgKGlyaVsrK2ldID09PSAnLycgJiYgaXJpWysraV0gPT09ICcvJylcbiAgICAgICAgICAgIC8vIFNraXAgdG8gc2xhc2ggYWZ0ZXIgdGhlIGF1dGhvcml0eVxuICAgICAgICAgICAgd2hpbGUgKChwYXRoU3RhcnQgPSBpICsgMSkgPCBsZW5ndGggJiYgaXJpW3BhdGhTdGFydF0gIT09ICcvJylcbiAgICAgICAgICAgICAgaSA9IHBhdGhTdGFydDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIC8vIERvbid0IG1vZGlmeSBhIHF1ZXJ5IHN0cmluZyBvciBmcmFnbWVudFxuICAgICAgY2FzZSAnPyc6XG4gICAgICBjYXNlICcjJzpcbiAgICAgICAgaSA9IGxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBIYW5kbGUgJy8uJyBvciAnLy4uJyBwYXRoIHNlZ21lbnRzXG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgaWYgKGlyaVtpICsgMV0gPT09ICcuJykge1xuICAgICAgICAgIG5leHQgPSBpcmlbKytpICsgMV07XG4gICAgICAgICAgc3dpdGNoIChuZXh0KSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIGEgJy8uJyBzZWdtZW50XG4gICAgICAgICAgY2FzZSAnLyc6XG4gICAgICAgICAgICByZXN1bHQgKz0gaXJpLnN1YnN0cmluZyhzZWdtZW50U3RhcnQsIGkgLSAxKTtcbiAgICAgICAgICAgIHNlZ21lbnRTdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gUmVtb3ZlIGEgdHJhaWxpbmcgJy8uJyBzZWdtZW50XG4gICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgaXJpLnN1YnN0cmluZyhzZWdtZW50U3RhcnQsIGkpICsgaXJpLnN1YnN0cihpICsgMSk7XG4gICAgICAgICAgLy8gUmVtb3ZlIGEgJy8uLicgc2VnbWVudFxuICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgICAgbmV4dCA9IGlyaVsrK2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChuZXh0ID09PSB1bmRlZmluZWQgfHwgbmV4dCA9PT0gJy8nIHx8IG5leHQgPT09ICc/JyB8fCBuZXh0ID09PSAnIycpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IGlyaS5zdWJzdHJpbmcoc2VnbWVudFN0YXJ0LCBpIC0gMik7XG4gICAgICAgICAgICAgIC8vIFRyeSB0byByZW1vdmUgdGhlIHBhcmVudCBwYXRoIGZyb20gcmVzdWx0XG4gICAgICAgICAgICAgIGlmICgoc2VnbWVudFN0YXJ0ID0gcmVzdWx0Lmxhc3RJbmRleE9mKCcvJykpID49IHBhdGhTdGFydClcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyKDAsIHNlZ21lbnRTdGFydCk7XG4gICAgICAgICAgICAgIC8vIFJlbW92ZSBhIHRyYWlsaW5nICcvLi4nIHNlZ21lbnRcbiAgICAgICAgICAgICAgaWYgKG5leHQgIT09ICcvJylcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJy8nICsgaXJpLnN1YnN0cihpICsgMSk7XG4gICAgICAgICAgICAgIHNlZ21lbnRTdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dCA9IGlyaVsrK2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ICsgaXJpLnN1YnN0cmluZyhzZWdtZW50U3RhcnQpO1xuICB9LFxuXG4gIC8vICMjIFB1YmxpYyBtZXRob2RzXG5cbiAgLy8gIyMjIGBwYXJzZWAgcGFyc2VzIHRoZSBOMyBpbnB1dCBhbmQgZW1pdHMgZWFjaCBwYXJzZWQgdHJpcGxlIHRocm91Z2ggdGhlIGNhbGxiYWNrXG4gIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIHRyaXBsZUNhbGxiYWNrLCBwcmVmaXhDYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBUaGUgcmVhZCBjYWxsYmFjayBpcyB0aGUgbmV4dCBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCB3aGVuIGEgdG9rZW4gYXJyaXZlcy5cbiAgICAvLyBXZSBzdGFydCByZWFkaW5nIGluIHRoZSB0b3AgY29udGV4dC5cbiAgICB0aGlzLl9yZWFkQ2FsbGJhY2sgPSB0aGlzLl9yZWFkSW5Ub3BDb250ZXh0O1xuICAgIHRoaXMuX3NwYXJxbFN0eWxlID0gZmFsc2U7XG4gICAgdGhpcy5fcHJlZml4ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3ByZWZpeGVzLl8gPSB0aGlzLl9ibGFua05vZGVQcmVmaXggfHwgJ186YicgKyBibGFua05vZGVQcmVmaXgrKyArICdfJztcbiAgICB0aGlzLl9wcmVmaXhDYWxsYmFjayA9IHByZWZpeENhbGxiYWNrIHx8IG5vb3A7XG4gICAgdGhpcy5faW52ZXJzZVByZWRpY2F0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3F1YW50aWZpZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgLy8gUGFyc2Ugc3luY2hyb25vdXNseSBpZiBubyB0cmlwbGUgY2FsbGJhY2sgaXMgZ2l2ZW5cbiAgICBpZiAoIXRyaXBsZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgdHJpcGxlcyA9IFtdLCBlcnJvcjtcbiAgICAgIHRoaXMuX2NhbGxiYWNrID0gZnVuY3Rpb24gKGUsIHQpIHsgZSA/IChlcnJvciA9IGUpIDogdCAmJiB0cmlwbGVzLnB1c2godCk7IH07XG4gICAgICB0aGlzLl9sZXhlci50b2tlbml6ZShpbnB1dCkuZXZlcnkoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9yZWFkQ2FsbGJhY2sgPSBzZWxmLl9yZWFkQ2FsbGJhY2sodG9rZW4pO1xuICAgICAgfSk7XG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgcmV0dXJuIHRyaXBsZXM7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgYXN5bmNocm9ub3VzbHkgb3RoZXJ3aXNlLCBleGVjdXRpbmcgdGhlIHJlYWQgY2FsbGJhY2sgd2hlbiBhIHRva2VuIGFycml2ZXNcbiAgICB0aGlzLl9jYWxsYmFjayA9IHRyaXBsZUNhbGxiYWNrO1xuICAgIHRoaXMuX2xleGVyLnRva2VuaXplKGlucHV0LCBmdW5jdGlvbiAoZXJyb3IsIHRva2VuKSB7XG4gICAgICBpZiAoZXJyb3IgIT09IG51bGwpXG4gICAgICAgIHNlbGYuX2NhbGxiYWNrKGVycm9yKSwgc2VsZi5fY2FsbGJhY2sgPSBub29wO1xuICAgICAgZWxzZSBpZiAoc2VsZi5fcmVhZENhbGxiYWNrKVxuICAgICAgICBzZWxmLl9yZWFkQ2FsbGJhY2sgPSBzZWxmLl9yZWFkQ2FsbGJhY2sodG9rZW4pO1xuICAgIH0pO1xuICB9LFxufTtcblxuLy8gVGhlIGVtcHR5IGZ1bmN0aW9uXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gIyMgRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBOM1BhcnNlcjtcbiIsIi8vICoqTjNTdG9yZSoqIG9iamVjdHMgc3RvcmUgTjMgdHJpcGxlcyBieSBncmFwaCBpbiBtZW1vcnkuXG5cbnZhciBleHBhbmRQcmVmaXhlZE5hbWUgPSByZXF1aXJlKCcuL04zVXRpbCcpLmV4cGFuZFByZWZpeGVkTmFtZTtcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zU3RvcmUodHJpcGxlcywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNTdG9yZSkpXG4gICAgcmV0dXJuIG5ldyBOM1N0b3JlKHRyaXBsZXMsIG9wdGlvbnMpO1xuXG4gIC8vIFRoZSBudW1iZXIgb2YgdHJpcGxlcyBpcyBpbml0aWFsbHkgemVyb1xuICB0aGlzLl9zaXplID0gMDtcbiAgLy8gYF9ncmFwaHNgIGNvbnRhaW5zIHN1YmplY3QsIHByZWRpY2F0ZSwgYW5kIG9iamVjdCBpbmRleGVzIHBlciBncmFwaFxuICB0aGlzLl9ncmFwaHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBgX2lkc2AgbWFwcyBlbnRpdGllcyBzdWNoIGFzIGBodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xL25hbWVgIHRvIG51bWJlcnMsXG4gIC8vIHNhdmluZyBtZW1vcnkgYnkgdXNpbmcgb25seSBudW1iZXJzIGFzIGtleXMgaW4gYF9ncmFwaHNgXG4gIHRoaXMuX2lkID0gMDtcbiAgdGhpcy5faWRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5faWRzWyc+PCddID0gMDsgLy8gZHVtbXkgZW50cnksIHNvIHRoZSBmaXJzdCBhY3R1YWwga2V5IGlzIG5vbi16ZXJvXG4gIHRoaXMuX2VudGl0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gaW52ZXJzZSBvZiBgX2lkc2BcbiAgLy8gYF9ibGFua05vZGVJbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGF1dG9tYXRpY2FsbHkgbmFtZWQgYmxhbmsgbm9kZVxuICB0aGlzLl9ibGFua05vZGVJbmRleCA9IDA7XG5cbiAgLy8gU2hpZnQgcGFyYW1ldGVycyBpZiBgdHJpcGxlc2AgaXMgbm90IGdpdmVuXG4gIGlmICghb3B0aW9ucyAmJiB0cmlwbGVzICYmICF0cmlwbGVzWzBdKVxuICAgIG9wdGlvbnMgPSB0cmlwbGVzLCB0cmlwbGVzID0gbnVsbDtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gQWRkIHRyaXBsZXMgYW5kIHByZWZpeGVzIGlmIHBhc3NlZFxuICB0aGlzLl9wcmVmaXhlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChvcHRpb25zLnByZWZpeGVzKVxuICAgIHRoaXMuYWRkUHJlZml4ZXMob3B0aW9ucy5wcmVmaXhlcyk7XG4gIGlmICh0cmlwbGVzKVxuICAgIHRoaXMuYWRkVHJpcGxlcyh0cmlwbGVzKTtcbn1cblxuTjNTdG9yZS5wcm90b3R5cGUgPSB7XG4gIC8vICMjIFB1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgLy8gIyMjIGBzaXplYCByZXR1cm5zIHRoZSBudW1iZXIgb2YgdHJpcGxlcyBpbiB0aGUgc3RvcmVcbiAgZ2V0IHNpemUoKSB7XG4gICAgLy8gUmV0dXJuIHRoZSB0cmlwbGUgY291bnQgaWYgaWYgd2FzIGNhY2hlZFxuICAgIHZhciBzaXplID0gdGhpcy5fc2l6ZTtcbiAgICBpZiAoc2l6ZSAhPT0gbnVsbClcbiAgICAgIHJldHVybiBzaXplO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgdHJpcGxlcyBieSBjb3VudGluZyB0byB0aGUgZGVlcGVzdCBsZXZlbFxuICAgIHNpemUgPSAwO1xuICAgIHZhciBncmFwaHMgPSB0aGlzLl9ncmFwaHMsIHN1YmplY3RzLCBzdWJqZWN0O1xuICAgIGZvciAodmFyIGdyYXBoS2V5IGluIGdyYXBocylcbiAgICAgIGZvciAodmFyIHN1YmplY3RLZXkgaW4gKHN1YmplY3RzID0gZ3JhcGhzW2dyYXBoS2V5XS5zdWJqZWN0cykpXG4gICAgICAgIGZvciAodmFyIHByZWRpY2F0ZUtleSBpbiAoc3ViamVjdCA9IHN1YmplY3RzW3N1YmplY3RLZXldKSlcbiAgICAgICAgICBzaXplICs9IE9iamVjdC5rZXlzKHN1YmplY3RbcHJlZGljYXRlS2V5XSkubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9zaXplID0gc2l6ZTtcbiAgfSxcblxuICAvLyAjIyBQcml2YXRlIG1ldGhvZHNcblxuICAvLyAjIyMgYF9hZGRUb0luZGV4YCBhZGRzIGEgdHJpcGxlIHRvIGEgdGhyZWUtbGF5ZXJlZCBpbmRleC5cbiAgLy8gUmV0dXJucyBpZiB0aGUgaW5kZXggaGFzIGNoYW5nZWQsIGlmIHRoZSBlbnRyeSBkaWQgbm90IGFscmVhZHkgZXhpc3QuXG4gIF9hZGRUb0luZGV4OiBmdW5jdGlvbiAoaW5kZXgwLCBrZXkwLCBrZXkxLCBrZXkyKSB7XG4gICAgLy8gQ3JlYXRlIGxheWVycyBhcyBuZWNlc3NhcnlcbiAgICB2YXIgaW5kZXgxID0gaW5kZXgwW2tleTBdIHx8IChpbmRleDBba2V5MF0gPSB7fSk7XG4gICAgdmFyIGluZGV4MiA9IGluZGV4MVtrZXkxXSB8fCAoaW5kZXgxW2tleTFdID0ge30pO1xuICAgIC8vIFNldHRpbmcgdGhlIGtleSB0byBfYW55XyB2YWx1ZSBzaWduYWxzIHRoZSBwcmVzZW5jZSBvZiB0aGUgdHJpcGxlXG4gICAgdmFyIGV4aXN0ZWQgPSBrZXkyIGluIGluZGV4MjtcbiAgICBpZiAoIWV4aXN0ZWQpXG4gICAgICBpbmRleDJba2V5Ml0gPSBudWxsO1xuICAgIHJldHVybiAhZXhpc3RlZDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZW1vdmVGcm9tSW5kZXhgIHJlbW92ZXMgYSB0cmlwbGUgZnJvbSBhIHRocmVlLWxheWVyZWQgaW5kZXhcbiAgX3JlbW92ZUZyb21JbmRleDogZnVuY3Rpb24gKGluZGV4MCwga2V5MCwga2V5MSwga2V5Mikge1xuICAgIC8vIFJlbW92ZSB0aGUgdHJpcGxlIGZyb20gdGhlIGluZGV4XG4gICAgdmFyIGluZGV4MSA9IGluZGV4MFtrZXkwXSwgaW5kZXgyID0gaW5kZXgxW2tleTFdLCBrZXk7XG4gICAgZGVsZXRlIGluZGV4MltrZXkyXTtcblxuICAgIC8vIFJlbW92ZSBpbnRlcm1lZGlhcnkgaW5kZXggbGF5ZXJzIGlmIHRoZXkgYXJlIGVtcHR5XG4gICAgZm9yIChrZXkgaW4gaW5kZXgyKSByZXR1cm47XG4gICAgZGVsZXRlIGluZGV4MVtrZXkxXTtcbiAgICBmb3IgKGtleSBpbiBpbmRleDEpIHJldHVybjtcbiAgICBkZWxldGUgaW5kZXgwW2tleTBdO1xuICB9LFxuXG4gIC8vICMjIyBgX2ZpbmRJbkluZGV4YCBmaW5kcyBhIHNldCBvZiB0cmlwbGVzIGluIGEgdGhyZWUtbGF5ZXJlZCBpbmRleC5cbiAgLy8gVGhlIGluZGV4IGJhc2UgaXMgYGluZGV4MGAgYW5kIHRoZSBrZXlzIGF0IGVhY2ggbGV2ZWwgYXJlIGBrZXkwYCwgYGtleTFgLCBhbmQgYGtleTJgLlxuICAvLyBBbnkgb2YgdGhlc2Uga2V5cyBjYW4gYmUgdW5kZWZpbmVkLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhIHdpbGRjYXJkLlxuICAvLyBgbmFtZTBgLCBgbmFtZTFgLCBhbmQgYG5hbWUyYCBhcmUgdGhlIG5hbWVzIG9mIHRoZSBrZXlzIGF0IGVhY2ggbGV2ZWwsXG4gIC8vIHVzZWQgd2hlbiByZWNvbnN0cnVjdGluZyB0aGUgcmVzdWx0aW5nIHRyaXBsZVxuICAvLyAoZm9yIGluc3RhbmNlOiBfc3ViamVjdF8sIF9wcmVkaWNhdGVfLCBhbmQgX29iamVjdF8pLlxuICAvLyBGaW5hbGx5LCBgZ3JhcGhgIHdpbGwgYmUgdGhlIGdyYXBoIG9mIHRoZSBjcmVhdGVkIHRyaXBsZXMuXG4gIC8vIElmIGBjYWxsYmFja2AgaXMgZ2l2ZW4sIGVhY2ggcmVzdWx0IGlzIHBhc3NlZCB0aHJvdWdoIGl0XG4gIC8vIGFuZCBpdGVyYXRpb24gaGFsdHMgd2hlbiBpdCByZXR1cm5zIHRydXRoeSBmb3IgYW55IHRyaXBsZS5cbiAgLy8gSWYgaW5zdGVhZCBgYXJyYXlgIGlzIGdpdmVuLCBlYWNoIHJlc3VsdCBpcyBhZGRlZCB0byB0aGUgYXJyYXkuXG4gIF9maW5kSW5JbmRleDogZnVuY3Rpb24gKGluZGV4MCwga2V5MCwga2V5MSwga2V5MiwgbmFtZTAsIG5hbWUxLCBuYW1lMiwgZ3JhcGgsIGNhbGxiYWNrLCBhcnJheSkge1xuICAgIHZhciB0bXAsIGluZGV4MSwgaW5kZXgyLCB2YXJDb3VudCA9ICFrZXkwICsgIWtleTEgKyAha2V5MixcbiAgICAgICAgLy8gZGVwZW5kaW5nIG9uIHRoZSBudW1iZXIgb2YgdmFyaWFibGVzLCBrZXlzIG9yIHJldmVyc2UgaW5kZXggYXJlIGZhc3RlclxuICAgICAgICBlbnRpdHlLZXlzID0gdmFyQ291bnQgPiAxID8gT2JqZWN0LmtleXModGhpcy5faWRzKSA6IHRoaXMuX2VudGl0aWVzO1xuXG4gICAgLy8gSWYgYSBrZXkgaXMgc3BlY2lmaWVkLCB1c2Ugb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMC5cbiAgICBpZiAoa2V5MCkgKHRtcCA9IGluZGV4MCwgaW5kZXgwID0ge30pW2tleTBdID0gdG1wW2tleTBdO1xuICAgIGZvciAodmFyIHZhbHVlMCBpbiBpbmRleDApIHtcbiAgICAgIHZhciBlbnRpdHkwID0gZW50aXR5S2V5c1t2YWx1ZTBdO1xuXG4gICAgICBpZiAoaW5kZXgxID0gaW5kZXgwW3ZhbHVlMF0pIHtcbiAgICAgICAgLy8gSWYgYSBrZXkgaXMgc3BlY2lmaWVkLCB1c2Ugb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMS5cbiAgICAgICAgaWYgKGtleTEpICh0bXAgPSBpbmRleDEsIGluZGV4MSA9IHt9KVtrZXkxXSA9IHRtcFtrZXkxXTtcbiAgICAgICAgZm9yICh2YXIgdmFsdWUxIGluIGluZGV4MSkge1xuICAgICAgICAgIHZhciBlbnRpdHkxID0gZW50aXR5S2V5c1t2YWx1ZTFdO1xuXG4gICAgICAgICAgaWYgKGluZGV4MiA9IGluZGV4MVt2YWx1ZTFdKSB7XG4gICAgICAgICAgICAvLyBJZiBhIGtleSBpcyBzcGVjaWZpZWQsIHVzZSBvbmx5IHRoYXQgcGFydCBvZiBpbmRleCAyLCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0ga2V5MiA/IChrZXkyIGluIGluZGV4MiA/IFtrZXkyXSA6IFtdKSA6IE9iamVjdC5rZXlzKGluZGV4Mik7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdHJpcGxlcyBmb3IgYWxsIGl0ZW1zIGZvdW5kIGluIGluZGV4IDIuXG4gICAgICAgICAgICBmb3IgKHZhciBsID0gdmFsdWVzLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7IHN1YmplY3Q6ICcnLCBwcmVkaWNhdGU6ICcnLCBvYmplY3Q6ICcnLCBncmFwaDogZ3JhcGggfTtcbiAgICAgICAgICAgICAgcmVzdWx0W25hbWUwXSA9IGVudGl0eTA7XG4gICAgICAgICAgICAgIHJlc3VsdFtuYW1lMV0gPSBlbnRpdHkxO1xuICAgICAgICAgICAgICByZXN1bHRbbmFtZTJdID0gZW50aXR5S2V5c1t2YWx1ZXNbbF1dO1xuICAgICAgICAgICAgICBpZiAoYXJyYXkpXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChjYWxsYmFjayhyZXN1bHQpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfbG9vcGAgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCBrZXlzIG9mIGluZGV4IDBcbiAgX2xvb3A6IGZ1bmN0aW9uIChpbmRleDAsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIga2V5MCBpbiBpbmRleDApXG4gICAgICBjYWxsYmFjayhrZXkwKTtcbiAgfSxcblxuICAvLyAjIyMgYF9sb29wQnlLZXkwYCBleGVjdXRlcyB0aGUgY2FsbGJhY2sgb24gYWxsIGtleXMgb2YgYSBjZXJ0YWluIGVudHJ5IGluIGluZGV4IDBcbiAgX2xvb3BCeUtleTA6IGZ1bmN0aW9uIChpbmRleDAsIGtleTAsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGluZGV4MSwga2V5MTtcbiAgICBpZiAoaW5kZXgxID0gaW5kZXgwW2tleTBdKSB7XG4gICAgICBmb3IgKGtleTEgaW4gaW5kZXgxKVxuICAgICAgICBjYWxsYmFjayhrZXkxKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfbG9vcEJ5S2V5MWAgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGdpdmVuIGtleXMgb2YgYWxsIGVudHJpZXMgaW4gaW5kZXggMFxuICBfbG9vcEJ5S2V5MTogZnVuY3Rpb24gKGluZGV4MCwga2V5MSwgY2FsbGJhY2spIHtcbiAgICB2YXIga2V5MCwgaW5kZXgxO1xuICAgIGZvciAoa2V5MCBpbiBpbmRleDApIHtcbiAgICAgIGluZGV4MSA9IGluZGV4MFtrZXkwXTtcbiAgICAgIGlmIChpbmRleDFba2V5MV0pXG4gICAgICAgIGNhbGxiYWNrKGtleTApO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9sb29wQnkyS2V5c2AgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGdpdmVuIGtleXMgb2YgY2VydGFpbiBlbnRyaWVzIGluIGluZGV4IDJcbiAgX2xvb3BCeTJLZXlzOiBmdW5jdGlvbiAoaW5kZXgwLCBrZXkwLCBrZXkxLCBjYWxsYmFjaykge1xuICAgIHZhciBpbmRleDEsIGluZGV4Miwga2V5MjtcbiAgICBpZiAoKGluZGV4MSA9IGluZGV4MFtrZXkwXSkgJiYgKGluZGV4MiA9IGluZGV4MVtrZXkxXSkpIHtcbiAgICAgIGZvciAoa2V5MiBpbiBpbmRleDIpXG4gICAgICAgIGNhbGxiYWNrKGtleTIpO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9jb3VudEluSW5kZXhgIGNvdW50cyBtYXRjaGluZyB0cmlwbGVzIGluIGEgdGhyZWUtbGF5ZXJlZCBpbmRleC5cbiAgLy8gVGhlIGluZGV4IGJhc2UgaXMgYGluZGV4MGAgYW5kIHRoZSBrZXlzIGF0IGVhY2ggbGV2ZWwgYXJlIGBrZXkwYCwgYGtleTFgLCBhbmQgYGtleTJgLlxuICAvLyBBbnkgb2YgdGhlc2Uga2V5cyBjYW4gYmUgdW5kZWZpbmVkLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhIHdpbGRjYXJkLlxuICBfY291bnRJbkluZGV4OiBmdW5jdGlvbiAoaW5kZXgwLCBrZXkwLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIGNvdW50ID0gMCwgdG1wLCBpbmRleDEsIGluZGV4MjtcblxuICAgIC8vIElmIGEga2V5IGlzIHNwZWNpZmllZCwgY291bnQgb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMFxuICAgIGlmIChrZXkwKSAodG1wID0gaW5kZXgwLCBpbmRleDAgPSB7fSlba2V5MF0gPSB0bXBba2V5MF07XG4gICAgZm9yICh2YXIgdmFsdWUwIGluIGluZGV4MCkge1xuICAgICAgaWYgKGluZGV4MSA9IGluZGV4MFt2YWx1ZTBdKSB7XG4gICAgICAgIC8vIElmIGEga2V5IGlzIHNwZWNpZmllZCwgY291bnQgb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMVxuICAgICAgICBpZiAoa2V5MSkgKHRtcCA9IGluZGV4MSwgaW5kZXgxID0ge30pW2tleTFdID0gdG1wW2tleTFdO1xuICAgICAgICBmb3IgKHZhciB2YWx1ZTEgaW4gaW5kZXgxKSB7XG4gICAgICAgICAgaWYgKGluZGV4MiA9IGluZGV4MVt2YWx1ZTFdKSB7XG4gICAgICAgICAgICAvLyBJZiBhIGtleSBpcyBzcGVjaWZpZWQsIGNvdW50IHRoZSB0cmlwbGUgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICBpZiAoa2V5MikgKGtleTIgaW4gaW5kZXgyKSAmJiBjb3VudCsrO1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjb3VudCBhbGwgdHJpcGxlc1xuICAgICAgICAgICAgZWxzZSBjb3VudCArPSBPYmplY3Qua2V5cyhpbmRleDIpLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9LFxuXG4gIC8vICMjIyBgX2dldEdyYXBoc2AgcmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBnaXZlbiBncmFwaCxcbiAgLy8gb3IgYWxsIGdyYXBocyBpZiB0aGUgYXJndW1lbnQgaXMgbnVsbCBvciB1bmRlZmluZWQuXG4gIF9nZXRHcmFwaHM6IGZ1bmN0aW9uIChncmFwaCkge1xuICAgIGlmICghaXNTdHJpbmcoZ3JhcGgpKVxuICAgICAgcmV0dXJuIHRoaXMuX2dyYXBocztcbiAgICB2YXIgZ3JhcGhzID0ge307XG4gICAgZ3JhcGhzW2dyYXBoXSA9IHRoaXMuX2dyYXBoc1tncmFwaF07XG4gICAgcmV0dXJuIGdyYXBocztcbiAgfSxcblxuICAvLyAjIyMgYF91bmlxdWVFbnRpdGllc2AgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhbiBlbnRpdHkgSURcbiAgLy8gYW5kIHBhc3NlcyB0aGUgY29ycmVzcG9uZGluZyBlbnRpdHkgdG8gY2FsbGJhY2sgaWYgaXQgaGFzbid0IG9jY3VycmVkIGJlZm9yZS5cbiAgX3VuaXF1ZUVudGl0aWVzOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdW5pcXVlSWRzID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgZW50aXRpZXMgPSB0aGlzLl9lbnRpdGllcztcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoIShpZCBpbiB1bmlxdWVJZHMpKSB7XG4gICAgICAgIHVuaXF1ZUlkc1tpZF0gPSB0cnVlO1xuICAgICAgICBjYWxsYmFjayhlbnRpdGllc1tpZF0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgLy8gIyMgUHVibGljIG1ldGhvZHNcblxuICAvLyAjIyMgYGFkZFRyaXBsZWAgYWRkcyBhIG5ldyBOMyB0cmlwbGUgdG8gdGhlIHN0b3JlLlxuICAvLyBSZXR1cm5zIGlmIHRoZSB0cmlwbGUgaW5kZXggaGFzIGNoYW5nZWQsIGlmIHRoZSB0cmlwbGUgZGlkIG5vdCBhbHJlYWR5IGV4aXN0LlxuICBhZGRUcmlwbGU6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICAvLyBTaGlmdCBhcmd1bWVudHMgaWYgYSB0cmlwbGUgb2JqZWN0IGlzIGdpdmVuIGluc3RlYWQgb2YgY29tcG9uZW50c1xuICAgIGlmICghcHJlZGljYXRlKVxuICAgICAgZ3JhcGggPSBzdWJqZWN0LmdyYXBoLCBvYmplY3QgPSBzdWJqZWN0Lm9iamVjdCxcbiAgICAgICAgcHJlZGljYXRlID0gc3ViamVjdC5wcmVkaWNhdGUsIHN1YmplY3QgPSBzdWJqZWN0LnN1YmplY3Q7XG5cbiAgICAvLyBGaW5kIHRoZSBncmFwaCB0aGF0IHdpbGwgY29udGFpbiB0aGUgdHJpcGxlXG4gICAgZ3JhcGggPSBncmFwaCB8fCAnJztcbiAgICB2YXIgZ3JhcGhJdGVtID0gdGhpcy5fZ3JhcGhzW2dyYXBoXTtcbiAgICAvLyBDcmVhdGUgdGhlIGdyYXBoIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0XG4gICAgaWYgKCFncmFwaEl0ZW0pIHtcbiAgICAgIGdyYXBoSXRlbSA9IHRoaXMuX2dyYXBoc1tncmFwaF0gPSB7IHN1YmplY3RzOiB7fSwgcHJlZGljYXRlczoge30sIG9iamVjdHM6IHt9IH07XG4gICAgICAvLyBGcmVlemluZyBhIGdyYXBoIGhlbHBzIHN1YnNlcXVlbnQgYGFkZGAgcGVyZm9ybWFuY2UsXG4gICAgICAvLyBhbmQgcHJvcGVydGllcyB3aWxsIG5ldmVyIGJlIG1vZGlmaWVkIGFueXdheVxuICAgICAgT2JqZWN0LmZyZWV6ZShncmFwaEl0ZW0pO1xuICAgIH1cblxuICAgIC8vIFNpbmNlIGVudGl0aWVzIGNhbiBvZnRlbiBiZSBsb25nIElSSXMsIHdlIGF2b2lkIHN0b3JpbmcgdGhlbSBpbiBldmVyeSBpbmRleC5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBoYXZlIGEgc2VwYXJhdGUgaW5kZXggdGhhdCBtYXBzIGVudGl0aWVzIHRvIG51bWJlcnMsXG4gICAgLy8gd2hpY2ggYXJlIHRoZW4gdXNlZCBhcyBrZXlzIGluIHRoZSBvdGhlciBpbmRleGVzLlxuICAgIHZhciBpZHMgPSB0aGlzLl9pZHM7XG4gICAgdmFyIGVudGl0aWVzID0gdGhpcy5fZW50aXRpZXM7XG4gICAgc3ViamVjdCAgID0gaWRzW3N1YmplY3RdICAgfHwgKGlkc1tlbnRpdGllc1srK3RoaXMuX2lkXSA9IHN1YmplY3RdICAgPSB0aGlzLl9pZCk7XG4gICAgcHJlZGljYXRlID0gaWRzW3ByZWRpY2F0ZV0gfHwgKGlkc1tlbnRpdGllc1srK3RoaXMuX2lkXSA9IHByZWRpY2F0ZV0gPSB0aGlzLl9pZCk7XG4gICAgb2JqZWN0ICAgID0gaWRzW29iamVjdF0gICAgfHwgKGlkc1tlbnRpdGllc1srK3RoaXMuX2lkXSA9IG9iamVjdF0gICAgPSB0aGlzLl9pZCk7XG5cbiAgICB2YXIgY2hhbmdlZCA9IHRoaXMuX2FkZFRvSW5kZXgoZ3JhcGhJdGVtLnN1YmplY3RzLCAgIHN1YmplY3QsICAgcHJlZGljYXRlLCBvYmplY3QpO1xuICAgIHRoaXMuX2FkZFRvSW5kZXgoZ3JhcGhJdGVtLnByZWRpY2F0ZXMsIHByZWRpY2F0ZSwgb2JqZWN0LCAgICBzdWJqZWN0KTtcbiAgICB0aGlzLl9hZGRUb0luZGV4KGdyYXBoSXRlbS5vYmplY3RzLCAgICBvYmplY3QsICAgIHN1YmplY3QsICAgcHJlZGljYXRlKTtcblxuICAgIC8vIFRoZSBjYWNoZWQgdHJpcGxlIGNvdW50IGlzIG5vdyBpbnZhbGlkXG4gICAgdGhpcy5fc2l6ZSA9IG51bGw7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH0sXG5cbiAgLy8gIyMjIGBhZGRUcmlwbGVzYCBhZGRzIG11bHRpcGxlIE4zIHRyaXBsZXMgdG8gdGhlIHN0b3JlXG4gIGFkZFRyaXBsZXM6IGZ1bmN0aW9uICh0cmlwbGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IHRyaXBsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICB0aGlzLmFkZFRyaXBsZSh0cmlwbGVzW2ldKTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFByZWZpeGAgYWRkcyBzdXBwb3J0IGZvciBxdWVyeWluZyB3aXRoIHRoZSBnaXZlbiBwcmVmaXhcbiAgYWRkUHJlZml4OiBmdW5jdGlvbiAocHJlZml4LCBpcmkpIHtcbiAgICB0aGlzLl9wcmVmaXhlc1twcmVmaXhdID0gaXJpO1xuICB9LFxuXG4gIC8vICMjIyBgYWRkUHJlZml4ZXNgIGFkZHMgc3VwcG9ydCBmb3IgcXVlcnlpbmcgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4ZXNcbiAgYWRkUHJlZml4ZXM6IGZ1bmN0aW9uIChwcmVmaXhlcykge1xuICAgIGZvciAodmFyIHByZWZpeCBpbiBwcmVmaXhlcylcbiAgICAgIHRoaXMuYWRkUHJlZml4KHByZWZpeCwgcHJlZml4ZXNbcHJlZml4XSk7XG4gIH0sXG5cbiAgLy8gIyMjIGByZW1vdmVUcmlwbGVgIHJlbW92ZXMgYW4gTjMgdHJpcGxlIGZyb20gdGhlIHN0b3JlIGlmIGl0IGV4aXN0c1xuICByZW1vdmVUcmlwbGU6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICAvLyBTaGlmdCBhcmd1bWVudHMgaWYgYSB0cmlwbGUgb2JqZWN0IGlzIGdpdmVuIGluc3RlYWQgb2YgY29tcG9uZW50c1xuICAgIGlmICghcHJlZGljYXRlKVxuICAgICAgZ3JhcGggPSBzdWJqZWN0LmdyYXBoLCBvYmplY3QgPSBzdWJqZWN0Lm9iamVjdCxcbiAgICAgICAgcHJlZGljYXRlID0gc3ViamVjdC5wcmVkaWNhdGUsIHN1YmplY3QgPSBzdWJqZWN0LnN1YmplY3Q7XG4gICAgZ3JhcGggPSBncmFwaCB8fCAnJztcblxuICAgIC8vIEZpbmQgaW50ZXJuYWwgaWRlbnRpZmllcnMgZm9yIGFsbCBjb21wb25lbnRzXG4gICAgLy8gYW5kIHZlcmlmeSB0aGUgdHJpcGxlIGV4aXN0cy5cbiAgICB2YXIgZ3JhcGhJdGVtLCBpZHMgPSB0aGlzLl9pZHMsIGdyYXBocyA9IHRoaXMuX2dyYXBocywgc3ViamVjdHMsIHByZWRpY2F0ZXM7XG4gICAgaWYgKCEoc3ViamVjdCAgICA9IGlkc1tzdWJqZWN0XSkgfHwgIShwcmVkaWNhdGUgPSBpZHNbcHJlZGljYXRlXSkgfHxcbiAgICAgICAgIShvYmplY3QgICAgID0gaWRzW29iamVjdF0pICB8fCAhKGdyYXBoSXRlbSA9IGdyYXBoc1tncmFwaF0pICB8fFxuICAgICAgICAhKHN1YmplY3RzICAgPSBncmFwaEl0ZW0uc3ViamVjdHNbc3ViamVjdF0pIHx8XG4gICAgICAgICEocHJlZGljYXRlcyA9IHN1YmplY3RzW3ByZWRpY2F0ZV0pIHx8XG4gICAgICAgICEob2JqZWN0IGluIHByZWRpY2F0ZXMpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gUmVtb3ZlIGl0IGZyb20gYWxsIGluZGV4ZXNcbiAgICB0aGlzLl9yZW1vdmVGcm9tSW5kZXgoZ3JhcGhJdGVtLnN1YmplY3RzLCAgIHN1YmplY3QsICAgcHJlZGljYXRlLCBvYmplY3QpO1xuICAgIHRoaXMuX3JlbW92ZUZyb21JbmRleChncmFwaEl0ZW0ucHJlZGljYXRlcywgcHJlZGljYXRlLCBvYmplY3QsICAgIHN1YmplY3QpO1xuICAgIHRoaXMuX3JlbW92ZUZyb21JbmRleChncmFwaEl0ZW0ub2JqZWN0cywgICAgb2JqZWN0LCAgICBzdWJqZWN0LCAgIHByZWRpY2F0ZSk7XG4gICAgaWYgKHRoaXMuX3NpemUgIT09IG51bGwpIHRoaXMuX3NpemUtLTtcblxuICAgIC8vIFJlbW92ZSB0aGUgZ3JhcGggaWYgaXQgaXMgZW1wdHlcbiAgICBmb3IgKHN1YmplY3QgaW4gZ3JhcGhJdGVtLnN1YmplY3RzKSByZXR1cm4gdHJ1ZTtcbiAgICBkZWxldGUgZ3JhcGhzW2dyYXBoXTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvLyAjIyMgYHJlbW92ZVRyaXBsZXNgIHJlbW92ZXMgbXVsdGlwbGUgTjMgdHJpcGxlcyBmcm9tIHRoZSBzdG9yZVxuICByZW1vdmVUcmlwbGVzOiBmdW5jdGlvbiAodHJpcGxlcykge1xuICAgIGZvciAodmFyIGkgPSB0cmlwbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgdGhpcy5yZW1vdmVUcmlwbGUodHJpcGxlc1tpXSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBnZXRUcmlwbGVzYCByZXR1cm5zIGFuIGFycmF5IG9mIHRyaXBsZXMgbWF0Y2hpbmcgYSBwYXR0ZXJuLCBleHBhbmRpbmcgcHJlZml4ZXMgYXMgbmVjZXNzYXJ5LlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGdldFRyaXBsZXM6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICByZXR1cm4gdGhpcy5nZXRUcmlwbGVzQnlJUkkoXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUoc3ViamVjdCwgICBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUocHJlZGljYXRlLCBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUob2JqZWN0LCAgICBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUoZ3JhcGgsICAgICBwcmVmaXhlcylcbiAgICApO1xuICB9LFxuXG4gIC8vICMjIyBgZ2V0VHJpcGxlc0J5SVJJYCByZXR1cm5zIGFuIGFycmF5IG9mIHRyaXBsZXMgbWF0Y2hpbmcgYSBwYXR0ZXJuLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGdldFRyaXBsZXNCeUlSSTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIHZhciBxdWFkcyA9IFtdLCBncmFwaHMgPSB0aGlzLl9nZXRHcmFwaHMoZ3JhcGgpLCBjb250ZW50LFxuICAgICAgICBpZHMgPSB0aGlzLl9pZHMsIHN1YmplY3RJZCwgcHJlZGljYXRlSWQsIG9iamVjdElkO1xuXG4gICAgLy8gVHJhbnNsYXRlIElSSXMgdG8gaW50ZXJuYWwgaW5kZXgga2V5cy5cbiAgICBpZiAoaXNTdHJpbmcoc3ViamVjdCkgICAmJiAhKHN1YmplY3RJZCAgID0gaWRzW3N1YmplY3RdKSAgIHx8XG4gICAgICAgIGlzU3RyaW5nKHByZWRpY2F0ZSkgJiYgIShwcmVkaWNhdGVJZCA9IGlkc1twcmVkaWNhdGVdKSB8fFxuICAgICAgICBpc1N0cmluZyhvYmplY3QpICAgICYmICEob2JqZWN0SWQgICAgPSBpZHNbb2JqZWN0XSkpXG4gICAgICByZXR1cm4gcXVhZHM7XG5cbiAgICBmb3IgKHZhciBncmFwaElkIGluIGdyYXBocykge1xuICAgICAgLy8gT25seSBpZiB0aGUgc3BlY2lmaWVkIGdyYXBoIGNvbnRhaW5zIHRyaXBsZXMsIHRoZXJlIGNhbiBiZSByZXN1bHRzXG4gICAgICBpZiAoY29udGVudCA9IGdyYXBoc1tncmFwaElkXSkge1xuICAgICAgICAvLyBDaG9vc2UgdGhlIG9wdGltYWwgaW5kZXgsIGJhc2VkIG9uIHdoYXQgZmllbGRzIGFyZSBwcmVzZW50XG4gICAgICAgIGlmIChzdWJqZWN0SWQpIHtcbiAgICAgICAgICBpZiAob2JqZWN0SWQpXG4gICAgICAgICAgICAvLyBJZiBzdWJqZWN0IGFuZCBvYmplY3QgYXJlIGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3RcbiAgICAgICAgICAgIHRoaXMuX2ZpbmRJbkluZGV4KGNvbnRlbnQub2JqZWN0cywgb2JqZWN0SWQsIHN1YmplY3RJZCwgcHJlZGljYXRlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JywgJ3N1YmplY3QnLCAncHJlZGljYXRlJywgZ3JhcGhJZCwgbnVsbCwgcXVhZHMpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIC8vIElmIG9ubHkgc3ViamVjdCBhbmQgcG9zc2libHkgcHJlZGljYXRlIGFyZSBnaXZlbiwgdGhlIHN1YmplY3QgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdFxuICAgICAgICAgICAgdGhpcy5fZmluZEluSW5kZXgoY29udGVudC5zdWJqZWN0cywgc3ViamVjdElkLCBwcmVkaWNhdGVJZCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJqZWN0JywgJ3ByZWRpY2F0ZScsICdvYmplY3QnLCBncmFwaElkLCBudWxsLCBxdWFkcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJlZGljYXRlSWQpXG4gICAgICAgICAgLy8gSWYgb25seSBwcmVkaWNhdGUgYW5kIHBvc3NpYmx5IG9iamVjdCBhcmUgZ2l2ZW4sIHRoZSBwcmVkaWNhdGUgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdFxuICAgICAgICAgIHRoaXMuX2ZpbmRJbkluZGV4KGNvbnRlbnQucHJlZGljYXRlcywgcHJlZGljYXRlSWQsIG9iamVjdElkLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgJ3N1YmplY3QnLCBncmFwaElkLCBudWxsLCBxdWFkcyk7XG4gICAgICAgIGVsc2UgaWYgKG9iamVjdElkKVxuICAgICAgICAgIC8vIElmIG9ubHkgb2JqZWN0IGlzIGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3RcbiAgICAgICAgICB0aGlzLl9maW5kSW5JbmRleChjb250ZW50Lm9iamVjdHMsIG9iamVjdElkLCBudWxsLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvYmplY3QnLCAnc3ViamVjdCcsICdwcmVkaWNhdGUnLCBncmFwaElkLCBudWxsLCBxdWFkcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAvLyBJZiBub3RoaW5nIGlzIGdpdmVuLCBpdGVyYXRlIHN1YmplY3RzIGFuZCBwcmVkaWNhdGVzIGZpcnN0XG4gICAgICAgICAgdGhpcy5fZmluZEluSW5kZXgoY29udGVudC5zdWJqZWN0cywgbnVsbCwgbnVsbCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViamVjdCcsICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgZ3JhcGhJZCwgbnVsbCwgcXVhZHMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVhZHM7XG4gIH0sXG5cbiAgLy8gIyMjIGBjb3VudFRyaXBsZXNgIHJldHVybnMgdGhlIG51bWJlciBvZiB0cmlwbGVzIG1hdGNoaW5nIGEgcGF0dGVybiwgZXhwYW5kaW5nIHByZWZpeGVzIGFzIG5lY2Vzc2FyeS5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBjb3VudFRyaXBsZXM6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICByZXR1cm4gdGhpcy5jb3VudFRyaXBsZXNCeUlSSShcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShncmFwaCwgICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBjb3VudFRyaXBsZXNCeUlSSWAgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHRyaXBsZXMgbWF0Y2hpbmcgYSBwYXR0ZXJuLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGNvdW50VHJpcGxlc0J5SVJJOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIGNvdW50ID0gMCwgZ3JhcGhzID0gdGhpcy5fZ2V0R3JhcGhzKGdyYXBoKSwgY29udGVudCxcbiAgICAgICAgaWRzID0gdGhpcy5faWRzLCBzdWJqZWN0SWQsIHByZWRpY2F0ZUlkLCBvYmplY3RJZDtcblxuICAgIC8vIFRyYW5zbGF0ZSBJUklzIHRvIGludGVybmFsIGluZGV4IGtleXMuXG4gICAgaWYgKGlzU3RyaW5nKHN1YmplY3QpICAgJiYgIShzdWJqZWN0SWQgICA9IGlkc1tzdWJqZWN0XSkgICB8fFxuICAgICAgICBpc1N0cmluZyhwcmVkaWNhdGUpICYmICEocHJlZGljYXRlSWQgPSBpZHNbcHJlZGljYXRlXSkgfHxcbiAgICAgICAgaXNTdHJpbmcob2JqZWN0KSAgICAmJiAhKG9iamVjdElkICAgID0gaWRzW29iamVjdF0pKVxuICAgICAgcmV0dXJuIDA7XG5cbiAgICBmb3IgKHZhciBncmFwaElkIGluIGdyYXBocykge1xuICAgICAgLy8gT25seSBpZiB0aGUgc3BlY2lmaWVkIGdyYXBoIGNvbnRhaW5zIHRyaXBsZXMsIHRoZXJlIGNhbiBiZSByZXN1bHRzXG4gICAgICBpZiAoY29udGVudCA9IGdyYXBoc1tncmFwaElkXSkge1xuICAgICAgICAvLyBDaG9vc2UgdGhlIG9wdGltYWwgaW5kZXgsIGJhc2VkIG9uIHdoYXQgZmllbGRzIGFyZSBwcmVzZW50XG4gICAgICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICAgICAgaWYgKG9iamVjdClcbiAgICAgICAgICAgIC8vIElmIHN1YmplY3QgYW5kIG9iamVjdCBhcmUgZ2l2ZW4sIHRoZSBvYmplY3QgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdFxuICAgICAgICAgICAgY291bnQgKz0gdGhpcy5fY291bnRJbkluZGV4KGNvbnRlbnQub2JqZWN0cywgb2JqZWN0SWQsIHN1YmplY3RJZCwgcHJlZGljYXRlSWQpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIC8vIElmIG9ubHkgc3ViamVjdCBhbmQgcG9zc2libHkgcHJlZGljYXRlIGFyZSBnaXZlbiwgdGhlIHN1YmplY3QgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdFxuICAgICAgICAgICAgY291bnQgKz0gdGhpcy5fY291bnRJbkluZGV4KGNvbnRlbnQuc3ViamVjdHMsIHN1YmplY3RJZCwgcHJlZGljYXRlSWQsIG9iamVjdElkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmVkaWNhdGUpIHtcbiAgICAgICAgICAvLyBJZiBvbmx5IHByZWRpY2F0ZSBhbmQgcG9zc2libHkgb2JqZWN0IGFyZSBnaXZlbiwgdGhlIHByZWRpY2F0ZSBpbmRleCB3aWxsIGJlIHRoZSBmYXN0ZXN0XG4gICAgICAgICAgY291bnQgKz0gdGhpcy5fY291bnRJbkluZGV4KGNvbnRlbnQucHJlZGljYXRlcywgcHJlZGljYXRlSWQsIG9iamVjdElkLCBzdWJqZWN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIElmIG9ubHkgb2JqZWN0IGlzIHBvc3NpYmx5IGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3RcbiAgICAgICAgICBjb3VudCArPSB0aGlzLl9jb3VudEluSW5kZXgoY29udGVudC5vYmplY3RzLCBvYmplY3RJZCwgc3ViamVjdElkLCBwcmVkaWNhdGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9LFxuXG4gIC8vICMjIyBgZm9yRWFjaGAgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCB0cmlwbGVzLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGZvckVhY2g6IGZ1bmN0aW9uIChjYWxsYmFjaywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIHByZWZpeGVzID0gdGhpcy5fcHJlZml4ZXM7XG4gICAgdGhpcy5mb3JFYWNoQnlJUkkoXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShncmFwaCwgICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBmb3JFYWNoQnlJUklgIGV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiBhbGwgdHJpcGxlcy5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBmb3JFYWNoQnlJUkk6IGZ1bmN0aW9uIChjYWxsYmFjaywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdGhpcy5zb21lQnlJUkkoZnVuY3Rpb24gKHF1YWQpIHtcbiAgICAgIGNhbGxiYWNrKHF1YWQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCk7XG4gIH0sXG5cbiAgLy8gIyMjIGBldmVyeWAgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCB0cmlwbGVzLFxuICAvLyBhbmQgcmV0dXJucyBgdHJ1ZWAgaWYgaXQgcmV0dXJucyB0cnV0aHkgZm9yIGFsbCB0aGVtLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGV2ZXJ5OiBmdW5jdGlvbiAoY2FsbGJhY2ssIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIHZhciBwcmVmaXhlcyA9IHRoaXMuX3ByZWZpeGVzO1xuICAgIHJldHVybiB0aGlzLmV2ZXJ5QnlJUkkoXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShncmFwaCwgICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBldmVyeUJ5SVJJYCBleGVjdXRlcyB0aGUgY2FsbGJhY2sgb24gYWxsIHRyaXBsZXMsXG4gIC8vIGFuZCByZXR1cm5zIGB0cnVlYCBpZiBpdCByZXR1cm5zIHRydXRoeSBmb3IgYWxsIHRoZW0uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZXZlcnlCeUlSSTogZnVuY3Rpb24gKGNhbGxiYWNrLCBzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgc29tZSA9IGZhbHNlO1xuICAgIHZhciBldmVyeSA9ICF0aGlzLnNvbWVCeUlSSShmdW5jdGlvbiAocXVhZCkge1xuICAgICAgc29tZSA9IHRydWU7XG4gICAgICByZXR1cm4gIWNhbGxiYWNrKHF1YWQpO1xuICAgIH0sIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCk7XG4gICAgcmV0dXJuIHNvbWUgJiYgZXZlcnk7XG4gIH0sXG5cbiAgLy8gIyMjIGBzb21lYCBleGVjdXRlcyB0aGUgY2FsbGJhY2sgb24gYWxsIHRyaXBsZXMsXG4gIC8vIGFuZCByZXR1cm5zIGB0cnVlYCBpZiBpdCByZXR1cm5zIHRydXRoeSBmb3IgYW55IG9mIHRoZW0uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgc29tZTogZnVuY3Rpb24gKGNhbGxiYWNrLCBzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICByZXR1cm4gdGhpcy5zb21lQnlJUkkoXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShncmFwaCwgICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBzb21lQnlJUklgIGV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiBhbGwgdHJpcGxlcyxcbiAgLy8gYW5kIHJldHVybnMgYHRydWVgIGlmIGl0IHJldHVybnMgdHJ1dGh5IGZvciBhbnkgb2YgdGhlbS5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBzb21lQnlJUkk6IGZ1bmN0aW9uIChjYWxsYmFjaywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIGdyYXBocyA9IHRoaXMuX2dldEdyYXBocyhncmFwaCksIGNvbnRlbnQsXG4gICAgICAgIGlkcyA9IHRoaXMuX2lkcywgc3ViamVjdElkLCBwcmVkaWNhdGVJZCwgb2JqZWN0SWQ7XG5cbiAgICAvLyBUcmFuc2xhdGUgSVJJcyB0byBpbnRlcm5hbCBpbmRleCBrZXlzLlxuICAgIGlmIChpc1N0cmluZyhzdWJqZWN0KSAgICYmICEoc3ViamVjdElkICAgPSBpZHNbc3ViamVjdF0pICAgfHxcbiAgICAgICAgaXNTdHJpbmcocHJlZGljYXRlKSAmJiAhKHByZWRpY2F0ZUlkID0gaWRzW3ByZWRpY2F0ZV0pIHx8XG4gICAgICAgIGlzU3RyaW5nKG9iamVjdCkgICAgJiYgIShvYmplY3RJZCAgICA9IGlkc1tvYmplY3RdKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAodmFyIGdyYXBoSWQgaW4gZ3JhcGhzKSB7XG4gICAgICAvLyBPbmx5IGlmIHRoZSBzcGVjaWZpZWQgZ3JhcGggY29udGFpbnMgdHJpcGxlcywgdGhlcmUgY2FuIGJlIHJlc3VsdFxuICAgICAgaWYgKGNvbnRlbnQgPSBncmFwaHNbZ3JhcGhJZF0pIHtcbiAgICAgICAgLy8gQ2hvb3NlIHRoZSBvcHRpbWFsIGluZGV4LCBiYXNlZCBvbiB3aGF0IGZpZWxkcyBhcmUgcHJlc2VudFxuICAgICAgICBpZiAoc3ViamVjdElkKSB7XG4gICAgICAgICAgaWYgKG9iamVjdElkKSB7XG4gICAgICAgICAgLy8gSWYgc3ViamVjdCBhbmQgb2JqZWN0IGFyZSBnaXZlbiwgdGhlIG9iamVjdCBpbmRleCB3aWxsIGJlIHRoZSBmYXN0ZXN0XG4gICAgICAgICAgICBpZiAodGhpcy5fZmluZEluSW5kZXgoY29udGVudC5vYmplY3RzLCBvYmplY3RJZCwgc3ViamVjdElkLCBwcmVkaWNhdGVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JywgJ3N1YmplY3QnLCAncHJlZGljYXRlJywgZ3JhcGhJZCwgY2FsbGJhY2ssIG51bGwpKVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgLy8gSWYgb25seSBzdWJqZWN0IGFuZCBwb3NzaWJseSBwcmVkaWNhdGUgYXJlIGdpdmVuLCB0aGUgc3ViamVjdCBpbmRleCB3aWxsIGJlIHRoZSBmYXN0ZXN0XG4gICAgICAgICAgICBpZiAodGhpcy5fZmluZEluSW5kZXgoY29udGVudC5zdWJqZWN0cywgc3ViamVjdElkLCBwcmVkaWNhdGVJZCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViamVjdCcsICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgZ3JhcGhJZCwgY2FsbGJhY2ssIG51bGwpKVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmVkaWNhdGVJZCkge1xuICAgICAgICAgIC8vIElmIG9ubHkgcHJlZGljYXRlIGFuZCBwb3NzaWJseSBvYmplY3QgYXJlIGdpdmVuLCB0aGUgcHJlZGljYXRlIGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3RcbiAgICAgICAgICBpZiAodGhpcy5fZmluZEluSW5kZXgoY29udGVudC5wcmVkaWNhdGVzLCBwcmVkaWNhdGVJZCwgb2JqZWN0SWQsIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgJ3N1YmplY3QnLCBncmFwaElkLCBjYWxsYmFjaywgbnVsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmplY3RJZCkge1xuICAgICAgICAgIC8vIElmIG9ubHkgb2JqZWN0IGlzIGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3RcbiAgICAgICAgICBpZiAodGhpcy5fZmluZEluSW5kZXgoY29udGVudC5vYmplY3RzLCBvYmplY3RJZCwgbnVsbCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29iamVjdCcsICdzdWJqZWN0JywgJ3ByZWRpY2F0ZScsIGdyYXBoSWQsIGNhbGxiYWNrLCBudWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgLy8gSWYgbm90aGluZyBpcyBnaXZlbiwgaXRlcmF0ZSBzdWJqZWN0cyBhbmQgcHJlZGljYXRlcyBmaXJzdFxuICAgICAgICBpZiAodGhpcy5fZmluZEluSW5kZXgoY29udGVudC5zdWJqZWN0cywgbnVsbCwgbnVsbCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJqZWN0JywgJ3ByZWRpY2F0ZScsICdvYmplY3QnLCBncmFwaElkLCBjYWxsYmFjaywgbnVsbCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLy8gIyMjIGBnZXRTdWJqZWN0c2AgcmV0dXJucyBhbGwgc3ViamVjdHMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBnZXRTdWJqZWN0czogZnVuY3Rpb24gKHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIHZhciBwcmVmaXhlcyA9IHRoaXMuX3ByZWZpeGVzO1xuICAgIHJldHVybiB0aGlzLmdldFN1YmplY3RzQnlJUkkoXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUocHJlZGljYXRlLCBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUob2JqZWN0LCAgICBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUoZ3JhcGgsICAgICBwcmVmaXhlcylcbiAgICApO1xuICB9LFxuXG4gIC8vICMjIyBgZ2V0U3ViamVjdHNCeUlSSWAgcmV0dXJucyBhbGwgc3ViamVjdHMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBnZXRTdWJqZWN0c0J5SVJJOiBmdW5jdGlvbiAocHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB0aGlzLmZvclN1YmplY3RzQnlJUkkoZnVuY3Rpb24gKHMpIHsgcmVzdWx0cy5wdXNoKHMpOyB9LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9LFxuXG4gIC8vICMjIyBgZm9yU3ViamVjdHNgIGV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiBhbGwgc3ViamVjdHMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBmb3JTdWJqZWN0czogZnVuY3Rpb24gKGNhbGxiYWNrLCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICB0aGlzLmZvclN1YmplY3RzQnlJUkkoXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShncmFwaCwgICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBmb3JTdWJqZWN0c0J5SVJJYCBleGVjdXRlcyB0aGUgY2FsbGJhY2sgb24gYWxsIHN1YmplY3RzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZm9yU3ViamVjdHNCeUlSSTogZnVuY3Rpb24gKGNhbGxiYWNrLCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgaWRzID0gdGhpcy5faWRzLCBncmFwaHMgPSB0aGlzLl9nZXRHcmFwaHMoZ3JhcGgpLCBjb250ZW50LCBwcmVkaWNhdGVJZCwgb2JqZWN0SWQ7XG4gICAgY2FsbGJhY2sgPSB0aGlzLl91bmlxdWVFbnRpdGllcyhjYWxsYmFjayk7XG5cbiAgICAvLyBUcmFuc2xhdGUgSVJJcyB0byBpbnRlcm5hbCBpbmRleCBrZXlzLlxuICAgIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpICYmICEocHJlZGljYXRlSWQgPSBpZHNbcHJlZGljYXRlXSkgfHxcbiAgICAgICAgaXNTdHJpbmcob2JqZWN0KSAgICAmJiAhKG9iamVjdElkICAgID0gaWRzW29iamVjdF0pKVxuICAgICAgcmV0dXJuO1xuXG4gICAgZm9yIChncmFwaCBpbiBncmFwaHMpIHtcbiAgICAgIC8vIE9ubHkgaWYgdGhlIHNwZWNpZmllZCBncmFwaCBjb250YWlucyB0cmlwbGVzLCB0aGVyZSBjYW4gYmUgcmVzdWx0c1xuICAgICAgaWYgKGNvbnRlbnQgPSBncmFwaHNbZ3JhcGhdKSB7XG4gICAgICAgIC8vIENob29zZSBvcHRpbWFsIGluZGV4IGJhc2VkIG9uIHdoaWNoIGZpZWxkcyBhcmUgd2lsZGNhcmRzXG4gICAgICAgIGlmIChwcmVkaWNhdGVJZCkge1xuICAgICAgICAgIGlmIChvYmplY3RJZClcbiAgICAgICAgICAgIC8vIElmIHByZWRpY2F0ZSBhbmQgb2JqZWN0IGFyZSBnaXZlbiwgdGhlIFBPUyBpbmRleCBpcyBiZXN0LlxuICAgICAgICAgICAgdGhpcy5fbG9vcEJ5MktleXMoY29udGVudC5wcmVkaWNhdGVzLCBwcmVkaWNhdGVJZCwgb2JqZWN0SWQsIGNhbGxiYWNrKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAvLyBJZiBvbmx5IHByZWRpY2F0ZSBpcyBnaXZlbiwgdGhlIFNQTyBpbmRleCBpcyBiZXN0LlxuICAgICAgICAgICAgdGhpcy5fbG9vcEJ5S2V5MShjb250ZW50LnN1YmplY3RzLCBwcmVkaWNhdGVJZCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iamVjdElkKVxuICAgICAgICAgIC8vIElmIG9ubHkgb2JqZWN0IGlzIGdpdmVuLCB0aGUgT1NQIGluZGV4IGlzIGJlc3QuXG4gICAgICAgICAgdGhpcy5fbG9vcEJ5S2V5MChjb250ZW50Lm9iamVjdHMsIG9iamVjdElkLCBjYWxsYmFjayk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAvLyBJZiBubyBwYXJhbXMgZ2l2ZW4sIGl0ZXJhdGUgYWxsIHRoZSBzdWJqZWN0c1xuICAgICAgICAgIHRoaXMuX2xvb3AoY29udGVudC5zdWJqZWN0cywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYGdldFByZWRpY2F0ZXNgIHJldHVybnMgYWxsIHByZWRpY2F0ZXMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBnZXRQcmVkaWNhdGVzOiBmdW5jdGlvbiAoc3ViamVjdCwgb2JqZWN0LCBncmFwaCkge1xuICAgIHZhciBwcmVmaXhlcyA9IHRoaXMuX3ByZWZpeGVzO1xuICAgIHJldHVybiB0aGlzLmdldFByZWRpY2F0ZXNCeUlSSShcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUob2JqZWN0LCAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBnZXRQcmVkaWNhdGVzQnlJUklgIHJldHVybnMgYWxsIHByZWRpY2F0ZXMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBnZXRQcmVkaWNhdGVzQnlJUkk6IGZ1bmN0aW9uIChzdWJqZWN0LCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB0aGlzLmZvclByZWRpY2F0ZXNCeUlSSShmdW5jdGlvbiAocCkgeyByZXN1bHRzLnB1c2gocCk7IH0sIHN1YmplY3QsIG9iamVjdCwgZ3JhcGgpO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9LFxuXG4gIC8vICMjIyBgZm9yUHJlZGljYXRlc2AgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCBwcmVkaWNhdGVzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZm9yUHJlZGljYXRlczogZnVuY3Rpb24gKGNhbGxiYWNrLCBzdWJqZWN0LCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIHByZWZpeGVzID0gdGhpcy5fcHJlZml4ZXM7XG4gICAgdGhpcy5mb3JQcmVkaWNhdGVzQnlJUkkoXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUob2JqZWN0LCAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBmb3JQcmVkaWNhdGVzQnlJUklgIGV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiBhbGwgcHJlZGljYXRlcyB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGZvclByZWRpY2F0ZXNCeUlSSTogZnVuY3Rpb24gKGNhbGxiYWNrLCBzdWJqZWN0LCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIGlkcyA9IHRoaXMuX2lkcywgZ3JhcGhzID0gdGhpcy5fZ2V0R3JhcGhzKGdyYXBoKSwgY29udGVudCwgc3ViamVjdElkLCBvYmplY3RJZDtcbiAgICBjYWxsYmFjayA9IHRoaXMuX3VuaXF1ZUVudGl0aWVzKGNhbGxiYWNrKTtcblxuICAgIC8vIFRyYW5zbGF0ZSBJUklzIHRvIGludGVybmFsIGluZGV4IGtleXMuXG4gICAgaWYgKGlzU3RyaW5nKHN1YmplY3QpICYmICEoc3ViamVjdElkID0gaWRzW3N1YmplY3RdKSB8fFxuICAgICAgICBpc1N0cmluZyhvYmplY3QpICAmJiAhKG9iamVjdElkICA9IGlkc1tvYmplY3RdKSlcbiAgICAgIHJldHVybjtcblxuICAgIGZvciAoZ3JhcGggaW4gZ3JhcGhzKSB7XG4gICAgICAvLyBPbmx5IGlmIHRoZSBzcGVjaWZpZWQgZ3JhcGggY29udGFpbnMgdHJpcGxlcywgdGhlcmUgY2FuIGJlIHJlc3VsdHNcbiAgICAgIGlmIChjb250ZW50ID0gZ3JhcGhzW2dyYXBoXSkge1xuICAgICAgICAvLyBDaG9vc2Ugb3B0aW1hbCBpbmRleCBiYXNlZCBvbiB3aGljaCBmaWVsZHMgYXJlIHdpbGRjYXJkc1xuICAgICAgICBpZiAoc3ViamVjdElkKSB7XG4gICAgICAgICAgaWYgKG9iamVjdElkKVxuICAgICAgICAgICAgLy8gSWYgc3ViamVjdCBhbmQgb2JqZWN0IGFyZSBnaXZlbiwgdGhlIE9TUCBpbmRleCBpcyBiZXN0LlxuICAgICAgICAgICAgdGhpcy5fbG9vcEJ5MktleXMoY29udGVudC5vYmplY3RzLCBvYmplY3RJZCwgc3ViamVjdElkLCBjYWxsYmFjayk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgLy8gSWYgb25seSBzdWJqZWN0IGlzIGdpdmVuLCB0aGUgU1BPIGluZGV4IGlzIGJlc3QuXG4gICAgICAgICAgICB0aGlzLl9sb29wQnlLZXkwKGNvbnRlbnQuc3ViamVjdHMsIHN1YmplY3RJZCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iamVjdElkKVxuICAgICAgICAgIC8vIElmIG9ubHkgb2JqZWN0IGlzIGdpdmVuLCB0aGUgUE9TIGluZGV4IGlzIGJlc3QuXG4gICAgICAgICAgdGhpcy5fbG9vcEJ5S2V5MShjb250ZW50LnByZWRpY2F0ZXMsIG9iamVjdElkLCBjYWxsYmFjayk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAvLyBJZiBubyBwYXJhbXMgZ2l2ZW4sIGl0ZXJhdGUgYWxsIHRoZSBwcmVkaWNhdGVzLlxuICAgICAgICAgIHRoaXMuX2xvb3AoY29udGVudC5wcmVkaWNhdGVzLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgZ2V0T2JqZWN0c2AgcmV0dXJucyBhbGwgb2JqZWN0cyB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGdldE9iamVjdHM6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIGdyYXBoKSB7XG4gICAgdmFyIHByZWZpeGVzID0gdGhpcy5fcHJlZml4ZXM7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0c0J5SVJJKFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHN1YmplY3QsICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHByZWRpY2F0ZSwgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgICAgcHJlZml4ZXMpXG4gICAgKTtcbiAgfSxcblxuICAvLyAjIyMgYGdldE9iamVjdHNCeUlSSWAgcmV0dXJucyBhbGwgb2JqZWN0cyB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuLlxuICAvLyBTZXR0aW5nIGFueSBmaWVsZCB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW5kaWNhdGVzIGEgd2lsZGNhcmQuXG4gIGdldE9iamVjdHNCeUlSSTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgZ3JhcGgpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHRoaXMuZm9yT2JqZWN0c0J5SVJJKGZ1bmN0aW9uIChvKSB7IHJlc3VsdHMucHVzaChvKTsgfSwgc3ViamVjdCwgcHJlZGljYXRlLCBncmFwaCk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0sXG5cbiAgLy8gIyMjIGBmb3JPYmplY3RzYCBleGVjdXRlcyB0aGUgY2FsbGJhY2sgb24gYWxsIG9iamVjdHMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBmb3JPYmplY3RzOiBmdW5jdGlvbiAoY2FsbGJhY2ssIHN1YmplY3QsIHByZWRpY2F0ZSwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICB0aGlzLmZvck9iamVjdHNCeUlSSShcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHN1YmplY3QsICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHByZWRpY2F0ZSwgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgICAgcHJlZml4ZXMpXG4gICAgKTtcbiAgfSxcblxuICAvLyAjIyMgYGZvck9iamVjdHNCeUlSSWAgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCBvYmplY3RzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZm9yT2JqZWN0c0J5SVJJOiBmdW5jdGlvbiAoY2FsbGJhY2ssIHN1YmplY3QsIHByZWRpY2F0ZSwgZ3JhcGgpIHtcbiAgICB2YXIgaWRzID0gdGhpcy5faWRzLCBncmFwaHMgPSB0aGlzLl9nZXRHcmFwaHMoZ3JhcGgpLCBjb250ZW50LCBzdWJqZWN0SWQsIHByZWRpY2F0ZUlkO1xuICAgIGNhbGxiYWNrID0gdGhpcy5fdW5pcXVlRW50aXRpZXMoY2FsbGJhY2spO1xuXG4gICAgLy8gVHJhbnNsYXRlIElSSXMgdG8gaW50ZXJuYWwgaW5kZXgga2V5cy5cbiAgICBpZiAoaXNTdHJpbmcoc3ViamVjdCkgICAmJiAhKHN1YmplY3RJZCAgID0gaWRzW3N1YmplY3RdKSB8fFxuICAgICAgICBpc1N0cmluZyhwcmVkaWNhdGUpICYmICEocHJlZGljYXRlSWQgPSBpZHNbcHJlZGljYXRlXSkpXG4gICAgICByZXR1cm47XG5cbiAgICBmb3IgKGdyYXBoIGluIGdyYXBocykge1xuICAgICAgLy8gT25seSBpZiB0aGUgc3BlY2lmaWVkIGdyYXBoIGNvbnRhaW5zIHRyaXBsZXMsIHRoZXJlIGNhbiBiZSByZXN1bHRzXG4gICAgICBpZiAoY29udGVudCA9IGdyYXBoc1tncmFwaF0pIHtcbiAgICAgICAgLy8gQ2hvb3NlIG9wdGltYWwgaW5kZXggYmFzZWQgb24gd2hpY2ggZmllbGRzIGFyZSB3aWxkY2FyZHNcbiAgICAgICAgaWYgKHN1YmplY3RJZCkge1xuICAgICAgICAgIGlmIChwcmVkaWNhdGVJZClcbiAgICAgICAgICAgIC8vIElmIHN1YmplY3QgYW5kIHByZWRpY2F0ZSBhcmUgZ2l2ZW4sIHRoZSBTUE8gaW5kZXggaXMgYmVzdC5cbiAgICAgICAgICAgIHRoaXMuX2xvb3BCeTJLZXlzKGNvbnRlbnQuc3ViamVjdHMsIHN1YmplY3RJZCwgcHJlZGljYXRlSWQsIGNhbGxiYWNrKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAvLyBJZiBvbmx5IHN1YmplY3QgaXMgZ2l2ZW4sIHRoZSBPU1AgaW5kZXggaXMgYmVzdC5cbiAgICAgICAgICAgIHRoaXMuX2xvb3BCeUtleTEoY29udGVudC5vYmplY3RzLCBzdWJqZWN0SWQsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmVkaWNhdGVJZClcbiAgICAgICAgICAvLyBJZiBvbmx5IHByZWRpY2F0ZSBpcyBnaXZlbiwgdGhlIFBPUyBpbmRleCBpcyBiZXN0LlxuICAgICAgICAgIHRoaXMuX2xvb3BCeUtleTAoY29udGVudC5wcmVkaWNhdGVzLCBwcmVkaWNhdGVJZCwgY2FsbGJhY2spO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgLy8gSWYgbm8gcGFyYW1zIGdpdmVuLCBpdGVyYXRlIGFsbCB0aGUgb2JqZWN0cy5cbiAgICAgICAgICB0aGlzLl9sb29wKGNvbnRlbnQub2JqZWN0cywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYGdldEdyYXBoc2AgcmV0dXJucyBhbGwgZ3JhcGhzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZ2V0R3JhcGhzOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICByZXR1cm4gdGhpcy5nZXRHcmFwaHNCeUlSSShcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShzdWJqZWN0LCAgIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShwcmVkaWNhdGUsIHByZWZpeGVzKSxcbiAgICAgIGV4cGFuZFByZWZpeGVkTmFtZShvYmplY3QsICAgIHByZWZpeGVzKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIGBnZXRHcmFwaHNCeUlSSWAgcmV0dXJucyBhbGwgZ3JhcGhzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZ2V0R3JhcGhzQnlJUkk6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdGhpcy5mb3JHcmFwaHNCeUlSSShmdW5jdGlvbiAoZykgeyByZXN1bHRzLnB1c2goZyk7IH0sIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSxcblxuICAvLyAjIyMgYGZvckdyYXBoc2AgZXhlY3V0ZXMgdGhlIGNhbGxiYWNrIG9uIGFsbCBncmFwaHMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBhbnkgZmllbGQgdG8gYHVuZGVmaW5lZGAgb3IgYG51bGxgIGluZGljYXRlcyBhIHdpbGRjYXJkLlxuICBmb3JHcmFwaHM6IGZ1bmN0aW9uIChjYWxsYmFjaywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICB0aGlzLmZvckdyYXBoc0J5SVJJKFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUoc3ViamVjdCwgICBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUocHJlZGljYXRlLCBwcmVmaXhlcyksXG4gICAgICBleHBhbmRQcmVmaXhlZE5hbWUob2JqZWN0LCAgICBwcmVmaXhlcylcbiAgICApO1xuICB9LFxuXG4gIC8vICMjIyBgZm9yR3JhcGhzQnlJUklgIGV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiBhbGwgZ3JhcGhzIHRoYXQgbWF0Y2ggdGhlIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYW55IGZpZWxkIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbmRpY2F0ZXMgYSB3aWxkY2FyZC5cbiAgZm9yR3JhcGhzQnlJUkk6IGZ1bmN0aW9uIChjYWxsYmFjaywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICBmb3IgKHZhciBncmFwaCBpbiB0aGlzLl9ncmFwaHMpIHtcbiAgICAgIHRoaXMuc29tZUJ5SVJJKGZ1bmN0aW9uIChxdWFkKSB7XG4gICAgICAgIGNhbGxiYWNrKHF1YWQuZ3JhcGgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gSGFsdCBpdGVyYXRpb24gb2Ygc29tZSgpXG4gICAgICB9LCBzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYGNyZWF0ZUJsYW5rTm9kZWAgY3JlYXRlcyBhIG5ldyBibGFuayBub2RlLCByZXR1cm5pbmcgaXRzIG5hbWVcbiAgY3JlYXRlQmxhbmtOb2RlOiBmdW5jdGlvbiAoc3VnZ2VzdGVkTmFtZSkge1xuICAgIHZhciBuYW1lLCBpbmRleDtcbiAgICAvLyBHZW5lcmF0ZSBhIG5hbWUgYmFzZWQgb24gdGhlIHN1Z2dlc3RlZCBuYW1lXG4gICAgaWYgKHN1Z2dlc3RlZE5hbWUpIHtcbiAgICAgIG5hbWUgPSBzdWdnZXN0ZWROYW1lID0gJ186JyArIHN1Z2dlc3RlZE5hbWUsIGluZGV4ID0gMTtcbiAgICAgIHdoaWxlICh0aGlzLl9pZHNbbmFtZV0pXG4gICAgICAgIG5hbWUgPSBzdWdnZXN0ZWROYW1lICsgaW5kZXgrKztcbiAgICB9XG4gICAgLy8gR2VuZXJhdGUgYSBnZW5lcmljIGJsYW5rIG5vZGUgbmFtZVxuICAgIGVsc2Uge1xuICAgICAgZG8geyBuYW1lID0gJ186YicgKyB0aGlzLl9ibGFua05vZGVJbmRleCsrOyB9XG4gICAgICB3aGlsZSAodGhpcy5faWRzW25hbWVdKTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBibGFuayBub2RlIHRvIHRoZSBlbnRpdGllcywgYXZvaWRpbmcgdGhlIGdlbmVyYXRpb24gb2YgZHVwbGljYXRlc1xuICAgIHRoaXMuX2lkc1tuYW1lXSA9ICsrdGhpcy5faWQ7XG4gICAgdGhpcy5fZW50aXRpZXNbdGhpcy5faWRdID0gbmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSxcbn07XG5cbi8vIERldGVybWluZXMgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSBzdHJpbmdcbmZ1bmN0aW9uIGlzU3RyaW5nKHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyB8fCBzIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG4vLyAjIyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IE4zU3RvcmU7XG4iLCIvLyAqKk4zU3RyZWFtUGFyc2VyKiogcGFyc2VzIGFuIE4zIHN0cmVhbSBpbnRvIGEgdHJpcGxlIHN0cmVhbS5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm0sXG4gICAgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBOM1BhcnNlciA9IHJlcXVpcmUoJy4vTjNQYXJzZXIuanMnKTtcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zU3RyZWFtUGFyc2VyKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE4zU3RyZWFtUGFyc2VyKSlcbiAgICByZXR1cm4gbmV3IE4zU3RyZWFtUGFyc2VyKG9wdGlvbnMpO1xuXG4gIC8vIEluaXRpYWxpemUgVHJhbnNmb3JtIGJhc2UgY2xhc3NcbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgeyBkZWNvZGVTdHJpbmdzOiB0cnVlIH0pO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPSB0cnVlO1xuXG4gIC8vIFNldCB1cCBwYXJzZXJcbiAgdmFyIHNlbGYgPSB0aGlzLCBwYXJzZXIgPSBuZXcgTjNQYXJzZXIob3B0aW9ucyksIG9uRGF0YSwgb25FbmQ7XG4gIHBhcnNlci5wYXJzZShcbiAgICAvLyBQYXNzIGR1bW15IHN0cmVhbSB0byBvYnRhaW4gYGRhdGFgIGFuZCBgZW5kYCBjYWxsYmFja3NcbiAgICB7IG9uOiBmdW5jdGlvbiAoZXZlbnQsIGNiKSB7IGV2ZW50ID09PSAnZGF0YScgPyAob25EYXRhID0gY2IpIDogKG9uRW5kID0gY2IpOyB9IH0sXG4gICAgLy8gSGFuZGxlIHRyaXBsZXMgYnkgcHVzaGluZyB0aGVtIGRvd24gdGhlIHBpcGVsaW5lXG4gICAgZnVuY3Rpb24gKGVycm9yLCB0KSB7IGVycm9yICYmIHNlbGYuZW1pdCgnZXJyb3InLCBlcnJvcikgfHwgdCAmJiBzZWxmLnB1c2godCk7IH0sXG4gICAgLy8gRW1pdCBwcmVmaXhlcyB0aHJvdWdoIHRoZSBgcHJlZml4YCBldmVudFxuICAgIGZ1bmN0aW9uIChwcmVmaXgsIHVyaSkgeyBzZWxmLmVtaXQoJ3ByZWZpeCcsIHByZWZpeCwgdXJpKTsgfSk7XG5cbiAgLy8gSW1wbGVtZW50IFRyYW5zZm9ybSBtZXRob2RzIHRocm91Z2ggcGFyc2VyIGNhbGxiYWNrc1xuICB0aGlzLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBkb25lKSB7IG9uRGF0YShjaHVuayk7IGRvbmUoKTsgfTtcbiAgdGhpcy5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkgeyBvbkVuZCgpOyBkb25lKCk7IH07XG59XG51dGlsLmluaGVyaXRzKE4zU3RyZWFtUGFyc2VyLCBUcmFuc2Zvcm0pO1xuXG4vLyAjIyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IE4zU3RyZWFtUGFyc2VyO1xuIiwiLy8gKipOM1N0cmVhbVdyaXRlcioqIHNlcmlhbGl6ZXMgYSB0cmlwbGUgc3RyZWFtIGludG8gYW4gTjMgc3RyZWFtLlxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybSxcbiAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIE4zV3JpdGVyID0gcmVxdWlyZSgnLi9OM1dyaXRlci5qcycpO1xuXG4vLyAjIyBDb25zdHJ1Y3RvclxuZnVuY3Rpb24gTjNTdHJlYW1Xcml0ZXIob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNTdHJlYW1Xcml0ZXIpKVxuICAgIHJldHVybiBuZXcgTjNTdHJlYW1Xcml0ZXIob3B0aW9ucyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBUcmFuc2Zvcm0gYmFzZSBjbGFzc1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUub2JqZWN0TW9kZSA9IHRydWU7XG5cbiAgLy8gU2V0IHVwIHdyaXRlciB3aXRoIGEgZHVtbXkgc3RyZWFtIG9iamVjdFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB3cml0ZXIgPSBuZXcgTjNXcml0ZXIoe1xuICAgIHdyaXRlOiBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykgeyBzZWxmLnB1c2goY2h1bmspOyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9LFxuICAgIGVuZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHNlbGYucHVzaChudWxsKTsgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsgfSxcbiAgfSwgb3B0aW9ucyk7XG5cbiAgLy8gSW1wbGVtZW50IFRyYW5zZm9ybSBtZXRob2RzIG9uIHRvcCBvZiB3cml0ZXJcbiAgdGhpcy5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKHRyaXBsZSwgZW5jb2RpbmcsIGRvbmUpIHsgd3JpdGVyLmFkZFRyaXBsZSh0cmlwbGUsIGRvbmUpOyB9O1xuICB0aGlzLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7IHdyaXRlci5lbmQoZG9uZSk7IH07XG59XG51dGlsLmluaGVyaXRzKE4zU3RyZWFtV3JpdGVyLCBUcmFuc2Zvcm0pO1xuXG4vLyAjIyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IE4zU3RyZWFtV3JpdGVyO1xuIiwiLy8gKipOM1V0aWwqKiBwcm92aWRlcyBOMyB1dGlsaXR5IGZ1bmN0aW9ucy5cblxudmFyIFhzZCA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSMnO1xudmFyIFhzZFN0cmluZyAgPSBYc2QgKyAnc3RyaW5nJztcbnZhciBYc2RJbnRlZ2VyID0gWHNkICsgJ2ludGVnZXInO1xudmFyIFhzZERvdWJsZSA9IFhzZCArICdkb3VibGUnO1xudmFyIFhzZEJvb2xlYW4gPSBYc2QgKyAnYm9vbGVhbic7XG52YXIgUmRmTGFuZ1N0cmluZyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZyc7XG5cbnZhciBOM1V0aWwgPSB7XG4gIC8vIFRlc3RzIHdoZXRoZXIgdGhlIGdpdmVuIGVudGl0eSAodHJpcGxlIG9iamVjdCkgcmVwcmVzZW50cyBhbiBJUkkgaW4gdGhlIE4zIGxpYnJhcnlcbiAgaXNJUkk6IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICBpZiAodHlwZW9mIGVudGl0eSAhPT0gJ3N0cmluZycpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSBpZiAoZW50aXR5Lmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGZpcnN0Q2hhciA9IGVudGl0eVswXTtcbiAgICAgIHJldHVybiBmaXJzdENoYXIgIT09ICdcIicgJiYgZmlyc3RDaGFyICE9PSAnXyc7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRlc3RzIHdoZXRoZXIgdGhlIGdpdmVuIGVudGl0eSAodHJpcGxlIG9iamVjdCkgcmVwcmVzZW50cyBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgaXNMaXRlcmFsOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRpdHkgPT09ICdzdHJpbmcnICYmIGVudGl0eVswXSA9PT0gJ1wiJztcbiAgfSxcblxuICAvLyBUZXN0cyB3aGV0aGVyIHRoZSBnaXZlbiBlbnRpdHkgKHRyaXBsZSBvYmplY3QpIHJlcHJlc2VudHMgYSBibGFuayBub2RlIGluIHRoZSBOMyBsaWJyYXJ5XG4gIGlzQmxhbms6IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudGl0eSA9PT0gJ3N0cmluZycgJiYgZW50aXR5LnN1YnN0cigwLCAyKSA9PT0gJ186JztcbiAgfSxcblxuICAvLyBUZXN0cyB3aGV0aGVyIHRoZSBnaXZlbiBlbnRpdHkgcmVwcmVzZW50cyB0aGUgZGVmYXVsdCBncmFwaFxuICBpc0RlZmF1bHRHcmFwaDogZnVuY3Rpb24gKGVudGl0eSkge1xuICAgIHJldHVybiAhZW50aXR5O1xuICB9LFxuXG4gIC8vIFRlc3RzIHdoZXRoZXIgdGhlIGdpdmVuIHRyaXBsZSBpcyBpbiB0aGUgZGVmYXVsdCBncmFwaFxuICBpbkRlZmF1bHRHcmFwaDogZnVuY3Rpb24gKHRyaXBsZSkge1xuICAgIHJldHVybiAhdHJpcGxlLmdyYXBoO1xuICB9LFxuXG4gIC8vIEdldHMgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgZ2V0TGl0ZXJhbFZhbHVlOiBmdW5jdGlvbiAobGl0ZXJhbCkge1xuICAgIHZhciBtYXRjaCA9IC9eXCIoW15dKilcIi8uZXhlYyhsaXRlcmFsKTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGxpdGVyYWwgKyAnIGlzIG5vdCBhIGxpdGVyYWwnKTtcbiAgICByZXR1cm4gbWF0Y2hbMV07XG4gIH0sXG5cbiAgLy8gR2V0cyB0aGUgdHlwZSBvZiBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgZ2V0TGl0ZXJhbFR5cGU6IGZ1bmN0aW9uIChsaXRlcmFsKSB7XG4gICAgdmFyIG1hdGNoID0gL15cIlteXSpcIig/OlxcXlxcXihbXlwiXSspfChAKVteQFwiXSspPyQvLmV4ZWMobGl0ZXJhbCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHRocm93IG5ldyBFcnJvcihsaXRlcmFsICsgJyBpcyBub3QgYSBsaXRlcmFsJyk7XG4gICAgcmV0dXJuIG1hdGNoWzFdIHx8IChtYXRjaFsyXSA/IFJkZkxhbmdTdHJpbmcgOiBYc2RTdHJpbmcpO1xuICB9LFxuXG4gIC8vIEdldHMgdGhlIGxhbmd1YWdlIG9mIGEgbGl0ZXJhbCBpbiB0aGUgTjMgbGlicmFyeVxuICBnZXRMaXRlcmFsTGFuZ3VhZ2U6IGZ1bmN0aW9uIChsaXRlcmFsKSB7XG4gICAgdmFyIG1hdGNoID0gL15cIlteXSpcIig/OkAoW15AXCJdKyl8XFxeXFxeW15cIl0rKT8kLy5leGVjKGxpdGVyYWwpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobGl0ZXJhbCArICcgaXMgbm90IGEgbGl0ZXJhbCcpO1xuICAgIHJldHVybiBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgfSxcblxuICAvLyBUZXN0cyB3aGV0aGVyIHRoZSBnaXZlbiBlbnRpdHkgKHRyaXBsZSBvYmplY3QpIHJlcHJlc2VudHMgYSBwcmVmaXhlZCBuYW1lXG4gIGlzUHJlZml4ZWROYW1lOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRpdHkgPT09ICdzdHJpbmcnICYmIC9eW146XFwvXCInXSo6W146XFwvXCInXSskLy50ZXN0KGVudGl0eSk7XG4gIH0sXG5cbiAgLy8gRXhwYW5kcyB0aGUgcHJlZml4ZWQgbmFtZSB0byBhIGZ1bGwgSVJJIChhbHNvIHdoZW4gaXQgb2NjdXJzIGFzIGEgbGl0ZXJhbCdzIHR5cGUpXG4gIGV4cGFuZFByZWZpeGVkTmFtZTogZnVuY3Rpb24gKHByZWZpeGVkTmFtZSwgcHJlZml4ZXMpIHtcbiAgICB2YXIgbWF0Y2ggPSAvKD86XnxcIlxcXlxcXikoW146XFwvI1wiJ1xcXl9dKik6W15cXC9dKiQvLmV4ZWMocHJlZml4ZWROYW1lKSwgcHJlZml4LCBiYXNlLCBpbmRleDtcbiAgICBpZiAobWF0Y2gpXG4gICAgICBwcmVmaXggPSBtYXRjaFsxXSwgYmFzZSA9IHByZWZpeGVzW3ByZWZpeF0sIGluZGV4ID0gbWF0Y2guaW5kZXg7XG4gICAgaWYgKGJhc2UgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiBwcmVmaXhlZE5hbWU7XG5cbiAgICAvLyBUaGUgbWF0Y2ggaW5kZXggaXMgbm9uLXplcm8gd2hlbiBleHBhbmRpbmcgYSBsaXRlcmFsJ3MgdHlwZVxuICAgIHJldHVybiBpbmRleCA9PT0gMCA/IGJhc2UgKyBwcmVmaXhlZE5hbWUuc3Vic3RyKHByZWZpeC5sZW5ndGggKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICA6IHByZWZpeGVkTmFtZS5zdWJzdHIoMCwgaW5kZXggKyAzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgYmFzZSArIHByZWZpeGVkTmFtZS5zdWJzdHIoaW5kZXggKyBwcmVmaXgubGVuZ3RoICsgNCk7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlcyBhbiBJUkkgaW4gTjMuanMgcmVwcmVzZW50YXRpb25cbiAgY3JlYXRlSVJJOiBmdW5jdGlvbiAoaXJpKSB7XG4gICAgcmV0dXJuIGlyaSAmJiBpcmlbMF0gPT09ICdcIicgPyBOM1V0aWwuZ2V0TGl0ZXJhbFZhbHVlKGlyaSkgOiBpcmk7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlcyBhIGxpdGVyYWwgaW4gTjMuanMgcmVwcmVzZW50YXRpb25cbiAgY3JlYXRlTGl0ZXJhbDogZnVuY3Rpb24gKHZhbHVlLCBtb2RpZmllcikge1xuICAgIGlmICghbW9kaWZpZXIpIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgbW9kaWZpZXIgPSBYc2RCb29sZWFuO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGlmIChpc0Zpbml0ZSh2YWx1ZSkpXG4gICAgICAgICAgbW9kaWZpZXIgPSB2YWx1ZSAlIDEgPT09IDAgPyBYc2RJbnRlZ2VyIDogWHNkRG91YmxlO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBtb2RpZmllciA9IFhzZERvdWJsZTtcbiAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSlcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPiAwID8gJ0lORicgOiAnLUlORic7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdcIicgKyB2YWx1ZSArXG4gICAgICAgICAgICgvXlthLXpdKygtW2EtejAtOV0rKSokL2kudGVzdChtb2RpZmllcikgPyAnXCJAJyAgKyBtb2RpZmllci50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnXCJeXicgKyBtb2RpZmllcik7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJlcGVuZHMgdGhlIGdpdmVuIElSSSB0byBhIGxvY2FsIG5hbWVcbiAgcHJlZml4OiBmdW5jdGlvbiAoaXJpKSB7XG4gICAgcmV0dXJuIE4zVXRpbC5wcmVmaXhlcyh7ICcnOiBpcmkgfSkoJycpO1xuICB9LFxuXG4gIC8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFsbG93cyByZWdpc3RlcmluZyBhbmQgZXhwYW5kaW5nIHByZWZpeGVzXG4gIHByZWZpeGVzOiBmdW5jdGlvbiAoZGVmYXVsdFByZWZpeGVzKSB7XG4gICAgLy8gQWRkIGFsbCBvZiB0aGUgZGVmYXVsdCBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yICh2YXIgcHJlZml4IGluIGRlZmF1bHRQcmVmaXhlcylcbiAgICAgIHByb2Nlc3NQcmVmaXgocHJlZml4LCBkZWZhdWx0UHJlZml4ZXNbcHJlZml4XSk7XG5cbiAgICAvLyBSZWdpc3RlcnMgYSBuZXcgcHJlZml4IChpZiBhbiBJUkkgd2FzIHNwZWNpZmllZClcbiAgICAvLyBvciByZXRyaWV2ZXMgYSBmdW5jdGlvbiB0aGF0IGV4cGFuZHMgYW4gZXhpc3RpbmcgcHJlZml4IChpZiBubyBJUkkgd2FzIHNwZWNpZmllZClcbiAgICBmdW5jdGlvbiBwcm9jZXNzUHJlZml4KHByZWZpeCwgaXJpKSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgcHJlZml4IGlmIGFuIElSSSBpcyBzcGVjaWZpZWQgb3IgdGhlIHByZWZpeCBkb2Vzbid0IGV4aXN0XG4gICAgICBpZiAoaXJpIHx8ICEocHJlZml4IGluIHByZWZpeGVzKSkge1xuICAgICAgICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpcmkgPSBpcmkgfHwgJyc7XG4gICAgICAgIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgZXhwYW5kcyB0aGUgcHJlZml4XG4gICAgICAgIHByZWZpeGVzW3ByZWZpeF0gPSBmdW5jdGlvbiAobG9jYWxOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW2xvY2FsTmFtZV0gfHwgKGNhY2hlW2xvY2FsTmFtZV0gPSBpcmkgKyBsb2NhbE5hbWUpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZWZpeGVzW3ByZWZpeF07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzUHJlZml4O1xuICB9LFxufTtcblxuLy8gIyMgRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBOM1V0aWw7XG4iLCIvLyAqKk4zV3JpdGVyKiogd3JpdGVzIE4zIGRvY3VtZW50cy5cblxuLy8gTWF0Y2hlcyBhIGxpdGVyYWwgYXMgcmVwcmVzZW50ZWQgaW4gbWVtb3J5IGJ5IHRoZSBOMyBsaWJyYXJ5XG52YXIgTjNMaXRlcmFsTWF0Y2hlciA9IC9eXCIoW15dKilcIig/OlxcXlxcXiguKyl8QChbXFwtYS16XSspKT8kL2k7XG5cbi8vIHJkZjp0eXBlIHByZWRpY2F0ZSAoZm9yICdhJyBhYmJyZXZpYXRpb24pXG52YXIgUkRGX1BSRUZJWCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJyxcbiAgICBSREZfVFlQRSAgID0gUkRGX1BSRUZJWCArICd0eXBlJztcblxuLy8gQ2hhcmFjdGVycyBpbiBsaXRlcmFscyB0aGF0IHJlcXVpcmUgZXNjYXBpbmdcbnZhciBlc2NhcGUgICAgPSAvW1wiXFxcXFxcdFxcblxcclxcYlxcZlxcdTAwMDAtXFx1MDAxOVxcdWQ4MDAtXFx1ZGJmZl0vLFxuICAgIGVzY2FwZUFsbCA9IC9bXCJcXFxcXFx0XFxuXFxyXFxiXFxmXFx1MDAwMC1cXHUwMDE5XXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdL2csXG4gICAgZXNjYXBlUmVwbGFjZW1lbnRzID0ge1xuICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnLCAnXCInOiAnXFxcXFwiJywgJ1xcdCc6ICdcXFxcdCcsXG4gICAgICAnXFxuJzogJ1xcXFxuJywgJ1xccic6ICdcXFxccicsICdcXGInOiAnXFxcXGInLCAnXFxmJzogJ1xcXFxmJyxcbiAgICB9O1xuXG4vLyAjIyBDb25zdHJ1Y3RvclxuZnVuY3Rpb24gTjNXcml0ZXIob3V0cHV0U3RyZWFtLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOM1dyaXRlcikpXG4gICAgcmV0dXJuIG5ldyBOM1dyaXRlcihvdXRwdXRTdHJlYW0sIG9wdGlvbnMpO1xuXG4gIC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGEgc3RyZWFtXG4gIGlmIChvdXRwdXRTdHJlYW0gJiYgdHlwZW9mIG91dHB1dFN0cmVhbS53cml0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICBvcHRpb25zID0gb3V0cHV0U3RyZWFtLCBvdXRwdXRTdHJlYW0gPSBudWxsO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBJZiBubyBvdXRwdXQgc3RyZWFtIGdpdmVuLCBzZW5kIHRoZSBvdXRwdXQgYXMgc3RyaW5nIHRocm91Z2ggdGhlIGVuZCBjYWxsYmFja1xuICBpZiAoIW91dHB1dFN0cmVhbSkge1xuICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICB0aGlzLl9vdXRwdXRTdHJlYW0gPSB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgZG9uZSkgeyBvdXRwdXQgKz0gY2h1bms7IGRvbmUgJiYgZG9uZSgpOyB9LFxuICAgICAgZW5kOiAgIGZ1bmN0aW9uIChkb25lKSB7IGRvbmUgJiYgZG9uZShudWxsLCBvdXRwdXQpOyB9LFxuICAgIH07XG4gICAgdGhpcy5fZW5kU3RyZWFtID0gdHJ1ZTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl9vdXRwdXRTdHJlYW0gPSBvdXRwdXRTdHJlYW07XG4gICAgdGhpcy5fZW5kU3RyZWFtID0gb3B0aW9ucy5lbmQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMuZW5kO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSB3cml0ZXIsIGRlcGVuZGluZyBvbiB0aGUgZm9ybWF0XG4gIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICBpZiAoISgvdHJpcGxlfHF1YWQvaSkudGVzdChvcHRpb25zLmZvcm1hdCkpIHtcbiAgICB0aGlzLl9ncmFwaCA9ICcnO1xuICAgIHRoaXMuX3ByZWZpeElSSXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9wdGlvbnMucHJlZml4ZXMgJiYgdGhpcy5hZGRQcmVmaXhlcyhvcHRpb25zLnByZWZpeGVzKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl93cml0ZVRyaXBsZSA9IHRoaXMuX3dyaXRlVHJpcGxlTGluZTtcbiAgfVxufVxuXG5OM1dyaXRlci5wcm90b3R5cGUgPSB7XG4gIC8vICMjIFByaXZhdGUgbWV0aG9kc1xuXG4gIC8vICMjIyBgX3dyaXRlYCB3cml0ZXMgdGhlIGFyZ3VtZW50IHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIF93cml0ZTogZnVuY3Rpb24gKHN0cmluZywgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9vdXRwdXRTdHJlYW0ud3JpdGUoc3RyaW5nLCAndXRmOCcsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAgIC8vICMjIyBgX3dyaXRlVHJpcGxlYCB3cml0ZXMgdGhlIHRyaXBsZSB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBfd3JpdGVUcmlwbGU6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgsIGRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgLy8gV3JpdGUgdGhlIGdyYXBoJ3MgbGFiZWwgaWYgaXQgaGFzIGNoYW5nZWRcbiAgICAgIGlmICh0aGlzLl9ncmFwaCAhPT0gZ3JhcGgpIHtcbiAgICAgICAgLy8gQ2xvc2UgdGhlIHByZXZpb3VzIGdyYXBoIGFuZCBzdGFydCB0aGUgbmV3IG9uZVxuICAgICAgICB0aGlzLl93cml0ZSgodGhpcy5fc3ViamVjdCA9PT0gbnVsbCA/ICcnIDogKHRoaXMuX2dyYXBoID8gJ1xcbn1cXG4nIDogJy5cXG4nKSkgK1xuICAgICAgICAgICAgICAgICAgICAoZ3JhcGggPyB0aGlzLl9lbmNvZGVJcmlPckJsYW5rTm9kZShncmFwaCkgKyAnIHtcXG4nIDogJycpKTtcbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICAgIC8vIERvbid0IHRyZWF0IGlkZW50aWNhbCBibGFuayBub2RlcyBhcyByZXBlYXRpbmcgZ3JhcGhzXG4gICAgICAgIHRoaXMuX2dyYXBoID0gZ3JhcGhbMF0gIT09ICdbJyA/IGdyYXBoIDogJ10nO1xuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVwZWF0IHRoZSBzdWJqZWN0IGlmIGl0J3MgdGhlIHNhbWVcbiAgICAgIGlmICh0aGlzLl9zdWJqZWN0ID09PSBzdWJqZWN0KSB7XG4gICAgICAgIC8vIERvbid0IHJlcGVhdCB0aGUgcHJlZGljYXRlIGlmIGl0J3MgdGhlIHNhbWVcbiAgICAgICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSA9PT0gcHJlZGljYXRlKVxuICAgICAgICAgIHRoaXMuX3dyaXRlKCcsICcgKyB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSwgZG9uZSk7XG4gICAgICAgIC8vIFNhbWUgc3ViamVjdCwgZGlmZmVyZW50IHByZWRpY2F0ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fd3JpdGUoJztcXG4gICAgJyArXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlUHJlZGljYXRlKHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZSkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZU9iamVjdChvYmplY3QpLCBkb25lKTtcbiAgICAgIH1cbiAgICAgIC8vIERpZmZlcmVudCBzdWJqZWN0OyB3cml0ZSB0aGUgd2hvbGUgdHJpcGxlXG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX3dyaXRlKCh0aGlzLl9zdWJqZWN0ID09PSBudWxsID8gJycgOiAnLlxcbicpICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlU3ViamVjdCh0aGlzLl9zdWJqZWN0ID0gc3ViamVjdCkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVQcmVkaWNhdGUodGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZU9iamVjdChvYmplY3QpLCBkb25lKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGRvbmUgJiYgZG9uZShlcnJvcik7IH1cbiAgfSxcblxuICAvLyAjIyMgYF93cml0ZVRyaXBsZUxpbmVgIHdyaXRlcyB0aGUgdHJpcGxlIG9yIHF1YWQgdG8gdGhlIG91dHB1dCBzdHJlYW0gYXMgYSBzaW5nbGUgbGluZVxuICBfd3JpdGVUcmlwbGVMaW5lOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoLCBkb25lKSB7XG4gICAgLy8gRG9uJ3QgdXNlIHByZWZpeGVzXG4gICAgZGVsZXRlIHRoaXMuX3ByZWZpeE1hdGNoO1xuICAgIC8vIFdyaXRlIHRoZSB0cmlwbGVcbiAgICB0cnkge1xuICAgICAgdGhpcy5fd3JpdGUodGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUoc3ViamVjdCkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUocHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSArXG4gICAgICAgICAgICAgICAgICAoZ3JhcGggPyAnICcgKyB0aGlzLl9lbmNvZGVJcmlPckJsYW5rTm9kZShncmFwaCkgKyAnLlxcbicgOiAnLlxcbicpLCBkb25lKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGRvbmUgJiYgZG9uZShlcnJvcik7IH1cbiAgfSxcblxuICAvLyAjIyMgYF9lbmNvZGVJcmlPckJsYW5rTm9kZWAgcmVwcmVzZW50cyBhbiBJUkkgb3IgYmxhbmsgbm9kZVxuICBfZW5jb2RlSXJpT3JCbGFua05vZGU6IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAvLyBBIGJsYW5rIG5vZGUgb3IgbGlzdCBpcyByZXByZXNlbnRlZCBhcy1pc1xuICAgIHZhciBmaXJzdENoYXIgPSBlbnRpdHlbMF07XG4gICAgaWYgKGZpcnN0Q2hhciA9PT0gJ1snIHx8IGZpcnN0Q2hhciA9PT0gJygnIHx8IGZpcnN0Q2hhciA9PT0gJ18nICYmIGVudGl0eVsxXSA9PT0gJzonKVxuICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAvLyBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGVzY2FwZS50ZXN0KGVudGl0eSkpXG4gICAgICBlbnRpdHkgPSBlbnRpdHkucmVwbGFjZShlc2NhcGVBbGwsIGNoYXJhY3RlclJlcGxhY2VyKTtcbiAgICAvLyBUcnkgdG8gcmVwcmVzZW50IHRoZSBJUkkgYXMgcHJlZml4ZWQgbmFtZVxuICAgIHZhciBwcmVmaXhNYXRjaCA9IHRoaXMuX3ByZWZpeFJlZ2V4LmV4ZWMoZW50aXR5KTtcbiAgICByZXR1cm4gIXByZWZpeE1hdGNoID8gJzwnICsgZW50aXR5ICsgJz4nIDpcbiAgICAgICAgICAgKCFwcmVmaXhNYXRjaFsxXSA/IGVudGl0eSA6IHRoaXMuX3ByZWZpeElSSXNbcHJlZml4TWF0Y2hbMV1dICsgcHJlZml4TWF0Y2hbMl0pO1xuICB9LFxuXG4gIC8vICMjIyBgX2VuY29kZUxpdGVyYWxgIHJlcHJlc2VudHMgYSBsaXRlcmFsXG4gIF9lbmNvZGVMaXRlcmFsOiBmdW5jdGlvbiAodmFsdWUsIHR5cGUsIGxhbmd1YWdlKSB7XG4gICAgLy8gRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgIGlmIChlc2NhcGUudGVzdCh2YWx1ZSkpXG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoZXNjYXBlQWxsLCBjaGFyYWN0ZXJSZXBsYWNlcik7XG4gICAgLy8gV3JpdGUgdGhlIGxpdGVyYWwsIHBvc3NpYmx5IHdpdGggdHlwZSBvciBsYW5ndWFnZVxuICAgIGlmIChsYW5ndWFnZSlcbiAgICAgIHJldHVybiAnXCInICsgdmFsdWUgKyAnXCJAJyArIGxhbmd1YWdlO1xuICAgIGVsc2UgaWYgKHR5cGUpXG4gICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiXl4nICsgdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUodHlwZSk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuICdcIicgKyB2YWx1ZSArICdcIic7XG4gIH0sXG5cbiAgLy8gIyMjIGBfZW5jb2RlU3ViamVjdGAgcmVwcmVzZW50cyBhIHN1YmplY3RcbiAgX2VuY29kZVN1YmplY3Q6IGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgaWYgKHN1YmplY3RbMF0gPT09ICdcIicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgbGl0ZXJhbCBhcyBzdWJqZWN0IGlzIG5vdCBhbGxvd2VkOiAnICsgc3ViamVjdCk7XG4gICAgLy8gRG9uJ3QgdHJlYXQgaWRlbnRpY2FsIGJsYW5rIG5vZGVzIGFzIHJlcGVhdGluZyBzdWJqZWN0c1xuICAgIGlmIChzdWJqZWN0WzBdID09PSAnWycpXG4gICAgICB0aGlzLl9zdWJqZWN0ID0gJ10nO1xuICAgIHJldHVybiB0aGlzLl9lbmNvZGVJcmlPckJsYW5rTm9kZShzdWJqZWN0KTtcbiAgfSxcblxuICAvLyAjIyMgYF9lbmNvZGVQcmVkaWNhdGVgIHJlcHJlc2VudHMgYSBwcmVkaWNhdGVcbiAgX2VuY29kZVByZWRpY2F0ZTogZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgIGlmIChwcmVkaWNhdGVbMF0gPT09ICdcIicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgbGl0ZXJhbCBhcyBwcmVkaWNhdGUgaXMgbm90IGFsbG93ZWQ6ICcgKyBwcmVkaWNhdGUpO1xuICAgIHJldHVybiBwcmVkaWNhdGUgPT09IFJERl9UWVBFID8gJ2EnIDogdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUocHJlZGljYXRlKTtcbiAgfSxcblxuICAvLyAjIyMgYF9lbmNvZGVPYmplY3RgIHJlcHJlc2VudHMgYW4gb2JqZWN0XG4gIF9lbmNvZGVPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAvLyBSZXByZXNlbnQgYW4gSVJJIG9yIGJsYW5rIG5vZGVcbiAgICBpZiAob2JqZWN0WzBdICE9PSAnXCInKVxuICAgICAgcmV0dXJuIHRoaXMuX2VuY29kZUlyaU9yQmxhbmtOb2RlKG9iamVjdCk7XG4gICAgLy8gUmVwcmVzZW50IGEgbGl0ZXJhbFxuICAgIHZhciBtYXRjaCA9IE4zTGl0ZXJhbE1hdGNoZXIuZXhlYyhvYmplY3QpO1xuICAgIGlmICghbWF0Y2gpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXRlcmFsOiAnICsgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlTGl0ZXJhbChtYXRjaFsxXSwgbWF0Y2hbMl0sIG1hdGNoWzNdKTtcbiAgfSxcblxuICAvLyAjIyMgYF9ibG9ja2VkV3JpdGVgIHJlcGxhY2VzIGBfd3JpdGVgIGFmdGVyIHRoZSB3cml0ZXIgaGFzIGJlZW4gY2xvc2VkXG4gIF9ibG9ja2VkV3JpdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB3cml0ZSBiZWNhdXNlIHRoZSB3cml0ZXIgaGFzIGJlZW4gY2xvc2VkLicpO1xuICB9LFxuXG4gIC8vICMjIyBgYWRkVHJpcGxlYCBhZGRzIHRoZSB0cmlwbGUgdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgYWRkVHJpcGxlOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoLCBkb25lKSB7XG4gICAgLy8gVGhlIHRyaXBsZSB3YXMgZ2l2ZW4gYXMgYSB0cmlwbGUgb2JqZWN0LCBzbyBzaGlmdCBwYXJhbWV0ZXJzXG4gICAgaWYgKG9iamVjdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdGhpcy5fd3JpdGVUcmlwbGUoc3ViamVjdC5zdWJqZWN0LCBzdWJqZWN0LnByZWRpY2F0ZSwgc3ViamVjdC5vYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmdyYXBoIHx8ICcnLCBwcmVkaWNhdGUpO1xuICAgIC8vIFRoZSBvcHRpb25hbCBgZ3JhcGhgIHBhcmFtZXRlciB3YXMgbm90IHByb3ZpZGVkXG4gICAgZWxzZSBpZiAodHlwZW9mIGdyYXBoICE9PSAnc3RyaW5nJylcbiAgICAgIHRoaXMuX3dyaXRlVHJpcGxlKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCAnJywgZ3JhcGgpO1xuICAgIC8vIFRoZSBgZ3JhcGhgIHBhcmFtZXRlciB3YXMgcHJvdmlkZWRcbiAgICBlbHNlXG4gICAgICB0aGlzLl93cml0ZVRyaXBsZShzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgsIGRvbmUpO1xuICB9LFxuXG4gIC8vICMjIyBgYWRkVHJpcGxlc2AgYWRkcyB0aGUgdHJpcGxlcyB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBhZGRUcmlwbGVzOiBmdW5jdGlvbiAodHJpcGxlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpcGxlcy5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMuYWRkVHJpcGxlKHRyaXBsZXNbaV0pO1xuICB9LFxuXG4gIC8vICMjIyBgYWRkUHJlZml4YCBhZGRzIHRoZSBwcmVmaXggdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgYWRkUHJlZml4OiBmdW5jdGlvbiAocHJlZml4LCBpcmksIGRvbmUpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgICBwcmVmaXhlc1twcmVmaXhdID0gaXJpO1xuICAgIHRoaXMuYWRkUHJlZml4ZXMocHJlZml4ZXMsIGRvbmUpO1xuICB9LFxuXG4gIC8vICMjIyBgYWRkUHJlZml4ZXNgIGFkZHMgdGhlIHByZWZpeGVzIHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFByZWZpeGVzOiBmdW5jdGlvbiAocHJlZml4ZXMsIGRvbmUpIHtcbiAgICAvLyBBZGQgYWxsIHVzZWZ1bCBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhJUklzID0gdGhpcy5fcHJlZml4SVJJcywgaGFzUHJlZml4ZXMgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBwcmVmaXggaW4gcHJlZml4ZXMpIHtcbiAgICAgIC8vIFZlcmlmeSB3aGV0aGVyIHRoZSBwcmVmaXggY2FuIGJlIHVzZWQgYW5kIGRvZXMgbm90IGV4aXN0IHlldFxuICAgICAgdmFyIGlyaSA9IHByZWZpeGVzW3ByZWZpeF07XG4gICAgICBpZiAoL1sjXFwvXSQvLnRlc3QoaXJpKSAmJiBwcmVmaXhJUklzW2lyaV0gIT09IChwcmVmaXggKz0gJzonKSkge1xuICAgICAgICBoYXNQcmVmaXhlcyA9IHRydWU7XG4gICAgICAgIHByZWZpeElSSXNbaXJpXSA9IHByZWZpeDtcbiAgICAgICAgLy8gRmluaXNoIGEgcG9zc2libGUgcGVuZGluZyB0cmlwbGVcbiAgICAgICAgaWYgKHRoaXMuX3N1YmplY3QgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl93cml0ZSh0aGlzLl9ncmFwaCA/ICdcXG59XFxuJyA6ICcuXFxuJyk7XG4gICAgICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGwsIHRoaXMuX2dyYXBoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV3JpdGUgcHJlZml4XG4gICAgICAgIHRoaXMuX3dyaXRlKCdAcHJlZml4ICcgKyBwcmVmaXggKyAnIDwnICsgaXJpICsgJz4uXFxuJyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlY3JlYXRlIHRoZSBwcmVmaXggbWF0Y2hlclxuICAgIGlmIChoYXNQcmVmaXhlcykge1xuICAgICAgdmFyIElSSWxpc3QgPSAnJywgcHJlZml4TGlzdCA9ICcnO1xuICAgICAgZm9yICh2YXIgcHJlZml4SVJJIGluIHByZWZpeElSSXMpIHtcbiAgICAgICAgSVJJbGlzdCArPSBJUklsaXN0ID8gJ3wnICsgcHJlZml4SVJJIDogcHJlZml4SVJJO1xuICAgICAgICBwcmVmaXhMaXN0ICs9IChwcmVmaXhMaXN0ID8gJ3wnIDogJycpICsgcHJlZml4SVJJc1twcmVmaXhJUkldO1xuICAgICAgfVxuICAgICAgSVJJbGlzdCA9IElSSWxpc3QucmVwbGFjZSgvW1xcXVxcL1xcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXCRdL2csICdcXFxcJCYnKTtcbiAgICAgIHRoaXMuX3ByZWZpeFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBwcmVmaXhMaXN0ICsgJylbXlxcL10qJHwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXignICsgSVJJbGlzdCArICcpKFthLXpBLVpdW1xcXFwtX2EtekEtWjAtOV0qKSQnKTtcbiAgICB9XG4gICAgLy8gRW5kIGEgcHJlZml4IGJsb2NrIHdpdGggYSBuZXdsaW5lXG4gICAgdGhpcy5fd3JpdGUoaGFzUHJlZml4ZXMgPyAnXFxuJyA6ICcnLCBkb25lKTtcbiAgfSxcblxuICAvLyAjIyMgYGJsYW5rYCBjcmVhdGVzIGEgYmxhbmsgbm9kZSB3aXRoIHRoZSBnaXZlbiBjb250ZW50XG4gIGJsYW5rOiBmdW5jdGlvbiAocHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBwcmVkaWNhdGUsIGNoaWxkLCBsZW5ndGg7XG4gICAgLy8gRW1wdHkgYmxhbmsgbm9kZVxuICAgIGlmIChwcmVkaWNhdGUgPT09IHVuZGVmaW5lZClcbiAgICAgIGNoaWxkcmVuID0gW107XG4gICAgLy8gQmxhbmsgbm9kZSBwYXNzZWQgYXMgYmxhbmsoXCJwcmVkaWNhdGVcIiwgXCJvYmplY3RcIilcbiAgICBlbHNlIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSAnc3RyaW5nJylcbiAgICAgIGNoaWxkcmVuID0gW3sgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0IH1dO1xuICAgIC8vIEJsYW5rIG5vZGUgcGFzc2VkIGFzIGJsYW5rKHsgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0IH0pXG4gICAgZWxzZSBpZiAoISgnbGVuZ3RoJyBpbiBwcmVkaWNhdGUpKVxuICAgICAgY2hpbGRyZW4gPSBbcHJlZGljYXRlXTtcblxuICAgIHN3aXRjaCAobGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgLy8gR2VuZXJhdGUgYW4gZW1wdHkgYmxhbmsgbm9kZVxuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAnW10nO1xuICAgIC8vIEdlbmVyYXRlIGEgbm9uLW5lc3RlZCBvbmUtdHJpcGxlIGJsYW5rIG5vZGVcbiAgICBjYXNlIDE6XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkLm9iamVjdFswXSAhPT0gJ1snKVxuICAgICAgICByZXR1cm4gJ1sgJyArIHRoaXMuX2VuY29kZVByZWRpY2F0ZShjaGlsZC5wcmVkaWNhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3QoY2hpbGQub2JqZWN0KSArICcgXSc7XG4gICAgLy8gR2VuZXJhdGUgYSBtdWx0aS10cmlwbGUgb3IgbmVzdGVkIGJsYW5rIG5vZGVcbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIGNvbnRlbnRzID0gJ1snO1xuICAgICAgLy8gV3JpdGUgYWxsIHRyaXBsZXMgaW4gb3JkZXJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgLy8gV3JpdGUgb25seSB0aGUgb2JqZWN0IGlzIHRoZSBwcmVkaWNhdGUgaXMgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzXG4gICAgICAgIGlmIChjaGlsZC5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZSlcbiAgICAgICAgICBjb250ZW50cyArPSAnLCAnICsgdGhpcy5fZW5jb2RlT2JqZWN0KGNoaWxkLm9iamVjdCk7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgd3JpdGUgdGhlIHByZWRpY2F0ZSBhbmQgdGhlIG9iamVjdFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZW50cyArPSAoaSA/ICc7XFxuICAnIDogJ1xcbiAgJykgK1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZVByZWRpY2F0ZShjaGlsZC5wcmVkaWNhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3QoY2hpbGQub2JqZWN0KTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBjaGlsZC5wcmVkaWNhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50cyArICdcXG5dJztcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBsaXN0YCBjcmVhdGVzIGEgbGlzdCBub2RlIHdpdGggdGhlIGdpdmVuIGNvbnRlbnRcbiAgbGlzdDogZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCB8fCAwLCBjb250ZW50cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICBjb250ZW50c1tpXSA9IHRoaXMuX2VuY29kZU9iamVjdChlbGVtZW50c1tpXSk7XG4gICAgcmV0dXJuICcoJyArIGNvbnRlbnRzLmpvaW4oJyAnKSArICcpJztcbiAgfSxcblxuICAvLyAjIyMgYF9wcmVmaXhSZWdleGAgbWF0Y2hlcyBhIHByZWZpeGVkIG5hbWUgb3IgSVJJIHRoYXQgYmVnaW5zIHdpdGggb25lIG9mIHRoZSBhZGRlZCBwcmVmaXhlc1xuICBfcHJlZml4UmVnZXg6IC8kMF4vLFxuXG4gIC8vICMjIyBgZW5kYCBzaWduYWxzIHRoZSBlbmQgb2YgdGhlIG91dHB1dCBzdHJlYW1cbiAgZW5kOiBmdW5jdGlvbiAoZG9uZSkge1xuICAgIC8vIEZpbmlzaCBhIHBvc3NpYmxlIHBlbmRpbmcgdHJpcGxlXG4gICAgaWYgKHRoaXMuX3N1YmplY3QgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3dyaXRlKHRoaXMuX2dyYXBoID8gJ1xcbn1cXG4nIDogJy5cXG4nKTtcbiAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgIH1cbiAgICAvLyBEaXNhbGxvdyBmdXJ0aGVyIHdyaXRpbmdcbiAgICB0aGlzLl93cml0ZSA9IHRoaXMuX2Jsb2NrZWRXcml0ZTtcblxuICAgIC8vIFRyeSB0byBlbmQgdGhlIHVuZGVybHlpbmcgc3RyZWFtLCBlbnN1cmluZyBkb25lIGlzIGNhbGxlZCBleGFjdGx5IG9uZSB0aW1lXG4gICAgdmFyIHNpbmdsZURvbmUgPSBkb25lICYmIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7IHNpbmdsZURvbmUgPSBudWxsLCBkb25lKGVycm9yLCByZXN1bHQpOyB9O1xuICAgIGlmICh0aGlzLl9lbmRTdHJlYW0pIHtcbiAgICAgIHRyeSB7IHJldHVybiB0aGlzLl9vdXRwdXRTdHJlYW0uZW5kKHNpbmdsZURvbmUpOyB9XG4gICAgICBjYXRjaCAoZXJyb3IpIHsgLyogZXJyb3IgY2xvc2luZyBzdHJlYW0gKi8gfVxuICAgIH1cbiAgICBzaW5nbGVEb25lICYmIHNpbmdsZURvbmUoKTtcbiAgfSxcbn07XG5cbi8vIFJlcGxhY2VzIGEgY2hhcmFjdGVyIGJ5IGl0cyBlc2NhcGVkIHZlcnNpb25cbmZ1bmN0aW9uIGNoYXJhY3RlclJlcGxhY2VyKGNoYXJhY3Rlcikge1xuICAvLyBSZXBsYWNlIGEgc2luZ2xlIGNoYXJhY3RlciBieSBpdHMgZXNjYXBlZCB2ZXJzaW9uXG4gIHZhciByZXN1bHQgPSBlc2NhcGVSZXBsYWNlbWVudHNbY2hhcmFjdGVyXTtcbiAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gUmVwbGFjZSBhIHNpbmdsZSBjaGFyYWN0ZXIgd2l0aCBpdHMgNC1iaXQgdW5pY29kZSBlc2NhcGUgc2VxdWVuY2VcbiAgICBpZiAoY2hhcmFjdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmVzdWx0ID0gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuICAgICAgcmVzdWx0ID0gJ1xcXFx1MDAwMCcuc3Vic3RyKDAsIDYgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gUmVwbGFjZSBhIHN1cnJvZ2F0ZSBwYWlyIHdpdGggaXRzIDgtYml0IHVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlXG4gICAgZWxzZSB7XG4gICAgICByZXN1bHQgPSAoKGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApIC0gMHhEODAwKSAqIDB4NDAwICtcbiAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLmNoYXJDb2RlQXQoMSkgKyAweDI0MDApLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJlc3VsdCA9ICdcXFxcVTAwMDAwMDAwJy5zdWJzdHIoMCwgMTAgLSByZXN1bHQubGVuZ3RoKSArIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gIyMgRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBOM1dyaXRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ2xhc3NPcmRlciA9IHJlcXVpcmUoJy4vY2xhc3Mtb3JkZXInKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbnZhciBCbGFua05vZGUgPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKEJsYW5rTm9kZSwgX05vZGUpO1xuXG4gIGZ1bmN0aW9uIEJsYW5rTm9kZShpZCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbGFua05vZGUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsYW5rTm9kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsYW5rTm9kZSkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMudGVybVR5cGUgPSBCbGFua05vZGUudGVybVR5cGU7XG4gICAgX3RoaXMuaWQgPSBCbGFua05vZGUubmV4dElkKys7XG4gICAgX3RoaXMudmFsdWUgPSBpZCB8fCBfdGhpcy5pZC50b1N0cmluZygpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCbGFua05vZGUsIFt7XG4gICAga2V5OiAnY29tcGFyZVRlcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wYXJlVGVybShvdGhlcikge1xuICAgICAgaWYgKHRoaXMuY2xhc3NPcmRlciA8IG90aGVyLmNsYXNzT3JkZXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2xhc3NPcmRlciA+IG90aGVyLmNsYXNzT3JkZXIpIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaWQgPCBvdGhlci5pZCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZCA+IG90aGVyLmlkKSB7XG4gICAgICAgIHJldHVybiArMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvcHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KGZvcm11bGEpIHtcbiAgICAgIC8vIGRlcGVuZHMgb24gdGhlIGZvcm11bGFcbiAgICAgIHZhciBibm9kZU5ldyA9IG5ldyBCbGFua05vZGUoKTtcbiAgICAgIGZvcm11bGEuY29weVRvKHRoaXMsIGJub2RlTmV3KTtcbiAgICAgIHJldHVybiBibm9kZU5ldztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b0Nhbm9uaWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ2Fub25pY2FsKCkge1xuICAgICAgcmV0dXJuICdfOicgKyB0aGlzLnZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gQmxhbmtOb2RlLk5UQW5vbnltb3VzTm9kZVByZWZpeCArIHRoaXMuaWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJsYW5rTm9kZTtcbn0oTm9kZSk7XG5cbkJsYW5rTm9kZS5uZXh0SWQgPSAwO1xuQmxhbmtOb2RlLnRlcm1UeXBlID0gJ0JsYW5rTm9kZSc7XG5CbGFua05vZGUuTlRBbm9ueW1vdXNOb2RlUHJlZml4ID0gJ186bic7XG5CbGFua05vZGUucHJvdG90eXBlLmNsYXNzT3JkZXIgPSBDbGFzc09yZGVyWydCbGFua05vZGUnXTtcbkJsYW5rTm9kZS5wcm90b3R5cGUuaXNCbGFuayA9IDE7XG5CbGFua05vZGUucHJvdG90eXBlLmlzVmFyID0gMTtcblxubW9kdWxlLmV4cG9ydHMgPSBCbGFua05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2xhc3NPcmRlciA9IHtcbiAgJ0xpdGVyYWwnOiAxLFxuICAnQ29sbGVjdGlvbic6IDMsXG4gICdHcmFwaCc6IDQsXG4gICdOYW1lZE5vZGUnOiA1LFxuICAnQmxhbmtOb2RlJzogNixcbiAgJ1ZhcmlhYmxlJzogN1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzc09yZGVyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQmxhbmtOb2RlID0gcmVxdWlyZSgnLi9ibGFuay1ub2RlJyk7XG52YXIgQ2xhc3NPcmRlciA9IHJlcXVpcmUoJy4vY2xhc3Mtb3JkZXInKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbnZhciBDb2xsZWN0aW9uID0gZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0cyhDb2xsZWN0aW9uLCBfTm9kZSk7XG5cbiAgZnVuY3Rpb24gQ29sbGVjdGlvbihpbml0aWFsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb24pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbGxlY3Rpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xsZWN0aW9uKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy50ZXJtVHlwZSA9IENvbGxlY3Rpb24udGVybVR5cGU7XG4gICAgX3RoaXMuaWQgPSBCbGFua05vZGUubmV4dElkKys7XG4gICAgX3RoaXMuZWxlbWVudHMgPSBbXTtcbiAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICBpZiAoaW5pdGlhbCAmJiBpbml0aWFsLmxlbmd0aCA+IDApIHtcbiAgICAgIGluaXRpYWwuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBfdGhpcy5lbGVtZW50cy5wdXNoKE5vZGUuZnJvbVZhbHVlKGVsZW1lbnQpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgW3tcbiAgICBrZXk6ICdhcHBlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NoaWZ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5zaGlmdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N1YnN0aXR1dGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzdGl0dXRlKGJpbmRpbmdzKSB7XG4gICAgICB2YXIgZWxlbWVudHNDb3B5ID0gdGhpcy5lbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVhKSB7XG4gICAgICAgIGVhLnN1YnN0aXR1dGUoYmluZGluZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZWxlbWVudHNDb3B5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b05UJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9OVCgpIHtcbiAgICAgIHJldHVybiBCbGFua05vZGUuTlRBbm9ueW1vdXNOb2RlUHJlZml4ICsgdGhpcy5pZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcoJyArIHRoaXMuZWxlbWVudHMuam9pbignICcpICsgJyknO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Vuc2hpZnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnNoaWZ0KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLnVuc2hpZnQoZWxlbWVudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbGxlY3Rpb247XG59KE5vZGUpO1xuXG5Db2xsZWN0aW9uLnRlcm1UeXBlID0gJ0NvbGxlY3Rpb24nO1xuQ29sbGVjdGlvbi5wcm90b3R5cGUuY2xhc3NPcmRlciA9IENsYXNzT3JkZXJbJ0NvbGxlY3Rpb24nXTtcbkNvbGxlY3Rpb24ucHJvdG90eXBlLmNvbXBhcmVUZXJtID0gQmxhbmtOb2RlLnByb3RvdHlwZS5jb21wYXJlVGVybTtcbkNvbGxlY3Rpb24ucHJvdG90eXBlLmlzVmFyID0gMDtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMuY29udmVydFRvSnNvbiA9IGNvbnZlcnRUb0pzb247XG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0VG9OUXVhZHMgPSBjb252ZXJ0VG9OUXVhZHM7XG5cbnZhciBhc3luY0xpYiA9IHJlcXVpcmUoJ2FzeW5jJyk7IC8vIEBAIEdvYWw6IHJlbW92ZSB0aGlzIGRlcGVuZGVuY3lcbnZhciBqc29ubGQgPSByZXF1aXJlKCdqc29ubGQnKTtcbnZhciBOMyA9IHJlcXVpcmUoJ24zJyk7IC8vIEBAIEdvYWw6IHJlbW92ZSB0aGlzIGRlcGVuZGVuY3lcblxuZnVuY3Rpb24gY29udmVydFRvSnNvbihuM1N0cmluZywganNvbkNhbGxiYWNrKSB7XG4gIHZhciBqc29uU3RyaW5nO1xuICB2YXIgbjNQYXJzZXIgPSBOMy5QYXJzZXIoKTtcbiAgdmFyIG4zV3JpdGVyID0gTjMuV3JpdGVyKHtcbiAgICBmb3JtYXQ6ICdOLVF1YWRzJ1xuICB9KTtcbiAgYXN5bmNMaWIud2F0ZXJmYWxsKFtmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBuM1BhcnNlci5wYXJzZShuM1N0cmluZywgY2FsbGJhY2spO1xuICB9LCBmdW5jdGlvbiAodHJpcGxlLCBwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRyaXBsZSAhPT0gbnVsbCkge1xuICAgICAgbjNXcml0ZXIuYWRkVHJpcGxlKHRyaXBsZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG4zV3JpdGVyLmVuZChjYWxsYmFjayk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAocmVzdWx0LCBjYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICBqc29ubGQuZnJvbVJERihyZXN1bHQsIHtcbiAgICAgICAgZm9ybWF0OiAnYXBwbGljYXRpb24vbnF1YWRzJ1xuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChqc29uLCBjYWxsYmFjaykge1xuICAgIGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcbiAgICBqc29uQ2FsbGJhY2sobnVsbCwganNvblN0cmluZyk7XG4gIH1dLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBqc29uQ2FsbGJhY2soZXJyLCBqc29uU3RyaW5nKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb05RdWFkcyhuM1N0cmluZywgbnF1YWRDYWxsYmFjaykge1xuICB2YXIgbnF1YWRTdHJpbmc7XG4gIHZhciBuM1BhcnNlciA9IE4zLlBhcnNlcigpO1xuICB2YXIgbjNXcml0ZXIgPSBOMy5Xcml0ZXIoe1xuICAgIGZvcm1hdDogJ04tUXVhZHMnXG4gIH0pO1xuICBhc3luY0xpYi53YXRlcmZhbGwoW2Z1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIG4zUGFyc2VyLnBhcnNlKG4zU3RyaW5nLCBjYWxsYmFjayk7XG4gIH0sIGZ1bmN0aW9uICh0cmlwbGUsIHByZWZpeCwgY2FsbGJhY2spIHtcbiAgICBpZiAodHJpcGxlICE9PSBudWxsKSB7XG4gICAgICBuM1dyaXRlci5hZGRUcmlwbGUodHJpcGxlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbjNXcml0ZXIuZW5kKGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChyZXN1bHQsIGNhbGxiYWNrKSB7XG4gICAgbnF1YWRTdHJpbmcgPSByZXN1bHQ7XG4gICAgbnF1YWRDYWxsYmFjayhudWxsLCBucXVhZFN0cmluZyk7XG4gIH1dLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBucXVhZENhbGxiYWNrKGVyciwgbnF1YWRTdHJpbmcpO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfaW5kZXhlZEZvcm11bGEgPSByZXF1aXJlKCcuL2luZGV4ZWQtZm9ybXVsYScpO1xuXG52YXIgX2luZGV4ZWRGb3JtdWxhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4ZWRGb3JtdWxhKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEJsYW5rTm9kZSA9IHJlcXVpcmUoJy4vYmxhbmstbm9kZScpO1xudmFyIENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL2NvbGxlY3Rpb24nKTtcbnZhciBEZWZhdWx0R3JhcGggPSByZXF1aXJlKCcuL2RlZmF1bHQtZ3JhcGgnKTtcbnZhciBGZXRjaGVyID0gcmVxdWlyZSgnLi9mZXRjaGVyJyk7XG5cbnZhciBMaXRlcmFsID0gcmVxdWlyZSgnLi9saXRlcmFsJyk7XG52YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG52YXIgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9zdGF0ZW1lbnQnKTtcbnZhciBWYXJpYWJsZSA9IHJlcXVpcmUoJy4vdmFyaWFibGUnKTtcblxuZnVuY3Rpb24gYmxhbmtOb2RlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgQmxhbmtOb2RlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNvbGxlY3Rpb24oZWxlbWVudHMpIHtcbiAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGVsZW1lbnRzKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRHcmFwaCgpIHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0R3JhcGgoKTtcbn1cbmZ1bmN0aW9uIGZldGNoZXIoc3RvcmUsIHRpbWVvdXQsIGFzeW5jKSB7XG4gIHJldHVybiBuZXcgRmV0Y2hlcihzdG9yZSwgdGltZW91dCwgYXN5bmMpO1xufVxuZnVuY3Rpb24gZ3JhcGgoKSB7XG4gIHJldHVybiBuZXcgX2luZGV4ZWRGb3JtdWxhMi5kZWZhdWx0KCk7XG59XG5mdW5jdGlvbiBsaXQodmFsLCBsYW5nLCBkdCkge1xuICByZXR1cm4gbmV3IExpdGVyYWwoJycgKyB2YWwsIGxhbmcsIGR0KTtcbn1cbmZ1bmN0aW9uIGxpdGVyYWwodmFsdWUsIGxhbmd1YWdlT3JEYXRhdHlwZSkge1xuICBpZiAodHlwZW9mIGxhbmd1YWdlT3JEYXRhdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAobGFuZ3VhZ2VPckRhdGF0eXBlLmluZGV4T2YoJzonKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbCh2YWx1ZSwgbGFuZ3VhZ2VPckRhdGF0eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHZhbHVlLCBudWxsLCBuYW1lZE5vZGUobGFuZ3VhZ2VPckRhdGF0eXBlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgTGl0ZXJhbCh2YWx1ZSwgbnVsbCwgbGFuZ3VhZ2VPckRhdGF0eXBlKTtcbiAgfVxufVxuZnVuY3Rpb24gbmFtZWROb2RlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgTmFtZWROb2RlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHF1YWQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gIGdyYXBoID0gZ3JhcGggfHwgbmV3IERlZmF1bHRHcmFwaCgpO1xuICByZXR1cm4gbmV3IFN0YXRlbWVudChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpO1xufVxuZnVuY3Rpb24gc3Qoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gIHJldHVybiBuZXcgU3RhdGVtZW50KHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCk7XG59XG5mdW5jdGlvbiB0cmlwbGUoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgcmV0dXJuIHF1YWQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpO1xufVxuZnVuY3Rpb24gdmFyaWFibGUobmFtZSkge1xuICByZXR1cm4gbmV3IFZhcmlhYmxlKG5hbWUpO1xufVxuXG4vLyByZGZqcyBzcGVjIGZhY3RvcnkgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMuYmxhbmtOb2RlID0gYmxhbmtOb2RlO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdEdyYXBoID0gZGVmYXVsdEdyYXBoO1xubW9kdWxlLmV4cG9ydHMuZ3JhcGggPSBncmFwaDtcbm1vZHVsZS5leHBvcnRzLmxpdGVyYWwgPSBsaXRlcmFsO1xubW9kdWxlLmV4cG9ydHMubmFtZWROb2RlID0gbmFtZWROb2RlO1xubW9kdWxlLmV4cG9ydHMucXVhZCA9IHF1YWQ7XG5tb2R1bGUuZXhwb3J0cy50cmlwbGUgPSB0cmlwbGU7XG5tb2R1bGUuZXhwb3J0cy52YXJpYWJsZSA9IHZhcmlhYmxlO1xuXG4vLyByZGZsaWIgb25seVxubW9kdWxlLmV4cG9ydHMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5tb2R1bGUuZXhwb3J0cy5mZXRjaGVyID0gZmV0Y2hlcjtcbm1vZHVsZS5leHBvcnRzLmxpdCA9IGxpdDtcbm1vZHVsZS5leHBvcnRzLnN0ID0gc3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbnZhciBEZWZhdWx0R3JhcGggPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKERlZmF1bHRHcmFwaCwgX05vZGUpO1xuXG4gIGZ1bmN0aW9uIERlZmF1bHRHcmFwaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVmYXVsdEdyYXBoKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEZWZhdWx0R3JhcGguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEZWZhdWx0R3JhcGgpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnRlcm1UeXBlID0gJ0RlZmF1bHRHcmFwaCc7XG4gICAgX3RoaXMudmFsdWUgPSAnJztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGVmYXVsdEdyYXBoLCBbe1xuICAgIGtleTogJ3RvQ2Fub25pY2FsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9DYW5vbmljYWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGVmYXVsdEdyYXBoO1xufShOb2RlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0R3JhcGg7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbi8qKlxuICogU2luZ2xldG9uIHN1YmNsYXNzIG9mIGFuIGVtcHR5IENvbGxlY3Rpb24uXG4gKi9cblxudmFyIEVtcHR5ID0gZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0cyhFbXB0eSwgX05vZGUpO1xuXG4gIGZ1bmN0aW9uIEVtcHR5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbXB0eSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRW1wdHkuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbXB0eSkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMudGVybVR5cGUgPSBFbXB0eS50ZXJtVHlwZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRW1wdHksIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnKCknO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFbXB0eTtcbn0oTm9kZSk7XG5cbkVtcHR5LnRlcm1UeXBlID0gJ2VtcHR5JztcblxubW9kdWxlLmV4cG9ydHMgPSBFbXB0eTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyogZ2xvYmFsICRTb2xpZFRlc3RFbnZpcm9ubWVudCAqL1xuLyoqXG4gKlxuICogUHJvamVjdDogcmRmbGliLmpzXG4gKlxuICogRmlsZTogZmV0Y2hlci5qc1xuICpcbiAqIERlc2NyaXB0aW9uOiBjb250YWlucyBmdW5jdGlvbnMgZm9yIHJlcXVlc3RpbmcvZmV0Y2hpbmcvcmV0cmFjdGluZ1xuICogIFRoaXMgaW1wbGVtZW50cyBxdWl0ZSBhIGxvdCBvZiB0aGUgd2ViIGFyY2hpdGVjdHVyZS5cbiAqIEEgZmV0Y2hlciBpcyBib3VuZCB0byBhIHNwZWNpZmljIGtub3dsZWRnZSBiYXNlIGdyYXBoLCBpbnRvIHdoaWNoXG4gKiBpdCBsb2FkcyBzdHVmZiBhbmQgaW50byB3aGljaCBpdCB3cml0ZXMgaXRzIG1ldGFkYXRhXG4gKiBAQCBUaGUgbWV0YWRhdGEgc2hvdWxkIGJlIG9wdGlvbmFsbHkgYSBzZXBhcmF0ZSBncmFwaFxuICpcbiAqIC0gaW1wbGVtZW50cyBzZW1hbnRpY3Mgb2YgSFRUUCBoZWFkZXJzLCBJbnRlcm5ldCBDb250ZW50IFR5cGVzXG4gKiAtIHNlbGVjdHMgcGFyc2VycyBmb3IgcmRmL3htbCwgbjMsIHJkZmEsIGdyZGRsXG4gKlxuICogRGVwZW5kZW5jaWVzOlxuICpcbiAqIG5lZWRzOiB1dGlsLmpzIHVyaS5qcyB0ZXJtLmpzIHJkZnBhcnNlci5qcyByZGZhLmpzIG4zcGFyc2VyLmpzXG4gKiAgICAgIGlkZW50aXR5LmpzIHNwYXJxbC5qcyBqc29ucGFyc2VyLmpzXG4gKlxuICogSW5kZXBlbmRlbnQgb2YgalF1ZXJ5XG4gKi9cblxuLyoqXG4gKiBUaGluZ3MgdG8gdGVzdDogY2FsbGJhY2tzIG9uIHJlcXVlc3QsIHJlZnJlc2gsIHJldHJhY3RcbiAqICAgbG9hZGluZyBmcm9tIEhUVFAsIEhUVFBTLCBGVFAsIEZJTEUsIG90aGVycz9cbiAqIFRvIGRvOlxuICogRmlyaW5nIHVwIGEgbWFpbCBjbGllbnQgZm9yIG1pZDogIChtZXNzYWdlOikgVVJMc1xuICovXG52YXIgbG9nID0gcmVxdWlyZSgnLi9sb2cnKTtcbnZhciBOM1BhcnNlciA9IHJlcXVpcmUoJy4vbjNwYXJzZXInKTtcbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKTtcbnZhciBOYW1lc3BhY2UgPSByZXF1aXJlKCcuL25hbWVzcGFjZScpO1xudmFyIHJkZlBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIHBhcnNlUkRGYURPTSA9IHJlcXVpcmUoJy4vcmRmYXBhcnNlcicpLnBhcnNlUkRGYURPTTtcbnZhciBSREZQYXJzZXIgPSByZXF1aXJlKCcuL3JkZnhtbHBhcnNlcicpO1xudmFyIFVyaSA9IHJlcXVpcmUoJy4vdXJpJyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIHNlcmlhbGl6ZSA9IHJlcXVpcmUoJy4vc2VyaWFsaXplJyk7XG5cbnZhciBQYXJzYWJsZSA9IHtcbiAgJ3RleHQvbjMnOiB0cnVlLFxuICAndGV4dC90dXJ0bGUnOiB0cnVlLFxuICAnYXBwbGljYXRpb24vcmRmK3htbCc6IHRydWUsXG4gICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnOiB0cnVlLFxuICAndGV4dC9odG1sJzogdHJ1ZSxcbiAgJ2FwcGxpY2F0aW9uL2xkK2pzb24nOiB0cnVlXG59O1xuXG52YXIgRmV0Y2hlciA9IGZ1bmN0aW9uIEZldGNoZXIoc3RvcmUsIHRpbWVvdXQsIGFzeW5jKSB7XG4gIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgdGhpcy50aGlzVVJJID0gJ2h0dHA6Ly9kaWcuY3NhaWwubWl0LmVkdS8yMDA1L2FqYXIvYWphdy9yZGYvc291cmNlcy5qcycgKyAnI1NvdXJjZUZldGNoZXInOyAvLyAtLSBLZW5ueVxuICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0IHx8IDMwMDAwO1xuICB0aGlzLmFzeW5jID0gYXN5bmMgIT0gbnVsbCA/IGFzeW5jIDogdHJ1ZTtcbiAgdGhpcy5hcHBOb2RlID0gdGhpcy5zdG9yZS5ibm9kZSgpOyAvLyBEZW5vdGluZyB0aGlzIHNlc3Npb25cbiAgdGhpcy5zdG9yZS5mZXRjaGVyID0gdGhpczsgLy8gQmktbGlua2VkXG4gIHRoaXMucmVxdWVzdGVkID0ge307XG4gIC8vIHRoaXMucmVxdWVzdGVkW3VyaV0gc3RhdGVzOlxuICAvLyAgIHVuZGVmaW5lZCAgICAgbm8gcmVjb3JkIG9mIHdlYiBhY2Nlc3Mgb3IgcmVjb3JkcyByZXNldFxuICAvLyAgIHRydWUgICAgICAgICAgaGFzIGJlZW4gcmVxdWVzdGVkLCBYSFIgaW4gcHJvZ3Jlc3NcbiAgLy8gICAnZG9uZScgICAgICAgIHJlY2VpdmVkLCBPa1xuICAvLyAgIDQwMyAgICAgICAgICAgSFRUUCBzdGF0dXMgdW5hdXRob3JpemVkXG4gIC8vICAgNDA0ICAgICAgICAgICBSZXNzb3VyY2UgZG9lcyBub3QgZXhpc3QuIENhbiBiZSBjcmVhdGVkIGV0Yy5cbiAgLy8gICAncmVkaXJlY3RlZCcgIEluIGF0dGVtcHQgdG8gY291bnRlciBDT1JTIHByb2JsZW1zIHJldHJpZWQuXG4gIC8vICAgb3RoZXIgc3RyaW5ncyBtZWFuIHZhcmlvdXMgb3RoZXIgZXJyb3MsIHN1Y2ggYXMgcGFyc2UgZXJycm9zLlxuICAvL1xuICB0aGlzLnJlZGlyZWN0ZWRUbyA9IHt9OyAvLyBXZWhuICdyZWRpcmVjZWQnXG4gIHRoaXMuZmV0Y2hDYWxsYmFja3MgPSB7fTsgLy8gZmV0Y2hDYWxsYmFja3NbdXJpXS5wdXNoKGNhbGxiYWNrKVxuXG4gIHRoaXMubm9uZXhpc3RhbnQgPSB7fTsgLy8ga2VlcCB0cmFjayBvZiBleHBsaWN0IDQwNHMgLT4gd2UgY2FuIG92ZXJ3cml0ZSBldGNcbiAgdGhpcy5sb29rZWRVcCA9IHt9O1xuICB0aGlzLmhhbmRsZXJzID0gW107XG4gIHRoaXMubWVkaWF0eXBlcyA9IHt9O1xuICB2YXIgc2YgPSB0aGlzO1xuICB2YXIga2IgPSB0aGlzLnN0b3JlO1xuICB2YXIgbnMgPSB7fTsgLy8gQ29udmVuaWVuY2UgbmFtZXNwYWNlcyBuZWVkZWQgaW4gdGhpcyBtb2R1bGU6XG4gIC8vIFRoZXNlIGFyZSBkZWxpYmVydGVseSBub3QgZXhwb3J0ZWQgYXMgdGhlIHVzZXIgYXBwbGljYXRpb24gc2hvdWxkXG4gIC8vIG1ha2UgaXRzIG93biBsaXN0IGFuZCBub3QgcmVseSBvbiB0aGUgcHJlZml4ZXMgdXNlZCBoZXJlLFxuICAvLyBhbmQgbm90IGJlIHRlbXB0ZWQgdG8gYWRkIHRvIHRoZW0sIGFuZCB0aGVtIGNsYXNoIHdpdGggdGhvc2Ugb2YgYW5vdGhlclxuICAvLyBhcHBsaWNhdGlvbi5cbiAgbnMubGluayA9IE5hbWVzcGFjZSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayMnKTtcbiAgbnMuaHR0cCA9IE5hbWVzcGFjZSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvaHR0cCMnKTtcbiAgbnMuaHR0cGggPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2h0dHBoIycpO1xuICBucy5yZGYgPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnKTtcbiAgbnMucmRmcyA9IE5hbWVzcGFjZSgnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hIycpO1xuICBucy5kYyA9IE5hbWVzcGFjZSgnaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8nKTtcblxuICBzZi5tZWRpYXR5cGVzWydpbWFnZS8qJ10gPSB7XG4gICAgJ3EnOiAwLjlcbiAgfTtcblxuICBzZi5tZWRpYXR5cGVzWycqLyonXSA9IHsgLy8gTXVzdCBhbGxvdyBhY2Nlc3MgdG8gcmFuZG9tIGNvbnRlbnRcbiAgICAncSc6IDAuMVxuICB9O1xuXG4gIEZldGNoZXIuY3Jvc3NTaXRlUHJveHkgPSBmdW5jdGlvbiAodXJpKSB7XG4gICAgaWYgKEZldGNoZXIuY3Jvc3NTaXRlUHJveHlUZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIEZldGNoZXIuY3Jvc3NTaXRlUHJveHlUZW1wbGF0ZS5yZXBsYWNlKCd7dXJpfScsIGVuY29kZVVSSUNvbXBvbmVudCh1cmkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgRmV0Y2hlci5SREZYTUxIYW5kbGVyID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoYXJncykge1xuICAgICAgdGhpcy5kb20gPSBhcmdzWzBdO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZXJGYWN0b3J5ID0gZnVuY3Rpb24gKHhocikge1xuICAgICAgeGhyLmhhbmRsZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAvLyBzZi5hZGRTdGF0dXMoeGhyLnJlcSwgJ3BhcnNpbmcgc29vbiBhcyBSREYvWE1MLi4uJylcbiAgICAgICAgdmFyIGtiID0gc2Yuc3RvcmU7XG4gICAgICAgIGlmICghdGhpcy5kb20pIHRoaXMuZG9tID0gVXRpbC5wYXJzZVhNTCh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLmRvbS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIGlmIChyb290Lm5vZGVOYW1lID09PSAncGFyc2VyZXJyb3InKSB7XG4gICAgICAgICAgLy8gQEAgTW96aWxsYSBvbmx5IFNlZSBpc3N1ZS9pc3N1ZTExMFxuICAgICAgICAgIHNmLmZhaWxGZXRjaCh4aHIsICdCYWRseSBmb3JtZWQgWE1MIGluICcgKyB4aHIucmVzb3VyY2UudXJpKTsgLy8gaGF2ZSB0byBmYWlsIHRoZSByZXF1ZXN0XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWRseSBmb3JtZWQgWE1MIGluICcgKyB4aHIucmVzb3VyY2UudXJpKTsgLy8gQEAgQWRkIGRldGFpbHNcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFJERlBhcnNlcihrYik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGFyc2VyLnBhcnNlKHRoaXMuZG9tLCB4aHIub3JpZ2luYWwudXJpLCB4aHIub3JpZ2luYWwpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdTeW50YXggZXJyb3IgcGFyc2luZyBSREYvWE1MISAnICsgZSk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1N5bnRheCBlcnJvciBwYXJzaW5nIFJERi9YTUwhICcgKyBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXhoci5vcHRpb25zLm5vTWV0YSkge1xuICAgICAgICAgIGtiLmFkZCh4aHIub3JpZ2luYWwsIG5zLnJkZigndHlwZScpLCBucy5saW5rKCdSREZEb2N1bWVudCcpLCBzZi5hcHBOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuICBGZXRjaGVyLlJERlhNTEhhbmRsZXIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdSREZYTUxIYW5kbGVyJztcbiAgfTtcbiAgRmV0Y2hlci5SREZYTUxIYW5kbGVyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHNmKSB7XG4gICAgc2YubWVkaWF0eXBlc1snYXBwbGljYXRpb24vcmRmK3htbCddID0ge1xuICAgICAgJ3EnOiAwLjlcbiAgICB9O1xuICB9O1xuICBGZXRjaGVyLlJERlhNTEhhbmRsZXIucGF0dGVybiA9IG5ldyBSZWdFeHAoJ2FwcGxpY2F0aW9uL3JkZlxcXFwreG1sJyk7XG5cbiAgLy8gVGhpcyB3b3VsZCBtdWNoIGJldHRlciB1c2Ugb24tYm9hcmQgWFNMVCBlbmdpbmUuIEBAXG4gIC8qICBkZXByb2NhdGVkIDIwMTYtMDItMTcgIHRpbWJsXG4gIEZldGNoZXIuZG9HUkRETCA9IGZ1bmN0aW9uKGtiLCBkb2MsIHhzbHR1cmksIHhtbHVyaSkge1xuICAgICAgc2YucmVxdWVzdFVSSSgnaHR0cDovL3d3dy53My5vcmcvMjAwNS8wOC8nICsgJ29ubGluZV94c2x0L3hzbHQ/JyArICd4c2xmaWxlPScgKyBlc2NhcGUoeHNsdHVyaSkgKyAnJnhtbGZpbGU9JyArIGVzY2FwZSh4bWx1cmkpLCBkb2MpXG4gIH1cbiAgKi9cbiAgRmV0Y2hlci5YSFRNTEhhbmRsZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmIChhcmdzKSB7XG4gICAgICB0aGlzLmRvbSA9IGFyZ3NbMF07XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICB4aHIuaGFuZGxlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciByZWxhdGlvbiwgcmV2ZXJzZTtcbiAgICAgICAgaWYgKCF0aGlzLmRvbSkge1xuICAgICAgICAgIHRoaXMuZG9tID0gVXRpbC5wYXJzZVhNTCh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2IgPSBzZi5zdG9yZTtcblxuICAgICAgICAvLyBkYzp0aXRsZVxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmRvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGl0bGUnKTtcbiAgICAgICAgaWYgKHRpdGxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBrYi5hZGQoeGhyLnJlc291cmNlLCBucy5kYygndGl0bGUnKSwga2IubGl0ZXJhbCh0aXRsZVswXS50ZXh0Q29udGVudCksIHhoci5yZXNvdXJjZSk7XG4gICAgICAgICAgLy8gbG9nLmluZm8oXCJJbmZlcnJpbmcgdGl0bGUgb2YgXCIgKyB4aHIucmVzb3VyY2UpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBsaW5rIHJlbFxuICAgICAgICB2YXIgbGlua3MgPSB0aGlzLmRvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xuICAgICAgICBmb3IgKHZhciB4ID0gbGlua3MubGVuZ3RoIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgICAgICAvLyBAQCByZXZcbiAgICAgICAgICByZWxhdGlvbiA9IGxpbmtzW3hdLmdldEF0dHJpYnV0ZSgncmVsJyk7XG4gICAgICAgICAgcmV2ZXJzZSA9IGZhbHNlO1xuICAgICAgICAgIGlmICghcmVsYXRpb24pIHtcbiAgICAgICAgICAgIHJlbGF0aW9uID0gbGlua3NbeF0uZ2V0QXR0cmlidXRlKCdyZXYnKTtcbiAgICAgICAgICAgIHJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVsYXRpb24pIHtcbiAgICAgICAgICAgIHNmLmxpbmtEYXRhKHhociwgcmVsYXRpb24sIGxpbmtzW3hdLmdldEF0dHJpYnV0ZSgnaHJlZicpLCB4aHIucmVzb3VyY2UsIHJldmVyc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERhdGEgSXNsYW5kc1xuXG4gICAgICAgIHZhciBzY3JpcHRzID0gdGhpcy5kb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSBzY3JpcHRzW2ldLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICAgIGlmIChQYXJzYWJsZVtjb250ZW50VHlwZV0pIHtcbiAgICAgICAgICAgIHJkZlBhcnNlKHNjcmlwdHNbaV0udGV4dENvbnRlbnQsIGtiLCB4aHIub3JpZ2luYWwudXJpLCBjb250ZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF4aHIub3B0aW9ucy5ub01ldGEpIHtcbiAgICAgICAgICBrYi5hZGQoeGhyLnJlc291cmNlLCBucy5yZGYoJ3R5cGUnKSwgbnMubGluaygnV2ViUGFnZScpLCBzZi5hcHBOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgheGhyLm9wdGlvbnMubm9SREZhICYmIHBhcnNlUkRGYURPTSkge1xuICAgICAgICAgIC8vIGVuYWJsZSBieSBkZWZhdWx0XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhcnNlUkRGYURPTSh0aGlzLmRvbSwga2IsIHhoci5vcmlnaW5hbC51cmkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSAnRXJyb3IgdHJ5aW5nIHRvIHBhcnNlICcgKyB4aHIucmVzb3VyY2UgKyAnIGFzIFJERmE6XFxuJyArIGUgKyAnOlxcbicgKyBlLnN0YWNrO1xuICAgICAgICAgICAgLy8gZHVtcChtc2crXCJcXG5cIilcbiAgICAgICAgICAgIHNmLmZhaWxGZXRjaCh4aHIsIG1zZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNiKCk7IC8vIEZpcmUgZG9uZSBjYWxsYmFja3NcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbiAgRmV0Y2hlci5YSFRNTEhhbmRsZXIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdYSFRNTEhhbmRsZXInO1xuICB9O1xuICBGZXRjaGVyLlhIVE1MSGFuZGxlci5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZikge1xuICAgIHNmLm1lZGlhdHlwZXNbJ2FwcGxpY2F0aW9uL3hodG1sK3htbCddID0ge307XG4gIH07XG4gIEZldGNoZXIuWEhUTUxIYW5kbGVyLnBhdHRlcm4gPSBuZXcgUmVnRXhwKCdhcHBsaWNhdGlvbi94aHRtbCcpO1xuXG4gIEZldGNoZXIuWE1MSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmhhbmRsZXJGYWN0b3J5ID0gZnVuY3Rpb24gKHhocikge1xuICAgICAgeGhyLmhhbmRsZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICB2YXIgZG9tID0gVXRpbC5wYXJzZVhNTCh4aHIucmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAvLyBYTUwgU2VtYW50aWNzIGRlZmluZWQgYnkgcm9vdCBlbGVtZW50IG5hbWVzcGFjZVxuICAgICAgICAvLyBmaWd1cmUgb3V0IHRoZSByb290IGVsZW1lbnRcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBkb20uY2hpbGROb2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgIC8vIGlzIHRoaXMgbm9kZSBhbiBlbGVtZW50P1xuICAgICAgICAgIGlmIChkb20uY2hpbGROb2Rlc1tjXS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgLy8gV2UndmUgZm91bmQgdGhlIGZpcnN0IGVsZW1lbnQsIGl0J3MgdGhlIHJvb3RcbiAgICAgICAgICAgIHZhciBucyA9IGRvbS5jaGlsZE5vZGVzW2NdLm5hbWVzcGFjZVVSSTtcblxuICAgICAgICAgICAgLy8gSXMgaXQgUkRGL1hNTD9cbiAgICAgICAgICAgIGlmIChucyAmJiBucyA9PT0gbnNbJ3JkZiddKSB7XG4gICAgICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnSGFzIFhNTCByb290IGVsZW1lbnQgaW4gdGhlIFJERiBuYW1lc3BhY2UsIHNvIGFzc3VtZSBSREYvWE1MLicpO1xuICAgICAgICAgICAgICBzZi5zd2l0Y2hIYW5kbGVyKCdSREZYTUxIYW5kbGVyJywgeGhyLCBjYiwgW2RvbV0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdCBpc24ndCBSREYvWE1MIG9yIHdlIGNhbid0IHRlbGxcbiAgICAgICAgICAgIC8vIEFyZSB0aGVyZSBhbnkgR1JEREwgdHJhbnNmb3JtcyBmb3IgdGhpcyBuYW1lc3BhY2U/XG4gICAgICAgICAgICAvLyBAQCBhc3N1bWVzIG5zIGRvY3VtZW50cyBoYXZlIGFscmVhZHkgYmVlbiBsb2FkZWRcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICB2YXIgeGZvcm1zID0ga2IuZWFjaChrYi5zeW0obnMpLCBrYi5zeW0oXCJodHRwOi8vd3d3LnczLm9yZy8yMDAzL2cvZGF0YS12aWV3I25hbWVzcGFjZVRyYW5zZm9ybWF0aW9uXCIpKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Zm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgeGZvcm0gPSB4Zm9ybXNbaV1cbiAgICAgICAgICAgICAgICAvLyBsb2cuaW5mbyh4aHIucmVzb3VyY2UudXJpICsgXCIgbmFtZXNwYWNlIFwiICsgbnMgKyBcIiBoYXMgR1JEREwgbnMgdHJhbnNmb3JtXCIgKyB4Zm9ybS51cmkpXG4gICAgICAgICAgICAgICAgIEZldGNoZXIuZG9HUkRETChrYiwgeGhyLnJlc291cmNlLCB4Zm9ybS51cmksIHhoci5yZXNvdXJjZS51cmkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3IgaXQgY291bGQgYmUgWEhUTUw/XG4gICAgICAgIC8vIE1heWJlIGl0IGhhcyBhbiBYSFRNTCBET0NUWVBFP1xuICAgICAgICBpZiAoZG9tLmRvY3R5cGUpIHtcbiAgICAgICAgICAvLyBsb2cuaW5mbyhcIldlIGZvdW5kIGEgRE9DVFlQRSBpbiBcIiArIHhoci5yZXNvdXJjZSlcbiAgICAgICAgICBpZiAoZG9tLmRvY3R5cGUubmFtZSA9PT0gJ2h0bWwnICYmIGRvbS5kb2N0eXBlLnB1YmxpY0lkLm1hdGNoKC9eLVxcL1xcL1czQ1xcL1xcL0RURCBYSFRNTC8pICYmIGRvbS5kb2N0eXBlLnN5c3RlbUlkLm1hdGNoKC9odHRwOlxcL1xcL3d3dy53My5vcmdcXC9UUlxcL3hodG1sLykpIHtcbiAgICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnSGFzIFhIVE1MIERPQ1RZUEUuIFN3aXRjaGluZyB0byBYSFRNTCBIYW5kbGVyLlxcbicpO1xuICAgICAgICAgICAgc2Yuc3dpdGNoSGFuZGxlcignWEhUTUxIYW5kbGVyJywgeGhyLCBjYik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3Igd2hhdCBhYm91dCBhbiBYSFRNTCBuYW1lc3BhY2U/XG4gICAgICAgIHZhciBodG1sID0gZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgdmFyIHhtbG5zID0gaHRtbC5nZXRBdHRyaWJ1dGUoJ3htbG5zJyk7XG4gICAgICAgICAgaWYgKHhtbG5zICYmIHhtbG5zLm1hdGNoKC9eaHR0cDpcXC9cXC93d3cudzMub3JnXFwvMTk5OVxcL3hodG1sLykpIHtcbiAgICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnSGFzIGEgZGVmYXVsdCBuYW1lc3BhY2UgZm9yICcgKyAnWEhUTUwuIFN3aXRjaGluZyB0byBYSFRNTEhhbmRsZXIuXFxuJyk7XG4gICAgICAgICAgICBzZi5zd2l0Y2hIYW5kbGVyKCdYSFRNTEhhbmRsZXInLCB4aHIsIGNiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIHNob3VsZCBjaGVjayB0aGUgbmFtZXNwYWNlIGRvY3VtZW50IChjYWNoZSBpdCEpIGFuZFxuICAgICAgICAvLyBsb29rIGZvciBhIEdSRERMIHRyYW5zZm9ybVxuICAgICAgICAvLyBAQCAgR2V0IG5hbWVzcGFjZSBkb2N1bWVudCA8bj4sIHBhcnNlIGl0LCBsb29rIGZvciAgPG4+IGdyZGRsOm5hbWVzcGFjZVRyYW5zZm9ybSA/eVxuICAgICAgICAvLyBBcHBseSA/eSB0byAgIGRvbVxuICAgICAgICAvLyBXZSBnaXZlIHVwLiBXaGF0IGRpYWxlY3QgaXMgdGhpcz9cbiAgICAgICAgc2YuZmFpbEZldGNoKHhociwgJ1Vuc3VwcG9ydGVkIGRpYWxlY3Qgb2YgWE1MOiBub3QgUkRGIG9yIFhIVE1MIG5hbWVzcGFjZSwgZXRjLlxcbicgKyB4aHIucmVzcG9uc2VUZXh0LnNsaWNlKDAsIDgwKSk7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgRmV0Y2hlci5YTUxIYW5kbGVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnWE1MSGFuZGxlcic7XG4gIH07XG4gIEZldGNoZXIuWE1MSGFuZGxlci5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZikge1xuICAgIHNmLm1lZGlhdHlwZXNbJ3RleHQveG1sJ10gPSB7XG4gICAgICAncSc6IDAuNVxuICAgIH07XG4gICAgc2YubWVkaWF0eXBlc1snYXBwbGljYXRpb24veG1sJ10gPSB7XG4gICAgICAncSc6IDAuNVxuICAgIH07XG4gIH07XG4gIEZldGNoZXIuWE1MSGFuZGxlci5wYXR0ZXJuID0gbmV3IFJlZ0V4cCgnKHRleHR8YXBwbGljYXRpb24pLyguKil4bWwnKTtcblxuICBGZXRjaGVyLkhUTUxIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICB4aHIuaGFuZGxlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBydCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIC8vIFdlIG9ubHkgaGFuZGxlIFhIVE1MIHNvIHdlIGhhdmUgdG8gZmlndXJlIG91dCBpZiB0aGlzIGlzIFhNTFxuICAgICAgICAvLyBsb2cuaW5mbyhcIlNuaWZmaW5nIEhUTUwgXCIgKyB4aHIucmVzb3VyY2UgKyBcIiBmb3IgWEhUTUwuXCIpXG5cbiAgICAgICAgaWYgKHJ0Lm1hdGNoKC9cXHMqPFxcP3htbFxccyt2ZXJzaW9uXFxzKj1bXjw+XStcXD8+LykpIHtcbiAgICAgICAgICBzZi5hZGRTdGF0dXMoeGhyLnJlcSwgXCJIYXMgYW4gWE1MIGRlY2xhcmF0aW9uLiBXZSdsbCBhc3N1bWUgXCIgKyBcIml0J3MgWEhUTUwgYXMgdGhlIGNvbnRlbnQtdHlwZSB3YXMgdGV4dC9odG1sLlxcblwiKTtcbiAgICAgICAgICBzZi5zd2l0Y2hIYW5kbGVyKCdYSFRNTEhhbmRsZXInLCB4aHIsIGNiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBET0NUWVBFXG4gICAgICAgIC8vIFRoZXJlIGlzIHByb2JhYmx5IGEgc21hcnRlciB3YXkgdG8gZG8gdGhpc1xuICAgICAgICBpZiAocnQubWF0Y2goLy4qPCFET0NUWVBFXFxzK2h0bWxbXjxdKy1cXC9cXC9XM0NcXC9cXC9EVEQgWEhUTUxbXjxdK2h0dHA6XFwvXFwvd3d3LnczLm9yZ1xcL1RSXFwveGh0bWxbXjxdKz4vKSkge1xuICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnSGFzIFhIVE1MIERPQ1RZUEUuIFN3aXRjaGluZyB0byBYSFRNTEhhbmRsZXIuXFxuJyk7XG4gICAgICAgICAgc2Yuc3dpdGNoSGFuZGxlcignWEhUTUxIYW5kbGVyJywgeGhyLCBjYik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8geG1sbnNcbiAgICAgICAgaWYgKHJ0Lm1hdGNoKC9bXig8aHRtbCldKjxodG1sXFxzK1tePF0qeG1sbnM9WydcIl1odHRwOlxcL1xcL3d3dy53My5vcmdcXC8xOTk5XFwveGh0bWxbXCInXVtePF0qPi8pKSB7XG4gICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdIYXMgZGVmYXVsdCBuYW1lc3BhY2UgZm9yIFhIVE1MLCBzbyBzd2l0Y2hpbmcgdG8gWEhUTUxIYW5kbGVyLlxcbicpO1xuICAgICAgICAgIHNmLnN3aXRjaEhhbmRsZXIoJ1hIVE1MSGFuZGxlcicsIHhociwgY2IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRjOnRpdGxlXHQgICAgICAgICAgICAgICAgICAgICAgIC8vbm8gbmVlZCB0byBlc2NhcGUgJy8nIGhlcmVcbiAgICAgICAgdmFyIHRpdGxlTWF0Y2ggPSBuZXcgUmVnRXhwKCc8dGl0bGU+KFtcXFxcc1xcXFxTXSs/KTwvdGl0bGU+JywgJ2ltJykuZXhlYyhydCk7XG4gICAgICAgIGlmICh0aXRsZU1hdGNoKSB7XG4gICAgICAgICAgdmFyIGtiID0gc2Yuc3RvcmU7XG4gICAgICAgICAga2IuYWRkKHhoci5yZXNvdXJjZSwgbnMuZGMoJ3RpdGxlJyksIGtiLmxpdGVyYWwodGl0bGVNYXRjaFsxXSksIHhoci5yZXNvdXJjZSk7IC8vIHRoaW5rIGFib3V0IHhtbDpsYW5nIGxhdGVyXG4gICAgICAgICAga2IuYWRkKHhoci5yZXNvdXJjZSwgbnMucmRmKCd0eXBlJyksIG5zLmxpbmsoJ1dlYlBhZ2UnKSwgc2YuYXBwTm9kZSk7XG4gICAgICAgICAgY2IoKTsgLy8gZG9uZUZldGNoLCBub3QgZmFpbGVkXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnbm9uLVhNTCBIVE1MIGRvY3VtZW50LCBub3QgcGFyc2VkIGZvciBkYXRhLicpO1xuICAgICAgICBzZi5kb25lRmV0Y2goeGhyKTtcbiAgICAgICAgLy8gc2YuZmFpbEZldGNoKHhociwgXCJTb3JyeSwgY2FuJ3QgeWV0IHBhcnNlIG5vbi1YTUwgSFRNTFwiKVxuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIEZldGNoZXIuSFRNTEhhbmRsZXIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICdIVE1MSGFuZGxlcic7XG4gIH07XG4gIEZldGNoZXIuSFRNTEhhbmRsZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiAoc2YpIHtcbiAgICBzZi5tZWRpYXR5cGVzWyd0ZXh0L2h0bWwnXSA9IHtcbiAgICAgICdxJzogMC45XG4gICAgfTtcbiAgfTtcbiAgRmV0Y2hlci5IVE1MSGFuZGxlci5wYXR0ZXJuID0gbmV3IFJlZ0V4cCgndGV4dC9odG1sJyk7XG5cbiAgRmV0Y2hlci5UZXh0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmhhbmRsZXJGYWN0b3J5ID0gZnVuY3Rpb24gKHhocikge1xuICAgICAgeGhyLmhhbmRsZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAvLyBXZSBvbmx5IHNwZWFrIGRpYWxlY3RzIG9mIFhNTCByaWdodCBub3cuIElzIHRoaXMgWE1MP1xuICAgICAgICB2YXIgcnQgPSB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIFhNTCBkZWNsYXJhdGlvblxuICAgICAgICBpZiAocnQubWF0Y2goL1xccyo8XFw/eG1sXFxzK3ZlcnNpb25cXHMqPVtePD5dK1xcPz4vKSkge1xuICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnV2FybmluZzogJyArIHhoci5yZXNvdXJjZSArIFwiIGhhcyBhbiBYTUwgZGVjbGFyYXRpb24uIFdlJ2xsIGFzc3VtZSBcIiArIFwiaXQncyBYTUwgYnV0IGl0cyBjb250ZW50LXR5cGUgd2Fzbid0IFhNTC5cXG5cIik7XG4gICAgICAgICAgc2Yuc3dpdGNoSGFuZGxlcignWE1MSGFuZGxlcicsIHhociwgY2IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIFhNTCBkZWNsYXJhdGlvblxuICAgICAgICBpZiAocnQuc2xpY2UoMCwgNTAwKS5tYXRjaCgveG1sbnM6LykpIHtcbiAgICAgICAgICBzZi5hZGRTdGF0dXMoeGhyLnJlcSwgXCJNYXkgaGF2ZSBhbiBYTUwgbmFtZXNwYWNlLiBXZSdsbCBhc3N1bWUgXCIgKyBcIml0J3MgWE1MIGJ1dCBpdHMgY29udGVudC10eXBlIHdhc24ndCBYTUwuXFxuXCIpO1xuICAgICAgICAgIHNmLnN3aXRjaEhhbmRsZXIoJ1hNTEhhbmRsZXInLCB4aHIsIGNiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBnaXZlIHVwIGZpbmRpbmcgc2VtYW50aWNzIC0gdGhpcyBpcyBub3QgYW4gZXJyb3IsIGp1c3Qgbm8gZGF0YVxuICAgICAgICBzZi5hZGRTdGF0dXMoeGhyLnJlcSwgJ1BsYWluIHRleHQgZG9jdW1lbnQsIG5vIGtub3duIFJERiBzZW1hbnRpY3MuJyk7XG4gICAgICAgIHNmLmRvbmVGZXRjaCh4aHIpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICBzZi5mYWlsRmV0Y2goeGhyLCBcInVucGFyc2VhYmxlIC0gdGV4dC9wbGFpbiBub3QgdmlzaWJseSBYTUxcIilcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgZHVtcCh4aHIucmVzb3VyY2UgKyBcIiB1bnBhcnNlYWJsZSAtIHRleHQvcGxhaW4gbm90IHZpc2libHkgWE1MLCBzdGFydHM6XFxuXCIgKyBydC5zbGljZSgwLCA1MDApK1wiXFxuXCIpXG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgRmV0Y2hlci5UZXh0SGFuZGxlci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ1RleHRIYW5kbGVyJztcbiAgfTtcbiAgRmV0Y2hlci5UZXh0SGFuZGxlci5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZikge1xuICAgIHNmLm1lZGlhdHlwZXNbJ3RleHQvcGxhaW4nXSA9IHtcbiAgICAgICdxJzogMC41XG4gICAgfTtcbiAgfTtcbiAgRmV0Y2hlci5UZXh0SGFuZGxlci5wYXR0ZXJuID0gbmV3IFJlZ0V4cCgndGV4dC9wbGFpbicpO1xuXG4gIEZldGNoZXIuTjNIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICB4aHIuaGFuZGxlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIC8vIFBhcnNlIHRoZSB0ZXh0IG9mIHRoaXMgbm9uLVhNTCBmaWxlXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3dlYi5qczogUGFyc2luZyBhcyBOMyAnICsgeGhyLnJlc291cmNlLnVyaSArICcgYmFzZTogJyArIHhoci5vcmlnaW5hbC51cmkpIC8vIEBAQEAgY29tbWVudCBtZSBvdXRcbiAgICAgICAgLy8gc2YuYWRkU3RhdHVzKHhoci5yZXEsIFwiTjMgbm90IHBhcnNlZCB5ZXQuLi5cIilcbiAgICAgICAgdmFyIHAgPSBOM1BhcnNlcihrYiwga2IsIHhoci5vcmlnaW5hbC51cmksIHhoci5vcmlnaW5hbC51cmksIG51bGwsIG51bGwsICcnLCBudWxsKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgcC5sb2FkQnVmKHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcC5sb2FkQnVmKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmFyIG1zZyA9ICdFcnJvciB0cnlpbmcgdG8gcGFyc2UgJyArIHhoci5yZXNvdXJjZSArICcgYXMgTm90YXRpb24zOlxcbicgKyBlICsgJzpcXG4nICsgZS5zdGFjaztcbiAgICAgICAgICAvLyBkdW1wKG1zZytcIlxcblwiKVxuICAgICAgICAgIHNmLmZhaWxGZXRjaCh4aHIsIG1zZyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdOMyBwYXJzZWQ6ICcgKyBwLnN0YXRlbWVudENvdW50ICsgJyB0cmlwbGVzIGluICcgKyBwLmxpbmVzICsgJyBsaW5lcy4nKTtcbiAgICAgICAgc2Yuc3RvcmUuYWRkKHhoci5vcmlnaW5hbCwgbnMucmRmKCd0eXBlJyksIG5zLmxpbmsoJ1JERkRvY3VtZW50JyksIHNmLmFwcE5vZGUpO1xuICAgICAgICAvLyB2YXIgYXJncyA9IFt4aHIub3JpZ2luYWwudXJpXSAvLyBPdGhlciBhcmdzIG5lZWRlZCBldmVyP1xuICAgICAgICBzZi5kb25lRmV0Y2goeGhyKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcblxuICBGZXRjaGVyLk4zSGFuZGxlci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ04zSGFuZGxlcic7XG4gIH07XG4gIEZldGNoZXIuTjNIYW5kbGVyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHNmKSB7XG4gICAgc2YubWVkaWF0eXBlc1sndGV4dC9uMyddID0ge1xuICAgICAgJ3EnOiAnMS4wJ1xuICAgIH07IC8vIGFzIHBlciAyMDA4IHNwZWNcbiAgICAvKlxuICAgIHNmLm1lZGlhdHlwZXNbJ2FwcGxpY2F0aW9uL3gtdHVydGxlJ10gPSB7XG4gICAgICAncSc6IDEuMFxuICAgIH0gLy8gcHJlIDIwMDhcbiAgICAqL1xuICAgIHNmLm1lZGlhdHlwZXNbJ3RleHQvdHVydGxlJ10gPSB7XG4gICAgICAncSc6IDEuMFxuICAgIH07IC8vIHBvc3QgMjAwOFxuICB9O1xuICBGZXRjaGVyLk4zSGFuZGxlci5wYXR0ZXJuID0gbmV3IFJlZ0V4cCgnKGFwcGxpY2F0aW9ufHRleHQpLyh4LSk/KHJkZlxcXFwrKT8objN8dHVydGxlKScpO1xuXG4gIFV0aWwuY2FsbGJhY2tpZnkodGhpcywgWydyZXF1ZXN0JywgJ3JlY3YnLCAnaGVhZGVycycsICdsb2FkJywgJ2ZhaWwnLCAncmVmcmVzaCcsICdyZXRyYWN0JywgJ2RvbmUnXSk7XG5cbiAgdGhpcy5hZGRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICBzZi5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIGhhbmRsZXIucmVnaXN0ZXIoc2YpO1xuICB9O1xuXG4gIHRoaXMuc3dpdGNoSGFuZGxlciA9IGZ1bmN0aW9uIChuYW1lLCB4aHIsIGNiLCBhcmdzKSB7XG4gICAgdmFyIEhhbmRsZXIgPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5oYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCcnICsgdGhpcy5oYW5kbGVyc1tpXSA9PT0gbmFtZSkge1xuICAgICAgICBIYW5kbGVyID0gdGhpcy5oYW5kbGVyc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFIYW5kbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dlYi5qczogc3dpdGNoSGFuZGxlcjogbmFtZT0nICsgbmFtZSArICcgLCB0aGlzLmhhbmRsZXJzID0nICsgdGhpcy5oYW5kbGVycyArICdcXG4nICsgJ3N3aXRjaEhhbmRsZXI6IHN3aXRjaGluZyB0byAnICsgSGFuZGxlciArICc7IHNmPScgKyBzZiArICc7IHR5cGVvZiBGZXRjaGVyPScgKyAodHlwZW9mIEZldGNoZXIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKEZldGNoZXIpKSArICc7XFxuXFx0IEZldGNoZXIuSFRNTEhhbmRsZXI9JyArIEZldGNoZXIuSFRNTEhhbmRsZXIgKyAnXFxuJyArICdcXG5cXHRzZi5oYW5kbGVycz0nICsgc2YuaGFuZGxlcnMgKyAnXFxuJyk7XG4gICAgfVxuICAgIG5ldyBIYW5kbGVyKGFyZ3MpLmhhbmRsZXJGYWN0b3J5KHhocik7XG4gICAgeGhyLmhhbmRsZShjYik7XG4gIH07XG5cbiAgdGhpcy5hZGRTdGF0dXMgPSBmdW5jdGlvbiAocmVxLCBzdGF0dXMpIHtcbiAgICAvLyA8RGVidWcgYWJvdXQ9XCJwYXJzZVBlcmZvcm1hbmNlXCI+XG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgc3RhdHVzID0gJ1snICsgbm93LmdldEhvdXJzKCkgKyAnOicgKyBub3cuZ2V0TWludXRlcygpICsgJzonICsgbm93LmdldFNlY29uZHMoKSArICcuJyArIG5vdy5nZXRNaWxsaXNlY29uZHMoKSArICddICcgKyBzdGF0dXM7XG4gICAgLy8gPC9EZWJ1Zz5cbiAgICB2YXIga2IgPSB0aGlzLnN0b3JlO1xuICAgIHZhciBzID0ga2IudGhlKHJlcSwgbnMubGluaygnc3RhdHVzJykpO1xuICAgIGlmIChzICYmIHMuYXBwZW5kKSB7XG4gICAgICBzLmFwcGVuZChrYi5saXRlcmFsKHN0YXR1cykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2Fybignd2ViLmpzOiBObyBsaXN0IHRvIGFkZCB0bzogJyArIHMgKyAnLCcgKyBzdGF0dXMpOyAvLyBAQEBcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVjb3JkIGVycm9ycyBpbiB0aGUgc3lzdGVtIG9uIGZhaWx1cmVcbiAgLy8gUmV0dXJucyB4aHIgc28gY2FuIGp1c3QgZG8gcmV0dXJuIHRoaXMuZmFpbGZldGNoKC4uLilcbiAgdGhpcy5mYWlsRmV0Y2ggPSBmdW5jdGlvbiAoeGhyLCBzdGF0dXMpIHtcbiAgICB0aGlzLmFkZFN0YXR1cyh4aHIucmVxLCBzdGF0dXMpO1xuICAgIGlmICgheGhyLm9wdGlvbnMubm9NZXRhKSB7XG4gICAgICBrYi5hZGQoeGhyLm9yaWdpbmFsLCBucy5saW5rKCdlcnJvcicpLCBzdGF0dXMpO1xuICAgIH1cbiAgICBpZiAoIXhoci5yZXNvdXJjZS5zYW1lVGVybSh4aHIub3JpZ2luYWwpKSB7XG4gICAgICBjb25zb2xlLmxvZygnQEAgUmVjb3JkaW5nIGZhaWx1cmUgb3JpZ2luYWwgJyArIHhoci5vcmlnaW5hbCArICcoIGFzICcgKyB4aHIucmVzb3VyY2UgKyAnKSA6ICcgKyB4aHIuc3RhdHVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ0BAIFJlY29yZGluZyBmYWlsdXJlIGZvciAnICsgeGhyLm9yaWdpbmFsICsgJzogJyArIHhoci5zdGF0dXMpO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RlZFtVcmkuZG9jcGFydCh4aHIub3JpZ2luYWwudXJpKV0gPSB4aHIuc3RhdHVzOyAvLyBjaGFuZ2VkIDIwMTUgd2FzIGZhbHNlXG4gICAgd2hpbGUgKHRoaXMuZmV0Y2hDYWxsYmFja3NbeGhyLm9yaWdpbmFsLnVyaV0gJiYgdGhpcy5mZXRjaENhbGxiYWNrc1t4aHIub3JpZ2luYWwudXJpXS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZmV0Y2hDYWxsYmFja3NbeGhyLm9yaWdpbmFsLnVyaV0uc2hpZnQoKShmYWxzZSwgJ0ZldGNoIG9mIDwnICsgeGhyLm9yaWdpbmFsLnVyaSArICc+IGZhaWxlZDogJyArIHN0YXR1cywgeGhyKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuZmV0Y2hDYWxsYmFja3NbeGhyLm9yaWdpbmFsLnVyaV07XG4gICAgdGhpcy5maXJlQ2FsbGJhY2tzKCdmYWlsJywgW3hoci5vcmlnaW5hbC51cmksIHN0YXR1c10pO1xuICAgIHhoci5hYm9ydCgpO1xuICAgIHJldHVybiB4aHI7XG4gIH07XG5cbiAgLy8gaW4gdGhlIHdoeSBwYXJ0IG9mIHRoZSBxdWFkIGRpc3Rpbmd1aXNoIGJldHdlZW4gSFRNTCBhbmQgSFRUUCBoZWFkZXJcbiAgLy8gUmV2ZXJzZSBpcyBzZXQgaWlmIHRoZSBsaW5rIHdhcyByZXY9IGFzIG9wcG9zZWQgdG8gcmVsPVxuICB0aGlzLmxpbmtEYXRhID0gZnVuY3Rpb24gKHhociwgcmVsLCB1cmksIHdoeSwgcmV2ZXJzZSkge1xuICAgIGlmICghdXJpKSByZXR1cm47XG4gICAgdmFyIHByZWRpY2F0ZTtcbiAgICAvLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvcG93ZGVyLWRyLyNodHRwbGluayBmb3IgZGVzY3JpYmVkYnkgMjAwOC0xMi0xMFxuICAgIHZhciBvYmogPSBrYi5zeW0oVXJpLmpvaW4odXJpLCB4aHIub3JpZ2luYWwudXJpKSk7XG4gICAgaWYgKHJlbCA9PT0gJ2FsdGVybmF0ZScgfHwgcmVsID09PSAnc2VlQWxzbycgfHwgcmVsID09PSAnbWV0YScgfHwgcmVsID09PSAnZGVzY3JpYmVkYnknKSB7XG4gICAgICBpZiAob2JqLnVyaSA9PT0geGhyLm9yaWdpbmFsLnVyaSkgcmV0dXJuO1xuICAgICAgcHJlZGljYXRlID0gbnMucmRmcygnc2VlQWxzbycpO1xuICAgIH0gZWxzZSBpZiAocmVsID09PSAndHlwZScpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlIGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2xpbmstcmVsYXRpb25zL2xpbmstcmVsYXRpb25zLnhtbFxuICAgICAgLy8gQWxhcyBub3QgeWV0IGluIFJERiB5ZXQgZm9yIGVhY2ggcHJlZGljYXRlXG4gICAgICAvLy8gZW5jb2RlIHNwYWNlIGluIGUuZy4gcmVsPVwic2hvcnRjdXQgaWNvblwiXG4gICAgICBwcmVkaWNhdGUgPSBrYi5zeW0oVXJpLmpvaW4oZW5jb2RlVVJJQ29tcG9uZW50KHJlbCksICdodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2xpbmstcmVsYXRpb25zLycpKTtcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIGtiLmFkZChvYmosIHByZWRpY2F0ZSwgeGhyLm9yaWdpbmFsLCB3aHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrYi5hZGQoeGhyLm9yaWdpbmFsLCBwcmVkaWNhdGUsIG9iaiwgd2h5KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wYXJzZUxpbmtIZWFkZXIgPSBmdW5jdGlvbiAoeGhyLCB0aGlzUmVxKSB7XG4gICAgdmFyIGxpbms7XG4gICAgdHJ5IHtcbiAgICAgIGxpbmsgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2xpbmsnKTsgLy8gTWF5IGNyYXNoIGZyb20gQ09SUyBlcnJvclxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGxpbmspIHtcbiAgICAgIHZhciBsaW5rZXhwID0gLzxbXj5dKj5cXHMqKFxccyo7XFxzKlteXFwoXFwpPD5ALDs6XCJcXC9cXFtcXF1cXD89e30gXFx0XSs9KChbXlxcKFxcKTw+QCw7OlwiXFwvXFxbXFxdXFw/PXt9IFxcdF0rKXwoXCJbXlwiXSpcIikpKSooLHwkKS9nO1xuICAgICAgdmFyIHBhcmFtZXhwID0gL1teXFwoXFwpPD5ALDs6XCJcXC9cXFtcXF1cXD89e30gXFx0XSs9KChbXlxcKFxcKTw+QCw7OlwiXFwvXFxbXFxdXFw/PXt9IFxcdF0rKXwoXCJbXlwiXSpcIikpL2c7XG5cbiAgICAgIHZhciBtYXRjaGVzID0gbGluay5tYXRjaChsaW5rZXhwKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3BsaXQgPSBtYXRjaGVzW2ldLnNwbGl0KCc+Jyk7XG4gICAgICAgIHZhciBocmVmID0gc3BsaXRbMF0uc3Vic3RyaW5nKDEpO1xuICAgICAgICB2YXIgcHMgPSBzcGxpdFsxXTtcbiAgICAgICAgdmFyIHMgPSBwcy5tYXRjaChwYXJhbWV4cCk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBwID0gc1tqXTtcbiAgICAgICAgICB2YXIgcGFyYW1zcGxpdCA9IHAuc3BsaXQoJz0nKTtcbiAgICAgICAgICAvLyB2YXIgbmFtZSA9IHBhcmFtc3BsaXRbMF1cbiAgICAgICAgICB2YXIgcmVsID0gcGFyYW1zcGxpdFsxXS5yZXBsYWNlKC9bXCInXS9nLCAnJyk7IC8vICdcIlxuICAgICAgICAgIHRoaXMubGlua0RhdGEoeGhyLCByZWwsIGhyZWYsIHRoaXNSZXEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZG9uZUZldGNoID0gZnVuY3Rpb24gKHhocikge1xuICAgIHRoaXMuYWRkU3RhdHVzKHhoci5yZXEsICdEb25lLicpO1xuICAgIHRoaXMucmVxdWVzdGVkW3hoci5vcmlnaW5hbC51cmldID0gJ2RvbmUnOyAvLyBLZW5ueVxuICAgIHdoaWxlICh0aGlzLmZldGNoQ2FsbGJhY2tzW3hoci5vcmlnaW5hbC51cmldICYmIHRoaXMuZmV0Y2hDYWxsYmFja3NbeGhyLm9yaWdpbmFsLnVyaV0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLmZldGNoQ2FsbGJhY2tzW3hoci5vcmlnaW5hbC51cmldLnNoaWZ0KCkodHJ1ZSwgdW5kZWZpbmVkLCB4aHIpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5mZXRjaENhbGxiYWNrc1t4aHIub3JpZ2luYWwudXJpXTtcbiAgICB0aGlzLmZpcmVDYWxsYmFja3MoJ2RvbmUnLCBbeGhyLm9yaWdpbmFsLnVyaV0pO1xuICB9O1xuICB2YXIgaGFuZGxlckxpc3QgPSBbRmV0Y2hlci5SREZYTUxIYW5kbGVyLCBGZXRjaGVyLlhIVE1MSGFuZGxlciwgRmV0Y2hlci5YTUxIYW5kbGVyLCBGZXRjaGVyLkhUTUxIYW5kbGVyLCBGZXRjaGVyLlRleHRIYW5kbGVyLCBGZXRjaGVyLk4zSGFuZGxlcl07XG4gIGhhbmRsZXJMaXN0Lm1hcCh0aGlzLmFkZEhhbmRsZXIpO1xuXG4gIC8qKiBOb3RlIHR3byBub2RlcyBhcmUgbm93IHNtdXNoZWRcbiAgICoqXG4gICAqKiBJZiBvbmx5IG9uZSB3YXMgZmxhZ2dlZCBhcyBsb29rZWQgdXAsIHRoZW5cbiAgICoqIHRoZSBuZXcgbm9kZSBpcyBsb29rZWQgdXAgYWdhaW4sIHdoaWNoXG4gICAqKiB3aWxsIG1ha2Ugc3VyZSBhbGwgdGhlIFVSSXMgYXJlIGRlcmVmZXJlbmNlZFxuICAgKi9cbiAgdGhpcy5ub3dLbm93bkFzID0gZnVuY3Rpb24gKHdhcywgbm93KSB7XG4gICAgaWYgKHRoaXMubG9va2VkVXBbd2FzLnVyaV0pIHtcbiAgICAgIGlmICghdGhpcy5sb29rZWRVcFtub3cudXJpXSkgdGhpcy5sb29rVXBUaGluZyhub3csIHdhcyk7IC8vICBAQEBAICBUcmFuc2ZlciB1c2VyQ2FsbGJhY2tcbiAgICB9IGVsc2UgaWYgKHRoaXMubG9va2VkVXBbbm93LnVyaV0pIHtcbiAgICAgIGlmICghdGhpcy5sb29rZWRVcFt3YXMudXJpXSkgdGhpcy5sb29rVXBUaGluZyh3YXMsIG5vdyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybnMgcHJvbWlzZSBvZiBYSFJcbiAgLy9cbiAgLy8gIFdyaXRlcyBiYWNrIHRvIHRoZSB3ZWIgd2hhdCB3ZSBoYXZlIGluIHRoZSBzdG9yZSBmb3IgdGhpcyB1cmlcbiAgdGhpcy5wdXRCYWNrID0gZnVuY3Rpb24gKHVyaSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHVyaSA9IHVyaS51cmkgfHwgdXJpOyAvLyBBY2NlcHQgb2JqZWN0IG9yIHN0cmluZ1xuICAgIHZhciBkb2MgPSBuZXcgTmFtZWROb2RlKHVyaSkuZG9jKCk7IC8vIHN0cmlwIG9mZiAjXG4gICAgb3B0aW9ucy5kYXRhID0gc2VyaWFsaXplKGRvYywgdGhpcy5zdG9yZSwgZG9jLnVyaSwgb3B0aW9ucy5jb250ZW50VHlwZSB8fCAndGV4dC90dXJ0bGUnKTtcbiAgICByZXR1cm4gdGhpcy53ZWJPcGVyYXRpb24oJ1BVVCcsIHVyaSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBwcm9taXNlIG9mIFhIUlxuICAvL1xuICB0aGlzLndlYk9wZXJhdGlvbiA9IGZ1bmN0aW9uIChtZXRob2QsIHVyaSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIHVyaSA9IHVyaS51cmkgfHwgdXJpO1xuICAgIHVyaSA9IHRoaXMucHJveHlJZk5lY2Vzc2FyeSh1cmkpO1xuICAgIHZhciBmZXRjaGVyID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHhociA9IFV0aWwuWE1MSFRUUEZhY3RvcnkoKTtcbiAgICAgIHhoci5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHhoci5vcmlnaW5hbCA9IGZldGNoZXIuc3RvcmUuc3ltKHVyaSk7XG4gICAgICBpZiAoIW9wdGlvbnMubm9NZXRhICYmIHR5cGVvZiB0YWJ1bGF0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZldGNoZXIuc2F2ZVJlcXVlc3RNZXRhZGF0YSh4aHIsIGZldGNoZXIuc3RvcmUsIHVyaSk7XG4gICAgICB9XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAvLyBOT3RlIGEgNDA0IGNhbiBiZSBub3QgYWZhaWx1cmVcbiAgICAgICAgICB2YXIgb2sgPSAheGhyLnN0YXR1cyB8fCB4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwO1xuICAgICAgICAgIGlmICghb3B0aW9ucy5ub01ldGEgJiYgdHlwZW9mIHRhYnVsYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGZldGNoZXIuc2F2ZVJlc3BvbnNlTWV0YWRhdGEoeGhyLCBmZXRjaGVyLnN0b3JlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICByZXNvbHZlKHhocik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCh4aHIuc3RhdHVzICsgJyAnICsgeGhyLnN0YXR1c1RleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJpLCB0cnVlKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCBvcHRpb25zLmNvbnRlbnRUeXBlIHx8ICd0ZXh0L3R1cnRsZScpO1xuICAgICAgeGhyLnNlbmQob3B0aW9ucy5kYXRhID8gb3B0aW9ucy5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLndlYkNvcHkgPSBmdW5jdGlvbiAoaGVyZSwgdGhlcmUsIGNvbnRlbnRfdHlwZSkge1xuICAgIHZhciBmZXRjaGVyID0gdGhpcztcbiAgICBoZXJlID0gaGVyZS51cmkgfHwgaGVyZTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZmV0Y2hlci53ZWJPcGVyYXRpb24oJ0dFVCcsIGhlcmUpLnRoZW4oZnVuY3Rpb24gKHhocikge1xuICAgICAgICBmZXRjaGVyLndlYk9wZXJhdGlvbignUFVUJywgLy8gQEBAIGNoYW5nZSB0byBiaW5hcnkgZnJvbSB0ZXh0XG4gICAgICAgIHRoZXJlLCB7IGRhdGE6IHhoci5yZXNwb25zZVRleHQsIGNvbnRlbnRUeXBlOiBjb250ZW50X3R5cGUgfSkudGhlbihmdW5jdGlvbiAoeGhyKSB7XG4gICAgICAgICAgcmVzb2x2ZSh4aHIpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBMb29rcyB1cCBzb21ldGhpbmcuXG4gIC8vXG4gIC8vIExvb2tzIHVwIGFsbCB0aGUgVVJJcyBhIHRoaW5ncyBoYXMuXG4gIC8vXG4gIC8vIFBhcmFtZXRlcnM6XG4gIC8vXG4gIC8vICB0ZXJtOiAgICAgICBjYW5vbmljYWwgdGVybSBmb3IgdGhlIHRoaW5nIHdob3NlIFVSSSBpcyB0byBiZSBkZXJlZmVyZW5jZWRcbiAgLy8gIHJ0ZXJtOiAgICAgIHRoZSByZXNvdXJjZSB3aGljaCByZWZlcmVkIHRvIHRoaXMgKGZvciB0cmFja2luZyBiYWQgbGlua3MpXG4gIC8vICBvcHRpb25zOiAgICAob2xkOiBmb3JjZSBwYXJhZW10ZXIpIG9yIGRpY3Rpb25hcnkgb2Ygb3B0aW9uczpcbiAgLy8gICAgICBmb3JjZTogICAgICBMb2FkIHRoZSBkYXRhIGV2ZW4gaWYgbG9hZGVkIGJlZm9yZVxuICAvLyAgb25lRG9uZTogICBpcyBjYWxsZWQgYXMgY2FsbGJhY2sob2ssIGVycm9yYm9keSwgeGhyKSBmb3IgZWFjaCBvbmVcbiAgLy8gIGFsbERvbmU6ICAgaXMgY2FsbGVkIGFzIGNhbGxiYWNrKG9rLCBlcnJvcmJvZHkpIGZvciBhbGwgb2YgdGhlbVxuICAvLyBSZXR1cm5zICAgICAgdGhlIG51bWJlciBvZiBVUklzIGZldGNoZWRcbiAgLy9cbiAgdGhpcy5sb29rVXBUaGluZyA9IGZ1bmN0aW9uICh0ZXJtLCBydGVybSwgb3B0aW9ucywgb25lRG9uZSwgYWxsRG9uZSkge1xuICAgIHZhciB1cmlzID0ga2IudXJpcyh0ZXJtKTsgLy8gR2V0IGFsbCBVUklzXG4gICAgdmFyIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIHZhciBlcnJvcnMgPSAnJztcbiAgICB2YXIgb3V0c3RhbmRpbmcgPSB7fTtcbiAgICB2YXIgZm9yY2U7XG4gICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlIHx8IG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgIC8vIE9sZCBzaWduYXR1cmVcbiAgICAgIGZvcmNlID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7IGZvcmNlOiBmb3JjZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gICAgICBmb3JjZSA9ICEhb3B0aW9ucy5mb3JjZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHVyaXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVyaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHUgPSB1cmlzW2ldO1xuICAgICAgICBvdXRzdGFuZGluZ1t1XSA9IHRydWU7XG4gICAgICAgIHRoaXMubG9va2VkVXBbdV0gPSB0cnVlO1xuICAgICAgICB2YXIgc2YgPSB0aGlzO1xuXG4gICAgICAgIHZhciByZXF1ZXN0T25lID0gZnVuY3Rpb24gcmVxdWVzdE9uZSh1MSkge1xuICAgICAgICAgIHNmLnJlcXVlc3RVUkkoVXJpLmRvY3BhcnQodTEpLCBydGVybSwgb3B0aW9ucywgZnVuY3Rpb24gKG9rLCBib2R5LCB4aHIpIHtcbiAgICAgICAgICAgIGlmIChvaykge1xuICAgICAgICAgICAgICBpZiAob25lRG9uZSkgb25lRG9uZSh0cnVlLCB1MSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAob25lRG9uZSkgb25lRG9uZShmYWxzZSwgYm9keSk7XG4gICAgICAgICAgICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZXJyb3JzICs9IGJvZHkgKyAnXFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBvdXRzdGFuZGluZ1t1XTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvdXRzdGFuZGluZykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxsRG9uZSkge1xuICAgICAgICAgICAgICBhbGxEb25lKHN1Y2Nlc3MsIGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3RPbmUodSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cmlzLmxlbmd0aDtcbiAgfTtcblxuICAvKiBQcm9taXNlLWJhc2VkIGxvYWQgZnVuY3Rpb25cbiAgKipcbiAgKiogTmFtZWROb2RlIC0+IFByb21pc2Ugb2YgeGhyXG4gICoqIHVyaSBzdHJpbmcgLT4gUHJvbWlzZSBvZiB4aHJcbiAgKiogQXJyYXkgb2YgdGhlIGFib3ZlIC0+IFByb21pc2Ugb2YgYXJyYXkgb2YgeGhyXG4gICoqXG4gICoqIEBAIHRvZG86IElmIHAxIGlzIGFycmF5IHRoZW4gc2VxdWVuY2Ugb3IgcGFyYWxsZWwgZmV0Y2ggb2YgYWxsXG4gICovXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uICh1cmksIG9wdGlvbnMpIHtcbiAgICB2YXIgZmV0Y2hlciA9IHRoaXM7XG4gICAgaWYgKHVyaSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB2YXIgcHMgPSB1cmkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBmZXRjaGVyLmxvYWQoeCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcyk7XG4gICAgfVxuICAgIHVyaSA9IHVyaS51cmkgfHwgdXJpOyAvLyBOYW1lZE5vZGUgb3IgVVJJIHN0cmluZ1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmZXRjaGVyLm5vd09yV2hlbkZldGNoZWQodXJpLCBvcHRpb25zLCBmdW5jdGlvbiAob2ssIG1lc3NhZ2UsIHhocikge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICByZXNvbHZlKHhocik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKiAgQXNrIGZvciBhIGRvYyB0byBiZSBsb2FkZWQgaWYgbmVjZXNzYXJ5IHRoZW4gY2FsbCBiYWNrXG4gICoqXG4gICoqIENoYW5nZWQgMjAxMy0wOC0yMDogIEFkZGVkIChvaywgZXJyb3JtZXNzYWdlKSBwYXJhbXMgdG8gY2FsbGJhY2tcbiAgKipcbiAgKiogQ2FsbGluZyBtZXRob2RzOlxuICAqKiAgIG5vd09yV2hlbkZldGNoZWQgKHVyaSwgdXNlckNhbGxiYWNrKVxuICAqKiAgIG5vd09yV2hlbkZldGNoZWQgKHVyaSwgb3B0aW9ucywgdXNlckNhbGxiYWNrKVxuICAqKiAgIG5vd09yV2hlbkZldGNoZWQgKHVyaSwgcmVmZXJyaW5nVGVybSwgdXNlckNhbGxiYWNrLCBvcHRpb25zKSAgPC0tIG9sZFxuICAqKiAgIG5vd09yV2hlbkZldGNoZWQgKHVyaSwgcmVmZXJyaW5nVGVybSwgdXNlckNhbGxiYWNrKSA8LS0gb2xkXG4gICoqXG4gICoqICBPcHRpb25zIGluY2x1ZGU6XG4gICoqICAgcmVmZXJyaW5nVGVybSAgICBUaGUgZG9jdWVtbnQgaW4gd2hpY2ggdGhpcyBsaW5rIHdhcyBmb3VuZC5cbiAgKiogICAgICAgICAgICAgICAgICAgIHRoaXMgaXMgdmFsdWFibGUgd2hlbiBmaW5kaW5nIHRoZSBzb3VyY2Ugb2YgYmFkIFVSSXNcbiAgKiogICBmb3JjZSAgICAgICAgICAgIGJvb2xlYW4uICBOZXZlciBtaW5kIHdoZXRoZXIgeW91IGhhdmUgdHJpZWQgYmVmb3JlLFxuICAqKiAgICAgICAgICAgICAgICAgICAgbG9hZCB0aGlzIGZyb20gc2NyYXRjaC5cbiAgKiogICBmb3JjZUNvbnRlbnRUeXBlIE92ZXJyaWRlIHRoZSBpbmNvbWluZyBoZWFkZXIgdG8gZm9yY2UgdGhlIGRhdGEgdG8gYmVcbiAgKiogICAgICAgICAgICAgICAgICAgIHRyZWFlZCBhcyB0aGlzIGNvbnRlbnQtdHlwZS5cbiAgKiovXG4gIHRoaXMubm93T3JXaGVuRmV0Y2hlZCA9IGZ1bmN0aW9uICh1cmksIHAyLCB1c2VyQ2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICB1cmkgPSB1cmkudXJpIHx8IHVyaTsgLy8gYWxsb3cgc3ltYm9sIG9iamVjdCBvciBzdHJpbmcgdG8gYmUgcGFzc2VkXG4gICAgaWYgKHR5cGVvZiBwMiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgdXNlckNhbGxiYWNrID0gcDI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcDIgPT09ICd1bmRlZmluZWQnKSB7Ly8gb3JpZ2luYWwgY2FsbGluZyBzaWduYXR1cmVcbiAgICAgIC8vIHJlZmVyaW5nVGVybSA9IHVuZGVmaW5lZFxuICAgIH0gZWxzZSBpZiAocDIgaW5zdGFuY2VvZiBOYW1lZE5vZGUpIHtcbiAgICAgIC8vIHJlZmVyaW5nVGVybSA9IHAyXG4gICAgICBvcHRpb25zID0geyByZWZlcmluZ1Rlcm06IHAyIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBwMjtcbiAgICB9XG5cbiAgICB0aGlzLnJlcXVlc3RVUkkodXJpLCBwMiwgb3B0aW9ucyB8fCB7fSwgdXNlckNhbGxiYWNrKTtcbiAgfTtcblxuICB0aGlzLmdldCA9IHRoaXMubm93T3JXaGVuRmV0Y2hlZDtcblxuICAvLyBMb29rIHVwIHJlc3BvbnNlIGhlYWRlclxuICAvL1xuICAvLyBSZXR1cm5zOiBhIGxpc3Qgb2YgaGVhZGVyIHZhbHVlcyBmb3VuZCBpbiBhIHN0b3JlZCBIVFRQIHJlc3BvbnNlXG4gIC8vICAgICAgb3IgW10gaWYgcmVzcG9uc2Ugd2FzIGZvdW5kIGJ1dCBubyBoZWFkZXIgZm91bmRcbiAgLy8gICAgICBvciB1bmRlZmluZWQgaWYgbm8gcmVzcG9uc2UgaXMgYXZhaWxhYmxlLlxuICAvL1xuICB0aGlzLmdldEhlYWRlciA9IGZ1bmN0aW9uIChkb2MsIGhlYWRlcikge1xuICAgIHZhciBrYiA9IHRoaXMuc3RvcmU7XG4gICAgdmFyIHJlcXVlc3RzID0ga2IuZWFjaCh1bmRlZmluZWQsIG5zLmxpbmsoJ3JlcXVlc3RlZFVSSScpLCBkb2MudXJpKTtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IHJlcXVlc3RzLmxlbmd0aDsgcisrKSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3RzW3JdO1xuICAgICAgaWYgKHJlcXVlc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcmVzcG9uc2UgPSBrYi5hbnkocmVxdWVzdCwgbnMubGluaygncmVzcG9uc2UnKSk7XG4gICAgICAgIGlmIChyZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0cyA9IGtiLmVhY2gocmVzcG9uc2UsIG5zLmh0dHBoKGhlYWRlci50b0xvd2VyQ2FzZSgpKSk7XG4gICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHYudmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5wcm94eUlmTmVjZXNzYXJ5ID0gZnVuY3Rpb24gKHVyaSkge1xuICAgIGlmICh0eXBlb2YgdGFidWxhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0YWJ1bGF0b3IuaXNFeHRlbnNpb24pIHJldHVybiB1cmk7IC8vIEV4dGVuc3Rpb24gZG9lcyBub3QgbmVlZCBwcm94eVxuXG4gICAgaWYgKHR5cGVvZiAkU29saWRUZXN0RW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICRTb2xpZFRlc3RFbnZpcm9ubWVudC5sb2NhbFNpdGVNYXApIHtcbiAgICAgIC8vIG5lc3RlZCBkaWN0aW9uYXJpZXMgb2YgVVJJIHBhcnRzIGZyb20gb3JpZ2luIGRvd25cbiAgICAgIHZhciBob3N0cGF0aCA9IHVyaS5zcGxpdCgnLycpLnNsaWNlKDIpOyAvLyB0aGUgYml0IGFmdGVyIHRoZSAvL1xuICAgICAgdmFyIGxvb2t1cCA9IGZ1bmN0aW9uIGxvb2t1cChwYXJ0cywgaW5kZXgpIHtcbiAgICAgICAgdmFyIHogPSBpbmRleFtwYXJ0cy5zaGlmdCgpXTtcbiAgICAgICAgaWYgKCF6KSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiB6ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB6ICsgcGFydHMuam9pbignLycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGFydHMpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbG9va3VwKHBhcnRzLCB6KTtcbiAgICAgIH07XG4gICAgICB2YXIgeSA9IGxvb2t1cChob3N0cGF0aCwgJFNvbGlkVGVzdEVudmlyb25tZW50LmxvY2FsU2l0ZU1hcCk7XG4gICAgICBpZiAoeSkge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gYnJvd3NlciBkb2VzIDIwMTQgb24gYXMgaHR0cHMgYnJvd3NlciBzY3JpcHQgbm90IHRydXN0ZWRcbiAgICAvLyBJZiB0aGUgd2ViIGFwcCBvcmlnaW4gaXMgaHR0cHM6IHRoZW4gdGhlIG1peGVkIGNvbnRlbnQgcnVsZXNcbiAgICAvLyBwcmV2ZW50IGl0IGxvYWRpbmcgaW5zZWN1cmUgaHR0cDogc3R1ZmYgc28gd2UgbmVlZCBwcm94eS5cbiAgICBpZiAoRmV0Y2hlci5jcm9zc1NpdGVQcm94eVRlbXBsYXRlICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQubG9jYXRpb24gJiYgKCcnICsgZG9jdW1lbnQubG9jYXRpb24pLnNsaWNlKDAsIDYpID09PSAnaHR0cHM6JyAmJiAvLyBvcmlnaW4gaXMgc2VjdXJlXG4gICAgdXJpLnNsaWNlKDAsIDUpID09PSAnaHR0cDonKSB7XG4gICAgICAvLyByZXF1ZXN0ZWQgZGF0YSBpcyBub3RcbiAgICAgIHJldHVybiBGZXRjaGVyLmNyb3NzU2l0ZVByb3h5VGVtcGxhdGUucmVwbGFjZSgne3VyaX0nLCBlbmNvZGVVUklDb21wb25lbnQodXJpKSk7XG4gICAgfVxuICAgIHJldHVybiB1cmk7XG4gIH07XG5cbiAgdGhpcy5zYXZlUmVxdWVzdE1ldGFkYXRhID0gZnVuY3Rpb24gKHhociwga2IsIGRvY3VyaSkge1xuICAgIHZhciByZXF1ZXN0ID0ga2IuYm5vZGUoKTtcbiAgICB4aHIucmVzb3VyY2UgPSBrYi5zeW0oZG9jdXJpKTtcblxuICAgIHhoci5yZXEgPSByZXF1ZXN0O1xuICAgIGlmICgheGhyLm9wdGlvbnMubm9NZXRhKSB7XG4gICAgICAvLyBTdG9yZSBubyB0cmlwbGVzIGJ1dCBkbyBtaW5kIHRoZSBibm9kZSBmb3IgcmVxXG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIHZhciB0aW1lTm93ID0gJ1snICsgbm93LmdldEhvdXJzKCkgKyAnOicgKyBub3cuZ2V0TWludXRlcygpICsgJzonICsgbm93LmdldFNlY29uZHMoKSArICddICc7XG4gICAgICBrYi5hZGQocmVxdWVzdCwgbnMucmRmcygnbGFiZWwnKSwga2IubGl0ZXJhbCh0aW1lTm93ICsgJyBSZXF1ZXN0IGZvciAnICsgZG9jdXJpKSwgdGhpcy5hcHBOb2RlKTtcbiAgICAgIGtiLmFkZChyZXF1ZXN0LCBucy5saW5rKCdyZXF1ZXN0ZWRVUkknKSwga2IubGl0ZXJhbChkb2N1cmkpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAgaWYgKHhoci5vcmlnaW5hbCAmJiB4aHIub3JpZ2luYWwudXJpICE9PSBkb2N1cmkpIHtcbiAgICAgICAga2IuYWRkKHJlcXVlc3QsIG5zLmxpbmsoJ29yZ2luYWxVUkknKSwga2IubGl0ZXJhbCh4aHIub3JpZ2luYWwudXJpKSwgdGhpcy5hcHBOb2RlKTtcbiAgICAgIH1cbiAgICAgIGtiLmFkZChyZXF1ZXN0LCBucy5saW5rKCdzdGF0dXMnKSwga2IuY29sbGVjdGlvbigpLCB0aGlzLmFwcE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfTtcblxuICB0aGlzLnNhdmVSZXNwb25zZU1ldGFkYXRhID0gZnVuY3Rpb24gKHhociwga2IpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBrYi5ibm9kZSgpO1xuXG4gICAgaWYgKHhoci5yZXEpIGtiLmFkZCh4aHIucmVxLCBucy5saW5rKCdyZXNwb25zZScpLCByZXNwb25zZSk7XG4gICAga2IuYWRkKHJlc3BvbnNlLCBucy5odHRwKCdzdGF0dXMnKSwga2IubGl0ZXJhbCh4aHIuc3RhdHVzKSwgcmVzcG9uc2UpO1xuICAgIGtiLmFkZChyZXNwb25zZSwgbnMuaHR0cCgnc3RhdHVzVGV4dCcpLCBrYi5saXRlcmFsKHhoci5zdGF0dXNUZXh0KSwgcmVzcG9uc2UpO1xuXG4gICAgeGhyLmhlYWRlcnMgPSB7fTtcbiAgICBpZiAoVXJpLnByb3RvY29sKHhoci5yZXNvdXJjZS51cmkpID09PSAnaHR0cCcgfHwgVXJpLnByb3RvY29sKHhoci5yZXNvdXJjZS51cmkpID09PSAnaHR0cHMnKSB7XG4gICAgICB4aHIuaGVhZGVycyA9IFV0aWwuZ2V0SFRUUEhlYWRlcnMoeGhyKTtcbiAgICAgIGZvciAodmFyIGggaW4geGhyLmhlYWRlcnMpIHtcbiAgICAgICAgLy8gdHJpbSBiZWxvdyBmb3IgU2FmYXJpIC0gYWRkcyBhIENSIVxuICAgICAgICB2YXIgdmFsdWUgPSB4aHIuaGVhZGVyc1toXS50cmltKCk7XG4gICAgICAgIHZhciBoMiA9IGgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAga2IuYWRkKHJlc3BvbnNlLCBucy5odHRwaChoMiksIHZhbHVlLCByZXNwb25zZSk7XG4gICAgICAgIGlmIChoMiA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IHRvIFJERiB0eXBlXG4gICAgICAgICAga2IuYWRkKHhoci5yZXNvdXJjZSwgbnMucmRmKCd0eXBlJyksIFV0aWwubWVkaWFUeXBlQ2xhc3ModmFsdWUpLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xuXG4gIC8qKiBSZXF1ZXN0cyBhIGRvY3VtZW50IFVSSSBhbmQgYXJyYW5nZXMgdG8gbG9hZCB0aGUgZG9jdW1lbnQuXG4gICAqKiBQYXJhbWV0ZXJzOlxuICAgKipcdCAgICB0ZXJtOiAgdGVybSBmb3IgdGhlIHRoaW5nIHdob3NlIFVSSSBpcyB0byBiZSBkZXJlZmVyZW5jZWRcbiAgICoqICAgICAgcnRlcm06ICB0aGUgcmVzb3VyY2Ugd2hpY2ggcmVmZXJlZCB0byB0aGlzIChmb3IgdHJhY2tpbmcgYmFkIGxpbmtzKVxuICAgKiogICAgICBvcHRpb25zOlxuICAgKiogICAgICAgICAgICAgIGZvcmNlOiAgTG9hZCB0aGUgZGF0YSBldmVuIGlmIGxvYWRlZCBiZWZvcmVcbiAgICoqICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6ICAgZmxhZyBmb3IgWEhSL0NPUlMgZXRjXG4gICAqKiAgICAgIHVzZXJDYWxsYmFjazogIENhbGxlZCB3aXRoICh0cnVlKSBvciAoZmFsc2UsIGVycm9yYm9keSwge3N0YXR1czogNDAwfSkgYWZ0ZXIgbG9hZCBpcyBkb25lIG9yIGZhaWxlZFxuICAgKiogUmV0dXJuIHZhbHVlOlxuICAgKipcdCAgICBUaGUgeGhyIG9iamVjdCBmb3IgdGhlIEhUVFAgYWNjZXNzXG4gICAqKiAgICAgIG51bGwgaWYgdGhlIHByb3RvY29sIGlzIG5vdCBhIGxvb2stdXAgcHJvdG9jb2wsXG4gICAqKiAgICAgICAgICAgICAgb3IgVVJJIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkXG4gICAqL1xuICB0aGlzLnJlcXVlc3RVUkkgPSBmdW5jdGlvbiAoZG9jdXJpLCBydGVybSwgb3B0aW9ucywgdXNlckNhbGxiYWNrKSB7XG4gICAgLy8gc291cmNlc19yZXF1ZXN0X25ld1xuICAgIC8vIFZhcmlvdXMgY2FsbGluZyBjb252ZW50aW9uc1xuICAgIGRvY3VyaSA9IGRvY3VyaS51cmkgfHwgZG9jdXJpOyAvLyBOYW1lZE5vZGUgb3Igc3RyaW5nXG4gICAgZG9jdXJpID0gZG9jdXJpLnNwbGl0KCcjJylbMF07XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG9wdGlvbnMgPSB7ICdmb3JjZSc6IG9wdGlvbnMgfTsgLy8gT2xzIGRpZ25hdHVyZVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSBvcHRpb25zID0ge307XG5cbiAgICB2YXIgZm9yY2UgPSAhIW9wdGlvbnMuZm9yY2U7XG4gICAgdmFyIGtiID0gdGhpcy5zdG9yZTtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgYmFzZVVSSSA9IG9wdGlvbnMuYmFzZVVSSSB8fCBkb2N1cmk7IC8vIFByZXNldmUgdGhvdWdoIHByb3h5aW5nIGV0Y1xuICAgIG9wdGlvbnMudXNlckNhbGxiYWNrID0gdXNlckNhbGxiYWNrO1xuXG4gICAgdmFyIHBjb2wgPSBVcmkucHJvdG9jb2woZG9jdXJpKTtcbiAgICBpZiAocGNvbCA9PT0gJ3RlbCcgfHwgcGNvbCA9PT0gJ21haWx0bycgfHwgcGNvbCA9PT0gJ3VybicpIHtcbiAgICAgIC8vIFwiTm8gbG9vay11cCBvcGVyYXRpb24gb24gdGhlc2UsIGJ1dCB0aGV5IGFyZSBub3QgZXJyb3JzP1wiXG4gICAgICBjb25zb2xlLmxvZygnVW5zdXBwb3J0ZWQgcHJvdG9jb2wgaW46ICcgKyBkb2N1cmkpO1xuICAgICAgcmV0dXJuIHVzZXJDYWxsYmFjayhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHByb3RvY29sJywgeyAnc3RhdHVzJzogOTAwIH0pIHx8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIGRvY3Rlcm0gPSBrYi5zeW0oZG9jdXJpKTtcblxuICAgIHZhciBzdGEgPSB0aGlzLmdldFN0YXRlKGRvY3VyaSk7XG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgaWYgKHN0YSA9PT0gJ2ZldGNoZWQnKSB7XG4gICAgICAgIHJldHVybiB1c2VyQ2FsbGJhY2sgPyB1c2VyQ2FsbGJhY2sodHJ1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoc3RhID09PSAnZmFpbGVkJykge1xuICAgICAgICByZXR1cm4gdXNlckNhbGxiYWNrID8gdXNlckNhbGxiYWNrKGZhbHNlLCAnUHJldmlvdXNseSBmYWlsZWQuICcgKyB0aGlzLnJlcXVlc3RlZFtkb2N1cmldLCB7ICdzdGF0dXMnOiB0aGlzLnJlcXVlc3RlZFtkb2N1cmldIH0pIDogdW5kZWZpbmVkOyAvLyBBbiB4aHIgc3RhbmRpblxuICAgICAgfVxuICAgICAgLy8gaWYgKHN0YSA9PT0gJ3JlcXVlc3RlZCcpIHJldHVybiB1c2VyQ2FsbGJhY2s/IHVzZXJDYWxsYmFjayhmYWxzZSwgXCJTb3JyeSBhbHJlYWR5IHJlcXVlc3RlZCAtIHBlbmRpbmcgYWxyZWFkeS5cIiwgeydzdGF0dXMnOiA5OTkgfSkgOiB1bmRlZmluZWRcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMubm9uZXhpc3RhbnRbZG9jdXJpXTtcbiAgICB9XG4gICAgLy8gQEAgU2hvdWxkIGFsbG93IGNvbmN1cnJlbnQgcmVxdWVzdHNcblxuICAgIC8vIElmIGl0IGlzICdmYWlsZWQnLCB0aGVuIHNob3Vsa2Qgd2UgdHJ5IGFnYWluPyAgSSB0aGluayBzbyBzbyBhbiBvbGQgZXJyb3IgZG9lbnMndCBnZXQgc3R1Y2tcbiAgICAvLyBpZiAoc3RhID09PSAndW5yZXF1ZXN0ZWQnKVxuXG4gICAgdGhpcy5maXJlQ2FsbGJhY2tzKCdyZXF1ZXN0JywgYXJncyk7IC8vIEtlbm55OiBmaXJlICdyZXF1ZXN0JyBjYWxsYmFja3MgaGVyZVxuICAgIC8vIGR1bXAoIFwid2ViLmpzOiBSZXF1ZXN0aW5nIHVyaTogXCIgKyBkb2N1cmkgKyBcIlxcblwiIClcblxuICAgIGlmICh1c2VyQ2FsbGJhY2spIHtcbiAgICAgIGlmICghdGhpcy5mZXRjaENhbGxiYWNrc1tkb2N1cmldKSB7XG4gICAgICAgIHRoaXMuZmV0Y2hDYWxsYmFja3NbZG9jdXJpXSA9IFt1c2VyQ2FsbGJhY2tdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5mZXRjaENhbGxiYWNrc1tkb2N1cmldLnB1c2godXNlckNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0ZWRbZG9jdXJpXSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuOyAvLyBEb24ndCBhc2sgYWdhaW4gLSB3YWl0IGZvciBleGlzdGluZyBjYWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVxdWVzdGVkW2RvY3VyaV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5ub01ldGEgJiYgcnRlcm0gJiYgcnRlcm0udXJpKSB7XG4gICAgICBrYi5hZGQoZG9jdGVybS51cmksIG5zLmxpbmsoJ3JlcXVlc3RlZEJ5JyksIHJ0ZXJtLnVyaSwgdGhpcy5hcHBOb2RlKTtcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gVXRpbC5YTUxIVFRQRmFjdG9yeSgpO1xuICAgIHZhciByZXEgPSB4aHIucmVxID0ga2IuYm5vZGUoKTtcbiAgICB4aHIub3JpZ2luYWwgPSBrYi5zeW0oYmFzZVVSSSk7XG4gICAgLy8gY29uc29sZS5sb2coJ1hIUiBvcmlnaW5hbDogJyArIHhoci5vcmlnaW5hbClcbiAgICB4aHIub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgeGhyLnJlc291cmNlID0gZG9jdGVybTsgLy8gVGhpcyBtaWdodCBiZSBwcm94aWZpZWRcbiAgICB2YXIgc2YgPSB0aGlzO1xuXG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgdmFyIHRpbWVOb3cgPSAnWycgKyBub3cuZ2V0SG91cnMoKSArICc6JyArIG5vdy5nZXRNaW51dGVzKCkgKyAnOicgKyBub3cuZ2V0U2Vjb25kcygpICsgJ10gJztcbiAgICBpZiAoIW9wdGlvbnMubm9NZXRhKSB7XG4gICAgICBrYi5hZGQocmVxLCBucy5yZGZzKCdsYWJlbCcpLCBrYi5saXRlcmFsKHRpbWVOb3cgKyAnIFJlcXVlc3QgZm9yICcgKyBkb2N1cmkpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAga2IuYWRkKHJlcSwgbnMubGluaygncmVxdWVzdGVkVVJJJyksIGtiLmxpdGVyYWwoZG9jdXJpKSwgdGhpcy5hcHBOb2RlKTtcbiAgICAgIGtiLmFkZChyZXEsIG5zLmxpbmsoJ3N0YXR1cycpLCBrYi5jb2xsZWN0aW9uKCksIHRoaXMuYXBwTm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGNoZWNrQ3JlZGVudGlhbHNSZXRyeSA9IGZ1bmN0aW9uIGNoZWNrQ3JlZGVudGlhbHNSZXRyeSgpIHtcbiAgICAgIGlmICgheGhyLndpdGhDcmVkZW50aWFscykgcmV0dXJuIGZhbHNlOyAvLyBub3QgZGVhbHQgd2l0aFxuXG4gICAgICBpZiAoeGhyLnJldHJpZWRXaXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB4aHIucmV0cmllZFdpdGhDcmVkZW50aWFscyA9IHRydWU7IC8vIHByb3RlY3QgYWdhaW5zdCBjYWxsZWQgdHdpY2VcbiAgICAgIGNvbnNvbGUubG9nKCd3ZWI6IFJldHJ5aW5nIHdpdGggbm8gY3JlZGVudGlhbHMgZm9yICcgKyB4aHIucmVzb3VyY2UpO1xuICAgICAgeGhyLmFib3J0KCk7XG4gICAgICBkZWxldGUgc2YucmVxdWVzdGVkW2RvY3VyaV07IC8vIGZvcmdldCB0aGUgb3JpZ2luYWwgcmVxdWVzdCBoYXBwZW5lZFxuICAgICAgdmFyIG5ld29wdCA9IHt9O1xuICAgICAgZm9yICh2YXIgb3B0IGluIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gdHJhbnNmZXIgYmFzZVVSSSBldGNcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICAgIG5ld29wdFtvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXdvcHQud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICBzZi5hZGRTdGF0dXMoeGhyLnJlcSwgJ0Fib3J0OiBXaWxsIHJldHJ5IHdpdGggY3JlZGVudGlhbHMgU1VQUFJFU1NFRCB0byBzZWUgaWYgdGhhdCBoZWxwcycpO1xuICAgICAgc2YucmVxdWVzdFVSSShkb2N1cmksIHJ0ZXJtLCBuZXdvcHQsIHhoci51c2VyQ2FsbGJhY2spOyAvLyB1c2VyQ2FsbGJhY2sgYWxyZWFkeSByZWdpc3RlcmVkICh3aXRoIHdoZXJlPylcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgb25lcnJvckZhY3RvcnkgPSBmdW5jdGlvbiBvbmVycm9yRmFjdG9yeSh4aHIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgeGhyLm9uRXJyb3JXYXNDYWxsZWQgPSB0cnVlOyAvLyBkZWJ1Z2dpbmcgYW5kIG1heSBuZWVkIGl0XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gTWFzaHVwIHNpdHVhdGlvbiwgbm90IG5vZGUgZXRjXG4gICAgICAgICAgaWYgKEZldGNoZXIuY3Jvc3NTaXRlUHJveHlUZW1wbGF0ZSAmJiBkb2N1bWVudC5sb2NhdGlvbiAmJiAheGhyLnByb3h5VXNlZCkge1xuICAgICAgICAgICAgdmFyIGhvc3RwYXJ0ID0gVXJpLmhvc3RwYXJ0O1xuICAgICAgICAgICAgdmFyIGhlcmUgPSAnJyArIGRvY3VtZW50LmxvY2F0aW9uO1xuICAgICAgICAgICAgdmFyIHVyaSA9IHhoci5yZXNvdXJjZS51cmk7XG4gICAgICAgICAgICBpZiAoaG9zdHBhcnQoaGVyZSkgJiYgaG9zdHBhcnQodXJpKSAmJiBob3N0cGFydChoZXJlKSAhPT0gaG9zdHBhcnQodXJpKSkge1xuICAgICAgICAgICAgICAvLyBJZiBjcm9zcy1zaXRlXG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MDEgfHwgeGhyLnN0YXR1cyA9PT0gNDAzIHx8IHhoci5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgIG9ucmVhZHlzdGF0ZWNoYW5nZUZhY3RvcnkoeGhyKSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElUIElTIEEgUEFJTiBUSEFUIE5PIFBST1BFUiBFUlJPUiBSRVBPUlRJTkdcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tDcmVkZW50aWFsc1JldHJ5KHhocikpIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIGNyZWRlbnRpYWxzIGZsYWcgc2V0LCByZXRyeSB3aXRob3V0LFxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCB3YXNuJ3QsIG9yIHdlIGFscmVhZHkgdHJpZWQgdGhhdFxuICAgICAgICAgICAgICAgIHZhciBuZXdVUkkgPSBGZXRjaGVyLmNyb3NzU2l0ZVByb3h5KHVyaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3dlYjogRGlyZWN0IGZhaWxlZCBzbyB0cnlpbmcgcHJveHkgJyArIG5ld1VSSSk7XG4gICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdCTE9DS0VEIC0+IENyb3NzLXNpdGUgUHJveHkgdG8gPCcgKyBuZXdVUkkgKyAnPicpO1xuICAgICAgICAgICAgICAgIGlmICh4aHIuYWJvcnRlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtiID0gc2Yuc3RvcmU7XG4gICAgICAgICAgICAgICAgdmFyIG9sZHJlcSA9IHhoci5yZXE7XG4gICAgICAgICAgICAgICAgaWYgKCF4aHIub3B0aW9ucy5ub01ldGEpIHtcbiAgICAgICAgICAgICAgICAgIGtiLmFkZChvbGRyZXEsIG5zLmh0dHAoJ3JlZGlyZWN0ZWRUbycpLCBrYi5zeW0obmV3VVJJKSwgb2xkcmVxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgeGhyLmFib3J0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKG9sZHJlcSwgJ3JlZGlyZWN0ZWQgdG8gbmV3IHJlcXVlc3QnKTsgLy8gd2h5XG4gICAgICAgICAgICAgICAgLy8gdGhlIGNhbGxiYWNrIHRocm93cyBhbiBleGNlcHRpb24gd2hlbiBjYWxsZWQgZnJvbSB4aHIub25lcnJvciAoc28gcmVtb3ZlZClcbiAgICAgICAgICAgICAgICAvLyBzZi5maXJlQ2FsbGJhY2tzKCdkb25lJywgYXJncykgLy8gQXJlIHRoZXNlIGFyZ3MgcmlnaHQ/IEBAQCAgIE5vdCBkb25lIHlldCEgZG9uZSBtZWFucyBzdWNjZXNzXG4gICAgICAgICAgICAgICAgc2YucmVxdWVzdGVkW3hoci5yZXNvdXJjZS51cmldID0gJ3JlZGlyZWN0ZWQnO1xuICAgICAgICAgICAgICAgIHNmLnJlZGlyZWN0ZWRUb1t4aHIucmVzb3VyY2UudXJpXSA9IG5ld1VSSTtcblxuICAgICAgICAgICAgICAgIGlmIChzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldKSB7XG4gICAgICAgICAgICAgICAgICAgIHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0gPT09IHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0uY29uY2F0KHNmLmZldGNoQ2FsbGJhY2tzW3hoci5yZXNvdXJjZS51cmldKTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgeGhyMiA9IHNmLnJlcXVlc3RVUkkobmV3VVJJLCB4aHIucmVzb3VyY2UsIHhoci5vcHRpb25zLCB4aHIudXNlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoeGhyMikge1xuICAgICAgICAgICAgICAgICAgeGhyMi5wcm94eVVzZWQgPSB0cnVlOyAvLyBvbmx5IHRyeSB0aGUgcHJveHkgb25jZVxuICAgICAgICAgICAgICAgICAgeGhyMi5vcmlnaW5hbCA9IHhoci5vcmlnaW5hbDtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQcm94eWluZyBidXQgb3JpZ2luYWwgc3RpbGwgJyArIHhocjIub3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoeGhyMiAmJiB4aHIyLnJlcSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCF4aHIub3B0aW9ucy5ub01ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAga2IuYWRkKHhoci5yZXEsIGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayNyZWRpcmVjdGVkUmVxdWVzdCcpLCB4aHIyLnJlcSwgc2YuYXBwTm9kZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4aHIuQ09SU19zdGF0dXMgPSA5OTk7XG4gICAgICAgICAgICAvLyB4aHIuc3RhdHVzID0gOTk5ICAgICBmb3JiaWRkZW4gLSByZWFkLW9ubHlcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gbWFzaHVcbiAgICAgIH07IC8vIGZ1bmN0aW9uIG9mIGV2ZW50XG4gICAgfTsgLy8gb25lcnJvckZhY3RvcnlcblxuICAgIC8vIFNldCB1cCBjYWxsYmFja3NcbiAgICB2YXIgb25yZWFkeXN0YXRlY2hhbmdlRmFjdG9yeSA9IGZ1bmN0aW9uIG9ucmVhZHlzdGF0ZWNoYW5nZUZhY3RvcnkoeGhyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZSgpIHtcbiAgICAgICAgICBpZiAoeGhyLmhhbmRsZVJlc3BvbnNlRG9uZSkgcmV0dXJuO1xuICAgICAgICAgIHhoci5oYW5kbGVSZXNwb25zZURvbmUgPSB0cnVlO1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICB2YXIgdGhpc1JlcSA9IHhoci5yZXE7IC8vIE1pZ2h0IGhhdmUgY2hhbmdlcyBieSByZWRpcmVjdFxuICAgICAgICAgIHNmLmZpcmVDYWxsYmFja3MoJ3JlY3YnLCBhcmdzKTtcbiAgICAgICAgICB2YXIga2IgPSBzZi5zdG9yZTtcbiAgICAgICAgICBzZi5zYXZlUmVzcG9uc2VNZXRhZGF0YSh4aHIsIGtiKTtcbiAgICAgICAgICBzZi5maXJlQ2FsbGJhY2tzKCdoZWFkZXJzJywgW3sgdXJpOiBkb2N1cmksIGhlYWRlcnM6IHhoci5oZWFkZXJzIH1dKTtcblxuICAgICAgICAgIC8vIENoZWNrIGZvciBtYXNrZWQgZXJyb3JzLlxuICAgICAgICAgIC8vIEZvciBcInNlY3VyaXR5IHJlYXNvbnNcIiB0aGVib3Jhc2VyIGhpZGVzIGVycm9ycyBzdWNoIGFzIENPUlMgZXJyb3JzIGZyb21cbiAgICAgICAgICAvLyB0aGUgY2FsbGluZyBjb2RlICgyMDE1KS4gb25lcm9yKCkgdXNlZCB0byBiZSBjYWxsZWQgYnV0IGlzIG5vdCBub3cuXG4gICAgICAgICAgLy9cbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ01hc2tlZCBlcnJvciAtIHN0YXR1cyAwIGZvciAnICsgeGhyLnJlc291cmNlLnVyaSk7XG4gICAgICAgICAgICBpZiAoY2hlY2tDcmVkZW50aWFsc1JldHJ5KHhocikpIHtcbiAgICAgICAgICAgICAgLy8gcmV0cnkgaXMgY291bGQgYmUgY3JlZGVudGlhbHMgZmxhZyBDT1JTIGlzc3VlXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhoci5DT1JTX3N0YXR1cyA9IDkwMDsgLy8gdW5rbm93biBtYXNrZWQgZXJyb3JcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgICAgICAvLyBGb3IgZXh0cmEgZGlnbm9zdGljcywga2VlcCB0aGUgcmVwbHlcbiAgICAgICAgICAgIC8vICBAQEAgNDAxIHNob3VsZCBjYXVzZSAgYSByZXRyeSB3aXRoIGNyZWRlbnRpYWwgc29uXG4gICAgICAgICAgICAvLyBAQEAgY2FjaGUgdGhlIGNyZWRlbnRpYWxzIGZsYWcgYnkgaG9zdCA/Pz8/XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgIGtiLmZldGNoZXIubm9uZXhpc3RhbnRbeGhyLnJlc291cmNlLnVyaV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQubGVuZ3RoID4gMTApIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlMiA9IGtiLmJub2RlKCk7XG4gICAgICAgICAgICAgIGtiLmFkZChyZXNwb25zZTIsIG5zLmh0dHAoJ2NvbnRlbnQnKSwga2IubGl0ZXJhbCh4aHIucmVzcG9uc2VUZXh0KSwgcmVzcG9uc2UyKTtcbiAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXNUZXh0KSB7XG4gICAgICAgICAgICAgICAga2IuYWRkKHJlc3BvbnNlMiwgbnMuaHR0cCgnc3RhdHVzVGV4dCcpLCBrYi5saXRlcmFsKHhoci5zdGF0dXNUZXh0KSwgcmVzcG9uc2UyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBkdW1wKFwiSFRUUCA+PSA0MDAgcmVzcG9uc2VUZXh0OlxcblwiK3hoci5yZXNwb25zZVRleHQrXCJcXG5cIik7IC8vIEBAQEBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNmLmZhaWxGZXRjaCh4aHIsICdIVFRQIGVycm9yIGZvciAnICsgeGhyLnJlc291cmNlICsgJzogJyArIHhoci5zdGF0dXMgKyAnICcgKyB4aHIuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxvYyA9IHhoci5oZWFkZXJzWydjb250ZW50LWxvY2F0aW9uJ107XG5cbiAgICAgICAgICAvLyBkZWR1Y2Ugc29tZSB0aGluZ3MgZnJvbSB0aGUgSFRUUCB0cmFuc2FjdGlvblxuICAgICAgICAgIHZhciBhZGRUeXBlID0gZnVuY3Rpb24gYWRkVHlwZShjbGEpIHtcbiAgICAgICAgICAgIC8vIGFkZCB0eXBlIHRvIGFsbCByZWRpcmVjdGVkIHJlc291cmNlcyB0b29cbiAgICAgICAgICAgIHZhciBwcmV2ID0gdGhpc1JlcTtcbiAgICAgICAgICAgIGlmIChsb2MpIHtcbiAgICAgICAgICAgICAgdmFyIGRvY1VSSSA9IGtiLmFueShwcmV2LCBucy5saW5rKCdyZXF1ZXN0ZWRVUkknKSk7XG4gICAgICAgICAgICAgIGlmIChkb2NVUkkgIT09IGxvYykge1xuICAgICAgICAgICAgICAgIGtiLmFkZChrYi5zeW0obG9jKSwgbnMucmRmKCd0eXBlJyksIGNsYSwgc2YuYXBwTm9kZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgdmFyIGRvYyA9IGtiLmFueShwcmV2LCBucy5saW5rKCdyZXF1ZXN0ZWRVUkknKSk7XG4gICAgICAgICAgICAgIGlmIChkb2MgJiYgZG9jLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAga2IuYWRkKGtiLnN5bShkb2MudmFsdWUpLCBucy5yZGYoJ3R5cGUnKSwgY2xhLCBzZi5hcHBOb2RlKTtcbiAgICAgICAgICAgICAgfSAvLyBjb252ZXJ0IExpdGVyYWxcbiAgICAgICAgICAgICAgcHJldiA9IGtiLmFueSh1bmRlZmluZWQsIGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayNyZWRpcmVjdGVkUmVxdWVzdCcpLCBwcmV2KTtcbiAgICAgICAgICAgICAgaWYgKCFwcmV2KSBicmVhaztcbiAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0ga2IuYW55KHByZXYsIGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayNyZXNwb25zZScpKTtcbiAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkgYnJlYWs7XG4gICAgICAgICAgICAgIHZhciByZWRpcmVjdGlvbiA9IGtiLmFueShyZXNwb25zZSwga2Iuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9odHRwI3N0YXR1cycpKTtcbiAgICAgICAgICAgICAgaWYgKCFyZWRpcmVjdGlvbikgYnJlYWs7XG4gICAgICAgICAgICAgIGlmIChyZWRpcmVjdGlvbiAhPT0gJzMwMScgJiYgcmVkaXJlY3Rpb24gIT09ICczMDInKSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBtaW5pbWFsIHNldCB0byBhbGxvdyB0aGUgdXNlIG9mIGRhbWFnZWQgc2VydmVycyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICB2YXIgZXh0ZW5zaW9uVG9Db250ZW50VHlwZSA9IHtcbiAgICAgICAgICAgICdyZGYnOiAnYXBwbGljYXRpb24vcmRmK3htbCcsICdvd2wnOiAnYXBwbGljYXRpb24vcmRmK3htbCcsXG4gICAgICAgICAgICAnbjMnOiAndGV4dC9uMycsICd0dGwnOiAndGV4dC90dXJ0bGUnLCAnbnQnOiAndGV4dC9uMycsICdhY2wnOiAndGV4dC9uMycsXG4gICAgICAgICAgICAnaHRtbCc6ICd0ZXh0L2h0bWwnLFxuICAgICAgICAgICAgJ3htbCc6ICd0ZXh0L3htbCdcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBndWVzcztcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBhZGRUeXBlKG5zLmxpbmsoJ0RvY3VtZW50JykpO1xuICAgICAgICAgICAgdmFyIGN0ID0geGhyLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VDb250ZW50VHlwZSkge1xuICAgICAgICAgICAgICB4aHIuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSBvcHRpb25zLmZvcmNlQ29udGVudFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWN0IHx8IGN0LmluZGV4T2YoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpID49IDApIHtcbiAgICAgICAgICAgICAgZ3Vlc3MgPSBleHRlbnNpb25Ub0NvbnRlbnRUeXBlW3hoci5yZXNvdXJjZS51cmkuc3BsaXQoJy4nKS5wb3AoKV07XG4gICAgICAgICAgICAgIGlmIChndWVzcykge1xuICAgICAgICAgICAgICAgIHhoci5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IGd1ZXNzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3QpIHtcbiAgICAgICAgICAgICAgaWYgKGN0LmluZGV4T2YoJ2ltYWdlLycpID09PSAwIHx8IGN0LmluZGV4T2YoJ2FwcGxpY2F0aW9uL3BkZicpID09PSAwKSBhZGRUeXBlKGtiLnN5bSgnaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL0ltYWdlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xlYXJQcmV2aW91c0RhdGEpIHtcbiAgICAgICAgICAgICAgLy8gQmVmb3JlIHdlIHBhcnNlIG5ldyBkYXRhIGNsZWFyIG9sZCBidXQgb25seSBvbiAyMDBcbiAgICAgICAgICAgICAga2IucmVtb3ZlRG9jdW1lbnQoeGhyLnJlc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtOyBjaGFyc2V0PXV0Zi04XG5cbiAgICAgICAgICBpZiAoVXJpLnByb3RvY29sKHhoci5yZXNvdXJjZS51cmkpID09PSAnZmlsZScgfHwgVXJpLnByb3RvY29sKHhoci5yZXNvdXJjZS51cmkpID09PSAnY2hyb21lJykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VDb250ZW50VHlwZSkge1xuICAgICAgICAgICAgICB4aHIuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSBvcHRpb25zLmZvcmNlQ29udGVudFR5cGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBndWVzcyA9IGV4dGVuc2lvblRvQ29udGVudFR5cGVbeGhyLnJlc291cmNlLnVyaS5zcGxpdCgnLicpLnBvcCgpXTtcbiAgICAgICAgICAgICAgaWYgKGd1ZXNzKSB7XG4gICAgICAgICAgICAgICAgeGhyLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gZ3Vlc3M7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeGhyLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ3RleHQveG1sJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgYWxyZWFkIGdvdCB0aGUgdGhpbmcgYXQgdGhpcyBsb2NhdGlvbiwgYWJvcnRcbiAgICAgICAgICBpZiAobG9jKSB7XG4gICAgICAgICAgICB2YXIgdWRvYyA9IFVyaS5qb2luKHhoci5yZXNvdXJjZS51cmksIGxvYyk7XG4gICAgICAgICAgICBpZiAoIWZvcmNlICYmIHVkb2MgIT09IHhoci5yZXNvdXJjZS51cmkgJiYgc2YucmVxdWVzdGVkW3Vkb2NdICYmIHNmLnJlcXVlc3RlZFt1ZG9jXSA9PT0gJ2RvbmUnKSB7XG4gICAgICAgICAgICAgIC8vIHdlIGhhdmUgYWxyZWFkeSBmZXRjaGVkIHRoaXMgaW4gZmFjdC5cbiAgICAgICAgICAgICAgLy8gc2hvdWxkIHdlIHNtdXNoIHRvbz9cbiAgICAgICAgICAgICAgLy8gbG9nLmluZm8oXCJIVFRQIGhlYWRlcnMgaW5kaWNhdGUgd2UgaGF2ZSBhbHJlYWR5XCIgKyBcIiByZXRyaWV2ZWQgXCIgKyB4aHIucmVzb3VyY2UgKyBcIiBhcyBcIiArIHVkb2MgKyBcIi4gQWJvcnRpbmcuXCIpXG4gICAgICAgICAgICAgIHNmLmRvbmVGZXRjaCh4aHIpO1xuICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2YucmVxdWVzdGVkW3Vkb2NdID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNmLmhhbmRsZXJzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICBpZiAoeGhyLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddICYmIHhoci5oZWFkZXJzWydjb250ZW50LXR5cGUnXS5tYXRjaChzZi5oYW5kbGVyc1t4XS5wYXR0ZXJuKSkge1xuICAgICAgICAgICAgICBoYW5kbGVyID0gbmV3IHNmLmhhbmRsZXJzW3hdKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNmLnBhcnNlTGlua0hlYWRlcih4aHIsIHRoaXNSZXEpO1xuXG4gICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIuaGFuZGxlckZhY3RvcnkoeGhyKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgLy8gVHJ5IHRvIGF2b2lkIHNpbGVudCBlcnJvcnNcbiAgICAgICAgICAgICAgc2YuZmFpbEZldGNoKHhociwgJ0V4Y2VwdGlvbiBoYW5kbGluZyBjb250ZW50LXR5cGUgJyArIHhoci5oZWFkZXJzWydjb250ZW50LXR5cGUnXSArICcgd2FzOiAnICsgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNmLmRvbmVGZXRjaCh4aHIpOyAvLyAgTm90IGEgcHJvYmxlbSwgd2UganVzdCBkb24ndCBleHRyYWN0IGRhdGEuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgLy8gc2YuZmFpbEZldGNoKHhociwgXCJVbmhhbmRsZWQgY29udGVudCB0eXBlOiBcIiArIHhoci5oZWFkZXJzWydjb250ZW50LXR5cGUnXStcbiAgICAgICAgICAgIC8vICAgICAgICBcIiwgcmVhZHlTdGF0ZSA9IFwiK3hoci5yZWFkeVN0YXRlKVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRE9ORTogNFxuICAgICAgICAvLyBIRUFERVJTX1JFQ0VJVkVEOiAyXG4gICAgICAgIC8vIExPQURJTkc6IDNcbiAgICAgICAgLy8gT1BFTkVEOiAxXG4gICAgICAgIC8vIFVOU0VOVDogMFxuXG4gICAgICAgIC8vIGxvZy5kZWJ1ZyhcIndlYi5qczogWEhSIFwiICsgeGhyLnJlc291cmNlLnVyaSArICcgcmVhZHlTdGF0ZT0nK3hoci5yZWFkeVN0YXRlKTsgLy8gQEBAQCBjb21tZW50IG1lIG91dFxuXG4gICAgICAgIHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICB2YXIgdXJpID0geGhyLnJlc291cmNlLnVyaTtcbiAgICAgICAgICAgIHZhciBuZXdVUkk7XG4gICAgICAgICAgICBpZiAodGhpcy5jcm9zc1NpdGVQcm94eVRlbXBsYXRlICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgLy8gSW4gbWFzaHVwIHNpdHVhdGlvblxuICAgICAgICAgICAgICB2YXIgaG9zdHBhcnQgPSBVcmkuaG9zdHBhcnQ7XG4gICAgICAgICAgICAgIHZhciBoZXJlID0gJycgKyBkb2N1bWVudC5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgaWYgKGhvc3RwYXJ0KGhlcmUpICYmIGhvc3RwYXJ0KHVyaSkgJiYgaG9zdHBhcnQoaGVyZSkgIT09IGhvc3RwYXJ0KHVyaSkpIHtcbiAgICAgICAgICAgICAgICBuZXdVUkkgPSB0aGlzLmNyb3NzU2l0ZVByb3h5VGVtcGxhdGUucmVwbGFjZSgne3VyaX0nLCBlbmNvZGVVUklDb21wb25lbnQodXJpKSk7XG4gICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdCTE9DS0VEIC0+IENyb3NzLXNpdGUgUHJveHkgdG8gPCcgKyBuZXdVUkkgKyAnPicpO1xuICAgICAgICAgICAgICAgIGlmICh4aHIuYWJvcnRlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtiID0gc2Yuc3RvcmU7XG4gICAgICAgICAgICAgICAgdmFyIG9sZHJlcSA9IHhoci5yZXE7XG4gICAgICAgICAgICAgICAga2IuYWRkKG9sZHJlcSwgbnMuaHR0cCgncmVkaXJlY3RlZFRvJyksIGtiLnN5bShuZXdVUkkpLCBvbGRyZXEpO1xuXG4gICAgICAgICAgICAgICAgLy8gLy8vLy8vLy8vLy8vIENoYW5nZSB0aGUgcmVxdWVzdCBub2RlIHRvIGEgbmV3IG9uZTogIEBAQEBAQEBAQEBAQCBEdXBsaWNhdGU/XG4gICAgICAgICAgICAgICAgdmFyIG5ld3JlcSA9IHhoci5yZXEgPSBrYi5ibm9kZSgpOyAvLyBNYWtlIE5FVyByZXFlc3QgZm9yIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgICAgIGtiLmFkZChvbGRyZXEsIG5zLmh0dHAoJ3JlZGlyZWN0ZWRSZXF1ZXN0JyksIG5ld3JlcSwgeGhyLnJlcSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgdGltZU5vdyA9ICdbJyArIG5vdy5nZXRIb3VycygpICsgJzonICsgbm93LmdldE1pbnV0ZXMoKSArICc6JyArIG5vdy5nZXRTZWNvbmRzKCkgKyAnXSAnO1xuICAgICAgICAgICAgICAgIGtiLmFkZChuZXdyZXEsIG5zLnJkZnMoJ2xhYmVsJyksIGtiLmxpdGVyYWwodGltZU5vdyArICcgUmVxdWVzdCBmb3IgJyArIG5ld1VSSSksIHRoaXMuYXBwTm9kZSk7XG4gICAgICAgICAgICAgICAga2IuYWRkKG5ld3JlcSwgbnMubGluaygnc3RhdHVzJyksIGtiLmNvbGxlY3Rpb24oKSwgdGhpcy5hcHBOb2RlKTtcbiAgICAgICAgICAgICAgICBrYi5hZGQobmV3cmVxLCBucy5saW5rKCdyZXF1ZXN0ZWRVUkknKSwga2IubGl0ZXJhbChuZXdVUkkpLCB0aGlzLmFwcE5vZGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0ga2IuYm5vZGUoKTtcbiAgICAgICAgICAgICAgICBrYi5hZGQob2xkcmVxLCBucy5saW5rKCdyZXNwb25zZScpLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgLy8ga2IuYWRkKHJlc3BvbnNlLCBucy5odHRwKCdzdGF0dXMnKSwga2IubGl0ZXJhbCh4aHIuc3RhdHVzKSwgcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgLy8gaWYgKHhoci5zdGF0dXNUZXh0KSBrYi5hZGQocmVzcG9uc2UsIG5zLmh0dHAoJ3N0YXR1c1RleHQnKSwga2IubGl0ZXJhbCh4aHIuc3RhdHVzVGV4dCksIHJlc3BvbnNlKVxuXG4gICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgeGhyLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHhoci5yZWRpcmVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHNmLmFkZFN0YXR1cyhvbGRyZXEsICdyZWRpcmVjdGVkIFhIUicpOyAvLyB3aHlcblxuICAgICAgICAgICAgICAgIGlmIChzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldKSB7XG4gICAgICAgICAgICAgICAgICAgIHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0gPT09IHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0uY29uY2F0KHNmLmZldGNoQ2FsbGJhY2tzW3hoci5yZXNvdXJjZS51cmldKTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZi5maXJlQ2FsbGJhY2tzKCdyZWRpcmVjdGVkJywgYXJncyk7IC8vIEFyZSB0aGVzZSBhcmdzIHJpZ2h0PyBAQEBcbiAgICAgICAgICAgICAgICBzZi5yZXF1ZXN0ZWRbeGhyLnJlc291cmNlLnVyaV0gPSAncmVkaXJlY3RlZCc7XG5cbiAgICAgICAgICAgICAgICB2YXIgeGhyMiA9IHNmLnJlcXVlc3RVUkkobmV3VVJJLCB4aHIucmVzb3VyY2UsIHhoci5vcHRpb25zIHx8IHt9LCB4aHIudXNlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoeGhyMiAmJiB4aHIyLnJlcSkge1xuICAgICAgICAgICAgICAgICAga2IuYWRkKHhoci5yZXEsIGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayNyZWRpcmVjdGVkUmVxdWVzdCcpLCB4aHIyLnJlcSwgc2YuYXBwTm9kZSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZi5mYWlsRmV0Y2goeGhyLCAnSFRUUCBCbG9ja2VkLiAoUmVhZHlTdGF0ZSAwKSBDcm9zcy1zaXRlIHZpb2xhdGlvbiBmb3IgPCcgKyBkb2N1cmkgKyAnPicpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBzdGF0ZSAtLSAzIG1heSBPUiBNQVkgTk9UIGJlIGNhbGxlZCwgc2Vsb24gYnJvd3Nlci5cbiAgICAgICAgICAgIC8vIGhhbmRsZVJlc3BvbnNlKCk7ICAgLy8gSW4gZ2VuZXJhbCBpdCB5b3UgY2FuJ3QgZG8gaXQgeWV0IGFzIHRoZSBoZWFkZXJzIGFyZSBpbiBidXQgbm90IHRoZSBkYXRhXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAvLyBGaW5hbCBzdGF0ZSBmb3IgdGhpcyBYSFIgYnV0IG1heSBiZSByZWRpcmVjdGVkXG4gICAgICAgICAgICBoYW5kbGVSZXNwb25zZSgpO1xuICAgICAgICAgICAgLy8gTm93IGhhbmRsZVxuICAgICAgICAgICAgaWYgKHhoci5oYW5kbGUgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIC8vIGNhbiBiZSB2YWxpZGx5IHplcm8gbGVuZ3RoXG4gICAgICAgICAgICAgIGlmIChzZi5yZXF1ZXN0ZWRbeGhyLnJlc291cmNlLnVyaV0gPT09ICdyZWRpcmVjdGVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNmLmZpcmVDYWxsYmFja3MoJ2xvYWQnLCBhcmdzKTtcbiAgICAgICAgICAgICAgeGhyLmhhbmRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2YuZG9uZUZldGNoKHhocik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHhoci5yZWRpcmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdBYm9ydGVkIGFuZCByZWRpcmVjdGVkIHRvIG5ldyByZXF1ZXN0LicpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnRmV0Y2ggb3Zlci4gTm8gZGF0YSBoYW5kbGVkLiBBYm9ydGVkID0gJyArIHhoci5hYm9ydGVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBzZi5mYWlsRmV0Y2goeGhyLCBcIkhUVFAgZmFpbGVkIHVudXN1YWxseS4gKG5vIGhhbmRsZXIgc2V0KSAoeC1zaXRlIHZpb2xhdGlvbj8gbm8gbmV0PykgZm9yIDxcIitcbiAgICAgICAgICAgICAgLy8gICAgZG9jdXJpK1wiPlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gc3dpdGNoXG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBNYXAgdGhlIFVSSSB0byBhIGxvY2FsaG9zdCBwcm94eSBpZiB3ZSBhcmUgcnVubmluZyBvbiBsb2NhbGhvc3RcbiAgICAvLyBUaGlzIGlzIHVzZWQgZm9yIHdvcmtpbmcgb2ZmbGluZSwgZS5nLiBvbiBwbGFuZXMuXG4gICAgLy8gSXMgdGhlIHNjcmlwdCBpc3RlbGYgaXMgcnVubmluZyBpbiBsb2NhbGhvc3QsIHRoZW4gYWNjZXNzIGFsbCBkYXRhIGluIGEgbG9jYWxob3N0IG1pcnJvci5cbiAgICAvLyBEbyBub3QgcmVtb3ZlIHdpdGhvdXQgY2hlY2tpbmcgd2l0aCBUaW1CTFxuICAgIHZhciB1cmkyID0gZG9jdXJpO1xuICAgIGlmICh0eXBlb2YgdGFidWxhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0YWJ1bGF0b3IucHJlZmVyZW5jZXMuZ2V0KCdvZmZsaW5lTW9kZVVzaW5nTG9jYWxob3N0JykpIHtcbiAgICAgIGlmICh1cmkyLnNsaWNlKDAsIDcpID09PSAnaHR0cDovLycgJiYgdXJpMi5zbGljZSg3LCAxNykgIT09ICdsb2NhbGhvc3QvJykge1xuICAgICAgICB1cmkyID0gJ2h0dHA6Ly9sb2NhbGhvc3QvJyArIHVyaTIuc2xpY2UoNyk7XG4gICAgICAgIGxvZy53YXJuKCdMb2NhbGhvc3Qga2x1ZGdlIGZvciBvZmZsaW5lIHVzZTogYWN0dWFsbHkgZ2V0dGluZyA8JyArIHVyaTIgKyAnPicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbG9nLndhcm4oXCJMb2NhbGhvc3Qga2x1ZGdlIE5PVCBVU0VEIDxcIiArIHVyaTIgKyBcIj5cIilcbiAgICAgIH1cbiAgICB9IGVsc2Uge31cbiAgICAgIC8vIGxvZy53YXJuKFwiTG9jYWxob3N0IGtsdWRnZSBPRkYgb2ZmbGluZSB1c2U6IGFjdHVhbGx5IGdldHRpbmcgPFwiICsgdXJpMiArIFwiPlwiKVxuXG4gICAgICAvLyAyMDE0IHByb2JlbG06XG4gICAgICAvLyBYTUxIdHRwUmVxdWVzdCBjYW5ub3QgbG9hZCBodHRwOi8vd3d3LnczLm9yZy9QZW9wbGUvQmVybmVycy1MZWUvY2FyZC5cbiAgICAgIC8vIEEgd2lsZGNhcmQgJyonIGNhbm5vdCBiZSB1c2VkIGluIHRoZSAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJyBoZWFkZXIgd2hlbiB0aGUgY3JlZGVudGlhbHMgZmxhZyBpcyB0cnVlLlxuICAgICAgLy8gQCBNYW55IG9udG9sb2d5IGZpbGVzIHVuZGVyIGh0dHA6IGFuZCBuZWVkIENPUlMgd2lsZGNhcmQgLT4gY2FuJ3QgaGF2ZSB3aXRoQ3JlZGVudGlhbHNcblxuICAgIHZhciB3aXRoQ3JlZGVudGlhbHMgPSB1cmkyLnNsaWNlKDAsIDYpID09PSAnaHR0cHM6JzsgLy8gQEAgS2x1ZGdlIC0tIG5lZWQgZm9yIHdlYmlkIHdoaWNoIHR5cGljYWxseSBpcyBzZXJ2ZWQgZnJvbSBodHRwc1xuICAgIGlmIChvcHRpb25zLndpdGhDcmVkZW50aWFscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscztcbiAgICB9XG4gICAgdmFyIGFjdHVhbFByb3h5VVJJID0gdGhpcy5wcm94eUlmTmVjZXNzYXJ5KHVyaTIpO1xuXG4gICAgLy8gU2V0dXAgdGhlIHJlcXVlc3RcbiAgICAvLyB2YXIgeGhyXG4gICAgLy8geGhyID0gVXRpbC5YTUxIVFRQRmFjdG9yeSgpXG4gICAgeGhyLm9uZXJyb3IgPSBvbmVycm9yRmFjdG9yeSh4aHIpO1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBvbnJlYWR5c3RhdGVjaGFuZ2VGYWN0b3J5KHhocik7XG4gICAgeGhyLnRpbWVvdXQgPSBzZi50aW1lb3V0O1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG4gICAgeGhyLmFjdHVhbFByb3h5VVJJID0gYWN0dWFsUHJveHlVUkk7XG5cbiAgICB4aHIucmVxID0gcmVxO1xuICAgIHhoci5vcHRpb25zID0gb3B0aW9ucztcbiAgICB4aHIub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgeGhyLnJlc291cmNlID0gZG9jdGVybTtcbiAgICB4aHIucmVxdWVzdGVkVVJJID0gdXJpMjtcblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZi5mYWlsRmV0Y2goeGhyLCAncmVxdWVzdFRpbWVvdXQnKTtcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICB4aHIub3BlbignR0VUJywgYWN0dWFsUHJveHlVUkksIHRoaXMuYXN5bmMpO1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWlsRmV0Y2goeGhyLCAnWEhSIG9wZW4gZm9yIEdFVCBmYWlsZWQgZm9yIDwnICsgdXJpMiArICc+OlxcblxcdCcgKyBlcik7XG4gICAgfVxuICAgIGlmIChmb3JjZSkge1xuICAgICAgLy8gbXVzdCBoYXBwZW4gYWZ0ZXIgb3BlblxuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NhY2hlLWNvbnRyb2wnLCAnbm8tY2FjaGUnKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgcmVkaXJlY3QgY2FsbGJhY2sgYW5kIHJlcXVlc3QgaGVhZGVycyAtLSBhbGFzIEZpcmVmb3ggRXh0ZW5zaW9uIE9ubHlcbiAgICBpZiAodHlwZW9mIHRhYnVsYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFidWxhdG9yLmlzRXh0ZW5zaW9uICYmIHhoci5jaGFubmVsICYmIChVcmkucHJvdG9jb2woeGhyLnJlc291cmNlLnVyaSkgPT09ICdodHRwJyB8fCBVcmkucHJvdG9jb2woeGhyLnJlc291cmNlLnVyaSkgPT09ICdodHRwcycpKSB7XG4gICAgICB0cnkge1xuICAgICAgICB4aHIuY2hhbm5lbC5ub3RpZmljYXRpb25DYWxsYmFja3MgPSB7XG4gICAgICAgICAgZ2V0SW50ZXJmYWNlOiBmdW5jdGlvbiBnZXRJbnRlcmZhY2UoaWlkKSB7XG4gICAgICAgICAgICBpZiAoaWlkLmVxdWFscyhDb21wb25lbnRzLmludGVyZmFjZXMubnNJQ2hhbm5lbEV2ZW50U2luaykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvbkNoYW5uZWxSZWRpcmVjdDogZnVuY3Rpb24gb25DaGFubmVsUmVkaXJlY3Qob2xkQywgbmV3QywgZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh4aHIuYWJvcnRlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgdmFyIGtiID0gc2Yuc3RvcmU7XG4gICAgICAgICAgICAgICAgICB2YXIgbmV3VVJJID0gbmV3Qy5VUkkuc3BlYztcbiAgICAgICAgICAgICAgICAgIHZhciBvbGRyZXEgPSB4aHIucmVxO1xuICAgICAgICAgICAgICAgICAgaWYgKCF4aHIub3B0aW9ucy5ub01ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKHhoci5yZXEsICdSZWRpcmVjdGVkOiAnICsgeGhyLnN0YXR1cyArICcgdG8gPCcgKyBuZXdVUkkgKyAnPicpO1xuICAgICAgICAgICAgICAgICAgICBrYi5hZGQob2xkcmVxLCBucy5odHRwKCdyZWRpcmVjdGVkVG8nKSwga2Iuc3ltKG5ld1VSSSksIHhoci5yZXEpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vLy8vLy8vLy8vLyBDaGFuZ2UgdGhlIHJlcXVlc3Qgbm9kZSB0byBhIG5ldyBvbmU6ICBAQEBAQEBAQEBAQEAgRHVwbGljYXRlIGNvZGU/XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdyZXEgPSB4aHIucmVxID0ga2IuYm5vZGUoKTsgLy8gTWFrZSBORVcgcmVxZXN0IGZvciBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga2IuYWRkKG9sZHJlcSwgbnMuaHR0cCgncmVkaXJlY3RlZFJlcXVlc3QnKSwgbmV3cmVxLCB0aGlzLmFwcE5vZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZU5vdyA9ICdbJyArIG5vdy5nZXRIb3VycygpICsgJzonICsgbm93LmdldE1pbnV0ZXMoKSArICc6JyArIG5vdy5nZXRTZWNvbmRzKCkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICBrYi5hZGQobmV3cmVxLCBucy5yZGZzKCdsYWJlbCcpLCBrYi5saXRlcmFsKHRpbWVOb3cgKyAnIFJlcXVlc3QgZm9yICcgKyBuZXdVUkkpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBrYi5hZGQobmV3cmVxLCBucy5saW5rKCdzdGF0dXMnKSwga2IuY29sbGVjdGlvbigpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBrYi5hZGQobmV3cmVxLCBucy5saW5rKCdyZXF1ZXN0ZWRVUkknKSwga2IubGl0ZXJhbChuZXdVUkkpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyAvLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gbG9nLmluZm8oJ0BAIHNvdXJjZXMgb25DaGFubmVsUmVkaXJlY3QnK1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgIFwiUmVkaXJlY3RlZDogXCIrXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgeGhyLnN0YXR1cyArIFwiIHRvIDxcIiArIG5ld1VSSSArIFwiPlwiKTsgLy9AQFxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBrYi5ibm9kZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBrYi5hZGQocmVzcG9uc2UsIG5zLmh0dHAoJ2xvY2F0aW9uJyksIG5ld1VSSSwgcmVzcG9uc2UpOyBOb3Qgb24gdGhpcyByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBrYi5hZGQob2xkcmVxLCBucy5saW5rKCdyZXNwb25zZScpLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGtiLmFkZChyZXNwb25zZSwgbnMuaHR0cCgnc3RhdHVzJyksIGtiLmxpdGVyYWwoeGhyLnN0YXR1cyksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXNUZXh0KSBrYi5hZGQocmVzcG9uc2UsIG5zLmh0dHAoJ3N0YXR1c1RleHQnKSwga2IubGl0ZXJhbCh4aHIuc3RhdHVzVGV4dCksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzIC0gMCAhPT0gMzAzKSBrYi5IVFRQUmVkaXJlY3RzW3hoci5yZXNvdXJjZS51cmldID0gbmV3VVJJOyAvLyBzYW1lIGRvY3VtZW50IGFzXG4gICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAtIDAgPT09IDMwMSAmJiBydGVybSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAzMDEgTW92ZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhZERvYyA9IFVyaS5kb2NwYXJ0KHJ0ZXJtLnVyaSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSAnV2FybmluZzogJyArIHhoci5yZXNvdXJjZSArICcgaGFzIG1vdmVkIHRvIDwnICsgbmV3VVJJICsgJz4uJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ0ZXJtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbXNnICs9ICcgTGluayBpbiA8JyArIGJhZERvYyArICcgPnNob3VsZCBiZSBjaGFuZ2VkJztcbiAgICAgICAgICAgICAgICAgICAgICBrYi5hZGQoYmFkRG9jLCBrYi5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjd2FybmluZycpLCBtc2csIHNmLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGR1bXAobXNnK1wiXFxuXCIpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIHhoci5hYm9ydGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHNmLmZldGNoQ2FsbGJhY2tzW3hoci5yZXNvdXJjZS51cmldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2YuZmV0Y2hDYWxsYmFja3NbbmV3VVJJXSkge1xuICAgICAgICAgICAgICAgICAgICAgIHNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldID09PSBzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldLmNvbmNhdChzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc2YuYWRkU3RhdHVzKG9sZHJlcSwgJ3JlZGlyZWN0ZWQnKTsgLy8gd2h5XG4gICAgICAgICAgICAgICAgICBzZi5maXJlQ2FsbGJhY2tzKCdyZWRpcmVjdGVkJywgYXJncyk7IC8vIEFyZSB0aGVzZSBhcmdzIHJpZ2h0PyBAQEBcbiAgICAgICAgICAgICAgICAgIHNmLnJlcXVlc3RlZFt4aHIucmVzb3VyY2UudXJpXSA9ICdyZWRpcmVjdGVkJztcbiAgICAgICAgICAgICAgICAgIHNmLnJlZGlyZWN0ZWRUb1t4aHIucmVzb3VyY2UudXJpXSA9IG5ld1VSSTtcblxuICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBuZXdVUkkuaW5kZXhPZignIycpO1xuICAgICAgICAgICAgICAgICAgaWYgKGhhc2ggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXhoci5vcHRpb25zLm5vTWV0YSkge1xuICAgICAgICAgICAgICAgICAgICAgIGtiLmFkZCh4aHIucmVzb3VyY2UsIGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvbGluayN3YXJuaW5nJyksICdXYXJuaW5nOiAnICsgeGhyLnJlc291cmNlICsgJyBIVFRQIHJlZGlyZWN0cyB0bycgKyBuZXdVUkkgKyAnIHdoaWNoIHNob3VsZCBub3QgY29udGFpbiBhIFwiI1wiIHNpZ24nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXdVUkkgPSBuZXdVUkkuc2xpY2UoMCwgaGFzaCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgeGhyMiA9IHNmLnJlcXVlc3RVUkkobmV3VVJJLCB4aHIucmVzb3VyY2UsIHhoci5vcHRpb25zLCB4aHIudXNlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgIGlmICh4aHIyICYmIHhocjIucmVxICYmICFvcHRpb25zLm5vTWV0YSkge1xuICAgICAgICAgICAgICAgICAgICBrYi5hZGQoeGhyLnJlcSwga2Iuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI3JlZGlyZWN0ZWRSZXF1ZXN0JyksIHhocjIucmVxLCBzZi5hcHBOb2RlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vIGVsc2UgZHVtcChcIk5vIHhoci5yZXEgYXZhaWxhYmxlIGZvciByZWRpcmVjdCBmcm9tIFwiK3hoci5yZXNvdXJjZStcIiB0byBcIituZXdVUkkrXCJcXG5cIilcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1hQQ09NX0ludGVyZmFjZV9SZWZlcmVuY2UvbnNJQ2hhbm5lbEV2ZW50U2lua1xuICAgICAgICAgICAgICAgIGFzeW5jT25DaGFubmVsUmVkaXJlY3Q6IGZ1bmN0aW9uIGFzeW5jT25DaGFubmVsUmVkaXJlY3Qob2xkQywgbmV3QywgZmxhZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeGhyLmFib3J0ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIHZhciBrYiA9IHNmLnN0b3JlO1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld1VSSSA9IG5ld0MuVVJJLnNwZWM7XG4gICAgICAgICAgICAgICAgICB2YXIgb2xkcmVxID0geGhyLnJlcTtcbiAgICAgICAgICAgICAgICAgIHNmLmFkZFN0YXR1cyh4aHIucmVxLCAnUmVkaXJlY3RlZDogJyArIHhoci5zdGF0dXMgKyAnIHRvIDwnICsgbmV3VVJJICsgJz4nKTtcbiAgICAgICAgICAgICAgICAgIGtiLmFkZChvbGRyZXEsIG5zLmh0dHAoJ3JlZGlyZWN0ZWRUbycpLCBrYi5zeW0obmV3VVJJKSwgeGhyLnJlcSk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIC8vLy8vLy8vLy8vLyBDaGFuZ2UgdGhlIHJlcXVlc3Qgbm9kZSB0byBhIG5ldyBvbmU6ICBAQEBAQEBAQEBAQEAgRHVwbGljYXRlP1xuICAgICAgICAgICAgICAgICAgdmFyIG5ld3JlcSA9IHhoci5yZXEgPSBrYi5ibm9kZSgpOyAvLyBNYWtlIE5FVyByZXFlc3QgZm9yIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgICAgICAgLy8geGhyLnJlc291cmNlID0gZG9jdGVybVxuICAgICAgICAgICAgICAgICAgLy8geGhyLnJlcXVlc3RlZFVSSSA9IGFyZ3NbMF1cblxuICAgICAgICAgICAgICAgICAgLy8ga2IuYWRkKGtiLnN5bShuZXdVUkkpLCBucy5saW5rKFwicmVxdWVzdFwiKSwgcmVxLCB0aGlzLmFwcE5vZGUpXG4gICAgICAgICAgICAgICAgICBrYi5hZGQob2xkcmVxLCBucy5odHRwKCdyZWRpcmVjdGVkUmVxdWVzdCcpLCBuZXdyZXEsIHhoci5yZXEpO1xuXG4gICAgICAgICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgIHZhciB0aW1lTm93ID0gJ1snICsgbm93LmdldEhvdXJzKCkgKyAnOicgKyBub3cuZ2V0TWludXRlcygpICsgJzonICsgbm93LmdldFNlY29uZHMoKSArICddICc7XG4gICAgICAgICAgICAgICAgICBrYi5hZGQobmV3cmVxLCBucy5yZGZzKCdsYWJlbCcpLCBrYi5saXRlcmFsKHRpbWVOb3cgKyAnIFJlcXVlc3QgZm9yICcgKyBuZXdVUkkpLCB0aGlzLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAga2IuYWRkKG5ld3JlcSwgbnMubGluaygnc3RhdHVzJyksIGtiLmNvbGxlY3Rpb24oKSwgdGhpcy5hcHBOb2RlKTtcbiAgICAgICAgICAgICAgICAgIGtiLmFkZChuZXdyZXEsIG5zLmxpbmsoJ3JlcXVlc3RlZFVSSScpLCBrYi5saXRlcmFsKG5ld1VSSSksIHRoaXMuYXBwTm9kZSk7XG4gICAgICAgICAgICAgICAgICAvLyAvLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgICAgICAgIC8vIC8vIGxvZy5pbmZvKCdAQCBzb3VyY2VzIG9uQ2hhbm5lbFJlZGlyZWN0JytcbiAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgXCJSZWRpcmVjdGVkOiBcIitcbiAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgeGhyLnN0YXR1cyArIFwiIHRvIDxcIiArIG5ld1VSSSArIFwiPlwiKTsgLy9AQFxuICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0ga2IuYm5vZGUoKTtcbiAgICAgICAgICAgICAgICAgIC8vIGtiLmFkZChyZXNwb25zZSwgbnMuaHR0cCgnbG9jYXRpb24nKSwgbmV3VVJJLCByZXNwb25zZSk7IE5vdCBvbiB0aGlzIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICBrYi5hZGQob2xkcmVxLCBucy5saW5rKCdyZXNwb25zZScpLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICBrYi5hZGQocmVzcG9uc2UsIG5zLmh0dHAoJ3N0YXR1cycpLCBrYi5saXRlcmFsKHhoci5zdGF0dXMpLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1c1RleHQpIGtiLmFkZChyZXNwb25zZSwgbnMuaHR0cCgnc3RhdHVzVGV4dCcpLCBrYi5saXRlcmFsKHhoci5zdGF0dXNUZXh0KSwgcmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAtIDAgIT09IDMwMykga2IuSFRUUFJlZGlyZWN0c1t4aHIucmVzb3VyY2UudXJpXSA9IG5ld1VSSTsgLy8gc2FtZSBkb2N1bWVudCBhc1xuICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgLSAwID09PSAzMDEgJiYgcnRlcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMzAxIE1vdmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBiYWREb2MgPSBVcmkuZG9jcGFydChydGVybS51cmkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gJ1dhcm5pbmc6ICcgKyB4aHIucmVzb3VyY2UgKyAnIGhhcyBtb3ZlZCB0byA8JyArIG5ld1VSSSArICc+Lic7XG4gICAgICAgICAgICAgICAgICAgIGlmIChydGVybSkge1xuICAgICAgICAgICAgICAgICAgICAgIG1zZyArPSAnIExpbmsgaW4gPCcgKyBiYWREb2MgKyAnID5zaG91bGQgYmUgY2hhbmdlZCc7XG4gICAgICAgICAgICAgICAgICAgICAga2IuYWRkKGJhZERvYywga2Iuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI3dhcm5pbmcnKSwgbXNnLCBzZi5hcHBOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBkdW1wKG1zZytcIlxcblwiKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB4aHIuYWJvcnRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gbmV3VVJJLmluZGV4T2YoJyMnKTtcbiAgICAgICAgICAgICAgICAgIGlmIChoYXNoID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZzIgPSAnV2FybmluZzogJyArIHhoci5yZXNvdXJjZSArICcgSFRUUCByZWRpcmVjdHMgdG8nICsgbmV3VVJJICsgJyB3aGljaCBkbyBub3Qgbm9ybWFsbHkgY29udGFpbiBhIFwiI1wiIHNpZ24nO1xuICAgICAgICAgICAgICAgICAgICAvLyBkdW1wKG1zZytcIlxcblwiKVxuICAgICAgICAgICAgICAgICAgICBrYi5hZGQoeGhyLnJlc291cmNlLCBrYi5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjd2FybmluZycpLCBtc2cyKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3VVJJID0gbmV3VVJJLnNsaWNlKDAsIGhhc2gpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgIGlmIChzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNmLmZldGNoQ2FsbGJhY2tzW25ld1VSSV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldID0gW11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZi5mZXRjaENhbGxiYWNrc1tuZXdVUkldID0gc2YuZmV0Y2hDYWxsYmFja3NbbmV3VVJJXS5jb25jYXQoc2YuZmV0Y2hDYWxsYmFja3NbeGhyLnJlc291cmNlLnVyaV0pXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZi5mZXRjaENhbGxiYWNrc1t4aHIucmVzb3VyY2UudXJpXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgIHNmLnJlcXVlc3RlZFt4aHIucmVzb3VyY2UudXJpXSA9ICdyZWRpcmVjdGVkJztcbiAgICAgICAgICAgICAgICAgIHNmLnJlZGlyZWN0ZWRUb1t4aHIucmVzb3VyY2UudXJpXSA9IG5ld1VSSTtcblxuICAgICAgICAgICAgICAgICAgdmFyIHhocjIgPSBzZi5yZXF1ZXN0VVJJKG5ld1VSSSwgeGhyLnJlc291cmNlLCB4aHIub3B0aW9ucywgeGhyLnVzZXJDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICBpZiAoeGhyMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXkgYmUgbm8gWEhSIGlzIG90aGVyIFVSSSBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgICAgICAgICB4aHIyLm9yaWdpbmFsID0geGhyLm9yaWdpbmFsOyAvLyB1c2UgdGhpcyBmb3IgZmluZGluZyBiYXNlXG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIyLnJlcSkge1xuICAgICAgICAgICAgICAgICAgICAgIGtiLmFkZCh4aHIucmVxLCBrYi5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjcmVkaXJlY3RlZFJlcXVlc3QnKSwgeGhyMi5yZXEsIHNmLmFwcE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBlbHNlIGR1bXAoXCJObyB4aHIucmVxIGF2YWlsYWJsZSBmb3IgcmVkaXJlY3QgZnJvbSBcIit4aHIucmVzb3VyY2UrXCIgdG8gXCIrbmV3VVJJK1wiXFxuXCIpXG4gICAgICAgICAgICAgICAgfSAvLyBhc3luY09uQ2hhbm5lbFJlZGlyZWN0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50cy5yZXN1bHRzLk5TX05PSU5URVJGQUNFO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gc2YuZmFpbEZldGNoKHhociwgXCJAQCBDb3VsZG4ndCBzZXQgY2FsbGJhY2sgZm9yIHJlZGlyZWN0czogXCIgKyBlcnIpO1xuICAgICAgfSAvLyB0cnlcbiAgICB9IC8vIGlmIEZpcmVmb3ggZXh0ZW5zaW9uXG5cbiAgICB0cnkge1xuICAgICAgdmFyIGFjY2VwdHN0cmluZyA9ICcnO1xuICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLm1lZGlhdHlwZXMpIHtcbiAgICAgICAgLy8gdmFyIGF0dHJzdHJpbmcgPSAnJ1xuICAgICAgICBpZiAoYWNjZXB0c3RyaW5nICE9PSAnJykge1xuICAgICAgICAgIGFjY2VwdHN0cmluZyArPSAnLCAnO1xuICAgICAgICB9XG4gICAgICAgIGFjY2VwdHN0cmluZyArPSB0eXBlO1xuICAgICAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMubWVkaWF0eXBlc1t0eXBlXSkge1xuICAgICAgICAgIGFjY2VwdHN0cmluZyArPSAnOycgKyBhdHRyICsgJz0nICsgdGhpcy5tZWRpYXR5cGVzW3R5cGVdW2F0dHJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgYWNjZXB0c3RyaW5nKTtcbiAgICAgIHRoaXMuYWRkU3RhdHVzKHhoci5yZXEsICdBY2NlcHQ6ICcgKyBhY2NlcHRzdHJpbmcpO1xuXG4gICAgICAvLyBpZiAocmVxdWVzdGVyKSB7IHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdSZWZlcmVyJyxyZXF1ZXN0ZXIpIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNldCBBY2NlcHQgaGVhZGVyOiBcIiArIGVycik7XG4gICAgfVxuXG4gICAgLy8gRmlyZVxuICAgIHRyeSB7XG4gICAgICB4aHIuc2VuZChudWxsKTtcbiAgICB9IGNhdGNoIChlcikge1xuICAgICAgcmV0dXJuIHRoaXMuZmFpbEZldGNoKHhociwgJ1hIUiBzZW5kIGZhaWxlZDonICsgZXIpO1xuICAgIH1cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNCAmJiBzZi5pc1BlbmRpbmcoeGhyLnJlc291cmNlLnVyaSkpIHtcbiAgICAgICAgc2YuZmFpbEZldGNoKHhociwgJ3JlcXVlc3RUaW1lb3V0Jyk7XG4gICAgICB9XG4gICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICB0aGlzLmFkZFN0YXR1cyh4aHIucmVxLCAnSFRUUCBSZXF1ZXN0IHNlbnQuJyk7XG4gICAgcmV0dXJuIHhocjtcbiAgfTsgLy8gdGhpcy5yZXF1ZXN0VVJJKClcblxuICB0aGlzLm9iamVjdFJlZnJlc2ggPSBmdW5jdGlvbiAodGVybSkge1xuICAgIHZhciB1cmlzID0ga2IudXJpcyh0ZXJtKTsgLy8gR2V0IGFsbCBVUklzXG4gICAgaWYgKHR5cGVvZiB1cmlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cmlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLnN0b3JlLnN5bShVcmkuZG9jcGFydCh1cmlzW2ldKSkpO1xuICAgICAgICAvLyB3aGF0IGFib3V0IHJ0ZXJtP1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBkZXByZWNhdGVkIC0tIHVzZSBJbmRleGVkRm9ybXVsYS5yZW1vdmVEb2N1bWVudChkb2MpXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKHRlcm0pIHtcbiAgICB0aGlzLnN0b3JlLnJlbW92ZU1hbnkodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGVybSk7XG4gICAgZGVsZXRlIHRoaXMucmVxdWVzdGVkW3Rlcm0udXJpXTsgLy8gU28gaXQgY2FuIGJlIGxvYWRlZCBhZ2FpblxuICB9O1xuXG4gIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICh0ZXJtLCB1c2VyQ2FsbGJhY2spIHtcbiAgICAvLyBzb3VyY2VzX3JlZnJlc2hcbiAgICB0aGlzLmZpcmVDYWxsYmFja3MoJ3JlZnJlc2gnLCBhcmd1bWVudHMpO1xuICAgIHRoaXMucmVxdWVzdFVSSSh0ZXJtLnVyaSwgdW5kZWZpbmVkLCB7IGZvcmNlOiB0cnVlLCBjbGVhclByZXZpb3VzRGF0YTogdHJ1ZSB9LCB1c2VyQ2FsbGJhY2spO1xuICB9O1xuXG4gIHRoaXMucmV0cmFjdCA9IGZ1bmN0aW9uICh0ZXJtKSB7XG4gICAgLy8gc291cmNlc19yZXRyYWN0XG4gICAgdGhpcy5zdG9yZS5yZW1vdmVNYW55KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRlcm0pO1xuICAgIGlmICh0ZXJtLnVyaSkge1xuICAgICAgZGVsZXRlIHRoaXMucmVxdWVzdGVkW1VyaS5kb2NwYXJ0KHRlcm0udXJpKV07XG4gICAgfVxuICAgIHRoaXMuZmlyZUNhbGxiYWNrcygncmV0cmFjdCcsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdGhpcy5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChkb2N1cmkpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucmVxdWVzdGVkW2RvY3VyaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gJ3VucmVxdWVzdGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVxdWVzdGVkW2RvY3VyaV0gPT09IHRydWUpIHtcbiAgICAgIHJldHVybiAncmVxdWVzdGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVxdWVzdGVkW2RvY3VyaV0gPT09ICdkb25lJykge1xuICAgICAgcmV0dXJuICdmZXRjaGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVxdWVzdGVkW2RvY3VyaV0gPT09ICdyZWRpcmVjdGVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUodGhpcy5yZWRpcmVjdGVkVG9bZG9jdXJpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFuIG5vbi0yMDAgSFRUUCBlcnJvciBzdGF0dXNcbiAgICAgIHJldHVybiAnZmFpbGVkJztcbiAgICB9XG4gIH07XG5cbiAgLy8gZG9pbmcgYW55U3RhdGVtZW50TWF0Y2hpbmcgaXMgd2FzdGluZyB0aW1lXG4gIHRoaXMuaXNQZW5kaW5nID0gZnVuY3Rpb24gKGRvY3VyaSkge1xuICAgIC8vIHNvdXJjZXNfcGVuZGluZ1xuICAgIC8vIGlmIGl0J3Mgbm90IHBlbmRpbmc6IGZhbHNlIC0+IGZsYWlsZWQgJ2RvbmUnIC0+IGRvbmUgJ3JlZGlyZWN0ZWQnIC0+IHJlZGlyZWN0ZWRcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0ZWRbZG9jdXJpXSA9PT0gdHJ1ZTtcbiAgfTtcbiAgLy8gdmFyIHVwZGF0ZXNWaWEgPSBuZXcgJHJkZi5VcGRhdGVzVmlhKHRoaXMpIC8vIFN1YnNjcmliZSB0byBoZWFkZXJzXG4gIC8vIEBAQEBAQEBAIFRoaXMgaXMgdHVybmVkIG9mZiBiZWNhdXNlIGl0IGNhdXNlcyBhIHdlYnNvY2tldCB0byBiZSBzZXQgdXAgZm9yIEFOWSBmZXRjaFxuICAvLyB3aGV0aGVyIHdlIHdhbnQgdG8gdHJhY2sgaXQgb3Qgbm90LiBpbmNsdWRpbmcgb250b2xvZ2llcyBsb2FlZCB0aG91Z2ggdGhlIFhTU3Byb3h5XG59OyAvLyBFbmQgb2YgZmV0Y2hlclxuXG5tb2R1bGUuZXhwb3J0cyA9IEZldGNoZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCbGFua05vZGUgPSByZXF1aXJlKCcuL2JsYW5rLW5vZGUnKTtcbnZhciBDbGFzc09yZGVyID0gcmVxdWlyZSgnLi9jbGFzcy1vcmRlcicpO1xudmFyIENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL2NvbGxlY3Rpb24nKTtcbnZhciBMaXRlcmFsID0gcmVxdWlyZSgnLi9saXRlcmFsJyk7XG52YXIgbG9nID0gcmVxdWlyZSgnLi9sb2cnKTtcbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG52YXIgU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vc2VyaWFsaXplJyk7XG52YXIgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9zdGF0ZW1lbnQnKTtcbnZhciBWYXJpYWJsZSA9IHJlcXVpcmUoJy4vdmFyaWFibGUnKTtcblxudmFyIEZvcm11bGEgPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKEZvcm11bGEsIF9Ob2RlKTtcblxuICBmdW5jdGlvbiBGb3JtdWxhKHN0YXRlbWVudHMsIGNvbnN0cmFpbnRzLCBpbml0QmluZGluZ3MsIG9wdGlvbmFsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm11bGEpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZvcm11bGEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb3JtdWxhKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy50ZXJtVHlwZSA9IEZvcm11bGEudGVybVR5cGU7XG4gICAgX3RoaXMuc3RhdGVtZW50cyA9IHN0YXRlbWVudHMgfHwgW107XG4gICAgX3RoaXMuY29uc3RyYWludHMgPSBjb25zdHJhaW50cyB8fCBbXTtcbiAgICBfdGhpcy5pbml0QmluZGluZ3MgPSBpbml0QmluZGluZ3MgfHwgW107XG4gICAgX3RoaXMub3B0aW9uYWwgPSBvcHRpb25hbCB8fCBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRm9ybXVsYSwgW3tcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQocywgcCwgbywgZykge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGVtZW50cy5wdXNoKG5ldyBTdGF0ZW1lbnQocywgcCwgbywgZykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FkZFN0YXRlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFN0YXRlbWVudChzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGVtZW50cy5wdXNoKHN0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdibm9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJub2RlKGlkKSB7XG4gICAgICByZXR1cm4gbmV3IEJsYW5rTm9kZShpZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSB0eXBlcyBpbiB0aGUgbGlzdCB3aGljaCBoYXZlIG5vICpzdG9yZWQqIHN1YnR5cGVzXG4gICAgICogVGhlc2UgYXJlIGEgc2V0IG9mIGNsYXNzZXMgd2hpY2ggcHJvdmlkZSBieSB0aGVtc2VsdmVzIGNvbXBsZXRlXG4gICAgICogaW5mb3JtYXRpb24gLS0gdGhlIG90aGVyIGNsYXNzZXMgYXJlIHJlZHVuZGFudCBmb3IgdGhvc2Ugd2hvXG4gICAgICoga25vdyB0aGUgY2xhc3MgREFHLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdib3R0b21UeXBlVVJJcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJvdHRvbVR5cGVVUklzKHR5cGVzKSB7XG4gICAgICB2YXIgYm90cztcbiAgICAgIHZhciBib3R0b207XG4gICAgICB2YXIgZWx0O1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgaztcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgcmVmO1xuICAgICAgdmFyIHN1YnM7XG4gICAgICB2YXIgdjtcbiAgICAgIGJvdHMgPSBbXTtcbiAgICAgIGZvciAoayBpbiB0eXBlcykge1xuICAgICAgICBpZiAoIXR5cGVzLmhhc093blByb3BlcnR5KGspKSBjb250aW51ZTtcbiAgICAgICAgdiA9IHR5cGVzW2tdO1xuICAgICAgICBzdWJzID0gdGhpcy5lYWNoKHZvaWQgMCwgdGhpcy5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSNzdWJDbGFzc09mJyksIHRoaXMuc3ltKGspKTtcbiAgICAgICAgYm90dG9tID0gdHJ1ZTtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGZvciAobGVuID0gc3Vicy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGVsdCA9IHN1YnNbaV07XG4gICAgICAgICAgcmVmID0gZWx0LnVyaTtcbiAgICAgICAgICBpZiAocmVmIGluIHR5cGVzKSB7XG4gICAgICAgICAgICAvLyB0aGUgc3ViY2xhc3MgaXMgb25lIHdlIGtub3dcbiAgICAgICAgICAgIGJvdHRvbSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChib3R0b20pIHtcbiAgICAgICAgICBib3RzW2tdID0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJvdHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29sbGVjdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbGxlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlYWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFjaChzLCBwLCBvLCBnKSB7XG4gICAgICB2YXIgZWx0LCBpLCBsLCBtLCBxO1xuICAgICAgdmFyIGxlbiwgbGVuMSwgbGVuMiwgbGVuMztcbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB2YXIgc3RzID0gdGhpcy5zdGF0ZW1lbnRzTWF0Y2hpbmcocywgcCwgbywgZywgZmFsc2UpO1xuICAgICAgaWYgKHMgPT0gbnVsbCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBlbHQgPSBzdHNbaV07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGVsdC5zdWJqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwID09IG51bGwpIHtcbiAgICAgICAgZm9yIChsID0gMCwgbGVuMSA9IHN0cy5sZW5ndGg7IGwgPCBsZW4xOyBsKyspIHtcbiAgICAgICAgICBlbHQgPSBzdHNbbF07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGVsdC5wcmVkaWNhdGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgICBmb3IgKG0gPSAwLCBsZW4yID0gc3RzLmxlbmd0aDsgbSA8IGxlbjI7IG0rKykge1xuICAgICAgICAgIGVsdCA9IHN0c1ttXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goZWx0Lm9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZyA9PSBudWxsKSB7XG4gICAgICAgIGZvciAocSA9IDAsIGxlbjMgPSBzdHMubGVuZ3RoOyBxIDwgbGVuMzsgcSsrKSB7XG4gICAgICAgICAgZWx0ID0gc3RzW3FdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChlbHQud2h5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXF1YWxzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmhhc2hTdHJpbmcoKSA9PT0gb3RoZXIuaGFzaFN0cmluZygpO1xuICAgIH1cbiAgICAvKlxuICAgIEZvciB0aGlzQ2xhc3Mgb3IgYW55IHN1YmNsYXNzLCBhbnl0aGluZyB3aGljaCBoYXMgaXQgaXMgaXRzIHR5cGVcbiAgICBvciBpcyB0aGUgb2JqZWN0IG9mIHNvbWV0aGluZyB3aGljaCBoYXMgdGhlIHR5cGUgYXMgaXRzIHJhbmdlLCBvciBzdWJqZWN0XG4gICAgb2Ygc29tZXRoaW5nIHdoaWNoIGhhcyB0aGUgdHlwZSBhcyBpdHMgZG9tYWluXG4gICAgV2UgZG9uJ3QgYm90aGVyIGRvaW5nIHN1YnByb3BlcnR5ICh5ZXQ/KWFzIGl0IGRvZXNuJ3Qgc2VlZW0gdG8gYmUgdXNlZCBtdWNoLlxuICAgIEdldCBhbGwgdGhlIENsYXNzZXMgb2Ygd2hpY2ggd2UgY2FuIFJERlMtaW5mZXIgdGhlIHN1YmplY3QgaXMgYSBtZW1iZXJcbiAgICBAcmV0dXJucyBhIGhhc2ggb2YgVVJJc1xuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGb3IgdGhpc0NsYXNzIG9yIGFueSBzdWJjbGFzcywgYW55dGhpbmcgd2hpY2ggaGFzIGl0IGlzIGl0cyB0eXBlXG4gICAgICogb3IgaXMgdGhlIG9iamVjdCBvZiBzb21ldGhpbmcgd2hpY2ggaGFzIHRoZSB0eXBlIGFzIGl0cyByYW5nZSwgb3Igc3ViamVjdFxuICAgICAqIG9mIHNvbWV0aGluZyB3aGljaCBoYXMgdGhlIHR5cGUgYXMgaXRzIGRvbWFpblxuICAgICAqIFdlIGRvbid0IGJvdGhlciBkb2luZyBzdWJwcm9wZXJ0eSAoeWV0PylhcyBpdCBkb2Vzbid0IHNlZWVtIHRvIGJlIHVzZWRcbiAgICAgKiBtdWNoLlxuICAgICAqIEdldCBhbGwgdGhlIENsYXNzZXMgb2Ygd2hpY2ggd2UgY2FuIFJERlMtaW5mZXIgdGhlIHN1YmplY3QgaXMgYSBtZW1iZXJcbiAgICAgKiBAcmV0dXJuIGEgaGFzaCBvZiBVUklzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRNZW1iZXJzTlQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kTWVtYmVyc05UKHRoaXNDbGFzcykge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbDtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgbGVuMTtcbiAgICAgIHZhciBsZW4yO1xuICAgICAgdmFyIGxlbjM7XG4gICAgICB2YXIgbGVuNDtcbiAgICAgIHZhciBtO1xuICAgICAgdmFyIG1lbWJlcnM7XG4gICAgICB2YXIgcHJlZDtcbiAgICAgIHZhciBxO1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHZhciByZWYxO1xuICAgICAgdmFyIHJlZjI7XG4gICAgICB2YXIgcmVmMztcbiAgICAgIHZhciByZWY0O1xuICAgICAgdmFyIHJlZjU7XG4gICAgICB2YXIgc2VlZHM7XG4gICAgICB2YXIgc3Q7XG4gICAgICB2YXIgdDtcbiAgICAgIHZhciB1O1xuICAgICAgc2VlZHMgPSB7fTtcbiAgICAgIHNlZWRzW3RoaXNDbGFzcy50b05UKCldID0gdHJ1ZTtcbiAgICAgIG1lbWJlcnMgPSB7fTtcbiAgICAgIHJlZiA9IHRoaXMudHJhbnNpdGl2ZUNsb3N1cmUoc2VlZHMsIHRoaXMuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjc3ViQ2xhc3NPZicpLCB0cnVlKTtcbiAgICAgIGZvciAodCBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFyZWYuaGFzT3duUHJvcGVydHkodCkpIGNvbnRpbnVlO1xuICAgICAgICByZWYxID0gdGhpcy5zdGF0ZW1lbnRzTWF0Y2hpbmcodm9pZCAwLCB0aGlzLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnKSwgdGhpcy5mcm9tTlQodCkpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgc3QgPSByZWYxW2ldO1xuICAgICAgICAgIG1lbWJlcnNbc3Quc3ViamVjdC50b05UKCldID0gc3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmVmMiA9IHRoaXMuZWFjaCh2b2lkIDAsIHRoaXMuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjZG9tYWluJyksIHRoaXMuZnJvbU5UKHQpKTtcbiAgICAgICAgZm9yIChsID0gMCwgbGVuMSA9IHJlZjIubGVuZ3RoOyBsIDwgbGVuMTsgbCsrKSB7XG4gICAgICAgICAgcHJlZCA9IHJlZjJbbF07XG4gICAgICAgICAgcmVmMyA9IHRoaXMuc3RhdGVtZW50c01hdGNoaW5nKHZvaWQgMCwgcHJlZCk7XG4gICAgICAgICAgZm9yIChtID0gMCwgbGVuMiA9IHJlZjMubGVuZ3RoOyBtIDwgbGVuMjsgbSsrKSB7XG4gICAgICAgICAgICBzdCA9IHJlZjNbbV07XG4gICAgICAgICAgICBtZW1iZXJzW3N0LnN1YmplY3QudG9OVCgpXSA9IHN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWY0ID0gdGhpcy5lYWNoKHZvaWQgMCwgdGhpcy5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSNyYW5nZScpLCB0aGlzLmZyb21OVCh0KSk7XG4gICAgICAgIGZvciAocSA9IDAsIGxlbjMgPSByZWY0Lmxlbmd0aDsgcSA8IGxlbjM7IHErKykge1xuICAgICAgICAgIHByZWQgPSByZWY0W3FdO1xuICAgICAgICAgIHJlZjUgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyh2b2lkIDAsIHByZWQpO1xuICAgICAgICAgIGZvciAodSA9IDAsIGxlbjQgPSByZWY1Lmxlbmd0aDsgdSA8IGxlbjQ7IHUrKykge1xuICAgICAgICAgICAgc3QgPSByZWY1W3VdO1xuICAgICAgICAgICAgbWVtYmVyc1tzdC5vYmplY3QudG9OVCgpXSA9IHN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbWJlcnM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmluZE1lbWJlclVSSXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kTWVtYmVyVVJJcyhzdWJqZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5OVHRvVVJJKHRoaXMuZmluZE1lbWJlcnNOVChzdWJqZWN0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIENsYXNzZXMgb2Ygd2hpY2ggd2UgY2FuIFJERlMtaW5mZXIgdGhlIHN1YmplY3QgaXMgYSBzdXBlcmNsYXNzXG4gICAgICogUmV0dXJucyBhIGhhc2ggdGFibGUgd2hlcmUga2V5IGlzIE5UIG9mIHR5cGUgYW5kIHZhbHVlIGlzIHN0YXRlbWVudCB3aHkgd2VcbiAgICAgKiB0aGluayBzby5cbiAgICAgKiBEb2VzIE5PVCByZXR1cm4gdGVybXMsIHJldHVybnMgVVJJIHN0cmluZ3MuXG4gICAgICogV2UgdXNlIE5UIHJlcHJlc2VudGF0aW9ucyBpbiB0aGlzIHZlcnNpb24gYmVjYXVzZSB0aGV5IGhhbmRsZSBibGFuayBub2Rlcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmluZFN1YkNsYXNzZXNOVCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRTdWJDbGFzc2VzTlQoc3ViamVjdCkge1xuICAgICAgdmFyIHR5cGVzID0ge307XG4gICAgICB0eXBlc1tzdWJqZWN0LnRvTlQoKV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGl2ZUNsb3N1cmUodHlwZXMsIHRoaXMuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjc3ViQ2xhc3NPZicpLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgQ2xhc3NlcyBvZiB3aGljaCB3ZSBjYW4gUkRGUy1pbmZlciB0aGUgc3ViamVjdCBpcyBhIHN1YmNsYXNzXG4gICAgICogUmV0dXJucyBhIGhhc2ggdGFibGUgd2hlcmUga2V5IGlzIE5UIG9mIHR5cGUgYW5kIHZhbHVlIGlzIHN0YXRlbWVudCB3aHkgd2VcbiAgICAgKiB0aGluayBzby5cbiAgICAgKiBEb2VzIE5PVCByZXR1cm4gdGVybXMsIHJldHVybnMgVVJJIHN0cmluZ3MuXG4gICAgICogV2UgdXNlIE5UIHJlcHJlc2VudGF0aW9ucyBpbiB0aGlzIHZlcnNpb24gYmVjYXVzZSB0aGV5IGhhbmRsZSBibGFuayBub2Rlcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmluZFN1cGVyQ2xhc3Nlc05UJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFN1cGVyQ2xhc3Nlc05UKHN1YmplY3QpIHtcbiAgICAgIHZhciB0eXBlcyA9IHt9O1xuICAgICAgdHlwZXNbc3ViamVjdC50b05UKCldID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpdmVDbG9zdXJlKHR5cGVzLCB0aGlzLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI3N1YkNsYXNzT2YnKSwgZmFsc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBDbGFzc2VzIG9mIHdoaWNoIHdlIGNhbiBSREZTLWluZmVyIHRoZSBzdWJqZWN0IGlzIGEgbWVtYmVyXG4gICAgICogdG9kbzogVGhpcyB3aWxsIGxvb3AgaXMgdGhlcmUgaXMgYSBjbGFzcyBzdWJjbGFzcyBsb29wIChTdWJsYXNzIGxvb3BzIGFyZVxuICAgICAqIG5vdCBpbGxlZ2FsKVxuICAgICAqIFJldHVybnMgYSBoYXNoIHRhYmxlIHdoZXJlIGtleSBpcyBOVCBvZiB0eXBlIGFuZCB2YWx1ZSBpcyBzdGF0ZW1lbnQgd2h5IHdlXG4gICAgICogdGhpbmsgc28uXG4gICAgICogRG9lcyBOT1QgcmV0dXJuIHRlcm1zLCByZXR1cm5zIFVSSSBzdHJpbmdzLlxuICAgICAqIFdlIHVzZSBOVCByZXByZXNlbnRhdGlvbnMgaW4gdGhpcyB2ZXJzaW9uIGJlY2F1c2UgdGhleSBoYW5kbGUgYmxhbmsgbm9kZXMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRUeXBlc05UJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFR5cGVzTlQoc3ViamVjdCkge1xuICAgICAgdmFyIGRvbWFpbjtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGw7XG4gICAgICB2YXIgbGVuO1xuICAgICAgdmFyIGxlbjE7XG4gICAgICB2YXIgbGVuMjtcbiAgICAgIHZhciBsZW4zO1xuICAgICAgdmFyIG07XG4gICAgICB2YXIgcTtcbiAgICAgIHZhciByYW5nZTtcbiAgICAgIHZhciByZGZ0eXBlO1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHZhciByZWYxO1xuICAgICAgdmFyIHJlZjI7XG4gICAgICB2YXIgcmVmMztcbiAgICAgIHZhciBzdDtcbiAgICAgIHZhciB0eXBlcztcbiAgICAgIHJkZnR5cGUgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnO1xuICAgICAgdHlwZXMgPSBbXTtcbiAgICAgIHJlZiA9IHRoaXMuc3RhdGVtZW50c01hdGNoaW5nKHN1YmplY3QsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdCA9IHJlZltpXTtcbiAgICAgICAgaWYgKHN0LnByZWRpY2F0ZS51cmkgPT09IHJkZnR5cGUpIHtcbiAgICAgICAgICB0eXBlc1tzdC5vYmplY3QudG9OVCgpXSA9IHN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZjEgPSB0aGlzLmVhY2goc3QucHJlZGljYXRlLCB0aGlzLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI2RvbWFpbicpKTtcbiAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGwgPCBsZW4xOyBsKyspIHtcbiAgICAgICAgICAgIHJhbmdlID0gcmVmMVtsXTtcbiAgICAgICAgICAgIHR5cGVzW3JhbmdlLnRvTlQoKV0gPSBzdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZjIgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyh2b2lkIDAsIHZvaWQgMCwgc3ViamVjdCk7XG4gICAgICBmb3IgKG0gPSAwLCBsZW4yID0gcmVmMi5sZW5ndGg7IG0gPCBsZW4yOyBtKyspIHtcbiAgICAgICAgc3QgPSByZWYyW21dO1xuICAgICAgICByZWYzID0gdGhpcy5lYWNoKHN0LnByZWRpY2F0ZSwgdGhpcy5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSNyYW5nZScpKTtcbiAgICAgICAgZm9yIChxID0gMCwgbGVuMyA9IHJlZjMubGVuZ3RoOyBxIDwgbGVuMzsgcSsrKSB7XG4gICAgICAgICAgZG9tYWluID0gcmVmM1txXTtcbiAgICAgICAgICB0eXBlc1tkb21haW4udG9OVCgpXSA9IHN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2l0aXZlQ2xvc3VyZSh0eXBlcywgdGhpcy5zeW0oJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSNzdWJDbGFzc09mJyksIGZhbHNlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmaW5kVHlwZVVSSXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kVHlwZVVSSXMoc3ViamVjdCkge1xuICAgICAgcmV0dXJuIHRoaXMuTlR0b1VSSSh0aGlzLmZpbmRUeXBlc05UKHN1YmplY3QpKTtcbiAgICB9XG4gICAgLy8gVHJhY2UgdGhlIHN0YXRlbWVudHMgd2hpY2ggY29ubmVjdCBkaXJlY3RseSwgb3IgdGhyb3VnaCBibm9kZXNcbiAgICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlbWVudHNcbiAgICAvLyBkb2MgcGFyYW0gbWF5IGJlIG51bGwgdG8gc2VhcmNoIGFsbCBkb2N1bWVudHMgaW4gc3RvcmVcblxuICB9LCB7XG4gICAga2V5OiAnY29ubmVjdGVkU3RhdGVtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3RlZFN0YXRlbWVudHMoc3ViamVjdCwgZG9jLCBleGNsdWRlUHJlZGljYXRlVVJJcykge1xuICAgICAgZXhjbHVkZVByZWRpY2F0ZVVSSXMgPSBleGNsdWRlUHJlZGljYXRlVVJJcyB8fCBbXTtcbiAgICAgIHZhciB0b2RvID0gW3N1YmplY3RdO1xuICAgICAgdmFyIGRvbmUgPSBbXTtcbiAgICAgIHZhciBkb25lQXJjcyA9IFtdO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGZvbGxvdyA9IGZ1bmN0aW9uIGZvbGxvdyh4KSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IGZ1bmN0aW9uIHF1ZXVlKHgpIHtcbiAgICAgICAgICBpZiAoeC50ZXJtVHlwZSA9PT0gJ0JsYW5rTm9kZScgJiYgIWRvbmVbeC52YWx1ZV0pIHtcbiAgICAgICAgICAgIGRvbmVbeC52YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgICAgdG9kby5wdXNoKHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0cyA9IHNlbGYuc3RhdGVtZW50c01hdGNoaW5nKG51bGwsIG51bGwsIHgsIGRvYykuY29uY2F0KHNlbGYuc3RhdGVtZW50c01hdGNoaW5nKHgsIG51bGwsIG51bGwsIGRvYykpO1xuICAgICAgICBzdHMgPSBzdHMuZmlsdGVyKGZ1bmN0aW9uIChzdCkge1xuICAgICAgICAgIGlmIChleGNsdWRlUHJlZGljYXRlVVJJc1tzdC5wcmVkaWNhdGUudXJpXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHZhciBoYXNoID0gc3QudG9OVCgpO1xuICAgICAgICAgIGlmIChkb25lQXJjc1toYXNoXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGRvbmVBcmNzW2hhc2hdID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzdCwgaSkge1xuICAgICAgICAgIHF1ZXVlKHN0LnN1YmplY3QpO1xuICAgICAgICAgIHF1ZXVlKHN0Lm9iamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHN0cyk7XG4gICAgICB9O1xuICAgICAgd2hpbGUgKHRvZG8ubGVuZ3RoKSB7XG4gICAgICAgIGZvbGxvdyh0b2RvLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coJycgKyByZXN1bHQubGVuZ3RoICsgJyBzdGF0ZW1lbnRzIGFib3V0ICcgKyBzdWJqZWN0KVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtdWxhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybXVsYSgpIHtcbiAgICAgIHJldHVybiBuZXcgRm9ybXVsYSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGFuIE5UcmlwbGVzIHN0cmluZyBmb3JtYXQgaW50byBhIE5vZGUuXG4gICAgICogVGhlIGJub2RlIGJpdCBzaG91bGQgbm90IGJlIHVzZWQgb24gcHJvZ3JhbS1leHRlcm5hbCB2YWx1ZXM7IGRlc2lnbmVkXG4gICAgICogZm9yIGludGVybmFsIHdvcmsgc3VjaCBhcyBzdG9yaW5nIGEgYm5vZGUgaWQgaW4gYW4gSFRNTCBhdHRyaWJ1dGUuXG4gICAgICogVGhpcyB3aWxsIG9ubHkgcGFyc2UgdGhlIHN0cmluZ3MgZ2VuZXJhdGVkIGJ5IHRoZSB2YWlvdXMgdG9OVCgpIG1ldGhvZHMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Zyb21OVCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21OVChzdHIpIHtcbiAgICAgIHZhciBkdCwgaywgbGFuZywgeDtcbiAgICAgIHN3aXRjaCAoc3RyWzBdKSB7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnN5bShzdHIuc2xpY2UoMSwgLTEpKTtcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgIGxhbmcgPSB2b2lkIDA7XG4gICAgICAgICAgZHQgPSB2b2lkIDA7XG4gICAgICAgICAgayA9IHN0ci5sYXN0SW5kZXhPZignXCInKTtcbiAgICAgICAgICBpZiAoayA8IHN0ci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAoc3RyW2sgKyAxXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICAgIGxhbmcgPSBzdHIuc2xpY2UoayArIDIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHIuc2xpY2UoayArIDEsIGsgKyAzKSA9PT0gJ15eJykge1xuICAgICAgICAgICAgICBkdCA9IHRoaXMuZnJvbU5UKHN0ci5zbGljZShrICsgMykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgY29udmVydCBzdHJpbmcgZnJvbSBOVDogXCIgKyBzdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMSwgayk7XG4gICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKTtcbiAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxcXG4vZywgJ1xcbicpO1xuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmxpdGVyYWwoc3RyLCBsYW5nLCBkdCk7XG4gICAgICAgIGNhc2UgJ18nOlxuICAgICAgICAgIHggPSBuZXcgQmxhbmtOb2RlKCk7XG4gICAgICAgICAgeC5pZCA9IHBhcnNlSW50KHN0ci5zbGljZSgzKSwgMTApO1xuICAgICAgICAgIEJsYW5rTm9kZS5uZXh0SWQtLTtcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBWYXJpYWJsZShzdHIuc2xpY2UoMSkpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgY29udmVydCBmcm9tIE5UOiBcIiArIHN0cik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaG9sZHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBob2xkcyhzLCBwLCBvLCBnKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICghcykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhvbGRzKHNbaV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocyBpbnN0YW5jZW9mIFN0YXRlbWVudCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhvbGRzKHMuc3ViamVjdCwgcy5wcmVkaWNhdGUsIHMub2JqZWN0LCBzLndoeSk7XG4gICAgICAgIH0gZWxzZSBpZiAocy5zdGF0ZW1lbnRzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaG9sZHMocy5zdGF0ZW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3QgPSB0aGlzLmFueVN0YXRlbWVudE1hdGNoaW5nKHMsIHAsIG8sIGcpO1xuICAgICAgcmV0dXJuIHN0ICE9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaG9sZHNTdGF0ZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBob2xkc1N0YXRlbWVudChzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuaG9sZHMoc3Quc3ViamVjdCwgc3QucHJlZGljYXRlLCBzdC5vYmplY3QsIHN0LndoeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGlzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3QodmFsdWVzKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGNvbGxlY3Rpb24uYXBwZW5kKHZhbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xpdGVyYWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXRlcmFsKHZhbCwgbGFuZywgZHQpIHtcbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbCgnJyArIHZhbCwgbGFuZywgZHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB0cmFuc2Zvcm0gYSBjb2xsZWN0aW9uIG9mIE5UcmlwbGUgVVJJcyBpbnRvIHRoZWlyIFVSSSBzdHJpbmdzXG4gICAgICogQHBhcmFtIHQgc29tZSBpdGVyYWJsZSBjb2xsZXRpb24gb2YgTlRyaXBsZSBVUkkgc3RyaW5nc1xuICAgICAqIEByZXR1cm4gYSBjb2xsZWN0aW9uIG9mIHRoZSBVUklzIGFzIHN0cmluZ3NcbiAgICAgKiB0b2RvOiBleHBsYWluIHdoeSBpdCBpcyBpbXBvcnRhbnQgdG8gZ28gdGhyb3VnaCBOVFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdOVHRvVVJJJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gTlR0b1VSSSh0KSB7XG4gICAgICB2YXIgaywgdjtcbiAgICAgIHZhciB1cmlzID0ge307XG4gICAgICBmb3IgKGsgaW4gdCkge1xuICAgICAgICBpZiAoIXQuaGFzT3duUHJvcGVydHkoaykpIGNvbnRpbnVlO1xuICAgICAgICB2ID0gdFtrXTtcbiAgICAgICAgaWYgKGtbMF0gPT09ICc8Jykge1xuICAgICAgICAgIHVyaXNbay5zbGljZSgxLCAtMSldID0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VyaWFsaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VyaWFsaXplKGJhc2UsIGNvbnRlbnRUeXBlLCBwcm92ZW5hbmNlKSB7XG4gICAgICB2YXIgZG9jdW1lbnRTdHJpbmc7XG4gICAgICB2YXIgc3RzO1xuICAgICAgdmFyIHN6O1xuICAgICAgc3ogPSBTZXJpYWxpemVyKHRoaXMpO1xuICAgICAgc3ouc3VnZ2VzdE5hbWVzcGFjZXModGhpcy5uYW1lc3BhY2VzKTtcbiAgICAgIHN6LnNldEJhc2UoYmFzZSk7XG4gICAgICBpZiAocHJvdmVuYW5jZSkge1xuICAgICAgICBzdHMgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyh2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBwcm92ZW5hbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cyA9IHRoaXMuc3RhdGVtZW50cztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY29udGVudFR5cGUgIT0gbnVsbCA/IGNvbnRlbnRUeXBlIDogJ3RleHQvbjMnKSB7XG4gICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL3JkZit4bWwnOlxuICAgICAgICAgIGRvY3VtZW50U3RyaW5nID0gc3ouc3RhdGVtZW50c1RvWE1MKHN0cyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RleHQvbjMnOlxuICAgICAgICBjYXNlICd0ZXh0L3R1cnRsZSc6XG4gICAgICAgICAgZG9jdW1lbnRTdHJpbmcgPSBzei5zdGF0ZW1lbnRzVG9OMyhzdHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2VyaWFsaXplOiBDb250ZW50LXR5cGUgJyArIGNvbnRlbnRUeXBlICsgJyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvY3VtZW50U3RyaW5nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N1YnN0aXR1dGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzdGl0dXRlKGJpbmRpbmdzKSB7XG4gICAgICB2YXIgc3RhdGVtZW50c0NvcHkgPSB0aGlzLnN0YXRlbWVudHMubWFwKGZ1bmN0aW9uIChlYSkge1xuICAgICAgICByZXR1cm4gZWEuc3Vic3RpdHV0ZShiaW5kaW5ncyk7XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdGb3JtdWxhIHN1YnMgc3RhdG1udHM6JyArIHN0YXRlbWVudHNDb3B5KTtcbiAgICAgIHZhciB5ID0gbmV3IEZvcm11bGEoKTtcbiAgICAgIHkuYWRkKHN0YXRlbWVudHNDb3B5KTtcbiAgICAgIGNvbnNvbGUubG9nKCdpbmRleGVkLWZvcm0gc3VicyBmb3JtdWxhOicgKyB5KTtcbiAgICAgIHJldHVybiB5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N5bScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bSh1cmksIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmZWF0dXJlIChrYi5zeW0gd2l0aCAyIGFyZ3MpIGlzIHJlbW92ZWQuIERvIG5vdCBhc3N1bWUgcHJlZml4IG1hcHBpbmdzLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUodXJpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0aGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aGUocywgcCwgbywgZykge1xuICAgICAgdmFyIHggPSB0aGlzLmFueShzLCBwLCBvLCBnKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHtcbiAgICAgICAgbG9nLmVycm9yKCdObyB2YWx1ZSBmb3VuZCBmb3IgdGhlKCkgeycgKyBzICsgJyAnICsgcCArICcgJyArIG8gKyAnfS4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSREZTIEluZmVyZW5jZVxuICAgICAqIFRoZXNlIGFyZSBoYW5kLXdyaXR0ZW4gaW1wbGVtZW50YXRpb25zIG9mIGEgYmFja3dhcmQtY2hhaW5pbmcgcmVhc29uZXJcbiAgICAgKiBvdmVyIHRoZSBSREZTIGF4aW9tcy5cbiAgICAgKiBAcGFyYW0gc2VlZHMge09iamVjdH0gYSBoYXNoIG9mIE5UcyBvZiBjbGFzc2VzIHRvIHN0YXJ0IHdpdGhcbiAgICAgKiBAcGFyYW0gcHJlZGljYXRlIFRoZSBwcm9wZXJ0eSB0byB0cmFjZSB0aG91Z2hcbiAgICAgKiBAcGFyYW0gaW52ZXJzZSB0cmFjZSBpbnZlcnNlIGRpcmVjdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2l0aXZlQ2xvc3VyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zaXRpdmVDbG9zdXJlKHNlZWRzLCBwcmVkaWNhdGUsIGludmVyc2UpIHtcbiAgICAgIHZhciBlbHQsIGksIGxlbiwgcywgc3VwcywgdDtcbiAgICAgIHZhciBhZ2VuZGEgPSB7fTtcbiAgICAgIE9iamVjdC5hc3NpZ24oYWdlbmRhLCBzZWVkcyk7IC8vIG1ha2UgYSBjb3B5XG4gICAgICB2YXIgZG9uZSA9IHt9OyAvLyBjbGFzc2VzIHdlIGhhdmUgbG9va2VkIHVwXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gYWdlbmRhKSB7XG4gICAgICAgICAgICBpZiAoIWFnZW5kYS5oYXNPd25Qcm9wZXJ0eShwKSkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0oKTtcbiAgICAgICAgaWYgKHQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBkb25lO1xuICAgICAgICB9XG4gICAgICAgIHN1cHMgPSBpbnZlcnNlID8gdGhpcy5lYWNoKHZvaWQgMCwgcHJlZGljYXRlLCB0aGlzLmZyb21OVCh0KSkgOiB0aGlzLmVhY2godGhpcy5mcm9tTlQodCksIHByZWRpY2F0ZSk7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN1cHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBlbHQgPSBzdXBzW2ldO1xuICAgICAgICAgIHMgPSBlbHQudG9OVCgpO1xuICAgICAgICAgIGlmIChzIGluIGRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocyBpbiBhZ2VuZGEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZ2VuZGFbc10gPSBhZ2VuZGFbdF07XG4gICAgICAgIH1cbiAgICAgICAgZG9uZVt0XSA9IGFnZW5kYVt0XTtcbiAgICAgICAgZGVsZXRlIGFnZW5kYVt0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHR5cGVzIGluIHRoZSBsaXN0IHdoaWNoIGhhdmUgbm8gKnN0b3JlZCogc3VwZXJ0eXBlc1xuICAgICAqIFdlIGV4Y2x1ZGUgdGhlIHVuaXZlcnNhbCBjbGFzcywgb3dsOlRoaW5ncyBhbmQgcmRmOlJlc291cmNlLCBhcyBpdCBpc1xuICAgICAqIGluZm9ybWF0aW9uLWZyZWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvcFR5cGVVUklzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9wVHlwZVVSSXModHlwZXMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgaztcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgbjtcbiAgICAgIHZhciByZWY7XG4gICAgICB2YXIgdG9wcztcbiAgICAgIHZhciB2O1xuICAgICAgdG9wcyA9IFtdO1xuICAgICAgZm9yIChrIGluIHR5cGVzKSB7XG4gICAgICAgIGlmICghdHlwZXMuaGFzT3duUHJvcGVydHkoaykpIGNvbnRpbnVlO1xuICAgICAgICB2ID0gdHlwZXNba107XG4gICAgICAgIG4gPSAwO1xuICAgICAgICByZWYgPSB0aGlzLmVhY2godGhpcy5zeW0oayksIHRoaXMuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjc3ViQ2xhc3NPZicpKTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaiA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoai51cmkgIT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjUmVzb3VyY2UnKSB7XG4gICAgICAgICAgICBuKys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgdG9wc1trXSA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0b3BzWydodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjUmVzb3VyY2UnXSkge1xuICAgICAgICBkZWxldGUgdG9wc1snaHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hI1Jlc291cmNlJ107XG4gICAgICB9XG4gICAgICBpZiAodG9wc1snaHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjVGhpbmcnXSkge1xuICAgICAgICBkZWxldGUgdG9wc1snaHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjVGhpbmcnXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b3BzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJ3snICsgdGhpcy5zdGF0ZW1lbnRzLmpvaW4oJ1xcbicpICsgJ30nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3doZXRoZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3aGV0aGVyKHMsIHAsIG8sIGcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyhzLCBwLCBvLCBnLCBmYWxzZSkubGVuZ3RoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb3JtdWxhO1xufShOb2RlKTtcblxuRm9ybXVsYS50ZXJtVHlwZSA9ICdHcmFwaCc7XG5cbkZvcm11bGEucHJvdG90eXBlLmNsYXNzT3JkZXIgPSBDbGFzc09yZGVyWydHcmFwaCddO1xuRm9ybXVsYS5wcm90b3R5cGUuaXNWYXIgPSAwO1xuXG5Gb3JtdWxhLnByb3RvdHlwZS5ucyA9IHJlcXVpcmUoJy4vbmFtZXNwYWNlJyk7XG5Gb3JtdWxhLnByb3RvdHlwZS52YXJpYWJsZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuZXcgVmFyaWFibGUobmFtZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm11bGE7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2luZGV4ZWRGb3JtdWxhID0gcmVxdWlyZSgnLi9pbmRleGVkLWZvcm11bGEnKTtcblxudmFyIF9pbmRleGVkRm9ybXVsYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleGVkRm9ybXVsYSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciAkcmRmID0ge1xuICBCbGFua05vZGU6IHJlcXVpcmUoJy4vYmxhbmstbm9kZScpLFxuICBDb2xsZWN0aW9uOiByZXF1aXJlKCcuL2NvbGxlY3Rpb24nKSxcbiAgY29udmVydDogcmVxdWlyZSgnLi9jb252ZXJ0JyksXG4gIERhdGFGYWN0b3J5OiByZXF1aXJlKCcuL2RhdGEtZmFjdG9yeScpLFxuICBFbXB0eTogcmVxdWlyZSgnLi9lbXB0eScpLFxuICBGZXRjaGVyOiByZXF1aXJlKCcuL2ZldGNoZXInKSxcbiAgRm9ybXVsYTogcmVxdWlyZSgnLi9mb3JtdWxhJyksXG4gIEluZGV4ZWRGb3JtdWxhOiBfaW5kZXhlZEZvcm11bGEyLmRlZmF1bHQsXG4gIGpzb25QYXJzZXI6IHJlcXVpcmUoJy4vanNvbnBhcnNlcicpLFxuICBMaXRlcmFsOiByZXF1aXJlKCcuL2xpdGVyYWwnKSxcbiAgbG9nOiByZXF1aXJlKCcuL2xvZycpLFxuICBOM1BhcnNlcjogcmVxdWlyZSgnLi9uM3BhcnNlcicpLFxuICBOYW1lZE5vZGU6IHJlcXVpcmUoJy4vbmFtZWQtbm9kZScpLFxuICBOYW1lc3BhY2U6IHJlcXVpcmUoJy4vbmFtZXNwYWNlJyksXG4gIE5vZGU6IHJlcXVpcmUoJy4vbm9kZScpLFxuICBwYXJzZTogcmVxdWlyZSgnLi9wYXJzZScpLFxuICBRdWVyeTogcmVxdWlyZSgnLi9xdWVyeScpLlF1ZXJ5LFxuICBxdWVyeVRvU1BBUlFMOiByZXF1aXJlKCcuL3F1ZXJ5LXRvLXNwYXJxbCcpLFxuICBSREZhUHJvY2Vzc29yOiByZXF1aXJlKCcuL3JkZmFwYXJzZXInKSxcbiAgUkRGUGFyc2VyOiByZXF1aXJlKCcuL3JkZnhtbHBhcnNlcicpLFxuICBzZXJpYWxpemU6IHJlcXVpcmUoJy4vc2VyaWFsaXplJyksXG4gIFNlcmlhbGl6ZXI6IHJlcXVpcmUoJy4vc2VyaWFsaXplcicpLFxuICBTUEFSUUxUb1F1ZXJ5OiByZXF1aXJlKCcuL3NwYXJxbC10by1xdWVyeScpLFxuICBzcGFycWxVcGRhdGVQYXJzZXI6IHJlcXVpcmUoJy4vcGF0Y2gtcGFyc2VyJyksXG4gIFN0YXRlbWVudDogcmVxdWlyZSgnLi9zdGF0ZW1lbnQnKSxcbiAgdGVybTogcmVxdWlyZSgnLi9ub2RlJykuZnJvbVZhbHVlLFxuICBVcGRhdGVNYW5hZ2VyOiByZXF1aXJlKCcuL3VwZGF0ZS1tYW5hZ2VyJyksXG4gIFVwZGF0ZXNTb2NrZXQ6IHJlcXVpcmUoJy4vdXBkYXRlcy12aWEnKS5VcGRhdGVzU29ja2V0LFxuICBVcGRhdGVzVmlhOiByZXF1aXJlKCcuL3VwZGF0ZXMtdmlhJykuVXBkYXRlc1ZpYSxcbiAgdXJpOiByZXF1aXJlKCcuL3VyaScpLFxuICBVdGlsOiByZXF1aXJlKCcuL3V0aWwnKSxcbiAgVmFyaWFibGU6IHJlcXVpcmUoJy4vdmFyaWFibGUnKVxufTtcblxuJHJkZi5OZXh0SWQgPSAkcmRmLkJsYW5rTm9kZS5uZXh0SWQ7XG5cbiRyZGYuZnJvbU5UID0gJHJkZi5Gb3JtdWxhLnByb3RvdHlwZS5mcm9tTlQ7XG4kcmRmLmZldGNoZXIgPSAkcmRmLkRhdGFGYWN0b3J5LmZldGNoZXI7XG4kcmRmLmdyYXBoID0gJHJkZi5EYXRhRmFjdG9yeS5ncmFwaDtcbiRyZGYubGl0ID0gJHJkZi5EYXRhRmFjdG9yeS5saXQ7XG4kcmRmLnN0ID0gJHJkZi5EYXRhRmFjdG9yeS5zdDtcbiRyZGYuc3ltID0gJHJkZi5EYXRhRmFjdG9yeS5uYW1lZE5vZGU7XG4kcmRmLnZhcmlhYmxlID0gJHJkZi5EYXRhRmFjdG9yeS52YXJpYWJsZTtcblxuLy8gUkRGSlMgRGF0YUZhY3RvcnkgaW50ZXJmYWNlXG4kcmRmLmJsYW5rTm9kZSA9ICRyZGYuRGF0YUZhY3RvcnkuYmxhbmtOb2RlO1xuJHJkZi5kZWZhdWx0R3JhcGggPSAkcmRmLkRhdGFGYWN0b3J5LmRlZmF1bHRHcmFwaDtcbiRyZGYubGl0ZXJhbCA9ICRyZGYuRGF0YUZhY3RvcnkubGl0ZXJhbDtcbiRyZGYubmFtZWROb2RlID0gJHJkZi5EYXRhRmFjdG9yeS5uYW1lZE5vZGU7XG4kcmRmLnF1YWQgPSAkcmRmLkRhdGFGYWN0b3J5LnF1YWQ7XG4kcmRmLnRyaXBsZSA9ICRyZGYuRGF0YUZhY3RvcnkudHJpcGxlO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRyZGY7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vICBJZGVudGl0eSBtYW5hZ2VtZW50IGFuZCBpbmRleGluZyBmb3IgUkRGXG4vL1xuLy8gVGhpcyBmaWxlIHByb3ZpZGVzICBJbmRleGVkRm9ybXVsYSBhIGZvcm11bGEgKHNldCBvZiB0cmlwbGVzKSB3aGljaFxuLy8gaW5kZXhlZCBieSBwcmVkaWNhdGUsIHN1YmplY3QgYW5kIG9iamVjdC5cbi8vXG4vLyBJdCBcInNtdXNoZXNcIiAgKG1lcmdlcyBpbnRvIGEgc2luZ2xlIG5vZGUpIHRoaW5ncyB3aGljaCBhcmUgaWRlbnRpY2FsXG4vLyBhY2NvcmRpbmcgdG8gb3dsOnNhbWVBcyBvciBhbiBvd2w6SW52ZXJzZUZ1bmN0aW9uYWxQcm9wZXJ0eVxuLy8gb3IgYW4gb3dsOkZ1bmN0aW9uYWxQcm9wZXJ0eVxuLy9cbi8vXG4vLyAgMjAwNS0xMCBXcml0dGVuIFRpbSBCZXJuZXJzLUxlZVxuLy8gIDIwMDcgICAgQ2hhbmdlZCBzbyBhcyBub3QgdG8gbXVuZ2Ugc3RhdGVtZW50cyBmcm9tIGRvY3VtZW50cyB3aGVuIHNtdXNoaW5nXG4vL1xuLy9cbi8qIGpzbDpvcHRpb24gZXhwbGljaXQgKi9cbnZhciBBcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL3V0aWwnKS5BcnJheUluZGV4T2Y7XG52YXIgRm9ybXVsYSA9IHJlcXVpcmUoJy4vZm9ybXVsYScpO1xuLy8gY29uc3QgbG9nID0gcmVxdWlyZSgnLi9sb2cnKVxudmFyIFJERkFycmF5UmVtb3ZlID0gcmVxdWlyZSgnLi91dGlsJykuUkRGQXJyYXlSZW1vdmU7XG52YXIgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9zdGF0ZW1lbnQnKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG52YXIgVmFyaWFibGUgPSByZXF1aXJlKCcuL3ZhcmlhYmxlJyk7XG5cbnZhciBvd2xfbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjJztcbi8vIHZhciBsaW5rX25zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjJ1xuXG4vLyBIYW5kbGUgRnVuY3Rpb25hbCBQcm9wZXJ0eVxuZnVuY3Rpb24gaGFuZGxlX0ZQKGZvcm11bGEsIHN1YmosIHByZWQsIG9iaikge1xuICB2YXIgbzEgPSBmb3JtdWxhLmFueShzdWJqLCBwcmVkLCB1bmRlZmluZWQpO1xuICBpZiAoIW8xKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBGaXJzdCB0aW1lIHdpdGggdGhpcyB2YWx1ZVxuICB9XG4gIC8vIGxvZy53YXJuKFwiRXF1YXRpbmcgXCIrbzEudXJpK1wiIGFuZCBcIitvYmoudXJpICsgXCIgYmVjYXVzZSBGUCBcIitwcmVkLnVyaSk7ICAvL0BAXG4gIGZvcm11bGEuZXF1YXRlKG8xLCBvYmopO1xuICByZXR1cm4gdHJ1ZTtcbn0gLy8gaGFuZGxlX0ZQXG5cbi8vIEhhbmRsZSBJbnZlcnNlIEZ1bmN0aW9uYWwgUHJvcGVydHlcbmZ1bmN0aW9uIGhhbmRsZV9JRlAoZm9ybXVsYSwgc3ViaiwgcHJlZCwgb2JqKSB7XG4gIHZhciBzMSA9IGZvcm11bGEuYW55KHVuZGVmaW5lZCwgcHJlZCwgb2JqKTtcbiAgaWYgKCFzMSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gRmlyc3QgdGltZSB3aXRoIHRoaXMgdmFsdWVcbiAgfVxuICAvLyBsb2cud2FybihcIkVxdWF0aW5nIFwiK3MxLnVyaStcIiBhbmQgXCIrc3Viai51cmkgKyBcIiBiZWNhdXNlIElGUCBcIitwcmVkLnVyaSk7ICAvL0BAXG4gIGZvcm11bGEuZXF1YXRlKHMxLCBzdWJqKTtcbiAgcmV0dXJuIHRydWU7XG59IC8vIGhhbmRsZV9JRlBcblxuZnVuY3Rpb24gaGFuZGxlUkRGVHlwZShmb3JtdWxhLCBzdWJqLCBwcmVkLCBvYmosIHdoeSkge1xuICBpZiAoZm9ybXVsYS50eXBlQ2FsbGJhY2spIHtcbiAgICBmb3JtdWxhLnR5cGVDYWxsYmFjayhmb3JtdWxhLCBvYmosIHdoeSk7XG4gIH1cblxuICB2YXIgeCA9IGZvcm11bGEuY2xhc3NBY3Rpb25zW29iai5oYXNoU3RyaW5nKCldO1xuICB2YXIgZG9uZSA9IGZhbHNlO1xuICBpZiAoeCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgZG9uZSA9IGRvbmUgfHwgeFtpXShmb3JtdWxhLCBzdWJqLCBwcmVkLCBvYmosIHdoeSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkb25lOyAvLyBzdGF0ZW1lbnQgZ2l2ZW4gaXMgbm90IG5lZWRlZCBpZiB0cnVlXG59XG5cbnZhciBJbmRleGVkRm9ybXVsYSA9IGZ1bmN0aW9uIChfRm9ybXVsYSkge1xuICBfaW5oZXJpdHMoSW5kZXhlZEZvcm11bGEsIF9Gb3JtdWxhKTtcblxuICAvLyBJTiBmdXR1cmUgLSBhbGxvdyBwYXNzIGFycmF5IG9mIHN0YXRlbWVudHMgdG8gY29uc3RydWN0b3JcbiAgZnVuY3Rpb24gSW5kZXhlZEZvcm11bGEoZmVhdHVyZXMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kZXhlZEZvcm11bGEpO1xuXG4gICAgLy8gdGhpcy5zdGF0ZW1lbnRzID0gW10gLy8gQXMgaW4gRm9ybXVsYSBOTyBkb24ndCBvdmVyd3JpdGUgaW5oZXJpdGVkXG4gICAgLy8gdGhpcy5vcHRpb25hbCA9IFtdXG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW5kZXhlZEZvcm11bGEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmRleGVkRm9ybXVsYSkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMucHJvcGVydHlBY3Rpb25zID0gW107IC8vIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBjYWxsIHdoZW4gZ2V0dGluZyBzdGF0ZW1lbnQgd2l0aCB7cyBYIG99XG4gICAgLy8gbWFwcyA8dXJpPiB0byBbZihGLHMscCxvKSwuLi5dXG4gICAgX3RoaXMuY2xhc3NBY3Rpb25zID0gW107IC8vIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBjYWxsIHdoZW4gYWRkaW5nIHsgcyB0eXBlIFggfVxuICAgIF90aGlzLnJlZGlyZWN0aW9ucyA9IFtdOyAvLyByZWRpcmVjdCB0byBsZXhpY2FsbHkgc21hbGxlciBlcXVpdmFsZW50IHN5bWJvbFxuICAgIF90aGlzLmFsaWFzZXMgPSBbXTsgLy8gcmV2ZXJzZSBtYXBwaW5nIHRvIHJlZGlyZWN0aW9uOiBhbGlhc2VzIGZvciB0aGlzXG4gICAgX3RoaXMuSFRUUFJlZGlyZWN0cyA9IFtdOyAvLyByZWRpcmVjdGlvbnMgd2UgZ290IGZyb20gSFRUUFxuICAgIF90aGlzLnN1YmplY3RJbmRleCA9IFtdOyAvLyBBcnJheSBvZiBzdGF0ZW1lbnRzIHdpdGggdGhpcyBYIGFzIHN1YmplY3RcbiAgICBfdGhpcy5wcmVkaWNhdGVJbmRleCA9IFtdOyAvLyBBcnJheSBvZiBzdGF0ZW1lbnRzIHdpdGggdGhpcyBYIGFzIHN1YmplY3RcbiAgICBfdGhpcy5vYmplY3RJbmRleCA9IFtdOyAvLyBBcnJheSBvZiBzdGF0ZW1lbnRzIHdpdGggdGhpcyBYIGFzIG9iamVjdFxuICAgIF90aGlzLndoeUluZGV4ID0gW107IC8vIEFycmF5IG9mIHN0YXRlbWVudHMgd2l0aCBYIGFzIHByb3ZlbmFuY2VcbiAgICBfdGhpcy5pbmRleCA9IFtfdGhpcy5zdWJqZWN0SW5kZXgsIF90aGlzLnByZWRpY2F0ZUluZGV4LCBfdGhpcy5vYmplY3RJbmRleCwgX3RoaXMud2h5SW5kZXhdO1xuICAgIF90aGlzLm5hbWVzcGFjZXMgPSB7fTsgLy8gRGljdGlvbmFyeSBvZiBuYW1lc3BhY2UgcHJlZml4ZXNcbiAgICBfdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzIHx8IFsnc2FtZUFzJywgJ0ludmVyc2VGdW5jdGlvbmFsUHJvcGVydHknLCAnRnVuY3Rpb25hbFByb3BlcnR5J107XG4gICAgX3RoaXMuaW5pdFByb3BlcnR5QWN0aW9ucyhfdGhpcy5mZWF0dXJlcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEluZGV4ZWRGb3JtdWxhLCBbe1xuICAgIGtleTogJ3N1YnN0aXR1dGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzdGl0dXRlKGJpbmRpbmdzKSB7XG4gICAgICB2YXIgc3RhdGVtZW50c0NvcHkgPSB0aGlzLnN0YXRlbWVudHMubWFwKGZ1bmN0aW9uIChlYSkge1xuICAgICAgICByZXR1cm4gZWEuc3Vic3RpdHV0ZShiaW5kaW5ncyk7XG4gICAgICB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdJbmRleGVkRm9ybXVsYSBzdWJzIHN0YXRlbW50czonICsgc3RhdGVtZW50c0NvcHkpXG4gICAgICB2YXIgeSA9IG5ldyBJbmRleGVkRm9ybXVsYSgpO1xuICAgICAgeS5hZGQoc3RhdGVtZW50c0NvcHkpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ2luZGV4ZWQtZm9ybSBzdWJzIGZvcm11bGE6JyArIHkpXG4gICAgICByZXR1cm4geTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseVBhdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlQYXRjaChwYXRjaCwgdGFyZ2V0LCBwYXRjaENhbGxiYWNrKSB7XG4gICAgICAvLyBwYXRjaENhbGxiYWNrKGVycilcbiAgICAgIHZhciBRdWVyeSA9IHJlcXVpcmUoJy4vcXVlcnknKS5RdWVyeTtcbiAgICAgIHZhciB0YXJnZXRLQiA9IHRoaXM7XG4gICAgICB2YXIgZHM7XG4gICAgICB2YXIgYmluZGluZyA9IG51bGw7XG5cbiAgICAgIC8vIC8vLy8vLy8vLy8vIERlYnVnIHN0cmluZ3NcbiAgICAgIC8qXG4gICAgICB2YXIgYmluZGluZ0RlYnVnID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgdmFyIHN0ciA9ICcnXG4gICAgICAgIHZhciB2XG4gICAgICAgIGZvciAodiBpbiBiKSB7XG4gICAgICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkodikpIHtcbiAgICAgICAgICAgIHN0ciArPSAnICAgICcgKyB2ICsgJyAtPiAnICsgYlt2XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyXG4gICAgICB9XG4gICAgICAqL1xuICAgICAgdmFyIGRvUGF0Y2ggPSBmdW5jdGlvbiBkb1BhdGNoKG9uRG9uZVBhdGNoKSB7XG4gICAgICAgIGlmIChwYXRjaFsnZGVsZXRlJ10pIHtcbiAgICAgICAgICBkcyA9IHBhdGNoWydkZWxldGUnXTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiaW5kaW5nRGVidWcoYmluZGluZykpXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2RzIGJlZm9yZSBzdWJzdGl0dXRlOiAnICsgZHMpXG4gICAgICAgICAgaWYgKGJpbmRpbmcpIGRzID0gZHMuc3Vic3RpdHV0ZShiaW5kaW5nKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYXBwbHlQYXRjaDogZGVsZXRlOiAnICsgZHMpXG4gICAgICAgICAgZHMgPSBkcy5zdGF0ZW1lbnRzO1xuICAgICAgICAgIHZhciBiYWQgPSBbXTtcbiAgICAgICAgICB2YXIgZHMyID0gZHMubWFwKGZ1bmN0aW9uIChzdCkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgYWN0dWFsIHN0YXRlbW50cyBpbiB0aGUgc3RvcmVcbiAgICAgICAgICAgIHZhciBzdHMgPSB0YXJnZXRLQi5zdGF0ZW1lbnRzTWF0Y2hpbmcoc3Quc3ViamVjdCwgc3QucHJlZGljYXRlLCBzdC5vYmplY3QsIHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAvLyBsb2cuaW5mbyhcIk5PVCBGT1VORCBkZWxldGFibGUgXCIgKyBzdClcbiAgICAgICAgICAgICAgYmFkLnB1c2goc3QpO1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxvZy5pbmZvKFwiRm91bmQgZGVsZXRhYmxlIFwiICsgc3QpXG4gICAgICAgICAgICAgIHJldHVybiBzdHNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGJhZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZmluZCB0byBkZWxldGUgJyArIGJhZC5sZW5ndGggKyAnc3RhdGVtZW50cycpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZGVzcGl0ZSAnICsgdGFyZ2V0S0Iuc3RhdGVtZW50c01hdGNoaW5nKGJhZFswXS5zdWJqZWN0LCBiYWRbMF0ucHJlZGljYXRlKVswXSlcbiAgICAgICAgICAgIHJldHVybiBwYXRjaENhbGxiYWNrKCdDb3VsZCBub3QgZmluZCB0byBkZWxldGU6ICcgKyBiYWQuam9pbignXFxuIG9yICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZHMyLm1hcChmdW5jdGlvbiAoc3QpIHtcbiAgICAgICAgICAgIHRhcmdldEtCLnJlbW92ZShzdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoWydpbnNlcnQnXSkge1xuICAgICAgICAgIC8vIGxvZy5pbmZvKFwiZG9QYXRjaCBpbnNlcnQgXCIrcGF0Y2hbJ2luc2VydCddKVxuICAgICAgICAgIGRzID0gcGF0Y2hbJ2luc2VydCddO1xuICAgICAgICAgIGlmIChiaW5kaW5nKSBkcyA9IGRzLnN1YnN0aXR1dGUoYmluZGluZyk7XG4gICAgICAgICAgZHMgPSBkcy5zdGF0ZW1lbnRzO1xuICAgICAgICAgIGRzLm1hcChmdW5jdGlvbiAoc3QpIHtcbiAgICAgICAgICAgIHN0LndoeSA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldEtCLmFkZChzdC5zdWJqZWN0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdCwgc3Qud2h5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBvbkRvbmVQYXRjaCgpO1xuICAgICAgfTtcbiAgICAgIGlmIChwYXRjaC53aGVyZSkge1xuICAgICAgICAvLyBsb2cuaW5mbyhcIlByb2Nlc3NpbmcgV0hFUkU6IFwiICsgcGF0Y2gud2hlcmUgKyAnXFxuJylcbiAgICAgICAgdmFyIHF1ZXJ5ID0gbmV3IFF1ZXJ5KCdwYXRjaCcpO1xuICAgICAgICBxdWVyeS5wYXQgPSBwYXRjaC53aGVyZTtcbiAgICAgICAgcXVlcnkucGF0LnN0YXRlbWVudHMubWFwKGZ1bmN0aW9uIChzdCkge1xuICAgICAgICAgIHN0LndoeSA9IHRhcmdldDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGJpbmRpbmdzRm91bmQgPSBbXTtcblxuICAgICAgICB0YXJnZXRLQi5xdWVyeShxdWVyeSwgZnVuY3Rpb24gb25CaW5kaW5nKGJpbmRpbmcpIHtcbiAgICAgICAgICBiaW5kaW5nc0ZvdW5kLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJyAgIGdvdCBhIGJpbmRpbmc6ICcgKyBiaW5kaW5nRGVidWcoYmluZGluZykpXG4gICAgICAgIH0sIHRhcmdldEtCLmZldGNoZXIsIGZ1bmN0aW9uIG9uRG9uZSgpIHtcbiAgICAgICAgICBpZiAoYmluZGluZ3NGb3VuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRjaENhbGxiYWNrKCdObyBtYXRjaCBmb3VuZCB0byBiZSBwYXRjaGVkOicgKyBwYXRjaC53aGVyZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChiaW5kaW5nc0ZvdW5kLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRjaENhbGxiYWNrKCdQYXRjaCBhbWJpZ3VvdXMuIE5vIHBhdGNoIGRvbmUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpbmRpbmcgPSBiaW5kaW5nc0ZvdW5kWzBdO1xuICAgICAgICAgIGRvUGF0Y2gocGF0Y2hDYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9QYXRjaChwYXRjaENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWNsYXJlRXhpc3RlbnRpYWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNsYXJlRXhpc3RlbnRpYWwoeCkge1xuICAgICAgaWYgKCF0aGlzLl9leGlzdGVudGlhbFZhcmlhYmxlcykgdGhpcy5fZXhpc3RlbnRpYWxWYXJpYWJsZXMgPSBbXTtcbiAgICAgIHRoaXMuX2V4aXN0ZW50aWFsVmFyaWFibGVzLnB1c2goeCk7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbml0UHJvcGVydHlBY3Rpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFByb3BlcnR5QWN0aW9ucyhmZWF0dXJlcykge1xuICAgICAgLy8gSWYgdGhlIHByZWRpY2F0ZSBpcyAjdHlwZSwgdXNlIGhhbmRsZVJERlR5cGUgdG8gY3JlYXRlIGEgdHlwZUNhbGxiYWNrIG9uIHRoZSBvYmplY3RcbiAgICAgIHRoaXMucHJvcGVydHlBY3Rpb25zWyc8aHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGU+J10gPSBbaGFuZGxlUkRGVHlwZV07XG5cbiAgICAgIC8vIEFzc3VtcHRpb246IHRoZXNlIHRlcm1zIGFyZSBub3QgcmVkaXJlY3RlZCBAQGZpeG1lXG4gICAgICBpZiAoQXJyYXlJbmRleE9mKGZlYXR1cmVzLCAnc2FtZUFzJykgPj0gMCkge1xuICAgICAgICB0aGlzLnByb3BlcnR5QWN0aW9uc1snPGh0dHA6Ly93d3cudzMub3JnLzIwMDIvMDcvb3dsI3NhbWVBcz4nXSA9IFtmdW5jdGlvbiAoZm9ybXVsYSwgc3ViaiwgcHJlZCwgb2JqLCB3aHkpIHtcbiAgICAgICAgICAvLyBsb2cud2FybihcIkVxdWF0aW5nIFwiK3N1YmoudXJpK1wiIHNhbWVBcyBcIitvYmoudXJpKTsgIC8vQEBcbiAgICAgICAgICBmb3JtdWxhLmVxdWF0ZShzdWJqLCBvYmopO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyB0cnVlIGlmIHN0YXRlbWVudCBnaXZlbiBpcyBOT1QgbmVlZGVkIGluIHRoZSBzdG9yZVxuICAgICAgICB9XTsgLy8gc2FtZUFzIC0+IGVxdWF0ZSAmIGRvbid0IGFkZCB0byBpbmRleFxuICAgICAgfVxuICAgICAgaWYgKEFycmF5SW5kZXhPZihmZWF0dXJlcywgJ0ludmVyc2VGdW5jdGlvbmFsUHJvcGVydHknKSA+PSAwKSB7XG4gICAgICAgIHRoaXMuY2xhc3NBY3Rpb25zWyc8JyArIG93bF9ucyArICdJbnZlcnNlRnVuY3Rpb25hbFByb3BlcnR5PiddID0gW2Z1bmN0aW9uIChmb3JtdWxhLCBzdWJqLCBwcmVkLCBvYmosIGFkZEZuKSB7XG4gICAgICAgICAgLy8geWVzIHN1Ymogbm90IHByZWQhXG4gICAgICAgICAgcmV0dXJuIGZvcm11bGEubmV3UHJvcGVydHlBY3Rpb24oc3ViaiwgaGFuZGxlX0lGUCk7XG4gICAgICAgIH1dOyAvLyBJRlAgLT4gaGFuZGxlX0lGUCwgZG8gYWRkIHRvIGluZGV4XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXlJbmRleE9mKGZlYXR1cmVzLCAnRnVuY3Rpb25hbFByb3BlcnR5JykgPj0gMCkge1xuICAgICAgICB0aGlzLmNsYXNzQWN0aW9uc1snPCcgKyBvd2xfbnMgKyAnRnVuY3Rpb25hbFByb3BlcnR5PiddID0gW2Z1bmN0aW9uIChmb3JtdWxhLCBzdWJqLCBwcm9qLCBvYmosIGFkZEZuKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm11bGEubmV3UHJvcGVydHlBY3Rpb24oc3ViaiwgaGFuZGxlX0ZQKTtcbiAgICAgICAgfV07IC8vIEZQID0+IGhhbmRsZUZQLCBkbyBhZGQgdG8gaW5kZXhcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdHJpcGxlIHRvIHRoZSBzdG9yZS5cbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZW1lbnQgYWRkZWRcbiAgICAgKiAod291bGQgaXQgYmUgYmV0dGVyIHRvIHJldHVybiB0aGUgb3JpZ2luYWwgZm9ybXVsYSBmb3IgY2hhaW5pbmc/KVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoc3ViaiwgcHJlZCwgb2JqLCB3aHkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHN1YmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdWJqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChzdWJqW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViaiBpbnN0YW5jZW9mIFN0YXRlbWVudCkge1xuICAgICAgICAgIHRoaXMuYWRkKHN1Ymouc3ViamVjdCwgc3Viai5wcmVkaWNhdGUsIHN1Ymoub2JqZWN0LCBzdWJqLndoeSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViaiBpbnN0YW5jZW9mIEluZGV4ZWRGb3JtdWxhKSB7XG4gICAgICAgICAgdGhpcy5hZGQoc3Viai5zdGF0ZW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBhY3Rpb25zO1xuICAgICAgdmFyIHN0O1xuICAgICAgaWYgKCF3aHkpIHtcbiAgICAgICAgLy8gc3lzdGVtIGdlbmVyYXRlZFxuICAgICAgICB3aHkgPSB0aGlzLmZldGNoZXIgPyB0aGlzLmZldGNoZXIuYXBwTm9kZSA6IHRoaXMuc3ltKCdjaHJvbWU6dGhlU2Vzc2lvbicpO1xuICAgICAgfVxuICAgICAgc3ViaiA9IE5vZGUuZnJvbVZhbHVlKHN1YmopO1xuICAgICAgcHJlZCA9IE5vZGUuZnJvbVZhbHVlKHByZWQpO1xuICAgICAgb2JqID0gTm9kZS5mcm9tVmFsdWUob2JqKTtcbiAgICAgIHdoeSA9IE5vZGUuZnJvbVZhbHVlKHdoeSk7XG4gICAgICBpZiAodGhpcy5wcmVkaWNhdGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZUNhbGxiYWNrKHRoaXMsIHByZWQsIHdoeSk7XG4gICAgICB9XG4gICAgICAvLyBBY3Rpb24gcmV0dXJuIHRydWUgaWYgdGhlIHN0YXRlbWVudCBkb2VzIG5vdCBuZWVkIHRvIGJlIGFkZGVkXG4gICAgICB2YXIgcHJlZEhhc2ggPSB0aGlzLmNhbm9uKHByZWQpLmhhc2hTdHJpbmcoKTtcbiAgICAgIGFjdGlvbnMgPSB0aGlzLnByb3BlcnR5QWN0aW9uc1twcmVkSGFzaF07IC8vIFByZWRpY2F0ZSBoYXNoXG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgaWYgKGFjdGlvbnMpIHtcbiAgICAgICAgLy8gYWxlcnQoJ3R5cGU6ICcrdHlwZW9mIGFjdGlvbnMgKycgQEAgYWN0aW9ucz0nK2FjdGlvbnMpXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZG9uZSA9IGRvbmUgfHwgYWN0aW9uc1tpXSh0aGlzLCBzdWJqLCBwcmVkLCBvYmosIHdoeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhvbGRzKHN1YmosIHByZWQsIG9iaiwgd2h5KSkge1xuICAgICAgICAvLyBUYWtlcyB0aW1lIGJ1dCBzYXZlcyBkdXBsaWNhdGVzXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZGZsaWI6IElnbm9yaW5nIGR1cCEgeycgKyBzdWJqICsgJyAnICsgcHJlZCArICcgJyArIG9iaiArICcgJyArIHdoeSArICd9JylcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIEBAYmV0dGVyIHRvIHJldHVybiBzZWxmIGluIGFsbCBjYXNlcz9cbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGFyZSB0cmFja2luZyBwcm92ZW5hbmNlLCBldmVyeSB0aGluZyBzaG91bGQgYmUgbG9hZGVkIGludG8gdGhlIHN0b3JlXG4gICAgICAvLyBpZiAoZG9uZSkgcmV0dXJuIG5ldyBTdGF0ZW1lbnQoc3ViaiwgcHJlZCwgb2JqLCB3aHkpXG4gICAgICAvLyBEb24ndCBwdXQgaXQgaW4gdGhlIHN0b3JlXG4gICAgICAvLyBzdGlsbCByZXR1cm4gdGhpcyBzdGF0ZW1lbnQgZm9yIG93bDpzYW1lQXMgaW5wdXRcbiAgICAgIHZhciBoYXNoID0gW3RoaXMuY2Fub24oc3ViaikuaGFzaFN0cmluZygpLCBwcmVkSGFzaCwgdGhpcy5jYW5vbihvYmopLmhhc2hTdHJpbmcoKSwgdGhpcy5jYW5vbih3aHkpLmhhc2hTdHJpbmcoKV07XG4gICAgICBzdCA9IG5ldyBTdGF0ZW1lbnQoc3ViaiwgcHJlZCwgb2JqLCB3aHkpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICB2YXIgaXggPSB0aGlzLmluZGV4W2ldO1xuICAgICAgICB2YXIgaCA9IGhhc2hbaV07XG4gICAgICAgIGlmICghaXhbaF0pIHtcbiAgICAgICAgICBpeFtoXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGl4W2hdLnB1c2goc3QpOyAvLyBTZXQgb2YgdGhpbmdzIHdpdGggdGhpcyBhcyBzdWJqZWN0LCBldGNcbiAgICAgIH1cblxuICAgICAgLy8gbG9nLmRlYnVnKFwiQURESU5HICAgIHtcIitzdWJqK1wiIFwiK3ByZWQrXCIgXCIrb2JqK1wifSBcIit3aHkpXG4gICAgICB0aGlzLnN0YXRlbWVudHMucHVzaChzdCk7XG4gICAgICByZXR1cm4gc3Q7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkQWxsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQWxsKHN0YXRlbWVudHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBzdGF0ZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHF1YWQpIHtcbiAgICAgICAgX3RoaXMyLmFkZChxdWFkLnN1YmplY3QsIHF1YWQucHJlZGljYXRlLCBxdWFkLm9iamVjdCwgcXVhZC5ncmFwaCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhbnknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbnkocywgcCwgbywgZykge1xuICAgICAgdmFyIHN0ID0gdGhpcy5hbnlTdGF0ZW1lbnRNYXRjaGluZyhzLCBwLCBvLCBnKTtcbiAgICAgIGlmIChzdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9IGVsc2UgaWYgKHMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3Quc3ViamVjdDtcbiAgICAgIH0gZWxzZSBpZiAocCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdC5wcmVkaWNhdGU7XG4gICAgICB9IGVsc2UgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3Qub2JqZWN0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhbnlWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFueVZhbHVlKHMsIHAsIG8sIGcpIHtcbiAgICAgIHZhciB5ID0gdGhpcy5hbnkocywgcCwgbywgZyk7XG4gICAgICByZXR1cm4geSA/IHkudmFsdWUgOiB2b2lkIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYW55U3RhdGVtZW50TWF0Y2hpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbnlTdGF0ZW1lbnRNYXRjaGluZyhzdWJqLCBwcmVkLCBvYmosIHdoeSkge1xuICAgICAgdmFyIHggPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyhzdWJqLCBwcmVkLCBvYmosIHdoeSwgdHJ1ZSk7XG4gICAgICBpZiAoIXggfHwgeC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4WzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN5bWJvbCB3aXRoIGNhbm9uaWNhbCBVUkkgYXMgc211c2hlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjYW5vbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbm9uKHRlcm0pIHtcbiAgICAgIGlmICghdGVybSkge1xuICAgICAgICByZXR1cm4gdGVybTtcbiAgICAgIH1cbiAgICAgIHZhciB5ID0gdGhpcy5yZWRpcmVjdGlvbnNbdGVybS5oYXNoU3RyaW5nKCldO1xuICAgICAgaWYgKCF5KSB7XG4gICAgICAgIHJldHVybiB0ZXJtO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hlY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICAgIHRoaXMuY2hlY2tTdGF0ZW1lbnRMaXN0KHRoaXMuc3RhdGVtZW50cyk7XG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IDQ7IHArKykge1xuICAgICAgICB2YXIgaXggPSB0aGlzLmluZGV4W3BdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaXgpIHtcbiAgICAgICAgICBpZiAoaXguaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja1N0YXRlbWVudExpc3QoaXhba2V5XSwgcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZi1jb25zaXN0ZW5jeSBjaGVja2luZyBmb3IgZGlhZ25vc3RpcyBvbmx5XG4gICAgICogSXMgZWFjaCBzdGF0ZW1lbnQgcHJvcGVybHkgaW5kZXhlZD9cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2hlY2tTdGF0ZW1lbnRMaXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTdGF0ZW1lbnRMaXN0KHN0cywgZnJvbSkge1xuICAgICAgdmFyIG5hbWVzID0gWydzdWJqZWN0JywgJ3ByZWRpY2F0ZScsICdvYmplY3QnLCAnd2h5J107XG4gICAgICB2YXIgb3JpZ2luID0gJyBmb3VuZCBpbiAnICsgbmFtZXNbZnJvbV0gKyAnIGluZGV4Lic7XG4gICAgICB2YXIgc3Q7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBzdCA9IHN0c1tqXTtcbiAgICAgICAgdmFyIHRlcm0gPSBbc3Quc3ViamVjdCwgc3QucHJlZGljYXRlLCBzdC5vYmplY3QsIHN0LndoeV07XG4gICAgICAgIHZhciBhcnJheUNvbnRhaW5zID0gZnVuY3Rpb24gYXJyYXlDb250YWlucyhhLCB4KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYVtpXS5zdWJqZWN0LnNhbWVUZXJtKHguc3ViamVjdCkgJiYgYVtpXS5wcmVkaWNhdGUuc2FtZVRlcm0oeC5wcmVkaWNhdGUpICYmIGFbaV0ub2JqZWN0LnNhbWVUZXJtKHgub2JqZWN0KSAmJiBhW2ldLndoeS5zYW1lVGVybSh4LndoeSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IDQ7IHArKykge1xuICAgICAgICAgIHZhciBjID0gdGhpcy5jYW5vbih0ZXJtW3BdKTtcbiAgICAgICAgICB2YXIgaCA9IGMuaGFzaFN0cmluZygpO1xuICAgICAgICAgIGlmICghdGhpcy5pbmRleFtwXVtoXSkge1xuICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdObyAnICsgbmFtZVtwXSArICcgaW5kZXggZm9yIHN0YXRlbWVudCAnICsgc3QgKyAnQCcgKyBzdC53aHkgKyBvcmlnaW4pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghYXJyYXlDb250YWlucyh0aGlzLmluZGV4W3BdW2hdLCBzdCkpIHtcbiAgICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdJbmRleCBmb3IgJyArIG5hbWVbcF0gKyAnIGRvZXMgbm90IGhhdmUgc3RhdGVtZW50ICcgKyBzdCArICdAJyArIHN0LndoeSArIG9yaWdpbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcnJheUNvbnRhaW5zKHRoaXMuc3RhdGVtZW50cywgc3QpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGF0ZW1lbnQgbGlzdCBkb2VzIG5vdCBzdGF0ZW1lbnQgJyArIHN0ICsgJ0AnICsgc3Qud2h5ICsgb3JpZ2luKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXBsYWNlcyBAdGVtcGxhdGUgd2l0aCBAdGFyZ2V0IGFuZCBhZGQgYXBwcm9wcmlhdGUgdHJpcGxlcyAobm8gdHJpcGxlXG4gICAgICogcmVtb3ZlZClcbiAgICAgKiBvbmUtZGlyZWN0aW9uIHJlcGxpY2F0aW9uXG4gICAgICogQG1ldGhvZCBjb3B5VG9cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY29weVRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29weVRvKHRlbXBsYXRlLCB0YXJnZXQsIGZsYWdzKSB7XG4gICAgICBpZiAoIWZsYWdzKSBmbGFncyA9IFtdO1xuICAgICAgdmFyIHN0YXRMaXN0ID0gdGhpcy5zdGF0ZW1lbnRzTWF0Y2hpbmcodGVtcGxhdGUpO1xuICAgICAgaWYgKEFycmF5SW5kZXhPZihmbGFncywgJ3R3by1kaXJlY3Rpb24nKSAhPT0gLTEpIHtcbiAgICAgICAgc3RhdExpc3QuY29uY2F0KHRoaXMuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0ZW1wbGF0ZSkpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3QgPSBzdGF0TGlzdFtpXTtcbiAgICAgICAgc3dpdGNoIChzdC5vYmplY3QudGVybVR5cGUpIHtcbiAgICAgICAgICBjYXNlICdOYW1lZE5vZGUnOlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdMaXRlcmFsJzpcbiAgICAgICAgICBjYXNlICdCbGFua05vZGUnOlxuICAgICAgICAgIGNhc2UgJ0NvbGxlY3Rpb24nOlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdC5jb3B5KHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlJbmRleE9mKGZsYWdzLCAnZGVsZXRlJykgIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmUoc3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2ltcGxpZnkgZ3JhcGggaW4gc3RvcmUgd2hlbiB3ZSByZWFsaXplIHR3byBpZGVudGlmaWVycyBhcmUgZXF1aXZhbGVudFxuICAgICAqIFdlIHJlcGxhY2UgdGhlIGJpZ2dlciB3aXRoIHRoZSBzbWFsbGVyLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlcXVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhdGUodTEsIHUyKSB7XG4gICAgICAvLyBsb2cud2FybihcIkVxdWF0aW5nIFwiK3UxK1wiIGFuZCBcIit1Mik7IC8vIEBAXG4gICAgICAvLyBAQEpBTUJPIE11c3QgY2Fub25pY2FsaXplIHRoZSB1cmlzIHRvIHByZXZlbnQgZXJyb3JzIGZyb20gYT1iPWNcbiAgICAgIC8vIDAzLTIxLTIwMTBcbiAgICAgIHUxID0gdGhpcy5jYW5vbih1MSk7XG4gICAgICB1MiA9IHRoaXMuY2Fub24odTIpO1xuICAgICAgdmFyIGQgPSB1MS5jb21wYXJlVGVybSh1Mik7XG4gICAgICBpZiAoIWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIE5vIGluZm9ybWF0aW9uIGluIHthID0gYX1cbiAgICAgIH1cbiAgICAgIC8vIHZhciBiaWdcbiAgICAgIC8vIHZhciBzbWFsbFxuICAgICAgaWYgKGQgPCAwKSB7XG4gICAgICAgIC8vIHUxIGxlc3MgdGhhbiB1MlxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlV2l0aCh1MiwgdTEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZVdpdGgodTEsIHUyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtdWxhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybXVsYShmZWF0dXJlcykge1xuICAgICAgcmV0dXJuIG5ldyBJbmRleGVkRm9ybXVsYShmZWF0dXJlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHN0YXRlbWVudHMgY29udGFpbmVkIGluIHRoaXMgSW5kZXhlZEZvcm11bGEuXG4gICAgICogKEdldHRlciBwcm94eSB0byB0aGlzLnN0YXRlbWVudHMpLlxuICAgICAqIFVzYWdlOlxuICAgICAqICAgIGBgYFxuICAgICAqICAgIHZhciBrYiA9IHJkZi5ncmFwaCgpXG4gICAgICogICAga2IubGVuZ3RoICAvLyAtPiAwXG4gICAgICogICAgYGBgXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYXRjaCcsXG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW55IHF1YWRzIG1hdGNoaW5nIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAgICogU3RhbmRhcmQgUkRGSlMgVGFza2ZvcmNlIG1ldGhvZCBmb3IgU291cmNlIG9iamVjdHMsIGltcGxlbWVudGVkIGFzIGFuXG4gICAgICogYWxpYXMgdG8gYHN0YXRlbWVudHNNYXRjaGluZygpYFxuICAgICAqIEBtZXRob2QgbWF0Y2hcbiAgICAgKiBAcGFyYW0gc3ViamVjdCB7Tm9kZXxTdHJpbmd8T2JqZWN0fVxuICAgICAqIEBwYXJhbSBwcmVkaWNhdGUge05vZGV8U3RyaW5nfE9iamVjdH1cbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtOb2RlfFN0cmluZ3xPYmplY3R9XG4gICAgICogQHBhcmFtIGdyYXBoIHtOYW1lZE5vZGV8U3RyaW5nfVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyhOb2RlLmZyb21WYWx1ZShzdWJqZWN0KSwgTm9kZS5mcm9tVmFsdWUocHJlZGljYXRlKSwgTm9kZS5mcm9tVmFsdWUob2JqZWN0KSwgTm9kZS5mcm9tVmFsdWUoZ3JhcGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIG91dCB3aGV0aGVyIGEgZ2l2ZW4gVVJJIGlzIHVzZWQgYXMgc3ltYm9sIGluIHRoZSBmb3JtdWxhXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21lbnRpb25zVVJJJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVudGlvbnNVUkkodXJpKSB7XG4gICAgICB2YXIgaGFzaCA9ICc8JyArIHVyaSArICc+JztcbiAgICAgIHJldHVybiAhIXRoaXMuc3ViamVjdEluZGV4W2hhc2hdIHx8ICEhdGhpcy5vYmplY3RJbmRleFtoYXNoXSB8fCAhIXRoaXMucHJlZGljYXRlSW5kZXhbaGFzaF07XG4gICAgfVxuXG4gICAgLy8gRXhpc3RlbnRpYWxzIGFyZSBCTm9kZXMgLSBzb21ldGhpbmcgZXhpc3RzIHdpdGhvdXQgbmFtaW5nXG5cbiAgfSwge1xuICAgIGtleTogJ25ld0V4aXN0ZW50aWFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV3RXhpc3RlbnRpYWwodXJpKSB7XG4gICAgICBpZiAoIXVyaSkgcmV0dXJuIHRoaXMuYm5vZGUoKTtcbiAgICAgIHZhciB4ID0gdGhpcy5zeW0odXJpKTtcbiAgICAgIHJldHVybiB0aGlzLmRlY2xhcmVFeGlzdGVudGlhbCh4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICduZXdQcm9wZXJ0eUFjdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5ld1Byb3BlcnR5QWN0aW9uKHByZWQsIGFjdGlvbikge1xuICAgICAgLy8gbG9nLmRlYnVnKFwibmV3UHJvcGVydHlBY3Rpb246ICBcIitwcmVkKVxuICAgICAgdmFyIGhhc2ggPSBwcmVkLmhhc2hTdHJpbmcoKTtcbiAgICAgIGlmICghdGhpcy5wcm9wZXJ0eUFjdGlvbnNbaGFzaF0pIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUFjdGlvbnNbaGFzaF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJvcGVydHlBY3Rpb25zW2hhc2hdLnB1c2goYWN0aW9uKTtcbiAgICAgIC8vIE5vdyBhcHBseSB0aGUgZnVuY3Rpb24gdG8gdG8gc3RhdGVtZW50cyBhbHJlYWR5IGluIHRoZSBzdG9yZVxuICAgICAgdmFyIHRvQmVGaXhlZCA9IHRoaXMuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgcHJlZCwgdW5kZWZpbmVkKTtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvQmVGaXhlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBOT1Qgb3B0aW1pemVkIC0gc29ydCB0b0JlRml4ZWQgZXRjXG4gICAgICAgIGRvbmUgPSBkb25lIHx8IGFjdGlvbih0aGlzLCB0b0JlRml4ZWRbaV0uc3ViamVjdCwgcHJlZCwgdG9CZUZpeGVkW2ldLm9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9uZTtcbiAgICB9XG5cbiAgICAvLyBVbml2ZXJzYWxzIGFyZSBWYXJpYWJsZXNcblxuICB9LCB7XG4gICAga2V5OiAnbmV3VW5pdmVyc2FsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV3VW5pdmVyc2FsKHVyaSkge1xuICAgICAgdmFyIHggPSB0aGlzLnN5bSh1cmkpO1xuICAgICAgaWYgKCF0aGlzLl91bml2ZXJzYWxWYXJpYWJsZXMpIHRoaXMuX3VuaXZlcnNhbFZhcmlhYmxlcyA9IFtdO1xuICAgICAgdGhpcy5fdW5pdmVyc2FsVmFyaWFibGVzLnB1c2goeCk7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICAvLyBjb252ZW5pZW5jZSBmdW5jdGlvbiB1c2VkIGJ5IE4zIHBhcnNlclxuXG4gIH0sIHtcbiAgICBrZXk6ICd2YXJpYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhcmlhYmxlKG5hbWUpIHtcbiAgICAgIHJldHVybiBuZXcgVmFyaWFibGUobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBhbiB1bnVzZWQgaWQgZm9yIGEgZmlsZSBiZWluZyBlZGl0ZWQ6IHJldHVybiBhIHN5bWJvbFxuICAgICAqIChOb3RlOiBTbG93IGlmZiBhIGxvdCBvZiB0aGVtIC0tIGNvdWxkIGJlIE8obG9nKGspKSApXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ25leHRTeW1ib2wnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0U3ltYm9sKGRvYykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7OyBpKyspIHtcbiAgICAgICAgdmFyIHVyaSA9IGRvYy51cmkgKyAnI24nICsgaTtcbiAgICAgICAgaWYgKCF0aGlzLm1lbnRpb25zVVJJKHVyaSkpIHJldHVybiB0aGlzLnN5bSh1cmkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3F1ZXJ5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVlcnkobXlRdWVyeSwgY2FsbGJhY2ssIGZldGNoZXIsIG9uRG9uZSkge1xuICAgICAgdmFyIGluZGV4ZWRGb3JtdWxhUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5JykuaW5kZXhlZEZvcm11bGFRdWVyeTtcbiAgICAgIHJldHVybiBpbmRleGVkRm9ybXVsYVF1ZXJ5LmNhbGwodGhpcywgbXlRdWVyeSwgY2FsbGJhY2ssIGZldGNoZXIsIG9uRG9uZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgYSBzdGF0ZW1lbnQgb2JqZWN0IGFuZCByZW1vdmVzIGl0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShzdCkge1xuICAgICAgaWYgKHN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlKHN0W2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmIChzdCBpbnN0YW5jZW9mIEluZGV4ZWRGb3JtdWxhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZShzdC5zdGF0ZW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHMgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyhzdC5zdWJqZWN0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdCwgc3Qud2h5KTtcbiAgICAgIGlmICghc3RzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXRlbWVudCB0byBiZSByZW1vdmVkIGlzIG5vdCBvbiBzdG9yZTogJyArIHN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVtb3ZlU3RhdGVtZW50KHN0c1swXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBzdGF0ZW1udHMgaW4gYSBkb2NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRG9jdW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVEb2N1bWVudChkb2MpIHtcbiAgICAgIHZhciBzdHMgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkb2MpLnNsaWNlKCk7IC8vIFRha2UgYSBjb3B5IGFzIHRoaXMgaXMgdGhlIGFjdHVhbCBpbmRleFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5yZW1vdmVTdGF0ZW1lbnQoc3RzW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBhbGwgc3RhdGVtZW50cyBtYXRjaGluZyBhcmdzICh3aXRoaW4gbGltaXQpICpcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlTWFueScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU1hbnkoc3ViaiwgcHJlZCwgb2JqLCB3aHksIGxpbWl0KSB7XG4gICAgICAvLyBsb2cuZGVidWcoXCJlbnRlcmluZyByZW1vdmVNYW55IHcvIHN1YmoscHJlZCxvYmosd2h5LGxpbWl0ID0gXCIgKyBzdWJqICtcIiwgXCIrIHByZWQrXCIsIFwiICsgb2JqK1wiLCBcIiArIHdoeStcIiwgXCIgKyBsaW1pdClcbiAgICAgIHZhciBzdHMgPSB0aGlzLnN0YXRlbWVudHNNYXRjaGluZyhzdWJqLCBwcmVkLCBvYmosIHdoeSwgZmFsc2UpO1xuICAgICAgLy8gVGhpcyBpcyBhIHN1YnRsZSBidWcgdGhhdCBvY2NjdXJlZCBpbiB1cGRhdGVDZW50ZXIuanMgdG9vLlxuICAgICAgLy8gVGhlIGZhY3QgaXMsIHRoaXMuc3RhdGVtZW50c01hdGNoaW5nIHJldHVybnMgdGhpcy53aHlJbmRleCBpbnN0ZWFkIG9mIGEgY29weSBvZiBpdFxuICAgICAgLy8gYnV0IGZvciBwZXJmcm9tYW5jZSBjb25zaWRlcmF0aW9uLCBpdCdzIGJldHRlciB0byBqdXN0IGRvIHRoYXRcbiAgICAgIC8vIHNvIG1ha2UgYSBjb3B5IGhlcmUuXG4gICAgICB2YXIgc3RhdGVtZW50cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RhdGVtZW50cy5wdXNoKHN0c1tpXSk7XG4gICAgICB9aWYgKGxpbWl0KSBzdGF0ZW1lbnRzID0gc3RhdGVtZW50cy5zbGljZSgwLCBsaW1pdCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc3RhdGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnJlbW92ZShzdGF0ZW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVNYXRjaGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTWF0Y2hlcyhzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgd2h5KSB7XG4gICAgICB0aGlzLnJlbW92ZVN0YXRlbWVudHModGhpcy5zdGF0ZW1lbnRzTWF0Y2hpbmcoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIHdoeSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcGFydGljdWxhciBzdGF0ZW1lbnQgb2JqZWN0IGZyb20gdGhlIHN0b3JlXG4gICAgICpcbiAgICAgKiBzdCAgICBhIHN0YXRlbWVudCB3aGljaCBpcyBhbHJlYWR5IGluIHRoZSBzdG9yZSBhbmQgaW5kZXhlZC5cbiAgICAgKiAgICAgIE1ha2Ugc3VyZSB5b3Ugb25seSB1c2UgdGhpcyBmb3IgdGhlc2UuXG4gICAgICogICAgT3RoZXJ3aXNlLCB5b3Ugc2hvdWxkIHVzZSByZW1vdmUoKSBhYm92ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlU3RhdGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU3RhdGVtZW50KHN0KSB7XG4gICAgICAvLyBsb2cuZGVidWcoXCJlbnRlcmluZyByZW1vdmUgdy8gc3Q9XCIgKyBzdClcbiAgICAgIHZhciB0ZXJtID0gW3N0LnN1YmplY3QsIHN0LnByZWRpY2F0ZSwgc3Qub2JqZWN0LCBzdC53aHldO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCA0OyBwKyspIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLmNhbm9uKHRlcm1bcF0pO1xuICAgICAgICB2YXIgaCA9IGMuaGFzaFN0cmluZygpO1xuICAgICAgICBpZiAoIXRoaXMuaW5kZXhbcF1baF0pIHtcbiAgICAgICAgICAvLyBsb2cud2FybiAoXCJTdGF0ZW1lbnQgcmVtb3ZhbDogbm8gaW5kZXggJytwKyc6IFwiK3N0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJERkFycmF5UmVtb3ZlKHRoaXMuaW5kZXhbcF1baF0sIHN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgUkRGQXJyYXlSZW1vdmUodGhpcy5zdGF0ZW1lbnRzLCBzdCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVTdGF0ZW1lbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU3RhdGVtZW50cyhzdHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKHN0c1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIGJpZyB3aXRoIHNtYWxsLCBvYnNvbGV0ZWQgd2l0aCBvYnNvbGV0aW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlV2l0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKGJpZywgc21hbGwpIHtcbiAgICAgIC8vIGxvZy5kZWJ1ZyhcIlJlcGxhY2luZyBcIitiaWcrXCIgd2l0aCBcIitzbWFsbCkgLy8gQEBcbiAgICAgIHZhciBvbGRoYXNoID0gYmlnLmhhc2hTdHJpbmcoKTtcbiAgICAgIHZhciBuZXdoYXNoID0gc21hbGwuaGFzaFN0cmluZygpO1xuICAgICAgdmFyIG1vdmVJbmRleCA9IGZ1bmN0aW9uIG1vdmVJbmRleChpeCkge1xuICAgICAgICB2YXIgb2xkbGlzdCA9IGl4W29sZGhhc2hdO1xuICAgICAgICBpZiAoIW9sZGxpc3QpIHtcbiAgICAgICAgICByZXR1cm47IC8vIG5vbmUgdG8gbW92ZVxuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdsaXN0ID0gaXhbbmV3aGFzaF07XG4gICAgICAgIGlmICghbmV3bGlzdCkge1xuICAgICAgICAgIGl4W25ld2hhc2hdID0gb2xkbGlzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpeFtuZXdoYXNoXSA9IG9sZGxpc3QuY29uY2F0KG5ld2xpc3QpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBpeFtvbGRoYXNoXTtcbiAgICAgIH07XG4gICAgICAvLyB0aGUgY2Fub25pY2FsIG9uZSBjYXJyaWVzIGFsbCB0aGUgaW5kZXhlc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgbW92ZUluZGV4KHRoaXMuaW5kZXhbaV0pO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWRpcmVjdGlvbnNbb2xkaGFzaF0gPSBzbWFsbDtcbiAgICAgIGlmIChiaWcudXJpKSB7XG4gICAgICAgIC8vIEBASkFNQk86IG11c3QgdXBkYXRlIHJlZGlyZWN0aW9ucyxhbGlhc2VzIGZyb20gc3ViLWl0ZW1zLCB0b28uXG4gICAgICAgIGlmICghdGhpcy5hbGlhc2VzW25ld2hhc2hdKSB7XG4gICAgICAgICAgdGhpcy5hbGlhc2VzW25ld2hhc2hdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbGlhc2VzW25ld2hhc2hdLnB1c2goYmlnKTsgLy8gQmFjayBsaW5rXG4gICAgICAgIGlmICh0aGlzLmFsaWFzZXNbb2xkaGFzaF0pIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5hbGlhc2VzW29sZGhhc2hdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0aW9uc1t0aGlzLmFsaWFzZXNbb2xkaGFzaF1baV0uaGFzaFN0cmluZygpXSA9IHNtYWxsO1xuICAgICAgICAgICAgdGhpcy5hbGlhc2VzW25ld2hhc2hdLnB1c2godGhpcy5hbGlhc2VzW29sZGhhc2hdW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQoc21hbGwsIHRoaXMuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI3VyaScpLCBiaWcudXJpKTtcbiAgICAgICAgLy8gSWYgdHdvIHRoaW5ncyBhcmUgZXF1YWwsIGFuZCBvbmUgaXMgcmVxdWVzdGVkLCB3ZSBzaG91bGQgcmVxdWVzdCB0aGUgb3RoZXIuXG4gICAgICAgIGlmICh0aGlzLmZldGNoZXIpIHtcbiAgICAgICAgICB0aGlzLmZldGNoZXIubm93S25vd25BcyhiaWcsIHNtYWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW92ZUluZGV4KHRoaXMuY2xhc3NBY3Rpb25zKTtcbiAgICAgIG1vdmVJbmRleCh0aGlzLnByb3BlcnR5QWN0aW9ucyk7XG4gICAgICAvLyBsb2cuZGVidWcoXCJFcXVhdGUgZG9uZS4gXCIrYmlnK1wiIHRvIGJlIGtub3duIGFzIFwiK3NtYWxsKVxuICAgICAgcmV0dXJuIHRydWU7IC8vIHRydWUgbWVhbnMgdGhlIHN0YXRlbWVudCBkb2VzIG5vdCBuZWVkIHRvIGJlIHB1dCBpblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgZXF1aXZhbGVudCBVUklzIGJ5IHdoaWNoIHRoaXMgaXMga25vd25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWxsQWxpYXNlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFsbEFsaWFzZXMoeCkge1xuICAgICAgdmFyIGEgPSB0aGlzLmFsaWFzZXNbdGhpcy5jYW5vbih4KS5oYXNoU3RyaW5nKCldIHx8IFtdO1xuICAgICAgYS5wdXNoKHRoaXMuY2Fub24oeCkpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZSBieSBjYW5vbmljYWwgVVJJIGFzIHNtdXNoZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2FtZVRoaW5ncycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhbWVUaGluZ3MoeCwgeSkge1xuICAgICAgaWYgKHguc2FtZVRlcm0oeSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgeDEgPSB0aGlzLmNhbm9uKHgpO1xuICAgICAgLy8gICAgYWxlcnQoJ3gxPScreDEpXG4gICAgICBpZiAoIXgxKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgeTEgPSB0aGlzLmNhbm9uKHkpO1xuICAgICAgLy8gICAgYWxlcnQoJ3kxPScreTEpOyAvL0BAXG4gICAgICBpZiAoIXkxKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4geDEudXJpID09PSB5MS51cmk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UHJlZml4Rm9yVVJJJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJlZml4Rm9yVVJJKHByZWZpeCwgbnN1cmkpIHtcbiAgICAgIC8vIFRPRE86IFRoaXMgaXMgYSBoYWNrIGZvciBvdXIgb3duIGlzc3Vlcywgd2hpY2ggb3VnaHQgdG8gYmUgZml4ZWRcbiAgICAgIC8vIHBvc3QtcmVsZWFzZVxuICAgICAgLy8gU2VlIGh0dHA6Ly9kaWcuY3NhaWwubWl0LmVkdS9jZ2ktYmluL3JvdW5kdXAuY2dpLyRyZGYvaXNzdWUyMjdcbiAgICAgIGlmIChwcmVmaXggPT09ICd0YWInICYmIHRoaXMubmFtZXNwYWNlc1sndGFiJ10pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUaGVyZSBhcmUgZmlsZXMgYXJvdW5kIHdpdGggbG9uZyBiYWRseSBnZW5lcmF0ZWQgcHJlZml4ZXMgbGlrZSB0aGlzXG4gICAgICBpZiAocHJlZml4LnNsaWNlKDAsIDIpID09PSAnbnMnIHx8IHByZWZpeC5zbGljZSgwLCA3KSA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZXNwYWNlc1twcmVmaXhdID0gbnN1cmk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHN0YXRlbWVudHMgbWF0Y2hpbmcgYSBwYXR0ZXJuXG4gICAgICogQUxMIENPTlZFTklFTkNFIExPT0tVUCBGVU5DVElPTlMgUkVMWSBPTiBUSElTIVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdGF0ZW1lbnRzTWF0Y2hpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0ZW1lbnRzTWF0Y2hpbmcoc3ViaiwgcHJlZCwgb2JqLCB3aHksIGp1c3RPbmUpIHtcbiAgICAgIC8vIGxvZy5kZWJ1ZyhcIk1hdGNoaW5nIHtcIitzdWJqK1wiIFwiK3ByZWQrXCIgXCIrb2JqK1wifVwiKVxuICAgICAgdmFyIHBhdCA9IFtzdWJqLCBwcmVkLCBvYmosIHdoeV07XG4gICAgICB2YXIgcGF0dGVybiA9IFtdO1xuICAgICAgdmFyIGhhc2ggPSBbXTtcbiAgICAgIHZhciB3aWxkID0gW107IC8vIHdpbGRjYXJkc1xuICAgICAgdmFyIGdpdmVuID0gW107IC8vIE5vdCB3aWxkXG4gICAgICB2YXIgcDtcbiAgICAgIHZhciBsaXN0O1xuICAgICAgZm9yIChwID0gMDsgcCA8IDQ7IHArKykge1xuICAgICAgICBwYXR0ZXJuW3BdID0gdGhpcy5jYW5vbihOb2RlLmZyb21WYWx1ZShwYXRbcF0pKTtcbiAgICAgICAgaWYgKCFwYXR0ZXJuW3BdKSB7XG4gICAgICAgICAgd2lsZC5wdXNoKHApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdpdmVuLnB1c2gocCk7XG4gICAgICAgICAgaGFzaFtwXSA9IHBhdHRlcm5bcF0uaGFzaFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZ2l2ZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHM7XG4gICAgICB9XG4gICAgICBpZiAoZ2l2ZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIEVhc3kgdG9vLCB3ZSBoYXZlIGFuIGluZGV4IGZvciB0aGF0XG4gICAgICAgIHAgPSBnaXZlblswXTtcbiAgICAgICAgbGlzdCA9IHRoaXMuaW5kZXhbcF1baGFzaFtwXV07XG4gICAgICAgIGlmIChsaXN0ICYmIGp1c3RPbmUpIHtcbiAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsaXN0ID0gbGlzdC5zbGljZSgwLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGlzdCA9IGxpc3QgfHwgW107XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfVxuICAgICAgLy8gTm93IGdpdmVuLmxlbmd0aCBpcyAyLCAzIG9yIDQuXG4gICAgICAvLyBXZSBob3BlIHRoYXQgdGhlIHNjYWxlLWZyZWUgbmF0dXJlIG9mIHRoZSBkYXRhIHdpbGwgbWVhbiB3ZSB0ZW5kIHRvIGdldFxuICAgICAgLy8gYSBzaG9ydCBpbmRleCBpbiB0aGVyZSBzb21ld2hlcmUhXG4gICAgICB2YXIgYmVzdCA9IDFlMTA7IC8vIHJlYWxseSBiYWRcbiAgICAgIHZhciBiZXN0X2k7XG4gICAgICB2YXIgaTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBnaXZlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBwID0gZ2l2ZW5baV07IC8vIFdoaWNoIHBhcnQgd2UgYXJlIGRlYWxpbmcgd2l0aFxuICAgICAgICBsaXN0ID0gdGhpcy5pbmRleFtwXVtoYXNoW3BdXTtcbiAgICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgICAgcmV0dXJuIFtdOyAvLyBObyBvY2N1cnJlbmNlc1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA8IGJlc3QpIHtcbiAgICAgICAgICBiZXN0ID0gbGlzdC5sZW5ndGg7XG4gICAgICAgICAgYmVzdF9pID0gaTsgLy8gKG5vdCBwISlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gT2ssIHdlIGhhdmUgcGlja2VkIHRoZSBzaG9ydGVzdCBpbmRleCBidXQgbm93IHdlIGhhdmUgdG8gZmlsdGVyIGl0XG4gICAgICB2YXIgYmVzdF9wID0gZ2l2ZW5bYmVzdF9pXTtcbiAgICAgIHZhciBwb3NzaWJsZXMgPSB0aGlzLmluZGV4W2Jlc3RfcF1baGFzaFtiZXN0X3BdXTtcbiAgICAgIHZhciBjaGVjayA9IGdpdmVuLnNsaWNlKDAsIGJlc3RfaSkuY29uY2F0KGdpdmVuLnNsaWNlKGJlc3RfaSArIDEpKTsgLy8gcmVtb3ZlIGJlc3RfaVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciBwYXJ0cyA9IFsnc3ViamVjdCcsICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgJ3doeSddO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwb3NzaWJsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIHN0ID0gcG9zc2libGVzW2pdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGVjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIGZvciBlYWNoIHBvc2l0aW9uIHRvIGJlIGNoZWNrZWRcbiAgICAgICAgICBwID0gY2hlY2tbaV07XG4gICAgICAgICAgaWYgKCF0aGlzLmNhbm9uKHN0W3BhcnRzW3BdXSkuc2FtZVRlcm0ocGF0dGVybltwXSkpIHtcbiAgICAgICAgICAgIHN0ID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3QgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChzdCk7XG4gICAgICAgICAgaWYgKGp1c3RPbmUpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQSBsaXN0IG9mIGFsbCB0aGUgVVJJcyBieSB3aGljaCB0aGlzIHRoaW5nIGlzIGtub3duXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VyaXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cmlzKHRlcm0pIHtcbiAgICAgIHZhciBjdGVybSA9IHRoaXMuY2Fub24odGVybSk7XG4gICAgICB2YXIgdGVybXMgPSB0aGlzLmFsaWFzZXNbY3Rlcm0uaGFzaFN0cmluZygpXTtcbiAgICAgIGlmICghY3Rlcm0udXJpKSByZXR1cm4gW107XG4gICAgICB2YXIgcmVzID0gW2N0ZXJtLnVyaV07XG4gICAgICBpZiAodGVybXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXJtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlcy5wdXNoKHRlcm1zW2ldLnVyaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMubGVuZ3RoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbmRleGVkRm9ybXVsYTtcbn0oRm9ybXVsYSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEluZGV4ZWRGb3JtdWxhO1xuXG5cbkluZGV4ZWRGb3JtdWxhLmhhbmRsZVJERlR5cGUgPSBoYW5kbGVSREZUeXBlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpzb25QYXJzZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcGFyc2VKU09OOiBmdW5jdGlvbiBwYXJzZUpTT04oZGF0YSwgc291cmNlLCBzdG9yZSkge1xuICAgICAgdmFyIHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0O1xuICAgICAgdmFyIGJub2RlcyA9IHt9O1xuICAgICAgdmFyIHdoeSA9IHN0b3JlLnN5bShzb3VyY2UpO1xuICAgICAgZm9yICh2YXIgeCBpbiBkYXRhKSB7XG4gICAgICAgIGlmICh4LmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgICBpZiAoYm5vZGVzW3hdKSB7XG4gICAgICAgICAgICBzdWJqZWN0ID0gYm5vZGVzW3hdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJqZWN0ID0gc3RvcmUuYm5vZGUoeCk7XG4gICAgICAgICAgICBibm9kZXNbeF0gPSBzdWJqZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJqZWN0ID0gc3RvcmUuc3ltKHgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVkcyA9IGRhdGFbeF07XG4gICAgICAgIGZvciAodmFyIHkgaW4gcHJlZHMpIHtcbiAgICAgICAgICB2YXIgb2JqZWN0cyA9IHByZWRzW3ldO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHN0b3JlLnN5bSh5KTtcbiAgICAgICAgICBmb3IgKHZhciB6IGluIG9iamVjdHMpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBvYmplY3RzW3pdO1xuICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSAndXJpJykge1xuICAgICAgICAgICAgICBvYmplY3QgPSBzdG9yZS5zeW0ob2JqLnZhbHVlKTtcbiAgICAgICAgICAgICAgc3RvcmUuYWRkKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCB3aHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoudHlwZSA9PT0gJ0JsYW5rTm9kZScpIHtcbiAgICAgICAgICAgICAgaWYgKGJub2Rlc1tvYmoudmFsdWVdKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gYm5vZGVzW29iai52YWx1ZV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gc3RvcmUuYm5vZGUob2JqLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBibm9kZXNbb2JqLnZhbHVlXSA9IG9iamVjdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdG9yZS5hZGQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIHdoeSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iai50eXBlID09PSAnTGl0ZXJhbCcpIHtcbiAgICAgICAgICAgICAgLy8gdmFyIGRhdGF0eXBlXG4gICAgICAgICAgICAgIGlmIChvYmouZGF0YXR5cGUpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBzdG9yZS5saXRlcmFsKG9iai52YWx1ZSwgdW5kZWZpbmVkLCBzdG9yZS5zeW0ob2JqLmRhdGF0eXBlKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLmxhbmcpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBzdG9yZS5saXRlcmFsKG9iai52YWx1ZSwgb2JqLmxhbmcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IHN0b3JlLmxpdGVyYWwob2JqLnZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdG9yZS5hZGQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIHdoeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Vycm9yOiB1bmV4cGVjdGVkIHRlcm10eXBlOiAnICsgei50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ganNvblBhcnNlcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ2xhc3NPcmRlciA9IHJlcXVpcmUoJy4vY2xhc3Mtb3JkZXInKTtcbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG52YXIgWFNEID0gcmVxdWlyZSgnLi94c2QnKTtcblxudmFyIExpdGVyYWwgPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKExpdGVyYWwsIF9Ob2RlKTtcblxuICBmdW5jdGlvbiBMaXRlcmFsKHZhbHVlLCBsYW5ndWFnZSwgZGF0YXR5cGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGl0ZXJhbCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGl0ZXJhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpdGVyYWwpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnRlcm1UeXBlID0gTGl0ZXJhbC50ZXJtVHlwZTtcbiAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgX3RoaXMubGFuZyA9IGxhbmd1YWdlO1xuICAgICAgZGF0YXR5cGUgPSBYU0QubGFuZ1N0cmluZztcbiAgICB9XG4gICAgLy8gSWYgbm90IHNwZWNpZmllZCwgYSBsaXRlcmFsIGhhcyB0aGUgaW1wbGllZCBYU0Quc3RyaW5nIGRlZmF1bHQgZGF0YXR5cGVcbiAgICBpZiAoZGF0YXR5cGUpIHtcbiAgICAgIF90aGlzLmRhdGF0eXBlID0gTmFtZWROb2RlLmZyb21WYWx1ZShkYXRhdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaXRlcmFsLCBbe1xuICAgIGtleTogJ2NvcHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KCkge1xuICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHRoaXMudmFsdWUsIHRoaXMubGFuZywgdGhpcy5kYXRhdHlwZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXF1YWxzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRlcm1UeXBlID09PSBvdGhlci50ZXJtVHlwZSAmJiB0aGlzLnZhbHVlID09PSBvdGhlci52YWx1ZSAmJiB0aGlzLmxhbmd1YWdlID09PSBvdGhlci5sYW5ndWFnZSAmJiAoIXRoaXMuZGF0YXR5cGUgJiYgIW90aGVyLmRhdGF0eXBlIHx8IHRoaXMuZGF0YXR5cGUgJiYgdGhpcy5kYXRhdHlwZS5lcXVhbHMob3RoZXIuZGF0YXR5cGUpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b05UJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9OVCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMudmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgb2YgUkRGIGxpdGVyYWwgaXMgbm90IHN0cmluZyBvciBudW1iZXI6ICcgKyB0aGlzLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHIgPSB0aGlzLnZhbHVlO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJyk7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxcIi9nLCAnXFxcXFwiJyk7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxuL2csICdcXFxcbicpO1xuICAgICAgc3RyID0gJ1wiJyArIHN0ciArICdcIic7XG5cbiAgICAgIGlmICh0aGlzLmxhbmd1YWdlKSB7XG4gICAgICAgIHN0ciArPSAnQCcgKyB0aGlzLmxhbmd1YWdlO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5kYXRhdHlwZS5lcXVhbHMoWFNELnN0cmluZykpIHtcbiAgICAgICAgLy8gT25seSBhZGQgZGF0YXR5cGUgaWYgaXQncyBub3QgYSBzdHJpbmdcbiAgICAgICAgc3RyICs9ICdeXicgKyB0aGlzLmRhdGF0eXBlLnRvQ2Fub25pY2FsKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJycgKyB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGZyb21Cb29sZWFuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB2YWx1ZSB7Qm9vbGVhbn1cbiAgICAgKiBAcmV0dXJuIHtMaXRlcmFsfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsYW5ndWFnZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYW5nO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobGFuZ3VhZ2UpIHtcbiAgICAgIHRoaXMubGFuZyA9IGxhbmd1YWdlIHx8ICcnO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZnJvbUJvb2xlYW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tQm9vbGVhbih2YWx1ZSkge1xuICAgICAgdmFyIHN0clZhbHVlID0gdmFsdWUgPyAnMScgOiAnMCc7XG4gICAgICByZXR1cm4gbmV3IExpdGVyYWwoc3RyVmFsdWUsIG51bGwsIFhTRC5ib29sZWFuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBmcm9tRGF0ZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0gdmFsdWUge0RhdGV9XG4gICAgICogQHJldHVybiB7TGl0ZXJhbH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZnJvbURhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRGF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHRvIExpdGVyYWwuZnJvbURhdGUoKScpO1xuICAgICAgfVxuICAgICAgdmFyIGQyID0gZnVuY3Rpb24gZDIoeCkge1xuICAgICAgICByZXR1cm4gKCcnICsgKDEwMCArIHgpKS5zbGljZSgxLCAzKTtcbiAgICAgIH07XG4gICAgICB2YXIgZGF0ZSA9ICcnICsgdmFsdWUuZ2V0VVRDRnVsbFllYXIoKSArICctJyArIGQyKHZhbHVlLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGQyKHZhbHVlLmdldFVUQ0RhdGUoKSkgKyAnVCcgKyBkMih2YWx1ZS5nZXRVVENIb3VycygpKSArICc6JyArIGQyKHZhbHVlLmdldFVUQ01pbnV0ZXMoKSkgKyAnOicgKyBkMih2YWx1ZS5nZXRVVENTZWNvbmRzKCkpICsgJ1onO1xuICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKGRhdGUsIG51bGwsIFhTRC5kYXRlVGltZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZnJvbU51bWJlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0gdmFsdWUge051bWJlcn1cbiAgICAgKiBAcmV0dXJuIHtMaXRlcmFsfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmcm9tTnVtYmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhcmd1bWVudCB0byBMaXRlcmFsLmZyb21OdW1iZXIoKScpO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGF0eXBlID0gdm9pZCAwO1xuICAgICAgdmFyIHN0clZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIGlmIChzdHJWYWx1ZS5pbmRleE9mKCdlJykgPCAwICYmIE1hdGguYWJzKHZhbHVlKSA8PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICBkYXRhdHlwZSA9IE51bWJlci5pc0ludGVnZXIodmFsdWUpID8gWFNELmludGVnZXIgOiBYU0QuZGVjaW1hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGF0eXBlID0gWFNELmRvdWJsZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbChzdHJWYWx1ZSwgbnVsbCwgZGF0YXR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGZyb21WYWx1ZVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0xpdGVyYWx9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Zyb21WYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIHZhbHVlLnRlcm1UeXBlKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBOb2RlIGluc3RhbmNlXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gTGl0ZXJhbC5mcm9tRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICByZXR1cm4gTGl0ZXJhbC5mcm9tQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgcmV0dXJuIExpdGVyYWwuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IG1ha2UgbGl0ZXJhbCBmcm9tIFwiICsgdmFsdWUgKyAnIG9mIHR5cGUgJyArICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXRlcmFsO1xufShOb2RlKTtcblxuTGl0ZXJhbC50ZXJtVHlwZSA9ICdMaXRlcmFsJztcbkxpdGVyYWwucHJvdG90eXBlLmNsYXNzT3JkZXIgPSBDbGFzc09yZGVyWydMaXRlcmFsJ107XG5MaXRlcmFsLnByb3RvdHlwZS5kYXRhdHlwZSA9IFhTRC5zdHJpbmc7XG5MaXRlcmFsLnByb3RvdHlwZS5sYW5nID0gJyc7XG5MaXRlcmFsLnByb3RvdHlwZS5pc1ZhciA9IDA7XG5cbm1vZHVsZS5leHBvcnRzID0gTGl0ZXJhbDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBBIER1bW15IGxvZ1xuICogQG1vZHVsZSBsb2dcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlYnVnOiBmdW5jdGlvbiBkZWJ1Zyh4KSB7XG4gICAgcmV0dXJuO1xuICB9LFxuICB3YXJuOiBmdW5jdGlvbiB3YXJuKHgpIHtcbiAgICByZXR1cm47XG4gIH0sXG4gIGluZm86IGZ1bmN0aW9uIGluZm8oeCkge1xuICAgIHJldHVybjtcbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHgpIHtcbiAgICByZXR1cm47XG4gIH0sXG4gIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoeCkge1xuICAgIHJldHVybjtcbiAgfSxcbiAgbXNnOiBmdW5jdGlvbiBtc2coeCkge1xuICAgIHJldHVybjtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyoqXG4qXG4qICBVVEYtOCBkYXRhIGVuY29kZSAvIGRlY29kZVxuKiAgaHR0cDovL3d3dy53ZWJ0b29sa2l0LmluZm8vXG4qXG4qKi9cbnZhciBVcmkgPSByZXF1aXJlKCcuL3VyaScpO1xudmFyIEFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vdXRpbCcpLkFycmF5SW5kZXhPZjtcblxudmFyIE4zUGFyc2VyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgZnVuY3Rpb24gaGV4aWZ5KHN0cikge1xuICAgICAgICAvLyBhbHNvIHVzZWQgaW4gcGFyc2VyXG4gICAgICAgIHJldHVybiBlbmNvZGVVUkkoc3RyKTtcbiAgICB9XG5cbiAgICB2YXIgVXRmOCA9IHtcbiAgICAgICAgLy8gcHVibGljIG1ldGhvZCBmb3IgdXJsIGVuY29kaW5nXG4gICAgICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKHN0cmluZykge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcblwiKTtcbiAgICAgICAgICAgIHZhciB1dGZ0ZXh0ID0gXCJcIjtcblxuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBzdHJpbmcubGVuZ3RoOyBuKyspIHtcblxuICAgICAgICAgICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQobik7XG5cbiAgICAgICAgICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID4gMTI3ICYmIGMgPCAyMDQ4KSB7XG4gICAgICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjID4+IDYgfCAxOTIpO1xuICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyAmIDYzIHwgMTI4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyA+PiAxMiB8IDIyNCk7XG4gICAgICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjID4+IDYgJiA2MyB8IDEyOCk7XG4gICAgICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICYgNjMgfCAxMjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHV0ZnRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2QgZm9yIHVybCBkZWNvZGluZ1xuICAgICAgICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZSh1dGZ0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICAgICAgd2hpbGUgKGkgPCB1dGZ0ZXh0Lmxlbmd0aCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGMgPSB1dGZ0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDMxKSA8PCA2IHwgdXRmdGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAmIDYzKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgMTUpIDw8IDEyIHwgKHV0ZnRleHQuY2hhckNvZGVBdChpICsgMSkgJiA2MykgPDwgNiB8IHV0ZnRleHQuY2hhckNvZGVBdChpICsgMikgJiA2Myk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICB9XG4gICAgfTsgLy8gVGhpbmdzIHdlIG5lZWQgdG8gZGVmaW5lIHRvIG1ha2UgY29udmVydGVkIHB5dGhuIGNvZGUgd29yayBpbiBqc1xuICAgIC8vIGVudmlyb25tZW50IG9mICRyZGZcblxuICAgIHZhciBSREZTaW5rX2ZvclNvbWVTeW0gPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC9sb2cjZm9yU29tZVwiO1xuICAgIHZhciBSREZTaW5rX2ZvckFsbFN5bSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL2xvZyNmb3JBbGxcIjtcbiAgICB2YXIgTG9naWNfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC9sb2cjXCI7XG5cbiAgICAvLyAgcHlqcyBzZWVtcyB0byByZWZlcmVuY2UgcnVudGltZSBsaWJyYXJ5IHdoaWNoIEkgZGlkbid0IGZpbmRcblxuICAgIHZhciBweWpzbGliX1R1cGxlID0gZnVuY3Rpb24gcHlqc2xpYl9UdXBsZSh0aGVMaXN0KSB7XG4gICAgICAgIHJldHVybiB0aGVMaXN0O1xuICAgIH07XG5cbiAgICB2YXIgcHlqc2xpYl9MaXN0ID0gZnVuY3Rpb24gcHlqc2xpYl9MaXN0KHRoZUxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoZUxpc3Q7XG4gICAgfTtcblxuICAgIHZhciBweWpzbGliX0RpY3QgPSBmdW5jdGlvbiBweWpzbGliX0RpY3QobGlzdE9mUGFpcnMpIHtcbiAgICAgICAgaWYgKGxpc3RPZlBhaXJzLmxlbmd0aCA+IDApIHRocm93IFwibWlzc2luZy5qczogb29wcyBubm9uZW1wdHkgZGljdCBub3QgaW1wXCI7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuXG4gICAgdmFyIHB5anNsaWJfbGVuID0gZnVuY3Rpb24gcHlqc2xpYl9sZW4ocykge1xuICAgICAgICByZXR1cm4gcy5sZW5ndGg7XG4gICAgfTtcblxuICAgIHZhciBweWpzbGliX3NsaWNlID0gZnVuY3Rpb24gcHlqc2xpYl9zbGljZShzdHIsIGksIGopIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIuc2xpY2UgPT0gJ3VuZGVmaW5lZCcpIHRocm93ICdAQCBtaXNpbmcuanM6IE5vIC5zbGljZSBmdW5jdGlvbiBmb3IgJyArIHN0ciArICcgb2YgdHlwZSAnICsgKHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0cikpO1xuICAgICAgICBpZiAodHlwZW9mIGogPT0gJ3VuZGVmaW5lZCcgfHwgaiA9PSBudWxsKSByZXR1cm4gc3RyLnNsaWNlKGkpO1xuICAgICAgICByZXR1cm4gc3RyLnNsaWNlKGksIGopOyAvLyBAIGV4YWN0bHkgdGhlIHNhbWUgc3BlYz9cbiAgICB9O1xuICAgIHZhciBTdG9wSXRlcmF0aW9uID0gRXJyb3IoJ2R1bW15IGVycm9yIHN0b3AgaXRlcmF0aW9uJyk7XG5cbiAgICB2YXIgcHlqc2xpYl9JdGVyYXRvciA9IGZ1bmN0aW9uIHB5anNsaWJfSXRlcmF0b3IodGhlTGlzdCkge1xuICAgICAgICB0aGlzLmxhc3QgPSAwO1xuICAgICAgICB0aGlzLmxpID0gdGhlTGlzdDtcbiAgICAgICAgdGhpcy5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdCA9PSB0aGlzLmxpLmxlbmd0aCkgdGhyb3cgU3RvcEl0ZXJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpW3RoaXMubGFzdCsrXTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHZhciBvcmQgPSBmdW5jdGlvbiBvcmQoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgwKTtcbiAgICB9O1xuXG4gICAgdmFyIHN0cmluZ19maW5kID0gZnVuY3Rpb24gc3RyaW5nX2ZpbmQoc3RyLCBzKSB7XG4gICAgICAgIHJldHVybiBzdHIuaW5kZXhPZihzKTtcbiAgICB9O1xuXG4gICAgdmFyIGFzc2VydEZ1ZGdlID0gZnVuY3Rpb24gYXNzZXJ0RnVkZ2UoY29uZGl0aW9uLCBkZXNjKSB7XG4gICAgICAgIGlmIChjb25kaXRpb24pIHJldHVybjtcbiAgICAgICAgaWYgKGRlc2MpIHRocm93IFwicHl0aG9uIEFzc2VydGlvbiBmYWlsZWQ6IFwiICsgZGVzYztcbiAgICAgICAgdGhyb3cgXCIocHl0aG9uKSBBc3NlcnRpb24gZmFpbGVkLlwiO1xuICAgIH07XG5cbiAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gZnVuY3Rpb24gc3RyaW5nRnJvbUNoYXJDb2RlKHVlc2MpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodWVzYyk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gICAgICAgIGlmIChlbmNvZGluZyAhPSAndXRmLTgnKSB0aHJvdyBcIlVURjhfY29udmVydGVyOiBjYW4gb25seSBkbyB1dGYtOFwiO1xuICAgICAgICByZXR1cm4gVXRmOC5lbmNvZGUodGhpcyk7XG4gICAgfTtcbiAgICBTdHJpbmcucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICAgICAgICBpZiAoZW5jb2RpbmcgIT0gJ3V0Zi04JykgdGhyb3cgXCJVVEY4X2NvbnZlcnRlcjogY2FuIG9ubHkgZG8gdXRmLThcIjtcbiAgICAgICAgLy9yZXR1cm4gVXRmOC5kZWNvZGUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICB2YXIgdXJpcGF0aF9qb2luID0gZnVuY3Rpb24gdXJpcGF0aF9qb2luKGJhc2UsIGdpdmVuKSB7XG4gICAgICAgIHJldHVybiBVcmkuam9pbihnaXZlbiwgYmFzZSk7IC8vIHNhZCBidXQgdHJ1ZVxuICAgIH07XG5cbiAgICB2YXIgYmVjYXVzZVN1YmV4cHJlc3Npb24gPSBudWxsOyAvLyBObyByZWFzb24gbmVlZGVkXG4gICAgdmFyIGRpYWdfdHJhY2tpbmcgPSAwO1xuICAgIHZhciBkaWFnX2NoYXR0eV9mbGFnID0gMDtcbiAgICB2YXIgZGlhZ19wcm9ncmVzcyA9IGZ1bmN0aW9uIGRpYWdfcHJvZ3Jlc3Moc3RyKSB7fSAvKiRyZGYubG9nLmRlYnVnKHN0cik7Ki9cblxuICAgIC8vIHdoeV9CZWNhdXNlT2ZEYXRhID0gZnVuY3Rpb24oZG9jLCByZWFzb24pIHsgcmV0dXJuIGRvYyB9O1xuXG5cbiAgICA7dmFyIFJERl90eXBlX1VSSSA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGVcIjtcbiAgICB2YXIgREFNTF9zYW1lQXNfVVJJID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAyLzA3L293bCNzYW1lQXNcIjtcblxuICAgIC8qXG4gICAgZnVuY3Rpb24gU3ludGF4RXJyb3IoZGV0YWlscykge1xuICAgICAgICByZXR1cm4gbmV3IF9fU3ludGF4RXJyb3IoZGV0YWlscyk7XG4gICAgfVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBfX1N5bnRheEVycm9yKGRldGFpbHMpIHtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB9XG5cbiAgICAvKlxuICAgIFxuICAgICRJZDogbjNwYXJzZXIuanMgMTQ1NjEgMjAwOC0wMi0yMyAwNjozNzoyNloga2VubnlsdWNrICRcbiAgICBcbiAgICBIQU5EIEVESVRFRCBGT1IgQ09OVkVSU0lPTiBUTyBKQVZBU0NSSVBUXG4gICAgXG4gICAgVGhpcyBtb2R1bGUgaW1wbGVtZW50cyBhIE5wdGF0aW9uMyBwYXJzZXIsIGFuZCB0aGUgZmluYWxcbiAgICBwYXJ0IG9mIGEgbm90YXRpb24zIHNlcmlhbGl6ZXIuXG4gICAgXG4gICAgU2VlIGFsc286XG4gICAgXG4gICAgTm90YXRpb24gM1xuICAgIGh0dHA6Ly93d3cudzMub3JnL0Rlc2lnbklzc3Vlcy9Ob3RhdGlvbjNcbiAgICBcbiAgICBDbG9zZWQgV29ybGQgTWFjaGluZSAtIGFuZCBSREYgUHJvY2Vzc29yXG4gICAgaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL2N3bVxuICAgIFxuICAgIFRvIERPOiBTZWUgYWxzbyBcIkBAXCIgaW4gY29tbWVudHNcbiAgICBcbiAgICAtIENsZWFuIHVwIGludGVyZmFjZXNcbiAgICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG4gICAgXG4gICAgTW9kdWxlIG9yaWdpbmFsbHkgYnkgRGFuIENvbm5vbGx5LCBpbmNsdWRlaW5nIG5vdGF0aW9uM1xuICAgIHBhcnNlciBhbmQgUkRGIGdlbmVyYXRvci4gVGltQkwgYWRkZWQgUkRGIHN0cmVhbSBtb2RlbFxuICAgIGFuZCBOMyBnZW5lcmF0aW9uLCByZXBsYWNlZCBzdHJlYW0gbW9kZWwgd2l0aCB1c2VcbiAgICBvZiBjb21tb24gc3RvcmUvZm9ybXVsYSBBUEkuICBZb3NpIFNjaGFyZiBkZXZlbG9wcGVkXG4gICAgdGhlIG1vZHVsZSwgaW5jbHVkaW5nIHRlc3RzIGFuZCB0ZXN0IGhhcm5lc3MuXG4gICAgXG4gICAgKi9cblxuICAgIHZhciBBRERFRF9IQVNIID0gXCIjXCI7XG4gICAgdmFyIExPR19pbXBsaWVzX1VSSSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL2xvZyNpbXBsaWVzXCI7XG4gICAgdmFyIElOVEVHRVJfREFUQVRZUEUgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2ludGVnZXJcIjtcbiAgICB2YXIgRkxPQVRfREFUQVRZUEUgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RvdWJsZVwiO1xuICAgIHZhciBERUNJTUFMX0RBVEFUWVBFID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkZWNpbWFsXCI7XG4gICAgdmFyIERBVEVfREFUQVRZUEUgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RhdGVcIjtcbiAgICB2YXIgREFURVRJTUVfREFUQVRZUEUgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RhdGVUaW1lXCI7XG4gICAgdmFyIEJPT0xFQU5fREFUQVRZUEUgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW5cIjtcbiAgICB2YXIgb3B0aW9uX25vcmVnZW4gPSAwO1xuICAgIHZhciBfbm90UU5hbWVDaGFycyA9IFwiXFx0XFxyXFxuICFcXFwiIyQlJicoKSouLCsvOzw9Pj9AW1xcXFxdXmB7fH1+XCI7XG4gICAgdmFyIF9ub3ROYW1lQ2hhcnMgPSBfbm90UU5hbWVDaGFycyArIFwiOlwiO1xuICAgIHZhciBfcmRmbnMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIjtcbiAgICB2YXIgTjNDb21tZW50Q2hhcmFjdGVyID0gXCIjXCI7XG4gICAgdmFyIGVvbCA9IG5ldyBSZWdFeHAoXCJeWyBcXFxcdF0qKCNbXlxcXFxuXSopP1xcXFxyP1xcXFxuXCIsICdnJyk7XG4gICAgdmFyIGVvZiA9IG5ldyBSZWdFeHAoXCJeWyBcXFxcdF0qKCNbXlxcXFxuXSopPyRcIiwgJ2cnKTtcbiAgICB2YXIgd3MgPSBuZXcgUmVnRXhwKFwiXlsgXFxcXHRdKlwiLCAnZycpO1xuICAgIHZhciBzaWduZWRfaW50ZWdlciA9IG5ldyBSZWdFeHAoXCJeWy0rXT9bMC05XStcIiwgJ2cnKTtcbiAgICB2YXIgbnVtYmVyX3N5bnRheCA9IG5ldyBSZWdFeHAoXCJeKFstK10/WzAtOV0rKShcXFxcLlswLTldKyk/KGVbLStdP1swLTldKyk/XCIsICdnJyk7XG4gICAgdmFyIGRhdGV0aW1lX3N5bnRheCA9IG5ldyBSZWdFeHAoJ15bMC05XVswLTldWzAtOV1bMC05XS1bMC05XVswLTldLVswLTldWzAtOV0oVFswLTldWzAtOV06WzAtOV1bMC05XSg6WzAtOV1bMC05XShcXFxcLlswLTldKik/KT8pP1o/Jyk7XG5cbiAgICB2YXIgZGlnaXRzdHJpbmcgPSBuZXcgUmVnRXhwKFwiXlswLTldK1wiLCAnZycpO1xuICAgIHZhciBpbnRlcmVzdGluZyA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFxcXFxcclxcXFxuXFxcXFxcXCJdXCIsICdnJyk7XG4gICAgdmFyIGxhbmdjb2RlID0gbmV3IFJlZ0V4cChcIl5bYS16QS1aMC05XSsoLVthLXpBLVowLTldKykqXCIsICdnJyk7XG4gICAgZnVuY3Rpb24gU2lua1BhcnNlcihzdG9yZSwgb3BlbkZvcm11bGEsIHRoaXNEb2MsIGJhc2VVUkksIGdlblByZWZpeCwgbWV0YVVSSSwgZmxhZ3MsIHdoeSkge1xuICAgICAgICByZXR1cm4gbmV3IF9fU2lua1BhcnNlcihzdG9yZSwgb3BlbkZvcm11bGEsIHRoaXNEb2MsIGJhc2VVUkksIGdlblByZWZpeCwgbWV0YVVSSSwgZmxhZ3MsIHdoeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fU2lua1BhcnNlcihzdG9yZSwgb3BlbkZvcm11bGEsIHRoaXNEb2MsIGJhc2VVUkksIGdlblByZWZpeCwgbWV0YVVSSSwgZmxhZ3MsIHdoeSkge1xuICAgICAgICBpZiAodHlwZW9mIG9wZW5Gb3JtdWxhID09ICd1bmRlZmluZWQnKSBvcGVuRm9ybXVsYSA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc0RvYyA9PSAndW5kZWZpbmVkJykgdGhpc0RvYyA9IFwiXCI7XG4gICAgICAgIGlmICh0eXBlb2YgYmFzZVVSSSA9PSAndW5kZWZpbmVkJykgYmFzZVVSSSA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgZ2VuUHJlZml4ID09ICd1bmRlZmluZWQnKSBnZW5QcmVmaXggPSBcIlwiO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGFVUkkgPT0gJ3VuZGVmaW5lZCcpIG1ldGFVUkkgPSBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIGZsYWdzID09ICd1bmRlZmluZWQnKSBmbGFncyA9IFwiXCI7XG4gICAgICAgIGlmICh0eXBlb2Ygd2h5ID09ICd1bmRlZmluZWQnKSB3aHkgPSBudWxsO1xuICAgICAgICAvKlxuICAgICAgICBub3RlOiBuYW1lc3BhY2UgbmFtZXMgc2hvdWxkICpub3QqIGVuZCBpbiAjO1xuICAgICAgICB0aGUgIyB3aWxsIGdldCBhZGRlZCBkdXJpbmcgcW5hbWUgcHJvY2Vzc2luZyAqL1xuXG4gICAgICAgIHRoaXMuX2JpbmRpbmdzID0gbmV3IHB5anNsaWJfRGljdChbXSk7XG4gICAgICAgIHRoaXMuX2ZsYWdzID0gZmxhZ3M7XG4gICAgICAgIGlmICh0aGlzRG9jICE9IFwiXCIpIHtcbiAgICAgICAgICAgIGFzc2VydEZ1ZGdlKHRoaXNEb2MuaW5kZXhPZihcIjpcIikgPj0gMCwgXCJEb2N1bWVudCBVUkkgbm90IGFic29sdXRlOiBcIiArIHRoaXNEb2MpO1xuICAgICAgICAgICAgdGhpcy5fYmluZGluZ3NbXCJcIl0gPSB0aGlzRG9jICsgXCIjXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgaWYgKGdlblByZWZpeCkge1xuICAgICAgICAgICAgc3RvcmUuc2V0R2VuUHJlZml4KGdlblByZWZpeCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGhpc0RvYyA9IHRoaXNEb2M7XG4gICAgICAgIHRoaXMuc291cmNlID0gc3RvcmUuc3ltKHRoaXNEb2MpO1xuICAgICAgICB0aGlzLmxpbmVzID0gMDtcbiAgICAgICAgdGhpcy5zdGF0ZW1lbnRDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuc3RhcnRPZkxpbmUgPSAwO1xuICAgICAgICB0aGlzLnByZXZpb3VzTGluZSA9IDA7XG4gICAgICAgIHRoaXMuX2dlblByZWZpeCA9IGdlblByZWZpeDtcbiAgICAgICAgdGhpcy5rZXl3b3JkcyA9IG5ldyBweWpzbGliX0xpc3QoW1wiYVwiLCBcInRoaXNcIiwgXCJiaW5kXCIsIFwiaGFzXCIsIFwiaXNcIiwgXCJvZlwiLCBcInRydWVcIiwgXCJmYWxzZVwiXSk7XG4gICAgICAgIHRoaXMua2V5d29yZHNTZXQgPSAwO1xuICAgICAgICB0aGlzLl9hbm9ueW1vdXNOb2RlcyA9IG5ldyBweWpzbGliX0RpY3QoW10pO1xuICAgICAgICB0aGlzLl92YXJpYWJsZXMgPSBuZXcgcHlqc2xpYl9EaWN0KFtdKTtcbiAgICAgICAgdGhpcy5fcGFyZW50VmFyaWFibGVzID0gbmV3IHB5anNsaWJfRGljdChbXSk7XG4gICAgICAgIHRoaXMuX3JlYXNvbiA9IHdoeTtcbiAgICAgICAgdGhpcy5fcmVhc29uMiA9IG51bGw7XG4gICAgICAgIGlmIChkaWFnX3RyYWNraW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFzb24yID0gd2h5X0JlY2F1c2VPZkRhdGEoc3RvcmUuc3ltKHRoaXNEb2MpLCB0aGlzLl9yZWFzb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlVVJJKSB7XG4gICAgICAgICAgICB0aGlzLl9iYXNlVVJJID0gYmFzZVVSSTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzRG9jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmFzZVVSSSA9IHRoaXNEb2M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Jhc2VVUkkgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEZ1ZGdlKCF0aGlzLl9iYXNlVVJJIHx8IHRoaXMuX2Jhc2VVUkkuaW5kZXhPZihcIjpcIikgPj0gMCk7XG4gICAgICAgIGlmICghdGhpcy5fZ2VuUHJlZml4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGhpc0RvYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlblByZWZpeCA9IHRoaXMuX3RoaXNEb2MgKyBcIiNfZ1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW5QcmVmaXggPSBSREZTaW5rX3VuaXF1ZVVSSSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVuRm9ybXVsYSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGhpc0RvYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm11bGEgPSBzdG9yZS5mb3JtdWxhKHRoaXNEb2MgKyBcIiNfZm9ybXVsYVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybXVsYSA9IHN0b3JlLmZvcm11bGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Zvcm11bGEgPSBvcGVuRm9ybXVsYTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZXh0ID0gdGhpcy5fZm9ybXVsYTtcbiAgICAgICAgdGhpcy5fcGFyZW50Q29udGV4dCA9IG51bGw7XG4gICAgfVxuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuaGVyZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW5QcmVmaXggKyBcIl9MXCIgKyB0aGlzLmxpbmVzICsgXCJDXCIgKyAoaSAtIHRoaXMuc3RhcnRPZkxpbmUgKyAxKTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuZm9ybXVsYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm11bGE7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLmxvYWRTdHJlYW0gPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRCdWYoc3RyZWFtLnJlYWQoKSk7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLmxvYWRCdWYgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgICAgIC8qXG4gICAgICAgIFBhcnNlcyBhIGJ1ZmZlciBhbmQgcmV0dXJucyBpdHMgdG9wIGxldmVsIGZvcm11bGEqL1xuXG4gICAgICAgIHRoaXMuc3RhcnREb2MoKTtcbiAgICAgICAgdGhpcy5mZWVkKGJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZERvYygpO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5mZWVkID0gZnVuY3Rpb24gKG9jdGV0cykge1xuICAgICAgICAvKlxuICAgICAgICBGZWVkIGFuIG9jdGV0IHN0cmVhbSB0b3RoZSBwYXJzZXJcbiAgICAgICAgIGlmIEJhZFN5bnRheCBpcyByYWlzZWQsIHRoZSBzdHJpbmdcbiAgICAgICAgcGFzc2VkIGluIHRoZSBleGNlcHRpb24gb2JqZWN0IGlzIHRoZVxuICAgICAgICByZW1haW5kZXIgYWZ0ZXIgYW55IHN0YXRlbWVudHMgaGF2ZSBiZWVuIHBhcnNlZC5cbiAgICAgICAgU28gaWYgdGhlcmUgaXMgbW9yZSBkYXRhIHRvIGZlZWQgdG8gdGhlXG4gICAgICAgIHBhcnNlciwgaXQgc2hvdWxkIGJlIHN0cmFpZ2h0Zm9yd2FyZCB0byByZWNvdmVyLiovXG5cbiAgICAgICAgdmFyIHN0ciA9IG9jdGV0cy5kZWNvZGUoXCJ1dGYtOFwiKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuZGlyZWN0aXZlT3JTdGF0ZW1lbnQoc3RyLCBqKTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiZXhwZWN0ZWQgZGlyZWN0aXZlIG9yIHN0YXRlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5kaXJlY3RpdmVPclN0YXRlbWVudCA9IGZ1bmN0aW9uIChzdHIsIGgpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLnNraXBTcGFjZShzdHIsIGgpO1xuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy5kaXJlY3RpdmUoc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tEb3Qoc3RyLCBqKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaiA9IHRoaXMuc3RhdGVtZW50KHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrRG90KHN0ciwgaik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLnRvayA9IGZ1bmN0aW9uICh0b2ssIHN0ciwgaSkge1xuICAgICAgICAvKlxuICAgICAgICBDaGVjayBmb3Iga2V5d29yZC4gIFNwYWNlIG11c3QgaGF2ZSBiZWVuIHN0cmlwcGVkIG9uIGVudHJ5IGFuZFxuICAgICAgICB3ZSBtdXN0IG5vdCBiZSBhdCBlbmQgb2YgZmlsZS4qL1xuICAgICAgICB2YXIgd2hpdGVzcGFjZSA9IFwiXFx0XFxuXFx2XFxmXFxyIFwiO1xuICAgICAgICBpZiAocHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyAxKSA9PSBcIkBcIikge1xuICAgICAgICAgICAgdmFyIGkgPSBpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChBcnJheUluZGV4T2YodGhpcy5rZXl3b3JkcywgdG9rKSA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGsgPSBpICsgcHlqc2xpYl9sZW4odG9rKTtcbiAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBrKSA9PSB0b2sgJiYgX25vdFFOYW1lQ2hhcnMuaW5kZXhPZihzdHIuY2hhckF0KGspKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5kaXJlY3RpdmUgPSBmdW5jdGlvbiAoc3RyLCBpKSB7XG4gICAgICAgIHZhciBqID0gdGhpcy5za2lwU3BhY2Uoc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJiaW5kXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJrZXl3b3JkIGJpbmQgaXMgb2Jzb2xldGU6IHVzZSBAcHJlZml4XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJrZXl3b3Jkc1wiLCBzdHIsIGkpO1xuICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5jb21tYVNlcGFyYXRlZExpc3Qoc3RyLCBqLCByZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiJ0BrZXl3b3JkcycgbmVlZHMgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2Ygd29yZHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldEtleXdvcmRzKHB5anNsaWJfc2xpY2UocmVzLCBudWxsLCBudWxsKSk7XG4gICAgICAgICAgICBpZiAoZGlhZ19jaGF0dHlfZmxhZyA+IDgwKSB7XG4gICAgICAgICAgICAgICAgZGlhZ19wcm9ncmVzcyhcIktleXdvcmRzIFwiLCB0aGlzLmtleXdvcmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJmb3JBbGxcIiwgc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuY29tbWFTZXBhcmF0ZWRMaXN0KHN0ciwgaiwgcmVzLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiQmFkIHZhcmlhYmxlIGxpc3QgYWZ0ZXIgQGZvckFsbFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9feCA9IG5ldyBweWpzbGliX0l0ZXJhdG9yKHJlcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gX194Lm5leHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXlJbmRleE9mKHRoaXMuX3ZhcmlhYmxlcywgeCkgPCAwIHx8IEFycmF5SW5kZXhPZih0aGlzLl9wYXJlbnRWYXJpYWJsZXMsIHgpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlc1t4XSA9IHRoaXMuX2NvbnRleHQubmV3VW5pdmVyc2FsKHgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlICE9IFN0b3BJdGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJmb3JTb21lXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmNvbW1hU2VwYXJhdGVkTGlzdChzdHIsIGosIHJlcywgdGhpcy51cmlfcmVmMik7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcIkJhZCB2YXJpYWJsZSBsaXN0IGFmdGVyIEBmb3JTb21lXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgX194ID0gbmV3IHB5anNsaWJfSXRlcmF0b3IocmVzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBfX3gubmV4dCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZGVjbGFyZUV4aXN0ZW50aWFsKHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSAhPSBTdG9wSXRlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaiA9IHRoaXMudG9rKFwicHJlZml4XCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMucW5hbWUoc3RyLCBqLCB0KTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiZXhwZWN0ZWQgcW5hbWUgYWZ0ZXIgQHByZWZpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBqID0gdGhpcy51cmlfcmVmMihzdHIsIGksIHQpO1xuICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJleHBlY3RlZCA8dXJpcmVmPiBhZnRlciBAcHJlZml4IF9xbmFtZV9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbnMgPSB0WzFdLnVyaTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9iYXNlVVJJKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5zID0gdXJpcGF0aF9qb2luKHRoaXMuX2Jhc2VVUkksIG5zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0RnVkZ2UobnMuaW5kZXhPZihcIjpcIikgPj0gMCwgXCJXaXRoIG5vIGJhc2UgVVJJLCBjYW5ub3QgaGFuZGxlIHJlbGF0aXZlIFVSSSBmb3IgTlNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRGdWRnZShucy5pbmRleE9mKFwiOlwiKSA+PSAwKTtcbiAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzW3RbMF1bMF1dID0gbnM7XG5cbiAgICAgICAgICAgIHRoaXMuYmluZCh0WzBdWzBdLCBoZXhpZnkobnMpKTtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJiYXNlXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHZhciB0ID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMudXJpX3JlZjIoc3RyLCBqLCB0KTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiZXhwZWN0ZWQgPHVyaT4gYWZ0ZXIgQGJhc2UgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5zID0gdFswXS51cmk7XG4gICAgICAgICAgICBpZiAodGhpcy5fYmFzZVVSSSkge1xuICAgICAgICAgICAgICAgIHZhciBucyA9IHVyaXBhdGhfam9pbih0aGlzLl9iYXNlVVJJLCBucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiV2l0aCBubyBwcmV2aW91cyBiYXNlIFVSSSwgY2Fubm90IHVzZSByZWxhdGl2ZSBVUkkgaW4gQGJhc2UgIDxcIiArIG5zICsgXCI+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0RnVkZ2UobnMuaW5kZXhPZihcIjpcIikgPj0gMCk7XG4gICAgICAgICAgICB0aGlzLl9iYXNlVVJJID0gbnM7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAocW4sIHVyaSkge1xuICAgICAgICBpZiAocW4gPT0gXCJcIikge30gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdG9yZS5zZXRQcmVmaXhGb3JVUkkocW4sIHVyaSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuc2V0S2V5d29yZHMgPSBmdW5jdGlvbiAoaykge1xuICAgICAgICAvKlxuICAgICAgICBUYWtlcyBhIGxpc3Qgb2Ygc3RyaW5ncyovXG5cbiAgICAgICAgaWYgKGsgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5rZXl3b3Jkc1NldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmtleXdvcmRzID0gaztcbiAgICAgICAgICAgIHRoaXMua2V5d29yZHNTZXQgPSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLnN0YXJ0RG9jID0gZnVuY3Rpb24gKCkge307XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5lbmREb2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qXG4gICAgICAgIFNpZ25hbCBlbmQgb2YgZG9jdW1lbnQgYW5kIHN0b3AgcGFyc2luZy4gcmV0dXJucyBmb3JtdWxhKi9cblxuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybXVsYTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUubWFrZVN0YXRlbWVudCA9IGZ1bmN0aW9uIChxdWFkKSB7XG4gICAgICAgIHF1YWRbMF0uYWRkKHF1YWRbMl0sIHF1YWRbMV0sIHF1YWRbM10sIHRoaXMuc291cmNlKTtcbiAgICAgICAgdGhpcy5zdGF0ZW1lbnRDb3VudCArPSAxO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5zdGF0ZW1lbnQgPSBmdW5jdGlvbiAoc3RyLCBpKSB7XG4gICAgICAgIHZhciByID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgIHZhciBpID0gdGhpcy5vYmplY3Qoc3RyLCBpLCByKTtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaiA9IHRoaXMucHJvcGVydHlfbGlzdChzdHIsIGksIHJbMF0pO1xuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiZXhwZWN0ZWQgcHJvcGVydHlsaXN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5zdWJqZWN0ID0gZnVuY3Rpb24gKHN0ciwgaSwgcmVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW0oc3RyLCBpLCByZXMpO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS52ZXJiID0gZnVuY3Rpb24gKHN0ciwgaSwgcmVzKSB7XG4gICAgICAgIC8qXG4gICAgICAgIGhhcyBfcHJvcF9cbiAgICAgICAgaXMgX3Byb3BfIG9mXG4gICAgICAgIGFcbiAgICAgICAgPVxuICAgICAgICBfcHJvcF9cbiAgICAgICAgPi0gcHJvcCAtPlxuICAgICAgICA8LSBwcm9wIC08XG4gICAgICAgIF9vcGVyYXRvcl8qL1xuXG4gICAgICAgIHZhciBqID0gdGhpcy5za2lwU3BhY2Uoc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICB2YXIgaiA9IHRoaXMudG9rKFwiaGFzXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5wcm9wKHN0ciwgaiwgcik7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcImV4cGVjdGVkIHByb3BlcnR5IGFmdGVyICdoYXMnXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW1wiLT5cIiwgclswXV0pKTtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJpc1wiLCBzdHIsIGkpO1xuICAgICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMucHJvcChzdHIsIGosIHIpO1xuICAgICAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaiwgXCJleHBlY3RlZCA8cHJvcGVydHk+IGFmdGVyICdpcydcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcIkVuZCBvZiBmaWxlIGZvdW5kLCBleHBlY3RlZCBwcm9wZXJ0eSBhZnRlciAnaXMnXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgICAgdmFyIGogPSB0aGlzLnRvayhcIm9mXCIsIHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcImV4cGVjdGVkICdvZicgYWZ0ZXIgJ2lzJyA8cHJvcD5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMucHVzaChuZXcgcHlqc2xpYl9UdXBsZShbXCI8LVwiLCByWzBdXSkpO1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSB0aGlzLnRvayhcImFcIiwgc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPj0gMCkge1xuICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW1wiLT5cIiwgdGhpcy5fc3RvcmUuc3ltKFJERl90eXBlX1VSSSldKSk7XG4gICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyAyKSA9PSBcIjw9XCIpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBweWpzbGliX1R1cGxlKFtcIjwtXCIsIHRoaXMuX3N0b3JlLnN5bShMb2dpY19OUyArIFwiaW1wbGllc1wiKV0pKTtcbiAgICAgICAgICAgIHJldHVybiBpICsgMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyAxKSA9PSBcIj1cIikge1xuICAgICAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpICsgMSwgaSArIDIpID09IFwiPlwiKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW1wiLT5cIiwgdGhpcy5fc3RvcmUuc3ltKExvZ2ljX05TICsgXCJpbXBsaWVzXCIpXSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpICsgMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBweWpzbGliX1R1cGxlKFtcIi0+XCIsIHRoaXMuX3N0b3JlLnN5bShEQU1MX3NhbWVBc19VUkkpXSkpO1xuICAgICAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDIpID09IFwiOj1cIikge1xuICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW1wiLT5cIiwgTG9naWNfTlMgKyBcImJlY29tZXNcIl0pKTtcbiAgICAgICAgICAgIHJldHVybiBpICsgMjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaiA9IHRoaXMucHJvcChzdHIsIGksIHIpO1xuICAgICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgICAgICByZXMucHVzaChuZXcgcHlqc2xpYl9UdXBsZShbXCItPlwiLCByWzBdXSkpO1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBpICsgMikgPT0gXCI+LVwiIHx8IHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBpICsgMikgPT0gXCI8LVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcIj4tIC4uLiAtPiBzeW50YXggaXMgb2Jzb2xldGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUucHJvcCA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtKHN0ciwgaSwgcmVzKTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuaXRlbSA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoKHN0ciwgaSwgcmVzKTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuYmxhbmtOb2RlID0gZnVuY3Rpb24gKHVyaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5ibm9kZSh1cmksIHRoaXMuX3JlYXNvbjIpO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gKHN0ciwgaSwgcmVzKSB7XG4gICAgICAgIC8qXG4gICAgICAgIFBhcnNlIHRoZSBwYXRoIHByb2R1Y3Rpb24uXG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIGogPSB0aGlzLm5vZGVPckxpdGVyYWwoc3RyLCBpLCByZXMpO1xuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChcIiFeLlwiLmluZGV4T2YocHlqc2xpYl9zbGljZShzdHIsIGosIGogKyAxKSkgPj0gMCkge1xuICAgICAgICAgICAgdmFyIGNoID0gcHlqc2xpYl9zbGljZShzdHIsIGosIGogKyAxKTtcbiAgICAgICAgICAgIGlmIChjaCA9PSBcIi5cIikge1xuICAgICAgICAgICAgICAgIHZhciBhaGVhZCA9IHB5anNsaWJfc2xpY2Uoc3RyLCBqICsgMSwgaiArIDIpO1xuICAgICAgICAgICAgICAgIGlmICghYWhlYWQgfHwgX25vdE5hbWVDaGFycy5pbmRleE9mKGFoZWFkKSA+PSAwICYmIFwiOj88W3soXCIuaW5kZXhPZihhaGVhZCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdWJqID0gcmVzLnBvcCgpO1xuICAgICAgICAgICAgdmFyIG9iaiA9IHRoaXMuYmxhbmtOb2RlKHRoaXMuaGVyZShqKSk7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMubm9kZShzdHIsIGogKyAxLCByZXMpO1xuICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaiwgXCJFT0YgZm91bmQgaW4gbWlkZGxlIG9mIHBhdGggc3ludGF4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByZWQgPSByZXMucG9wKCk7XG4gICAgICAgICAgICBpZiAoY2ggPT0gXCJeXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VTdGF0ZW1lbnQobmV3IHB5anNsaWJfVHVwbGUoW3RoaXMuX2NvbnRleHQsIHByZWQsIG9iaiwgc3Vial0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlU3RhdGVtZW50KG5ldyBweWpzbGliX1R1cGxlKFt0aGlzLl9jb250ZXh0LCBwcmVkLCBzdWJqLCBvYmpdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMucHVzaChvYmopO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5hbm9ueW1vdXNOb2RlID0gZnVuY3Rpb24gKGxuKSB7XG4gICAgICAgIC8qXG4gICAgICAgIFJlbWVtYmVyIG9yIGdlbmVyYXRlIGEgdGVybSBmb3Igb25lIG9mIHRoZXNlIF86IGFub255bW91cyBub2RlcyovXG5cbiAgICAgICAgdmFyIHRlcm0gPSB0aGlzLl9hbm9ueW1vdXNOb2Rlc1tsbl07XG4gICAgICAgIGlmICh0ZXJtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVybTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGVybSA9IHRoaXMuX3N0b3JlLmJub2RlKHRoaXMuX2NvbnRleHQsIHRoaXMuX3JlYXNvbjIpO1xuICAgICAgICB0aGlzLl9hbm9ueW1vdXNOb2Rlc1tsbl0gPSB0ZXJtO1xuICAgICAgICByZXR1cm4gdGVybTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcywgc3ViamVjdEFscmVhZHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJqZWN0QWxyZWFkeSA9PSAndW5kZWZpbmVkJykgc3ViamVjdEFscmVhZHkgPSBudWxsO1xuICAgICAgICAvKlxuICAgICAgICBQYXJzZSB0aGUgPG5vZGU+IHByb2R1Y3Rpb24uXG4gICAgICAgIFNwYWNlIGlzIG5vdyBza2lwcGVkIG9uY2UgYXQgdGhlIGJlZ2lubmluZ1xuICAgICAgICBpbnN0ZWFkIG9mIGluIG11bHRpcGUgY2FsbHMgdG8gc2VsZi5za2lwU3BhY2UoKS5cbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgc3ViaiA9IHN1YmplY3RBbHJlYWR5O1xuICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICB2YXIgY2ggPSBweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDEpO1xuICAgICAgICBpZiAoY2ggPT0gXCJbXCIpIHtcbiAgICAgICAgICAgIHZhciBibm9kZUlEID0gdGhpcy5oZXJlKGkpO1xuICAgICAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkgKyAxKTtcbiAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiRU9GIGFmdGVyICdbJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpID09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBqICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgb2JqcyA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICAgICAgICAgIHZhciBqID0gdGhpcy5vYmplY3RMaXN0KHN0ciwgaSwgb2Jqcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJqID0gb2Jqc1swXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB5anNsaWJfbGVuKG9ianMpID4gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX19vYmogPSBuZXcgcHlqc2xpYl9JdGVyYXRvcihvYmpzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IF9fb2JqLm5leHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ha2VTdGF0ZW1lbnQobmV3IHB5anNsaWJfVHVwbGUoW3RoaXMuX2NvbnRleHQsIHRoaXMuX3N0b3JlLnN5bShEQU1MX3NhbWVBc19VUkkpLCBzdWJqLCBvYmpdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlICE9IFN0b3BJdGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGopO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiRU9GIHdoZW4gb2JqZWN0TGlzdCBleHBlY3RlZCBhZnRlciBbID0gXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpID09IFwiO1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IGogKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJvYmplY3RMaXN0IGV4cGVjdGVkIGFmdGVyIFs9IFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3ViaiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YmogPSB0aGlzLmJsYW5rTm9kZShibm9kZUlEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5wcm9wZXJ0eV9saXN0KHN0ciwgaiwgc3Viaik7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcInByb3BlcnR5X2xpc3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcIkVPRiB3aGVuICddJyBleHBlY3RlZCBhZnRlciBbIDxwcm9wZXJ0eUxpc3Q+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBqICsgMSkgIT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcIiddJyBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5wdXNoKHN1YmopO1xuICAgICAgICAgICAgcmV0dXJuIGogKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PSBcIntcIikge1xuICAgICAgICAgICAgdmFyIGNoMiA9IHB5anNsaWJfc2xpY2Uoc3RyLCBpICsgMSwgaSArIDIpO1xuICAgICAgICAgICAgaWYgKGNoMiA9PSBcIiRcIikge1xuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciBteWxpc3QgPSBuZXcgcHlqc2xpYl9MaXN0KFtdKTtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RfcnVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJuZWVkZWQgJyR9JywgZm91bmQgZW5kLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyAyKSA9PSBcIiR9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqID0gaSArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0X3J1bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBpICsgMSkgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiZXhwZWN0ZWQ6ICcsJ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdF9ydW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IHRoaXMuaXRlbShzdHIsIGksIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiZXhwZWN0ZWQgaXRlbSBpbiBzZXQgb3IgJyR9J1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBteWxpc3QucHVzaChpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzLnB1c2godGhpcy5fc3RvcmUubmV3U2V0KG15bGlzdCwgdGhpcy5fY29udGV4dCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciBvbGRQYXJlbnRDb250ZXh0ID0gdGhpcy5fcGFyZW50Q29udGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRDb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50QW5vbnltb3VzTm9kZXMgPSB0aGlzLl9hbm9ueW1vdXNOb2RlcztcbiAgICAgICAgICAgICAgICB2YXIgZ3JhbmRQYXJlbnRWYXJpYWJsZXMgPSB0aGlzLl9wYXJlbnRWYXJpYWJsZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50VmFyaWFibGVzID0gdGhpcy5fdmFyaWFibGVzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fub255bW91c05vZGVzID0gbmV3IHB5anNsaWJfRGljdChbXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGVzID0gdGhpcy5fdmFyaWFibGVzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlYXNvbjIgPSB0aGlzLl9yZWFzb24yO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYXNvbjIgPSBiZWNhdXNlU3ViZXhwcmVzc2lvbjtcbiAgICAgICAgICAgICAgICBpZiAoc3ViaiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJqID0gdGhpcy5fc3RvcmUuZm9ybXVsYSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gc3ViajtcbiAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJuZWVkZWQgJ30nLCBmb3VuZCBlbmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDEpID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGogPSB0aGlzLmRpcmVjdGl2ZU9yU3RhdGVtZW50KHN0ciwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJleHBlY3RlZCBzdGF0ZW1lbnQgb3IgJ30nXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2Fub255bW91c05vZGVzID0gcGFyZW50QW5vbnltb3VzTm9kZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGVzID0gdGhpcy5fcGFyZW50VmFyaWFibGVzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudFZhcmlhYmxlcyA9IGdyYW5kUGFyZW50VmFyaWFibGVzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQgPSB0aGlzLl9wYXJlbnRDb250ZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYXNvbjIgPSByZWFzb24yO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudENvbnRleHQgPSBvbGRQYXJlbnRDb250ZXh0O1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHN1YmouY2xvc2UoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09IFwiKFwiKSB7XG4gICAgICAgICAgICB2YXIgdGhpbmdfdHlwZSA9IHRoaXMuX3N0b3JlLmxpc3Q7XG4gICAgICAgICAgICB2YXIgY2gyID0gcHlqc2xpYl9zbGljZShzdHIsIGkgKyAxLCBpICsgMik7XG4gICAgICAgICAgICBpZiAoY2gyID09IFwiJFwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaW5nX3R5cGUgPSB0aGlzLl9zdG9yZS5uZXdTZXQ7XG4gICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGogPSBpICsgMTtcbiAgICAgICAgICAgIHZhciBteWxpc3QgPSBuZXcgcHlqc2xpYl9MaXN0KFtdKTtcbiAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLnNraXBTcGFjZShzdHIsIGopO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcIm5lZWRlZCAnKScsIGZvdW5kIGVuZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDEpID09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICAgICAgICAgIHZhciBqID0gdGhpcy5pdGVtKHN0ciwgaSwgaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiZXhwZWN0ZWQgaXRlbSBpbiBsaXN0IG9yICcpJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbXlsaXN0LnB1c2goaXRlbVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMucHVzaCh0aGluZ190eXBlKG15bGlzdCwgdGhpcy5fY29udGV4dCkpO1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSB0aGlzLnRvayhcInRoaXNcIiwgc3RyLCBpKTtcbiAgICAgICAgaWYgKGogPj0gMCkge1xuICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJLZXl3b3JkICd0aGlzJyB3YXMgYW5jaWVudCBOMy4gTm93IHVzZSBAZm9yU29tZSBhbmQgQGZvckFsbCBrZXl3b3Jkcy5cIik7XG4gICAgICAgICAgICByZXMucHVzaCh0aGlzLl9jb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gdGhpcy50b2soXCJ0cnVlXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSB0aGlzLnRvayhcImZhbHNlXCIsIHN0ciwgaSk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJqID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBqID0gdGhpcy51cmlfcmVmMihzdHIsIGksIHJlcyk7XG4gICAgICAgICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5wcm9wZXJ0eV9saXN0ID0gZnVuY3Rpb24gKHN0ciwgaSwgc3Viaikge1xuICAgICAgICAvKlxuICAgICAgICBQYXJzZSBwcm9wZXJ0eSBsaXN0XG4gICAgICAgIExlYXZlcyB0aGUgdGVybWluYXRpbmcgcHVuY3R1YXRpb24gaW4gdGhlIGJ1ZmZlclxuICAgICAgICAqL1xuXG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcIkVPRiBmb3VuZCB3aGVuIGV4cGVjdGVkIHZlcmIgaW4gcHJvcGVydHkgbGlzdFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDIpID09IFwiOi1cIikge1xuICAgICAgICAgICAgICAgIHZhciBpID0gaiArIDI7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICAgICAgICAgIHZhciBqID0gdGhpcy5ub2RlKHN0ciwgaSwgcmVzLCBzdWJqKTtcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJiYWQge30gb3IgKCkgb3IgW10gbm9kZSBhZnRlciA6LSBcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpID0gajtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpID0gajtcbiAgICAgICAgICAgIHZhciB2ID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMudmVyYihzdHIsIGksIHYpO1xuICAgICAgICAgICAgaWYgKGogPD0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ianMgPSBuZXcgcHlqc2xpYl9MaXN0KFtdKTtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5vYmplY3RMaXN0KHN0ciwgaiwgb2Jqcyk7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcIm9iamVjdExpc3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfX29iaiA9IG5ldyBweWpzbGliX0l0ZXJhdG9yKG9ianMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gX19vYmoubmV4dCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWlyRnVkZ2UgPSB2WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gcGFpckZ1ZGdlWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ltID0gcGFpckZ1ZGdlWzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyID09IFwiLT5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWtlU3RhdGVtZW50KG5ldyBweWpzbGliX1R1cGxlKFt0aGlzLl9jb250ZXh0LCBzeW0sIHN1YmosIG9ial0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZVN0YXRlbWVudChuZXcgcHlqc2xpYl9UdXBsZShbdGhpcy5fY29udGV4dCwgc3ltLCBvYmosIHN1YmpdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgIT0gU3RvcEl0ZXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkpO1xuICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaiwgXCJFT0YgZm91bmQgaW4gbGlzdCBvZiBvYmplY3RzXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBpICsgMSkgIT0gXCI7XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpID0gaSArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuY29tbWFTZXBhcmF0ZWRMaXN0ID0gZnVuY3Rpb24gKHN0ciwgaiwgcmVzLCBvZlVyaXMpIHtcbiAgICAgICAgLypcbiAgICAgICAgcmV0dXJuIHZhbHVlOiAtMSBiYWQgc3ludGF4OyA+MSBuZXcgcG9zaXRpb24gaW4gc3RyXG4gICAgICAgIHJlcyBoYXMgdGhpbmdzIGZvdW5kIGFwcGVuZGVkXG4gICAgICAgICBVc2VkIHRvIHVzZSBhIGZpbmFsIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQsIGUuZy4gdGhpcy5iYXJlV29yZFxuICAgICAgICBidXQgcGFzc2luZyB0aGUgZnVuY3Rpb24gZGlkbid0IHdvcmsgZm8ganMgY29udmVyaW9uIHB5anNcbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgaSA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaik7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJFT0YgZm91bmQgZXhwZWN0aW5nIGNvbW1hIHNlcCBsaXN0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoaSkgPT0gXCIuXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZlVyaXMpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy51cmlfcmVmMihzdHIsIGksIHJlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuYmFyZVdvcmQoc3RyLCBpLCByZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaCA9IHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBqICsgMSk7XG4gICAgICAgICAgICBpZiAoY2ggIT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ggIT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZlVyaXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMudXJpX3JlZjIoc3RyLCBqICsgMSwgcmVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmJhcmVXb3JkKHN0ciwgaiArIDEsIHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcImJhZCBsaXN0IGNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUub2JqZWN0TGlzdCA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICB2YXIgaSA9IHRoaXMub2JqZWN0KHN0ciwgaSwgcmVzKTtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHZhciBqID0gdGhpcy5za2lwU3BhY2Uoc3RyLCBpKTtcbiAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiRU9GIGZvdW5kIGFmdGVyIG9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpICE9IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMub2JqZWN0KHN0ciwgaiArIDEsIHJlcyk7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS5jaGVja0RvdCA9IGZ1bmN0aW9uIChzdHIsIGkpIHtcbiAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkpO1xuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpID09IFwiLlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gaiArIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBqICsgMSkgPT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpID09IFwiXVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcImV4cGVjdGVkICcuJyBvciAnfScgb3IgJ10nIGF0IGVuZCBvZiBzdGF0ZW1lbnRcIik7XG4gICAgICAgIHJldHVybiBpO1xuICAgIH07XG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS51cmlfcmVmMiA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICAvKlxuICAgICAgICBHZW5lcmF0ZSB1cmkgZnJvbSBuMyByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgIE5vdGUgdGhhdCB0aGUgUkRGIGNvbnZlbnRpb24gb2YgZGlyZWN0bHkgY29uY2F0ZW5hdGluZ1xuICAgICAgICBOUyBhbmQgbG9jYWwgbmFtZSBpcyBub3cgdXNlZCB0aG91Z2ggSSBwcmVmZXIgaW5zZXJ0aW5nIGEgJyMnXG4gICAgICAgIHRvIG1ha2UgdGhlIG5hbWVzYXBjZXMgbG9vayBtb3JlIGxpa2Ugd2hhdCBYTUwgZm9sa3MgZXhwZWN0LlxuICAgICAgICAqL1xuXG4gICAgICAgIHZhciBxbiA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICB2YXIgaiA9IHRoaXMucW5hbWUoc3RyLCBpLCBxbik7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHZhciBwYWlyRnVkZ2UgPSBxblswXTtcbiAgICAgICAgICAgIHZhciBwZnggPSBwYWlyRnVkZ2VbMF07XG4gICAgICAgICAgICB2YXIgbG4gPSBwYWlyRnVkZ2VbMV07XG4gICAgICAgICAgICBpZiAocGZ4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRGdWRnZSgwLCBcIm5vdCB1c2VkP1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgbnMgPSB0aGlzLl9iYXNlVVJJICsgQURERURfSEFTSDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5zID0gdGhpcy5fYmluZGluZ3NbcGZ4XTtcbiAgICAgICAgICAgICAgICBpZiAoIW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZnggPT0gXCJfXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuYW5vbnltb3VzTm9kZShsbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJQcmVmaXggXCIgKyBwZnggKyBcIiBub3QgYm91bmQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzeW1iID0gdGhpcy5fc3RvcmUuc3ltKG5zICsgbG4pO1xuICAgICAgICAgICAgaWYgKEFycmF5SW5kZXhPZih0aGlzLl92YXJpYWJsZXMsIHN5bWIpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLl92YXJpYWJsZXNbc3ltYl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaChzeW1iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gdGhpcy5za2lwU3BhY2Uoc3RyLCBpKTtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoaSkgPT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHZhciB2ID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMudmFyaWFibGUoc3RyLCBpLCB2KTtcbiAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHZbMF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ci5jaGFyQXQoaSkgPT0gXCI8XCIpIHtcbiAgICAgICAgICAgIHZhciBpID0gaSArIDE7XG4gICAgICAgICAgICB2YXIgc3QgPSBpO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBweWpzbGliX2xlbihzdHIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoaSkgPT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVyZWYgPSBweWpzbGliX3NsaWNlKHN0ciwgc3QsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYmFzZVVSSSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVyZWYgPSB1cmlwYXRoX2pvaW4odGhpcy5fYmFzZVVSSSwgdXJlZik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRGdWRnZSh1cmVmLmluZGV4T2YoXCI6XCIpID49IDAsIFwiV2l0aCBubyBiYXNlIFVSSSwgY2Fubm90IGRlYWwgd2l0aCByZWxhdGl2ZSBVUklzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSAtIDEsIGkpID09IFwiI1wiICYmICEocHlqc2xpYl9zbGljZSh1cmVmLCAtMSwgbnVsbCkgPT0gXCIjXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJlZiA9IHVyZWYgKyBcIiNcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3ltYiA9IHRoaXMuX3N0b3JlLnN5bSh1cmVmKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5SW5kZXhPZih0aGlzLl92YXJpYWJsZXMsIHN5bWIpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX3ZhcmlhYmxlc1tzeW1iXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChzeW1iKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBqLCBcInVudGVybWluYXRlZCBVUkkgcmVmZXJlbmNlXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMua2V5d29yZHNTZXQpIHtcbiAgICAgICAgICAgIHZhciB2ID0gbmV3IHB5anNsaWJfTGlzdChbXSk7XG4gICAgICAgICAgICB2YXIgaiA9IHRoaXMuYmFyZVdvcmQoc3RyLCBpLCB2KTtcbiAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBcnJheUluZGV4T2YodGhpcy5rZXl3b3JkcywgdlswXSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGksIFwiS2V5d29yZCBcXFwiXCIgKyB2WzBdICsgXCJcXFwiIG5vdCBhbGxvd2VkIGhlcmUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnB1c2godGhpcy5fc3RvcmUuc3ltKHRoaXMuX2JpbmRpbmdzW1wiXCJdICsgdlswXSkpO1xuICAgICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUuc2tpcFNwYWNlID0gZnVuY3Rpb24gKHN0ciwgaSkge1xuICAgICAgICAvKlxuICAgICAgICBTa2lwIHdoaXRlIHNwYWNlLCBuZXdsaW5lcyBhbmQgY29tbWVudHMuXG4gICAgICAgIHJldHVybiAtMSBpZiBFT0YsIGVsc2UgcG9zaXRpb24gb2YgZmlyc3Qgbm9uLXdzIGNoYXJhY3RlciovXG5cbiAgICAgICAgdmFyIHdoaXRlc3BhY2UgPSAnIFxcblxcclxcdFxcZlxceDBCXFx4QTBcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMEJcXHUyMDI4XFx1MjAyOVxcdTMwMDAnO1xuICAgICAgICBmb3IgKHZhciBqID0gaSA/IGkgOiAwOyBqIDwgc3RyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSBzdHIuY2hhckF0KGopO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgICAgc2tpcHNwYWNlIGo9IFwiK2ogKyBcIiBpPSBcIiArIGkgKyBcIiBuPSBcIiArIHN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgc2tpcHNwYWNlIGNoIDxcIiArIGNoICsgXCI+XCIpO1xuICAgICAgICAgICAgaWYgKHdoaXRlc3BhY2UuaW5kZXhPZihjaCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy9ub3Qgd3NcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBza2lwc3BhY2UgMiBjaCA8XCIgKyBjaCArIFwiPlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmNoYXJBdChqKSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOzsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiAgICBza2lwc3BhY2UyIGo9IFwiK2ogKyBcIiBpPSBcIiArIGkgKyBcIiBuPSBcIiArIHN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7IC8vIEVPRlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoaikgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lcyA9IHRoaXMubGluZXMgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBoYXNoIC0gc29tZXRoaW5nIGludGVyZXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIHNraXBzcGFjZSAzIGNoIDxcIiArIGNoICsgXCI+XCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBza2lwc3BhY2UgNSBjaCA8XCIgKyBjaCArIFwiPlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmNoYXJBdChqKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lcyA9IHRoaXMubGluZXMgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBuZXh0IGpcbiAgICAgICAgcmV0dXJuIC0xOyAvLyBFT0ZcbiAgICB9O1xuXG4gICAgX19TaW5rUGFyc2VyLnByb3RvdHlwZS52YXJpYWJsZSA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICAvKlxuICAgICAgICA/YWJjIC0+IHZhcmlhYmxlKDphYmMpXG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkpO1xuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHlqc2xpYl9zbGljZShzdHIsIGosIGogKyAxKSAhPSBcIj9cIikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gaiArIDE7XG4gICAgICAgIHZhciBpID0gajtcbiAgICAgICAgaWYgKFwiMDEyMzQ1Njc4OS1cIi5pbmRleE9mKHN0ci5jaGFyQXQoaikpID49IDApIHtcbiAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCB0aGlzLmxpbmVzLCBzdHIsIGosIFwiVmFyaWJsZSBuYW1lIGNhbid0IHN0YXJ0IHdpdGggJ1wiICsgc3RyLmNoYXJBdChqKSArIFwicydcIik7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGkgPCBweWpzbGliX2xlbihzdHIpICYmIF9ub3ROYW1lQ2hhcnMuaW5kZXhPZihzdHIuY2hhckF0KGkpKSA8IDApIHtcbiAgICAgICAgICAgIHZhciBpID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudENvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaiwgXCJDYW4ndCB1c2UgP3h4eCBzeW50YXggZm9yIHZhcmlhYmxlIGluIG91dGVybW9zdCBsZXZlbDogXCIgKyBweWpzbGliX3NsaWNlKHN0ciwgaiAtIDEsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaCh0aGlzLl9zdG9yZS52YXJpYWJsZShweWpzbGliX3NsaWNlKHN0ciwgaiwgaSkpKTtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLmJhcmVXb3JkID0gZnVuY3Rpb24gKHN0ciwgaSwgcmVzKSB7XG4gICAgICAgIC8qXG4gICAgICAgIGFiYyAtPiA6YWJjXG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkpO1xuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2ggPSBzdHIuY2hhckF0KGopO1xuICAgICAgICBpZiAoXCIwMTIzNDU2Nzg5LVwiLmluZGV4T2YoY2gpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX25vdE5hbWVDaGFycy5pbmRleE9mKGNoKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICB3aGlsZSAoaSA8IHB5anNsaWJfbGVuKHN0cikgJiYgX25vdE5hbWVDaGFycy5pbmRleE9mKHN0ci5jaGFyQXQoaSkpIDwgMCkge1xuICAgICAgICAgICAgdmFyIGkgPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChweWpzbGliX3NsaWNlKHN0ciwgaiwgaSkpO1xuICAgICAgICByZXR1cm4gaTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUucW5hbWUgPSBmdW5jdGlvbiAoc3RyLCBpLCByZXMpIHtcbiAgICAgICAgLypcbiAgICAgICAgIHh5ejpkZWYgLT4gKCd4eXonLCAnZGVmJylcbiAgICAgICAgSWYgbm90IGluIGtleXdvcmRzIGFuZCBrZXl3b3Jkc1NldDogZGVmIC0+ICgnJywgJ2RlZicpXG4gICAgICAgIDpkZWYgLT4gKCcnLCAnZGVmJylcbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgaSA9IHRoaXMuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgaWYgKFwiMDEyMzQ1Njc4OS0rXCIuaW5kZXhPZihjKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9ub3ROYW1lQ2hhcnMuaW5kZXhPZihjKSA8IDApIHtcbiAgICAgICAgICAgIHZhciBsbiA9IGM7XG4gICAgICAgICAgICB2YXIgaSA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBweWpzbGliX2xlbihzdHIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChfbm90TmFtZUNoYXJzLmluZGV4T2YoYykgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsbiA9IGxuICsgYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbG4gPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgcHlqc2xpYl9sZW4oc3RyKSAmJiBzdHIuY2hhckF0KGkpID09IFwiOlwiKSB7XG4gICAgICAgICAgICB2YXIgcGZ4ID0gbG47XG4gICAgICAgICAgICB2YXIgaSA9IGkgKyAxO1xuICAgICAgICAgICAgdmFyIGxuID0gXCJcIjtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgcHlqc2xpYl9sZW4oc3RyKSkge1xuICAgICAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBpZiAoX25vdE5hbWVDaGFycy5pbmRleE9mKGMpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG4gPSBsbiArIGM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW3BmeCwgbG5dKSk7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsbiAmJiB0aGlzLmtleXdvcmRzU2V0ICYmIEFycmF5SW5kZXhPZih0aGlzLmtleXdvcmRzLCBsbikgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IHB5anNsaWJfVHVwbGUoW1wiXCIsIGxuXSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLm9iamVjdCA9IGZ1bmN0aW9uIChzdHIsIGksIHJlcykge1xuICAgICAgICB2YXIgaiA9IHRoaXMuc3ViamVjdChzdHIsIGksIHJlcyk7XG4gICAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGogPSB0aGlzLnNraXBTcGFjZShzdHIsIGkpO1xuICAgICAgICAgICAgaWYgKGogPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyLmNoYXJBdChpKSA9PSBcIlxcXCJcIikge1xuICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDMpID09IFwiXFxcIlxcXCJcXFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGltID0gXCJcXFwiXFxcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsaW0gPSBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBpICsgcHlqc2xpYl9sZW4oZGVsaW0pO1xuICAgICAgICAgICAgICAgIHZhciBwYWlyRnVkZ2UgPSB0aGlzLnN0cmNvbnN0KHN0ciwgaSwgZGVsaW0pO1xuICAgICAgICAgICAgICAgIHZhciBqID0gcGFpckZ1ZGdlWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzID0gcGFpckZ1ZGdlWzFdO1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX3N0b3JlLmxpdGVyYWwocykpO1xuICAgICAgICAgICAgICAgIGRpYWdfcHJvZ3Jlc3MoXCJOZXcgc3RyaW5nIGNvbnN0IFwiLCBzLCBqKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLm5vZGVPckxpdGVyYWwgPSBmdW5jdGlvbiAoc3RyLCBpLCByZXMpIHtcbiAgICAgICAgdmFyIGogPSB0aGlzLm5vZGUoc3RyLCBpLCByZXMpO1xuICAgICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBqID0gdGhpcy5za2lwU3BhY2Uoc3RyLCBpKTtcbiAgICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChcIi0rMDk4NzY1NDMyMVwiLmluZGV4T2YoY2gpID49IDApIHtcblxuICAgICAgICAgICAgICAgIGRhdGV0aW1lX3N5bnRheC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHZhciBtID0gZGF0ZXRpbWVfc3ludGF4LmV4ZWMoc3RyLnNsaWNlKGkpKTtcbiAgICAgICAgICAgICAgICBpZiAobSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGogPSAgKCBpICsgZGF0ZXRpbWVfc3ludGF4Lmxhc3RJbmRleCApIDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IG1bMF07XG4gICAgICAgICAgICAgICAgICAgIGogPSBpICsgdmFsLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5pbmRleE9mKFwiVFwiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLl9zdG9yZS5saXRlcmFsKHZhbCwgdW5kZWZpbmVkLCB0aGlzLl9zdG9yZS5zeW0oREFURVRJTUVfREFUQVRZUEUpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLl9zdG9yZS5saXRlcmFsKHZhbCwgdW5kZWZpbmVkLCB0aGlzLl9zdG9yZS5zeW0oREFURV9EQVRBVFlQRSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG51bWJlcl9zeW50YXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBudW1iZXJfc3ludGF4LmV4ZWMoc3RyLnNsaWNlKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJCYWQgbnVtYmVyIG9yIGRhdGUgc3ludGF4XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGogPSBpICsgbnVtYmVyX3N5bnRheC5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBweWpzbGliX3NsaWNlKHN0ciwgaSwgaik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwuaW5kZXhPZihcImVcIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2godGhpcy5fc3RvcmUubGl0ZXJhbChwYXJzZUZsb2F0KHZhbCksIHVuZGVmaW5lZCwgdGhpcy5fc3RvcmUuc3ltKEZMT0FUX0RBVEFUWVBFKSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBpLCBqKS5pbmRleE9mKFwiLlwiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLl9zdG9yZS5saXRlcmFsKHBhcnNlRmxvYXQodmFsKSwgdW5kZWZpbmVkLCB0aGlzLl9zdG9yZS5zeW0oREVDSU1BTF9EQVRBVFlQRSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX3N0b3JlLmxpdGVyYWwocGFyc2VJbnQodmFsKSwgdW5kZWZpbmVkLCB0aGlzLl9zdG9yZS5zeW0oSU5URUdFUl9EQVRBVFlQRSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGo7IC8vIFdoZXJlIHdlIGhhdmUgZ290IHVwIHRvXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyLmNoYXJBdChpKSA9PSBcIlxcXCJcIikge1xuICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaSwgaSArIDMpID09IFwiXFxcIlxcXCJcXFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGltID0gXCJcXFwiXFxcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsaW0gPSBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBpICsgcHlqc2xpYl9sZW4oZGVsaW0pO1xuICAgICAgICAgICAgICAgIHZhciBkdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHBhaXJGdWRnZSA9IHRoaXMuc3RyY29uc3Qoc3RyLCBpLCBkZWxpbSk7XG4gICAgICAgICAgICAgICAgdmFyIGogPSBwYWlyRnVkZ2VbMF07XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBwYWlyRnVkZ2VbMV07XG4gICAgICAgICAgICAgICAgdmFyIGxhbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDEpID09IFwiQFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhbmdjb2RlLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBsYW5nY29kZS5leGVjKHN0ci5zbGljZShqICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgc3RhcnRsaW5lLCBzdHIsIGksIFwiQmFkIGxhbmd1YWdlIGNvZGUgc3ludGF4IG9uIHN0cmluZyBsaXRlcmFsLCBhZnRlciBAXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gbGFuZ2NvZGUubGFzdEluZGV4ICsgaiArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmcgPSBweWpzbGliX3NsaWNlKHN0ciwgaiArIDEsIGkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDIpID09IFwiXl5cIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzMiA9IG5ldyBweWpzbGliX0xpc3QoW10pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IHRoaXMudXJpX3JlZjIoc3RyLCBqICsgMiwgcmVzMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkdCA9IHJlczJbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX3N0b3JlLmxpdGVyYWwocywgbGFuZywgZHQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLnN0cmNvbnN0ID0gZnVuY3Rpb24gKHN0ciwgaSwgZGVsaW0pIHtcbiAgICAgICAgLypcbiAgICAgICAgcGFyc2UgYW4gTjMgc3RyaW5nIGNvbnN0YW50IGRlbGltaXRlZCBieSBkZWxpbS5cbiAgICAgICAgcmV0dXJuIGluZGV4LCB2YWxcbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgaiA9IGk7XG4gICAgICAgIHZhciB1c3RyID0gXCJcIjtcbiAgICAgICAgdmFyIHN0YXJ0bGluZSA9IHRoaXMubGluZXM7XG4gICAgICAgIHdoaWxlIChqIDwgcHlqc2xpYl9sZW4oc3RyKSkge1xuICAgICAgICAgICAgdmFyIGkgPSBqICsgcHlqc2xpYl9sZW4oZGVsaW0pO1xuICAgICAgICAgICAgaWYgKHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBpKSA9PSBkZWxpbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcHlqc2xpYl9UdXBsZShbaSwgdXN0cl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoaikgPT0gXCJcXFwiXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXN0ciA9IHVzdHIgKyBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IGogKyAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW50ZXJlc3RpbmcubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBtID0gaW50ZXJlc3RpbmcuZXhlYyhzdHIuc2xpY2UoaikpO1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHN0YXJ0bGluZSwgc3RyLCBqLCBcIkNsb3NpbmcgcXVvdGUgbWlzc2luZyBpbiBzdHJpbmcgYXQgXiBpbiBcIiArIHB5anNsaWJfc2xpY2Uoc3RyLCBqIC0gMjAsIGopICsgXCJeXCIgKyBweWpzbGliX3NsaWNlKHN0ciwgaiwgaiArIDIwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IGogKyBpbnRlcmVzdGluZy5sYXN0SW5kZXggLSAxO1xuICAgICAgICAgICAgdmFyIHVzdHIgPSB1c3RyICsgcHlqc2xpYl9zbGljZShzdHIsIGosIGkpO1xuICAgICAgICAgICAgdmFyIGNoID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChjaCA9PSBcIlxcXCJcIikge1xuICAgICAgICAgICAgICAgIHZhciBqID0gaTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCJcXHJcIikge1xuICAgICAgICAgICAgICAgIHZhciBqID0gaSArIDE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVsaW0gPT0gXCJcXFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHN0YXJ0bGluZSwgc3RyLCBpLCBcIm5ld2xpbmUgZm91bmQgaW4gc3RyaW5nIGxpdGVyYWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubGluZXMgPSB0aGlzLmxpbmVzICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgdXN0ciA9IHVzdHIgKyBjaDtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNMaW5lID0gdGhpcy5zdGFydE9mTGluZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0T2ZMaW5lID0gajtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCJcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBqICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjaCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgc3RhcnRsaW5lLCBzdHIsIGksIFwidW50ZXJtaW5hdGVkIHN0cmluZyBsaXRlcmFsICgyKVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBzdHJpbmdfZmluZChcImFiZnJ0dm5cXFxcXFxcIlwiLCBjaCk7XG4gICAgICAgICAgICAgICAgaWYgKGsgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdWNoID0gXCJcXGFcXGJcXGZcXHJcXHRcXHZcXG5cXFxcXFxcIlwiLmNoYXJBdChrKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzdHIgPSB1c3RyICsgdWNoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IGogKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCJ1XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXJGdWRnZSA9IHRoaXMudUVzY2FwZShzdHIsIGogKyAxLCBzdGFydGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IHBhaXJGdWRnZVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoID0gcGFpckZ1ZGdlWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXN0ciA9IHVzdHIgKyBjaDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09IFwiVVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWlyRnVkZ2UgPSB0aGlzLlVFc2NhcGUoc3RyLCBqICsgMSwgc3RhcnRsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGogPSBwYWlyRnVkZ2VbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaCA9IHBhaXJGdWRnZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzdHIgPSB1c3RyICsgY2g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHRoaXMubGluZXMsIHN0ciwgaSwgXCJiYWQgZXNjYXBlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgdGhpcy5saW5lcywgc3RyLCBpLCBcInVudGVybWluYXRlZCBzdHJpbmcgbGl0ZXJhbFwiKTtcbiAgICB9O1xuICAgIF9fU2lua1BhcnNlci5wcm90b3R5cGUudUVzY2FwZSA9IGZ1bmN0aW9uIChzdHIsIGksIHN0YXJ0bGluZSkge1xuICAgICAgICB2YXIgaiA9IGk7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICAgIHdoaWxlIChjb3VudCA8IDQpIHtcbiAgICAgICAgICAgIHZhciBjaEZ1ZGdlID0gcHlqc2xpYl9zbGljZShzdHIsIGosIGogKyAxKTtcbiAgICAgICAgICAgIHZhciBjaCA9IGNoRnVkZ2UudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHZhciBqID0gaiArIDE7XG4gICAgICAgICAgICBpZiAoY2ggPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IEJhZFN5bnRheCh0aGlzLl90aGlzRG9jLCBzdGFydGxpbmUsIHN0ciwgaSwgXCJ1bnRlcm1pbmF0ZWQgc3RyaW5nIGxpdGVyYWwoMylcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgayA9IHN0cmluZ19maW5kKFwiMDEyMzQ1Njc4OWFiY2RlZlwiLCBjaCk7XG4gICAgICAgICAgICBpZiAoayA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgc3RhcnRsaW5lLCBzdHIsIGksIFwiYmFkIHN0cmluZyBsaXRlcmFsIGhleCBlc2NhcGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZSAqIDE2ICsgaztcbiAgICAgICAgICAgIHZhciBjb3VudCA9IGNvdW50ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdWNoID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgcHlqc2xpYl9UdXBsZShbaiwgdWNoXSk7XG4gICAgfTtcbiAgICBfX1NpbmtQYXJzZXIucHJvdG90eXBlLlVFc2NhcGUgPSBmdW5jdGlvbiAoc3RyLCBpLCBzdGFydGxpbmUpIHtcbiAgICAgICAgdmFyIGogPSBpO1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSAnXFxcXFUnO1xuICAgICAgICB3aGlsZSAoY291bnQgPCA4KSB7XG4gICAgICAgICAgICB2YXIgY2hGdWRnZSA9IHB5anNsaWJfc2xpY2Uoc3RyLCBqLCBqICsgMSk7XG4gICAgICAgICAgICB2YXIgY2ggPSBjaEZ1ZGdlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgaiA9IGogKyAxO1xuICAgICAgICAgICAgaWYgKGNoID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBCYWRTeW50YXgodGhpcy5fdGhpc0RvYywgc3RhcnRsaW5lLCBzdHIsIGksIFwidW50ZXJtaW5hdGVkIHN0cmluZyBsaXRlcmFsKDMpXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGsgPSBzdHJpbmdfZmluZChcIjAxMjM0NTY3ODlhYmNkZWZcIiwgY2gpO1xuICAgICAgICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQmFkU3ludGF4KHRoaXMuX3RoaXNEb2MsIHN0YXJ0bGluZSwgc3RyLCBpLCBcImJhZCBzdHJpbmcgbGl0ZXJhbCBoZXggZXNjYXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWUgKyBjaDtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IGNvdW50ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdWNoID0gc3RyaW5nRnJvbUNoYXJDb2RlKFwiMHhcIiArIHB5anNsaWJfc2xpY2UodmFsdWUsIDIsIDEwKSAtIDApO1xuICAgICAgICByZXR1cm4gbmV3IHB5anNsaWJfVHVwbGUoW2osIHVjaF0pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gT0xEX0JhZFN5bnRheCh1cmksIGxpbmVzLCBzdHIsIGksIHdoeSkge1xuICAgICAgICByZXR1cm4gbmV3IF9fT0xEX0JhZFN5bnRheCh1cmksIGxpbmVzLCBzdHIsIGksIHdoeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fT0xEX0JhZFN5bnRheCh1cmksIGxpbmVzLCBzdHIsIGksIHdoeSkge1xuICAgICAgICB0aGlzLl9zdHIgPSBzdHIuZW5jb2RlKFwidXRmLThcIik7XG4gICAgICAgIHRoaXMuX3N0ciA9IHN0cjtcbiAgICAgICAgdGhpcy5faSA9IGk7XG4gICAgICAgIHRoaXMuX3doeSA9IHdoeTtcbiAgICAgICAgdGhpcy5saW5lcyA9IGxpbmVzO1xuICAgICAgICB0aGlzLl91cmkgPSB1cmk7XG4gICAgfVxuICAgIF9fT0xEX0JhZFN5bnRheC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLl9zdHI7XG4gICAgICAgIHZhciBpID0gdGhpcy5faTtcbiAgICAgICAgdmFyIHN0ID0gMDtcbiAgICAgICAgaWYgKGkgPiA2MCkge1xuICAgICAgICAgICAgdmFyIHByZSA9IFwiLi4uXCI7XG4gICAgICAgICAgICB2YXIgc3QgPSBpIC0gNjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJlID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHlqc2xpYl9sZW4oc3RyKSAtIGkgPiA2MCkge1xuICAgICAgICAgICAgdmFyIHBvc3QgPSBcIi4uLlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBvc3QgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkxpbmUgJWkgb2YgPCVzPjogQmFkIHN5bnRheCAoJXMpIGF0IF4gaW46XFxuXFxcIiVzJXNeJXMlc1xcXCJcIiAlIG5ldyBweWpzbGliX1R1cGxlKFt0aGlzLmxpbmVzICsgMSwgdGhpcy5fdXJpLCB0aGlzLl93aHksIHByZSwgcHlqc2xpYl9zbGljZShzdHIsIHN0LCBpKSwgcHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyA2MCksIHBvc3RdKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIEJhZFN5bnRheCh1cmksIGxpbmVzLCBzdHIsIGksIHdoeSkge1xuICAgICAgICByZXR1cm4gXCJMaW5lIFwiICsgKGxpbmVzICsgMSkgKyBcIiBvZiA8XCIgKyB1cmkgKyBcIj46IEJhZCBzeW50YXg6IFwiICsgd2h5ICsgXCJcXG5hdDogXFxcIlwiICsgcHlqc2xpYl9zbGljZShzdHIsIGksIGkgKyAzMCkgKyBcIlxcXCJcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpcENSKHN0cikge1xuICAgICAgICB2YXIgcmVzID0gXCJcIjtcblxuICAgICAgICB2YXIgX19jaCA9IG5ldyBweWpzbGliX0l0ZXJhdG9yKHN0cik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IF9fY2gubmV4dCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoICE9IFwiXFxyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHJlcyArIGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgIT0gU3RvcEl0ZXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGR1bW15V3JpdGUoeCkge31cblxuICAgIHJldHVybiBTaW5rUGFyc2VyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE4zUGFyc2VyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ2xhc3NPcmRlciA9IHJlcXVpcmUoJy4vY2xhc3Mtb3JkZXInKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbi8qKlxuICogQGNsYXNzIE5hbWVkTm9kZVxuICogQGV4dGVuZHMgTm9kZVxuICovXG5cbnZhciBOYW1lZE5vZGUgPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKE5hbWVkTm9kZSwgX05vZGUpO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGlyaSB7U3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gTmFtZWROb2RlKGlyaSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYW1lZE5vZGUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE5hbWVkTm9kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE5hbWVkTm9kZSkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMudGVybVR5cGUgPSBOYW1lZE5vZGUudGVybVR5cGU7XG4gICAgaWYgKCFpcmkuaW5jbHVkZXMoJzonKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYW1lZE5vZGUgSVJJIFwiJyArIGlyaSArICdcIiBtdXN0IGJlIGFic29sdXRlLicpO1xuICAgIH1cbiAgICBpZiAoaXJpLmluY2x1ZGVzKCcgJykpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gJ0Vycm9yOiBOYW1lZE5vZGUgSVJJIFwiJyArIGlyaSArICdcIiBtdXN0IG5vdCBjb250YWluIHVuZW5jb2RlZCBzcGFjZXMuJztcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgX3RoaXMudmFsdWUgPSBpcmk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuICRyZGYgbm9kZSBmb3IgdGhlIGNvbnRhaW5pbmcgZGlyZWN0b3J5LCBlbmRpbmcgaW4gc2xhc2guXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE5hbWVkTm9kZSwgW3tcbiAgICBrZXk6ICdkaXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXIoKSB7XG4gICAgICB2YXIgc3RyID0gdGhpcy51cmkuc3BsaXQoJyMnKVswXTtcbiAgICAgIHZhciBwID0gc3RyLnNsaWNlKDAsIC0xKS5sYXN0SW5kZXhPZignLycpO1xuICAgICAgdmFyIHEgPSBzdHIuaW5kZXhPZignLy8nKTtcbiAgICAgIGlmIChxID49IDAgJiYgcCA8IHEgKyAyIHx8IHAgPCAwKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKHN0ci5zbGljZSgwLCBwICsgMSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIE5OIGZvciB0aGUgd2hvbGUgd2ViIHNpdGUsIGVuZGluZyBpbiBzbGFzaC5cbiAgICAgKiBDb250cmFzdCB3aXRoIHRoZSBcIm9yaWdpblwiIHdoaWNoIGRvZXMgTk9UIGhhdmUgYSB0cmFpbGluZyBzbGFzaFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2l0ZSgpIHtcbiAgICAgIHZhciBzdHIgPSB0aGlzLnVyaS5zcGxpdCgnIycpWzBdO1xuICAgICAgdmFyIHAgPSBzdHIuaW5kZXhPZignLy8nKTtcbiAgICAgIGlmIChwIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdUaGlzIFVSSSBkb2VzIG5vdCBoYXZlIGEgd2ViIHNpdGUgcGFydCAob3JpZ2luKScpO1xuICAgICAgdmFyIHEgPSBzdHIuaW5kZXhPZignLycsIHAgKyAyKTtcbiAgICAgIGlmIChxIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdUaGlzIFVSSSBkb2VzIG5vdCBoYXZlIGEgd2ViIHNpdGUgcGFydC4gKG9yaWdpbiknKTtcbiAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKHN0ci5zbGljZSgwLCBxICsgMSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RvYycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvYygpIHtcbiAgICAgIGlmICh0aGlzLnVyaS5pbmRleE9mKCcjJykgPCAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUodGhpcy51cmkuc3BsaXQoJyMnKVswXSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiAnPCcgKyB0aGlzLnVyaSArICc+JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWdhY3kgZ2V0dGVyIGFuZCBzZXR0ZXIgYWxpYXMsIG5vZGUudXJpXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VyaScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHVyaSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHVyaTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2Zyb21WYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzTm9kZSA9IHZhbHVlICYmIHZhbHVlLnRlcm1UeXBlO1xuICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZSh2YWx1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5hbWVkTm9kZTtcbn0oTm9kZSk7XG5cbk5hbWVkTm9kZS50ZXJtVHlwZSA9ICdOYW1lZE5vZGUnO1xuTmFtZWROb2RlLnByb3RvdHlwZS5jbGFzc09yZGVyID0gQ2xhc3NPcmRlclsnTmFtZWROb2RlJ107XG5OYW1lZE5vZGUucHJvdG90eXBlLmlzVmFyID0gMDtcblxubW9kdWxlLmV4cG9ydHMgPSBOYW1lZE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG5cbmZ1bmN0aW9uIE5hbWVzcGFjZShuc3VyaSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGxuKSB7XG4gICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobnN1cmkgKyAobG4gfHwgJycpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOYW1lc3BhY2U7IiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBUaGUgc3VwZXJjbGFzcyBvZiBhbGwgUkRGIFN0YXRlbWVudCBvYmplY3RzLCB0aGF0IGlzXG4gKiBOYW1lZE5vZGUsIExpdGVyYWwsIEJsYW5rTm9kZSwgZXRjLlxuICogQGNsYXNzIE5vZGVcbiAqL1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTm9kZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTm9kZSwgW3tcbiAgICBrZXk6ICdzdWJzdGl0dXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic3RpdHV0ZShiaW5kaW5ncykge1xuICAgICAgY29uc29sZS5sb2coJ0BAQCBub2RlIHN1YnN0aXR1dGUnICsgdGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wYXJlVGVybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmVUZXJtKG90aGVyKSB7XG4gICAgICBpZiAodGhpcy5jbGFzc09yZGVyIDwgb3RoZXIuY2xhc3NPcmRlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jbGFzc09yZGVyID4gb3RoZXIuY2xhc3NPcmRlcikge1xuICAgICAgICByZXR1cm4gKzE7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy52YWx1ZSA8IG90aGVyLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZhbHVlID4gb3RoZXIudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXF1YWxzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRlcm1UeXBlID09PSBvdGhlci50ZXJtVHlwZSAmJiB0aGlzLnZhbHVlID09PSBvdGhlci52YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYXNoU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzaFN0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvQ2Fub25pY2FsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2FtZVRlcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYW1lVGVybShvdGhlcikge1xuICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKG90aGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b0Nhbm9uaWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ2Fub25pY2FsKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9OVCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvTlQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b05UKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlLnRvU3RyaW5nKCkgaXMgYWJzdHJhY3QgLSBzZWUgdGhlIHN1YmNsYXNzZXMgaW5zdGVhZCcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOb2RlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBSREYgTm9kZSBmcm9tIGEgbmF0aXZlIGphdmFzY3JpcHQgdmFsdWUuXG4gKiBSREYgTm9kZXMgYXJlIHJldHVybmVkIHVuY2hhbmdlZCwgdW5kZWZpbmVkIHJldHVybmVkIGFzIGl0c2VsZi5cbiAqIEBtZXRob2QgZnJvbVZhbHVlXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gdmFsdWUge05vZGV8RGF0ZXxTdHJpbmd8TnVtYmVyfEJvb2xlYW58VW5kZWZpbmVkfVxuICogQHJldHVybiB7Tm9kZXxDb2xsZWN0aW9ufVxuICovXG5Ob2RlLmZyb21WYWx1ZSA9IGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZSkge1xuICB2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vY29sbGVjdGlvbicpO1xuICB2YXIgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vbGl0ZXJhbCcpO1xuICB2YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc05vZGUgPSB2YWx1ZSAmJiB2YWx1ZS50ZXJtVHlwZTtcbiAgaWYgKGlzTm9kZSkge1xuICAgIC8vIGEgTm9kZSBzdWJjbGFzcyBvciBhIENvbGxlY3Rpb25cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gTGl0ZXJhbC5mcm9tVmFsdWUodmFsdWUpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbnZhciBCbGFua05vZGUgPSByZXF1aXJlKCcuL2JsYW5rLW5vZGUnKTtcbnZhciBqc29ubGQgPSByZXF1aXJlKCdqc29ubGQnKTtcbnZhciBMaXRlcmFsID0gcmVxdWlyZSgnLi9saXRlcmFsJyk7XG52YXIgTjMgPSByZXF1aXJlKCduMycpOyAvLyBAQCBHb2FsOiByZW1vdmUgdGhpcyBkZXBlbmRlbmN5XG52YXIgTjNQYXJzZXIgPSByZXF1aXJlKCcuL24zcGFyc2VyJyk7XG52YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG52YXIgcGFyc2VSREZhRE9NID0gcmVxdWlyZSgnLi9yZGZhcGFyc2VyJykucGFyc2VSREZhRE9NO1xudmFyIFJERlBhcnNlciA9IHJlcXVpcmUoJy4vcmRmeG1scGFyc2VyJyk7XG52YXIgc3BhcnFsVXBkYXRlUGFyc2VyID0gcmVxdWlyZSgnLi9wYXRjaC1wYXJzZXInKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgYW5kIHB1dCB0aGUgcmVzdWx0IGludG8gdGhlIGdyYXBoIGtiLlxuICogTm9ybWFsIG1ldGhvZCBpcyBzeW5jLlxuICogVW5mb3J0dW5hdGVseSBqc2RvbmxkIGlzIGN1cnJlbnRseSB3cml0dGVuIHRvIG5lZWQgdG8gYmUgY2FsbGVkIGFzeW5jLlxuICogSGVuY2UgdGhlIG1lc3MgYmVsb3cgd2l0aCBleGVjdXRlQ2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKHN0ciwga2IsIGJhc2UsIGNvbnRlbnRUeXBlLCBjYWxsYmFjaykge1xuICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlIHx8ICd0ZXh0L3R1cnRsZSc7XG4gIHRyeSB7XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAndGV4dC9uMycgfHwgY29udGVudFR5cGUgPT09ICd0ZXh0L3R1cnRsZScpIHtcbiAgICAgIHZhciBwID0gTjNQYXJzZXIoa2IsIGtiLCBiYXNlLCBiYXNlLCBudWxsLCBudWxsLCAnJywgbnVsbCk7XG4gICAgICBwLmxvYWRCdWYoc3RyKTtcbiAgICAgIGV4ZWN1dGVDYWxsYmFjaygpO1xuICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9yZGYreG1sJykge1xuICAgICAgdmFyIHBhcnNlciA9IG5ldyBSREZQYXJzZXIoa2IpO1xuICAgICAgcGFyc2VyLnBhcnNlKFV0aWwucGFyc2VYTUwoc3RyKSwgYmFzZSwga2Iuc3ltKGJhc2UpKTtcbiAgICAgIGV4ZWN1dGVDYWxsYmFjaygpO1xuICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnKSB7XG4gICAgICBwYXJzZVJERmFET00oVXRpbC5wYXJzZVhNTChzdHIsIHsgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnIH0pLCBrYiwgYmFzZSk7XG4gICAgICBleGVjdXRlQ2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnRUeXBlID09PSAndGV4dC9odG1sJykge1xuICAgICAgcGFyc2VSREZhRE9NKFV0aWwucGFyc2VYTUwoc3RyLCB7IGNvbnRlbnRUeXBlOiAndGV4dC9odG1sJyB9KSwga2IsIGJhc2UpO1xuICAgICAgZXhlY3V0ZUNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3NwYXJxbC11cGRhdGUnKSB7XG4gICAgICAvLyBAQCB3ZSBoYW5kbGUgYSBzdWJzZXRcbiAgICAgIHNwYXJxbFVwZGF0ZVBhcnNlcihzdHIsIGtiLCBiYXNlKTtcbiAgICAgIGV4ZWN1dGVDYWxsYmFjaygpO1xuICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9sZCtqc29uJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL25xdWFkcycgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9uLXF1YWRzJykge1xuICAgICAgdmFyIG4zUGFyc2VyID0gTjMuUGFyc2VyKCk7XG4gICAgICB2YXIgdHJpcGxlcyA9IFtdO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vbGQranNvbicpIHtcbiAgICAgICAgdmFyIGpzb25Eb2N1bWVudDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqc29uRG9jdW1lbnQgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyKSB7XG4gICAgICAgICAgY2FsbGJhY2socGFyc2VFcnIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGpzb25sZC50b1JERihqc29uRG9jdW1lbnQsIHsgZm9ybWF0OiAnYXBwbGljYXRpb24vbnF1YWRzJyB9LCBucXVhZENhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5xdWFkQ2FsbGJhY2sobnVsbCwgc3RyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9uJ3Qga25vdyBob3cgdG8gcGFyc2UgXCIgKyBjb250ZW50VHlwZSArICcgeWV0Jyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXhlY3V0ZUVycm9yQ2FsbGJhY2soZSk7XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlQ2FsbGJhY2soKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBrYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlRXJyb3JDYWxsYmFjayhlKSB7XG4gICAgaWYgKGNvbnRlbnRUeXBlICE9PSAnYXBwbGljYXRpb24vbGQranNvbicgfHwgY29udGVudFR5cGUgIT09ICdhcHBsaWNhdGlvbi9ucXVhZHMnIHx8IGNvbnRlbnRUeXBlICE9PSAnYXBwbGljYXRpb24vbi1xdWFkcycpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhlLCBrYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHRyeWluZyB0byBwYXJzZSA8JyArIGJhc2UgKyAnPiBhcyAnICsgY29udGVudFR5cGUgKyAnOlxcbicgKyBlICsgJzpcXG4nICsgZS5zdGFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qXG4gICAgZnVuY3Rpb24gc2V0SnNvbkxkQmFzZSAoZG9jLCBiYXNlKSB7XG4gICAgICBpZiAoZG9jIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoISgnQGNvbnRleHQnIGluIGRvYykpIHtcbiAgICAgICAgZG9jWydAY29udGV4dCddID0ge31cbiAgICAgIH1cbiAgICAgIGRvY1snQGNvbnRleHQnXVsnQGJhc2UnXSA9IGJhc2VcbiAgICB9XG4gICovXG4gIGZ1bmN0aW9uIG5xdWFkQ2FsbGJhY2soZXJyLCBucXVhZHMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIGtiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIG4zUGFyc2VyLnBhcnNlKG5xdWFkcywgdHJpcGxlQ2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyLCBrYik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJpcGxlQ2FsbGJhY2soZXJyLCB0cmlwbGUsIHByZWZpeGVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyLCBrYik7XG4gICAgfVxuICAgIGlmICh0cmlwbGUpIHtcbiAgICAgIHRyaXBsZXMucHVzaCh0cmlwbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWRkVHJpcGxlKGtiLCB0cmlwbGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIGtiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUcmlwbGUoa2IsIHRyaXBsZSkge1xuICAgIHZhciBzdWJqZWN0ID0gY3JlYXRlVGVybSh0cmlwbGUuc3ViamVjdCk7XG4gICAgdmFyIHByZWRpY2F0ZSA9IGNyZWF0ZVRlcm0odHJpcGxlLnByZWRpY2F0ZSk7XG4gICAgdmFyIG9iamVjdCA9IGNyZWF0ZVRlcm0odHJpcGxlLm9iamVjdCk7XG4gICAgdmFyIHdoeSA9IG51bGw7XG4gICAgaWYgKHRyaXBsZS5ncmFwaCkge1xuICAgICAgd2h5ID0gY3JlYXRlVGVybSh0cmlwbGUuZ3JhcGgpO1xuICAgIH1cbiAgICBrYi5hZGQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIHdoeSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVUZXJtKHRlcm1TdHJpbmcpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgaWYgKE4zLlV0aWwuaXNMaXRlcmFsKHRlcm1TdHJpbmcpKSB7XG4gICAgICB2YWx1ZSA9IE4zLlV0aWwuZ2V0TGl0ZXJhbFZhbHVlKHRlcm1TdHJpbmcpO1xuICAgICAgdmFyIGxhbmd1YWdlID0gTjMuVXRpbC5nZXRMaXRlcmFsTGFuZ3VhZ2UodGVybVN0cmluZyk7XG4gICAgICB2YXIgZGF0YXR5cGUgPSBuZXcgTmFtZWROb2RlKE4zLlV0aWwuZ2V0TGl0ZXJhbFR5cGUodGVybVN0cmluZykpO1xuICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHZhbHVlLCBsYW5ndWFnZSwgZGF0YXR5cGUpO1xuICAgIH0gZWxzZSBpZiAoTjMuVXRpbC5pc0lSSSh0ZXJtU3RyaW5nKSkge1xuICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUodGVybVN0cmluZyk7XG4gICAgfSBlbHNlIGlmIChOMy5VdGlsLmlzQmxhbmsodGVybVN0cmluZykpIHtcbiAgICAgIHZhbHVlID0gdGVybVN0cmluZy5zdWJzdHJpbmcoMiwgdGVybVN0cmluZy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyBCbGFua05vZGUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbi8vIFBhcnNlIGEgc2ltcGxlIFNQQVJMLVVwZGF0ZSBzdWJzZXQgc3ludGF4IGZvciBwYXRjaGVzLlxuLy9cbi8vICBUaGlzIHBhcnNlc1xuLy8gICBXSEVSRSB7eHh4fSBERUxFVEUge3l5eX0gSU5TRVJUIERBVEEge3p6en1cbi8vIChub3QgbmVjZXNzYXJpbHkgaW4gdGhhdCBvcmRlcilcbi8vIGFzIHRob3VnaCBpdCB3ZXJlIHRoZSBuM1xuLy8gICA8I3F1ZXJ5PiBwYXRjaDp3aGVyZSB7eHh4fTsgcGF0Y2g6ZGVsZXRlIHt5eXl9OyBwYXRjaDppbnNlcnQge3p6en0uXG5tb2R1bGUuZXhwb3J0cyA9IHNwYXJxbFVwZGF0ZVBhcnNlcjtcblxudmFyIE4zUGFyc2VyID0gcmVxdWlyZSgnLi9uM3BhcnNlcicpO1xudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoJy4vbmFtZXNwYWNlJyk7XG5cbmZ1bmN0aW9uIHNwYXJxbFVwZGF0ZVBhcnNlcihzdHIsIGtiLCBiYXNlKSB7XG4gIHZhciBpLCBqLCBrO1xuICB2YXIga2V5d29yZHMgPSBbJ0lOU0VSVCcsICdERUxFVEUnLCAnV0hFUkUnXTtcbiAgdmFyIFNRTlMgPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnL25zL3BpbS9wYXRjaCMnKTtcbiAgdmFyIHAgPSBOM1BhcnNlcihrYiwga2IsIGJhc2UsIGJhc2UsIG51bGwsIG51bGwsICcnLCBudWxsKTtcbiAgdmFyIGNsYXVzZXMgPSB7fTtcblxuICB2YXIgYmFkU3ludGF4ID0gZnVuY3Rpb24gYmFkU3ludGF4KHVyaSwgbGluZXMsIHN0ciwgaSwgd2h5KSB7XG4gICAgcmV0dXJuICdMaW5lICcgKyAobGluZXMgKyAxKSArICcgb2YgPCcgKyB1cmkgKyAnPjogQmFkIHN5bnRheDpcXG4gICAnICsgd2h5ICsgJ1xcbiAgIGF0OiBcIicgKyBzdHIuc2xpY2UoaSwgaSArIDMwKSArICdcIic7XG4gIH07XG5cbiAgLy8gdmFyIGNoZWNrID0gZnVuY3Rpb24gKG5leHQsIGxhc3QsIG1lc3NhZ2UpIHtcbiAgLy8gICBpZiAobmV4dCA8IDApIHtcbiAgLy8gICAgIHRocm93IGJhZFN5bnRheChwLl90aGlzRG9jLCBwLmxpbmVzLCBzdHIsIGosIGxhc3QsIG1lc3NhZ2UpXG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBuZXh0XG4gIC8vIH1cbiAgaSA9IDA7XG4gIHZhciBxdWVyeSA9IGtiLnN5bShiYXNlICsgJyNxdWVyeScpOyAvLyBJbnZlbnQgYSBVUkkgZm9yIHRoZSBxdWVyeVxuICBjbGF1c2VzWydxdWVyeSddID0gcXVlcnk7IC8vIEEgd2F5IG9mIGFjY2Vzc2luZyBpdCBpbiBpdHMgTjMgbW9kZWwuXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIkEgTm93IGF0IGkgPSBcIiArIGkpXG4gICAgaiA9IHAuc2tpcFNwYWNlKHN0ciwgaSk7XG4gICAgaWYgKGogPCAwKSB7XG4gICAgICByZXR1cm4gY2xhdXNlcztcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coXCJCIEFmdGVyIHNwYWNlIGF0IGo9IFwiICsgailcbiAgICBpZiAoc3RyW2pdID09PSAnOycpIHtcbiAgICAgIGkgPSBwLnNraXBTcGFjZShzdHIsIGogKyAxKTtcbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICByZXR1cm4gY2xhdXNlczsgLy8gQWxsb3cgZW5kIGluIGFcbiAgICAgIH1cbiAgICAgIGogPSBpO1xuICAgIH1cbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICBmb3IgKGsgPSAwOyBrIDwga2V5d29yZHMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXl3b3Jkc1trXTtcbiAgICAgIGlmIChzdHIuc2xpY2UoaiwgaiArIGtleS5sZW5ndGgpID09PSBrZXkpIHtcbiAgICAgICAgaSA9IHAuc2tpcFNwYWNlKHN0ciwgaiArIGtleS5sZW5ndGgpO1xuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICB0aHJvdyBiYWRTeW50YXgocC5fdGhpc0RvYywgcC5saW5lcywgc3RyLCBqICsga2V5Lmxlbmd0aCwgJ2ZvdW5kIEVPRiwgbmVlZGVkIHsuLi59IGFmdGVyICcgKyBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoa2V5ID09PSAnSU5TRVJUJyB8fCBrZXkgPT09ICdERUxFVEUnKSAmJiBzdHIuc2xpY2UoaSwgaSArIDQpID09PSAnREFUQScpIHtcbiAgICAgICAgICAvLyBTb21lIHdhbnRlZCAnREFUQScuIFdoYXRldmVyXG4gICAgICAgICAgaiA9IHAuc2tpcFNwYWNlKHN0ciwgaSArIDQpO1xuICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgYmFkU3ludGF4KHAuX3RoaXNEb2MsIHAubGluZXMsIHN0ciwgaSArIDQsICduZWVkZWQgey4uLn0gYWZ0ZXIgSU5TRVJUIERBVEEgJyArIGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgPSBqO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXMyID0gW107XG4gICAgICAgIGogPSBwLm5vZGUoc3RyLCBpLCByZXMyKTsgLy8gUGFyc2UgYWxsIHRoZSBjb21wbGV4aXR5IG9mIHRoZSBjbGF1c2VcblxuICAgICAgICBpZiAoaiA8IDApIHtcbiAgICAgICAgICB0aHJvdyBiYWRTeW50YXgocC5fdGhpc0RvYywgcC5saW5lcywgc3RyLCBpLCAnYmFkIHN5bnRheCBvciBFT0YgaW4gey4uLn0gYWZ0ZXIgJyArIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xhdXNlc1trZXkudG9Mb3dlckNhc2UoKV0gPSByZXMyWzBdO1xuICAgICAgICBrYi5hZGQocXVlcnksIFNRTlMoa2V5LnRvTG93ZXJDYXNlKCkpLCByZXMyWzBdKTsgLy8gLCBrYi5zeW0oYmFzZSlcbiAgICAgICAgLy8ga2V5IGlzIHRoZSBrZXl3b3JkIGFuZCByZXMyIGhhcyB0aGUgY29udGVudHNcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBpID0gajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZCAmJiBzdHIuc2xpY2UoaiwgaiArIDcpID09PSAnQHByZWZpeCcpIHtcbiAgICAgIGkgPSBwLmRpcmVjdGl2ZShzdHIsIGopO1xuICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIHRocm93IGJhZFN5bnRheChwLl90aGlzRG9jLCBwLmxpbmVzLCBzdHIsIGksICdiYWQgc3ludGF4IG9yIEVPRiBhZnRlciBAcHJlZml4ICcpO1xuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coXCJQIGJlZm9yZSBkb3QgaT0gXCIgKyBpKVxuICAgICAgaSA9IHAuY2hlY2tEb3Qoc3RyLCBpKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiUSBhZnRlciBkb3QgaT0gXCIgKyBpKVxuICAgICAgZm91bmQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcIkJhZCBzeW50YXggXCIgKyBqKVxuICAgICAgdGhyb3cgYmFkU3ludGF4KHAuX3RoaXNEb2MsIHAubGluZXMsIHN0ciwgaiwgXCJVbmtub3duIHN5bnRheCBhdCBzdGFydCBvZiBzdGF0ZW1lbXQ6ICdcIiArIHN0ci5zbGljZShqKS5zbGljZSgwLCAyMCkgKyBcIidcIik7XG4gICAgfVxuICB9IC8vIHdoaWxlXG4gIC8vIHJldHVybiBjbGF1c2VzXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nID0gcmVxdWlyZSgnLi9sb2cnKTtcblxuZnVuY3Rpb24gcXVlcnlUb1NQQVJRTChxdWVyeSkge1xuICB2YXIgaW5kZW50ID0gMDtcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0KHF1ZXJ5KSB7XG4gICAgdmFyIHN0ciA9IGFkZEluZGVudCgpICsgJ1NFTEVDVCAnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlcnkudmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyICs9IHF1ZXJ5LnZhcnNbaV0gKyAnICc7XG4gICAgfVxuICAgIHN0ciArPSAnXFxuJztcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGF0dGVybihwYXQpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgdmFyIHN0ID0gcGF0LnN0YXRlbWVudHM7XG4gICAgZm9yICh2YXIgeCBpbiBzdCkge1xuICAgICAgbG9nLmRlYnVnKCdGb3VuZCBzdGF0ZW1lbnQ6ICcgKyBzdCk7XG4gICAgICBzdHIgKz0gYWRkSW5kZW50KCkgKyBzdFt4XSArICdcXG4nO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q29uc3RyYWludHMocGF0KSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIHYgaW4gcGF0LmNvbnN0cmFpbnRzKSB7XG4gICAgICB2YXIgZm9vID0gcGF0LmNvbnN0cmFpbnRzW3ZdO1xuICAgICAgc3RyICs9IGFkZEluZGVudCgpICsgJ0ZJTFRFUiAoICcgKyBmb28uZGVzY3JpYmUodikgKyAnICkgJyArICdcXG4nO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9uYWxzKHBhdCkge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHBhdC5vcHRpb25hbC5sZW5ndGg7IHgrKykge1xuICAgICAgLy8gYWxlcnQocGF0Lm9wdGlvbmFsLnRlcm1UeXBlKVxuICAgICAgbG9nLmRlYnVnKCdGb3VuZCBvcHRpb25hbCBxdWVyeScpO1xuICAgICAgc3RyICs9IGFkZEluZGVudCgpICsgJ09QVElPTkFMIHsgJyArICdcXG4nO1xuICAgICAgaW5kZW50Kys7XG4gICAgICBzdHIgKz0gZ2V0UGF0dGVybihwYXQub3B0aW9uYWxbeF0pO1xuICAgICAgc3RyICs9IGdldENvbnN0cmFpbnRzKHBhdC5vcHRpb25hbFt4XSk7XG4gICAgICBzdHIgKz0gZ2V0T3B0aW9uYWxzKHBhdC5vcHRpb25hbFt4XSk7XG4gICAgICBpbmRlbnQtLTtcbiAgICAgIHN0ciArPSBhZGRJbmRlbnQoKSArICd9JyArICdcXG4nO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0V2hlcmUocGF0KSB7XG4gICAgdmFyIHN0ciA9IGFkZEluZGVudCgpICsgJ1dIRVJFIFxcbicgKyAneyBcXG4nO1xuICAgIGluZGVudCsrO1xuICAgIHN0ciArPSBnZXRQYXR0ZXJuKHBhdCk7XG4gICAgc3RyICs9IGdldENvbnN0cmFpbnRzKHBhdCk7XG4gICAgc3RyICs9IGdldE9wdGlvbmFscyhwYXQpO1xuICAgIGluZGVudC0tO1xuICAgIHN0ciArPSAnfSc7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEluZGVudCgpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRlbnQ7IGkrKykge1xuICAgICAgc3RyICs9ICcgICAgJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNQQVJRTChxdWVyeSkge1xuICAgIHJldHVybiBnZXRTZWxlY3QocXVlcnkpICsgZ2V0V2hlcmUocXVlcnkucGF0KTtcbiAgfVxuXG4gIHJldHVybiBnZXRTUEFSUUwocXVlcnkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXJ5VG9TUEFSUUw7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2luZGV4ZWRGb3JtdWxhID0gcmVxdWlyZSgnLi9pbmRleGVkLWZvcm11bGEnKTtcblxudmFyIF9pbmRleGVkRm9ybXVsYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleGVkRm9ybXVsYSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8vIE1hdGNoaW5nIGEgZm9ybXVsYSBhZ2FpbnN0IGFub3RoZXIgZm9ybXVsYVxuLy8gQXNzeW5jIGFzIHdlbGwgYXMgU3luY2hyb25vdXNseVxuLy9cbi8vIFczQyBvcGVuIHNvdXJjZSBsaWNlbmNlIDIwMDUuXG4vL1xuLy8gVGhpcyBidWlsZHMgb24gdGVybS5qcywgbWF0Y2guanMgKGFuZCBpZGVudGl0eS5qcz8pXG4vLyB0byBhbGxvdyBhIHF1ZXJ5IG9mIGEgZm9ybXVsYS5cbi8vXG4vLyBIZXJlIHdlIGludHJvZHVjZSBmb3IgdGhlIGZpcnN0IHRpbWUgYSBzdWJjbGFzcyBvZiB0ZXJtOiB2YXJpYWJsZS5cbi8vXG4vLyBTVk4gSUQ6ICRJZDogcXVlcnkuanMgMjUxMTYgMjAwOC0xMS0xNSAxNjoxMzo0OFogdGltYmwgJFxuXG4vLyAgVmFyaWFibGVcbi8vXG4vLyBDb21wYXJlIHdpdGggQmxhbmtOb2RlLiAgVGhleSBhcmUgc2ltaWxhciwgYnV0IGEgdmFyaWFibGVcbi8vIHN0YW5kcyBmb3Igc29tZXRoaW5nIHdob3NlIHZhbHVlIGlzIHRvIGJlIHJldHVybmVkLlxuLy8gQWxzbywgdXNlcnMgbmFtZSB2YXJpYWJsZXMgYW5kIHdhbnQgdGhlIHNhbWUgbmFtZSBiYWNrIHdoZW4gc3R1ZmYgaXMgcHJpbnRlZFxuLyoganNsOm9wdGlvbiBleHBsaWNpdCovIC8vIFR1cm4gb24gSmF2YVNjcmlwdExpbnQgdmFyaWFibGUgZGVjbGFyYXRpb24gY2hlY2tpbmdcblxudmFyIGxvZyA9IHJlcXVpcmUoJy4vbG9nJyk7XG52YXIgZG9jcGFydCA9IHJlcXVpcmUoJy4vdXJpJykuZG9jcGFydDtcblxuLyoqXG4gKiBRdWVyeSBjbGFzcywgZm9yIHRyYWNraW5nIHF1ZXJpZXMgdGhlIHVzZXIgaGFzIGluIHRoZSBVSS5cbiAqL1xuXG52YXIgUXVlcnkgPSBmdW5jdGlvbiBRdWVyeShuYW1lLCBpZCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVlcnkpO1xuXG4gIHRoaXMucGF0ID0gbmV3IF9pbmRleGVkRm9ybXVsYTIuZGVmYXVsdCgpOyAvLyBUaGUgcGF0dGVybiB0byBzZWFyY2ggZm9yXG4gIHRoaXMudmFycyA9IFtdOyAvLyBVc2VkIGJ5IFVJIGNvZGUgYnV0IG5vdCBpbiBxdWVyeS5qc1xuICAvLyAgICB0aGlzLm9yZGVyQnkgPSBbXSAvLyBOb3QgdXNlZCB5ZXRcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5pZCA9IGlkO1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgbWF0Y2ggYSBwYXR0ZXJuIHRvIHRoZSBjdXJyZW50IGtiXG4gKlxuICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuZXZlciBhIG1hdGNoIGlzIGZvdW5kXG4gKiBXaGVuIGZldGNoZXIgaXMgc3VwcGxpZWQgdGhpcyB3aWxsIGJlIGNhbGxlZCB0byBzYXRpc2Z5IGFueSByZXNvdXJjZSByZXF1ZXN0c1xuICogY3VycmVudGx5IG5vdCBpbiB0aGUga2IuIFRoZSBmZXRjaGVyIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGRlZmluZWQgbWFudWFseSBhbmRcbiAqIHNob3VsZCBjYWxsICRyZGYuVXRpbC5BSkFSX2hhbmRsZU5ld1Rlcm0gdG8gcHJvY2VzcyB0aGUgcmVxdWVzdGVkIHJlc291cmNlLlxuICpcbiAqIEBwYXJhbVx0bXlRdWVyeSxcdGEga25vd2xlZGdlYmFzZSBjb250YWluaW5nIGEgcGF0dGVybiB0byB1c2UgYXMgcXVlcnlcbiAqIEBwYXJhbVx0Y2FsbGJhY2ssIFx0d2hlbmV2ZXIgdGhlIHBhdHRlcm4gaW4gbXlRdWVyeSBpcyBtZXQgdGhpcyBpcyBjYWxsZWQgd2l0aFxuICogXHRcdFx0XHRcdFx0dGhlIG5ldyBiaW5kaW5ncyBhcyBwYXJhbWV0ZXJcbiAqIEBwYXJhbVx0ZmV0Y2hlcixcdHdoZW5ldmVyIGEgcmVzb3VyY2UgbmVlZHMgdG8gYmUgbG9hZGVkIHRoaXMgZ2V0cyBjYWxsZWQgIElHTk9SRUQgT0JTT0xFVEVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5mZXRlY2hlciBpcyB1c2VkIGFzIGEgRmV0Y2hlciBpbnN0YW5jZSB0byBkbyB0aGlzLlxuICogQHBhcmFtICAgICAgIG9uRG9uZSAgICAgICAgICBjYWxsYmFjayB3aGVuXG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleGVkRm9ybXVsYVF1ZXJ5KG15UXVlcnksIGNhbGxiYWNrLCBmZXRjaGVyLCBvbkRvbmUpIHtcbiAgLy8gdmFyIGtiID0gdGhpc1xuICAvLyAvLy8vLy8vLy8vLyBEZWJ1ZyBzdHJpbmdzXG4gIHZhciBiaW5kaW5nRGVidWcgPSBmdW5jdGlvbiBiaW5kaW5nRGVidWcoYikge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgdjtcbiAgICBmb3IgKHYgaW4gYikge1xuICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkodikpIHtcbiAgICAgICAgc3RyICs9ICcgICAgJyArIHYgKyAnIC0+ICcgKyBiW3ZdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHZhciBiaW5kaW5nc0RlYnVnID0gZnVuY3Rpb24gYmluZGluZ3NEZWJ1ZyhuYnMpIHtcbiAgICB2YXIgc3RyID0gJ0JpbmRpbmdzOiAnO1xuICAgIHZhciBpO1xuICAgIHZhciBuID0gbmJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBzdHIgKz0gYmluZGluZ0RlYnVnKG5ic1tpXVswXSkgKyAnO1xcblxcdCc7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07IC8vIGJpbmRpbmdzRGVidWdcblxuICAvLyBVbmlmaWNhdGlvbjogc2VlIGFsc29cbiAgLy8gIGh0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC90ZXJtLnB5XG4gIC8vIGZvciBzaW1pbGFyIHRoaW5ncyBpbiBweXRob25cbiAgLy9cbiAgLy8gVW5pZmljYXRpb24gZmluZHMgYWxsIGJpbmRpbmdzIHN1Y2ggdGhhdCB3aGVuIHRoZSBiaW5kaW5nIGlzIGFwcGxpZWRcbiAgLy8gdG8gb25lIHRlcm0gaXQgaXMgZXF1YWwgdG8gdGhlIG90aGVyLlxuICAvLyBSZXR1cm5zOiBhIGxpc3Qgb2YgYmluZGluZ3MsIHdoZXJlIGEgYmluZGluZyBpcyBhbiBhc3NvY2lhdGl2ZSBhcnJheVxuICAvLyAgbWFwcGluZyB2YXJpdWFibGUgdG8gdmFsdWUuXG5cbiAgdmFyIHVuaWZ5VGVybSA9IGZ1bmN0aW9uIHVuaWZ5VGVybShzZWxmLCBvdGhlciwgYmluZGluZ3MsIGZvcm11bGEpIHtcbiAgICB2YXIgYWN0dWFsID0gYmluZGluZ3Nbc2VsZl07XG4gICAgaWYgKGFjdHVhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBOb3QgbWFwcGVkXG4gICAgICBpZiAoc2VsZi5pc1Zhcikge1xuICAgICAgICAvKiBpZiAoc2VsZi5pc0JsYW5rKSAgLy9ibm9kZXMgYXJlIGV4aXN0ZW50aWFsIHZhcmlhYmxlc1xuICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudG9TdHJpbmcoKSA9PSBvdGhlci50b1N0cmluZygpKSByZXR1cm4gW1sgW10sIG51bGxdXVxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIFtdXG4gICAgICAgIH0qL1xuICAgICAgICB2YXIgYiA9IFtdO1xuICAgICAgICBiW3NlbGZdID0gb3RoZXI7XG4gICAgICAgIHJldHVybiBbW2IsIG51bGxdXTsgLy8gTWF0Y2hcbiAgICAgIH1cbiAgICAgIGFjdHVhbCA9IHNlbGY7XG4gICAgfVxuICAgIGlmICghYWN0dWFsLmNvbXBsZXhUeXBlKSB7XG4gICAgICBpZiAoZm9ybXVsYS5yZWRpcmVjdGlvbnNbYWN0dWFsXSkge1xuICAgICAgICBhY3R1YWwgPSBmb3JtdWxhLnJlZGlyZWN0aW9uc1thY3R1YWxdO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm11bGEucmVkaXJlY3Rpb25zW290aGVyXSkge1xuICAgICAgICBvdGhlciA9IGZvcm11bGEucmVkaXJlY3Rpb25zW290aGVyXTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3R1YWwuc2FtZVRlcm0ob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBbW1tdLCBudWxsXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChzZWxmIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmlmeUNvbnRlbnRzKHNlbGYsIG90aGVyLCBiaW5kaW5ncyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcigncXVlcnkuanM6IG9vcHMgLSBjb2RlIG5vdCB3cml0dGVuIHlldCcpO1xuICAgIC8vIHJldHVybiB1bmRlZmluZWQ7ICAvLyBmb3IgbGludCAtIG5vIGpzbGludCBvYmplY3RzIHRvIHVucmVhY2hhYmxlc1xuICAgIC8vICAgIHJldHVybiBhY3R1YWwudW5pZnlDb250ZW50cyhvdGhlciwgYmluZGluZ3MpXG4gIH07IC8vIHVuaWZ5VGVybVxuXG4gIHZhciB1bmlmeUNvbnRlbnRzID0gZnVuY3Rpb24gdW5pZnlDb250ZW50cyhzZWxmLCBvdGhlciwgYmluZGluZ3MsIGZvcm11bGEpIHtcbiAgICB2YXIgbmJzMjtcbiAgICBpZiAoc2VsZi5sZW5ndGggIT09IG90aGVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtdOyAvLyBubyB3YXlcbiAgICB9XG4gICAgaWYgKCFzZWxmLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtbW10sIG51bGxdXTsgLy8gU3VjY2Vzc1xuICAgIH1cbiAgICB2YXIgbmJzID0gdW5pZnlUZXJtKHNlbGZbMF0sIG90aGVyWzBdLCBiaW5kaW5ncywgZm9ybXVsYSk7XG4gICAgaWYgKG5icy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBuYnM7XG4gICAgfVxuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbiA9IG5icy5sZW5ndGg7XG4gICAgdmFyIG5iO1xuICAgIHZhciBqO1xuICAgIHZhciBtO1xuICAgIHZhciB2O1xuICAgIHZhciBuYjI7XG4gICAgdmFyIGJpbmRpbmdzMjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAvLyBmb3IgZWFjaCBwb3NzaWJpbGl0eSBmcm9tIHRoZSBmaXJzdCB0ZXJtXG4gICAgICBuYiA9IG5ic1tpXVswXTsgLy8gbmV3IGJpbmRpbmdzXG4gICAgICBiaW5kaW5nczIgPSBbXTtcbiAgICAgIGZvciAodiBpbiBuYikge1xuICAgICAgICBpZiAobmIuaGFzT3duUHJvcGVydHkodikpIHtcbiAgICAgICAgICBiaW5kaW5nczJbdl0gPSBuYlt2XTsgLy8gY29weVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHYgaW4gYmluZGluZ3MpIHtcbiAgICAgICAgaWYgKGJpbmRpbmdzLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgYmluZGluZ3MyW3ZdID0gYmluZGluZ3Nbdl07IC8vIGNvcHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmJzMiA9IHVuaWZ5Q29udGVudHMoc2VsZi5zbGljZSgxKSwgb3RoZXIuc2xpY2UoMSksIGJpbmRpbmdzMiwgZm9ybXVsYSk7XG4gICAgICBtID0gbmJzMi5sZW5ndGg7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgaisrKSB7XG4gICAgICAgIG5iMiA9IG5iczJbal1bMF07IC8vIEBAQEAgbm8gaWRlYSB3aGV0aGVyIHRoaXMgaXMgdXNlZCBvciByaWdodFxuICAgICAgICBmb3IgKHYgaW4gbmIpIHtcbiAgICAgICAgICBpZiAobmIuaGFzT3duUHJvcGVydHkodikpIHtcbiAgICAgICAgICAgIG5iMlt2XSA9IG5iW3ZdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChbbmIyLCBudWxsXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07IC8vIHVuaWZ5Q29udGVudHNcblxuICAvLyAgTWF0Y2hpbmdcbiAgLy9cbiAgLy8gTWF0Y2hpbmcgZmluZHMgYWxsIGJpbmRpbmdzIHN1Y2ggdGhhdCB3aGVuIHRoZSBiaW5kaW5nIGlzIGFwcGxpZWRcbiAgLy8gdG8gb25lIHRlcm0gaXQgaXMgZXF1YWwgdG8gdGhlIG90aGVyIHRlcm0uICBXZSBvbmx5IG1hdGNoIGZvcm11bGFlLlxuXG4gIC8qKiBpZiB4IGlzIG5vdCBpbiB0aGUgYmluZGluZ3MgYXJyYXksIHJldHVybiB0aGUgdmFyOyBvdGhlcndpc2UsIHJldHVybiB0aGUgYmluZGluZ3MgKiovXG4gIHZhciBiaW5kID0gZnVuY3Rpb24gYmluZCh4LCBiaW5kaW5nKSB7XG4gICAgdmFyIHkgPSBiaW5kaW5nW3hdO1xuICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgICByZXR1cm4geTtcbiAgfTtcblxuICAvLyBXaGVuIHRoZXJlIGFyZSBPUFRJT05BTCBjbGF1c2VzLCB3ZSBtdXN0IHJldHVybiBiaW5kaW5ncyB3aXRob3V0IHRoZW0gaWYgbm9uZSBvZiB0aGVtXG4gIC8vIHN1Y2NlZWQuIEhvd2V2ZXIsIGlmIGFueSBvZiB0aGVtIGRvIHN1Y2NlZWQsIHdlIHNob3VsZCBub3QuICAoVGhpcyBpcyB3aGF0IGJyYW5jaENvdW50KClcbiAgLy8gdHJhY2tlZC4gVGhlIHByb2JsZW0gY3VycmVudGx5IGlzICgyMDExLzcpIHRoYXQgd2hlbiBzZXZlcmFsIG9wdGlvbmFscyBleGlzdCwgYW5kIHRoZXlcbiAgLy8gYWxsIG1hdGNoLCBtdWx0aXBsZSBzZXRzIG9mIGJpbmRpbmdzIGFyZSByZXR1cm5lZCwgZWFjaCB3aXRoIG9uZSBvcHRpb25hbCBmaWxsZWQgaW4uKVxuXG4gIHZhciB1bmlvbiA9IGZ1bmN0aW9uIHVuaW9uKGEsIGIpIHtcbiAgICB2YXIgYyA9IHt9O1xuICAgIHZhciB4O1xuICAgIGZvciAoeCBpbiBhKSB7XG4gICAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgICBjW3hdID0gYVt4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh4IGluIGIpIHtcbiAgICAgIGlmIChiLmhhc093blByb3BlcnR5KHgpKSB7XG4gICAgICAgIGNbeF0gPSBiW3hdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYztcbiAgfTtcblxuICB2YXIgT3B0aW9uYWxCcmFuY2hKdW5jdGlvbiA9IGZ1bmN0aW9uIE9wdGlvbmFsQnJhbmNoSnVuY3Rpb24ob3JpZ2luYWxDYWxsYmFjaywgdHJ1bmtCaW5kaW5ncykge1xuICAgIHRoaXMudHJ1bmtCaW5kaW5ncyA9IHRydW5rQmluZGluZ3M7XG4gICAgdGhpcy5vcmlnaW5hbENhbGxiYWNrID0gb3JpZ2luYWxDYWxsYmFjaztcbiAgICB0aGlzLmJyYW5jaGVzID0gW107XG4gICAgLy8gdGhpcy5yZXN1bHRzID0gW107IC8vIHJlc3VsdFtpXSBpcyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgYnJhbmNoIGlcbiAgICAvLyB0aGlzLmRvbmUgPSB7fTsgIC8vIGRvbmVbaV0gbWVhbnMgYWxsL2FueSByZXN1bHRzIGFyZSBpbiBmb3IgYnJhbmNoIGlcbiAgICAvLyB0aGlzLmNvdW50ID0ge31cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBPcHRpb25hbEJyYW5jaEp1bmN0aW9uLnByb3RvdHlwZS5jaGVja0FsbERvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYnJhbmNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5icmFuY2hlc1tpXS5kb25lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKCdPUFRJT05BTCBCSUROSU5HUyBBTEwgRE9ORTonKTtcbiAgICB0aGlzLmRvQ2FsbEJhY2tzKHRoaXMuYnJhbmNoZXMubGVuZ3RoIC0gMSwgdGhpcy50cnVua0JpbmRpbmdzKTtcbiAgfTtcbiAgLy8gUmVjcnVyc2l2ZWx5IGdlbmVyYXRlIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoZSBiaW5kaW5nc1xuICBPcHRpb25hbEJyYW5jaEp1bmN0aW9uLnByb3RvdHlwZS5kb0NhbGxCYWNrcyA9IGZ1bmN0aW9uIChiLCBiaW5kaW5ncykge1xuICAgIHZhciBqO1xuICAgIGlmIChiIDwgMCkge1xuICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxDYWxsYmFjayhiaW5kaW5ncyk7XG4gICAgfVxuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmJyYW5jaGVzW2JdLnJlc3VsdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHRoaXMuZG9DYWxsQmFja3MoYiAtIDEsIHVuaW9uKGJpbmRpbmdzLCB0aGlzLmJyYW5jaGVzW2JdLnJlc3VsdHNbal0pKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQSBtYW5kYXRvcnkgYnJhbmNoIGlzIHRoZSBub3JtYWwgb25lLCB3aGVyZSBjYWxsYmFja3NcbiAgLy8gYXJlIG1hZGUgaW1tZWRpYXRlbHkgYW5kIG5vIGp1bmN0aW9uIGlzIG5lZWRlZC5cbiAgLy8gTWlnaHQgYmUgdXNlZnVsIGZvciBvbkZpbnNpaGVkIGNhbGxiYWNrIGZvciBxdWVyeSBBUEkuXG4gIHZhciBNYW5kYXRvcnlCcmFuY2ggPSBmdW5jdGlvbiBNYW5kYXRvcnlCcmFuY2goY2FsbGJhY2ssIG9uRG9uZSkge1xuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMuc3VjY2VzcyA9IGZhbHNlO1xuICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgIC8vIHRoaXMucmVzdWx0cyA9IFtdXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMub25Eb25lID0gb25Eb25lO1xuICAgIC8vIHRoaXMuanVuY3Rpb24gPSBqdW5jdGlvblxuICAgIC8vIGp1bmN0aW9uLmJyYW5jaGVzLnB1c2godGhpcylcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBNYW5kYXRvcnlCcmFuY2gucHJvdG90eXBlLnJlcG9ydE1hdGNoID0gZnVuY3Rpb24gKGJpbmRpbmdzKSB7XG4gICAgLy8gbG9nLmVycm9yKFwiQEBAQCBxdWVyeS5qcyAxXCIpOyAvLyBAQFxuICAgIHRoaXMuY2FsbGJhY2soYmluZGluZ3MpO1xuICAgIHRoaXMuc3VjY2VzcyA9IHRydWU7XG4gIH07XG5cbiAgTWFuZGF0b3J5QnJhbmNoLnByb3RvdHlwZS5yZXBvcnREb25lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgbG9nLmluZm8oJ01hbmRhdG9yeSBxdWVyeSBicmFuY2ggZmluaXNoZWQuKioqJyk7XG4gICAgaWYgKHRoaXMub25Eb25lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub25Eb25lKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFuIG9wdGlvbmFsIGJyYW5jaCBob2FyZHMgaXRzIHJlc3VsdHMuXG4gIHZhciBPcHRpb25hbEJyYW5jaCA9IGZ1bmN0aW9uIE9wdGlvbmFsQnJhbmNoKGp1bmN0aW9uKSB7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgdGhpcy5yZXN1bHRzID0gW107XG4gICAgdGhpcy5qdW5jdGlvbiA9IGp1bmN0aW9uO1xuICAgIGp1bmN0aW9uLmJyYW5jaGVzLnB1c2godGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgT3B0aW9uYWxCcmFuY2gucHJvdG90eXBlLnJlcG9ydE1hdGNoID0gZnVuY3Rpb24gKGJpbmRpbmdzKSB7XG4gICAgdGhpcy5yZXN1bHRzLnB1c2goYmluZGluZ3MpO1xuICB9O1xuXG4gIE9wdGlvbmFsQnJhbmNoLnByb3RvdHlwZS5yZXBvcnREb25lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvZy5kZWJ1ZygnT3B0aW9uYWwgYnJhbmNoIGZpbmlzaGVkIC0gcmVzdWx0cy5sZW5ndGggPSAnICsgdGhpcy5yZXN1bHRzLmxlbmd0aCk7XG4gICAgaWYgKHRoaXMucmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFRoaXMgaXMgd2hhdCBvcHRpb25hbCBtZWFuczogaWYgbm8gaGl0cyxcbiAgICAgIHRoaXMucmVzdWx0cy5wdXNoKHt9KTsgLy8gbWltaWMgc3VjY2VzcywgYnV0IHdpdGggbm8gYmluZGluZ3NcbiAgICAgIGxvZy5kZWJ1ZyhcIk9wdGlvbmFsIGJyYW5jaCBGQUlMRUQgLSB0aGF0J3MgT0suXCIpO1xuICAgIH1cbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuanVuY3Rpb24uY2hlY2tBbGxEb25lKCk7XG4gIH07XG5cbiAgLyoqIHByZXBhcmUgLS0gc2V0cyB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gdGhlIHBvc3NpYmxlIG1hdGNoZXNcbiAgICAgICogQHBhcmFtIGYgLSBmb3JtdWxhXG4gICAgICAqIEBwYXJhbSBpdGVtIC0gYW4gU3RhdGVtZW50LCBwb3NzaWJseSB3LyB2YXJzIGluIGl0XG4gICAgICAqIEBwYXJhbSBiaW5kaW5ncyAtXG4gICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcXVlcnkgZmFpbHMgLS0gdGhlcmUgYXJlIG5vIGl0ZW1zIHRoYXQgbWF0Y2ggKiovXG4gIHZhciBwcmVwYXJlID0gZnVuY3Rpb24gcHJlcGFyZShmLCBpdGVtLCBiaW5kaW5ncykge1xuICAgIHZhciB0LCB0ZXJtcywgdGVybUluZGV4LCBpLCBpbmQ7XG4gICAgaXRlbS5udmFycyA9IDA7XG4gICAgaXRlbS5pbmRleCA9IG51bGw7XG4gICAgLy8gaWYgKCFmLnN0YXRlbWVudHMpIGxvZy53YXJuKFwiQEBAIHByZXBhcmU6IGYgaXMgXCIrZilcbiAgICAvLyAgICBsb2cuZGVidWcoXCJQcmVwYXJlOiBmIGhhcyBcIisgZi5zdGF0ZW1lbnRzLmxlbmd0aClcbiAgICAvLyBsb2cuZGVidWcoXCJQcmVwYXJlOiBLYiBzaXplIFwiK2Yuc3RhdGVtZW50cy5sZW5ndGgrXCIgUHJlcGFyaW5nIFwiK2l0ZW0pXG5cbiAgICB0ZXJtcyA9IFtpdGVtLnN1YmplY3QsIGl0ZW0ucHJlZGljYXRlLCBpdGVtLm9iamVjdF07XG4gICAgaW5kID0gW2Yuc3ViamVjdEluZGV4LCBmLnByZWRpY2F0ZUluZGV4LCBmLm9iamVjdEluZGV4XTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAvLyBhbGVydChcIlByZXBhcmUgXCIrdGVybXNbaV0rXCIgXCIrKHRlcm1zW2ldIGluIGJpbmRpbmdzKSlcbiAgICAgIGlmICh0ZXJtc1tpXS5pc1ZhciAmJiAhKGJpbmRpbmdzW3Rlcm1zW2ldXSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBpdGVtLm52YXJzKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ID0gYmluZCh0ZXJtc1tpXSwgYmluZGluZ3MpOyAvLyByZXR1cm5zIHRoZSBSREYgYmluZGluZyBpZiBib3VuZCwgb3RoZXJ3aXNlIGl0c2VsZlxuICAgICAgICAvLyBpZiAodGVybXNbaV0hPWJpbmQodGVybXNbaV0sYmluZGluZ3MpIGFsZXJ0KFwiVGVybTogXCIrdGVybXNbaV0rXCJCaW5kaW5nOiBcIitiaW5kKHRlcm1zW2ldLCBiaW5kaW5ncykpXG4gICAgICAgIGlmIChmLnJlZGlyZWN0aW9uc1t0Lmhhc2hTdHJpbmcoKV0pIHtcbiAgICAgICAgICB0ID0gZi5yZWRpcmVjdGlvbnNbdC5oYXNoU3RyaW5nKCldOyAvLyByZWRpcmVjdFxuICAgICAgICB9XG4gICAgICAgIHRlcm1JbmRleCA9IGluZFtpXVt0Lmhhc2hTdHJpbmcoKV07XG5cbiAgICAgICAgaWYgKCF0ZXJtSW5kZXgpIHtcbiAgICAgICAgICBpdGVtLmluZGV4ID0gW107XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBRdWVyeSBsaW5lIGNhbm5vdCBtYXRjaFxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLmluZGV4ID09PSBudWxsIHx8IGl0ZW0uaW5kZXgubGVuZ3RoID4gdGVybUluZGV4Lmxlbmd0aCkge1xuICAgICAgICAgIGl0ZW0uaW5kZXggPSB0ZXJtSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXRlbS5pbmRleCA9PT0gbnVsbCkge1xuICAgICAgLy8gQWxsIDMgYXJlIHZhcmlhYmxlcz9cbiAgICAgIGl0ZW0uaW5kZXggPSBmLnN0YXRlbWVudHM7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9OyAvLyBwcmVwYXJlXG5cbiAgLyoqIHNvcnRpbmcgZnVuY3Rpb24gLS0gbmVnYXRpdmUgaWYgc2VsZiBpcyBlYXNpZXIgKiovXG4gIC8vIFdlIGFsd2F5cyBwcmVmZXIgdG8gc3RhcnQgd2l0aCBhIFVSSSB0byBiZSBhYmxlIHRvIGJyb3dzZSBhIGdyYXBoXG4gIC8vIHRoaXMgaXMgd2h5IHdlIHB1dCBvZmYgaXRlbXMgd2l0aCBtb3JlIHZhcmlhYmxlcyB0aWxsIGxhdGVyLlxuICBmdW5jdGlvbiBlYXNpZXN0UXVlcnkoc2VsZiwgb3RoZXIpIHtcbiAgICBpZiAoc2VsZi5udmFycyAhPT0gb3RoZXIubnZhcnMpIHtcbiAgICAgIHJldHVybiBzZWxmLm52YXJzIC0gb3RoZXIubnZhcnM7XG4gICAgfVxuICAgIHJldHVybiBzZWxmLmluZGV4Lmxlbmd0aCAtIG90aGVyLmluZGV4Lmxlbmd0aDtcbiAgfVxuXG4gIHZhciBtYXRjaF9pbmRleCA9IDA7IC8vIGluZGV4XG4gIC8qKiBtYXRjaGVzIGEgcGF0dGVybiBmb3JtdWxhIGFnYWluc3QgdGhlIGtub3dsZWRnZSBiYXNlLCBlLmcuIHRvIGZpbmQgbWF0Y2hlcyBmb3IgdGFibGUtdmlld1xuICAqXG4gICogQHBhcmFtIGYgLSBrbm93bGVkZ2UgYmFzZSBmb3JtdWxhXG4gICogQHBhcmFtIGcgLSBwYXR0ZXJuIGZvcm11bGEgKG1heSBoYXZlIHZhcnMpXG4gICogQHBhcmFtIGJpbmRpbmdzU29GYXIgIC0gYmluZGluZ3MgYWNjdW11bGF0ZWQgaW4gbWF0Y2hpbmcgdG8gZGF0ZVxuICAqIEBwYXJhbSBsZXZlbCAtIHNwYWNlcyB0byBpbmRlbnQgc3R1ZmYgYWxzbyBsZXRzIHlvdSBrbm93IHdoYXQgbGV2ZWwgb2YgcmVjdXJzaW9uIHlvdSdyZSBhdFxuICAqIEBwYXJhbSBmZXRjaGVyIC0gZnVuY3Rpb24gKHRlcm0sIHJlcXVlc3RlZEJ5KSAtIG15RmV0Y2hlciAvIEFKQVJfaGFuZGxlTmV3VGVybSAvIHRoZSBzb3J0XG4gICogQHBhcmFtIGxvY2FsQ2FsbGJhY2sgLSBmdW5jdGlvbihiaW5kaW5ncywgcGF0dGVybiwgYnJhbmNoKSBjYWxsZWQgb24gc3VjZXNzXG4gICogQHJldHVybnMgbm90aGluZ1xuICAqXG4gICogV2lsbCBmZXRjaCBsaW5rZWQgZGF0YSBmcm9tIHRoZSB3ZWIgaWZmIHRoZSBrbm93bGVkZ2UgYmFzZSBhbiBhc3NvY2lhdGVkIHNvdXJjZSBmZXRjaGVyIChmLmZldGNoZXIpXG4gICoqKi9cbiAgdmFyIG1hdGNoID0gZnVuY3Rpb24gbWF0Y2goZiwgZywgYmluZGluZ3NTb0ZhciwgbGV2ZWwsIGZldGNoZXIsIGxvY2FsQ2FsbGJhY2ssIGJyYW5jaCkge1xuICAgIGxvZy5kZWJ1ZygnTWF0Y2ggYmVnaW5zLCBCcmFuY2ggY291bnQgbm93OiAnICsgYnJhbmNoLmNvdW50ICsgJyBmb3IgJyArIGJyYW5jaC5wYXR0ZXJuX2RlYnVnKTtcbiAgICB2YXIgc2YgPSBmLmZldGNoZXIgPyBmLmZldGNoZXIgOiBudWxsO1xuICAgIC8vIGxvZy5kZWJ1ZyhcIm1hdGNoOiBmIGhhcyBcIitmLnN0YXRlbWVudHMubGVuZ3RoK1wiLCBnIGhhcyBcIitnLnN0YXRlbWVudHMubGVuZ3RoKVxuICAgIHZhciBwYXR0ZXJuID0gZy5zdGF0ZW1lbnRzO1xuICAgIGlmIChwYXR0ZXJuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gd2hlbiBpdCdzIHNhdGlzZmllZCBhbGwgdGhlIHBhdHRlcm4gdHJpcGxlc1xuICAgICAgbG9nLmRlYnVnKCdGT1VORCBNQVRDSCBXSVRIIEJJTkRJTkdTOicgKyBiaW5kaW5nRGVidWcoYmluZGluZ3NTb0ZhcikpO1xuICAgICAgaWYgKGcub3B0aW9uYWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGJyYW5jaC5yZXBvcnRNYXRjaChiaW5kaW5nc1NvRmFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnT1BUSU9OQUw6ICcgKyBnLm9wdGlvbmFsKTtcbiAgICAgICAgdmFyIGp1bmN0aW9uID0gbmV3IE9wdGlvbmFsQnJhbmNoSnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRpbmdzU29GYXIpOyAvLyBAQCB3b24ndCB3b3JrIHdpdGggbmVzdGVkIG9wdGlvbmFscz8gbmVzdCBjYWxsYmFja3NcbiAgICAgICAgdmFyIGJyID0gW107XG4gICAgICAgIHZhciBiO1xuICAgICAgICBmb3IgKGIgPSAwOyBiIDwgZy5vcHRpb25hbC5sZW5ndGg7IGIrKykge1xuICAgICAgICAgIGJyW2JdID0gbmV3IE9wdGlvbmFsQnJhbmNoKGp1bmN0aW9uKTsgLy8gQWxsb2NhdGUgYnJhbmNoZXMgdG8gcHJldmVudCBwcmVtYXR1cmUgZW5kaW5nXG4gICAgICAgICAgYnJbYl0ucGF0dGVybl9kZWJ1ZyA9IGcub3B0aW9uYWxbYl07IC8vIGZvciBkaWFnbm90aWNzIG9ubHlcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGIgPSAwOyBiIDwgZy5vcHRpb25hbC5sZW5ndGg7IGIrKykge1xuICAgICAgICAgIGJyW2JdLmNvdW50ID0gYnJbYl0uY291bnQgKyAxOyAvLyBDb3VudCBob3cgbWFueSBtYXRjaGVzIHdlIGhhdmUgeWV0IHRvIGNvbXBsZXRlXG4gICAgICAgICAgbWF0Y2goZiwgZy5vcHRpb25hbFtiXSwgYmluZGluZ3NTb0ZhciwgJycsIGZldGNoZXIsIGNhbGxiYWNrLCBicltiXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyYW5jaC5jb3VudC0tO1xuICAgICAgbG9nLmRlYnVnKCdNYXRjaCBlbmRzIC0tIHN1Y2Nlc3MgLCBCcmFuY2ggY291bnQgbm93OiAnICsgYnJhbmNoLmNvdW50ICsgJyBmb3IgJyArIGJyYW5jaC5wYXR0ZXJuX2RlYnVnKTtcbiAgICAgIHJldHVybjsgLy8gU3VjY2Vzc1xuICAgIH1cblxuICAgIHZhciBpdGVtO1xuICAgIHZhciBpO1xuICAgIHZhciBuID0gcGF0dGVybi5sZW5ndGg7XG4gICAgLy8gbG9nLmRlYnVnKGxldmVsICsgXCJNYXRjaCBcIituK1wiIGxlZnQsIGJzIHNvIGZhcjpcIitiaW5kaW5nRGVidWcoYmluZGluZ3NTb0ZhcikpXG5cbiAgICAvLyBGb2xsb3cgbGlua3MgZnJvbSB2YXJpYWJsZXMgaW4gcXVlcnlcbiAgICBpZiAoc2YpIHtcbiAgICAgIC8vIEZldGNoZXIgaXMgdXNlZCB0byBmZXRjaCBVUklzLCBmdW5jdGlvbiBmaXJzdCB0ZXJtIGlzIGEgVVJJIHRlcm0sIHNlY29uZCBpcyB0aGUgcmVxdWVzdGVyXG4gICAgICB2YXIgaWQgPSAnbWF0Y2gnICsgbWF0Y2hfaW5kZXgrKztcbiAgICAgIHZhciBmZXRjaFJlc291cmNlID0gZnVuY3Rpb24gZmV0Y2hSZXNvdXJjZShyZXF1ZXN0ZWRUZXJtLCBpZCkge1xuICAgICAgICB2YXIgZG9jdXJpID0gcmVxdWVzdGVkVGVybS51cmkuc3BsaXQoJyMnKVswXTtcbiAgICAgICAgc2Yubm93T3JXaGVuRmV0Y2hlZChkb2N1cmksIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVyciwgYm9keSwgeGhyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGZvbGxvd2luZyBsaW5rIHRvIDwnICsgcmVxdWVzdGVkVGVybS51cmkgKyAnPiBpbiBxdWVyeTogJyArIGJvZHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXRjaChmLCBnLCBiaW5kaW5nc1NvRmFyLCBsZXZlbCwgZmV0Y2hlciwgLy8gbWF0Y2ggbm90IG1hdGNoMiB0byBsb29rIHVwIGFueSBvdGhlcnMgbmVjZXNzYXJ5LlxuICAgICAgICAgIGxvY2FsQ2FsbGJhY2ssIGJyYW5jaCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKlxuICAgICAgICBpZiggc2YgKSB7XG4gICAgICAgICAgICBzZi5hZGRDYWxsYmFjaygnZG9uZScsIGZ1bmN0aW9uKHVyaSkge1xuICAgICAgICAgICAgICAgIGlmICgoa2IuY2Fub24oa2Iuc3ltKHVyaSkpLnVyaSAhPT0gcGF0aCkgJiYgKHVyaSAhPT0ga2IuY2Fub24oa2Iuc3ltKHBhdGgpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGZldGNoZXIocmVxdWVzdGVkVGVybSwgaWQpXG4gICAgICAgICovXG4gICAgICB9O1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVtID0gcGF0dGVybltpXTsgLy8gZm9yIGVhY2ggb2YgdGhlIHRyaXBsZXMgaW4gdGhlIHF1ZXJ5XG4gICAgICAgIGlmIChiaW5kaW5nc1NvRmFyW2l0ZW0uc3ViamVjdF0gIT09IHVuZGVmaW5lZCAmJiBiaW5kaW5nc1NvRmFyW2l0ZW0uc3ViamVjdF0udXJpICYmIHNmICYmIHNmLmdldFN0YXRlKGRvY3BhcnQoYmluZGluZ3NTb0ZhcltpdGVtLnN1YmplY3RdLnVyaSkpID09PSAndW5yZXF1ZXN0ZWQnKSB7XG4gICAgICAgICAgLy8gZmV0Y2ggdGhlIHN1YmplY3QgaW5mbyBhbmQgcmV0dXJuIHRvIGlkXG4gICAgICAgICAgZmV0Y2hSZXNvdXJjZShiaW5kaW5nc1NvRmFyW2l0ZW0uc3ViamVjdF0sIGlkKTtcbiAgICAgICAgICByZXR1cm47IC8vIG9ubHkgbG9vayB1cCBvbmUgcGVyIGxpbmUgdGhpcyB0aW1lLCBidXQgd2Ugd2lsbCBjb21lIGJhY2sgYWdhaW4gdGhvdWdoIG1hdGNoXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpbmRpbmdzU29GYXJbaXRlbS5vYmplY3RdICE9PSB1bmRlZmluZWQgJiYgYmluZGluZ3NTb0ZhcltpdGVtLm9iamVjdF0udXJpICYmIHNmICYmIHNmLmdldFN0YXRlKGRvY3BhcnQoYmluZGluZ3NTb0ZhcltpdGVtLm9iamVjdF0udXJpKSkgPT09ICd1bnJlcXVlc3RlZCcpIHtcbiAgICAgICAgICBmZXRjaFJlc291cmNlKGJpbmRpbmdzU29GYXJbaXRlbS5vYmplY3RdLCBpZCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBpZiBzZlxuICAgIG1hdGNoMihmLCBnLCBiaW5kaW5nc1NvRmFyLCBsZXZlbCwgZmV0Y2hlciwgbG9jYWxDYWxsYmFjaywgYnJhbmNoKTtcbiAgICByZXR1cm47XG4gIH07IC8vIG1hdGNoXG5cbiAgdmFyIGNvbnN0cmFpbnRzU2F0aXNmaWVkID0gZnVuY3Rpb24gY29uc3RyYWludHNTYXRpc2ZpZWQoYmluZGluZ3MsIGNvbnN0cmFpbnRzKSB7XG4gICAgdmFyIHJlcyA9IHRydWU7XG4gICAgdmFyIHg7XG4gICAgdmFyIHRlc3Q7XG4gICAgZm9yICh4IGluIGJpbmRpbmdzKSB7XG4gICAgICBpZiAoYmluZGluZ3MuaGFzT3duUHJvcGVydHkoeCkpIHtcbiAgICAgICAgaWYgKGNvbnN0cmFpbnRzW3hdKSB7XG4gICAgICAgICAgdGVzdCA9IGNvbnN0cmFpbnRzW3hdLnRlc3Q7XG4gICAgICAgICAgaWYgKHRlc3QgJiYgIXRlc3QoYmluZGluZ3NbeF0pKSB7XG4gICAgICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvKiogbWF0Y2gyIC0tIHN0dWZmIGFmdGVyIHRoZSBmZXRjaCAqKi9cbiAgdmFyIG1hdGNoMiA9IGZ1bmN0aW9uIG1hdGNoMihmLCBnLCBiaW5kaW5nc1NvRmFyLCBsZXZlbCwgZmV0Y2hlciwgY2FsbGJhY2ssIGJyYW5jaCkge1xuICAgIC8vIHBvc3QgZmV0Y2hcbiAgICB2YXIgcGF0dGVybiA9IGcuc3RhdGVtZW50cztcbiAgICB2YXIgbiA9IHBhdHRlcm4ubGVuZ3RoO1xuICAgIHZhciBpO1xuICAgIHZhciBrO1xuICAgIHZhciBuaztcbiAgICB2YXIgdjtcbiAgICB2YXIgYmluZGluZ3MyO1xuICAgIHZhciBuZXdCaW5kaW5nczE7XG4gICAgdmFyIGl0ZW07XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgLy8gRm9yIGVhY2ggc3RhdGVtZW50IGxlZnQgaW4gdGhlIHF1ZXJ5LCBydW4gcHJlcGFyZVxuICAgICAgaXRlbSA9IHBhdHRlcm5baV07XG4gICAgICBsb2cuaW5mbygnbWF0Y2gyOiBpdGVtPScgKyBpdGVtICsgJywgYmluZGluZ3NTb0Zhcj0nICsgYmluZGluZ0RlYnVnKGJpbmRpbmdzU29GYXIpKTtcbiAgICAgIHByZXBhcmUoZiwgaXRlbSwgYmluZGluZ3NTb0Zhcik7XG4gICAgfVxuICAgIHBhdHRlcm4uc29ydChlYXNpZXN0UXVlcnkpO1xuICAgIGl0ZW0gPSBwYXR0ZXJuWzBdO1xuICAgIC8vIGxvZy5kZWJ1ZyhcIlNvcnRlZCBwYXR0ZXJuOlxcblwiK3BhdHRlcm4pXG4gICAgdmFyIHJlc3QgPSBmLmZvcm11bGEoKTtcbiAgICByZXN0Lm9wdGlvbmFsID0gZy5vcHRpb25hbDtcbiAgICByZXN0LmNvbnN0cmFpbnRzID0gZy5jb25zdHJhaW50cztcbiAgICByZXN0LnN0YXRlbWVudHMgPSBwYXR0ZXJuLnNsaWNlKDEpOyAvLyBObyBpbmRleGVzOiB3ZSB3aWxsIG5vdCBxdWVyeSBnLlxuICAgIGxvZy5kZWJ1ZyhsZXZlbCArICdtYXRjaDIgc2VhcmNoaW5nICcgKyBpdGVtLmluZGV4Lmxlbmd0aCArICcgZm9yICcgKyBpdGVtICsgJzsgYmluZGluZ3Mgc28gZmFyPScgKyBiaW5kaW5nRGVidWcoYmluZGluZ3NTb0ZhcikpO1xuICAgIC8vIHZhciByZXN1bHRzID0gW11cbiAgICB2YXIgYztcbiAgICB2YXIgbmMgPSBpdGVtLmluZGV4Lmxlbmd0aDtcbiAgICB2YXIgbmJzMTtcbiAgICB2YXIgc3Q7XG4gICAgdmFyIG9ud2FyZCA9IDA7XG4gICAgLy8gdmFyIHhcbiAgICBmb3IgKGMgPSAwOyBjIDwgbmM7IGMrKykge1xuICAgICAgLy8gRm9yIGVhY2ggY2FuZGlkYXRlIHN0YXRlbWVudFxuICAgICAgc3QgPSBpdGVtLmluZGV4W2NdOyAvLyBmb3IgZWFjaCBzdGF0ZW1lbnQgaW4gdGhlIGl0ZW0ncyBpbmRleCwgc3Bhd24gYSBuZXcgbWF0Y2ggd2l0aCB0aGF0IGJpbmRpbmdcbiAgICAgIG5iczEgPSB1bmlmeUNvbnRlbnRzKFtpdGVtLnN1YmplY3QsIGl0ZW0ucHJlZGljYXRlLCBpdGVtLm9iamVjdF0sIFtzdC5zdWJqZWN0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdF0sIGJpbmRpbmdzU29GYXIsIGYpO1xuICAgICAgbG9nLmluZm8obGV2ZWwgKyAnIEZyb20gZmlyc3Q6ICcgKyBuYnMxLmxlbmd0aCArICc6ICcgKyBiaW5kaW5nc0RlYnVnKG5iczEpKTtcbiAgICAgIG5rID0gbmJzMS5sZW5ndGg7XG4gICAgICAvLyBicmFuY2guY291bnQgKz0gbmtcbiAgICAgIC8vIGxvZy5kZWJ1ZyhcIkJyYW5jaCBjb3VudCBidW1wZWQgXCIrbmsrXCIgdG86IFwiK2JyYW5jaC5jb3VudClcbiAgICAgIGZvciAoayA9IDA7IGsgPCBuazsgaysrKSB7XG4gICAgICAgIC8vIEZvciBlYWNoIHdheSB0aGF0IHN0YXRlbWVudCBiaW5kc1xuICAgICAgICBiaW5kaW5nczIgPSBbXTtcbiAgICAgICAgbmV3QmluZGluZ3MxID0gbmJzMVtrXVswXTtcbiAgICAgICAgaWYgKCFjb25zdHJhaW50c1NhdGlzZmllZChuZXdCaW5kaW5nczEsIGcuY29uc3RyYWludHMpKSB7XG4gICAgICAgICAgLy8gYnJhbmNoLmNvdW50LS1cbiAgICAgICAgICBsb2cuZGVidWcoJ0JyYW5jaCBjb3VudCBDUzogJyArIGJyYW5jaC5jb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2IGluIG5ld0JpbmRpbmdzMSkge1xuICAgICAgICAgICAgaWYgKG5ld0JpbmRpbmdzMS5oYXNPd25Qcm9wZXJ0eSh2KSkge1xuICAgICAgICAgICAgICBiaW5kaW5nczJbdl0gPSBuZXdCaW5kaW5nczFbdl07IC8vIGNvcHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2IGluIGJpbmRpbmdzU29GYXIpIHtcbiAgICAgICAgICAgIGlmIChiaW5kaW5nc1NvRmFyLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgICAgIGJpbmRpbmdzMlt2XSA9IGJpbmRpbmdzU29GYXJbdl07IC8vIGNvcHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmFuY2guY291bnQrKzsgLy8gQ291bnQgaG93IG1hbnkgbWF0Y2hlcyB3ZSBoYXZlIHlldCB0byBjb21wbGV0ZVxuICAgICAgICAgIG9ud2FyZCsrO1xuICAgICAgICAgIG1hdGNoKGYsIHJlc3QsIGJpbmRpbmdzMiwgbGV2ZWwgKyAnICAnLCBmZXRjaGVyLCBjYWxsYmFjaywgYnJhbmNoKTsgLy8gY2FsbCBtYXRjaFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJyYW5jaC5jb3VudC0tO1xuICAgIGlmIChvbndhcmQgPT09IDApIHtcbiAgICAgIGxvZy5kZWJ1ZygnTWF0Y2gyIGZhaWxzIGNvbXBsZXRlbHkgb24gJyArIGl0ZW0pO1xuICAgIH1cbiAgICBsb2cuZGVidWcoJ01hdGNoMiBlbmRzLCBCcmFuY2ggY291bnQ6ICcgKyBicmFuY2guY291bnQgKyAnIGZvciAnICsgYnJhbmNoLnBhdHRlcm5fZGVidWcpO1xuICAgIGlmIChicmFuY2guY291bnQgPT09IDApIHtcbiAgICAgIGxvZy5kZWJ1ZygnQnJhbmNoIGZpbmlzaGVkLicpO1xuICAgICAgYnJhbmNoLnJlcG9ydERvbmUoKTtcbiAgICB9XG4gIH07IC8vIG1hdGNoMlxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBCb2R5IG9mIHF1ZXJ5KCkgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8qXG4gIGlmKCFmZXRjaGVyKSB7XG4gICAgICBmZXRjaGVyPWZ1bmN0aW9uICh4LCByZXF1ZXN0ZWRCeSkge1xuICAgICAgICAgIGlmICh4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICAkcmRmLlV0aWwuQUpBUl9oYW5kbGVOZXdUZXJtKGtiLCB4LCByZXF1ZXN0ZWRCeSlcbiAgICAgIH1cbiAgfVxuICAqL1xuICAvLyBwcmVwYXJlLCBvbmNhbGxiYWNrOiBtYXRjaDFcbiAgLy8gbWF0Y2gxOiBmZXRjaGVyLCBvbmNhbGxiYWNrOiBtYXRjaDJcbiAgLy8gbWF0Y2gyLCBvbmNhbGxiYWNrOiBwb3B1bGF0ZXRhYmxlXG4gIC8vICAgIGxvZy5kZWJ1ZyhcIlF1ZXJ5IEYgbGVuZ3RoXCIrdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aCtcIiBHPVwiK215UXVlcnkpXG4gIHZhciBmID0gdGhpcztcbiAgbG9nLmRlYnVnKCdRdWVyeSBvbiAnICsgdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aCk7XG4gIC8vIGtiLnJlbW90ZVF1ZXJ5KG15UXVlcnksJ2h0dHA6Ly9qZW5hLmhwbC5ocC5jb206MzA0MC9iYWNrc3RhZ2UnLGNhbGxiYWNrKVxuICAvLyByZXR1cm5cbiAgdmFyIHRydW5jayA9IG5ldyBNYW5kYXRvcnlCcmFuY2goY2FsbGJhY2ssIG9uRG9uZSk7XG4gIHRydW5jay5jb3VudCsrOyAvLyBjb3VudCBvbmUgYnJhbmNoIHRvIGNvbXBsZXRlIGF0IHRoZSBtb21lbnRcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgbWF0Y2goZiwgbXlRdWVyeS5wYXQsIG15UXVlcnkucGF0LmluaXRCaW5kaW5ncywgJycsIGZldGNoZXIsIGNhbGxiYWNrLCB0cnVuY2sgLyogYnJhbmNoICovKTtcbiAgfSwgMCk7XG5cbiAgcmV0dXJuOyAvLyByZXR1cm5zIG5vdGhpbmc7IGNhbGxiYWNrIGRvZXMgdGhlIHdvcmtcbn0gLy8gcXVlcnlcblxubW9kdWxlLmV4cG9ydHMuUXVlcnkgPSBRdWVyeTtcbm1vZHVsZS5leHBvcnRzLmluZGV4ZWRGb3JtdWxhUXVlcnkgPSBpbmRleGVkRm9ybXVsYVF1ZXJ5OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gIFJERmEgUGFyc2VyIGZvciByZGZsaWIuanNcblxuLy8gT3JpZ2luYWxseSBieTogQWxleCBNaWxvd3NraVxuLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWxleG1pbG93c2tpL2dyZWVuLXR1cnRsZVxuLy8gQ29udmVydGVkOiB0aW1ibCAyMDE1LTA4LTI1IG5vdCB5ZXQgd29ya2luZ1xuLy8gQWRkZWQgd3JhcHBlcjogY3NhcnZlbiAyMDE2LTA1LTA5IHdvcmtpbmdcblxuLy8gUkRGYVByb2Nlc3Nvci5wcm90b3R5cGUgPSBuZXcgT2JqZWN0KCkgLy8gV2FzIFVSSVJlc29sdmVyXG5cbi8vIFJERmFQcm9jZXNzb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPVJERmFQcm9jZXNzb3JcblxuLy8gb3B0aW9ucy5iYXNlID0gYmFzZSBVUkkgICAgbm90IHJlYWxseSBhbiBvcHRpb24sIHNob3B1bGQgYWx3YXlzIGJlIHNldC5cbi8vXG5cbnZhciBCbGFua05vZGUgPSByZXF1aXJlKCcuL2JsYW5rLW5vZGUnKTtcbnZhciBMaXRlcmFsID0gcmVxdWlyZSgnLi9saXRlcmFsJyk7XG52YXIgcmRmID0gcmVxdWlyZSgnLi9kYXRhLWZhY3RvcnknKTtcbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKTtcbnZhciBVcmkgPSByZXF1aXJlKCcuL3VyaScpO1xudmFyIFV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuaWYgKHR5cGVvZiBOb2RlID09PSAndW5kZWZpbmVkJykge1xuICAvLyAgQEBAQEBAIEdsb2JhbC4gSW50ZXJmYWNlIHRvIHhtbGRvbS5cbiAgdmFyIE5vZGUgPSB7XG4gICAgRUxFTUVOVF9OT0RFOiAxLFxuICAgIEFUVFJJQlVURV9OT0RFOiAyLFxuICAgIFRFWFRfTk9ERTogMyxcbiAgICBDREFUQV9TRUNUSU9OX05PREU6IDQsXG4gICAgRU5USVRZX1JFRkVSRU5DRV9OT0RFOiA1LFxuICAgIEVOVElUWV9OT0RFOiA2LFxuICAgIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTogNyxcbiAgICBDT01NRU5UX05PREU6IDgsXG4gICAgRE9DVU1FTlRfTk9ERTogOSxcbiAgICBET0NVTUVOVF9UWVBFX05PREU6IDEwLFxuICAgIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6IDExLFxuICAgIE5PVEFUSU9OX05PREU6IDEyXG4gIH07XG59XG5cbnZhciBSREZhUHJvY2Vzc29yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSREZhUHJvY2Vzc29yKGtiLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJERmFQcm9jZXNzb3IpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLmtiID0ga2I7XG4gICAgdGhpcy50YXJnZXQgPSBvcHRpb25zLnRhcmdldCB8fCB7XG4gICAgICBncmFwaDoge1xuICAgICAgICBzdWJqZWN0czoge30sXG4gICAgICAgIHByZWZpeGVzOiB7fSxcbiAgICAgICAgdGVybXM6IHt9XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBYWFg6IEFkZGVkIHRvIHRyYWNrIGJub2Rlc1xuICAgIHRoaXMuYmxhbmtOb2RlcyA9IFtdO1xuICAgIC8vIFhYWDogQWRkZWQgZm9yIG5vcm1hbGlzYXRpb25cbiAgICB0aGlzLmh0bWxPcHRpb25zID0ge1xuICAgICAgJ3NlbGZDbG9zaW5nJzogJ2JyIGltZyBpbnB1dCBhcmVhIGJhc2UgYmFzZWZvbnQgY29sIGNvbGdyb3VwIHNvdXJjZSB3YnIgaXNpbmRleCBsaW5rIG1ldGEgcGFyYW0gaHInXG4gICAgfTtcbiAgICB0aGlzLnRoZU9uZSA9ICdfOicgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLmxhbmd1YWdlID0gbnVsbDtcbiAgICB0aGlzLnZvY2FidWxhcnkgPSBudWxsO1xuICAgIHRoaXMuYmxhbmtDb3VudGVyID0gMDtcbiAgICB0aGlzLmxhbmdBdHRyaWJ1dGVzID0gW3sgbmFtZXNwYWNlVVJJOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgbG9jYWxOYW1lOiAnbGFuZycgfV07XG4gICAgdGhpcy5pblhIVE1MTW9kZSA9IGZhbHNlO1xuICAgIHRoaXMuYWJzVVJJUkUgPSAvW1xcd1xcX1xcLV0rOlxcUysvO1xuICAgIHRoaXMuZmluaXNoZWRIYW5kbGVycyA9IFtdO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJERmFQcm9jZXNzb3IsIFt7XG4gICAga2V5OiAnYWRkVHJpcGxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVHJpcGxlKG9yaWdpbiwgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpIHtcbiAgICAgIHZhciBzdSwgb2IsIHByLCBvcjtcbiAgICAgIGlmICh0eXBlb2Ygc3ViamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3UgPSByZGYubmFtZWROb2RlKHRoaXMub3B0aW9ucy5iYXNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1ID0gdGhpcy50b1JERk5vZGVPYmplY3Qoc3ViamVjdCk7XG4gICAgICB9XG4gICAgICBwciA9IHRoaXMudG9SREZOb2RlT2JqZWN0KHByZWRpY2F0ZSk7XG4gICAgICBvYiA9IHRoaXMudG9SREZOb2RlT2JqZWN0KG9iamVjdCk7XG4gICAgICBvciA9IHJkZi5uYW1lZE5vZGUodGhpcy5vcHRpb25zLmJhc2UpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ0FkZGluZyB7ICcgKyBzdSArICcgJyArIHByICsgJyAnICsgb2IgKyAnICcgKyBvciArICcgfScpXG4gICAgICB0aGlzLmtiLmFkZChzdSwgcHIsIG9iLCBvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYW5jZXN0b3JQYXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYW5jZXN0b3JQYXRoKG5vZGUpIHtcbiAgICAgIHZhciBwYXRoID0gJyc7XG4gICAgICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVUeXBlICE9PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgICAgcGF0aCA9ICcvJyArIG5vZGUubG9jYWxOYW1lICsgcGF0aDtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvcHlNYXBwaW5ncycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHlNYXBwaW5ncyhtYXBwaW5ncykge1xuICAgICAgdmFyIG5ld01hcHBpbmdzID0ge307XG4gICAgICBmb3IgKHZhciBrIGluIG1hcHBpbmdzKSB7XG4gICAgICAgIG5ld01hcHBpbmdzW2tdID0gbWFwcGluZ3Nba107XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3TWFwcGluZ3M7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29weVByb3BlcnRpZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5UHJvcGVydGllcygpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXJpdmVEYXRlVGltZVR5cGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJpdmVEYXRlVGltZVR5cGUodmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgUkRGYVByb2Nlc3Nvci5kYXRlVGltZVR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ2hlY2tpbmcgXCIrdmFsdWUrXCIgYWdhaW5zdCBcIitSREZhUHJvY2Vzc29yLmRhdGVUaW1lVHlwZXNbaV0udHlwZSlcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBSREZhUHJvY2Vzc29yLmRhdGVUaW1lVHlwZXNbaV0ucGF0dGVybi5leGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKG1hdGNoZWQgJiYgbWF0Y2hlZFswXS5sZW5ndGggPT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTWF0Y2hlZCFcIilcbiAgICAgICAgICByZXR1cm4gUkRGYVByb2Nlc3Nvci5kYXRlVGltZVR5cGVzW2ldLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge31cbiAgfSwge1xuICAgIGtleTogJ25ld0JsYW5rTm9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5ld0JsYW5rTm9kZSgpIHtcbiAgICAgIHRoaXMuYmxhbmtDb3VudGVyKys7XG4gICAgICByZXR1cm4gJ186JyArIHRoaXMuYmxhbmtDb3VudGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25ld1N1YmplY3RPcmlnaW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXdTdWJqZWN0T3JpZ2luKG9yaWdpbiwgc3ViamVjdCkge31cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlQ1VSSUUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNVUklFKHZhbHVlLCBwcmVmaXhlcywgYmFzZSkge1xuICAgICAgdmFyIGNvbG9uID0gdmFsdWUuaW5kZXhPZignOicpO1xuICAgICAgdmFyIHVyaTtcbiAgICAgIGlmIChjb2xvbiA+PSAwKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSB2YWx1ZS5zdWJzdHJpbmcoMCwgY29sb24pO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnJykge1xuICAgICAgICAgIC8vIGRlZmF1bHQgcHJlZml4XG4gICAgICAgICAgdXJpID0gcHJlZml4ZXNbJyddO1xuICAgICAgICAgIHJldHVybiB1cmkgPyB1cmkgKyB2YWx1ZS5zdWJzdHJpbmcoY29sb24gKyAxKSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAocHJlZml4ID09PSAnXycpIHtcbiAgICAgICAgICAvLyBibGFuayBub2RlXG4gICAgICAgICAgcmV0dXJuICdfOicgKyB2YWx1ZS5zdWJzdHJpbmcoY29sb24gKyAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChSREZhUHJvY2Vzc29yLk5DTkFNRS50ZXN0KHByZWZpeCkpIHtcbiAgICAgICAgICB1cmkgPSBwcmVmaXhlc1twcmVmaXhdO1xuICAgICAgICAgIGlmICh1cmkpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmkgKyB2YWx1ZS5zdWJzdHJpbmcoY29sb24gKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlQ1VSSUVPclVSSScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ1VSSUVPclVSSSh2YWx1ZSwgcHJlZml4ZXMsIGJhc2UpIHtcbiAgICAgIHZhciBjdXJpZSA9IHRoaXMucGFyc2VDVVJJRSh2YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgaWYgKGN1cmllKSB7XG4gICAgICAgIHJldHVybiBjdXJpZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlc29sdmVBbmROb3JtYWxpemUoYmFzZSwgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlUHJlZGljYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VQcmVkaWNhdGUodmFsdWUsIGRlZmF1bHRWb2NhYnVsYXJ5LCB0ZXJtcywgcHJlZml4ZXMsIGJhc2UsIGlnbm9yZVRlcm1zKSB7XG4gICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHByZWRpY2F0ZSA9IHRoaXMucGFyc2VUZXJtT3JDVVJJRU9yQWJzVVJJKHZhbHVlLCBkZWZhdWx0Vm9jYWJ1bGFyeSwgaWdub3JlVGVybXMgPyBudWxsIDogdGVybXMsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgIGlmIChwcmVkaWNhdGUgJiYgcHJlZGljYXRlLmluZGV4T2YoJ186JykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJlZGljYXRlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlUHJlZml4TWFwcGluZ3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVByZWZpeE1hcHBpbmdzKHN0ciwgdGFyZ2V0KSB7XG4gICAgICB2YXIgdmFsdWVzID0gdGhpcy50b2tlbml6ZShzdHIpO1xuICAgICAgdmFyIHByZWZpeCA9IG51bGw7XG4gICAgICAvLyB2YXIgdXJpID0gbnVsbFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHZhbHVlc1tpXVt2YWx1ZXNbaV0ubGVuZ3RoIC0gMV0gPT09ICc6Jykge1xuICAgICAgICAgIHByZWZpeCA9IHZhbHVlc1tpXS5zdWJzdHJpbmcoMCwgdmFsdWVzW2ldLmxlbmd0aCAtIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZWZpeCkge1xuICAgICAgICAgIHRhcmdldFtwcmVmaXhdID0gdGhpcy5vcHRpb25zLmJhc2UgPyBVcmkuam9pbih2YWx1ZXNbaV0sIHRoaXMub3B0aW9ucy5iYXNlKSA6IHZhbHVlc1tpXTtcbiAgICAgICAgICBwcmVmaXggPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGFyc2VTYWZlQ1VSSUVPckNVUklFT3JVUkknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVNhZmVDVVJJRU9yQ1VSSUVPclVSSSh2YWx1ZSwgcHJlZml4ZXMsIGJhc2UpIHtcbiAgICAgIHZhbHVlID0gdGhpcy50cmltKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZS5jaGFyQXQoMCkgPT09ICdbJyAmJiB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgPT09ICddJykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ186Jykge1xuICAgICAgICAgIC8vIHRoZSBvbmUgbm9kZVxuICAgICAgICAgIHJldHVybiB0aGlzLnRoZU9uZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNVUklFKHZhbHVlLCBwcmVmaXhlcywgYmFzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNVUklFT3JVUkkodmFsdWUsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXJzZVRlcm1PckNVUklFT3JBYnNVUkknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRlcm1PckNVUklFT3JBYnNVUkkodmFsdWUsIGRlZmF1bHRWb2NhYnVsYXJ5LCB0ZXJtcywgcHJlZml4ZXMsIGJhc2UpIHtcbiAgICAgIC8vIGFsZXJ0KFwiUGFyc2luZyBcIit2YWx1ZStcIiB3aXRoIGRlZmF1bHQgdm9jYWIgXCIrZGVmYXVsdFZvY2FidWxhcnkpXG4gICAgICB2YWx1ZSA9IHRoaXMudHJpbSh2YWx1ZSk7XG4gICAgICB2YXIgY3VyaWUgPSB0aGlzLnBhcnNlQ1VSSUUodmFsdWUsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgIGlmIChjdXJpZSkge1xuICAgICAgICByZXR1cm4gY3VyaWU7XG4gICAgICB9IGVsc2UgaWYgKHRlcm1zKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Vm9jYWJ1bGFyeSAmJiAhdGhpcy5hYnNVUklSRS5leGVjKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0Vm9jYWJ1bGFyeSArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ZXJtID0gdGVybXNbdmFsdWVdO1xuICAgICAgICBpZiAodGVybSkge1xuICAgICAgICAgIHJldHVybiB0ZXJtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsY3ZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdGVybSA9IHRlcm1zW2xjdmFsdWVdO1xuICAgICAgICBpZiAodGVybSkge1xuICAgICAgICAgIHJldHVybiB0ZXJtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hYnNVUklSRS5leGVjKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlQW5kTm9ybWFsaXplKGJhc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhcnNlVGVybU9yQ1VSSUVPclVSSScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGVybU9yQ1VSSUVPclVSSSh2YWx1ZSwgZGVmYXVsdFZvY2FidWxhcnksIHRlcm1zLCBwcmVmaXhlcywgYmFzZSkge1xuICAgICAgLy8gYWxlcnQoXCJQYXJzaW5nIFwiK3ZhbHVlK1wiIHdpdGggZGVmYXVsdCB2b2NhYiBcIitkZWZhdWx0Vm9jYWJ1bGFyeSlcbiAgICAgIHZhbHVlID0gdGhpcy50cmltKHZhbHVlKTtcbiAgICAgIHZhciBjdXJpZSA9IHRoaXMucGFyc2VDVVJJRSh2YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgaWYgKGN1cmllKSB7XG4gICAgICAgIHJldHVybiBjdXJpZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0ZXJtID0gdGVybXNbdmFsdWVdO1xuICAgICAgICBpZiAodGVybSkge1xuICAgICAgICAgIHJldHVybiB0ZXJtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsY3ZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdGVybSA9IHRlcm1zW2xjdmFsdWVdO1xuICAgICAgICBpZiAodGVybSkge1xuICAgICAgICAgIHJldHVybiB0ZXJtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0Vm9jYWJ1bGFyeSAmJiAhdGhpcy5hYnNVUklSRS5leGVjKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0Vm9jYWJ1bGFyeSArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZXNvbHZlQW5kTm9ybWFsaXplKGJhc2UsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXJzZVVSSScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVVJJKHVyaSkge1xuICAgICAgcmV0dXJuIHVyaTsgLy8gV2UganVzdCB1c2Ugc3RyaW5ncyBhcyBVUklzLCBub3Qgb2JqZWN0cyBub3cuXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncHJvY2VzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3Mobm9kZSwgb3B0aW9ucykge1xuICAgICAgLypcbiAgICAgIGlmICghd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgIHdpbmRvdy5jb25zb2xlID0geyBsb2c6IGZ1bmN0aW9uKCkge30gfVxuICAgICAgfSovXG4gICAgICB2YXIgYmFzZTtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgICAgYmFzZSA9IG5vZGUuYmFzZVVSSTtcbiAgICAgICAgbm9kZSA9IG5vZGUuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICBub2RlLmJhc2VVUkkgPSBiYXNlO1xuICAgICAgICB0aGlzLnNldENvbnRleHQobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKSB7XG4gICAgICAgIHRoaXMuc2V0Q29udGV4dChub2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgLy8gRml4IGZvciBGaXJlZm94IHRoYXQgaW5jbHVkZXMgdGhlIGhhc2ggaW4gdGhlIGJhc2UgVVJJXG4gICAgICB2YXIgcmVtb3ZlSGFzaCA9IGZ1bmN0aW9uIHJlbW92ZUhhc2goYmFzZVVSSSkge1xuICAgICAgICAvLyBGaXggZm9yIHVuZGVmaW5lZCBiYXNlVVJJIHByb3BlcnR5XG4gICAgICAgIGlmICghYmFzZVVSSSAmJiBvcHRpb25zICYmIG9wdGlvbnMuYmFzZVVSSSkge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLmJhc2VVUkk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFzaCA9IGJhc2VVUkkuaW5kZXhPZignIycpO1xuICAgICAgICBpZiAoaGFzaCA+PSAwKSB7XG4gICAgICAgICAgYmFzZVVSSSA9IGJhc2VVUkkuc3Vic3RyaW5nKDAsIGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYmFzZVVSSU1hcCkge1xuICAgICAgICAgIGJhc2VVUkkgPSBvcHRpb25zLmJhc2VVUklNYXAoYmFzZVVSSSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VVUkk7XG4gICAgICB9O1xuICAgICAgcXVldWUucHVzaCh7IGN1cnJlbnQ6IG5vZGUsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMucHVzaChudWxsLCByZW1vdmVIYXNoKG5vZGUuYmFzZVVSSSkpXG4gICAgICB9KTtcbiAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKGl0ZW0ucGFyZW50KSB7XG4gICAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCAxNDogbGlzdCB0cmlwbGUgZ2VuZXJhdGlvblxuICAgICAgICAgIGlmIChpdGVtLmNvbnRleHQucGFyZW50ICYmIGl0ZW0uY29udGV4dC5wYXJlbnQubGlzdE1hcHBpbmcgPT09IGl0ZW0ubGlzdE1hcHBpbmcpIHtcbiAgICAgICAgICAgIC8vIFNraXAgYSBjaGlsZCBjb250ZXh0IHdpdGggZXhhY3RseSB0aGUgc2FtZSBtYXBwaW5nXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGxpc3RzIGZvciBcIitpdGVtLnN1YmplY3QrXCIsIHRhZyBcIitpdGVtLnBhcmVudC5sb2NhbE5hbWUpXG4gICAgICAgICAgZm9yICh2YXIgX3ByZWRpY2F0ZSBpbiBpdGVtLmxpc3RNYXBwaW5nKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IGl0ZW0ubGlzdE1hcHBpbmdbX3ByZWRpY2F0ZV07XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGRUcmlwbGUoaXRlbS5wYXJlbnQsIGl0ZW0uc3ViamVjdCwgX3ByZWRpY2F0ZSwgeyB0eXBlOiBSREZhUHJvY2Vzc29yLm9iamVjdFVSSSwgdmFsdWU6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbmlsJyB9KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYm5vZGVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGlzdC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgYm5vZGVzLnB1c2godGhpcy5uZXdCbGFua05vZGUoKSk7XG4gICAgICAgICAgICAgIC8vIHRoaXMubmV3U3ViamVjdChpdGVtLnBhcmVudCxibm9kZXNbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBibm9kZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgICB0aGlzLmFkZFRyaXBsZShpdGVtLnBhcmVudCwgYm5vZGVzW19pMl0sICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjZmlyc3QnLCBsaXN0W19pMl0pO1xuICAgICAgICAgICAgICB0aGlzLmFkZFRyaXBsZShpdGVtLnBhcmVudCwgYm5vZGVzW19pMl0sICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjcmVzdCcsIHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiBfaTIgKyAxIDwgYm5vZGVzLmxlbmd0aCA/IGJub2Rlc1tfaTIgKyAxXSA6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbmlsJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkVHJpcGxlKGl0ZW0ucGFyZW50LCBpdGVtLnN1YmplY3QsIF9wcmVkaWNhdGUsIHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiBibm9kZXNbMF0gfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50ID0gaXRlbS5jdXJyZW50O1xuICAgICAgICB2YXIgY29udGV4dCA9IGl0ZW0uY29udGV4dDtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJUYWc6IFwiK2N1cnJlbnQubG9jYWxOYW1lK1wiLCBsaXN0TWFwcGluZz1cIitKU09OLnN0cmluZ2lmeShjb250ZXh0Lmxpc3RNYXBwaW5nKSlcbiAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCAxXG4gICAgICAgIHZhciBza2lwID0gZmFsc2U7XG4gICAgICAgIHZhciBuZXdTdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnJlbnRPYmplY3RSZXNvdXJjZSA9IG51bGw7XG4gICAgICAgIHZhciB0eXBlZFJlc291cmNlID0gbnVsbDtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gY29udGV4dC5wcmVmaXhlcztcbiAgICAgICAgdmFyIHByZWZpeGVzQ29waWVkID0gZmFsc2U7XG4gICAgICAgIHZhciBpbmNvbXBsZXRlID0gW107XG4gICAgICAgIHZhciBsaXN0TWFwcGluZyA9IGNvbnRleHQubGlzdE1hcHBpbmc7XG4gICAgICAgIHZhciBsaXN0TWFwcGluZ0RpZmZlcmVudCA9ICFjb250ZXh0LnBhcmVudDtcbiAgICAgICAgdmFyIGxhbmd1YWdlID0gY29udGV4dC5sYW5ndWFnZTtcbiAgICAgICAgdmFyIHZvY2FidWxhcnkgPSBjb250ZXh0LnZvY2FidWxhcnk7XG4gICAgICAgIC8vIFRPRE86IHRoZSBcImJhc2VcIiBlbGVtZW50IG1heSBiZSB1c2VkIGZvciBIVE1MK1JERmEgMS4xXG4gICAgICAgIGJhc2UgPSB0aGlzLnBhcnNlVVJJKHJlbW92ZUhhc2goY3VycmVudC5iYXNlVVJJKSk7XG4gICAgICAgIGN1cnJlbnQuaXRlbSA9IG51bGw7XG4gICAgICAgIC8vIFNlcXVlbmNlIFN0ZXAgMjogc2V0IHRoZSBkZWZhdWx0IHZvY2FidWxhcnlcbiAgICAgICAgdmFyIHZvY2FiQXR0ID0gY3VycmVudC5nZXRBdHRyaWJ1dGVOb2RlKCd2b2NhYicpO1xuICAgICAgICBpZiAodm9jYWJBdHQpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnRyaW0odm9jYWJBdHQudmFsdWUpO1xuICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2b2NhYnVsYXJ5ID0gdmFsdWU7XG4gICAgICAgICAgICB2YXIgYmFzZVN1YmplY3QgPSBiYXNlLnNwZWM7XG4gICAgICAgICAgICAvLyB0aGlzLm5ld1N1YmplY3QoY3VycmVudCxiYXNlU3ViamVjdClcbiAgICAgICAgICAgIHRoaXMuYWRkVHJpcGxlKGN1cnJlbnQsIGJhc2VTdWJqZWN0LCAnaHR0cDovL3d3dy53My5vcmcvbnMvcmRmYSN1c2VzVm9jYWJ1bGFyeScsIHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiB2b2NhYnVsYXJ5IH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2b2NhYnVsYXJ5ID0gdGhpcy52b2NhYnVsYXJ5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTZXF1ZW5jZSBTdGVwIDM6IElSSSBtYXBwaW5nc1xuICAgICAgICAvLyBoYW5kbGUgeG1sbnMgYXR0cmlidXRlc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBhdHQgPSBjdXJyZW50LmF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgLy8gaWYgKGF0dC5uYW1lc3BhY2VVUkk9PVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIikge1xuICAgICAgICAgIGlmIChhdHQubm9kZU5hbWUuY2hhckF0KDApID09PSAneCcgJiYgYXR0Lm5vZGVOYW1lLmluZGV4T2YoJ3htbG5zOicpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIXByZWZpeGVzQ29waWVkKSB7XG4gICAgICAgICAgICAgIHByZWZpeGVzID0gdGhpcy5jb3B5TWFwcGluZ3MocHJlZml4ZXMpO1xuICAgICAgICAgICAgICBwcmVmaXhlc0NvcGllZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJlZml4ID0gYXR0Lm5vZGVOYW1lLnN1YnN0cmluZyg2KTtcbiAgICAgICAgICAgIC8vIFRPRE86IHJlc29sdmUgcmVsYXRpdmU/XG4gICAgICAgICAgICB2YXIgcmVmID0gUkRGYVByb2Nlc3Nvci50cmltKGF0dC52YWx1ZSk7XG4gICAgICAgICAgICBwcmVmaXhlc1twcmVmaXhdID0gdGhpcy5vcHRpb25zLmJhc2UgPyBVcmkuam9pbihyZWYsIHRoaXMub3B0aW9ucy5iYXNlKSA6IHJlZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIHByZWZpeCBtYXBwaW5ncyAoQHByZWZpeClcbiAgICAgICAgdmFyIHByZWZpeEF0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgncHJlZml4Jyk7XG4gICAgICAgIGlmIChwcmVmaXhBdHQpIHtcbiAgICAgICAgICBpZiAoIXByZWZpeGVzQ29waWVkKSB7XG4gICAgICAgICAgICBwcmVmaXhlcyA9IHRoaXMuY29weU1hcHBpbmdzKHByZWZpeGVzKTtcbiAgICAgICAgICAgIHByZWZpeGVzQ29waWVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wYXJzZVByZWZpeE1hcHBpbmdzKHByZWZpeEF0dC52YWx1ZSwgcHJlZml4ZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlcXVlbmNlIFN0ZXAgNDogbGFuZ3VhZ2VcbiAgICAgICAgdmFyIHhtbExhbmdBdHQgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyAheG1sTGFuZ0F0dCAmJiBfaTMgPCB0aGlzLmxhbmdBdHRyaWJ1dGVzLmxlbmd0aDsgX2kzKyspIHtcbiAgICAgICAgICB4bWxMYW5nQXR0ID0gY3VycmVudC5nZXRBdHRyaWJ1dGVOb2RlTlModGhpcy5sYW5nQXR0cmlidXRlc1tfaTNdLm5hbWVzcGFjZVVSSSwgdGhpcy5sYW5nQXR0cmlidXRlc1tfaTNdLmxvY2FsTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhtbExhbmdBdHQpIHtcbiAgICAgICAgICB2YXIgX3ZhbHVlID0gUkRGYVByb2Nlc3Nvci50cmltKHhtbExhbmdBdHQudmFsdWUpO1xuICAgICAgICAgIGlmIChfdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGFuZ3VhZ2UgPSBfdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhbmd1YWdlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlbEF0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgncmVsJyk7XG4gICAgICAgIHZhciByZXZBdHQgPSBjdXJyZW50LmdldEF0dHJpYnV0ZU5vZGUoJ3JldicpO1xuICAgICAgICB2YXIgdHlwZW9mQXR0ID0gY3VycmVudC5nZXRBdHRyaWJ1dGVOb2RlKCd0eXBlb2YnKTtcbiAgICAgICAgdmFyIHByb3BlcnR5QXR0ID0gY3VycmVudC5nZXRBdHRyaWJ1dGVOb2RlKCdwcm9wZXJ0eScpO1xuICAgICAgICB2YXIgZGF0YXR5cGVBdHQgPSBjdXJyZW50LmdldEF0dHJpYnV0ZU5vZGUoJ2RhdGF0eXBlJyk7XG4gICAgICAgIHZhciBkYXRldGltZUF0dCA9IHRoaXMuaW5IVE1MTW9kZSA/IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgnZGF0ZXRpbWUnKSA6IG51bGw7XG4gICAgICAgIHZhciBjb250ZW50QXR0ID0gY3VycmVudC5nZXRBdHRyaWJ1dGVOb2RlKCdjb250ZW50Jyk7XG4gICAgICAgIHZhciBhYm91dEF0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgnYWJvdXQnKTtcbiAgICAgICAgdmFyIHNyY0F0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgnc3JjJyk7XG4gICAgICAgIHZhciByZXNvdXJjZUF0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgncmVzb3VyY2UnKTtcbiAgICAgICAgdmFyIGhyZWZBdHQgPSBjdXJyZW50LmdldEF0dHJpYnV0ZU5vZGUoJ2hyZWYnKTtcbiAgICAgICAgdmFyIGlubGlzdEF0dCA9IGN1cnJlbnQuZ2V0QXR0cmlidXRlTm9kZSgnaW5saXN0Jyk7XG4gICAgICAgIHZhciByZWxBdHRQcmVkaWNhdGVzID0gW107XG4gICAgICAgIHZhciBwcmVkaWNhdGUsIHZhbHVlcztcbiAgICAgICAgaWYgKHJlbEF0dCkge1xuICAgICAgICAgIHZhbHVlcyA9IHRoaXMudG9rZW5pemUocmVsQXR0LnZhbHVlKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCB2YWx1ZXMubGVuZ3RoOyBfaTQrKykge1xuICAgICAgICAgICAgcHJlZGljYXRlID0gdGhpcy5wYXJzZVByZWRpY2F0ZSh2YWx1ZXNbX2k0XSwgdm9jYWJ1bGFyeSwgY29udGV4dC50ZXJtcywgcHJlZml4ZXMsIGJhc2UsIHRoaXMuaW5IVE1MTW9kZSAmJiBwcm9wZXJ0eUF0dCAhPT0gbnVsbCk7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgIHJlbEF0dFByZWRpY2F0ZXMucHVzaChwcmVkaWNhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmV2QXR0UHJlZGljYXRlcyA9IFtdO1xuICAgICAgICBpZiAocmV2QXR0KSB7XG4gICAgICAgICAgdmFsdWVzID0gdGhpcy50b2tlbml6ZShyZXZBdHQudmFsdWUpO1xuICAgICAgICAgIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IHZhbHVlcy5sZW5ndGg7IF9pNSsrKSB7XG4gICAgICAgICAgICBwcmVkaWNhdGUgPSB0aGlzLnBhcnNlUHJlZGljYXRlKHZhbHVlc1tfaTVdLCB2b2NhYnVsYXJ5LCBjb250ZXh0LnRlcm1zLCBwcmVmaXhlcywgYmFzZSwgdGhpcy5pbkhUTUxNb2RlICYmIHByb3BlcnR5QXR0KTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgICAgcmV2QXR0UHJlZGljYXRlcy5wdXNoKHByZWRpY2F0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNlY3Rpb24gMy4xLCBidWxsZXQgN1xuICAgICAgICBpZiAodGhpcy5pbkhUTUxNb2RlICYmIChyZWxBdHQgfHwgcmV2QXR0KSAmJiBwcm9wZXJ0eUF0dCkge1xuICAgICAgICAgIGlmIChyZWxBdHRQcmVkaWNhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVsQXR0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJldkF0dFByZWRpY2F0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXZBdHQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsQXR0IHx8IHJldkF0dCkge1xuICAgICAgICAgIC8vIFNlcXVlbmNlIFN0ZXAgNjogZXN0YWJsaXNoIG5ldyBzdWJqZWN0IGFuZCB2YWx1ZVxuICAgICAgICAgIGlmIChhYm91dEF0dCkge1xuICAgICAgICAgICAgbmV3U3ViamVjdCA9IHRoaXMucGFyc2VTYWZlQ1VSSUVPckNVUklFT3JVUkkoYWJvdXRBdHQudmFsdWUsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZkF0dCkge1xuICAgICAgICAgICAgdHlwZWRSZXNvdXJjZSA9IG5ld1N1YmplY3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbmV3U3ViamVjdCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIG5ld1N1YmplY3QgPSByZW1vdmVIYXNoKGN1cnJlbnQuYmFzZVVSSSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQucGFyZW50T2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIFRPRE86IFZlcmlmeTogSWYgdGhlIHhtbDpiYXNlIGhhcyBiZWVuIHNldCBhbmQgdGhlIHBhcmVudE9iamVjdCBpcyB0aGUgYmFzZVVSSSBvZiB0aGUgcGFyZW50LCB0aGVuIHRoZSBzdWJqZWN0IG5lZWRzIHRvIGJlIHRoZSBuZXcgYmFzZSBVUklcbiAgICAgICAgICAgICAgbmV3U3ViamVjdCA9IHJlbW92ZUhhc2goY3VycmVudC5wYXJlbnROb2RlLmJhc2VVUkkpID09PSBjb250ZXh0LnBhcmVudE9iamVjdCA/IHJlbW92ZUhhc2goY3VycmVudC5iYXNlVVJJKSA6IGNvbnRleHQucGFyZW50T2JqZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzb3VyY2VBdHQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRPYmplY3RSZXNvdXJjZSA9IHRoaXMucGFyc2VTYWZlQ1VSSUVPckNVUklFT3JVUkkocmVzb3VyY2VBdHQudmFsdWUsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjdXJyZW50T2JqZWN0UmVzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChocmVmQXR0KSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRPYmplY3RSZXNvdXJjZSA9IHRoaXMucmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCBlbmNvZGVVUkkoaHJlZkF0dC52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcmNBdHQpIHtcbiAgICAgICAgICAgICAgY3VycmVudE9iamVjdFJlc291cmNlID0gdGhpcy5yZXNvbHZlQW5kTm9ybWFsaXplKGJhc2UsIGVuY29kZVVSSShzcmNBdHQudmFsdWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mQXR0ICYmICFhYm91dEF0dCAmJiAhKHRoaXMuaW5YSFRNTE1vZGUgJiYgKGN1cnJlbnQubG9jYWxOYW1lID09PSAnaGVhZCcgfHwgY3VycmVudC5sb2NhbE5hbWUgPT09ICdib2R5JykpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRPYmplY3RSZXNvdXJjZSA9IHRoaXMubmV3QmxhbmtOb2RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2ZBdHQgJiYgIWFib3V0QXR0ICYmIHRoaXMuaW5YSFRNTE1vZGUgJiYgKGN1cnJlbnQubG9jYWxOYW1lID09PSAnaGVhZCcgfHwgY3VycmVudC5sb2NhbE5hbWUgPT09ICdib2R5JykpIHtcbiAgICAgICAgICAgIHR5cGVkUmVzb3VyY2UgPSBuZXdTdWJqZWN0O1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mQXR0ICYmICFhYm91dEF0dCkge1xuICAgICAgICAgICAgdHlwZWRSZXNvdXJjZSA9IGN1cnJlbnRPYmplY3RSZXNvdXJjZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlBdHQgJiYgIWNvbnRlbnRBdHQgJiYgIWRhdGF0eXBlQXR0KSB7XG4gICAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCA1LjE6IGVzdGFibGlzaCBhIG5ldyBzdWJqZWN0XG4gICAgICAgICAgaWYgKGFib3V0QXR0KSB7XG4gICAgICAgICAgICBuZXdTdWJqZWN0ID0gdGhpcy5wYXJzZVNhZmVDVVJJRU9yQ1VSSUVPclVSSShhYm91dEF0dC52YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZkF0dCkge1xuICAgICAgICAgICAgICB0eXBlZFJlc291cmNlID0gbmV3U3ViamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFuZXdTdWJqZWN0ICYmIGN1cnJlbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICBuZXdTdWJqZWN0ID0gcmVtb3ZlSGFzaChjdXJyZW50LmJhc2VVUkkpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZkF0dCkge1xuICAgICAgICAgICAgICB0eXBlZFJlc291cmNlID0gbmV3U3ViamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFuZXdTdWJqZWN0ICYmIGNvbnRleHQucGFyZW50T2JqZWN0KSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBWZXJpZnk6IElmIHRoZSB4bWw6YmFzZSBoYXMgYmVlbiBzZXQgYW5kIHRoZSBwYXJlbnRPYmplY3QgaXMgdGhlIGJhc2VVUkkgb2YgdGhlIHBhcmVudCwgdGhlbiB0aGUgc3ViamVjdCBuZWVkcyB0byBiZSB0aGUgbmV3IGJhc2UgVVJJXG4gICAgICAgICAgICBuZXdTdWJqZWN0ID0gcmVtb3ZlSGFzaChjdXJyZW50LnBhcmVudE5vZGUuYmFzZVVSSSkgPT09IGNvbnRleHQucGFyZW50T2JqZWN0ID8gcmVtb3ZlSGFzaChjdXJyZW50LmJhc2VVUkkpIDogY29udGV4dC5wYXJlbnRPYmplY3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2ZBdHQgJiYgIXR5cGVkUmVzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUF0dCkge1xuICAgICAgICAgICAgICB0eXBlZFJlc291cmNlID0gdGhpcy5wYXJzZVNhZmVDVVJJRU9yQ1VSSUVPclVSSShyZXNvdXJjZUF0dC52YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlZFJlc291cmNlICYmIGhyZWZBdHQpIHtcbiAgICAgICAgICAgICAgdHlwZWRSZXNvdXJjZSA9IHRoaXMucmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCBlbmNvZGVVUkkoaHJlZkF0dC52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlZFJlc291cmNlICYmIHNyY0F0dCkge1xuICAgICAgICAgICAgICB0eXBlZFJlc291cmNlID0gdGhpcy5yZXNvbHZlQW5kTm9ybWFsaXplKGJhc2UsIGVuY29kZVVSSShzcmNBdHQudmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdHlwZWRSZXNvdXJjZSAmJiAodGhpcy5pblhIVE1MTW9kZSB8fCB0aGlzLmluSFRNTE1vZGUpICYmIChjdXJyZW50LmxvY2FsTmFtZSA9PT0gJ2hlYWQnIHx8IGN1cnJlbnQubG9jYWxOYW1lID09PSAnYm9keScpKSB7XG4gICAgICAgICAgICAgIHR5cGVkUmVzb3VyY2UgPSBuZXdTdWJqZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0eXBlZFJlc291cmNlKSB7XG4gICAgICAgICAgICAgIHR5cGVkUmVzb3VyY2UgPSB0aGlzLm5ld0JsYW5rTm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudE9iamVjdFJlc291cmNlID0gdHlwZWRSZXNvdXJjZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudC5sb2NhbE5hbWUrXCIsIG5ld1N1YmplY3Q9XCIrbmV3U3ViamVjdCtcIiwgdHlwZWRSZXNvdXJjZT1cIit0eXBlZFJlc291cmNlK1wiLCBjdXJyZW50T2JqZWN0UmVzb3VyY2U9XCIrY3VycmVudE9iamVjdFJlc291cmNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNlcXVlbmNlIFN0ZXAgNS4yOiBlc3RhYmxpc2ggYSBuZXcgc3ViamVjdFxuICAgICAgICAgIGlmIChhYm91dEF0dCkge1xuICAgICAgICAgICAgbmV3U3ViamVjdCA9IHRoaXMucGFyc2VTYWZlQ1VSSUVPckNVUklFT3JVUkkoYWJvdXRBdHQudmFsdWUsIHByZWZpeGVzLCBiYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFuZXdTdWJqZWN0ICYmIHJlc291cmNlQXR0KSB7XG4gICAgICAgICAgICBuZXdTdWJqZWN0ID0gdGhpcy5wYXJzZVNhZmVDVVJJRU9yQ1VSSUVPclVSSShyZXNvdXJjZUF0dC52YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW5ld1N1YmplY3QgJiYgaHJlZkF0dCkge1xuICAgICAgICAgICAgbmV3U3ViamVjdCA9IHRoaXMucmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCBlbmNvZGVVUkkoaHJlZkF0dC52YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW5ld1N1YmplY3QgJiYgc3JjQXR0KSB7XG4gICAgICAgICAgICBuZXdTdWJqZWN0ID0gdGhpcy5yZXNvbHZlQW5kTm9ybWFsaXplKGJhc2UsIGVuY29kZVVSSShzcmNBdHQudmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFuZXdTdWJqZWN0KSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgbmV3U3ViamVjdCA9IHJlbW92ZUhhc2goY3VycmVudC5iYXNlVVJJKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuaW5YSFRNTE1vZGUgfHwgdGhpcy5pbkhUTUxNb2RlKSAmJiAoY3VycmVudC5sb2NhbE5hbWUgPT09ICdoZWFkJyB8fCBjdXJyZW50LmxvY2FsTmFtZSA9PT0gJ2JvZHknKSkge1xuICAgICAgICAgICAgICBuZXdTdWJqZWN0ID0gcmVtb3ZlSGFzaChjdXJyZW50LnBhcmVudE5vZGUuYmFzZVVSSSkgPT09IGNvbnRleHQucGFyZW50T2JqZWN0ID8gcmVtb3ZlSGFzaChjdXJyZW50LmJhc2VVUkkpIDogY29udGV4dC5wYXJlbnRPYmplY3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZkF0dCkge1xuICAgICAgICAgICAgICBuZXdTdWJqZWN0ID0gdGhpcy5uZXdCbGFua05vZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5wYXJlbnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogVmVyaWZ5OiBJZiB0aGUgeG1sOmJhc2UgaGFzIGJlZW4gc2V0IGFuZCB0aGUgcGFyZW50T2JqZWN0IGlzIHRoZSBiYXNlVVJJIG9mIHRoZSBwYXJlbnQsIHRoZW4gdGhlIHN1YmplY3QgbmVlZHMgdG8gYmUgdGhlIG5ldyBiYXNlIFVSSVxuICAgICAgICAgICAgICBuZXdTdWJqZWN0ID0gcmVtb3ZlSGFzaChjdXJyZW50LnBhcmVudE5vZGUuYmFzZVVSSSkgPT09IGNvbnRleHQucGFyZW50T2JqZWN0ID8gcmVtb3ZlSGFzaChjdXJyZW50LmJhc2VVUkkpIDogY29udGV4dC5wYXJlbnRPYmplY3Q7XG4gICAgICAgICAgICAgIGlmICghcHJvcGVydHlBdHQpIHtcbiAgICAgICAgICAgICAgICBza2lwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mQXR0KSB7XG4gICAgICAgICAgICB0eXBlZFJlc291cmNlID0gbmV3U3ViamVjdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudC50YWdOYW1lK1wiOiBuZXdTdWJqZWN0PVwiK25ld1N1YmplY3QrXCIsIGN1cnJlbnRPYmplY3RSZXNvdXJjZT1cIitjdXJyZW50T2JqZWN0UmVzb3VyY2UrXCIsIHR5cGVkUmVzb3VyY2U9XCIrdHlwZWRSZXNvdXJjZStcIiwgc2tpcD1cIitza2lwKVxuICAgICAgICAvLyB2YXIgcmRmYURhdGEgPSBudWxsXG4gICAgICAgIGlmIChuZXdTdWJqZWN0KSB7XG4gICAgICAgICAgLy8gdGhpcy5uZXdTdWJqZWN0KGN1cnJlbnQsbmV3U3ViamVjdClcbiAgICAgICAgICBpZiAoYWJvdXRBdHQgfHwgcmVzb3VyY2VBdHQgfHwgdHlwZWRSZXNvdXJjZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gbmV3U3ViamVjdDtcbiAgICAgICAgICAgIGlmICh0eXBlb2ZBdHQgJiYgIWFib3V0QXR0ICYmICFyZXNvdXJjZUF0dCAmJiBjdXJyZW50T2JqZWN0UmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgaWQgPSBjdXJyZW50T2JqZWN0UmVzb3VyY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlNldHRpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIFwiK2N1cnJlbnQubG9jYWxOYW1lK1wiIGZvciBzdWJqZWN0IFwiK2lkKVxuICAgICAgICAgICAgdGhpcy5uZXdTdWJqZWN0T3JpZ2luKGN1cnJlbnQsIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCA3OiBnZW5lcmF0ZSB0eXBlIHRyaXBsZVxuICAgICAgICBpZiAodHlwZWRSZXNvdXJjZSkge1xuICAgICAgICAgIHZhbHVlcyA9IHRoaXMudG9rZW5pemUodHlwZW9mQXR0LnZhbHVlKTtcbiAgICAgICAgICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCB2YWx1ZXMubGVuZ3RoOyBfaTYrKykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IHRoaXMucGFyc2VUZXJtT3JDVVJJRU9yQWJzVVJJKHZhbHVlc1tfaTZdLCB2b2NhYnVsYXJ5LCBjb250ZXh0LnRlcm1zLCBwcmVmaXhlcywgYmFzZSk7XG4gICAgICAgICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgICAgICAgIHRoaXMuYWRkVHJpcGxlKGN1cnJlbnQsIHR5cGVkUmVzb3VyY2UsIFJERmFQcm9jZXNzb3IudHlwZVVSSSwgeyB0eXBlOiBSREZhUHJvY2Vzc29yLm9iamVjdFVSSSwgdmFsdWU6IG9iamVjdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCA4OiBuZXcgbGlzdCBtYXBwaW5ncyBpZiB0aGVyZSBpcyBhIG5ldyBzdWJqZWN0XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU3RlcCA4OiBuZXdTdWJqZWN0PVwiK25ld1N1YmplY3QrXCIsIGNvbnRleHQucGFyZW50T2JqZWN0PVwiK2NvbnRleHQucGFyZW50T2JqZWN0KVxuICAgICAgICBpZiAobmV3U3ViamVjdCAmJiBuZXdTdWJqZWN0ICE9PSBjb250ZXh0LnBhcmVudE9iamVjdCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBuZXcgbGlzdCBtYXBwaW5nIGZvciBcIituZXdTdWJqZWN0KVxuICAgICAgICAgIGxpc3RNYXBwaW5nID0ge307XG4gICAgICAgICAgbGlzdE1hcHBpbmdEaWZmZXJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlcXVlbmNlIFN0ZXAgOTogZ2VuZXJhdGUgb2JqZWN0IHRyaXBsZVxuICAgICAgICBpZiAoY3VycmVudE9iamVjdFJlc291cmNlKSB7XG4gICAgICAgICAgaWYgKHJlbEF0dCAmJiBpbmxpc3RBdHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pNyA9IDA7IF9pNyA8IHJlbEF0dFByZWRpY2F0ZXMubGVuZ3RoOyBfaTcrKykge1xuICAgICAgICAgICAgICB2YXIgX2xpc3QgPSBsaXN0TWFwcGluZ1tyZWxBdHRQcmVkaWNhdGVzW19pN11dO1xuICAgICAgICAgICAgICBpZiAoIV9saXN0KSB7XG4gICAgICAgICAgICAgICAgX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBsaXN0TWFwcGluZ1tyZWxBdHRQcmVkaWNhdGVzW19pN11dID0gX2xpc3Q7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX2xpc3QucHVzaCh7IHR5cGU6IFJERmFQcm9jZXNzb3Iub2JqZWN0VVJJLCB2YWx1ZTogY3VycmVudE9iamVjdFJlc291cmNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVsQXR0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCByZWxBdHRQcmVkaWNhdGVzLmxlbmd0aDsgX2k4KyspIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGRUcmlwbGUoY3VycmVudCwgbmV3U3ViamVjdCwgcmVsQXR0UHJlZGljYXRlc1tfaThdLCB7IHR5cGU6IFJERmFQcm9jZXNzb3Iub2JqZWN0VVJJLCB2YWx1ZTogY3VycmVudE9iamVjdFJlc291cmNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmV2QXR0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaTkgPSAwOyBfaTkgPCByZXZBdHRQcmVkaWNhdGVzLmxlbmd0aDsgX2k5KyspIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGRUcmlwbGUoY3VycmVudCwgY3VycmVudE9iamVjdFJlc291cmNlLCByZXZBdHRQcmVkaWNhdGVzW19pOV0sIHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiBuZXdTdWJqZWN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXF1ZW5jZSBTdGVwIDEwOiBpbmNvbXBsZXRlIHRyaXBsZXNcbiAgICAgICAgICBpZiAobmV3U3ViamVjdCAmJiAhY3VycmVudE9iamVjdFJlc291cmNlICYmIChyZWxBdHQgfHwgcmV2QXR0KSkge1xuICAgICAgICAgICAgY3VycmVudE9iamVjdFJlc291cmNlID0gdGhpcy5uZXdCbGFua05vZGUoKTtcbiAgICAgICAgICAgIC8vIGFsZXJ0KGN1cnJlbnQudGFnTmFtZStcIjogZ2VuZXJhdGVkIGJsYW5rIG5vZGUsIG5ld1N1YmplY3Q9XCIrbmV3U3ViamVjdCtcIiBjdXJyZW50T2JqZWN0UmVzb3VyY2U9XCIrY3VycmVudE9iamVjdFJlc291cmNlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVsQXR0ICYmIGlubGlzdEF0dCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kxMCA9IDA7IF9pMTAgPCByZWxBdHRQcmVkaWNhdGVzLmxlbmd0aDsgX2kxMCsrKSB7XG4gICAgICAgICAgICAgIHZhciBfbGlzdDIgPSBsaXN0TWFwcGluZ1tyZWxBdHRQcmVkaWNhdGVzW19pMTBdXTtcbiAgICAgICAgICAgICAgaWYgKCFfbGlzdDIpIHtcbiAgICAgICAgICAgICAgICBfbGlzdDIgPSBbXTtcbiAgICAgICAgICAgICAgICBsaXN0TWFwcGluZ1twcmVkaWNhdGVdID0gX2xpc3QyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWRkaW5nIGluY29tcGxldGUgbGlzdCBmb3IgXCIrcHJlZGljYXRlKVxuICAgICAgICAgICAgICBpbmNvbXBsZXRlLnB1c2goeyBwcmVkaWNhdGU6IHJlbEF0dFByZWRpY2F0ZXNbX2kxMF0sIGxpc3Q6IF9saXN0MiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHJlbEF0dCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kxMSA9IDA7IF9pMTEgPCByZWxBdHRQcmVkaWNhdGVzLmxlbmd0aDsgX2kxMSsrKSB7XG4gICAgICAgICAgICAgIGluY29tcGxldGUucHVzaCh7IHByZWRpY2F0ZTogcmVsQXR0UHJlZGljYXRlc1tfaTExXSwgZm9yd2FyZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJldkF0dCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kxMiA9IDA7IF9pMTIgPCByZXZBdHRQcmVkaWNhdGVzLmxlbmd0aDsgX2kxMisrKSB7XG4gICAgICAgICAgICAgIGluY29tcGxldGUucHVzaCh7IHByZWRpY2F0ZTogcmV2QXR0UHJlZGljYXRlc1tfaTEyXSwgZm9yd2FyZDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN0ZXAgMTE6IEN1cnJlbnQgcHJvcGVydHkgdmFsdWVzXG4gICAgICAgIGlmIChwcm9wZXJ0eUF0dCkge1xuICAgICAgICAgIHZhciBkYXRhdHlwZSA9IG51bGw7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgIGlmIChkYXRhdHlwZUF0dCkge1xuICAgICAgICAgICAgZGF0YXR5cGUgPSBkYXRhdHlwZUF0dC52YWx1ZSA9PT0gJycgPyBSREZhUHJvY2Vzc29yLlBsYWluTGl0ZXJhbFVSSSA6IHRoaXMucGFyc2VUZXJtT3JDVVJJRU9yQWJzVVJJKGRhdGF0eXBlQXR0LnZhbHVlLCB2b2NhYnVsYXJ5LCBjb250ZXh0LnRlcm1zLCBwcmVmaXhlcywgYmFzZSk7XG4gICAgICAgICAgICBpZiAoZGF0ZXRpbWVBdHQgJiYgIWNvbnRlbnRBdHQpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IGRhdGV0aW1lQXR0LnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IGRhdGF0eXBlID09PSBSREZhUHJvY2Vzc29yLlhNTExpdGVyYWxVUkkgfHwgZGF0YXR5cGUgPT09IFJERmFQcm9jZXNzb3IuSFRNTExpdGVyYWxVUkkgPyBudWxsIDogY29udGVudEF0dCA/IGNvbnRlbnRBdHQudmFsdWUgOiBjdXJyZW50LnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudEF0dCkge1xuICAgICAgICAgICAgZGF0YXR5cGUgPSBSREZhUHJvY2Vzc29yLlBsYWluTGl0ZXJhbFVSSTtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50QXR0LnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0ZXRpbWVBdHQpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBkYXRldGltZUF0dC52YWx1ZTtcbiAgICAgICAgICAgIGRhdGF0eXBlID0gUkRGYVByb2Nlc3Nvci5kZXJpdmVEYXRlVGltZVR5cGUoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoIWRhdGF0eXBlKSB7XG4gICAgICAgICAgICAgIGRhdGF0eXBlID0gUkRGYVByb2Nlc3Nvci5QbGFpbkxpdGVyYWxVUkk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghcmVsQXR0ICYmICFyZXZBdHQpIHtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUF0dCkge1xuICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5wYXJzZVNhZmVDVVJJRU9yQ1VSSUVPclVSSShyZXNvdXJjZUF0dC52YWx1ZSwgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb250ZW50ICYmIGhyZWZBdHQpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMucmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCBlbmNvZGVVUkkoaHJlZkF0dC52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghY29udGVudCAmJiBzcmNBdHQpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMucmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCBlbmNvZGVVUkkoc3JjQXR0LnZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICBkYXRhdHlwZSA9IFJERmFQcm9jZXNzb3Iub2JqZWN0VVJJO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWRhdGF0eXBlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mQXR0ICYmICFhYm91dEF0dCkge1xuICAgICAgICAgICAgICBkYXRhdHlwZSA9IFJERmFQcm9jZXNzb3Iub2JqZWN0VVJJO1xuICAgICAgICAgICAgICBjb250ZW50ID0gdHlwZWRSZXNvdXJjZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjdXJyZW50LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICBpZiAodGhpcy5pbkhUTUxNb2RlICYmIGN1cnJlbnQubG9jYWxOYW1lID09PSAndGltZScpIHtcbiAgICAgICAgICAgICAgICBkYXRhdHlwZSA9IFJERmFQcm9jZXNzb3IuZGVyaXZlRGF0ZVRpbWVUeXBlKGNvbnRlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghZGF0YXR5cGUpIHtcbiAgICAgICAgICAgICAgICBkYXRhdHlwZSA9IFJERmFQcm9jZXNzb3IuUGxhaW5MaXRlcmFsVVJJO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlcyA9IHRoaXMudG9rZW5pemUocHJvcGVydHlBdHQudmFsdWUpO1xuICAgICAgICAgIGZvciAodmFyIF9pMTMgPSAwOyBfaTEzIDwgdmFsdWVzLmxlbmd0aDsgX2kxMysrKSB7XG4gICAgICAgICAgICB2YXIgX3ByZWRpY2F0ZTIgPSB0aGlzLnBhcnNlUHJlZGljYXRlKHZhbHVlc1tfaTEzXSwgdm9jYWJ1bGFyeSwgY29udGV4dC50ZXJtcywgcHJlZml4ZXMsIGJhc2UpO1xuICAgICAgICAgICAgaWYgKF9wcmVkaWNhdGUyKSB7XG4gICAgICAgICAgICAgIGlmIChpbmxpc3RBdHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2xpc3QzID0gbGlzdE1hcHBpbmdbX3ByZWRpY2F0ZTJdO1xuICAgICAgICAgICAgICAgIGlmICghX2xpc3QzKSB7XG4gICAgICAgICAgICAgICAgICBfbGlzdDMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGxpc3RNYXBwaW5nW19wcmVkaWNhdGUyXSA9IF9saXN0MztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2xpc3QzLnB1c2goZGF0YXR5cGUgPT09IFJERmFQcm9jZXNzb3IuWE1MTGl0ZXJhbFVSSSB8fCBkYXRhdHlwZSA9PT0gUkRGYVByb2Nlc3Nvci5IVE1MTGl0ZXJhbFVSSSA/IHsgdHlwZTogZGF0YXR5cGUsIHZhbHVlOiBjdXJyZW50LmNoaWxkTm9kZXMgfSA6IHsgdHlwZTogZGF0YXR5cGUgPyBkYXRhdHlwZSA6IFJERmFQcm9jZXNzb3IuUGxhaW5MaXRlcmFsVVJJLCB2YWx1ZTogY29udGVudCwgbGFuZ3VhZ2U6IGxhbmd1YWdlIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhdHlwZSA9PT0gUkRGYVByb2Nlc3Nvci5YTUxMaXRlcmFsVVJJIHx8IGRhdGF0eXBlID09PSBSREZhUHJvY2Vzc29yLkhUTUxMaXRlcmFsVVJJKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFkZFRyaXBsZShjdXJyZW50LCBuZXdTdWJqZWN0LCBfcHJlZGljYXRlMiwgeyB0eXBlOiBkYXRhdHlwZSwgdmFsdWU6IGN1cnJlbnQuY2hpbGROb2RlcyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUcmlwbGUoY3VycmVudCwgbmV3U3ViamVjdCwgX3ByZWRpY2F0ZTIsIHsgdHlwZTogZGF0YXR5cGUgPyBkYXRhdHlwZSA6IFJERmFQcm9jZXNzb3IuUGxhaW5MaXRlcmFsVVJJLCB2YWx1ZTogY29udGVudCwgbGFuZ3VhZ2U6IGxhbmd1YWdlIH0pO1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobmV3U3ViamVjdCtcIiBcIitwcmVkaWNhdGUrXCI9XCIrY29udGVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VxdWVuY2UgU3RlcCAxMjogY29tcGxldGUgaW5jb21wbGV0ZSB0cmlwbGVzIHdpdGggbmV3IHN1YmplY3RcbiAgICAgICAgaWYgKG5ld1N1YmplY3QgJiYgIXNraXApIHtcbiAgICAgICAgICBmb3IgKHZhciBfaTE0ID0gMDsgX2kxNCA8IGNvbnRleHQuaW5jb21wbGV0ZS5sZW5ndGg7IF9pMTQrKykge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQuaW5jb21wbGV0ZVtfaTE0XS5saXN0KSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWRkaW5nIHN1YmplY3QgXCIrbmV3U3ViamVjdCtcIiB0byBsaXN0IGZvciBcIitjb250ZXh0LmluY29tcGxldGVbaV0ucHJlZGljYXRlKVxuICAgICAgICAgICAgICAvLyBUT0RPOiBpdCBpcyB1bmNsZWFyIHdoYXQgdG8gZG8gaGVyZVxuICAgICAgICAgICAgICBjb250ZXh0LmluY29tcGxldGVbX2kxNF0ubGlzdC5wdXNoKHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiBuZXdTdWJqZWN0IH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LmluY29tcGxldGVbX2kxNF0uZm9yd2FyZCkge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJyZW50LnRhZ05hbWUrXCI6IGNvbXBsZXRpbmcgZm9yd2FyZCB0cmlwbGUgXCIrY29udGV4dC5pbmNvbXBsZXRlW2ldLnByZWRpY2F0ZStcIiB3aXRoIG9iamVjdD1cIituZXdTdWJqZWN0KVxuICAgICAgICAgICAgICB0aGlzLmFkZFRyaXBsZShjdXJyZW50LCBjb250ZXh0LnN1YmplY3QsIGNvbnRleHQuaW5jb21wbGV0ZVtfaTE0XS5wcmVkaWNhdGUsIHsgdHlwZTogUkRGYVByb2Nlc3Nvci5vYmplY3RVUkksIHZhbHVlOiBuZXdTdWJqZWN0IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudC50YWdOYW1lK1wiOiBjb21wbGV0aW5nIHJldmVyc2UgdHJpcGxlIHdpdGggb2JqZWN0PVwiK2NvbnRleHQuc3ViamVjdClcbiAgICAgICAgICAgICAgdGhpcy5hZGRUcmlwbGUoY3VycmVudCwgbmV3U3ViamVjdCwgY29udGV4dC5pbmNvbXBsZXRlW19pMTRdLnByZWRpY2F0ZSwgeyB0eXBlOiBSREZhUHJvY2Vzc29yLm9iamVjdFVSSSwgdmFsdWU6IGNvbnRleHQuc3ViamVjdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkQ29udGV4dCA9IG51bGw7XG4gICAgICAgIHZhciBsaXN0U3ViamVjdCA9IG5ld1N1YmplY3Q7XG4gICAgICAgIGlmIChza2lwKSB7XG4gICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHN1YmplY3QgYmUgbnVsbD9cbiAgICAgICAgICBjaGlsZENvbnRleHQgPSB0aGlzLnB1c2goY29udGV4dCwgY29udGV4dC5zdWJqZWN0KTtcbiAgICAgICAgICAvLyBUT0RPOiBzaG91bGQgdGhlIGVudE9iamVjdCBiZSBwYXNzZWQgYWxvbmc/ICBJZiBub3QsIHRoZW4gaW50ZXJtZWRpYXJ5IGNoaWxkcmVuIHdpbGwga2VlcCBwcm9wZXJ0aWVzIGZyb20gYmVpbmcgYXNzb2NpYXRlZCB3aXRoIGluY29tcGxldGUgdHJpcGxlcy5cbiAgICAgICAgICAvLyBUT0RPOiBWZXJpZnk6IGlmIHRoZSBjdXJyZW50IGJhc2VVUkkgaGFzIGNoYW5nZWQgYW5kIHRoZSBwYXJlbnRPYmplY3QgaXMgdGhlIHBhcmVudCdzIGJhc2UgVVJJLCB0aGVuIHRoZSBiYXNlVVJJIHNob3VsZCBjaGFuZ2VcbiAgICAgICAgICBjaGlsZENvbnRleHQucGFyZW50T2JqZWN0ID0gcmVtb3ZlSGFzaChjdXJyZW50LnBhcmVudE5vZGUuYmFzZVVSSSkgPT09IGNvbnRleHQucGFyZW50T2JqZWN0ID8gcmVtb3ZlSGFzaChjdXJyZW50LmJhc2VVUkkpIDogY29udGV4dC5wYXJlbnRPYmplY3Q7XG4gICAgICAgICAgY2hpbGRDb250ZXh0LmluY29tcGxldGUgPSBjb250ZXh0LmluY29tcGxldGU7XG4gICAgICAgICAgY2hpbGRDb250ZXh0Lmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gICAgICAgICAgY2hpbGRDb250ZXh0LnByZWZpeGVzID0gcHJlZml4ZXM7XG4gICAgICAgICAgY2hpbGRDb250ZXh0LnZvY2FidWxhcnkgPSB2b2NhYnVsYXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkQ29udGV4dCA9IHRoaXMucHVzaChjb250ZXh0LCBuZXdTdWJqZWN0KTtcbiAgICAgICAgICBjaGlsZENvbnRleHQucGFyZW50T2JqZWN0ID0gY3VycmVudE9iamVjdFJlc291cmNlID8gY3VycmVudE9iamVjdFJlc291cmNlIDogbmV3U3ViamVjdCA/IG5ld1N1YmplY3QgOiBjb250ZXh0LnN1YmplY3Q7XG4gICAgICAgICAgY2hpbGRDb250ZXh0LnByZWZpeGVzID0gcHJlZml4ZXM7XG4gICAgICAgICAgY2hpbGRDb250ZXh0LmluY29tcGxldGUgPSBpbmNvbXBsZXRlO1xuICAgICAgICAgIGlmIChjdXJyZW50T2JqZWN0UmVzb3VyY2UpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBuZXcgbGlzdCBtYXBwaW5nIGZvciBcIitjdXJyZW50T2JqZWN0UmVzb3VyY2UpXG4gICAgICAgICAgICBsaXN0U3ViamVjdCA9IGN1cnJlbnRPYmplY3RSZXNvdXJjZTtcbiAgICAgICAgICAgIGxpc3RNYXBwaW5nID0ge307XG4gICAgICAgICAgICBsaXN0TWFwcGluZ0RpZmZlcmVudCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkQ29udGV4dC5saXN0TWFwcGluZyA9IGxpc3RNYXBwaW5nO1xuICAgICAgICAgIGNoaWxkQ29udGV4dC5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgICAgIGNoaWxkQ29udGV4dC52b2NhYnVsYXJ5ID0gdm9jYWJ1bGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdE1hcHBpbmdEaWZmZXJlbnQpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlB1c2hpbmcgbGlzdCBwYXJlbnQgXCIrY3VycmVudC5sb2NhbE5hbWUpXG4gICAgICAgICAgcXVldWUudW5zaGlmdCh7IHBhcmVudDogY3VycmVudCwgY29udGV4dDogY29udGV4dCwgc3ViamVjdDogbGlzdFN1YmplY3QsIGxpc3RNYXBwaW5nOiBsaXN0TWFwcGluZyB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBjaGlsZCA9IGN1cnJlbnQubGFzdENoaWxkOyBjaGlsZDsgY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlB1c2hpbmcgY2hpbGQgXCIrY2hpbGQubG9jYWxOYW1lKVxuICAgICAgICAgICAgY2hpbGQuYmFzZVVSSSA9IGN1cnJlbnQuYmFzZVVSSTtcbiAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQoeyBjdXJyZW50OiBjaGlsZCwgY29udGV4dDogY2hpbGRDb250ZXh0IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaW5IVE1MTW9kZSkge1xuICAgICAgICB0aGlzLmNvcHlQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaTE1ID0gMDsgX2kxNSA8IHRoaXMuZmluaXNoZWRIYW5kbGVycy5sZW5ndGg7IF9pMTUrKykge1xuICAgICAgICB0aGlzLmZpbmlzaGVkSGFuZGxlcnNbX2kxNV0obm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncHVzaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2gocGFyZW50LCBzdWJqZWN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgc3ViamVjdDogc3ViamVjdCA/IHN1YmplY3QgOiBwYXJlbnQgPyBwYXJlbnQuc3ViamVjdCA6IG51bGwsXG4gICAgICAgIHBhcmVudE9iamVjdDogbnVsbCxcbiAgICAgICAgaW5jb21wbGV0ZTogW10sXG4gICAgICAgIGxpc3RNYXBwaW5nOiBwYXJlbnQgPyBwYXJlbnQubGlzdE1hcHBpbmcgOiB7fSxcbiAgICAgICAgbGFuZ3VhZ2U6IHBhcmVudCA/IHBhcmVudC5sYW5ndWFnZSA6IHRoaXMubGFuZ3VhZ2UsXG4gICAgICAgIHByZWZpeGVzOiBwYXJlbnQgPyBwYXJlbnQucHJlZml4ZXMgOiB0aGlzLnRhcmdldC5ncmFwaC5wcmVmaXhlcyxcbiAgICAgICAgdGVybXM6IHBhcmVudCA/IHBhcmVudC50ZXJtcyA6IHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zLFxuICAgICAgICB2b2NhYnVsYXJ5OiBwYXJlbnQgPyBwYXJlbnQudm9jYWJ1bGFyeSA6IHRoaXMudm9jYWJ1bGFyeVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNvbHZlQW5kTm9ybWFsaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZUFuZE5vcm1hbGl6ZShiYXNlLCB1cmkpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiSm9pbmluZyBcIiArIHVyaSArIFwiIHRvIFwiICsgYmFzZSArIFwiIG1ha2luZyBcIiArICBVcmkuam9pbih1cmksIGJhc2UpKVxuICAgICAgcmV0dXJuIFVyaS5qb2luKHVyaSwgYmFzZSk7IC8vIEBAIG5vcm1hbGl6ZT9cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udGV4dChub2RlKSB7XG4gICAgICAvLyBXZSBvbmx5IHJlY29nbml6ZWQgWEhUTUwrUkRGYSAxLjEgaWYgdGhlIHZlcnNpb24gaXMgc2V0IHByb3BlcnR5bHlcbiAgICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PT0gJ2h0bWwnICYmIG5vZGUuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJykgPT09ICdYSFRNTCtSREZhIDEuMScpIHtcbiAgICAgICAgdGhpcy5zZXRYSFRNTENvbnRleHQoKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5sb2NhbE5hbWUgPT09ICdodG1sJyB8fCBub2RlLm5hbWVzcGFjZVVSSSA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3R5cGUpIHtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdHlwZS5wdWJsaWNJZCA9PT0gJy0vL1czQy8vRFREIFhIVE1MK1JERmEgMS4wLy9FTicgJiYgZG9jdW1lbnQuZG9jdHlwZS5zeXN0ZW1JZCA9PT0gJ2h0dHA6Ly93d3cudzMub3JnL01hcmtVcC9EVEQveGh0bWwtcmRmYS0xLmR0ZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBSREYgMS4wIGlzIG5vdCBzdXBwb3J0ZWQuICBEZWZhdWx0aW5nIHRvIEhUTUw1IG1vZGUuJyk7XG4gICAgICAgICAgICB0aGlzLnNldEhUTUxDb250ZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N0eXBlLnB1YmxpY0lkID09PSAnLS8vVzNDLy9EVEQgWEhUTUwrUkRGYSAxLjEvL0VOJyAmJiBkb2N1bWVudC5kb2N0eXBlLnN5c3RlbUlkID09PSAnaHR0cDovL3d3dy53My5vcmcvTWFya1VwL0RURC94aHRtbC1yZGZhLTIuZHRkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRYSFRNTENvbnRleHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRIVE1MQ29udGV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEhUTUxDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0WE1MQ29udGV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEhUTUxDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SFRNTENvbnRleHQoKSB7XG4gICAgICB0aGlzLnNldEluaXRpYWxDb250ZXh0KCk7XG4gICAgICB0aGlzLmxhbmdBdHRyaWJ1dGVzID0gW3tcbiAgICAgICAgbmFtZXNwYWNlVVJJOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJyxcbiAgICAgICAgbG9jYWxOYW1lOiAnbGFuZydcbiAgICAgIH0sIHsgbmFtZXNwYWNlVVJJOiBudWxsLCBsb2NhbE5hbWU6ICdsYW5nJyB9XTtcbiAgICAgIHRoaXMuaW5YSFRNTE1vZGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuaW5IVE1MTW9kZSA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0SW5pdGlhbENvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJbml0aWFsQ29udGV4dCgpIHtcbiAgICAgIHRoaXMudm9jYWJ1bGFyeSA9IG51bGw7XG4gICAgICAvLyBCeSBkZWZhdWx0LCB0aGUgcHJlZml4ZXMgYXJlIHRlcm1zIGFyZSBsb2FkZWQgdG8gdGhlIFJERmEgMS4xLiBzdGFuZGFyZCB3aXRoaW4gdGhlIGdyYXBoIGNvbnN0cnVjdG9yXG4gICAgICB0aGlzLmxhbmdBdHRyaWJ1dGVzID0gW3tcbiAgICAgICAgbmFtZXNwYWNlVVJJOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJyxcbiAgICAgICAgbG9jYWxOYW1lOiAnbGFuZydcbiAgICAgIH1dO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFhIVE1MQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFhIVE1MQ29udGV4dCgpIHtcbiAgICAgIHRoaXMuc2V0SW5pdGlhbENvbnRleHQoKTtcbiAgICAgIHRoaXMuaW5YSFRNTE1vZGUgPSB0cnVlO1xuICAgICAgdGhpcy5pbkhUTUxNb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLmxhbmdBdHRyaWJ1dGVzID0gW3tcbiAgICAgICAgbmFtZXNwYWNlVVJJOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJyxcbiAgICAgICAgbG9jYWxOYW1lOiAnbGFuZycgfSwgeyBuYW1lc3BhY2VVUkk6IG51bGwsIGxvY2FsTmFtZTogJ2xhbmcnIH1dO1xuICAgICAgLy8gRnJvbSBodHRwOi8vd3d3LnczLm9yZy8yMDExL3JkZmEtY29udGV4dC94aHRtbC1yZGZhLTEuMVxuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ2FsdGVybmF0ZSddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjYWx0ZXJuYXRlJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydhcHBlbmRpeCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjYXBwZW5kaXgnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ2Jvb2ttYXJrJ10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNib29rbWFyayc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snY2l0ZSddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjY2l0ZSc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snY2hhcHRlciddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjY2hhcHRlcic7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snY29udGVudHMnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI2NvbnRlbnRzJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydjb3B5cmlnaHQnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI2NvcHlyaWdodCc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snZmlyc3QnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI2ZpcnN0JztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydnbG9zc2FyeSddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjZ2xvc3NhcnknO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ2hlbHAnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI2hlbHAnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ2ljb24nXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI2ljb24nO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ2luZGV4J10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNpbmRleCc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snbGFzdCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjbGFzdCc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snbGljZW5zZSddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjbGljZW5zZSc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snbWV0YSddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjbWV0YSc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1snbmV4dCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjbmV4dCc7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1sncHJldiddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjcHJldic7XG4gICAgICB0aGlzLnRhcmdldC5ncmFwaC50ZXJtc1sncHJldmlvdXMnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI3ByZXZpb3VzJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydzZWN0aW9uJ10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNzZWN0aW9uJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydzdHlsZXNoZWV0J10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNzdHlsZXNoZWV0JztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydzdWJzZWN0aW9uJ10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNzdWJzZWN0aW9uJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWydzdGFydCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjc3RhcnQnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ3RvcCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjdG9wJztcbiAgICAgIHRoaXMudGFyZ2V0LmdyYXBoLnRlcm1zWyd1cCddID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwvdm9jYWIjdXAnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ3AzcHYxJ10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiNwM3B2MSc7XG4gICAgICAvLyBvdGhlclxuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ3JlbGF0ZWQnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI3JlbGF0ZWQnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ3JvbGUnXSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sL3ZvY2FiI3JvbGUnO1xuICAgICAgdGhpcy50YXJnZXQuZ3JhcGgudGVybXNbJ3RyYW5zZm9ybWF0aW9uJ10gPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbC92b2NhYiN0cmFuc2Zvcm1hdGlvbic7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0WE1MQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFhNTENvbnRleHQoKSB7XG4gICAgICB0aGlzLnNldEluaXRpYWxDb250ZXh0KCk7XG4gICAgICB0aGlzLmluWEhUTUxNb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLmluSFRNTE1vZGUgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b2tlbml6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRva2VuaXplKHN0cikge1xuICAgICAgcmV0dXJuIHRoaXMudHJpbShzdHIpLnNwbGl0KC9cXHMrLyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndG9SREZOb2RlT2JqZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9SREZOb2RlT2JqZWN0KHgpIHtcbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh4LnN1YnN0cmluZygwLCAyKSA9PT0gJ186Jykge1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ibGFua05vZGVzW3guc3Vic3RyaW5nKDIpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuYmxhbmtOb2Rlc1t4LnN1YnN0cmluZygyKV0gPSBuZXcgQmxhbmtOb2RlKHguc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxhbmtOb2Rlc1t4LnN1YnN0cmluZygyKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJkZi5uYW1lZE5vZGUoeCk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHgudHlwZSkge1xuICAgICAgICBjYXNlIFJERmFQcm9jZXNzb3Iub2JqZWN0VVJJOlxuICAgICAgICAgIGlmICh4LnZhbHVlLnN1YnN0cmluZygwLCAyKSA9PT0gJ186Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJsYW5rTm9kZXNbeC52YWx1ZS5zdWJzdHJpbmcoMildID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0aGlzLmJsYW5rTm9kZXNbeC52YWx1ZS5zdWJzdHJpbmcoMildID0gbmV3IEJsYW5rTm9kZSh4LnZhbHVlLnN1YnN0cmluZygyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ibGFua05vZGVzW3gudmFsdWUuc3Vic3RyaW5nKDIpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJkZi5uYW1lZE5vZGUoeC52YWx1ZSk7XG4gICAgICAgIGNhc2UgUkRGYVByb2Nlc3Nvci5QbGFpbkxpdGVyYWxVUkk6XG4gICAgICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHgudmFsdWUsIHgubGFuZ3VhZ2UgfHwgJycpO1xuICAgICAgICBjYXNlIFJERmFQcm9jZXNzb3IuWE1MTGl0ZXJhbFVSSTpcbiAgICAgICAgY2FzZSBSREZhUHJvY2Vzc29yLkhUTUxMaXRlcmFsVVJJOlxuICAgICAgICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICAgICAgICBPYmplY3Qua2V5cyh4LnZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gVXRpbC5kb21Ub1N0cmluZyh4LnZhbHVlW2ldLCB0aGlzLmh0bWxPcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExpdGVyYWwoc3RyaW5nLCAnJywgbmV3IE5hbWVkTm9kZSh4LnR5cGUpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbmV3IExpdGVyYWwoeC52YWx1ZSwgJycsIG5ldyBOYW1lZE5vZGUoeC50eXBlKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndHJpbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAncGFyc2VSREZhRE9NJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VSREZhRE9NKGRvbSwga2IsIGJhc2UpIHtcbiAgICAgIHZhciBwID0gbmV3IFJERmFQcm9jZXNzb3Ioa2IsIHsgJ2Jhc2UnOiBiYXNlIH0pO1xuICAgICAgZG9tLmJhc2VVUkkgPSBiYXNlO1xuICAgICAgcC5wcm9jZXNzKGRvbSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJERmFQcm9jZXNzb3I7XG59KCk7XG5cblJERmFQcm9jZXNzb3IuWE1MTGl0ZXJhbFVSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjWE1MTGl0ZXJhbCc7XG5SREZhUHJvY2Vzc29yLkhUTUxMaXRlcmFsVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNIVE1MJztcblJERmFQcm9jZXNzb3IuUGxhaW5MaXRlcmFsVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNQbGFpbkxpdGVyYWwnO1xuUkRGYVByb2Nlc3Nvci5vYmplY3RVUkkgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI29iamVjdCc7XG5SREZhUHJvY2Vzc29yLnR5cGVVUkkgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnO1xuUkRGYVByb2Nlc3Nvci5uYW1lQ2hhciA9ICdbLUEtWl9hLXpcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTEwMDAwLVxcdUVGRkZGLjAtOVxceEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSc7XG5SREZhUHJvY2Vzc29yLm5hbWVTdGFydENoYXIgPSAnW0EtWmEtelxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHhGRlxcdTAxMDAtXFx1MDEzMVxcdTAxMzQtXFx1MDEzRVxcdTAxNDEtXFx1MDE0OFxcdTAxNEEtXFx1MDE3RVxcdTAxODAtXFx1MDFDM1xcdTAxQ0QtXFx1MDFGMFxcdTAxRjQtXFx1MDFGNVxcdTAxRkEtXFx1MDIxN1xcdTAyNTAtXFx1MDJBOFxcdTAyQkItXFx1MDJDMVxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0NFXFx1MDNEMC1cXHUwM0Q2XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTItXFx1MDNGM1xcdTA0MDEtXFx1MDQwQ1xcdTA0MEUtXFx1MDQ0RlxcdTA0NTEtXFx1MDQ1Q1xcdTA0NUUtXFx1MDQ4MVxcdTA0OTAtXFx1MDRDNFxcdTA0QzctXFx1MDRDOFxcdTA0Q0ItXFx1MDRDQ1xcdTA0RDAtXFx1MDRFQlxcdTA0RUUtXFx1MDRGNVxcdTA0RjgtXFx1MDRGOVxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODZcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIxLVxcdTA2M0FcXHUwNjQxLVxcdTA2NEFcXHUwNjcxLVxcdTA2QjdcXHUwNkJBLVxcdTA2QkVcXHUwNkMwLVxcdTA2Q0VcXHUwNkQwLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNS1cXHUwNkU2XFx1MDkwNS1cXHUwOTM5XFx1MDkzRFxcdTA5NTgtXFx1MDk2MVxcdTA5ODUtXFx1MDk4Q1xcdTA5OEYtXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOURDLVxcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwLVxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGLVxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyLVxcdTBBMzNcXHUwQTM1LVxcdTBBMzZcXHUwQTM4LVxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThCXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjItXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUUwXFx1MEIwNS1cXHUwQjBDXFx1MEIwRi1cXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMi1cXHUwQjMzXFx1MEIzNi1cXHUwQjM5XFx1MEIzRFxcdTBCNUMtXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTktXFx1MEI5QVxcdTBCOUNcXHUwQjlFLVxcdTBCOUZcXHUwQkEzLVxcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjVcXHUwQkI3LVxcdTBCQjlcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzYwLVxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0RFXFx1MENFMC1cXHUwQ0UxXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDI4XFx1MEQyQS1cXHUwRDM5XFx1MEQ2MC1cXHUwRDYxXFx1MEUwMS1cXHUwRTJFXFx1MEUzMFxcdTBFMzItXFx1MEUzM1xcdTBFNDAtXFx1MEU0NVxcdTBFODEtXFx1MEU4MlxcdTBFODRcXHUwRTg3LVxcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQS1cXHUwRUFCXFx1MEVBRC1cXHUwRUFFXFx1MEVCMFxcdTBFQjItXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNjlcXHUxMEEwLVxcdTEwQzVcXHUxMEQwLVxcdTEwRjZcXHUxMTAwXFx1MTEwMi1cXHUxMTAzXFx1MTEwNS1cXHUxMTA3XFx1MTEwOVxcdTExMEItXFx1MTEwQ1xcdTExMEUtXFx1MTExMlxcdTExM0NcXHUxMTNFXFx1MTE0MFxcdTExNENcXHUxMTRFXFx1MTE1MFxcdTExNTQtXFx1MTE1NVxcdTExNTlcXHUxMTVGLVxcdTExNjFcXHUxMTYzXFx1MTE2NVxcdTExNjdcXHUxMTY5XFx1MTE2RC1cXHUxMTZFXFx1MTE3Mi1cXHUxMTczXFx1MTE3NVxcdTExOUVcXHUxMUE4XFx1MTFBQlxcdTExQUUtXFx1MTFBRlxcdTExQjctXFx1MTFCOFxcdTExQkFcXHUxMUJDLVxcdTExQzJcXHUxMUVCXFx1MTFGMFxcdTExRjlcXHUxRTAwLVxcdTFFOUJcXHUxRUEwLVxcdTFFRjlcXHUxRjAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjEyNlxcdTIxMkEtXFx1MjEyQlxcdTIxMkVcXHUyMTgwLVxcdTIxODJcXHUzMDQxLVxcdTMwOTRcXHUzMEExLVxcdTMwRkFcXHUzMTA1LVxcdTMxMkNcXHVBQzAwLVxcdUQ3QTNcXHU0RTAwLVxcdTlGQTVcXHUzMDA3XFx1MzAyMS1cXHUzMDI5X10nO1xuUkRGYVByb2Nlc3Nvci5OQ05BTUUgPSBuZXcgUmVnRXhwKCdeJyArIFJERmFQcm9jZXNzb3IubmFtZVN0YXJ0Q2hhciArIFJERmFQcm9jZXNzb3IubmFtZUNoYXIgKyAnKiQnKTtcblxuLypcblJERmFQcm9jZXNzb3IucHJvdG90eXBlLnJlc29sdmVBbmROb3JtYWxpemUgPSBmdW5jdGlvbihiYXNlLGhyZWYpIHtcbiAgIHZhciB1ID0gYmFzZS5yZXNvbHZlKGhyZWYpXG4gICB2YXIgcGFyc2VkID0gdGhpcy5wYXJzZVVSSSh1KVxuICAgcGFyc2VkLm5vcm1hbGl6ZSgpXG4gICByZXR1cm4gcGFyc2VkLnNwZWNcbn1cbiovXG5cblJERmFQcm9jZXNzb3IuZGF0ZVRpbWVUeXBlcyA9IFt7IHBhdHRlcm46IC8tP1AoPzpbMC05XStZKT8oPzpbMC05XStNKT8oPzpbMC05XStEKT8oPzpUKD86WzAtOV0rSCk/KD86WzAtOV0rTSk/KD86WzAtOV0rKD86XFwuWzAtOV0rKT9TKT8pPy8sXG4gIHR5cGU6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkdXJhdGlvbicgfSwgeyBwYXR0ZXJuOiAvLT8oPzpbMS05XVswLTldWzAtOV1bMC05XXwwWzEtOV1bMC05XVswLTldfDAwWzEtOV1bMC05XXwwMDBbMS05XSktWzAtOV1bMC05XS1bMC05XVswLTldVCg/OlswLTFdWzAtOV18MlswLTRdKTpbMC01XVswLTldOlswLTVdWzAtOV0oPzpcXC5bMC05XSspPyg/Olp8WytcXC1dWzAtOV1bMC05XTpbMC05XVswLTldKT8vLFxuICB0eXBlOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZGF0ZVRpbWUnIH0sIHsgcGF0dGVybjogLy0/KD86WzEtOV1bMC05XVswLTldWzAtOV18MFsxLTldWzAtOV1bMC05XXwwMFsxLTldWzAtOV18MDAwWzEtOV0pLVswLTldWzAtOV0tWzAtOV1bMC05XSg/Olp8WytcXC1dWzAtOV1bMC05XTpbMC05XVswLTldKT8vLFxuICB0eXBlOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZGF0ZScgfSwgeyBwYXR0ZXJuOiAvKD86WzAtMV1bMC05XXwyWzAtNF0pOlswLTVdWzAtOV06WzAtNV1bMC05XSg/OlxcLlswLTldKyk/KD86WnxbK1xcLV1bMC05XVswLTldOlswLTldWzAtOV0pPy8sXG4gIHR5cGU6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSN0aW1lJyB9LCB7IHBhdHRlcm46IC8tPyg/OlsxLTldWzAtOV1bMC05XVswLTldfDBbMS05XVswLTldWzAtOV18MDBbMS05XVswLTldfDAwMFsxLTldKS1bMC05XVswLTldLyxcbiAgdHlwZTogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2dZZWFyTW9udGgnIH0sIHsgcGF0dGVybjogLy0/WzEtOV1bMC05XVswLTldWzAtOV18MFsxLTldWzAtOV1bMC05XXwwMFsxLTldWzAtOV18MDAwWzEtOV0vLFxuICB0eXBlOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZ1llYXInIH1dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJERmFQcm9jZXNzb3I7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqICBSREYvWE1MIFBBUlNFUlxuICpcbiAqIFZlcnNpb24gMC4xXG4gKiAgUGFyc2VyIGJlbGlldmVkIHRvIGJlIGluIGZ1bGwgcG9zaXRpdmUgUkRGL1hNTCBwYXJzaW5nIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBwb3NzaWJsZSBleGNlcHRpb24gb2YgaGFuZGxpbmcgZGVwcmVjYXRlZCBSREYgYXR0cmlidXRlc1xuICogIGFwcHJvcHJpYXRlbHkuIFBhcnNlciBpcyBiZWxpZXZlZCB0byBjb21wbHkgZnVsbHkgd2l0aCBvdGhlciBXM0NcbiAqICBhbmQgaW5kdXN0cnkgc3RhbmRhcmRzIHdoZXJlIGFwcHJvcHJpYXRlIChET00sIEVDTUFTY3JpcHQsICZjLilcbiAqXG4gKiAgQXV0aG9yOiBEYXZpZCBTaGVldHMgPGRzaGVldHNAbWl0LmVkdT5cbiAqXG4gKiBXM0PCriBTT0ZUV0FSRSBOT1RJQ0UgQU5EIExJQ0VOU0VcbiAqIGh0dHA6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTGVnYWwvMjAwMi9jb3B5cmlnaHQtc29mdHdhcmUtMjAwMjEyMzFcbiAqIFRoaXMgd29yayAoYW5kIGluY2x1ZGVkIHNvZnR3YXJlLCBkb2N1bWVudGF0aW9uIHN1Y2ggYXMgUkVBRE1Fcywgb3JcbiAqIG90aGVyIHJlbGF0ZWQgaXRlbXMpIGlzIGJlaW5nIHByb3ZpZGVkIGJ5IHRoZSBjb3B5cmlnaHQgaG9sZGVycyB1bmRlclxuICogdGhlIGZvbGxvd2luZyBsaWNlbnNlLiBCeSBvYnRhaW5pbmcsIHVzaW5nIGFuZC9vciBjb3B5aW5nIHRoaXMgd29yayxcbiAqIHlvdSAodGhlIGxpY2Vuc2VlKSBhZ3JlZSB0aGF0IHlvdSBoYXZlIHJlYWQsIHVuZGVyc3Rvb2QsIGFuZCB3aWxsXG4gKiBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlcm1zIGFuZCBjb25kaXRpb25zLlxuICpcbiAqIFBlcm1pc3Npb24gdG8gY29weSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGFuZCBpdHNcbiAqIGRvY3VtZW50YXRpb24sIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGZvciBhbnkgcHVycG9zZSBhbmRcbiAqIHdpdGhvdXQgZmVlIG9yIHJveWFsdHkgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgeW91IGluY2x1ZGVcbiAqIHRoZSBmb2xsb3dpbmcgb24gQUxMIGNvcGllcyBvZiB0aGUgc29mdHdhcmUgYW5kIGRvY3VtZW50YXRpb24gb3JcbiAqIHBvcnRpb25zIHRoZXJlb2YsIGluY2x1ZGluZyBtb2RpZmljYXRpb25zOlxuICpcbiAqIDEuIFRoZSBmdWxsIHRleHQgb2YgdGhpcyBOT1RJQ0UgaW4gYSBsb2NhdGlvbiB2aWV3YWJsZSB0byB1c2VycyBvZlxuICogdGhlIHJlZGlzdHJpYnV0ZWQgb3IgZGVyaXZhdGl2ZSB3b3JrLlxuICogMi4gQW55IHByZS1leGlzdGluZyBpbnRlbGxlY3R1YWwgcHJvcGVydHkgZGlzY2xhaW1lcnMsIG5vdGljZXMsIG9yIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucy4gSWYgbm9uZSBleGlzdCwgdGhlIFczQyBTb2Z0d2FyZSBTaG9ydCBOb3RpY2Ugc2hvdWxkIGJlXG4gKiBpbmNsdWRlZCAoaHlwZXJ0ZXh0IGlzIHByZWZlcnJlZCwgdGV4dCBpcyBwZXJtaXR0ZWQpIHdpdGhpbiB0aGUgYm9keVxuICogb2YgYW55IHJlZGlzdHJpYnV0ZWQgb3IgZGVyaXZhdGl2ZSBjb2RlLlxuICogMy4gTm90aWNlIG9mIGFueSBjaGFuZ2VzIG9yIG1vZGlmaWNhdGlvbnMgdG8gdGhlIGZpbGVzLCBpbmNsdWRpbmcgdGhlXG4gKiBkYXRlIGNoYW5nZXMgd2VyZSBtYWRlLiAoV2UgcmVjb21tZW5kIHlvdSBwcm92aWRlIFVSSXMgdG8gdGhlIGxvY2F0aW9uXG4gKiBmcm9tIHdoaWNoIHRoZSBjb2RlIGlzIGRlcml2ZWQuKVxuICpcbiAqIFRISVMgU09GVFdBUkUgQU5EIERPQ1VNRU5UQVRJT04gSVMgUFJPVklERUQgXCJBUyBJUyxcIiBBTkQgQ09QWVJJR0hUXG4gKiBIT0xERVJTIE1BS0UgTk8gUkVQUkVTRU5UQVRJT05TIE9SIFdBUlJBTlRJRVMsIEVYUFJFU1MgT1IgSU1QTElFRCxcbiAqIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8sIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIE9SIEZJVE5FU1NcbiAqIEZPUiBBTlkgUEFSVElDVUxBUiBQVVJQT1NFIE9SIFRIQVQgVEhFIFVTRSBPRiBUSEUgU09GVFdBUkUgT1JcbiAqIERPQ1VNRU5UQVRJT04gV0lMTCBOT1QgSU5GUklOR0UgQU5ZIFRISVJEIFBBUlRZIFBBVEVOVFMsIENPUFlSSUdIVFMsXG4gKiBUUkFERU1BUktTIE9SIE9USEVSIFJJR0hUUy5cbiAqXG4gKiBDT1BZUklHSFQgSE9MREVSUyBXSUxMIE5PVCBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBTUEVDSUFMXG4gKiBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgQU5ZIFVTRSBPRiBUSEUgU09GVFdBUkUgT1JcbiAqIERPQ1VNRU5UQVRJT04uXG4gKlxuICogVGhlIG5hbWUgYW5kIHRyYWRlbWFya3Mgb2YgY29weXJpZ2h0IGhvbGRlcnMgbWF5IE5PVCBiZSB1c2VkIGluXG4gKiBhZHZlcnRpc2luZyBvciBwdWJsaWNpdHkgcGVydGFpbmluZyB0byB0aGUgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyxcbiAqIHdyaXR0ZW4gcHJpb3IgcGVybWlzc2lvbi4gVGl0bGUgdG8gY29weXJpZ2h0IGluIHRoaXMgc29mdHdhcmUgYW5kIGFueVxuICogYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIHdpbGwgYXQgYWxsIHRpbWVzIHJlbWFpbiB3aXRoIGNvcHlyaWdodFxuICogaG9sZGVycy5cbiAqL1xuLyoqXG4gKiBAY2xhc3MgQ2xhc3MgZGVmaW5pbmcgYW4gUkRGUGFyc2VyIHJlc291cmNlIG9iamVjdCB0aWVkIHRvIGFuIFJERlN0b3JlXG4gKlxuICogQGF1dGhvciBEYXZpZCBTaGVldHMgPGRzaGVldHNAbWl0LmVkdT5cbiAqIEB2ZXJzaW9uIDAuMVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSREZTdG9yZX0gc3RvcmUgQW4gUkRGU3RvcmUgb2JqZWN0XG4gKi9cbnZhciB1cmlVdGlsID0gcmVxdWlyZSgnLi91cmknKTtcblxudmFyIFJERlBhcnNlciA9IGZ1bmN0aW9uIFJERlBhcnNlcihzdG9yZSkge1xuICB2YXIgUkRGUGFyc2VyID0ge307XG5cbiAgLyoqIFN0YW5kYXJkIG5hbWVzcGFjZXMgdGhhdCB3ZSBrbm93IGhvdyB0byBoYW5kbGUgQGZpbmFsXG4gICAqICBAbWVtYmVyIFJERlBhcnNlclxuICAgKi9cbiAgUkRGUGFyc2VyLm5zID0geyAnUkRGJzogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnLCAnUkRGUyc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjJyB9O1xuXG4gIC8qKiBET00gTGV2ZWwgMiBub2RlIHR5cGUgbWFnaWMgbnVtYmVycyBAZmluYWxcbiAgICogIEBtZW1iZXIgUkRGUGFyc2VyXG4gICAqL1xuICBSREZQYXJzZXIubm9kZVR5cGUgPSB7ICdFTEVNRU5UJzogMSwgJ0FUVFJJQlVURSc6IDIsICdURVhUJzogMyxcbiAgICAnQ0RBVEFfU0VDVElPTic6IDQsICdFTlRJVFlfUkVGRVJFTkNFJzogNSxcbiAgICAnRU5USVRZJzogNiwgJ1BST0NFU1NJTkdfSU5TVFJVQ1RJT04nOiA3LFxuICAgICdDT01NRU5UJzogOCwgJ0RPQ1VNRU5UJzogOSwgJ0RPQ1VNRU5UX1RZUEUnOiAxMCxcbiAgICAnRE9DVU1FTlRfRlJBR01FTlQnOiAxMSwgJ05PVEFUSU9OJzogMTIgfTtcblxuICAvKipcbiAgICogRnJhbWUgY2xhc3MgZm9yIG5hbWVzcGFjZSBhbmQgYmFzZSBVUkkgbG9va3Vwc1xuICAgKiBCYXNlIGxvb2t1cHMgd2lsbCBhbHdheXMgcmVzb2x2ZSBiZWNhdXNlIHRoZSBwYXJzZXIga25vd3NcbiAgICogdGhlIGRlZmF1bHQgYmFzZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdGhpcy5mcmFtZUZhY3RvcnkgPSBmdW5jdGlvbiAocGFyc2VyLCBwYXJlbnQsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4geyAnTk9ERSc6IDEsICdBUkMnOiAyLCAncGFyZW50JzogcGFyZW50LCAncGFyc2VyJzogcGFyc2VyLCAnc3RvcmUnOiBwYXJzZXIuc3RvcmUsICdlbGVtZW50JzogZWxlbWVudCxcbiAgICAgICdsYXN0Q2hpbGQnOiAwLCAnYmFzZSc6IG51bGwsICdsYW5nJzogbnVsbCwgJ25vZGUnOiBudWxsLCAnbm9kZVR5cGUnOiBudWxsLCAnbGlzdEluZGV4JzogMSwgJ3JkZmlkJzogbnVsbCwgJ2RhdGF0eXBlJzogbnVsbCwgJ2NvbGxlY3Rpb24nOiBmYWxzZSwgLyoqIFRlcm1pbmF0ZSB0aGUgZnJhbWUgYW5kIG5vdGlmeSB0aGUgc3RvcmUgdGhhdCB3ZSdyZSBkb25lICovXG4gICAgICAndGVybWluYXRlRnJhbWUnOiBmdW5jdGlvbiB0ZXJtaW5hdGVGcmFtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbikge1xuICAgICAgICAgIHRoaXMubm9kZS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9LCAvKiogQWRkIGEgc3ltYm9sIG9mIGEgY2VydGFpbiB0eXBlIHRvIHRoZSB0aGlzIGZyYW1lICovJ2FkZFN5bWJvbCc6IGZ1bmN0aW9uIGFkZFN5bWJvbCh0eXBlLCB1cmkpIHtcbiAgICAgICAgdXJpID0gdXJpVXRpbC5qb2luKHVyaSwgdGhpcy5iYXNlKTtcbiAgICAgICAgdGhpcy5ub2RlID0gdGhpcy5zdG9yZS5zeW0odXJpKTtcblxuICAgICAgICB0aGlzLm5vZGVUeXBlID0gdHlwZTtcbiAgICAgIH0sIC8qKiBMb2FkIGFueSBjb25zdHJ1Y3RlZCB0cmlwbGVzIGludG8gdGhlIHN0b3JlICovJ2xvYWRUcmlwbGUnOiBmdW5jdGlvbiBsb2FkVHJpcGxlKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQucGFyZW50LmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLnBhcmVudC5wYXJlbnQubm9kZS5hcHBlbmQodGhpcy5ub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0b3JlLmFkZCh0aGlzLnBhcmVudC5wYXJlbnQubm9kZSwgdGhpcy5wYXJlbnQubm9kZSwgdGhpcy5ub2RlLCB0aGlzLnBhcnNlci53aHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudC5yZGZpZCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gcmVpZnlcbiAgICAgICAgICB2YXIgdHJpcGxlID0gdGhpcy5zdG9yZS5zeW0odXJpVXRpbC5qb2luKCcjJyArIHRoaXMucGFyZW50LnJkZmlkLCB0aGlzLmJhc2UpKTtcbiAgICAgICAgICB0aGlzLnN0b3JlLmFkZCh0cmlwbGUsIHRoaXMuc3RvcmUuc3ltKFJERlBhcnNlci5ucy5SREYgKyAndHlwZScpLCB0aGlzLnN0b3JlLnN5bShSREZQYXJzZXIubnMuUkRGICsgJ1N0YXRlbWVudCcpLCB0aGlzLnBhcnNlci53aHkpO1xuICAgICAgICAgIHRoaXMuc3RvcmUuYWRkKHRyaXBsZSwgdGhpcy5zdG9yZS5zeW0oUkRGUGFyc2VyLm5zLlJERiArICdzdWJqZWN0JyksIHRoaXMucGFyZW50LnBhcmVudC5ub2RlLCB0aGlzLnBhcnNlci53aHkpO1xuICAgICAgICAgIHRoaXMuc3RvcmUuYWRkKHRyaXBsZSwgdGhpcy5zdG9yZS5zeW0oUkRGUGFyc2VyLm5zLlJERiArICdwcmVkaWNhdGUnKSwgdGhpcy5wYXJlbnQubm9kZSwgdGhpcy5wYXJzZXIud2h5KTtcblxuICAgICAgICAgIHRoaXMuc3RvcmUuYWRkKHRyaXBsZSwgdGhpcy5zdG9yZS5zeW0oUkRGUGFyc2VyLm5zLlJERiArICdvYmplY3QnKSwgdGhpcy5ub2RlLCB0aGlzLnBhcnNlci53aHkpO1xuICAgICAgICB9XG4gICAgICB9LCAvKiogQ2hlY2sgaWYgaXQncyBPSyB0byBsb2FkIGEgdHJpcGxlICovJ2lzVHJpcGxlVG9Mb2FkJzogZnVuY3Rpb24gaXNUcmlwbGVUb0xvYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCAhPSBudWxsICYmIHRoaXMucGFyZW50LnBhcmVudCAhPSBudWxsICYmIHRoaXMubm9kZVR5cGUgPT09IHRoaXMuTk9ERSAmJiB0aGlzLnBhcmVudC5ub2RlVHlwZSA9PT0gdGhpcy5BUkMgJiYgdGhpcy5wYXJlbnQucGFyZW50Lm5vZGVUeXBlID09PSB0aGlzLk5PREU7XG4gICAgICB9LCAvKiogQWRkIGEgc3ltYm9saWMgbm9kZSB0byB0aGlzIGZyYW1lICovJ2FkZE5vZGUnOiBmdW5jdGlvbiBhZGROb2RlKHVyaSkge1xuICAgICAgICB0aGlzLmFkZFN5bWJvbCh0aGlzLk5PREUsIHVyaSk7XG4gICAgICAgIGlmICh0aGlzLmlzVHJpcGxlVG9Mb2FkKCkpIHtcbiAgICAgICAgICB0aGlzLmxvYWRUcmlwbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgLyoqIEFkZCBhIGNvbGxlY3Rpb24gbm9kZSB0byB0aGlzIGZyYW1lICovJ2FkZENvbGxlY3Rpb24nOiBmdW5jdGlvbiBhZGRDb2xsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLm5vZGVUeXBlID0gdGhpcy5OT0RFO1xuICAgICAgICB0aGlzLm5vZGUgPSB0aGlzLnN0b3JlLmNvbGxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaXNUcmlwbGVUb0xvYWQoKSkge1xuICAgICAgICAgIHRoaXMubG9hZFRyaXBsZSgpO1xuICAgICAgICB9XG4gICAgICB9LCAvKiogQWRkIGEgY29sbGVjdGlvbiBhcmMgdG8gdGhpcyBmcmFtZSAqLydhZGRDb2xsZWN0aW9uQXJjJzogZnVuY3Rpb24gYWRkQ29sbGVjdGlvbkFyYygpIHtcbiAgICAgICAgdGhpcy5ub2RlVHlwZSA9IHRoaXMuQVJDO1xuICAgICAgfSwgLyoqIEFkZCBhIGJub2RlIHRvIHRoaXMgZnJhbWUgKi8nYWRkQk5vZGUnOiBmdW5jdGlvbiBhZGRCTm9kZShpZCkge1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0aGlzLnBhcnNlci5ibm9kZXNbaWRdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZSA9IHRoaXMucGFyc2VyLmJub2Rlc1tpZF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm9kZSA9IHRoaXMucGFyc2VyLmJub2Rlc1tpZF0gPSB0aGlzLnN0b3JlLmJub2RlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubm9kZSA9IHRoaXMuc3RvcmUuYm5vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGVUeXBlID0gdGhpcy5OT0RFO1xuICAgICAgICBpZiAodGhpcy5pc1RyaXBsZVRvTG9hZCgpKSB7XG4gICAgICAgICAgdGhpcy5sb2FkVHJpcGxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIC8qKiBBZGQgYW4gYXJjIG9yIHByb3BlcnR5IHRvIHRoaXMgZnJhbWUgKi8nYWRkQXJjJzogZnVuY3Rpb24gYWRkQXJjKHVyaSkge1xuICAgICAgICBpZiAodXJpID09PSBSREZQYXJzZXIubnMuUkRGICsgJ2xpJykge1xuICAgICAgICAgIHVyaSA9IFJERlBhcnNlci5ucy5SREYgKyAnXycgKyB0aGlzLnBhcmVudC5saXN0SW5kZXg7XG4gICAgICAgICAgdGhpcy5wYXJlbnQubGlzdEluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZFN5bWJvbCh0aGlzLkFSQywgdXJpKTtcbiAgICAgIH0sIC8qKiBBZGQgYSBsaXRlcmFsIHRvIHRoaXMgZnJhbWUgKi8nYWRkTGl0ZXJhbCc6IGZ1bmN0aW9uIGFkZExpdGVyYWwodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50LmRhdGF0eXBlKSB7XG4gICAgICAgICAgdGhpcy5ub2RlID0gdGhpcy5zdG9yZS5saXRlcmFsKHZhbHVlLCAnJywgdGhpcy5zdG9yZS5zeW0odGhpcy5wYXJlbnQuZGF0YXR5cGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5vZGUgPSB0aGlzLnN0b3JlLmxpdGVyYWwodmFsdWUsIHRoaXMubGFuZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub2RlVHlwZSA9IHRoaXMuTk9ERTtcbiAgICAgICAgaWYgKHRoaXMuaXNUcmlwbGVUb0xvYWQoKSkge1xuICAgICAgICAgIHRoaXMubG9hZFRyaXBsZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBmcm9tIHRoZSBPcGVuTGF5ZXJzIHNvdXJjZSAuLiBuZWVkZWQgdG8gZ2V0IGFyb3VuZCBJRSBwcm9ibGVtcy5cbiAgdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMgPSBmdW5jdGlvbiAobm9kZSwgdXJpLCBuYW1lKSB7XG4gICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSBudWxsO1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZU5vZGVOUykge1xuICAgICAgYXR0cmlidXRlTm9kZSA9IG5vZGUuZ2V0QXR0cmlidXRlTm9kZU5TKHVyaSwgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgdmFyIHBvdGVudGlhbE5vZGUsIGZ1bGxOYW1lO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHBvdGVudGlhbE5vZGUgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAocG90ZW50aWFsTm9kZS5uYW1lc3BhY2VVUkkgPT09IHVyaSkge1xuICAgICAgICAgIGZ1bGxOYW1lID0gcG90ZW50aWFsTm9kZS5wcmVmaXggPyBwb3RlbnRpYWxOb2RlLnByZWZpeCArICc6JyArIG5hbWUgOiBuYW1lO1xuICAgICAgICAgIGlmIChmdWxsTmFtZSA9PT0gcG90ZW50aWFsTm9kZS5ub2RlTmFtZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlTm9kZSA9IHBvdGVudGlhbE5vZGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF0dHJpYnV0ZU5vZGU7XG4gIH07XG5cbiAgLyoqIE91ciB0cmlwbGUgc3RvcmUgcmVmZXJlbmNlIEBwcml2YXRlICovXG5cbiAgdGhpcy5zdG9yZSA9IHN0b3JlOyAvKiogT3VyIGlkZW50aWZpZWQgYmxhbmsgbm9kZXMgQHByaXZhdGUgKi9cbiAgdGhpcy5ibm9kZXMgPSB7fTsgLyoqIEEgY29udGV4dCBmb3IgY29udGV4dC1hd2FyZSBzdG9yZXMgQHByaXZhdGUgKi9cbiAgdGhpcy53aHkgPSBudWxsOyAvKiogUmVpZmljYXRpb24gZmxhZyAqL1xuICB0aGlzLnJlaWZ5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEJ1aWxkIG91ciBpbml0aWFsIHNjb3BlIGZyYW1lIGFuZCBwYXJzZSB0aGUgRE9NIGludG8gdHJpcGxlc1xuICAgKiBAcGFyYW0ge0RPTVRyZWV9IGRvY3VtZW50IFRoZSBET00gdG8gcGFyc2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgVGhlIGJhc2UgVVJMIHRvIHVzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gd2h5IFRoZSBjb250ZXh0IHRvIHdoaWNoIHRoaXMgcmVzb3VyY2UgYmVsb25nc1xuICAgKi9cblxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24gKGRvY3VtZW50LCBiYXNlLCB3aHkpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBkb2N1bWVudC5jaGlsZE5vZGVzOyAvLyBjbGVhbiB1cCBmb3IgdGhlIG5leHQgcnVuXG4gICAgdGhpcy5jbGVhblBhcnNlcigpOyAvLyBmaWd1cmUgb3V0IHRoZSByb290IGVsZW1lbnRcbiAgICB2YXIgcm9vdDtcbiAgICBpZiAoZG9jdW1lbnQubm9kZVR5cGUgPT09IFJERlBhcnNlci5ub2RlVHlwZS5ET0NVTUVOVCkge1xuICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjaGlsZHJlbi5sZW5ndGg7IGMrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5bY10ubm9kZVR5cGUgPT09IFJERlBhcnNlci5ub2RlVHlwZS5FTEVNRU5UKSB7XG4gICAgICAgICAgcm9vdCA9IGNoaWxkcmVuW2NdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5ub2RlVHlwZSA9PT0gUkRGUGFyc2VyLm5vZGVUeXBlLkVMRU1FTlQpIHtcbiAgICAgIHJvb3QgPSBkb2N1bWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUkRGUGFyc2VyOiBjYW4ndCBmaW5kIHJvb3QgaW4gXCIgKyBiYXNlICsgJy4gSGFsdGluZy4gJyk7XG4gICAgICAvLyByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdGhpcy53aHkgPSB3aHk7IC8vIG91ciB0b3Btb3N0IGZyYW1lXG4gICAgdmFyIGYgPSB0aGlzLmZyYW1lRmFjdG9yeSh0aGlzKTtcbiAgICB0aGlzLmJhc2UgPSBiYXNlO1xuICAgIGYuYmFzZSA9IGJhc2U7XG4gICAgZi5sYW5nID0gbnVsbDsgLy8gd2FzICcnIGJ1dCBjYW4ndCBoYXZlIGxhbmdzIGxpa2UgdGhhdCAyMDE1ICghKVxuICAgIHRoaXMucGFyc2VET00odGhpcy5idWlsZEZyYW1lKGYsIHJvb3QpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLnBhcnNlRE9NID0gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgLy8gYSBET00gdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGluIHBhcnNpbmdcbiAgICB2YXIgcmRmaWQ7XG4gICAgdmFyIGVsZW1lbnRVUkkgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmIChlbC5uYW1lc3BhY2VVUkkgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JERi9YTUwgc3ludGF4IGVycm9yOiBObyBuYW1lc3BhY2UgZm9yICcgKyBlbC5sb2NhbE5hbWUgKyAnIGluICcgKyB0aGlzLmJhc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGVsLm5hbWVzcGFjZVVSSSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBlbC5uYW1lc3BhY2VVUkk7XG4gICAgICB9XG4gICAgICBpZiAoZWwubG9jYWxOYW1lKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIGVsLmxvY2FsTmFtZTtcbiAgICAgIH0gZWxzZSBpZiAoZWwubm9kZU5hbWUpIHtcbiAgICAgICAgaWYgKGVsLm5vZGVOYW1lLmluZGV4T2YoJzonKSA+PSAwKSByZXN1bHQgPSByZXN1bHQgKyBlbC5ub2RlTmFtZS5zcGxpdCgnOicpWzFdO2Vsc2UgcmVzdWx0ID0gcmVzdWx0ICsgZWwubm9kZU5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0uYmluZCh0aGlzKTtcbiAgICB2YXIgZGlnID0gdHJ1ZTsgLy8gaWYgd2UnbGwgZGlnIGRvd24gaW4gdGhlIHRyZWUgb24gdGhlIG5leHQgaXRlclxuICAgIHdoaWxlIChmcmFtZS5wYXJlbnQpIHtcbiAgICAgIHZhciBkb20gPSBmcmFtZS5lbGVtZW50O1xuICAgICAgdmFyIGF0dHJzID0gZG9tLmF0dHJpYnV0ZXM7XG4gICAgICBpZiAoZG9tLm5vZGVUeXBlID09PSBSREZQYXJzZXIubm9kZVR5cGUuVEVYVCB8fCBkb20ubm9kZVR5cGUgPT09IFJERlBhcnNlci5ub2RlVHlwZS5DREFUQV9TRUNUSU9OKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSBsaXRlcmFsXG4gICAgICAgIGlmIChmcmFtZS5wYXJlbnQubm9kZVR5cGUgPT09IGZyYW1lLk5PREUpIHtcbiAgICAgICAgICAvLyBtdXN0IGhhdmUgaGFkIGF0dHJpYnV0ZXMsIHN0b3JlIGFzIHJkZjp2YWx1ZVxuICAgICAgICAgIGZyYW1lLmFkZEFyYyhSREZQYXJzZXIubnMuUkRGICsgJ3ZhbHVlJyk7XG4gICAgICAgICAgZnJhbWUgPSB0aGlzLmJ1aWxkRnJhbWUoZnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmFkZExpdGVyYWwoZG9tLm5vZGVWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnRVUkkoZG9tKSAhPT0gUkRGUGFyc2VyLm5zLlJERiArICdSREYnKSB7XG4gICAgICAgIC8vIG5vdCByb290XG4gICAgICAgIGlmIChmcmFtZS5wYXJlbnQgJiYgZnJhbWUucGFyZW50LmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAvLyB3ZSdyZSBhIGNvbGxlY3Rpb24gZWxlbWVudFxuICAgICAgICAgIGZyYW1lLmFkZENvbGxlY3Rpb25BcmMoKTtcbiAgICAgICAgICBmcmFtZSA9IHRoaXMuYnVpbGRGcmFtZShmcmFtZSwgZnJhbWUuZWxlbWVudCk7XG4gICAgICAgICAgZnJhbWUucGFyZW50LmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnJhbWUucGFyZW50IHx8ICFmcmFtZS5wYXJlbnQubm9kZVR5cGUgfHwgZnJhbWUucGFyZW50Lm5vZGVUeXBlID09PSBmcmFtZS5BUkMpIHtcbiAgICAgICAgICAvLyB3ZSBuZWVkIGEgbm9kZVxuICAgICAgICAgIHZhciBhYm91dCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKGRvbSwgUkRGUGFyc2VyLm5zLlJERiwgJ2Fib3V0Jyk7XG4gICAgICAgICAgcmRmaWQgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhkb20sIFJERlBhcnNlci5ucy5SREYsICdJRCcpO1xuICAgICAgICAgIGlmIChhYm91dCAmJiByZGZpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSREZQYXJzZXI6ICcgKyBkb20ubm9kZU5hbWUgKyAnIGhhcyBib3RoIHJkZjppZCBhbmQgcmRmOmFib3V0LicgKyAnIEhhbHRpbmcuIE9ubHkgb25lIG9mIHRoZXNlJyArICcgcHJvcGVydGllcyBtYXkgYmUgc3BlY2lmaWVkIG9uIGEnICsgJyBub2RlLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWFib3V0ICYmIHJkZmlkKSB7XG4gICAgICAgICAgICBmcmFtZS5hZGROb2RlKCcjJyArIHJkZmlkLm5vZGVWYWx1ZSk7XG4gICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlTm9kZShyZGZpZCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhYm91dCA9PSBudWxsICYmIHJkZmlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBibmlkID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMoZG9tLCBSREZQYXJzZXIubnMuUkRGLCAnbm9kZUlEJyk7XG4gICAgICAgICAgICBpZiAoYm5pZCkge1xuICAgICAgICAgICAgICBmcmFtZS5hZGRCTm9kZShibmlkLm5vZGVWYWx1ZSk7XG4gICAgICAgICAgICAgIGRvbS5yZW1vdmVBdHRyaWJ1dGVOb2RlKGJuaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZnJhbWUuYWRkQk5vZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhbWUuYWRkTm9kZShhYm91dC5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZU5vZGUoYWJvdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUeXBlZCBub2Rlc1xuICAgICAgICAgIHZhciByZGZ0eXBlID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMoZG9tLCBSREZQYXJzZXIubnMuUkRGLCAndHlwZScpO1xuICAgICAgICAgIGlmIChSREZQYXJzZXIubnMuUkRGICsgJ0Rlc2NyaXB0aW9uJyAhPT0gZWxlbWVudFVSSShkb20pKSB7XG4gICAgICAgICAgICByZGZ0eXBlID0geyAnbm9kZVZhbHVlJzogZWxlbWVudFVSSShkb20pIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZGZ0eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuYWRkKGZyYW1lLm5vZGUsIHRoaXMuc3RvcmUuc3ltKFJERlBhcnNlci5ucy5SREYgKyAndHlwZScpLCB0aGlzLnN0b3JlLnN5bSh1cmlVdGlsLmpvaW4ocmRmdHlwZS5ub2RlVmFsdWUsIGZyYW1lLmJhc2UpKSwgdGhpcy53aHkpO1xuICAgICAgICAgICAgaWYgKHJkZnR5cGUubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZU5vZGUocmRmdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFByb3BlcnR5IEF0dHJpYnV0ZXNcbiAgICAgICAgICBmb3IgKHZhciB4ID0gYXR0cnMubGVuZ3RoIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuYWRkKGZyYW1lLm5vZGUsIHRoaXMuc3RvcmUuc3ltKGVsZW1lbnRVUkkoYXR0cnNbeF0pKSwgdGhpcy5zdG9yZS5saXRlcmFsKGF0dHJzW3hdLm5vZGVWYWx1ZSwgZnJhbWUubGFuZyksIHRoaXMud2h5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2Ugc2hvdWxkIGFkZCBhbiBhcmMgKG9yIGltcGxpY2l0IGJub2RlK2FyYylcbiAgICAgICAgICBmcmFtZS5hZGRBcmMoZWxlbWVudFVSSShkb20pKTsgLy8gc2F2ZSB0aGUgYXJjJ3MgcmRmOklEIGlmIGl0IGhhcyBvbmVcbiAgICAgICAgICBpZiAodGhpcy5yZWlmeSkge1xuICAgICAgICAgICAgcmRmaWQgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhkb20sIFJERlBhcnNlci5ucy5SREYsICdJRCcpO1xuICAgICAgICAgICAgaWYgKHJkZmlkKSB7XG4gICAgICAgICAgICAgIGZyYW1lLnJkZmlkID0gcmRmaWQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlTm9kZShyZGZpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwYXJzZXR5cGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhkb20sIFJERlBhcnNlci5ucy5SREYsICdwYXJzZVR5cGUnKTtcbiAgICAgICAgICB2YXIgZGF0YXR5cGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhkb20sIFJERlBhcnNlci5ucy5SREYsICdkYXRhdHlwZScpO1xuICAgICAgICAgIGlmIChkYXRhdHlwZSkge1xuICAgICAgICAgICAgZnJhbWUuZGF0YXR5cGUgPSBkYXRhdHlwZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlTm9kZShkYXRhdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJzZXR5cGUpIHtcbiAgICAgICAgICAgIHZhciBudiA9IHBhcnNldHlwZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICBpZiAobnYgPT09ICdMaXRlcmFsJykge1xuICAgICAgICAgICAgICBmcmFtZS5kYXRhdHlwZSA9IFJERlBhcnNlci5ucy5SREYgKyAnWE1MTGl0ZXJhbCc7IC8vICh0aGlzLmJ1aWxkRnJhbWUoZnJhbWUpKS5hZGRMaXRlcmFsKGRvbSlcbiAgICAgICAgICAgICAgLy8gc2hvdWxkIHdvcmsgYnV0IGRvZXNuJ3RcbiAgICAgICAgICAgICAgZnJhbWUgPSB0aGlzLmJ1aWxkRnJhbWUoZnJhbWUpO1xuICAgICAgICAgICAgICBmcmFtZS5hZGRMaXRlcmFsKGRvbSk7XG4gICAgICAgICAgICAgIGRpZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudiA9PT0gJ1Jlc291cmNlJykge1xuICAgICAgICAgICAgICBmcmFtZSA9IHRoaXMuYnVpbGRGcmFtZShmcmFtZSwgZnJhbWUuZWxlbWVudCk7XG4gICAgICAgICAgICAgIGZyYW1lLnBhcmVudC5lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgZnJhbWUuYWRkQk5vZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnYgPT09ICdDb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgICBmcmFtZSA9IHRoaXMuYnVpbGRGcmFtZShmcmFtZSwgZnJhbWUuZWxlbWVudCk7XG4gICAgICAgICAgICAgIGZyYW1lLnBhcmVudC5lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgZnJhbWUuYWRkQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZU5vZGUocGFyc2V0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGF0dHJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMoZG9tLCBSREZQYXJzZXIubnMuUkRGLCAncmVzb3VyY2UnKTtcbiAgICAgICAgICAgIHZhciBibmlkMiA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKGRvbSwgUkRGUGFyc2VyLm5zLlJERiwgJ25vZGVJRCcpO1xuICAgICAgICAgICAgZnJhbWUgPSB0aGlzLmJ1aWxkRnJhbWUoZnJhbWUpO1xuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgIGZyYW1lLmFkZE5vZGUocmVzb3VyY2Uubm9kZVZhbHVlKTtcbiAgICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZU5vZGUocmVzb3VyY2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJuaWQyKSB7XG4gICAgICAgICAgICAgICAgZnJhbWUuYWRkQk5vZGUoYm5pZDIubm9kZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlTm9kZShibmlkMik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJhbWUuYWRkQk5vZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgeDEgPSBhdHRycy5sZW5ndGggLSAxOyB4MSA+PSAwOyB4MS0tKSB7XG4gICAgICAgICAgICAgIHZhciBmID0gdGhpcy5idWlsZEZyYW1lKGZyYW1lKTtcbiAgICAgICAgICAgICAgZi5hZGRBcmMoZWxlbWVudFVSSShhdHRyc1t4MV0pKTtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRVUkkoYXR0cnNbeDFdKSA9PT0gUkRGUGFyc2VyLm5zLlJERiArICd0eXBlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRGcmFtZShmKS5hZGROb2RlKGF0dHJzW3gxXS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRGcmFtZShmKS5hZGRMaXRlcmFsKGF0dHJzW3gxXS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChkb20uY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRGcmFtZShmcmFtZSkuYWRkTGl0ZXJhbCgnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIHJkZjpSREZcbiAgICAgIC8vIGRpZyBkdWdcbiAgICAgIGRvbSA9IGZyYW1lLmVsZW1lbnQ7XG4gICAgICB3aGlsZSAoZnJhbWUucGFyZW50KSB7XG4gICAgICAgIHZhciBwZnJhbWUgPSBmcmFtZTtcbiAgICAgICAgd2hpbGUgKGRvbSA9PSBudWxsKSB7XG4gICAgICAgICAgZnJhbWUgPSBmcmFtZS5wYXJlbnQ7XG4gICAgICAgICAgZG9tID0gZnJhbWUuZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gZG9tLmNoaWxkTm9kZXMgJiYgZG9tLmNoaWxkTm9kZXNbZnJhbWUubGFzdENoaWxkXTtcbiAgICAgICAgaWYgKCFjYW5kaWRhdGUgfHwgIWRpZykge1xuICAgICAgICAgIGZyYW1lLnRlcm1pbmF0ZUZyYW1lKCk7XG4gICAgICAgICAgaWYgKCEoZnJhbWUgPSBmcmFtZS5wYXJlbnQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IC8vIGRvbmVcbiAgICAgICAgICBkb20gPSBmcmFtZS5lbGVtZW50O1xuICAgICAgICAgIGRpZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FuZGlkYXRlLm5vZGVUeXBlICE9PSBSREZQYXJzZXIubm9kZVR5cGUuRUxFTUVOVCAmJiBjYW5kaWRhdGUubm9kZVR5cGUgIT09IFJERlBhcnNlci5ub2RlVHlwZS5URVhUICYmIGNhbmRpZGF0ZS5ub2RlVHlwZSAhPT0gUkRGUGFyc2VyLm5vZGVUeXBlLkNEQVRBX1NFQ1RJT04gfHwgKGNhbmRpZGF0ZS5ub2RlVHlwZSA9PT0gUkRGUGFyc2VyLm5vZGVUeXBlLlRFWFQgfHwgY2FuZGlkYXRlLm5vZGVUeXBlID09PSBSREZQYXJzZXIubm9kZVR5cGUuQ0RBVEFfU0VDVElPTikgJiYgZG9tLmNoaWxkTm9kZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgZnJhbWUubGFzdENoaWxkKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm90IGEgbGVhZlxuICAgICAgICAgIGZyYW1lLmxhc3RDaGlsZCsrO1xuICAgICAgICAgIGZyYW1lID0gdGhpcy5idWlsZEZyYW1lKHBmcmFtZSwgZG9tLmNoaWxkTm9kZXNbZnJhbWUubGFzdENoaWxkIC0gMV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyB3aGlsZVxuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhbnMgb3V0IHN0YXRlIGZyb20gYSBwcmV2aW91cyBwYXJzZSBydW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuY2xlYW5QYXJzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5ibm9kZXMgPSB7fTtcbiAgICB0aGlzLndoeSA9IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBzY29wZSBmcmFtZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5idWlsZEZyYW1lID0gZnVuY3Rpb24gKHBhcmVudCwgZWxlbWVudCkge1xuICAgIHZhciBmcmFtZSA9IHRoaXMuZnJhbWVGYWN0b3J5KHRoaXMsIHBhcmVudCwgZWxlbWVudCk7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgZnJhbWUuYmFzZSA9IHBhcmVudC5iYXNlO1xuICAgICAgZnJhbWUubGFuZyA9IHBhcmVudC5sYW5nO1xuICAgIH1cbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gUkRGUGFyc2VyLm5vZGVUeXBlLlRFWFQgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gUkRGUGFyc2VyLm5vZGVUeXBlLkNEQVRBX1NFQ1RJT04pIHtcbiAgICAgIHJldHVybiBmcmFtZTtcbiAgICB9XG4gICAgdmFyIGF0dHJzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIHZhciBiYXNlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKCd4bWw6YmFzZScpO1xuICAgIGlmIChiYXNlICE9IG51bGwpIHtcbiAgICAgIGZyYW1lLmJhc2UgPSBiYXNlLm5vZGVWYWx1ZTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd4bWw6YmFzZScpO1xuICAgIH1cbiAgICB2YXIgbGFuZyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZSgneG1sOmxhbmcnKTtcbiAgICBpZiAobGFuZyAhPSBudWxsKSB7XG4gICAgICBmcmFtZS5sYW5nID0gbGFuZy5ub2RlVmFsdWU7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgneG1sOmxhbmcnKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGFsbCBleHRyYW5lb3VzIHhtbCBhbmQgeG1sbnMgYXR0cmlidXRlc1xuICAgIGZvciAodmFyIHggPSBhdHRycy5sZW5ndGggLSAxOyB4ID49IDA7IHgtLSkge1xuICAgICAgaWYgKGF0dHJzW3hdLm5vZGVOYW1lLnN1YnN0cigwLCAzKSA9PT0gJ3htbCcpIHtcbiAgICAgICAgaWYgKGF0dHJzW3hdLm5hbWUuc2xpY2UoMCwgNikgPT09ICd4bWxuczonKSB7XG4gICAgICAgICAgdmFyIHVyaSA9IGF0dHJzW3hdLm5vZGVWYWx1ZTsgLy8gYWxlcnQoJ2Jhc2UgZm9yIG5hbWVzcGFjIGF0dHI6Jyt0aGlzLmJhc2UpXG4gICAgICAgICAgaWYgKHRoaXMuYmFzZSkgdXJpID0gdXJpVXRpbC5qb2luKHVyaSwgdGhpcy5iYXNlKTtcbiAgICAgICAgICB0aGlzLnN0b3JlLnNldFByZWZpeEZvclVSSShhdHRyc1t4XS5uYW1lLnNsaWNlKDYpLCB1cmkpO1xuICAgICAgICB9XG4gICAgICAgIC8vXHRcdGFsZXJ0KCdyZGZwYXJzZXI6IHhtbCBhdHJpYnV0ZTogJythdHRyc1t4XS5uYW1lKSAvL0BAXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyc1t4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmcmFtZTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUkRGUGFyc2VyOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWxpemU7XG5cbnZhciBjb252ZXJ0ID0gcmVxdWlyZSgnLi9jb252ZXJ0Jyk7XG52YXIgU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vc2VyaWFsaXplcicpO1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0byB0aGUgYXBwcm9wcmlhdGUgZm9ybWF0XG4gKiBAQCBDdXJyZW50bHkgTlF1YWRzIGFuZCBKU09OL0xEIGFyZSBkZWFsIHdpdGggZXh0cmVsZW1lbnRseSBpbmVmZmljaWVudGx5XG4gKiB0aHJvdWdoIG11dGlwbGUgY29udmVyc2lvbnMuXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZSh0YXJnZXQsIGtiLCBiYXNlLCBjb250ZW50VHlwZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgYmFzZSA9IGJhc2UgfHwgdGFyZ2V0LnVyaTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgfHwgJ3RleHQvdHVydGxlJzsgLy8gdGV4dC9uMyBpZiBjb21wbGV4P1xuICB2YXIgZG9jdW1lbnRTdHJpbmcgPSBudWxsO1xuICB0cnkge1xuICAgIHZhciBzeiA9IFNlcmlhbGl6ZXIoa2IpO1xuICAgIGlmIChvcHRpb25zLmZsYWdzKSBzei5zZXRGbGFncyhvcHRpb25zLmZsYWdzKTtcbiAgICB2YXIgbmV3U3RzID0ga2Iuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRhcmdldCk7XG4gICAgdmFyIG4zU3RyaW5nO1xuICAgIHN6LnN1Z2dlc3ROYW1lc3BhY2VzKGtiLm5hbWVzcGFjZXMpO1xuICAgIHN6LnNldEJhc2UoYmFzZSk7XG4gICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgY2FzZSAnYXBwbGljYXRpb24vcmRmK3htbCc6XG4gICAgICAgIGRvY3VtZW50U3RyaW5nID0gc3ouc3RhdGVtZW50c1RvWE1MKG5ld1N0cyk7XG4gICAgICAgIHJldHVybiBleGVjdXRlQ2FsbGJhY2sobnVsbCwgZG9jdW1lbnRTdHJpbmcpO1xuICAgICAgY2FzZSAndGV4dC9uMyc6XG4gICAgICBjYXNlICdhcHBsaWNhdGlvbi9uMyc6XG4gICAgICAgIC8vIExlZ2FjeVxuICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb04zKG5ld1N0cyk7XG4gICAgICAgIHJldHVybiBleGVjdXRlQ2FsbGJhY2sobnVsbCwgZG9jdW1lbnRTdHJpbmcpO1xuICAgICAgY2FzZSAndGV4dC90dXJ0bGUnOlxuICAgICAgY2FzZSAnYXBwbGljYXRpb24veC10dXJ0bGUnOlxuICAgICAgICAvLyBMZWdhY3lcbiAgICAgICAgc3ouc2V0RmxhZ3MoJ3NpJyk7IC8vIFN1cHByZXNzID0gZm9yIHNhbWVBcyBhbmQgPT4gZm9yIGltcGxpZXNcbiAgICAgICAgZG9jdW1lbnRTdHJpbmcgPSBzei5zdGF0ZW1lbnRzVG9OMyhuZXdTdHMpO1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUNhbGxiYWNrKG51bGwsIGRvY3VtZW50U3RyaW5nKTtcbiAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL24tdHJpcGxlcyc6XG4gICAgICAgIHN6LnNldEZsYWdzKCdkZWlucHJzdHV4Jyk7IC8vIFN1cHByZXNzIG5pY2UgcGFydHMgb2YgTjMgdG8gbWFrZSBudHJpcGxlc1xuICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb05UcmlwbGVzKG5ld1N0cyk7XG4gICAgICAgIHJldHVybiBleGVjdXRlQ2FsbGJhY2sobnVsbCwgZG9jdW1lbnRTdHJpbmcpO1xuICAgICAgY2FzZSAnYXBwbGljYXRpb24vbGQranNvbic6XG4gICAgICAgIHN6LnNldEZsYWdzKCdkZWlucHJzdHV4Jyk7IC8vIFVzZSBhZGFwdGVycyB0byBjb25uZWN0IHRvIGluY21wYXRpYmxlIHBhcnNlclxuICAgICAgICBuM1N0cmluZyA9IHN6LnN0YXRlbWVudHNUb05UcmlwbGVzKG5ld1N0cyk7XG4gICAgICAgIC8vIG4zU3RyaW5nID0gc3ouc3RhdGVtZW50c1RvTjMobmV3U3RzKVxuICAgICAgICBjb252ZXJ0LmNvbnZlcnRUb0pzb24objNTdHJpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhcHBsaWNhdGlvbi9uLXF1YWRzJzpcbiAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL25xdWFkcyc6XG4gICAgICAgIC8vIEBAQCBqdXN0IG91dHBvdXQgdGhlIHF1YWRzPyBEb2VzIG5vdCB3b3JrIGZvciBjb2xsZWN0aW9uc1xuICAgICAgICBzei5zZXRGbGFncygnZGVpbnByc3R1eCBxJyk7IC8vIFN1cHByZXNzIG5pY2UgcGFydHMgb2YgTjMgdG8gbWFrZSBudHJpcGxlc1xuICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb05UcmlwbGVzKG5ld1N0cyk7IC8vIHEgaW4gZmxhZyBtZWFucyBhY3R1YWxseSBxdWFkc1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUNhbGxiYWNrKG51bGwsIGRvY3VtZW50U3RyaW5nKTtcbiAgICAgICAgLy8gbjNTdHJpbmcgPSBzei5zdGF0ZW1lbnRzVG9OMyhuZXdTdHMpXG4gICAgICAgIC8vIGRvY3VtZW50U3RyaW5nID0gY29udmVydC5jb252ZXJ0VG9OUXVhZHMobjNTdHJpbmcsIGNhbGxiYWNrKVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VyaWFsaXplOiBDb250ZW50LXR5cGUgJyArIGNvbnRlbnRUeXBlICsgJyBub3Qgc3VwcG9ydGVkIGZvciBkYXRhIHdyaXRlLicpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyOyAvLyBEb24ndCBoaWRlIHByb2JsZW1zIGZyb20gY2FsbGVyIGluIHN5bmMgbW9kZVxuICB9XG5cbiAgZnVuY3Rpb24gZXhlY3V0ZUNhbGxiYWNrKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAgICAgIFNlcmlhbGl6YXRpb24gb2YgUkRGIEdyYXBoc1xuKipcbioqIFRpbSBCZXJuZXJzLUxlZSAyMDA2XG4qKiBUaGlzIGlzIHdhcyBodHRwOi8vZGlnLmNzYWlsLm1pdC5lZHUvMjAwNS9hamFyL2FqYXcvanMvcmRmL3NlcmlhbGl6ZS5qc1xuKiogVGhpcyBpcyBvciB3YXMgaHR0cHM6Ly9naXRodWIuY29tL2xpbmtlZGRhdGEvcmRmbGliLmpzL2Jsb2IvbWFzdGVyL3NyYy9zZXJpYWxpemVyLmpzXG4qKiBMaWNlbmNlOiBNSVRcbiovXG52YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG52YXIgQmxhbmtOb2RlID0gcmVxdWlyZSgnLi9ibGFuay1ub2RlJyk7XG52YXIgVXJpID0gcmVxdWlyZSgnLi91cmknKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgWFNEID0gcmVxdWlyZSgnLi94c2QnKTtcblxudmFyIFNlcmlhbGl6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfX1NlcmlhbGl6ZXIgPSBmdW5jdGlvbiBfX1NlcmlhbGl6ZXIoc3RvcmUpIHtcbiAgICB0aGlzLmZsYWdzID0gJyc7XG4gICAgdGhpcy5iYXNlID0gbnVsbDtcblxuICAgIHRoaXMucHJlZml4ZXMgPSBbXTsgLy8gc3VnZ2VzdGVkIHByZWZpeGVzXG4gICAgdGhpcy5uYW1lc3BhY2VzID0gW107IC8vIGNvbXBsZW1lbnRhcnkgaW5kZXhlc1xuXG4gICAgdGhpcy5zdWdnZXN0UHJlZml4KCdyZGYnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIycpOyAvLyBYTUwgY29kZSBhc3N1bWVzIHRoaXMhXG4gICAgdGhpcy5zdWdnZXN0UHJlZml4KCd4bWwnLCAncmVzZXJ2ZWQ6cmVzZXJ2ZWRGb3JGdXR1cmVVc2UnKTsgLy8gWE1MIHJlc2VydmVzIHhtbDogaW4gdGhlIHNwZWMuXG5cbiAgICB0aGlzLm5hbWVzcGFjZXNVc2VkID0gW107IC8vIENvdW50IGFjdHVhbGx5IHVzZWQgYW5kIHNvIG5lZWRlZCBpbiBAcHJlZml4ZXNcbiAgICB0aGlzLmtleXdvcmRzID0gWydhJ107IC8vIFRoZSBvbmx5IG9uZSB3ZSBnZW5lcmF0ZSBhdCB0aGUgbW9tZW50XG4gICAgdGhpcy5wcmVmaXhjaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXVzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbiAgICB0aGlzLmluY29taW5nID0gbnVsbDsgLy8gQXJyYXkgbm90IGNhbGN1bGF0ZWQgeWV0XG4gICAgdGhpcy5mb3JtdWxhcyA9IFtdOyAvLyByZW1lYmVyaW5nIG9yaWdpbmFsIGZvcm11bGFlIGZyb20gaGFzaGVzXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICB9O1xuXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUuc2V0QmFzZSA9IGZ1bmN0aW9uIChiYXNlKSB7XG4gICAgdGhpcy5iYXNlID0gYmFzZTtyZXR1cm4gdGhpcztcbiAgfTtcblxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLnNldEZsYWdzID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgdGhpcy5mbGFncyA9IGZsYWdzIHx8ICcnO3JldHVybiB0aGlzO1xuICB9O1xuXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUudG9TdHIgPSBmdW5jdGlvbiAoeCkge1xuICAgIHZhciBzID0geC50b05UKCk7XG4gICAgaWYgKHgudGVybVR5cGUgPT09ICdHcmFwaCcpIHtcbiAgICAgIHRoaXMuZm9ybXVsYXNbc10gPSB4OyAvLyByZW1lbWJlciBhcyByZXZlcnNlIGRvZXMgbm90IHdvcmtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH07XG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5mcm9tU3RyID0gZnVuY3Rpb24gKHMpIHtcbiAgICBpZiAoc1swXSA9PT0gJ3snKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuZm9ybXVsYXNbc107XG4gICAgICBpZiAoIXgpIGNvbnNvbGUubG9nKCdObyBmb3JtdWxhIG9iamVjdCBmb3IgJyArIHMpO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0b3JlLmZyb21OVChzKTtcbiAgfTtcbiAgLyogQWNjdW11bGF0ZSBOYW1lc3BhY2VzXG4gICoqXG4gICoqIFRoZXNlIGFyZSBvbmx5IGhpbnRzLiAgSWYgdHdvIG92ZXJsYXAsIG9ubHkgb25lIGdldHMgdXNlZFxuICAqKiBUaGVyZSBpcyB0aGVyZWZvcmUgbm8gZ3VhcmFudGVlIGluIGdlbmVyYWwuXG4gICovXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUuc3VnZ2VzdFByZWZpeCA9IGZ1bmN0aW9uIChwcmVmaXgsIHVyaSkge1xuICAgIGlmIChwcmVmaXguc2xpY2UoMCwgNykgPT09ICdkZWZhdWx0JykgcmV0dXJuOyAvLyBUcnkgdG8gd2VlZCB0aGVzZSBvdXRcbiAgICBpZiAocHJlZml4LnNsaWNlKDAsIDIpID09PSAnbnMnKSByZXR1cm47IC8vICBGcm9tIG90aGVycyBpbmZlcmlvciBhbGdvc1xuICAgIGlmICghcHJlZml4IHx8ICF1cmkpIHJldHVybjsgLy8gZW1wdHkgc3RyaW5ncyBub3Qgc3VpdGFibGVcbiAgICBpZiAocHJlZml4IGluIHRoaXMubmFtZXNwYWNlcyB8fCB1cmkgaW4gdGhpcy5wcmVmaXhlcykgcmV0dXJuOyAvLyBhbHJlYWR5IHVzZWRcbiAgICB0aGlzLnByZWZpeGVzW3VyaV0gPSBwcmVmaXg7XG4gICAgdGhpcy5uYW1lc3BhY2VzW3ByZWZpeF0gPSB1cmk7XG4gIH07XG5cbiAgLy8gVGFrZXMgYSBuYW1lc3BhY2UgLT4gcHJlZml4IG1hcFxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLnN1Z2dlc3ROYW1lc3BhY2VzID0gZnVuY3Rpb24gKG5hbWVzcGFjZXMpIHtcbiAgICBmb3IgKHZhciBweCBpbiBuYW1lc3BhY2VzKSB7XG4gICAgICB0aGlzLnN1Z2dlc3RQcmVmaXgocHgsIG5hbWVzcGFjZXNbcHhdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5jaGVja0ludGVncml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcCwgbnM7XG4gICAgZm9yIChwIGluIHRoaXMubmFtZXNwYWNlcykge1xuICAgICAgaWYgKHRoaXMucHJlZml4ZXNbdGhpcy5uYW1lc3BhY2VzW3BdXSAhPT0gcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcmlhbGl6ZXIgaW50ZWdpdHkgZXJyb3IgMTogJyArIHAgKyAnLCAnICsgdGhpcy5uYW1lc3BhY2VzW3BdICsgJywgJyArIHRoaXMucHJlZml4ZXNbdGhpcy5uYW1lc3BhY2VzW3BdXSArICchJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobnMgaW4gdGhpcy5wcmVmaXhlcykge1xuICAgICAgaWYgKHRoaXMubmFtZXNwYWNlc1t0aGlzLnByZWZpeGVzW25zXV0gIT09IG5zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VyaWFsaXplciBpbnRlZ2l0eSBlcnJvciAyOiAnICsgbnMgKyAnLCAnICsgdGhpcy5wcmVmaXhzW25zXSArICcsICcgKyB0aGlzLm5hbWVzcGFjZXNbdGhpcy5wcmVmaXhlc1tuc11dICsgJyEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gTWFrZSB1cCBhbiB1bnVzZWQgcHJlZml4IGZvciBhIHJhbmRvbSBuYW1lc3BhY2VcbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5tYWtlVXBQcmVmaXggPSBmdW5jdGlvbiAodXJpKSB7XG4gICAgdmFyIHAgPSB1cmk7XG4gICAgZnVuY3Rpb24gY2FuVXNlTWV0aG9kKHBwKSB7XG4gICAgICBpZiAoIV9fU2VyaWFsaXplci5wcm90b3R5cGUudmFsaWRQcmVmaXgudGVzdChwcCkpIHJldHVybiBmYWxzZTsgLy8gYmFkIGZvcm1hdFxuICAgICAgaWYgKHBwID09PSAnbnMnKSByZXR1cm4gZmFsc2U7IC8vIGJvcmluZ1xuICAgICAgaWYgKHBwIGluIHRoaXMubmFtZXNwYWNlcykgcmV0dXJuIGZhbHNlOyAvLyBhbHJlYWR5IHVzZWRcbiAgICAgIHRoaXMucHJlZml4ZXNbdXJpXSA9IHBwO1xuICAgICAgdGhpcy5uYW1lc3BhY2VzW3BwXSA9IHVyaTtcbiAgICAgIHJldHVybiBwcDtcbiAgICB9XG4gICAgdmFyIGNhblVzZSA9IGNhblVzZU1ldGhvZC5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKCcjLycuaW5kZXhPZihwW3AubGVuZ3RoIC0gMV0pID49IDApIHAgPSBwLnNsaWNlKDAsIC0xKTtcbiAgICB2YXIgc2xhc2ggPSBwLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgaWYgKHNsYXNoID49IDApIHAgPSBwLnNsaWNlKHNsYXNoICsgMSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgcC5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnByZWZpeGNoYXJzLmluZGV4T2YocFtpXSkpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHAgPSBwLnNsaWNlKDAsIGkpO1xuXG4gICAgaWYgKHAubGVuZ3RoIDwgNiAmJiBjYW5Vc2UocCkpIHJldHVybiBwOyAvLyBleGFjdCBpcyBiZXN0XG4gICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDMpKSkgcmV0dXJuIHAuc2xpY2UoMCwgMyk7XG4gICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDIpKSkgcmV0dXJuIHAuc2xpY2UoMCwgMik7XG4gICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDQpKSkgcmV0dXJuIHAuc2xpY2UoMCwgNCk7XG4gICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDEpKSkgcmV0dXJuIHAuc2xpY2UoMCwgMSk7XG4gICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDUpKSkgcmV0dXJuIHAuc2xpY2UoMCwgNSk7XG4gICAgaWYgKCFfX1NlcmlhbGl6ZXIucHJvdG90eXBlLnZhbGlkUHJlZml4LnRlc3QocCkpIHtcbiAgICAgIHAgPSAnbic7IC8vIE90aGVyd2lzZSB0aGUgbG9vcCBiZWxvdyBtYXkgbmV2ZXIgdGVybWltbmF0ZVxuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDs7IGorKykge1xuICAgICAgaWYgKGNhblVzZShwLnNsaWNlKDAsIDMpICsgaikpIHJldHVybiBwLnNsaWNlKDAsIDMpICsgajtcbiAgICB9XG4gIH07XG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5yb290U3ViamVjdHMgPSBmdW5jdGlvbiAoc3RzKSB7XG4gICAgdmFyIGluY29taW5nID0ge307XG4gICAgdmFyIHN1YmplY3RzID0ge307XG4gICAgdmFyIGFsbEJub2RlcyA9IHt9O1xuXG4gICAgLyogVGhpcyBzY2FuIGlzIHRvIGZpbmQgb3V0IHdoaWNoIG5vZGVzIHdpbGwgaGF2ZSB0byBiZSB0aGUgcm9vdHMgb2YgdHJlZXNcbiAgICAqKiBpbiB0aGUgc2VyaWFsaXplZCBmb3JtLiBUaGlzIHdpbGwgYmUgYW55IHN5bWJvbHMsIGFuZCBhbnkgYm5vZGVzXG4gICAgKiogd2hpY2ggaHZlIG1vcmUgb3IgbGVzcyB0aGFuIG9uZSBpbmNvbWluZyBhcmMsIGFuZCBhbnkgYm5vZGVzIHdoaWNoIGhhdmVcbiAgICAqKiBvbmUgaW5jb21pbmcgYXJjIGJ1dCBpdCBpcyBhbiB1bmludGVycnVwdGVkIGxvb3Agb2Ygc3VjaCBub2RlcyBiYWNrIHRvIGl0c2VsZi5cbiAgICAqKiBUaGlzIHNob3VsZCBiZSBrZXB0IGxpbmVhciB0aW1lIHdpdGggcmVwZWN0IHRvIHRoZSBudW1iZXIgb2Ygc3RhdGVtZW50cy5cbiAgICAqKiBOb3RlIGl0IGRvZXMgbm90IHVzZSBhbnkgaW5kZXhpbmcgb2YgdGhlIHN0b3JlLlxuICAgICovXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdCA9IHN0c1tpXTtcbiAgICAgIHZhciBjaGVja01lbnRpb25zID0gZnVuY3Rpb24gY2hlY2tNZW50aW9ucyh4KSB7XG4gICAgICAgIGlmICghaW5jb21pbmcuaGFzT3duUHJvcGVydHkoeCkpIGluY29taW5nW3hdID0gW107XG4gICAgICAgIGluY29taW5nW3hdLnB1c2goc3Quc3ViamVjdCk7IC8vIExpc3Qgb2YgdGhpbmdzIHdoaWNoIHdpbGwgY2F1c2UgdGhpcyB0byBiZSBwcmludGVkXG4gICAgICB9O1xuICAgICAgdmFyIHN0MiA9IFtzdC5zdWJqZWN0LCBzdC5wcmVkaWNhdGUsIHN0Lm9iamVjdF07XG4gICAgICBzdDIubWFwKGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIGlmICh5LnRlcm1UeXBlID09PSAnQmxhbmtOb2RlJykge1xuICAgICAgICAgIGFsbEJub2Rlc1t5LnRvTlQoKV0gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHkudGVybVR5cGUgPT09ICdDb2xsZWN0aW9uJykge1xuICAgICAgICAgIHkuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoeikge1xuICAgICAgICAgICAgY2hlY2tNZW50aW9ucyh6KTsgLy8gYm5vZGVzIGluIGNvbGxlY3Rpb25zIGltcG9ydGFudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNoZWNrTWVudGlvbnMoc3RzW2ldLm9iamVjdCk7XG4gICAgICB2YXIgc3MgPSBzdWJqZWN0c1t0aGlzLnRvU3RyKHN0LnN1YmplY3QpXTsgLy8gU3RhdGVtZW50cyB3aXRoIHRoaXMgYXMgc3ViamVjdFxuICAgICAgaWYgKCFzcykgc3MgPSBbXTtcbiAgICAgIHNzLnB1c2goc3QpO1xuICAgICAgc3ViamVjdHNbdGhpcy50b1N0cihzdC5zdWJqZWN0KV0gPSBzczsgLy8gTWFrZSBoYXNoLiBAQCB0b28gc2xvdyBmb3IgZm9ybXVsYT9cbiAgICB9XG5cbiAgICB2YXIgcm9vdHMgPSBbXTtcbiAgICBmb3IgKHZhciB4TlQgaW4gc3ViamVjdHMpIHtcbiAgICAgIGlmICghc3ViamVjdHMuaGFzT3duUHJvcGVydHkoeE5UKSkgY29udGludWU7XG4gICAgICB2YXIgeSA9IHRoaXMuZnJvbVN0cih4TlQpO1xuICAgICAgaWYgKHkudGVybVR5cGUgIT09ICdCbGFua05vZGUnIHx8ICFpbmNvbWluZ1t5XSB8fCBpbmNvbWluZ1t5XS5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgcm9vdHMucHVzaCh5KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaW5jb21pbmcgPSBpbmNvbWluZzsgLy8gS2VlcCBmb3Igc2VyaWFsaXppbmcgQEAgQnVnIGZvciBuZXN0ZWQgZm9ybXVsYXNcblxuICAgIC8vIE5vdyBkbyB0aGUgc2NhbiB1c2luZyBleGlzdGluZyByb290c1xuICAgIHZhciByb290c0hhc2ggPSB7fTtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHJvb3RzLmxlbmd0aDsgaysrKSB7XG4gICAgICByb290c0hhc2hbcm9vdHNba10udG9OVCgpXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB7ICdyb290cyc6IHJvb3RzLCAnc3ViamVjdHMnOiBzdWJqZWN0cyxcbiAgICAgICdyb290c0hhc2gnOiByb290c0hhc2gsICdpbmNvbWluZyc6IGluY29taW5nIH07XG4gIH07XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS50b04zID0gZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZW1lbnRzVG9OMyhmLnN0YXRlbWVudHMpO1xuICB9O1xuXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUuX25vdFFOYW1lQ2hhcnMgPSAnXFx0XFxyXFxuICFcIiMkJSZcXCcoKSouLCsvOzw9Pj9AW1xcXFxdXmB7fH1+JztcbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5fbm90TmFtZUNoYXJzID0gX19TZXJpYWxpemVyLnByb3RvdHlwZS5fbm90UU5hbWVDaGFycyArICc6JztcblxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLmV4cGxpY2l0VVJJID0gZnVuY3Rpb24gKHVyaSkge1xuICAgIGlmICh0aGlzLmZsYWdzLmluZGV4T2YoJ3InKSA8IDAgJiYgdGhpcy5iYXNlKSB7XG4gICAgICB1cmkgPSBVcmkucmVmVG8odGhpcy5iYXNlLCB1cmkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mbGFncy5pbmRleE9mKCd1JykgPj0gMCkge1xuICAgICAgLy8gVW5pY29kZSBlbmNvZGluZyBOVHJpcGxlcyBzdHlsZVxuICAgICAgdXJpID0gYmFja3NsYXNoVWlmeSh1cmkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cmkgPSBoZXhpZnkodXJpKTtcbiAgICB9XG4gICAgcmV0dXJuICc8JyArIHVyaSArICc+JztcbiAgfTtcblxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLnN0YXRlbWVudHNUb05UcmlwbGVzID0gZnVuY3Rpb24gKHN0cykge1xuICAgIHZhciBzb3J0ZWQgPSBzdHMuc2xpY2UoKTtcbiAgICBzb3J0ZWQuc29ydCgpO1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgcmRmbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyc7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBrYiA9IHRoaXMuc3RvcmU7XG4gICAgdmFyIHRlcm1Ub05UID0gZnVuY3Rpb24gdGVybVRvTlQoeCkge1xuICAgICAgaWYgKHgudGVybVR5cGUgIT09ICdDb2xsZWN0aW9uJykge1xuICAgICAgICByZXR1cm4gc2VsZi5hdG9taWNUZXJtVG9OMyh4KTtcbiAgICAgIH1cbiAgICAgIHZhciBsaXN0ID0geC5lbGVtZW50cztcbiAgICAgIHZhciByZXN0ID0ga2Iuc3ltKHJkZm5zICsgJ25pbGwnKTtcbiAgICAgIGZvciAodmFyIGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBibm9kZSA9IG5ldyBCbGFua05vZGUoKTtcbiAgICAgICAgc3RyICs9IHRlcm1Ub05UKGJub2RlKSArICcgJyArIHRlcm1Ub05UKGtiLnN5bShyZGZucyArICdmaXJzdCcpKSArICcgJyArIHRlcm1Ub05UKGxpc3RbaV0pICsgJy5cXG4nO1xuICAgICAgICBzdHIgKz0gdGVybVRvTlQoYm5vZGUpICsgJyAnICsgdGVybVRvTlQoa2Iuc3ltKHJkZm5zICsgJ3Jlc3QnKSkgKyAnICcgKyB0ZXJtVG9OVChyZXN0KSArICcuXFxuJztcbiAgICAgICAgcmVzdCA9IGJub2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGYuYXRvbWljVGVybVRvTjMocmVzdCk7XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHN0ID0gc29ydGVkW2ldO1xuICAgICAgdmFyIHMgPSAnJztcbiAgICAgIHMgKz0gdGVybVRvTlQoc3Quc3ViamVjdCkgKyAnICc7XG4gICAgICBzICs9IHRlcm1Ub05UKHN0LnByZWRpY2F0ZSkgKyAnICc7XG4gICAgICBzICs9IHRlcm1Ub05UKHN0Lm9iamVjdCkgKyAnICc7XG4gICAgICBpZiAodGhpcy5mbGFncy5pbmRleE9mKCdxJykgPj0gMCkge1xuICAgICAgICAvLyBEbyBxdWFkcyBub3QgbnJ0aXBsZXNcbiAgICAgICAgcyArPSB0ZXJtVG9OVChzdC53aHkpICsgJyAnO1xuICAgICAgfVxuICAgICAgcyArPSAnLlxcbic7XG4gICAgICBzdHIgKz0gcztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLnN0YXRlbWVudHNUb04zID0gZnVuY3Rpb24gKHN0cykge1xuICAgIHZhciBpbmRlbnQgPSA0O1xuICAgIHZhciB3aWR0aCA9IDgwO1xuICAgIHZhciBrYiA9IHRoaXMuc3RvcmU7XG4gICAgLy8gQSBVUkkgTWFwIGFsb3dzIHVzIHRvIHB1dCB0aGUgdHlwZSBzdGF0ZW1udHMgYXQgdGhlIHRvcC5cbiAgICB2YXIgdXJpTWFwID0geyAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnOiAnYWFhOjAwJyB9O1xuICAgIHZhciBTUE8gPSBmdW5jdGlvbiBTUE8oeCwgeSkge1xuICAgICAgLy8gRG8gbGltaXRlZCBjYW5vbmljYWxpemF0aW9uIG9mIGJub2Rlc1xuICAgICAgcmV0dXJuIFV0aWwuaGVhdnlDb21wYXJlU1BPKHgsIHksIGtiLCB1cmlNYXApO1xuICAgIH07XG4gICAgc3RzLnNvcnQoU1BPKTtcblxuICAgIGlmICh0aGlzLmJhc2UgJiYgIXRoaXMuZGVmYXVsdE5hbWVzcGFjZSkge1xuICAgICAgdGhpcy5kZWZhdWx0TmFtZXNwYWNlID0gdGhpcy5iYXNlICsgJyMnO1xuICAgIH1cblxuICAgIHZhciBwcmVkTWFwID0ge307XG4gICAgaWYgKHRoaXMuZmxhZ3MuaW5kZXhPZigncycpIDwgMCkge1xuICAgICAgcHJlZE1hcFsnaHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjc2FtZUFzJ10gPSAnPSc7XG4gICAgfVxuICAgIGlmICh0aGlzLmZsYWdzLmluZGV4T2YoJ3QnKSA8IDApIHtcbiAgICAgIHByZWRNYXBbJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyN0eXBlJ10gPSAnYSc7XG4gICAgfVxuICAgIGlmICh0aGlzLmZsYWdzLmluZGV4T2YoJ2knKSA8IDApIHtcbiAgICAgIHByZWRNYXBbJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC9sb2cjaW1wbGllcyddID0gJz0+JztcbiAgICB9XG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEFycmFuZ2UgdGhlIGJpdHMgb2YgdGV4dFxuXG4gICAgdmFyIHNwYWNlcyA9IGZ1bmN0aW9uIHNwYWNlcyhuKSB7XG4gICAgICB2YXIgcyA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyArPSAnICc7XG4gICAgICB9cmV0dXJuIHM7XG4gICAgfTtcblxuICAgIHZhciB0cmVlVG9MaW5lID0gZnVuY3Rpb24gdHJlZVRvTGluZSh0cmVlKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGJyYW5jaCA9IHRyZWVbaV07XG4gICAgICAgIHZhciBzMiA9IHR5cGVvZiBicmFuY2ggPT09ICdzdHJpbmcnID8gYnJhbmNoIDogdHJlZVRvTGluZShicmFuY2gpO1xuICAgICAgICAvLyBOb3RlIHRoZSBzcGFjZSBiZWZvcmUgdGhlIGRvdCBpbiBjYXNlIHN0YXRlbWVudCBlbmRzIDEyMy4gd2hpY2ggaXMgaW4gZmFjdCBhbGxvd2VkIGJ1dCBiZSBjb25zZXJ2YXRpdmUuXG4gICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgdmFyIGNoID0gc3RyLnNsaWNlKC0xKSB8fCAnICc7XG4gICAgICAgICAgaWYgKHMyID09PSAnLCcgfHwgczIgPT09ICc7Jykge1xuICAgICAgICAgICAgLy8gbm8gZ2FwXG4gICAgICAgICAgfSBlbHNlIGlmIChzMiA9PT0gJy4nICYmICEnMDEyMzQ1Njc4OS4nLmluY2x1ZGVzKGNoKSkgey8vIG5vIGdhcCBleGNlcHQgYWZ0ZXIgbnVtYmVyXG4gICAgICAgICAgICAvLyBubyBnYXBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyICs9ICcgJzsgLy8gc2VwYXJhdGUgZnJvbSBwcmV2aW91cyB0b2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gczI7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH07XG5cbiAgICAvLyBDb252ZXJ0IGEgbmVzdGVkIHRyZWUgb2YgbGlzdHMgYW5kIHN0cmluZ3MgdG8gYSBzdHJpbmdcbiAgICB2YXIgdHJlZVRvU3RyaW5nID0gZnVuY3Rpb24gdHJlZVRvU3RyaW5nKHRyZWUsIGxldmVsKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG4gICAgICB2YXIgbGFzdExlbmd0aCA9IDEwMDAwMDtcbiAgICAgIGlmIChsZXZlbCA9PT0gdW5kZWZpbmVkKSBsZXZlbCA9IC0xO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBicmFuY2ggPSB0cmVlW2ldO1xuICAgICAgICBpZiAodHlwZW9mIGJyYW5jaCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgc3Vic3RyID0gdHJlZVRvU3RyaW5nKGJyYW5jaCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICBpZiAoc3Vic3RyLmxlbmd0aCA8IDEwICogKHdpZHRoIC0gaW5kZW50ICogbGV2ZWwpICYmIHN1YnN0ci5pbmRleE9mKCdcIlwiXCInKSA8IDApIHtcbiAgICAgICAgICAgIC8vIERvbid0IG1lc3MgdXAgbXVsdGlsaW5lIHN0cmluZ3NcbiAgICAgICAgICAgIHZhciBsaW5lID0gdHJlZVRvTGluZShicmFuY2gpO1xuICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoIDwgd2lkdGggLSBpbmRlbnQgKiBsZXZlbCkge1xuICAgICAgICAgICAgICBicmFuY2ggPSBsaW5lOyAvLyAgIE5vdGUhIHRyZWF0IGFzIHN0cmluZyBiZWxvd1xuICAgICAgICAgICAgICBzdWJzdHIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN1YnN0cikgbGFzdExlbmd0aCA9IDEwMDAwO1xuICAgICAgICAgIHN0ciArPSBzdWJzdHI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBicmFuY2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGJyYW5jaC5sZW5ndGggPT09IDEgJiYgc3RyLnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmICgnLC47Jy5pbmRleE9mKGJyYW5jaCkgPj0gMCkge1xuICAgICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgLTEpICsgYnJhbmNoICsgJ1xcbic7IC8vICBzbGlwIHB1bmN0J24gb24gZW5kXG4gICAgICAgICAgICAgIGxhc3RMZW5ndGggKz0gMTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIDwgaW5kZW50ICogbGV2ZWwgKyA0IHx8IC8vIGlmIG5ldyBsaW5lIG5vdCBuZWNlc3NhcnlcbiAgICAgICAgICBsYXN0TGVuZ3RoICsgYnJhbmNoLmxlbmd0aCArIDEgPCB3aWR0aCAmJiAnOy4nLmluZGV4T2Yoc3RyW3N0ci5sZW5ndGggLSAyXSkgPCAwKSB7XG4gICAgICAgICAgICAvLyBvciB0aGUgc3RyaW5nIGZpdHMgb24gbGFzdCBsaW5lXG4gICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgLTEpICsgJyAnICsgYnJhbmNoICsgJ1xcbic7IC8vIHRoZW4gY29udGludWUgb24gdGhpcyBsaW5lXG4gICAgICAgICAgICBsYXN0TGVuZ3RoICs9IGJyYW5jaC5sZW5ndGggKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX2xpbmUgPSBzcGFjZXMoaW5kZW50ICogbGV2ZWwpICsgYnJhbmNoO1xuICAgICAgICAgICAgc3RyICs9IF9saW5lICsgJ1xcbic7XG4gICAgICAgICAgICBsYXN0TGVuZ3RoID0gX2xpbmUubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxldmVsIDwgMCkge1xuICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7IC8vIGV4dHJhIGJsYW5rIGxpbmVcbiAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IDEwMDAwMDsgLy8gZG9uJ3QgdG91Y2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFN0cnVjdHVyZSBmb3IgTjNcbiAgICAvLyBDb252ZXJ0IGEgc2V0IG9mIHN0YXRlbWVudHMgaW50byBhIG5lc3RlZCB0cmVlIG9mIGxpc3RzIGFuZCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gc3RhdGVtZW50TGlzdFRvVHJlZU1ldGhvZChzdGF0ZW1lbnRzKSB7XG4gICAgICB2YXIgc3RhdHMgPSB0aGlzLnJvb3RTdWJqZWN0cyhzdGF0ZW1lbnRzKTtcbiAgICAgIHZhciByb290cyA9IHN0YXRzLnJvb3RzO1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJvb3QgPSByb290c1tpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHN1YmplY3RUcmVlKHJvb3QsIHN0YXRzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgdmFyIHN0YXRlbWVudExpc3RUb1RyZWUgPSBzdGF0ZW1lbnRMaXN0VG9UcmVlTWV0aG9kLmJpbmQodGhpcyk7XG5cbiAgICAvLyBUaGUgdHJlZSBmb3IgYSBzdWJqZWN0XG4gICAgZnVuY3Rpb24gc3ViamVjdFRyZWUoc3ViamVjdCwgc3RhdHMpIHtcbiAgICAgIGlmIChzdWJqZWN0LnRlcm1UeXBlID09PSAnQmxhbmtOb2RlJyAmJiAhc3RhdHMuaW5jb21pbmdbc3ViamVjdF0pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFRyZWUoc3ViamVjdCwgc3RhdHMsIHRydWUpLmNvbmNhdChbJy4nXSk7IC8vIEFub255bW91cyBibm9kZSBzdWJqZWN0XG4gICAgICB9XG4gICAgICByZXR1cm4gW3Rlcm1Ub04zKHN1YmplY3QsIHN0YXRzKV0uY29uY2F0KFtwcm9wZXJ0eVRyZWUoc3ViamVjdCwgc3RhdHMpXSkuY29uY2F0KFsnLiddKTtcbiAgICB9XG4gICAgLy8gVGhlIHByb3BlcnR5IHRyZWUgZm9yIGEgc2luZ2xlIHN1YmplY3Qgb3IgYW5vbnltb3VzIG5vZGVcbiAgICBmdW5jdGlvbiBwcm9wZXJ0eVRyZWVNZXRob2Qoc3ViamVjdCwgc3RhdHMpIHtcbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB2YXIgbGFzdFByZWQgPSBudWxsO1xuICAgICAgdmFyIHN0cyA9IHN0YXRzLnN1YmplY3RzW3RoaXMudG9TdHIoc3ViamVjdCldIHx8IFtdOyAvLyByZWxldmFudCBzdGF0ZW1lbnRzXG4gICAgICBpZiAodHlwZW9mIHN0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW50IGZpbmQgc3RhdGVtZW50cyBmb3IgJyArIHN1YmplY3QpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0ID0gc3RzW2ldO1xuICAgICAgICBpZiAoc3QucHJlZGljYXRlLnVyaSA9PT0gbGFzdFByZWQpIHtcbiAgICAgICAgICBvYmplY3RzLnB1c2goJywnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobGFzdFByZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChbb2JqZWN0c10pLmNvbmNhdChbJzsnXSk7XG4gICAgICAgICAgICBvYmplY3RzID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdHMucHVzaChwcmVkTWFwW3N0LnByZWRpY2F0ZS51cmldID8gcHJlZE1hcFtzdC5wcmVkaWNhdGUudXJpXSA6IHRlcm1Ub04zKHN0LnByZWRpY2F0ZSwgc3RhdHMpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UHJlZCA9IHN0LnByZWRpY2F0ZS51cmk7XG4gICAgICAgIG9iamVjdHMucHVzaChvYmplY3RUcmVlKHN0Lm9iamVjdCwgc3RhdHMpKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChbb2JqZWN0c10pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIHZhciBwcm9wZXJ0eVRyZWUgPSBwcm9wZXJ0eVRyZWVNZXRob2QuYmluZCh0aGlzKTtcblxuICAgIGZ1bmN0aW9uIG9iamVjdFRyZWVNZXRob2Qob2JqLCBzdGF0cywgZm9yY2UpIHtcbiAgICAgIGlmIChvYmoudGVybVR5cGUgPT09ICdCbGFua05vZGUnICYmIChmb3JjZSB8fCBzdGF0cy5yb290c0hhc2hbb2JqLnRvTlQoKV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgLy8gaWYgbm90IGEgcm9vdFxuICAgICAgICBpZiAoc3RhdHMuc3ViamVjdHNbdGhpcy50b1N0cihvYmopXSkge1xuICAgICAgICAgIHJldHVybiBbJ1snLCBwcm9wZXJ0eVRyZWUob2JqLCBzdGF0cyksICddJ107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICdbXSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXJtVG9OMyhvYmosIHN0YXRzKTtcbiAgICB9XG4gICAgdmFyIG9iamVjdFRyZWUgPSBvYmplY3RUcmVlTWV0aG9kLmJpbmQodGhpcyk7XG5cbiAgICBmdW5jdGlvbiB0ZXJtVG9OM01ldGhvZChleHByLCBzdGF0cykge1xuICAgICAgLy9cbiAgICAgIHZhciBpLCByZXM7XG4gICAgICBzd2l0Y2ggKGV4cHIudGVybVR5cGUpIHtcbiAgICAgICAgY2FzZSAnR3JhcGgnOlxuICAgICAgICAgIHJlcyA9IFsneyddO1xuICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQoc3RhdGVtZW50TGlzdFRvVHJlZShleHByLnN0YXRlbWVudHMpKTtcbiAgICAgICAgICByZXR1cm4gcmVzLmNvbmNhdChbJ30nXSk7XG5cbiAgICAgICAgY2FzZSAnQ29sbGVjdGlvbic6XG4gICAgICAgICAgcmVzID0gWycoJ107XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV4cHIuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKFtvYmplY3RUcmVlKGV4cHIuZWxlbWVudHNbaV0sIHN0YXRzKV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXMucHVzaCgnKScpO1xuICAgICAgICAgIHJldHVybiByZXM7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5hdG9taWNUZXJtVG9OMyhleHByKTtcbiAgICAgIH1cbiAgICB9XG4gICAgX19TZXJpYWxpemVyLnByb3RvdHlwZS50ZXJtVG9OMyA9IHRlcm1Ub04zO1xuICAgIHZhciB0ZXJtVG9OMyA9IHRlcm1Ub04zTWV0aG9kLmJpbmQodGhpcyk7XG5cbiAgICBmdW5jdGlvbiBwcmVmaXhEaXJlY3RpdmVzTWV0aG9kKCkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgaWYgKHRoaXMuZGVmYXVsdE5hbWVzcGFjZSkge1xuICAgICAgICBzdHIgKz0gJ0BwcmVmaXggOiAnICsgdGhpcy5leHBsaWNpdFVSSSh0aGlzLmRlZmF1bHROYW1lc3BhY2UpICsgJy5cXG4nO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbnMgaW4gdGhpcy5wcmVmaXhlcykge1xuICAgICAgICBpZiAoIXRoaXMucHJlZml4ZXMuaGFzT3duUHJvcGVydHkobnMpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCF0aGlzLm5hbWVzcGFjZXNVc2VkW25zXSkgY29udGludWU7XG4gICAgICAgIHN0ciArPSAnQHByZWZpeCAnICsgdGhpcy5wcmVmaXhlc1tuc10gKyAnOiAnICsgdGhpcy5leHBsaWNpdFVSSShucykgKyAnLlxcbic7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyICsgJ1xcbic7XG4gICAgfVxuICAgIHZhciBwcmVmaXhEaXJlY3RpdmVzID0gcHJlZml4RGlyZWN0aXZlc01ldGhvZC5iaW5kKHRoaXMpO1xuICAgIC8vIEJvZHkgb2Ygc3RhdGVtZW50c1RvTjM6XG4gICAgdmFyIHRyZWUgPSBzdGF0ZW1lbnRMaXN0VG9UcmVlKHN0cyk7XG4gICAgcmV0dXJuIHByZWZpeERpcmVjdGl2ZXMoKSArIHRyZWVUb1N0cmluZyh0cmVlKTtcbiAgfTtcbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gQXRvbWljIFRlcm1zXG5cbiAgLy8gIERlYWwgd2l0aCB0ZXJtIGxldmVsIHRoaW5ncyBhbmQgbmVzdGluZyB3aXRoIG5vIGJub2RlIHN0cnVjdHVyZVxuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLmF0b21pY1Rlcm1Ub04zID0gZnVuY3Rpb24gYXRvbWljVGVybVRvTjMoZXhwciwgc3RhdHMpIHtcbiAgICBzd2l0Y2ggKGV4cHIudGVybVR5cGUpIHtcbiAgICAgIGNhc2UgJ0JsYW5rTm9kZSc6XG4gICAgICBjYXNlICdWYXJpYWJsZSc6XG4gICAgICAgIHJldHVybiBleHByLnRvTlQoKTtcbiAgICAgIGNhc2UgJ0xpdGVyYWwnOlxuICAgICAgICB2YXIgdmFsID0gZXhwci52YWx1ZS50b1N0cmluZygpOyAvLyBzaG91bGQgYmUgYSBzdHJpbmcgYWxyZWFkeVxuICAgICAgICBpZiAoZXhwci5kYXRhdHlwZSAmJiB0aGlzLmZsYWdzLmluZGV4T2YoJ3gnKSA8IDApIHtcbiAgICAgICAgICAvLyBTdXByZXNzIG5hdGl2ZSBudW1iZXJzXG4gICAgICAgICAgc3dpdGNoIChleHByLmRhdGF0eXBlLnVyaSkge1xuXG4gICAgICAgICAgICBjYXNlICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNpbnRlZ2VyJzpcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcblxuICAgICAgICAgICAgY2FzZSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZGVjaW1hbCc6XG4gICAgICAgICAgICAgIC8vIEluIHVydGxlIG11c3QgaGF2ZSBkb3RcbiAgICAgICAgICAgICAgaWYgKHZhbC5pbmRleE9mKCcuJykgPCAwKSB2YWwgKz0gJy4wJztcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcblxuICAgICAgICAgICAgY2FzZSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZG91YmxlJzpcbiAgICAgICAgICAgICAgLy8gTXVzdCBmb3JjZSB1c2Ugb2YgJ2UnXG4gICAgICAgICAgICAgIGlmICh2YWwuaW5kZXhPZignLicpIDwgMCkgdmFsICs9ICcuMCc7XG4gICAgICAgICAgICAgIGlmICh2YWwuaW5kZXhPZignZScpIDwgMCkgdmFsICs9ICdlMCc7XG4gICAgICAgICAgICAgIHJldHVybiB2YWw7XG5cbiAgICAgICAgICAgIGNhc2UgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW4nOlxuICAgICAgICAgICAgICByZXR1cm4gZXhwci52YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnN0cmluZ1RvTjMoZXhwci52YWx1ZSk7XG4gICAgICAgIGlmIChleHByLmxhbmd1YWdlKSB7XG4gICAgICAgICAgc3RyICs9ICdAJyArIGV4cHIubGFuZ3VhZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoIWV4cHIuZGF0YXR5cGUuZXF1YWxzKFhTRC5zdHJpbmcpKSB7XG4gICAgICAgICAgc3RyICs9ICdeXicgKyB0aGlzLmF0b21pY1Rlcm1Ub04zKGV4cHIuZGF0YXR5cGUsIHN0YXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgY2FzZSAnTmFtZWROb2RlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ltYm9sVG9OMyhleHByKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW50ZXJuYWw6IGF0b21pY1Rlcm1Ub04zIGNhbm5vdCBoYW5kbGUgJyArIGV4cHIgKyAnIG9mIHRlcm1UeXBlOiAnICsgZXhwci50ZXJtVHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vICBzdHJpbmdUb04zOiAgU3RyaW5nIGVzY2FwaW5nIGZvciBOM1xuXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUudmFsaWRQcmVmaXggPSBuZXcgUmVnRXhwKC9eW2EtekEtWl1bYS16QS1aMC05XSokLyk7XG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5mb3JiaWRkZW4xID0gbmV3IFJlZ0V4cCgvW1xcXFxcIlxcYlxcZlxcclxcdlxcdFxcblxcdTAwODAtXFx1ZmZmZl0vZ20pO1xuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLmZvcmJpZGRlbjMgPSBuZXcgUmVnRXhwKC9bXFxcXFwiXFxiXFxmXFxyXFx2XFx1MDA4MC1cXHVmZmZmXS9nbSk7XG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUuc3RyaW5nVG9OMyA9IGZ1bmN0aW9uIHN0cmluZ1RvTjMoc3RyLCBmbGFncykge1xuICAgIGlmICghZmxhZ3MpIGZsYWdzID0gJ2UnO1xuICAgIHZhciByZXMgPSAnJztcbiAgICB2YXIgaSwgaiwgaztcbiAgICB2YXIgZGVsaW07XG4gICAgdmFyIGZvcmJpZGRlbjtcbiAgICBpZiAoc3RyLmxlbmd0aCA+IDIwICYmIC8vIExvbmcgZW5vdWdoIHRvIG1ha2Ugc2Vuc2VcbiAgICBzdHIuc2xpY2UoLTEpICE9PSAnXCInICYmIC8vIGNvcm5lciBjYXNlJ1xuICAgIGZsYWdzLmluZGV4T2YoJ24nKSA8IDAgJiYgKCAvLyBGb3JjZSBzaW5nbGUgbGluZVxuICAgIHN0ci5pbmRleE9mKCdcXG4nKSA+IDAgfHwgc3RyLmluZGV4T2YoJ1wiJykgPiAwKSkge1xuICAgICAgZGVsaW0gPSAnXCJcIlwiJztcbiAgICAgIGZvcmJpZGRlbiA9IF9fU2VyaWFsaXplci5wcm90b3R5cGUuZm9yYmlkZGVuMztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsaW0gPSAnXCInO1xuICAgICAgZm9yYmlkZGVuID0gX19TZXJpYWxpemVyLnByb3RvdHlwZS5mb3JiaWRkZW4xO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDspIHtcbiAgICAgIGZvcmJpZGRlbi5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG0gPSBmb3JiaWRkZW4uZXhlYyhzdHIuc2xpY2UoaSkpO1xuICAgICAgaWYgKG0gPT0gbnVsbCkgYnJlYWs7XG4gICAgICBqID0gaSArIGZvcmJpZGRlbi5sYXN0SW5kZXggLSAxO1xuICAgICAgcmVzICs9IHN0ci5zbGljZShpLCBqKTtcbiAgICAgIHZhciBjaCA9IHN0cltqXTtcbiAgICAgIGlmIChjaCA9PT0gJ1wiJyAmJiBkZWxpbSA9PT0gJ1wiXCJcIicgJiYgc3RyLnNsaWNlKGosIGogKyAzKSAhPT0gJ1wiXCJcIicpIHtcbiAgICAgICAgcmVzICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgayA9ICdcXGJcXGZcXHJcXHRcXHZcXG5cXFxcXCInLmluZGV4T2YoY2gpOyAvLyBObyBlc2NhcGluZyBvZiBiZWxsICg3KT9cbiAgICAgICAgaWYgKGsgPj0gMCkge1xuICAgICAgICAgIHJlcyArPSAnXFxcXCcgKyAnYmZydHZuXFxcXFwiJ1trXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZScpID49IDApIHtcbiAgICAgICAgICAgIC8vIFVuaWNvZGUgZXNjYXBpbmcgaW4gc3RyaW5ncyBub3QgdW5peCBzdHlsZVxuICAgICAgICAgICAgcmVzICs9ICdcXFxcdScgKyAoJzAwMCcgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpKS5zbGljZSgtNCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vICdlJyBmbGFnXG4gICAgICAgICAgICByZXMgKz0gY2g7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpID0gaiArIDE7XG4gICAgfVxuICAgIHJldHVybiBkZWxpbSArIHJlcyArIHN0ci5zbGljZShpKSArIGRlbGltO1xuICB9O1xuICAvLyAgQSBzaW5nbGUgc3ltYm9sLCBlaXRoZXIgaW4gIDw+IG9yIG5hbWVzcGFjZSBub3RhdGlvblxuXG4gIF9fU2VyaWFsaXplci5wcm90b3R5cGUuc3ltYm9sVG9OMyA9IGZ1bmN0aW9uIHN5bWJvbFRvTjMoeCkge1xuICAgIC8vIGMuZi4gc3ltYm9sU3RyaW5nKCkgaW4gbm90YXRpb24zLnB5XG4gICAgdmFyIHVyaSA9IHgudXJpO1xuICAgIHZhciBqID0gdXJpLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaiA8IDAgJiYgdGhpcy5mbGFncy5pbmRleE9mKCcvJykgPCAwKSB7XG4gICAgICBqID0gdXJpLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgfVxuICAgIGlmIChqID49IDAgJiYgdGhpcy5mbGFncy5pbmRleE9mKCdwJykgPCAwICYmIChcbiAgICAvLyBDYW4gc3BsaXQgYXQgbmFtZXNwYWNlIGJ1dCBvbmx5IGlmIGh0dHBbc106IFVSSSBvciBmaWxlOiBvciB3c1tzXSAod2h5IG5vdCBvdGhlcnM/KVxuICAgIHVyaS5pbmRleE9mKCdodHRwJykgPT09IDAgfHwgdXJpLmluZGV4T2YoJ3dzJykgPT09IDAgfHwgdXJpLmluZGV4T2YoJ2ZpbGUnKSA9PT0gMCkpIHtcbiAgICAgIHZhciBjYW5TcGxpdCA9IHRydWU7XG4gICAgICBmb3IgKHZhciBrID0gaiArIDE7IGsgPCB1cmkubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgaWYgKF9fU2VyaWFsaXplci5wcm90b3R5cGUuX25vdE5hbWVDaGFycy5pbmRleE9mKHVyaVtrXSkgPj0gMCkge1xuICAgICAgICAgIGNhblNwbGl0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qXG4gICAgICAgICAgICBpZiAodXJpLnNsaWNlKDAsIGogKyAxKSA9PT0gdGhpcy5iYXNlICsgJyMnKSB7IC8vIGJhc2UtcmVsYXRpdmVcbiAgICAgICAgICAgICAgaWYgKGNhblNwbGl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHVyaS5zbGljZShqICsgMSkgLy8gYXNzdW1lIGRlYWZ1bHQgbnMgaXMgbG9jYWxcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzwjJyArIHVyaS5zbGljZShqICsgMSkgKyAnPidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgKi9cbiAgICAgIGlmIChjYW5TcGxpdCkge1xuICAgICAgICB2YXIgbG9jYWxpZCA9IHVyaS5zbGljZShqICsgMSk7XG4gICAgICAgIHZhciBuYW1lc3AgPSB1cmkuc2xpY2UoMCwgaiArIDEpO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0TmFtZXNwYWNlICYmIHRoaXMuZGVmYXVsdE5hbWVzcGFjZSA9PT0gbmFtZXNwICYmIHRoaXMuZmxhZ3MuaW5kZXhPZignZCcpIDwgMCkge1xuICAgICAgICAgIC8vIGQgLT4gc3VwcHJlc3MgZGVmYXVsdFxuICAgICAgICAgIGlmICh0aGlzLmZsYWdzLmluZGV4T2YoJ2snKSA+PSAwICYmIHRoaXMua2V5b3Jkcy5pbmRleE9mKGxvY2FsaWQpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsaWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnOicgKyBsb2NhbGlkO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMuY2hlY2tJbnRlZ3JpdHkoKSAvLyAgQEBAIFJlbW92ZSB3aGVuIG5vdCB0ZXN0aW5nXG4gICAgICAgIHZhciBwcmVmaXggPSB0aGlzLnByZWZpeGVzW25hbWVzcF07XG4gICAgICAgIGlmICghcHJlZml4KSBwcmVmaXggPSB0aGlzLm1ha2VVcFByZWZpeChuYW1lc3ApO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgdGhpcy5uYW1lc3BhY2VzVXNlZFtuYW1lc3BdID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJzonICsgbG9jYWxpZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYWxsIHRob3VnaCBpZiBjYW4ndCBkbyBxbmFtZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5leHBsaWNpdFVSSSh1cmkpO1xuICB9O1xuICAvLyBTdHJpbmcgZXNjYXBpbmcgdXRpbGl0aWVzXG5cbiAgZnVuY3Rpb24gaGV4aWZ5KHN0cikge1xuICAgIC8vIGFsc28gdXNlZCBpbiBwYXJzZXJcbiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cik7XG4gIH1cblxuICBmdW5jdGlvbiBiYWNrc2xhc2hVaWZ5KHN0cikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB2YXIgaztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKGsgPiA2NTUzNSkge1xuICAgICAgICByZXMgKz0gJ1xcXFxVJyArICgnMDAwMDAwMDAnICsgay50b1N0cmluZygxNikpLnNsaWNlKC04KTsgLy8gY29udmVydCB0byB1cHBlcj9cbiAgICAgIH0gZWxzZSBpZiAoayA+IDEyNikge1xuICAgICAgICByZXMgKz0gJ1xcXFx1JyArICgnMDAwMCcgKyBrLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzICs9IHN0cltpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBRdWFkIHN0b3JlIHNlcmlhbGl6YXRpb25cblxuICAvLyBAcGFyYS4gd3JpdGUgIC0gYSBmdW5jdGlvbiB0YWtpbmcgYSBzaW5nbGUgc3RyaW5nIHRvIGJlIG91dHB1dFxuICAvL1xuICBfX1NlcmlhbGl6ZXIucHJvdG90eXBlLndyaXRlU3RvcmUgPSBmdW5jdGlvbiAod3JpdGUpIHtcbiAgICB2YXIga2IgPSB0aGlzLnN0b3JlO1xuICAgIHZhciBmZXRjaGVyID0ga2IuZmV0Y2hlcjtcbiAgICB2YXIgc2Vzc2lvbiA9IGZldGNoZXIgJiYgZmV0Y2hlci5hcHBOb2RlO1xuXG4gICAgLy8gVGhlIGNvcmUgZGF0YVxuXG4gICAgdmFyIHNvdXJjZXMgPSB0aGlzLnN0b3JlLmluZGV4WzNdO1xuICAgIGZvciAodmFyIHMgaW4gc291cmNlcykge1xuICAgICAgLy8gLT4gYXNzdW1lIHdlIGNhbiB1c2UgLT4gYXMgc2hvcnQgZm9yIGxvZzpzZW1hbnRpY3NcbiAgICAgIHZhciBzb3VyY2UgPSBrYi5mcm9tTlQocyk7XG4gICAgICBpZiAoc2Vzc2lvbiAmJiBzb3VyY2Uuc2FtZVRlcm0oc2Vzc2lvbikpIGNvbnRpbnVlO1xuICAgICAgd3JpdGUoJ1xcbicgKyB0aGlzLmF0b21pY1Rlcm1Ub04zKHNvdXJjZSkgKyAnICcgKyB0aGlzLmF0b21pY1Rlcm1Ub04zKGtiLnN5bSgnaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL2xvZyNzZW1hbnRpY3MnKSkgKyAnIHsgJyArIHRoaXMuc3RhdGVtZW50c1RvTjMoa2Iuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHNvdXJjZSkpICsgJyB9LlxcbicpO1xuICAgIH1cblxuICAgIC8vIFRoZSBtZXRhZGF0YSBmcm9tIEhUVFAgaW50ZXJhY3Rpb25zOlxuXG4gICAga2Iuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwga2Iuc3ltKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI3JlcXVlc3RlZFVSSScpKS5tYXAoZnVuY3Rpb24gKHN0KSB7XG4gICAgICB3cml0ZSgnXFxuPCcgKyBzdC5vYmplY3QudmFsdWUgKyAnPiBsb2c6bWV0YWRhdGEge1xcbicpO1xuICAgICAgdmFyIHN0cyA9IGtiLnN0YXRlbWVudHNNYXRjaGluZyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzdC5zdWJqZWN0KTtcbiAgICAgIHdyaXRlKHRoaXMuc3RhdGVtZW50c1RvTjModGhpcy5zdGF0ZW1lbnRzVG9OMyhzdHMpKSk7XG4gICAgICB3cml0ZSgnfS5cXG4nKTtcbiAgICB9KTtcblxuICAgIC8vIEluZmVyZW5jZXMgd2UgaGF2ZSBtYWRlIG91cnNlbHZlcyBub3QgYXR0cmlidXRhYmxlIHRvIGFueW9uZSBlbHNlXG5cbiAgICB2YXIgbWV0YVNvdXJjZXMgPSBbXTtcbiAgICBpZiAoc2Vzc2lvbikgbWV0YVNvdXJjZXMucHVzaChzZXNzaW9uKTtcbiAgICB2YXIgbWV0YWRhdGEgPSBbXTtcbiAgICBtZXRhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgbWV0YWRhdGEgPSBtZXRhZGF0YS5jb25jYXQoa2Iuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHNvdXJjZSkpO1xuICAgIH0pO1xuICAgIHdyaXRlKHRoaXMuc3RhdGVtZW50c1RvTjMobWV0YWRhdGEpKTtcbiAgfTtcblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFhNTCBzZXJpYWxpemF0aW9uXG5cbiAgX19TZXJpYWxpemVyLnByb3RvdHlwZS5zdGF0ZW1lbnRzVG9YTUwgPSBmdW5jdGlvbiAoc3RzKSB7XG4gICAgdmFyIGluZGVudCA9IDQ7XG4gICAgdmFyIHdpZHRoID0gODA7XG5cbiAgICB2YXIgbmFtZXNwYWNlQ291bnRzID0gW107IC8vIHdoaWNoIGhhdmUgYmVlbiB1c2VkXG4gICAgbmFtZXNwYWNlQ291bnRzWydodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJ10gPSB0cnVlO1xuXG4gICAgdmFyIGxpUHJlZml4ID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNfJzsgLy8gcHJlZml4IGZvciBvcmRlcmVkIGxpc3QgaXRlbXNcblxuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBBcnJhbmdlIHRoZSBiaXRzIG9mIFhNTCB0ZXh0XG5cbiAgICB2YXIgc3BhY2VzID0gZnVuY3Rpb24gc3BhY2VzKG4pIHtcbiAgICAgIHZhciBzID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBzICs9ICcgJztcbiAgICAgIH1yZXR1cm4gcztcbiAgICB9O1xuXG4gICAgdmFyIFhNTHRyZWVUb0xpbmUgPSBmdW5jdGlvbiBYTUx0cmVlVG9MaW5lKHRyZWUpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYnJhbmNoID0gdHJlZVtpXTtcbiAgICAgICAgdmFyIHMyID0gdHlwZW9mIGJyYW5jaCA9PT0gJ3N0cmluZycgPyBicmFuY2ggOiBYTUx0cmVlVG9MaW5lKGJyYW5jaCk7XG4gICAgICAgIHN0ciArPSBzMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnQgYSBuZXN0ZWQgdHJlZSBvZiBsaXN0cyBhbmQgc3RyaW5ncyB0byBhIHN0cmluZ1xuICAgIHZhciBYTUx0cmVlVG9TdHJpbmcgPSBmdW5jdGlvbiBYTUx0cmVlVG9TdHJpbmcodHJlZSwgbGV2ZWwpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIHZhciBsaW5lO1xuICAgICAgdmFyIGxhc3RMZW5ndGggPSAxMDAwMDA7XG4gICAgICBpZiAoIWxldmVsKSBsZXZlbCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGJyYW5jaCA9IHRyZWVbaV07XG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBzdWJzdHIgPSBYTUx0cmVlVG9TdHJpbmcoYnJhbmNoLCBsZXZlbCArIDEpO1xuICAgICAgICAgIGlmIChzdWJzdHIubGVuZ3RoIDwgMTAgKiAod2lkdGggLSBpbmRlbnQgKiBsZXZlbCkgJiYgc3Vic3RyLmluZGV4T2YoJ1wiXCJcIicpIDwgMCkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgbWVzcyB1cCBtdWx0aWxpbmUgc3RyaW5nc1xuICAgICAgICAgICAgbGluZSA9IFhNTHRyZWVUb0xpbmUoYnJhbmNoKTtcbiAgICAgICAgICAgIGlmIChsaW5lLmxlbmd0aCA8IHdpZHRoIC0gaW5kZW50ICogbGV2ZWwpIHtcbiAgICAgICAgICAgICAgYnJhbmNoID0gJyAgICcgKyBsaW5lOyAvLyAgIEBAIEhhY2s6IHRyZWF0IGFzIHN0cmluZyBiZWxvd1xuICAgICAgICAgICAgICBzdWJzdHIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN1YnN0cikgbGFzdExlbmd0aCA9IDEwMDAwO1xuICAgICAgICAgIHN0ciArPSBzdWJzdHI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBicmFuY2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGxhc3RMZW5ndGggPCBpbmRlbnQgKiBsZXZlbCArIDQpIHtcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlXG4gICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgLTEpICsgJyAnICsgYnJhbmNoICsgJ1xcbic7XG4gICAgICAgICAgICBsYXN0TGVuZ3RoICs9IGJyYW5jaC5sZW5ndGggKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lID0gc3BhY2VzKGluZGVudCAqIGxldmVsKSArIGJyYW5jaDtcbiAgICAgICAgICAgIHN0ciArPSBsaW5lICsgJ1xcbic7XG4gICAgICAgICAgICBsYXN0TGVuZ3RoID0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Ugey8vIG5vdCBzdHJpbmdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhdGVtZW50TGlzdFRvWE1MVHJlZU1ldGhvZChzdGF0ZW1lbnRzKSB7XG4gICAgICB0aGlzLnN1Z2dlc3RQcmVmaXgoJ3JkZicsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJyk7XG4gICAgICB2YXIgc3RhdHMgPSB0aGlzLnJvb3RTdWJqZWN0cyhzdGF0ZW1lbnRzKTtcbiAgICAgIHZhciByb290cyA9IHN0YXRzLnJvb3RzO1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJvb3QgPSByb290c1tpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHN1YmplY3RYTUxUcmVlKHJvb3QsIHN0YXRzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgdmFyIHN0YXRlbWVudExpc3RUb1hNTFRyZWUgPSBzdGF0ZW1lbnRMaXN0VG9YTUxUcmVlTWV0aG9kLmJpbmQodGhpcyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVGb3JYTUwoc3RyKSB7XG4gICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiAnQEBAdW5kZWZpbmVkQEBAQCc7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1smPFwiXS9nLCBmdW5jdGlvbiAobSkge1xuICAgICAgICBzd2l0Y2ggKG1bMF0pIHtcbiAgICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgIHJldHVybiAnJmFtcDsnO1xuICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgcmV0dXJuICcmbHQ7JztcbiAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4gJyZxdW90Oyc7IC8vICdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsVVJJTWV0aG9kKHRlcm0pIHtcbiAgICAgIHJldHVybiBlc2NhcGVGb3JYTUwodGhpcy5iYXNlID8gVXRpbC51cmkucmVmVG8odGhpcy5iYXNlLCB0ZXJtLnVyaSkgOiB0ZXJtLnVyaSk7XG4gICAgfVxuICAgIHZhciByZWxVUkkgPSByZWxVUklNZXRob2QuYmluZCh0aGlzKTtcblxuICAgIC8vIFRoZSB0cmVlIGZvciBhIHN1YmplY3RcbiAgICBmdW5jdGlvbiBzdWJqZWN0WE1MVHJlZU1ldGhvZChzdWJqZWN0LCBzdGF0cykge1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciB0eXBlLCB0LCBzdCwgcHJlZDtcbiAgICAgIHZhciBzdHMgPSBzdGF0cy5zdWJqZWN0c1t0aGlzLnRvU3RyKHN1YmplY3QpXTsgLy8gcmVsZXZhbnQgc3RhdGVtZW50c1xuICAgICAgaWYgKHR5cGVvZiBzdHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGVtcHR5IGJub2RlXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVhNTFRyZWUoc3ViamVjdCwgc3RhdHMpO1xuICAgICAgfVxuXG4gICAgICAvLyBTb3J0IG9ubHkgb24gdGhlIHByZWRpY2F0ZSwgbGVhdmUgdGhlIG9yZGVyIGF0IG9iamVjdFxuICAgICAgLy8gbGV2ZWwgdW5kaXN0dXJiZWQuICBUaGlzIGxlYXZlcyBtdWx0aWxpbmd1YWwgY29udGVudCBpblxuICAgICAgLy8gdGhlIG9yZGVyIG9mIGVudHJ5IChmb3IgcGFydG5lciBsaXRlcmFscyksIHdoaWNoIGhlbHBzXG4gICAgICAvLyByZWFkYWJpbGl0eS5cbiAgICAgIC8vXG4gICAgICAvLyBGb3IgdGhlIHByZWRpY2F0ZSBzb3J0LCB3ZSBhdHRlbXB0IHRvIHNwbGl0IHRoZSB1cmlcbiAgICAgIC8vIGFzIGEgaGludCB0byB0aGUgc2VxdWVuY2VcbiAgICAgIHN0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciBhcCA9IGEucHJlZGljYXRlLnVyaTtcbiAgICAgICAgdmFyIGJwID0gYi5wcmVkaWNhdGUudXJpO1xuICAgICAgICBpZiAoYXAuc3Vic3RyaW5nKDAsIGxpUHJlZml4Lmxlbmd0aCkgPT09IGxpUHJlZml4IHx8IGJwLnN1YnN0cmluZygwLCBsaVByZWZpeC5sZW5ndGgpID09PSBsaVByZWZpeCkge1xuICAgICAgICAgIC8vIHdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBzb3J0aW5nIGxpc3QgaXRlbXNcbiAgICAgICAgICByZXR1cm4gYXAubG9jYWxlQ29tcGFyZShicCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXMgPSBhcC5zdWJzdHJpbmcobGlQcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJzID0gYnAuc3Vic3RyaW5nKGxpUHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIHZhciBhbiA9IHBhcnNlSW50KGFzLCAxMCk7XG4gICAgICAgIHZhciBibiA9IHBhcnNlSW50KGJzLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihhbikgfHwgaXNOYU4oYm4pIHx8IGFuICE9PSBhcyB8fCBibiAhPT0gYnMpIHtcbiAgICAgICAgICAvLyB3ZSBvbmx5IGNhcmUgYWJvdXQgaW50ZWdlcnNcbiAgICAgICAgICByZXR1cm4gYXAubG9jYWxlQ29tcGFyZShicCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW4gLSBibjtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdCA9IHN0c1tpXTtcbiAgICAgICAgLy8gbG9vayBmb3IgYSB0eXBlXG4gICAgICAgIGlmIChzdC5wcmVkaWNhdGUudXJpID09PSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnICYmICF0eXBlICYmIHN0Lm9iamVjdC50ZXJtVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICB0eXBlID0gc3Qub2JqZWN0O1xuICAgICAgICAgIGNvbnRpbnVlOyAvLyBkb24ndCBpbmNsdWRlIGl0IGFzIGEgY2hpbGQgZWxlbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VlIHdoZXRoZXIgcHJlZGljYXRlIGNhbiBiZSByZXBsYWNlZCB3aXRoIFwibGlcIlxuICAgICAgICBwcmVkID0gc3QucHJlZGljYXRlO1xuICAgICAgICBpZiAocHJlZC51cmkuc3Vic3RyKDAsIGxpUHJlZml4Lmxlbmd0aCkgPT09IGxpUHJlZml4KSB7XG4gICAgICAgICAgdmFyIG51bWJlciA9IHByZWQudXJpLnN1YnN0cihsaVByZWZpeC5sZW5ndGgpO1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGVzZSBhcmUgYWN0dWFsbHkgbnVtZXJpYyBsaXN0IGl0ZW1zXG4gICAgICAgICAgdmFyIGludE51bWJlciA9IHBhcnNlSW50KG51bWJlciwgMTApO1xuICAgICAgICAgIGlmIChudW1iZXIgPT09IGludE51bWJlci50b1N0cmluZygpKSB7XG4gICAgICAgICAgICAvLyB3YXMgbnVtZXJpYzsgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBvcmRlcmluZyBzaW5jZSB3ZSd2ZSBhbHJlYWR5XG4gICAgICAgICAgICAvLyBzb3J0ZWQgdGhlIHN0YXRlbWVudHNcbiAgICAgICAgICAgIHByZWQgPSBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0ID0gcW5hbWUocHJlZCk7XG4gICAgICAgIHN3aXRjaCAoc3Qub2JqZWN0LnRlcm1UeXBlKSB7XG4gICAgICAgICAgY2FzZSAnQmxhbmtOb2RlJzpcbiAgICAgICAgICAgIGlmIChzdGF0cy5pbmNvbWluZ1tzdC5vYmplY3RdLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyB0aGVyZSBzaG91bGQgYWx3YXlzIGJlIHNvbWV0aGluZyBpbiB0aGUgaW5jb21pbmcgYXJyYXkgZm9yIGEgYm5vZGVcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFsnPCcgKyB0ICsgJyByZGY6cGFyc2VUeXBlPVwiUmVzb3VyY2VcIj4nLCBzdWJqZWN0WE1MVHJlZShzdC5vYmplY3QsIHN0YXRzKSwgJzwvJyArIHQgKyAnPiddKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChbJzwnICsgdCArICcgcmRmOm5vZGVJRD1cIicgKyBzdC5vYmplY3QudG9OVCgpLnNsaWNlKDIpICsgJ1wiLz4nXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdOYW1lZE5vZGUnOlxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFsnPCcgKyB0ICsgJyByZGY6cmVzb3VyY2U9XCInICsgcmVsVVJJKHN0Lm9iamVjdCkgKyAnXCIvPiddKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0xpdGVyYWwnOlxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFsnPCcgKyB0ICsgKHN0Lm9iamVjdC5kYXRhdHlwZS5lcXVhbHMoWFNELnN0cmluZykgPyAnJyA6ICcgcmRmOmRhdGF0eXBlPVwiJyArIGVzY2FwZUZvclhNTChzdC5vYmplY3QuZGF0YXR5cGUudXJpKSArICdcIicpICsgKHN0Lm9iamVjdC5sYW5ndWFnZSA/ICcgeG1sOmxhbmc9XCInICsgc3Qub2JqZWN0Lmxhbmd1YWdlICsgJ1wiJyA6ICcnKSArICc+JyArIGVzY2FwZUZvclhNTChzdC5vYmplY3QudmFsdWUpICsgJzwvJyArIHQgKyAnPiddKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NvbGxlY3Rpb24nOlxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFsnPCcgKyB0ICsgJyByZGY6cGFyc2VUeXBlPVwiQ29sbGVjdGlvblwiPicsIGNvbGxlY3Rpb25YTUxUcmVlKHN0Lm9iamVjdCwgc3RhdHMpLCAnPC8nICsgdCArICc+J10pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNlcmlhbGl6ZSBvYmplY3Qgb2YgdHlwZSBcIiArIHN0Lm9iamVjdC50ZXJtVHlwZSArICcgaW50byBYTUwnKTtcbiAgICAgICAgfSAvLyBzd2l0Y2hcbiAgICAgIH1cblxuICAgICAgdmFyIHRhZyA9IHR5cGUgPyBxbmFtZSh0eXBlKSA6ICdyZGY6RGVzY3JpcHRpb24nO1xuXG4gICAgICB2YXIgYXR0cnMgPSAnJztcbiAgICAgIGlmIChzdWJqZWN0LnRlcm1UeXBlID09PSAnQmxhbmtOb2RlJykge1xuICAgICAgICBpZiAoIXN0YXRzLmluY29taW5nW3N1YmplY3RdIHx8IHN0YXRzLmluY29taW5nW3N1YmplY3RdLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgIC8vIG5vdCBhbiBhbm9ueW1vdXMgYm5vZGVcbiAgICAgICAgICBhdHRycyA9ICcgcmRmOm5vZGVJRD1cIicgKyBzdWJqZWN0LnRvTlQoKS5zbGljZSgyKSArICdcIic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzID0gJyByZGY6YWJvdXQ9XCInICsgcmVsVVJJKHN1YmplY3QpICsgJ1wiJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFsnPCcgKyB0YWcgKyBhdHRycyArICc+J10uY29uY2F0KFtyZXN1bHRzXSkuY29uY2F0KFsnPC8nICsgdGFnICsgJz4nXSk7XG4gICAgfVxuXG4gICAgdmFyIHN1YmplY3RYTUxUcmVlID0gc3ViamVjdFhNTFRyZWVNZXRob2QuYmluZCh0aGlzKTtcblxuICAgIGZ1bmN0aW9uIGNvbGxlY3Rpb25YTUxUcmVlKHN1YmplY3QsIHN0YXRzKSB7XG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YmplY3QuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzLnB1c2goc3ViamVjdFhNTFRyZWUoc3ViamVjdC5lbGVtZW50c1tpXSwgc3RhdHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVGhlIHByb3BlcnR5IHRyZWUgZm9yIGEgc2luZ2xlIHN1YmplY3Qgb3IgYW5vbnltb3Mgbm9kZVxuICAgIGZ1bmN0aW9uIHByb3BlcnR5WE1MVHJlZU1ldGhvZChzdWJqZWN0LCBzdGF0cykge1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciBzdHMgPSBzdGF0cy5zdWJqZWN0c1t0aGlzLnRvU3RyKHN1YmplY3QpXTsgLy8gcmVsZXZhbnQgc3RhdGVtZW50c1xuICAgICAgaWYgKCFzdHMpIHJldHVybiByZXN1bHRzOyAvLyBObyByZWxldmFudCBzdGF0ZW1lbnRzXG4gICAgICBzdHMuc29ydCgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0ID0gc3RzW2ldO1xuICAgICAgICBzd2l0Y2ggKHN0Lm9iamVjdC50ZXJtVHlwZSkge1xuICAgICAgICAgIGNhc2UgJ0JsYW5rTm9kZSc6XG4gICAgICAgICAgICBpZiAoc3RhdHMucm9vdHNIYXNoW3N0Lm9iamVjdC50b05UKCldKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgYm5vZGUgaGFzIGJlZW4gZG9uZSBhcyBhIHJvb3QgLS0gbm8gY29udGVudCBoZXJlIEBAIHdoYXQgYm91dCBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChbJzwnICsgcW5hbWUoc3QucHJlZGljYXRlKSArICcgcmRmOm5vZGVJRD1cIicgKyBzdC5vYmplY3QudG9OVCgpLnNsaWNlKDIpICsgJ1wiPicsICc8LycgKyBxbmFtZShzdC5wcmVkaWNhdGUpICsgJz4nXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoWyc8JyArIHFuYW1lKHN0LnByZWRpY2F0ZSkgKyAnIHJkZjpwYXJzZVR5cGU9XCJSZXNvdXJjZVwiPicsIHByb3BlcnR5WE1MVHJlZShzdC5vYmplY3QsIHN0YXRzKSwgJzwvJyArIHFuYW1lKHN0LnByZWRpY2F0ZSkgKyAnPiddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ05hbWVkTm9kZSc6XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoWyc8JyArIHFuYW1lKHN0LnByZWRpY2F0ZSkgKyAnIHJkZjpyZXNvdXJjZT1cIicgKyByZWxVUkkoc3Qub2JqZWN0KSArICdcIi8+J10pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnTGl0ZXJhbCc6XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoWyc8JyArIHFuYW1lKHN0LnByZWRpY2F0ZSkgKyAoc3Qub2JqZWN0LmRhdGF0eXBlLmVxdWFscyhYU0Quc3RyaW5nKSA/ICcnIDogJyByZGY6ZGF0YXR5cGU9XCInICsgZXNjYXBlRm9yWE1MKHN0Lm9iamVjdC5kYXRhdHlwZS52YWx1ZSkgKyAnXCInKSArIChzdC5vYmplY3QubGFuZ3VhZ2UgPyAnIHhtbDpsYW5nPVwiJyArIHN0Lm9iamVjdC5sYW5ndWFnZSArICdcIicgOiAnJykgKyAnPicgKyBlc2NhcGVGb3JYTUwoc3Qub2JqZWN0LnZhbHVlKSArICc8LycgKyBxbmFtZShzdC5wcmVkaWNhdGUpICsgJz4nXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdDb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChbJzwnICsgcW5hbWUoc3QucHJlZGljYXRlKSArICcgcmRmOnBhcnNlVHlwZT1cIkNvbGxlY3Rpb25cIj4nLCBjb2xsZWN0aW9uWE1MVHJlZShzdC5vYmplY3QsIHN0YXRzKSwgJzwvJyArIHFuYW1lKHN0LnByZWRpY2F0ZSkgKyAnPiddKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzZXJpYWxpemUgb2JqZWN0IG9mIHR5cGUgXCIgKyBzdC5vYmplY3QudGVybVR5cGUgKyAnIGludG8gWE1MJyk7XG4gICAgICAgIH0gLy8gc3dpdGNoXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgdmFyIHByb3BlcnR5WE1MVHJlZSA9IHByb3BlcnR5WE1MVHJlZU1ldGhvZC5iaW5kKHRoaXMpO1xuXG4gICAgZnVuY3Rpb24gcW5hbWVNZXRob2QodGVybSkge1xuICAgICAgdmFyIHVyaSA9IHRlcm0udXJpO1xuXG4gICAgICB2YXIgaiA9IHVyaS5pbmRleE9mKCcjJyk7XG4gICAgICBpZiAoaiA8IDAgJiYgdGhpcy5mbGFncy5pbmRleE9mKCcvJykgPCAwKSB7XG4gICAgICAgIGogPSB1cmkubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgIH1cbiAgICAgIGlmIChqIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbWFrZSBxbmFtZSBvdXQgb2YgPCcgKyB1cmkgKyAnPicpO1xuXG4gICAgICBmb3IgKHZhciBrID0gaiArIDE7IGsgPCB1cmkubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgaWYgKF9fU2VyaWFsaXplci5wcm90b3R5cGUuX25vdE5hbWVDaGFycy5pbmRleE9mKHVyaVtrXSkgPj0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgXCInICsgdXJpW2tdICsgJ1wiIGNhbm5vdCBiZSBpbiBYTUwgcW5hbWUgZm9yIFVSSTogJyArIHVyaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBsb2NhbGlkID0gdXJpLnNsaWNlKGogKyAxKTtcbiAgICAgIHZhciBuYW1lc3AgPSB1cmkuc2xpY2UoMCwgaiArIDEpO1xuICAgICAgaWYgKHRoaXMuZGVmYXVsdE5hbWVzcGFjZSAmJiB0aGlzLmRlZmF1bHROYW1lc3BhY2UgPT09IG5hbWVzcCAmJiB0aGlzLmZsYWdzLmluZGV4T2YoJ2QnKSA8IDApIHtcbiAgICAgICAgLy8gZCAtPiBzdXBwcmVzcyBkZWZhdWx0XG4gICAgICAgIHJldHVybiBsb2NhbGlkO1xuICAgICAgfVxuICAgICAgdmFyIHByZWZpeCA9IHRoaXMucHJlZml4ZXNbbmFtZXNwXTtcbiAgICAgIGlmICghcHJlZml4KSBwcmVmaXggPSB0aGlzLm1ha2VVcFByZWZpeChuYW1lc3ApO1xuICAgICAgbmFtZXNwYWNlQ291bnRzW25hbWVzcF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHByZWZpeCArICc6JyArIGxvY2FsaWQ7XG4gICAgfVxuICAgIHZhciBxbmFtZSA9IHFuYW1lTWV0aG9kLmJpbmQodGhpcyk7XG5cbiAgICAvLyBCb2R5IG9mIHRvWE1MOlxuXG4gICAgdmFyIHRyZWUgPSBzdGF0ZW1lbnRMaXN0VG9YTUxUcmVlKHN0cyk7XG4gICAgdmFyIHN0ciA9ICc8cmRmOlJERic7XG4gICAgaWYgKHRoaXMuZGVmYXVsdE5hbWVzcGFjZSkge1xuICAgICAgc3RyICs9ICcgeG1sbnM9XCInICsgZXNjYXBlRm9yWE1MKHRoaXMuZGVmYXVsdE5hbWVzcGFjZSkgKyAnXCInO1xuICAgIH1cbiAgICBmb3IgKHZhciBucyBpbiBuYW1lc3BhY2VDb3VudHMpIHtcbiAgICAgIGlmICghbmFtZXNwYWNlQ291bnRzLmhhc093blByb3BlcnR5KG5zKSkgY29udGludWU7XG4gICAgICAvLyBSZWwgdXJpcyBpbiB4bWwgbnMgaXMgbm90IHN0cmljdGx5IGFsbG93ZWQgaW4gdGhlIFhNTE5TIHNwZWMgYnV0IG5lZWRlZCBpbiBwcmFjdGljZSBvZnRlblxuICAgICAgdmFyIG5zMiA9IHRoaXMuYmFzZSAmJiB0aGlzLmZsYWdzLmluY2x1ZGVzKCd6JykgPyBVdGlsLnVyaS5yZWZUbyh0aGlzLmJhc2UsIG5zKSA6IG5zO1xuICAgICAgc3RyICs9ICdcXG4geG1sbnM6JyArIHRoaXMucHJlZml4ZXNbbnNdICsgJz1cIicgKyBlc2NhcGVGb3JYTUwobnMyKSArICdcIic7XG4gICAgfVxuICAgIHN0ciArPSAnPic7XG5cbiAgICB2YXIgdHJlZTIgPSBbc3RyLCB0cmVlLCAnPC9yZGY6UkRGPiddOyAvLyBAQCBuYW1lc3BhY2UgZGVjbHJhdGlvbnNcbiAgICByZXR1cm4gWE1MdHJlZVRvU3RyaW5nKHRyZWUyLCAtMSk7XG4gIH07IC8vIEVuZCBAQCBib2R5XG5cbiAgdmFyIFNlcmlhbGl6ZXIgPSBmdW5jdGlvbiBTZXJpYWxpemVyKHN0b3JlKSB7XG4gICAgcmV0dXJuIG5ldyBfX1NlcmlhbGl6ZXIoc3RvcmUpO1xuICB9O1xuICByZXR1cm4gU2VyaWFsaXplcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJpYWxpemVyOyIsIid1c2Ugc3RyaWN0JztcblxuLy8gQ29udmVydGluZyBiZXR3ZWVuIFNQQVJRTCBxdWVyaWVzIGFuZCB0aGUgJHJkZiBxdWVyeSBBUElcbi8qXG5cbmZ1bmN0aW9uIFNRdWVyeSAoKSB7XG4gIHRoaXMudGVybXMgPSBbXVxuICByZXR1cm4gdGhpc1xufVxuXG5TVGVybS5wcm90b3R5cGUudG9TdHJpbmcgPSBTVGVybS52YWxcblNRdWVyeS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHN0cikge3RoaXMudGVybXMucHVzaCgpfSovXG5cbnZhciBsb2cgPSByZXF1aXJlKCcuL2xvZycpO1xudmFyIFF1ZXJ5ID0gcmVxdWlyZSgnLi9xdWVyeScpLlF1ZXJ5O1xuLy8gY29uc3QgRmV0Y2hlciA9IHJlcXVpcmUoJy4vZmV0Y2hlcicpXG5cbi8qKlxuICogQFNQQVJRTDogU1BBUlFMIHRleHQgdGhhdCBpcyBjb252ZXJ0ZWQgdG8gYSBxdWVyeSBvYmplY3Qgd2hpY2ggaXMgcmV0dXJuZWQuXG4gKiBAdGVzdE1vZGU6IHRlc3RpbmcgZmxhZy4gUHJldmVudHMgbG9hZGluZyBvZiBzb3VyY2VzLlxuICovXG5mdW5jdGlvbiBTUEFSUUxUb1F1ZXJ5KFNQQVJRTCwgdGVzdE1vZGUsIGtiKSB7XG4gIC8vIEFKQVJfQ2xlYXJUYWJsZSgpXG4gIHZhciB2YXJpYWJsZUhhc2ggPSBbXTtcbiAgZnVuY3Rpb24gbWFrZVZhcihuYW1lKSB7XG4gICAgaWYgKHZhcmlhYmxlSGFzaFtuYW1lXSkge1xuICAgICAgcmV0dXJuIHZhcmlhYmxlSGFzaFtuYW1lXTtcbiAgICB9XG4gICAgdmFyIG5ld1ZhciA9IGtiLnZhcmlhYmxlKG5hbWUpO1xuICAgIHZhcmlhYmxlSGFzaFtuYW1lXSA9IG5ld1ZhcjtcbiAgICByZXR1cm4gbmV3VmFyO1xuICB9XG5cbiAgLy8gdGVybSB0eXBlIGZ1bmN0aW9uc1xuICBmdW5jdGlvbiBpc1JlYWxUZXh0KHRlcm0pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRlcm0gPT09ICdzdHJpbmcnICYmIHRlcm0ubWF0Y2goL1teIFxcblxcdF0vKTtcbiAgfVxuICBmdW5jdGlvbiBpc1Zhcih0ZXJtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0ZXJtID09PSAnc3RyaW5nJyAmJiB0ZXJtLm1hdGNoKC9eW1xcP1xcJF0vKTtcbiAgfVxuICBmdW5jdGlvbiBmaXhTeW1ib2xCcmFja2V0cyh0ZXJtKSB7XG4gICAgaWYgKHR5cGVvZiB0ZXJtID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRlcm0ucmVwbGFjZSgvXiZsdDsvLCAnPCcpLnJlcGxhY2UoLyZndDskLywgJz4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlcm07XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHRlcm0pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRlcm0gPT09ICdzdHJpbmcnICYmIHRlcm0ubWF0Y2goL148W14+XSo+JC8pO1xuICB9XG4gIGZ1bmN0aW9uIGlzQm5vZGUodGVybSkge1xuICAgIHJldHVybiB0eXBlb2YgdGVybSA9PT0gJ3N0cmluZycgJiYgKHRlcm0ubWF0Y2goL15fOi8pIHx8IHRlcm0ubWF0Y2goL14kLykpO1xuICB9XG4gIGZ1bmN0aW9uIGlzUHJlZml4KHRlcm0pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRlcm0gPT09ICdzdHJpbmcnICYmIHRlcm0ubWF0Y2goLzokLyk7XG4gIH1cbiAgZnVuY3Rpb24gaXNQcmVmaXhlZFN5bWJvbCh0ZXJtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0ZXJtID09PSAnc3RyaW5nJyAmJiB0ZXJtLm1hdGNoKC9eOnxeW15fXVteOl0qOi8pO1xuICB9XG4gIGZ1bmN0aW9uIGdldFByZWZpeCh0ZXJtKSB7XG4gICAgdmFyIGEgPSB0ZXJtLnNwbGl0KCc6Jyk7XG4gICAgcmV0dXJuIGFbMF07XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KHRlcm0pIHtcbiAgICB2YXIgYSA9IHRlcm0uc3BsaXQoJzonKTtcbiAgICByZXR1cm4gYVsxXTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVCcmFja2V0cyh0ZXJtKSB7XG4gICAgaWYgKGlzU3ltYm9sKHRlcm0pKSB7XG4gICAgICByZXR1cm4gdGVybS5zbGljZSgxLCB0ZXJtLmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVybTtcbiAgICB9XG4gIH1cbiAgLy8gdGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBhbmQgTGl0ZXJhbHMgaW4gdGhlIHBsYWNlIG9mIGxpdGVyYWxzXG4gIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbHMoc3RyKSB7XG4gICAgLy8gdmFyIHNpbiA9IChzdHIuaW5kZXhPZigvWyBcXG5dXFwnLyk9PS0xKT9udWxsOnN0ci5pbmRleE9mKC9bIFxcbl1cXCcvKSwgZG91YiA9IChzdHIuaW5kZXhPZigvWyBcXG5dXFxcIi8pPT0tMSk/bnVsbDpzdHIuaW5kZXhPZigvWyBcXG5dXFxcIi8pXG4gICAgdmFyIHNpbiA9IHN0ci5pbmRleE9mKFwiJ1wiKSA9PT0gLTEgPyBudWxsIDogc3RyLmluZGV4T2YoXCInXCIpO1xuICAgIHZhciBkb3ViID0gc3RyLmluZGV4T2YoJ1wiJykgPT09IC0xID8gbnVsbCA6IHN0ci5pbmRleE9mKCdcIicpO1xuICAgIC8vIGFsZXJ0KFwiUzogXCIrc2luK1wiIEQ6IFwiK2RvdWIpXG4gICAgaWYgKCFzaW4gJiYgIWRvdWIpIHtcbiAgICAgIHZhciBhID0gbmV3IEFycmF5KDEpO1xuICAgICAgYVswXSA9IHN0cjtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KDIpO1xuICAgIHZhciBicjtcbiAgICB2YXIgaW5kO1xuICAgIGlmICghc2luIHx8IGRvdWIgJiYgZG91YiA8IHNpbikge1xuICAgICAgYnIgPSAnXCInO1xuICAgICAgaW5kID0gZG91YjtcbiAgICB9IGVsc2UgaWYgKCFkb3ViIHx8IHNpbiAmJiBzaW4gPCBkb3ViKSB7XG4gICAgICBiciA9IFwiJ1wiO1xuICAgICAgaW5kID0gc2luO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZXJyb3IoJ1NRQVJRTCBRVUVSWSBPT1BTIScpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmVzWzBdID0gc3RyLnNsaWNlKDAsIGluZCk7XG4gICAgdmFyIGVuZCA9IHN0ci5zbGljZShpbmQgKyAxKS5pbmRleE9mKGJyKTtcbiAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgbG9nLmVycm9yKCdTUEFSUUwgcGFyc2luZyBlcnJvcjogbm8gbWF0Y2hpbmcgcGFyZW50aGVzZXMgaW4gbGl0ZXJhbCAnICsgc3RyKTtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIC8vIGFsZXJ0KHN0ci5zbGljZShlbmQgKyBpbmQgKyAyKS5tYXRjaCgvXlxcXlxcXi8pKVxuICAgIHZhciBlbmQyO1xuICAgIGlmIChzdHIuc2xpY2UoZW5kICsgaW5kICsgMikubWF0Y2goL15cXF5cXF4vKSkge1xuICAgICAgZW5kMiA9IHN0ci5zbGljZShlbmQgKyBpbmQgKyAyKS5pbmRleE9mKCcgJyk7XG4gICAgICAvLyBhbGVydChlbmQyKVxuICAgICAgcmVzWzFdID0ga2IubGl0ZXJhbChzdHIuc2xpY2UoaW5kICsgMSwgaW5kICsgMSArIGVuZCksICcnLCBrYi5zeW0ocmVtb3ZlQnJhY2tldHMoc3RyLnNsaWNlKGluZCArIDQgKyBlbmQsIGluZCArIDIgKyBlbmQgKyBlbmQyKSkpKTtcbiAgICAgIC8vIGFsZXJ0KHJlc1sxXS5kYXRhdHlwZS51cmkpXG4gICAgICByZXMgPSByZXMuY29uY2F0KHBhcnNlTGl0ZXJhbHMoc3RyLnNsaWNlKGVuZCArIGluZCArIDMgKyBlbmQyKSkpO1xuICAgIH0gZWxzZSBpZiAoc3RyLnNsaWNlKGVuZCArIGluZCArIDIpLm1hdGNoKC9eQC8pKSB7XG4gICAgICBlbmQyID0gc3RyLnNsaWNlKGVuZCArIGluZCArIDIpLmluZGV4T2YoJyAnKTtcbiAgICAgIC8vIGFsZXJ0KGVuZDIpXG4gICAgICByZXNbMV0gPSBrYi5saXRlcmFsKHN0ci5zbGljZShpbmQgKyAxLCBpbmQgKyAxICsgZW5kKSwgc3RyLnNsaWNlKGluZCArIDMgKyBlbmQsIGluZCArIDIgKyBlbmQgKyBlbmQyKSwgbnVsbCk7XG4gICAgICAvLyBhbGVydChyZXNbMV0uZGF0YXR5cGUudXJpKVxuICAgICAgcmVzID0gcmVzLmNvbmNhdChwYXJzZUxpdGVyYWxzKHN0ci5zbGljZShlbmQgKyBpbmQgKyAyICsgZW5kMikpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzWzFdID0ga2IubGl0ZXJhbChzdHIuc2xpY2UoaW5kICsgMSwgaW5kICsgMSArIGVuZCksICcnLCBudWxsKTtcbiAgICAgIGxvZy5pbmZvKCdMaXRlcmFsIGZvdW5kOiAnICsgcmVzWzFdKTtcbiAgICAgIHJlcyA9IHJlcy5jb25jYXQocGFyc2VMaXRlcmFscyhzdHIuc2xpY2UoZW5kICsgaW5kICsgMikpKTsgLy8gZmluZHMgYW55IG90aGVyIGxpdGVyYWxzXG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzcGFjZURlbGltaXQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcKC9nLCAnICggJykucmVwbGFjZSgvXFwpL2csICcgKSAnKS5yZXBsYWNlKC88L2csICcgPCcpLnJlcGxhY2UoLz4vZywgJz4gJykucmVwbGFjZSgvey9nLCAnIHsgJykucmVwbGFjZSgvfS9nLCAnIH0gJykucmVwbGFjZSgvW1xcdFxcblxccl0vZywgJyAnKS5yZXBsYWNlKC87IC9nLCAnIDsgJykucmVwbGFjZSgvXFwuIC9nLCAnIC4gJykucmVwbGFjZSgvLCAvZywgJyAsICcpO1xuICAgIGxvZy5pbmZvKCdOZXcgc3RyIGludG8gc3BhY2VEZWxpbWl0OiBcXG4nICsgc3RyKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGJyID0gc3RyLnNwbGl0KCcgJyk7XG4gICAgZm9yICh2YXIgeCBpbiBicikge1xuICAgICAgaWYgKGlzUmVhbFRleHQoYnJbeF0pKSB7XG4gICAgICAgIHJlcyA9IHJlcy5jb25jYXQoYnJbeF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZUtleXdvcmRzKGlucHV0KSB7XG4gICAgdmFyIHN0cmFyciA9IGlucHV0O1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgc3RyYXJyLmxlbmd0aDsgeCsrKSB7XG4gICAgICBpZiAoc3RyYXJyW3hdID09PSAnYScpIHtcbiAgICAgICAgc3RyYXJyW3hdID0gJzxodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjdHlwZT4nO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmFyclt4XSA9PT0gJ2lzJyAmJiBzdHJhcnJbeCArIDJdID09PSAnb2YnKSB7XG4gICAgICAgIHN0cmFyci5zcGxpY2UoeCwgMSk7XG4gICAgICAgIHN0cmFyci5zcGxpY2UoeCArIDEsIDEpO1xuICAgICAgICB2YXIgcyA9IHN0cmFyclt4IC0gMV07XG4gICAgICAgIHN0cmFyclt4IC0gMV0gPSBzdHJhcnJbeCArIDFdO1xuICAgICAgICBzdHJhcnJbeCArIDFdID0gcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvVGVybXMoaW5wdXQpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCBpbnB1dC5sZW5ndGg7IHgrKykge1xuICAgICAgaWYgKHR5cGVvZiBpbnB1dFt4XSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzW3hdID0gaW5wdXRbeF07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaW5wdXRbeF0gPSBmaXhTeW1ib2xCcmFja2V0cyhpbnB1dFt4XSk7XG4gICAgICBpZiAoaXNWYXIoaW5wdXRbeF0pKSB7XG4gICAgICAgIHJlc1t4XSA9IG1ha2VWYXIoaW5wdXRbeF0uc2xpY2UoMSkpO1xuICAgICAgfSBlbHNlIGlmIChpc0Jub2RlKGlucHV0W3hdKSkge1xuICAgICAgICBsb2cuaW5mbyhpbnB1dFt4XSArICcgd2FzIGlkZW50aWZpZWQgYXMgYSBibm9kZS4nKTtcbiAgICAgICAgcmVzW3hdID0ga2IuYm5vZGUoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTeW1ib2woaW5wdXRbeF0pKSB7XG4gICAgICAgIGxvZy5pbmZvKGlucHV0W3hdICsgJyB3YXMgaWRlbnRpZmllZCBhcyBhIHN5bWJvbC4nKTtcbiAgICAgICAgcmVzW3hdID0ga2Iuc3ltKHJlbW92ZUJyYWNrZXRzKGlucHV0W3hdKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUHJlZml4ZWRTeW1ib2woaW5wdXRbeF0pKSB7XG4gICAgICAgIGxvZy5pbmZvKGlucHV0W3hdICsgJyB3YXMgaWRlbnRpZmllZCBhcyBhIHByZWZpeGVkIHN5bWJvbCcpO1xuICAgICAgICBpZiAocHJlZml4ZXNbZ2V0UHJlZml4KGlucHV0W3hdKV0pIHtcbiAgICAgICAgICByZXNbeF0gPSBrYi5zeW0oaW5wdXRbeF0gPSBwcmVmaXhlc1tnZXRQcmVmaXgoaW5wdXRbeF0pXSArIGdldFN1ZmZpeChpbnB1dFt4XSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy5lcnJvcignU1BBUlFMIGVycm9yOiAnICsgaW5wdXRbeF0gKyAnIHdpdGggcHJlZml4ICcgKyBnZXRQcmVmaXgoaW5wdXRbeF0pICsgJyBkb2VzIG5vdCBoYXZlIGEgY29ycmVjdCBwcmVmaXggZW50cnkuJyk7XG4gICAgICAgICAgcmVzW3hdID0gaW5wdXRbeF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1t4XSA9IGlucHV0W3hdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5pemUoc3RyKSB7XG4gICAgdmFyIHRva2VuMSA9IHBhcnNlTGl0ZXJhbHMoc3RyKTtcbiAgICB2YXIgdG9rZW4yID0gW107XG4gICAgZm9yICh2YXIgeCBpbiB0b2tlbjEpIHtcbiAgICAgIGlmICh0eXBlb2YgdG9rZW4xW3hdID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbjIgPSB0b2tlbjIuY29uY2F0KHNwYWNlRGVsaW1pdCh0b2tlbjFbeF0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuMiA9IHRva2VuMi5jb25jYXQodG9rZW4xW3hdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdG9rZW4yID0gcmVwbGFjZUtleXdvcmRzKHRva2VuMik7XG4gICAgbG9nLmluZm8oJ1NQQVJRTCBUb2tlbnM6ICcgKyB0b2tlbjIpO1xuICAgIHJldHVybiB0b2tlbjI7XG4gIH1cblxuICAvLyBDQVNFLUlOU0VOU0lUSVZFXG4gIGZ1bmN0aW9uIGFycmF5SW5kZXhPZihzdHIsIGFycikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHlwZW9mIGFycltpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYXJyW2ldLnRvTG93ZXJDYXNlKCkgPT09IHN0ci50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBsb2cud2FybihcIk5vIGluc3RhbmNlIG9mIFwiK3N0citcIiBpbiBhcnJheSBcIithcnIpXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDQVNFLUlOU0VOU0lUSVZFXG4gIGZ1bmN0aW9uIGFycmF5SW5kaWNlc09mKHN0ciwgYXJyKSB7XG4gICAgdmFyIGluZCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHlwZW9mIGFycltpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYXJyW2ldLnRvTG93ZXJDYXNlKCkgPT09IHN0ci50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGluZC5wdXNoKGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmFycyhpbnB1dCwgcXVlcnkpIHtcbiAgICBsb2cuaW5mbygnU1BBUlFMIHZhcnM6ICcgKyBpbnB1dCk7XG4gICAgZm9yICh2YXIgeCBpbiBpbnB1dCkge1xuICAgICAgaWYgKGlzVmFyKGlucHV0W3hdKSkge1xuICAgICAgICBsb2cuaW5mbygnQWRkZWQgJyArIGlucHV0W3hdICsgJyB0byBxdWVyeSB2YXJpYWJsZXMgZnJvbSBTUEFSUUwnKTtcbiAgICAgICAgdmFyIHYgPSBtYWtlVmFyKGlucHV0W3hdLnNsaWNlKDEpKTtcbiAgICAgICAgcXVlcnkudmFycy5wdXNoKHYpO1xuICAgICAgICB2LmxhYmVsID0gaW5wdXRbeF0uc2xpY2UoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cud2FybignSW5jb3JyZWN0IFNQQVJRTCB2YXJpYWJsZSBpbiBTRUxFQ1Q6ICcgKyBpbnB1dFt4XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UHJlZml4RGVjbGFyYXRpb25zKGlucHV0KSB7XG4gICAgdmFyIHByZWZJbmQgPSBhcnJheUluZGljZXNPZignUFJFRklYJywgaW5wdXQpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpIGluIHByZWZJbmQpIHtcbiAgICAgIHZhciBhID0gaW5wdXRbcHJlZkluZFtpXSArIDFdO1xuICAgICAgdmFyIGIgPSBpbnB1dFtwcmVmSW5kW2ldICsgMl07XG4gICAgICBpZiAoIWlzUHJlZml4KGEpKSB7XG4gICAgICAgIGxvZy5lcnJvcignSW52YWxpZCBTUEFSUUwgcHJlZml4OiAnICsgYSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1N5bWJvbChiKSkge1xuICAgICAgICBsb2cuZXJyb3IoJ0ludmFsaWQgU1BBUlFMIHN5bWJvbDogJyArIGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmluZm8oJ1ByZWZpeCBmb3VuZDogJyArIGEgKyAnIC0+ICcgKyBiKTtcbiAgICAgICAgdmFyIHByZWYgPSBnZXRQcmVmaXgoYSk7XG4gICAgICAgIHZhciBzeW1ib2wgPSByZW1vdmVCcmFja2V0cyhiKTtcbiAgICAgICAgcmVzW3ByZWZdID0gc3ltYm9sO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWF0Y2hpbmdCcmFja2V0KGFyciwgb3BlbiwgY2xvc2UpIHtcbiAgICBsb2cuaW5mbygnTG9va2luZyBmb3IgYSBjbG9zZSBicmFja2V0IG9mIHR5cGUgJyArIGNsb3NlICsgJyBpbiAnICsgYXJyKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyW2ldID09PSBvcGVuKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAoYXJyW2ldID09PSBjbG9zZSkge1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmVycm9yKCdTdGF0ZW1lbnQgaGFkIG5vIGNsb3NlIHBhcmVudGhlc2lzIGluIFNQQVJRTCBxdWVyeScpO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RyYWludEdyZWF0ZXJUaGFuKHZhbHVlKSB7XG4gICAgdGhpcy5kZXNjcmliZSA9IGZ1bmN0aW9uICh2YXJzdHIpIHtcbiAgICAgIHJldHVybiB2YXJzdHIgKyAnID4gJyArIHZhbHVlLnRvTlQoKTtcbiAgICB9O1xuICAgIHRoaXMudGVzdCA9IGZ1bmN0aW9uICh0ZXJtKSB7XG4gICAgICBpZiAodGVybS52YWx1ZS5tYXRjaCgvWzAtOV0rKFxcLlswLTldKyk/KFtlRV1bKy1dP1swLTldKyk/LykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGVybS52YWx1ZSkgPiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0ZXJtLnRvTlQoKSA+IHZhbHVlLnRvTlQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RyYWludExlc3NUaGFuKHZhbHVlKSB7XG4gICAgLy8gdGhpcyBpcyBub3QgdGhlIHJlY29tbWVuZGVkIHVzYWdlLiBTaG91bGQgb25seSB3b3JrIG9uIGxpdGVyYWwsIG51bWVyaWMsIGRhdGVUaW1lXG4gICAgdGhpcy5kZXNjcmliZSA9IGZ1bmN0aW9uICh2YXJzdHIpIHtcbiAgICAgIHJldHVybiB2YXJzdHIgKyAnIDwgJyArIHZhbHVlLnRvTlQoKTtcbiAgICB9O1xuICAgIHRoaXMudGVzdCA9IGZ1bmN0aW9uICh0ZXJtKSB7XG4gICAgICAvLyB0aGlzLmRlc2NyaWJlID0gZnVuY3Rpb24gKHZhcnN0cikgeyByZXR1cm4gdmFyc3RyICsgXCIgPCBcIit2YWx1ZSB9XG4gICAgICBpZiAodGVybS52YWx1ZS5tYXRjaCgvWzAtOV0rKFxcLlswLTldKyk/KFtlRV1bKy1dP1swLTldKyk/LykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGVybS52YWx1ZSkgPCBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0ZXJtLnRvTlQoKSA8IHZhbHVlLnRvTlQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIFRoaXMgc2hvdWxkIG9ubHkgd29yayBvbiBsaXRlcmFscyBidXQgZG9lc24ndC5cbiAgZnVuY3Rpb24gQ29uc3RyYWludEVxdWFsVG8odmFsdWUpIHtcbiAgICB0aGlzLmRlc2NyaWJlID0gZnVuY3Rpb24gKHZhcnN0cikge1xuICAgICAgcmV0dXJuIHZhcnN0ciArICcgPSAnICsgdmFsdWUudG9OVCgpO1xuICAgIH07XG4gICAgdGhpcy50ZXN0ID0gZnVuY3Rpb24gKHRlcm0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS5zYW1lVGVybSh0ZXJtKTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdmFsdWUgbXVzdCBiZSBhIGxpdGVyYWxcbiAgZnVuY3Rpb24gQ29uc3RyYWludFJlZ2V4cCh2YWx1ZSkge1xuICAgIHRoaXMuZGVzY3JpYmUgPSBmdW5jdGlvbiAodmFyc3RyKSB7XG4gICAgICByZXR1cm4gXCJSRUdFWFAoICdcIiArIHZhbHVlICsgXCInICwgXCIgKyB2YXJzdHIgKyAnICknO1xuICAgIH07XG4gICAgdGhpcy50ZXN0ID0gZnVuY3Rpb24gKHRlcm0pIHtcbiAgICAgIHZhciBzdHIgPSB2YWx1ZTtcbiAgICAgIC8vIHN0ciA9IHN0ci5yZXBsYWNlKC9eLy8sXCJcIikucmVwbGFjZSgvLyQvLFwiXCIpXG4gICAgICB2YXIgcmcgPSBuZXcgUmVnRXhwKHN0cik7XG4gICAgICBpZiAodGVybS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gcmcudGVzdCh0ZXJtLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29uc3RyYWludChpbnB1dCwgcGF0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMyAmJiBpbnB1dFswXS50ZXJtVHlwZSA9PT0gJ1ZhcmlhYmxlJyAmJiAoaW5wdXRbMl0udGVybVR5cGUgPT09ICdOYW1lZE5vZGUnIHx8IGlucHV0WzJdLnRlcm1UeXBlID09PSAnTGl0ZXJhbCcpKSB7XG4gICAgICBpZiAoaW5wdXRbMV0gPT09ICc9Jykge1xuICAgICAgICBsb2cuZGVidWcoJ0NvbnN0cmFpbnQgYWRkZWQ6ICcgKyBpbnB1dCk7XG4gICAgICAgIHBhdC5jb25zdHJhaW50c1tpbnB1dFswXV0gPSBuZXcgQ29uc3RyYWludEVxdWFsVG8oaW5wdXRbMl0pO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dFsxXSA9PT0gJz4nKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnQ29uc3RyYWludCBhZGRlZDogJyArIGlucHV0KTtcbiAgICAgICAgcGF0LmNvbnN0cmFpbnRzW2lucHV0WzBdXSA9IG5ldyBDb25zdHJhaW50RXF1YWxUbyhpbnB1dFsyXSk7XG4gICAgICB9IGVsc2UgaWYgKGlucHV0WzFdID09PSAnPCcpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdDb25zdHJhaW50IGFkZGVkOiAnICsgaW5wdXQpO1xuICAgICAgICBwYXQuY29uc3RyYWludHNbaW5wdXRbMF1dID0gbmV3IENvbnN0cmFpbnRFcXVhbFRvKGlucHV0WzJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuKFwiSSBkb24ndCBrbm93IGhvdyB0byBoYW5kbGUgdGhlIGNvbnN0cmFpbnQ6IFwiICsgaW5wdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5wdXQubGVuZ3RoID09PSA2ICYmIHR5cGVvZiBpbnB1dFswXSA9PT0gJ3N0cmluZycgJiYgaW5wdXRbMF0udG9Mb3dlckNhc2UoKSA9PT0gJ3JlZ2V4cCcgJiYgaW5wdXRbMV0gPT09ICcoJyAmJiBpbnB1dFs1XSA9PT0gJyknICYmIGlucHV0WzNdID09PSAnLCcgJiYgaW5wdXRbNF0udGVybVR5cGUgPT09ICdWYXJpYWJsZScgJiYgaW5wdXRbMl0udGVybVR5cGUgPT09ICdMaXRlcmFsJykge1xuICAgICAgbG9nLmRlYnVnKCdDb25zdHJhaW50IGFkZGVkOiAnICsgaW5wdXQpO1xuICAgICAgcGF0LmNvbnN0cmFpbnRzW2lucHV0WzRdXSA9IG5ldyBDb25zdHJhaW50UmVnZXhwKGlucHV0WzJdLnZhbHVlKTtcbiAgICB9XG4gICAgLy8gbG9nLndhcm4oXCJJIGRvbid0IGtub3cgaG93IHRvIGhhbmRsZSB0aGUgY29uc3RyYWludDogXCIraW5wdXQpXG4gICAgLy8gYWxlcnQoXCJsZW5ndGg6IFwiK2lucHV0Lmxlbmd0aCtcIiBpbnB1dCAwIHR5cGU6IFwiK2lucHV0WzBdLnRlcm1UeXBlK1wiIGlucHV0IDE6IFwiK2lucHV0WzFdK1wiIGlucHV0WzJdIHR5cGU6IFwiK2lucHV0WzJdLnRlcm1UeXBlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0T3B0aW9uYWwodGVybXMsIHBhdCkge1xuICAgIGxvZy5kZWJ1ZygnT3B0aW9uYWwgcXVlcnk6ICcgKyB0ZXJtcyArICcgbm90IHlldCBpbXBsZW1lbnRlZC4nKTtcbiAgICB2YXIgb3B0ID0ga2IuZm9ybXVsYSgpO1xuICAgIHNldFdoZXJlKHRlcm1zLCBvcHQpO1xuICAgIHBhdC5vcHRpb25hbC5wdXNoKG9wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRXaGVyZShpbnB1dCwgcGF0KSB7XG4gICAgdmFyIHRlcm1zID0gdG9UZXJtcyhpbnB1dCk7XG4gICAgdmFyIGVuZDtcbiAgICBsb2cuZGVidWcoJ1dIRVJFOiAnICsgdGVybXMpO1xuICAgIHZhciBvcHQ7XG4gICAgLy8gdmFyIG9wdCA9IGFycmF5SW5kaWNlc09mKFwiT1BUSU9OQUxcIix0ZXJtcylcbiAgICB3aGlsZSAoYXJyYXlJbmRleE9mKCdPUFRJT05BTCcsIHRlcm1zKSkge1xuICAgICAgb3B0ID0gYXJyYXlJbmRleE9mKCdPUFRJT05BTCcsIHRlcm1zKTtcbiAgICAgIGxvZy5kZWJ1ZygnT1BUOiAnICsgb3B0ICsgJyAnICsgdGVybXNbb3B0XSArICcgaW4gJyArIHRlcm1zKTtcbiAgICAgIGlmICh0ZXJtc1tvcHQgKyAxXSAhPT0gJ3snKSB7XG4gICAgICAgIGxvZy53YXJuKCdCYWQgb3B0aW9uYWwgb3BlbmluZyBicmFja2V0IGluIHdvcmQgJyArIG9wdCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBnZXRNYXRjaGluZ0JyYWNrZXQodGVybXMuc2xpY2Uob3B0ICsgMiksICd7JywgJ30nKTtcbiAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgIGxvZy5lcnJvcignTm8gbWF0Y2hpbmcgYnJhY2tldCBpbiB3b3JkICcgKyBvcHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0T3B0aW9uYWwodGVybXMuc2xpY2Uob3B0ICsgMiwgb3B0ICsgMiArIGVuZCksIHBhdCk7XG4gICAgICAgIC8vIGFsZXJ0KHBhdC5zdGF0ZW1lbnRzWzBdLnRvTlQoKSlcbiAgICAgICAgb3B0ID0gYXJyYXlJbmRleE9mKCdPUFRJT05BTCcsIHRlcm1zKTtcbiAgICAgICAgZW5kID0gZ2V0TWF0Y2hpbmdCcmFja2V0KHRlcm1zLnNsaWNlKG9wdCArIDIpLCAneycsICd9Jyk7XG4gICAgICAgIHRlcm1zLnNwbGljZShvcHQsIGVuZCArIDMpO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoJ1dIRVJFIGFmdGVyIG9wdGlvbmFsczogJyArIHRlcm1zKTtcbiAgICB3aGlsZSAoYXJyYXlJbmRleE9mKCdGSUxURVInLCB0ZXJtcykpIHtcbiAgICAgIHZhciBmaWx0ID0gYXJyYXlJbmRleE9mKCdGSUxURVInLCB0ZXJtcyk7XG4gICAgICBpZiAodGVybXNbZmlsdCArIDFdICE9PSAnKCcpIHtcbiAgICAgICAgbG9nLndhcm4oJ0JhZCBmaWx0ZXIgb3BlbmluZyBicmFja2V0IGluIHdvcmQgJyArIGZpbHQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZ2V0TWF0Y2hpbmdCcmFja2V0KHRlcm1zLnNsaWNlKGZpbHQgKyAyKSwgJygnLCAnKScpO1xuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgbG9nLmVycm9yKCdObyBtYXRjaGluZyBicmFja2V0IGluIHdvcmQgJyArIGZpbHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Q29uc3RyYWludCh0ZXJtcy5zbGljZShmaWx0ICsgMiwgZmlsdCArIDIgKyBlbmQpLCBwYXQpO1xuICAgICAgICBmaWx0ID0gYXJyYXlJbmRleE9mKCdGSUxURVInLCB0ZXJtcyk7XG4gICAgICAgIGVuZCA9IGdldE1hdGNoaW5nQnJhY2tldCh0ZXJtcy5zbGljZShmaWx0ICsgMiksICcoJywgJyknKTtcbiAgICAgICAgdGVybXMuc3BsaWNlKGZpbHQsIGVuZCArIDMpO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoJ1dIRVJFIGFmdGVyIGZpbHRlcnMgYW5kIG9wdGlvbmFsczogJyArIHRlcm1zKTtcbiAgICBleHRyYWN0U3RhdGVtZW50cyh0ZXJtcywgcGF0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RTdGF0ZW1lbnRzKHRlcm1zLCBmb3JtdWxhKSB7XG4gICAgdmFyIGFycmF5WmVybyA9IG5ldyBBcnJheSgxKTtcbiAgICBhcnJheVplcm9bMF0gPSAtMTsgLy8gdGhpcyBpcyBqdXN0IHRvIGFkZCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB3aGVyZSB0byB0aGUgcGVyaW9kcyBpbmRleC5cbiAgICB2YXIgcGVyID0gYXJyYXlaZXJvLmNvbmNhdChhcnJheUluZGljZXNPZignLicsIHRlcm1zKSk7XG4gICAgdmFyIHN0YXQgPSBbXTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHBlci5sZW5ndGggLSAxOyB4KyspIHtcbiAgICAgIHN0YXRbeF0gPSB0ZXJtcy5zbGljZShwZXJbeF0gKyAxLCBwZXJbeCArIDFdKTtcbiAgICB9XG4gICAgLy8gTm93IGl0J3MgaW4gYW4gYXJyYXkgb2Ygc3RhdGVtZW50c1xuICAgIGZvciAoeCBpbiBzdGF0KSB7XG4gICAgICAvLyBUSElTIE1VU1QgQkUgQ0hBTkdFRCBGT1IgQ09NTUEsIFNFTUlDT0xPTlxuICAgICAgbG9nLmluZm8oJ3MrcCtvICcgKyB4ICsgJyA9ICcgKyBzdGF0W3hdKTtcbiAgICAgIHZhciBzdWJqID0gc3RhdFt4XVswXTtcbiAgICAgIHN0YXRbeF0uc3BsaWNlKDAsIDEpO1xuICAgICAgdmFyIHNlbSA9IGFycmF5WmVyby5jb25jYXQoYXJyYXlJbmRpY2VzT2YoJzsnLCBzdGF0W3hdKSk7XG4gICAgICBzZW0ucHVzaChzdGF0W3hdLmxlbmd0aCk7XG4gICAgICB2YXIgc3RhdDIgPSBbXTtcbiAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2VtLmxlbmd0aCAtIDE7IHkrKykge1xuICAgICAgICBzdGF0Mlt5XSA9IHN0YXRbeF0uc2xpY2Uoc2VtW3ldICsgMSwgc2VtW3kgKyAxXSk7XG4gICAgICB9XG4gICAgICBmb3IgKHggaW4gc3RhdDIpIHtcbiAgICAgICAgbG9nLmluZm8oJ3ArbyAnICsgeCArICcgPSAnICsgc3RhdFt4XSk7XG4gICAgICAgIHZhciBwcmVkID0gc3RhdDJbeF1bMF07XG4gICAgICAgIHN0YXQyW3hdLnNwbGljZSgwLCAxKTtcbiAgICAgICAgdmFyIGNvbSA9IGFycmF5WmVyby5jb25jYXQoYXJyYXlJbmRpY2VzT2YoJywnLCBzdGF0Mlt4XSkpO1xuICAgICAgICBjb20ucHVzaChzdGF0Mlt4XS5sZW5ndGgpO1xuICAgICAgICB2YXIgc3RhdDMgPSBbXTtcbiAgICAgICAgZm9yICh5ID0gMDsgeSA8IGNvbS5sZW5ndGggLSAxOyB5KyspIHtcbiAgICAgICAgICBzdGF0M1t5XSA9IHN0YXQyW3hdLnNsaWNlKGNvbVt5XSArIDEsIGNvbVt5ICsgMV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoeCBpbiBzdGF0Mykge1xuICAgICAgICAgIHZhciBvYmogPSBzdGF0M1t4XVswXTtcbiAgICAgICAgICBsb2cuaW5mbygnU3Viaj0nICsgc3ViaiArICcgUHJlZD0nICsgcHJlZCArICcgT2JqPScgKyBvYmopO1xuICAgICAgICAgIGZvcm11bGEuYWRkKHN1YmosIHByZWQsIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJvZHkgb2YgU1BBUlFMVG9RdWVyeSAqKioqKioqKioqKioqKioqKioqKioqKioqKiovL1xuICBsb2cuaW5mbygnU1BBUlFMIGlucHV0OiBcXG4nICsgU1BBUlFMKTtcbiAgdmFyIHEgPSBuZXcgUXVlcnkoKTtcbiAgdmFyIHNwID0gdG9rZW5pemUoU1BBUlFMKTsgLy8gZmlyc3QgdG9rZW5pemUgZXZlcnl0aGluZ1xuICB2YXIgcHJlZml4ZXMgPSBnZXRQcmVmaXhEZWNsYXJhdGlvbnMoc3ApO1xuICBpZiAoIXByZWZpeGVzLnJkZikge1xuICAgIHByZWZpeGVzLnJkZiA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJztcbiAgfVxuICBpZiAoIXByZWZpeGVzLnJkZnMpIHtcbiAgICBwcmVmaXhlcy5yZGZzID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSMnO1xuICB9XG4gIHZhciBzZWxlY3RMb2MgPSBhcnJheUluZGV4T2YoJ1NFTEVDVCcsIHNwKTtcbiAgdmFyIHdoZXJlTG9jID0gYXJyYXlJbmRleE9mKCdXSEVSRScsIHNwKTtcbiAgaWYgKHNlbGVjdExvYyA8IDAgfHwgd2hlcmVMb2MgPCAwIHx8IHNlbGVjdExvYyA+IHdoZXJlTG9jKSB7XG4gICAgbG9nLmVycm9yKCdJbnZhbGlkIG9yIG5vbmV4aXN0ZW50IFNFTEVDVCBhbmQgV0hFUkUgdGFncyBpbiBTUEFSUUwgcXVlcnknKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc2V0VmFycyhzcC5zbGljZShzZWxlY3RMb2MgKyAxLCB3aGVyZUxvYyksIHEpO1xuXG4gIHNldFdoZXJlKHNwLnNsaWNlKHdoZXJlTG9jICsgMiwgc3AubGVuZ3RoIC0gMSksIHEucGF0KTtcblxuICBpZiAodGVzdE1vZGUpIHtcbiAgICByZXR1cm4gcTtcbiAgfVxuXG4gIGZvciAodmFyIHggaW4gcS5wYXQuc3RhdGVtZW50cykge1xuICAgIHZhciBzdCA9IHEucGF0LnN0YXRlbWVudHNbeF07XG4gICAgaWYgKHN0LnN1YmplY3QudGVybVR5cGUgPT09ICdOYW1lZE5vZGUnKSB7XG4gICAgICAvKiAmJiBzZi5pc1BlbmRpbmcoc3Quc3ViamVjdC51cmkpICovIC8vIFRoaXMgZG9lc24ndCB3b3JrLlxuICAgICAgLy8gc2YucmVxdWVzdFVSSShzdC5zdWJqZWN0LnVyaSxcInNwYXJxbDpcIitzdC5zdWJqZWN0KSBLZW5ueTogSSByZW1vdmUgdGhlc2UgdHdvXG4gICAgICBpZiAoa2IuZmV0Y2hlcikge1xuICAgICAgICBrYi5mZXRjaGVyLmxvb2tVcFRoaW5nKHN0LnN1YmplY3QsICdzcGFycWw6JyArIHN0LnN1YmplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3Qub2JqZWN0LnRlcm1UeXBlID09PSAnTmFtZWROb2RlJykge1xuICAgICAgLyogJiYgc2YuaXNQZW5kaW5nKHN0Lm9iamVjdC51cmkpICovXG4gICAgICAvLyBzZi5yZXF1ZXN0VVJJKHN0Lm9iamVjdC51cmksXCJzcGFycWw6XCIrc3Qub2JqZWN0KVxuICAgICAgaWYgKGtiLmZldGNoZXIpIHtcbiAgICAgICAga2IuZmV0Y2hlci5sb29rVXBUaGluZyhzdC5vYmplY3QsICdzcGFycWw6JyArIHN0Lm9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFsZXJ0KHEucGF0KVxuICByZXR1cm4gcTtcbiAgLy8gY2hlY2tWYXJzKClcbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8vXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU1BBUlFMVG9RdWVyeTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG5cbnZhciBTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRlbWVudChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGVtZW50KTtcblxuICAgIHRoaXMuc3ViamVjdCA9IE5vZGUuZnJvbVZhbHVlKHN1YmplY3QpO1xuICAgIHRoaXMucHJlZGljYXRlID0gTm9kZS5mcm9tVmFsdWUocHJlZGljYXRlKTtcbiAgICB0aGlzLm9iamVjdCA9IE5vZGUuZnJvbVZhbHVlKG9iamVjdCk7XG4gICAgdGhpcy53aHkgPSBncmFwaDsgLy8gcHJvcGVydHkgY3VycmVudGx5IHVzZWQgYnkgcmRmbGliXG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RhdGVtZW50LCBbe1xuICAgIGtleTogJ2VxdWFscycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgICAgcmV0dXJuIG90aGVyLnN1YmplY3QuZXF1YWxzKHRoaXMuc3ViamVjdCkgJiYgb3RoZXIucHJlZGljYXRlLmVxdWFscyh0aGlzLnByZWRpY2F0ZSkgJiYgb3RoZXIub2JqZWN0LmVxdWFscyh0aGlzLm9iamVjdCkgJiYgb3RoZXIuZ3JhcGguZXF1YWxzKHRoaXMuZ3JhcGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N1YnN0aXR1dGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzdGl0dXRlKGJpbmRpbmdzKSB7XG4gICAgICB2YXIgeSA9IG5ldyBTdGF0ZW1lbnQodGhpcy5zdWJqZWN0LnN1YnN0aXR1dGUoYmluZGluZ3MpLCB0aGlzLnByZWRpY2F0ZS5zdWJzdGl0dXRlKGJpbmRpbmdzKSwgdGhpcy5vYmplY3Quc3Vic3RpdHV0ZShiaW5kaW5ncyksIHRoaXMud2h5LnN1YnN0aXR1dGUoYmluZGluZ3MpKTsgLy8gMjAxNlxuICAgICAgY29uc29sZS5sb2coJ0BAQCBzdGF0ZW1lbnQgc3Vic3RpdHV0ZTonICsgeSk7XG4gICAgICByZXR1cm4geTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b0Nhbm9uaWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ2Fub25pY2FsKCkge1xuICAgICAgdmFyIHRlcm1zID0gW3RoaXMuc3ViamVjdC50b0Nhbm9uaWNhbCgpLCB0aGlzLnByZWRpY2F0ZS50b0Nhbm9uaWNhbCgpLCB0aGlzLm9iamVjdC50b0Nhbm9uaWNhbCgpXTtcbiAgICAgIGlmICh0aGlzLmdyYXBoICYmIHRoaXMuZ3JhcGgudGVybVR5cGUgIT09ICdEZWZhdWx0R3JhcGgnKSB7XG4gICAgICAgIHRlcm1zLnB1c2godGhpcy5ncmFwaC50b0Nhbm9uaWNhbCgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXJtcy5qb2luKCcgJykgKyAnIC4nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvTlQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b05UKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLnN1YmplY3QudG9OVCgpLCB0aGlzLnByZWRpY2F0ZS50b05UKCksIHRoaXMub2JqZWN0LnRvTlQoKV0uam9pbignICcpICsgJyAuJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9OVCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dyYXBoJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLndoeTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGcpIHtcbiAgICAgIHRoaXMud2h5ID0gZztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RhdGVtZW50O1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlbWVudDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9pbmRleGVkRm9ybXVsYSA9IHJlcXVpcmUoJy4vaW5kZXhlZC1mb3JtdWxhJyk7XG5cbnZhciBfaW5kZXhlZEZvcm11bGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXhlZEZvcm11bGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBKb2UgUHJlc2JyZXkgPHByZXNicmV5QG1pdC5lZHU+XG4vLyAyMDA3LTA3LTE1XG4vLyAyMDEwLTA4LTA4IFRpbUJMIGZvbGRlZCBpbiBLZW5ueSdzIFdFQkRBVlxuLy8gMjAxMC0xMi0wNyBUaW1CTCBhZGRyZWQgbG9jYWwgZmlsZSB3cml0ZSBjb2RlXG52YXIgZG9jcGFydCA9IHJlcXVpcmUoJy4vdXJpJykuZG9jcGFydDtcbnZhciBGZXRjaGVyID0gcmVxdWlyZSgnLi9mZXRjaGVyJyk7XG52YXIgZ3JhcGggPSByZXF1aXJlKCcuL2RhdGEtZmFjdG9yeScpLmdyYXBoO1xuXG52YXIgbmFtZWROb2RlID0gcmVxdWlyZSgnLi9kYXRhLWZhY3RvcnknKS5uYW1lZE5vZGU7XG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZSgnLi9uYW1lc3BhY2UnKTtcbnZhciBTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9zZXJpYWxpemVyJyk7XG52YXIgdXJpSm9pbiA9IHJlcXVpcmUoJy4vdXJpJykuam9pbjtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbnZhciBVcGRhdGVNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3BhcnFsID0gZnVuY3Rpb24gc3BhcnFsKHN0b3JlKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIGlmIChzdG9yZS51cGRhdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2FuJ3QgaGF2ZSB0d28gVXBkYXRlTWFuYWdlcnMgZm9yIHRoZSBzYW1lIHN0b3JlXCIpO1xuICAgIH1cbiAgICBpZiAoIXN0b3JlLmZldGNoZXIpIHtcbiAgICAgIC8vIFRoZSBzdG9yZSBtdXN0IGFsc28vYWxyZWFkeSBoYXZlIGEgZmV0Y2hlclxuICAgICAgbmV3IEZldGNoZXIoc3RvcmUpO1xuICAgIH1cbiAgICBzdG9yZS51cGRhdGVyID0gdGhpcztcbiAgICB0aGlzLmlmcHMgPSB7fTtcbiAgICB0aGlzLmZwcyA9IHt9O1xuICAgIHRoaXMubnMgPSB7fTtcbiAgICB0aGlzLm5zLmxpbmsgPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjJyk7XG4gICAgdGhpcy5ucy5odHRwID0gTmFtZXNwYWNlKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9odHRwIycpO1xuICAgIHRoaXMubnMuaHR0cGggPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2h0dHBoIycpO1xuICAgIHRoaXMubnMubGRwID0gTmFtZXNwYWNlKCdodHRwOi8vd3d3LnczLm9yZy9ucy9sZHAjJyk7XG4gICAgdGhpcy5ucy5yZGYgPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnKTtcbiAgICB0aGlzLm5zLnJkZnMgPSBOYW1lc3BhY2UoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSMnKTtcbiAgICB0aGlzLm5zLnJkZiA9IE5hbWVzcGFjZSgnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIycpO1xuICAgIHRoaXMubnMub3dsID0gTmFtZXNwYWNlKCdodHRwOi8vd3d3LnczLm9yZy8yMDAyLzA3L293bCMnKTtcblxuICAgIHRoaXMucGF0Y2hDb250cm9sID0gW107IC8vIGluZGV4IG9mIG9iamVjdHMgZnJvIGNvb3JkaW5hdGluZyBpbmNvbW5nIGFuZCBvdXRnb2luZyBwYXRjaGVzXG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5wYXRjaENvbnRyb2xGb3IgPSBmdW5jdGlvbiAoZG9jKSB7XG4gICAgaWYgKCF0aGlzLnBhdGNoQ29udHJvbFtkb2MudXJpXSkge1xuICAgICAgdGhpcy5wYXRjaENvbnRyb2xbZG9jLnVyaV0gPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGF0Y2hDb250cm9sW2RvYy51cmldO1xuICB9O1xuXG4gIC8vIFJldHVybnMgVGhlIG1ldGhvZCBzdHJpbmcgU1BBUlFMIG9yIERBViBvciBMT0NBTEZJTEUgb3IgZmFsc2UgaWYga25vd24sIHVuZGVmaW5lZCBpZiBub3Qga25vd24uXG4gIC8vXG4gIC8vIEZpbGVzIGhhdmUgdG8gaGF2ZSBhIHNwZWNpZmljIGFubm90YXRvbiB0aGF0IHRoZXkgYXJlIG1hY2hpbmUgd3JpdHRlbiwgZm9yIHNhZmV0eS5cbiAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgY2hlY2sgZm9yIHdyaXRlIGFjY2VzcyBvbiBmaWxlcy5cbiAgLy9cbiAgc3BhcnFsLnByb3RvdHlwZS5lZGl0YWJsZSA9IGZ1bmN0aW9uICh1cmksIGtiKSB7XG4gICAgaWYgKCF1cmkpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gRWcgc3ViamVjdCBpcyBibm9kZSwgbm8ga25vd24gZG9jIHRvIHdyaXRlIHRvXG4gICAgfVxuICAgIGlmICgha2IpIHtcbiAgICAgIGtiID0gdGhpcy5zdG9yZTtcbiAgICB9XG5cbiAgICBpZiAodXJpLnNsaWNlKDAsIDgpID09PSAnZmlsZTovLy8nKSB7XG4gICAgICBpZiAoa2IuaG9sZHMoa2Iuc3ltKHVyaSksIG5hbWVkTm9kZSgnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI3R5cGUnKSwgbmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI01hY2hpbmVFZGl0YWJsZURvY3VtZW50JykpKSB7XG4gICAgICAgIHJldHVybiAnTE9DQUxGSUxFJztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0cyA9IGtiLnN0YXRlbWVudHNNYXRjaGluZyhrYi5zeW0odXJpKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG4gICAgICBjb25zb2xlLmxvZygnc3BhcnFsLmVkaXRhYmxlOiBOb3QgTWFjaGluZUVkaXRhYmxlRG9jdW1lbnQgZmlsZSAnICsgdXJpICsgJ1xcbicpO1xuICAgICAgY29uc29sZS5sb2coc3RzLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC50b05UKCk7XG4gICAgICB9KS5qb2luKCdcXG4nKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvLyBAQCBXb3VsZCBiZSBuaWZ0eSBvZiBjb3Vyc2UgdG8gc2VlIHdoZXRoZXIgd2UgYWN0dWFsbHkgaGF2ZSB3cml0ZSBhY2VzcyBmaXJzdC5cbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgZGVmaW5pdGl2ZSA9IGZhbHNlO1xuICAgIHZhciByZXF1ZXN0cyA9IGtiLmVhY2godW5kZWZpbmVkLCB0aGlzLm5zLmxpbmsoJ3JlcXVlc3RlZFVSSScpLCBkb2NwYXJ0KHVyaSkpO1xuXG4gICAgLy8gSGFjayBmb3IgdGhlIG1vbWVudCBAQEBAIDIwMTYtMDItMTJcbiAgICBpZiAoa2IuaG9sZHMobmFtZWROb2RlKHVyaSksIHRoaXMubnMucmRmKCd0eXBlJyksIHRoaXMubnMubGRwKCdSZXNvdXJjZScpKSkge1xuICAgICAgcmV0dXJuICdTUEFSUUwnO1xuICAgIH1cbiAgICB2YXIgaTtcbiAgICB2YXIgbWV0aG9kO1xuICAgIGZvciAodmFyIHIgPSAwOyByIDwgcmVxdWVzdHMubGVuZ3RoOyByKyspIHtcbiAgICAgIHJlcXVlc3QgPSByZXF1ZXN0c1tyXTtcbiAgICAgIGlmIChyZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlID0ga2IuYW55KHJlcXVlc3QsIHRoaXMubnMubGluaygncmVzcG9uc2UnKSk7XG4gICAgICAgIGlmIChyZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgYWNjZXB0UGF0Y2ggPSBrYi5lYWNoKHJlc3BvbnNlLCB0aGlzLm5zLmh0dHBoKCdhY2NlcHQtcGF0Y2gnKSk7XG4gICAgICAgICAgaWYgKGFjY2VwdFBhdGNoLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFjY2VwdFBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIG1ldGhvZCA9IGFjY2VwdFBhdGNoW2ldLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgaWYgKG1ldGhvZC5pbmRleE9mKCdhcHBsaWNhdGlvbi9zcGFycWwtdXBkYXRlJykgPj0gMCkgcmV0dXJuICdTUEFSUUwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYXV0aG9yX3ZpYSA9IGtiLmVhY2gocmVzcG9uc2UsIHRoaXMubnMuaHR0cGgoJ21zLWF1dGhvci12aWEnKSk7XG4gICAgICAgICAgaWYgKGF1dGhvcl92aWEubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXV0aG9yX3ZpYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBtZXRob2QgPSBhdXRob3JfdmlhW2ldLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgaWYgKG1ldGhvZC5pbmRleE9mKCdTUEFSUUwnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdTUEFSUUwnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChtZXRob2QuaW5kZXhPZignREFWJykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnREFWJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc3RhdHVzID0ga2IuZWFjaChyZXNwb25zZSwgdGhpcy5ucy5odHRwKCdzdGF0dXMnKSk7XG4gICAgICAgICAgaWYgKHN0YXR1cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0dXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1c1tpXSA9PT0gMjAwIHx8IHN0YXR1c1tpXSA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlIC8vIEEgZGVmaW5pdGl2ZSBhbnN3ZXJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc3BhcnFsLmVkaXRhYmxlOiBObyByZXNwb25zZSBmb3IgJyArIHVyaSArICdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVxdWVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnc3BhcnFsLmVkaXRhYmxlOiBObyByZXF1ZXN0IGZvciAnICsgdXJpICsgJ1xcbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVmaW5pdGl2ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFdlIGhhdmUgZ290IGEgcmVxdWVzdCBhbmQgaXQgZGlkIE5PVCBzYXkgZWRpdGFibGUgPT4gbm90IGVkaXRhYmxlXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdzcGFycWwuZWRpdGFibGU6IGluY29uY2x1c2l2ZSBmb3IgJyArIHVyaSArICdcXG4nKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBXZSBkb24ndCBrbm93ICh5ZXQpIGFzIHdlIGhhdmVuJ3QgaGFkIGEgcmVzcG9uc2UgKHlldClcbiAgfTtcblxuICAvLyAvLy8vLy8vLy8gIFRoZSBpZGVudGlmaWNhdGlvbiBvZiBibm9kZXNcblxuICBzcGFycWwucHJvdG90eXBlLmFub255bWl6ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqLnRvTlQoKS5zdWJzdHIoMCwgMikgPT09ICdfOicgJiYgdGhpcy5fbWVudGlvbmVkKG9iaikgPyAnPycgKyBvYmoudG9OVCgpLnN1YnN0cigyKSA6IG9iai50b05UKCk7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5hbm9ueW1pemVOVCA9IGZ1bmN0aW9uIChzdG10KSB7XG4gICAgcmV0dXJuIHRoaXMuYW5vbnltaXplKHN0bXQuc3ViamVjdCkgKyAnICcgKyB0aGlzLmFub255bWl6ZShzdG10LnByZWRpY2F0ZSkgKyAnICcgKyB0aGlzLmFub255bWl6ZShzdG10Lm9iamVjdCkgKyAnIC4nO1xuICB9O1xuXG4gIC8vIEEgbGlzdCBvZiBhbGwgYm5vZGVzIG9jY3VyaW5nIGluIGEgc3RhdGVtZW50XG4gIHNwYXJxbC5wcm90b3R5cGUuX3N0YXRlbWVudF9ibm9kZXMgPSBmdW5jdGlvbiAoc3QpIHtcbiAgICByZXR1cm4gW3N0LnN1YmplY3QsIHN0LnByZWRpY2F0ZSwgc3Qub2JqZWN0XS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LmlzQmxhbms7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQSBsaXN0IG9mIGFsbCBibm9kZXMgb2NjdXJpbmcgaW4gYSBsaXN0IG9mIHN0YXRlbWVudHNcbiAgc3BhcnFsLnByb3RvdHlwZS5fc3RhdGVtZW50X2FycmF5X2Jub2RlcyA9IGZ1bmN0aW9uIChzdHMpIHtcbiAgICB2YXIgYm5vZGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJub2RlcyA9IGJub2Rlcy5jb25jYXQodGhpcy5fc3RhdGVtZW50X2Jub2RlcyhzdHNbaV0pKTtcbiAgICB9XG4gICAgYm5vZGVzLnNvcnQoKTsgLy8gaW4gcGxhY2Ugc29ydCAtIHJlc3VsdCBtYXkgaGF2ZSBkdXBsaWNhdGVzXG4gICAgdmFyIGJub2RlczIgPSBbXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJub2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKGogPT09IDAgfHwgIWJub2Rlc1tqXS5zYW1lVGVybShibm9kZXNbaiAtIDFdKSkge1xuICAgICAgICBibm9kZXMyLnB1c2goYm5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJub2RlczI7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5fY2FjaGVfaWZwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBNYWtlIGEgY2FjaGVkIGxpc3Qgb2YgW0ludmVyc2UtXUZ1bmN0aW9uYWwgcHJvcGVydGllc1xuICAgIC8vIENhbGwgdGhpcyBvbmNlIGJlZm9yZSBjYWxsaW5nIGNvbnRleHRfc3RhdGVtZW50c1xuICAgIHRoaXMuaWZwcyA9IHt9O1xuICAgIHZhciBhID0gdGhpcy5zdG9yZS5lYWNoKHVuZGVmaW5lZCwgdGhpcy5ucy5yZGYoJ3R5cGUnKSwgdGhpcy5ucy5vd2woJ0ludmVyc2VGdW5jdGlvbmFsUHJvcGVydHknKSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmlmcHNbYVtpXS51cmldID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5mcHMgPSB7fTtcbiAgICBhID0gdGhpcy5zdG9yZS5lYWNoKHVuZGVmaW5lZCwgdGhpcy5ucy5yZGYoJ3R5cGUnKSwgdGhpcy5ucy5vd2woJ0Z1bmN0aW9uYWxQcm9wZXJ0eScpKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5mcHNbYVtpXS51cmldID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGNvbnRleHQgdG8gYmluZCBhIGdpdmVuIG5vZGUsIHVwIHRvIGEgZ2l2ZW4gZGVwdGhcbiAgc3BhcnFsLnByb3RvdHlwZS5fYm5vZGVfY29udGV4dDIgPSBmdW5jdGlvbiAoeCwgc291cmNlLCBkZXB0aCkge1xuICAgIC8vIFJldHVybiBhIGxpc3Qgb2Ygc3RhdGVtZW50cyB3aGljaCBpbmRpcmVjdGx5IGlkZW50aWZ5IGEgbm9kZVxuICAgIC8vICBEZXB0aCA+IDEgaWYgdHJ5IGZ1cnRoZXIgaW5kaXJlY3Rpb24uXG4gICAgLy8gIFJldHVybiBhcnJheSBvZiBzdGF0ZW1lbnRzIChwb3NzaWJseSBlbXB0eSksIG9yIG51bGwgaWYgZmFpbHVyZVxuICAgIHZhciBzdHMgPSB0aGlzLnN0b3JlLnN0YXRlbWVudHNNYXRjaGluZyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgeCwgc291cmNlKTsgLy8gaW5jb21pbmcgbGlua3NcbiAgICB2YXIgeTtcbiAgICB2YXIgcmVzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5mcHNbc3RzW2ldLnByZWRpY2F0ZS51cmldKSB7XG4gICAgICAgIHkgPSBzdHNbaV0uc3ViamVjdDtcbiAgICAgICAgaWYgKCF5LmlzQmxhbmspIHtcbiAgICAgICAgICByZXR1cm4gW3N0c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlcHRoKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5fYm5vZGVfY29udGV4dDIoeSwgc291cmNlLCBkZXB0aCAtIDEpO1xuICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuY29uY2F0KFtzdHNbaV1dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb3V0Z29pbmcgbGlua3NcbiAgICBzdHMgPSB0aGlzLnN0b3JlLnN0YXRlbWVudHNNYXRjaGluZyh4LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5pZnBzW3N0c1tpXS5wcmVkaWNhdGUudXJpXSkge1xuICAgICAgICB5ID0gc3RzW2ldLm9iamVjdDtcbiAgICAgICAgaWYgKCF5LmlzQmxhbmspIHtcbiAgICAgICAgICByZXR1cm4gW3N0c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlcHRoKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5fYm5vZGVfY29udGV4dDIoeSwgc291cmNlLCBkZXB0aCAtIDEpO1xuICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuY29uY2F0KFtzdHNbaV1dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7IC8vIEZhaWx1cmVcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBzbWFsbGVzdCBjb250ZXh0IHRvIGJpbmQgYSBnaXZlbiBzaW5nbGUgYm5vZGVcbiAgc3BhcnFsLnByb3RvdHlwZS5fYm5vZGVfY29udGV4dF8xID0gZnVuY3Rpb24gKHgsIHNvdXJjZSkge1xuICAgIC8vIFJldHVybiBhIGxpc3Qgb2Ygc3RhdGVtZW50cyB3aGljaCBpbmRpcmVjdGx5IGlkZW50aWZ5IGEgbm9kZVxuICAgIC8vICAgQnJlYWR0aC1maXJzdFxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmb3IgKHZhciBkZXB0aCA9IDA7IGRlcHRoIDwgMzsgZGVwdGgrKykge1xuICAgICAgLy8gVHJ5IHNpbXBsZSBmaXJzdFxuICAgICAgdmFyIGNvbiA9IHRoaXMuX2Jub2RlX2NvbnRleHQyKHgsIHNvdXJjZSwgZGVwdGgpO1xuICAgICAgaWYgKGNvbiAhPT0gbnVsbCkgcmV0dXJuIGNvbjtcbiAgICB9XG4gICAgLy8gSWYgd2UgY2FuJ3QgZ3VhcmFudGVlIHVuaXF1ZSB3aXRoIGxvZ2ljIGp1c3Qgc2VuZCBhbGwgaW5mbyBhYm91dCBub2RlXG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuY29ubmVjdGVkU3RhdGVtZW50cyh4LCBzb3VyY2UpOyAvLyB3YXM6XG4gICAgLy8gdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgYm5vZGU6ICcgKyB4LnRvTlQoKSlcbiAgfTtcblxuICBzcGFycWwucHJvdG90eXBlLl9tZW50aW9uZWQgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnN0YXRlbWVudHNNYXRjaGluZyh4KS5sZW5ndGggIT09IDAgfHwgLy8gRG9uJ3QgcGluIGZyZXNoIGJub2Rlc1xuICAgIHRoaXMuc3RvcmUuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgeCkubGVuZ3RoICE9PSAwIHx8IHRoaXMuc3RvcmUuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB4KS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5fYm5vZGVfY29udGV4dCA9IGZ1bmN0aW9uIChibm9kZXMsIGRvYykge1xuICAgIHZhciBjb250ZXh0ID0gW107XG4gICAgaWYgKGJub2Rlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2NhY2hlX2lmcHMoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIERvZXMgdGhpcyBvY2N1ciBpbiBvbGQgZ3JhcGg/XG4gICAgICAgIHZhciBibm9kZSA9IGJub2Rlc1tpXTtcbiAgICAgICAgaWYgKCF0aGlzLl9tZW50aW9uZWQoYm5vZGUpKSBjb250aW51ZTtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQuY29uY2F0KHRoaXMuX2Jub2RlX2NvbnRleHRfMShibm9kZSwgZG9jKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xuXG4gIC8qICBXZWlyZCBjb2RlIGRvZXMgbm90IG1ha2Ugc2Vuc2UgLS0gc29tZSBjb2RlIGNvcnJ1cHRpb24gYWxvbmcgdGhlIGxpbmUgLS0gc3QgdW5kZWZpbmVkIC0tIHdlaXJkXG4gICAgICBzcGFycWwucHJvdG90eXBlLl9ibm9kZV9jb250ZXh0ID0gZnVuY3Rpb24oYm5vZGVzKSB7XG4gICAgICAgICAgdmFyIGNvbnRleHQgPSBbXVxuICAgICAgICAgIGlmIChibm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlLnN0YXRlbWVudHNNYXRjaGluZyhzdC5zdWJqZWN0LmlzQmxhbms/dW5kZWZpbmVkOnN0LnN1YmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3QucHJlZGljYXRlLmlzQmxhbms/dW5kZWZpbmVkOnN0LnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdC5vYmplY3QuaXNCbGFuaz91bmRlZmluZWQ6c3Qub2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0LndoeSkubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNvbmNhdChzdClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlX2lmcHMoKVxuICAgICAgICAgICAgICAgICAgZm9yICh4IGluIGJub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNvbmNhdCh0aGlzLl9ibm9kZV9jb250ZXh0XzEoYm5vZGVzW3hdLCBzdC53aHkpKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb250ZXh0XG4gICAgICB9XG4gICovXG4gIC8vIFJldHVybnMgdGhlIGJlc3QgY29udGV4dCBmb3IgYSBzaW5nbGUgc3RhdGVtZW50XG4gIHNwYXJxbC5wcm90b3R5cGUuX3N0YXRlbWVudF9jb250ZXh0ID0gZnVuY3Rpb24gKHN0KSB7XG4gICAgdmFyIGJub2RlcyA9IHRoaXMuX3N0YXRlbWVudF9ibm9kZXMoc3QpO1xuICAgIHJldHVybiB0aGlzLl9ibm9kZV9jb250ZXh0KGJub2Rlcywgc3Qud2h5KTtcbiAgfTtcblxuICBzcGFycWwucHJvdG90eXBlLl9jb250ZXh0X3doZXJlID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgc3BhcnFsID0gdGhpcztcbiAgICByZXR1cm4gIWNvbnRleHQgfHwgY29udGV4dC5sZW5ndGggPT09IDAgPyAnJyA6ICdXSEVSRSB7ICcgKyBjb250ZXh0Lm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHNwYXJxbC5hbm9ueW1pemVOVCh4KTtcbiAgICB9KS5qb2luKCdcXG4nKSArICcgfVxcbic7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5fZmlyZSA9IGZ1bmN0aW9uICh1cmksIHF1ZXJ5LCBjYWxsYmFjaykge1xuICAgIGlmICghdXJpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFVSSSBnaXZlbiBmb3IgcmVtb3RlIGVkaXRpbmcgb3BlcmF0aW9uOiAnICsgcXVlcnkpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnc3BhcnFsOiBzZW5kaW5nIHVwZGF0ZSB0byA8JyArIHVyaSArICc+Jyk7XG4gICAgdmFyIHhociA9IFV0aWwuWE1MSFRUUEZhY3RvcnkoKTtcbiAgICB4aHIub3B0aW9ucyA9IHt9O1xuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGR1bXAoXCJTUEFSUUwgdXBkYXRlIHJlYWR5IHN0YXRlIGZvciA8XCIrdXJpK1wiPiByZWFkeVN0YXRlPVwiK3hoci5yZWFkeVN0YXRlK1wiXFxuXCIrcXVlcnkrXCJcXG5cIilcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICB2YXIgc3VjY2VzcyA9ICF4aHIuc3RhdHVzIHx8IHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDA7XG4gICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdzcGFycWw6IHVwZGF0ZSBmYWlsZWQgZm9yIDwnICsgdXJpICsgJz4gc3RhdHVzPScgKyB4aHIuc3RhdHVzICsgJywgJyArIHhoci5zdGF0dXNUZXh0ICsgJywgYm9keSBsZW5ndGg9JyArIHhoci5yZXNwb25zZVRleHQubGVuZ3RoICsgJ1xcbiAgIGZvciBxdWVyeTogJyArIHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnc3BhcnFsOiB1cGRhdGUgT2sgZm9yIDwnICsgdXJpICsgJz4nKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayh1cmksIHN1Y2Nlc3MsIHhoci5yZXNwb25zZVRleHQsIHhocik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhoci5vcGVuKCdQQVRDSCcsIHVyaSwgdHJ1ZSk7IC8vIGFzeW5jPXRydWVcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3NwYXJxbC11cGRhdGUnKTtcbiAgICB4aHIuc2VuZChxdWVyeSk7XG4gIH07XG5cbiAgLy8gVGhpcyBkb2VzIE5PVCB1cGRhdGUgdGhlIHN0YXRlbWVudC5cbiAgLy8gSXQgcmV0dXJucyBhbiBvYmplY3Qgd2hjaWggaW5jbHVkZXNcbiAgLy8gIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGNoYW5nZSB0aGUgb2JqZWN0IG9mIHRoZSBzdGF0ZW1lbnQuXG4gIC8vXG4gIHNwYXJxbC5wcm90b3R5cGUudXBkYXRlX3N0YXRlbWVudCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnQpIHtcbiAgICBpZiAoc3RhdGVtZW50ICYmICFzdGF0ZW1lbnQud2h5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzcGFycWwgPSB0aGlzO1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5fc3RhdGVtZW50X2NvbnRleHQoc3RhdGVtZW50KTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZW1lbnQ6IHN0YXRlbWVudCA/IFtzdGF0ZW1lbnQuc3ViamVjdCwgc3RhdGVtZW50LnByZWRpY2F0ZSwgc3RhdGVtZW50Lm9iamVjdCwgc3RhdGVtZW50LndoeV0gOiB1bmRlZmluZWQsXG4gICAgICBzdGF0ZW1lbnROVDogc3RhdGVtZW50ID8gdGhpcy5hbm9ueW1pemVOVChzdGF0ZW1lbnQpIDogdW5kZWZpbmVkLFxuICAgICAgd2hlcmU6IHNwYXJxbC5fY29udGV4dF93aGVyZShjb250ZXh0KSxcblxuICAgICAgc2V0X29iamVjdDogZnVuY3Rpb24gc2V0X29iamVjdChvYmosIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMud2hlcmU7XG4gICAgICAgIHF1ZXJ5ICs9ICdERUxFVEUgREFUQSB7ICcgKyB0aGlzLnN0YXRlbWVudE5UICsgJyB9IDtcXG4nO1xuICAgICAgICBxdWVyeSArPSAnSU5TRVJUIERBVEEgeyAnICsgdGhpcy5hbm9ueW1pemUodGhpcy5zdGF0ZW1lbnRbMF0pICsgJyAnICsgdGhpcy5hbm9ueW1pemUodGhpcy5zdGF0ZW1lbnRbMV0pICsgJyAnICsgdGhpcy5hbm9ueW1pemUob2JqKSArICcgJyArICcgLiB9XFxuJztcblxuICAgICAgICBzcGFycWwuX2ZpcmUodGhpcy5zdGF0ZW1lbnRbM10udXJpLCBxdWVyeSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5pbnNlcnRfc3RhdGVtZW50ID0gZnVuY3Rpb24gKHN0LCBjYWxsYmFjaykge1xuICAgIHZhciBzdDAgPSBzdCBpbnN0YW5jZW9mIEFycmF5ID8gc3RbMF0gOiBzdDtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLl9jb250ZXh0X3doZXJlKHRoaXMuX3N0YXRlbWVudF9jb250ZXh0KHN0MCkpO1xuXG4gICAgaWYgKHN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHZhciBzdFRleHQgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RUZXh0ICs9IHN0W2ldICsgJ1xcbic7XG4gICAgICB9cXVlcnkgKz0gJ0lOU0VSVCBEQVRBIHsgJyArIHN0VGV4dCArICcgfVxcbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5ICs9ICdJTlNFUlQgREFUQSB7ICcgKyB0aGlzLmFub255bWl6ZShzdC5zdWJqZWN0KSArICcgJyArIHRoaXMuYW5vbnltaXplKHN0LnByZWRpY2F0ZSkgKyAnICcgKyB0aGlzLmFub255bWl6ZShzdC5vYmplY3QpICsgJyAnICsgJyAuIH1cXG4nO1xuICAgIH1cblxuICAgIHRoaXMuX2ZpcmUoc3QwLndoeS51cmksIHF1ZXJ5LCBjYWxsYmFjayk7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5kZWxldGVfc3RhdGVtZW50ID0gZnVuY3Rpb24gKHN0LCBjYWxsYmFjaykge1xuICAgIHZhciBzdDAgPSBzdCBpbnN0YW5jZW9mIEFycmF5ID8gc3RbMF0gOiBzdDtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLl9jb250ZXh0X3doZXJlKHRoaXMuX3N0YXRlbWVudF9jb250ZXh0KHN0MCkpO1xuXG4gICAgaWYgKHN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHZhciBzdFRleHQgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RUZXh0ICs9IHN0W2ldICsgJ1xcbic7XG4gICAgICB9cXVlcnkgKz0gJ0RFTEVURSBEQVRBIHsgJyArIHN0VGV4dCArICcgfVxcbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5ICs9ICdERUxFVEUgREFUQSB7ICcgKyB0aGlzLmFub255bWl6ZShzdC5zdWJqZWN0KSArICcgJyArIHRoaXMuYW5vbnltaXplKHN0LnByZWRpY2F0ZSkgKyAnICcgKyB0aGlzLmFub255bWl6ZShzdC5vYmplY3QpICsgJyAnICsgJyAuIH1cXG4nO1xuICAgIH1cblxuICAgIHRoaXMuX2ZpcmUoc3QwLndoeS51cmksIHF1ZXJ5LCBjYWxsYmFjayk7XG4gIH07XG5cbiAgLy8gIFJlcXVlc3QgYSBub3cgb3IgZnV0dXJlIGFjdGlvbiB0byByZWZyZXNoIGNoYW5nZXMgY29taW5nIGRvd25zdHJlYW1cbiAgLy9cbiAgLy8gVGhpcyBpcyBkZXNpZ25lZCB0byBhbGxvdyB0aGUgc3lzdGVtIHRvIHJlLXJlcXVlc3QgdGhlIHNlcnZlciB2ZXJzaW9uLFxuICAvLyB3aGVuIGEgd2Vic29ja2V0IGhhcyBwaW5nZWQgdG8gc2F5IHRoZXJlIGFyZSBjaGFuZ2VzLlxuICAvLyBJZiB0aGV3ZWJzb2NrZXQsIGJ5IGNvbnRyYXN0LCBoYXMgc2VudCBhIHBhdGNoLCB0aGVuIHRoaXMgbWF5IG5vdCBiZSBuZWNlc3NhcnkuXG4gIC8vIFRoaXMgbWF5IGJlIGNhbGxlZCBvdXQgb2YgY29udGV4dCBzbyAqdGhpcyogY2Fubm90IGJlIHVzZWQuXG5cbiAgc3BhcnFsLnByb3RvdHlwZS5yZXF1ZXN0RG93bnN0cmVhbUFjdGlvbiA9IGZ1bmN0aW9uIChkb2MsIGFjdGlvbikge1xuICAgIHZhciBjb250cm9sID0gdGhpcy5wYXRjaENvbnRyb2xGb3IoZG9jKTtcbiAgICBpZiAoIWNvbnRyb2wucGVuZGluZ1Vwc3RyZWFtKSB7XG4gICAgICBhY3Rpb24oZG9jKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbnRyb2wuZG93bnN0cmVhbUFjdGlvbikge1xuICAgICAgICBpZiAoY29udHJvbC5kb3duc3RyZWFtQWN0aW9uID09PSBhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgd2FpdCBmb3IgPiAxIGRpZmZlcm50IGRvd25zdHJlYW0gYWN0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udHJvbC5kb3duc3RyZWFtQWN0aW9uID0gYWN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBXZSB3YW50IHRvIHN0YXJ0IGNvdW50aW5nIHdlYnNvY2t0IG5vdGlmaWNhdGlvbnNcbiAgLy8gdG8gZGlzdGluZ3Vpc2ggdGhlIG9uZXMgZnJvbSBvdGhlcnMgZnJvbSBvdXIgb3duLlxuICBzcGFycWwucHJvdG90eXBlLmNsZWFyVXBzdHJlYW1Db3VudCA9IGZ1bmN0aW9uIChkb2MpIHtcbiAgICB2YXIgY29udHJvbCA9IHRoaXMucGF0Y2hDb250cm9sRm9yKGRvYyk7XG4gICAgY29udHJvbC51cHN0cmVhbUNvdW50ID0gMDtcbiAgfTtcblxuICBzcGFycWwucHJvdG90eXBlLmdldFVwZGF0ZXNWaWEgPSBmdW5jdGlvbiAoZG9jKSB7XG4gICAgdmFyIGxpbmtIZWFkZXJzID0gdGhpcy5zdG9yZS5mZXRjaGVyLmdldEhlYWRlcihkb2MsICd1cGRhdGVzLXZpYScpO1xuICAgIGlmICghbGlua0hlYWRlcnMgfHwgIWxpbmtIZWFkZXJzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGxpbmtIZWFkZXJzWzBdLnRyaW0oKTtcbiAgfTtcblxuICBzcGFycWwucHJvdG90eXBlLmFkZERvd25zdHJlYW1DaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChkb2MsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGNvbnRyb2wgPSB0aGlzLnBhdGNoQ29udHJvbEZvcihkb2MpO1xuICAgIGlmICghY29udHJvbC5kb3duc3RyZWFtQ2hhbmdlTGlzdGVuZXJzKSBjb250cm9sLmRvd25zdHJlYW1DaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgICBjb250cm9sLmRvd25zdHJlYW1DaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuc2V0UmVmcmVzaEhhbmRsZXIoZG9jLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAvLyBhIGZ1bmN0aW9uIG5vdCBhIG1ldGhvZFxuICAgICAgc2VsZi5yZWxvYWRBbmRTeW5jKGRvYyk7XG4gICAgfSk7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5yZWxvYWRBbmRTeW5jID0gZnVuY3Rpb24gKGRvYykge1xuICAgIHZhciBjb250cm9sID0gdGhpcy5wYXRjaENvbnRyb2xGb3IoZG9jKTtcbiAgICB2YXIgdXBkYXRlciA9IHRoaXM7XG5cbiAgICBpZiAoY29udHJvbC5yZWxvYWRpbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCcgICBBbHJlYWR5IHJlbG9hZGluZyAtIHN0b3AnKTtcbiAgICAgIHJldHVybjsgLy8gb25jZSBvbmx5IG5lZWRlZFxuICAgIH1cbiAgICBjb250cm9sLnJlbG9hZGluZyA9IHRydWU7XG4gICAgdmFyIHJldHJ5VGltZW91dCA9IDEwMDA7IC8vIG1zXG4gICAgdmFyIHRyeVJlbG9hZCA9IGZ1bmN0aW9uIHRyeVJlbG9hZCgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0cnkgcmVsb2FkIC0gdGltZW91dCA9ICcgKyByZXRyeVRpbWVvdXQpO1xuICAgICAgdXBkYXRlci5yZWxvYWQodXBkYXRlci5zdG9yZSwgZG9jLCBmdW5jdGlvbiAob2ssIG1lc3NhZ2UsIHhocikge1xuICAgICAgICBjb250cm9sLnJlbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBpZiAoY29udHJvbC5kb3duc3RyZWFtQ2hhbmdlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2wuZG93bnN0cmVhbUNoYW5nZUxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnICAgICAgICBDYWxsaW5nIGRvd25zdHJlYW0gbGlzdGVuZXIgJyArIGkpO1xuICAgICAgICAgICAgICBjb250cm9sLmRvd25zdHJlYW1DaGFuZ2VMaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXR3b3JrIGVycm9yIHJlZnJlc2hpbmcgdGhlIGRhdGEuIFJldHJ5aW5nIGluICcgKyByZXRyeVRpbWVvdXQgLyAxMDAwKTtcbiAgICAgICAgICAgIGNvbnRyb2wucmVsb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHJ5VGltZW91dCA9IHJldHJ5VGltZW91dCAqIDI7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRyeVJlbG9hZCwgcmV0cnlUaW1lb3V0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yICcgKyB4aHIuc3RhdHVzICsgJ3JlZnJlc2hpbmcgdGhlIGRhdGE6JyArIG1lc3NhZ2UgKyAnLiBTdG9wcGVkJyArIGRvYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRyeVJlbG9hZCgpO1xuICB9O1xuXG4gIC8vIFNldCB1cCB3ZWJzb2NrZXQgdG8gbGlzdGVuIG9uXG4gIC8vXG4gIC8vIFRoZXJlIGlzIGNvb3JkaW5hdGlvbiBiZXR3ZWVuIHVwc3RyZWFtIGNoYW5nZXMgYW5kIGRvd25zdHJlYW0gb25lc1xuICAvLyBzbyB0aGF0IGEgcmVsb2FkIGlzIG5vdCBkb25lIGluIHRoZSBtaWRkbGUgb2YgYW4gdXBzdGVlYW0gcGF0Y2guXG4gIC8vIElmIHlvdSB1c2llIHRoaXMgQVBJIHRoZW4geW91IGdldCBjYWxsZWQgd2hlbiBhIGNoYW5nZSBoYXBwZW5zLCBhbmQgeW91XG4gIC8vIGhhdmUgdG8gcmVsb2FkIHRoZSBmaWxlIHlvdXJzZWxmLCBhbmQgdGhlbiByZWZyZXNoIHRoZSBVSS5cbiAgLy8gQWx0ZXJuYXRpdmUgaXMgYWRkRG93bnN0cmVhbUNoYW5nZUxpc3RlbmVyKCksIHdoZXJlIHlvdSBkbyBub3RcbiAgLy8gaGF2ZSB0byBkbyB0aGUgcmVsb2FkIHlvdXJzbGYuIERvIG1vdCBtaXggdGhlbS5cbiAgLy9cbiAgLy8gIGtiIGNvbnRhaW5zIHRoZSBIVFRQICBtZXRhZGF0YSBmcm9tIHByZWZ2aW91cyBvcGVyYXRpb25zXG4gIC8vXG4gIHNwYXJxbC5wcm90b3R5cGUuc2V0UmVmcmVzaEhhbmRsZXIgPSBmdW5jdGlvbiAoZG9jLCBoYW5kbGVyKSB7XG4gICAgdmFyIHdzc1VSSSA9IHRoaXMuZ2V0VXBkYXRlc1ZpYShkb2MpOyAvLyByZWxhdGl2ZVxuICAgIC8vIHZhciBrYiA9IHRoaXMuc3RvcmVcbiAgICB2YXIgdGhlSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB1cGRhdGVyID0gdGhpcztcbiAgICB2YXIgcmV0cnlUaW1lb3V0ID0gMTUwMDsgLy8gKjIgd2lsbCBiZSAzIFNlY29uZHMsIDYsIDEyLCBldGNcbiAgICB2YXIgcmV0cmllcyA9IDA7XG5cbiAgICBpZiAoIXdzc1VSSSkge1xuICAgICAgY29uc29sZS5sb2coJ1NlcnZlciBkb2llcyBub3Qgc3VwcG9ydCBsaXZlIHVwZGF0ZXMgdGhvdWdoVXBkYXRlcy1WaWEgOi0oJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgd3NzVVJJID0gdXJpSm9pbih3c3NVUkksIGRvYy51cmkpO1xuICAgIHdzc1VSSSA9IHdzc1VSSS5yZXBsYWNlKC9eaHR0cDovLCAnd3M6JykucmVwbGFjZSgvXmh0dHBzOi8sICd3c3M6Jyk7XG4gICAgY29uc29sZS5sb2coJ1dlYiBzb2NrZXQgVVJJICcgKyB3c3NVUkkpO1xuXG4gICAgdmFyIG9wZW5XZWJzb2NrZXQgPSBmdW5jdGlvbiBvcGVuV2Vic29ja2V0KCkge1xuICAgICAgLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vc29saWQvc29saWQtc3BlYyNsaXZlLXVwZGF0ZXNcbiAgICAgIHZhciBzb2NrZXQ7XG4gICAgICBpZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc29ja2V0ID0gbmV3IFdlYlNvY2tldCh3c3NVUkkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgU2VydmljZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIEZpcmVmb3ggYWRkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQyNDQ4ODYvaXMtd2Vic29ja2V0LXN1cHBvcnRlZC1pbi1maXJlZm94LWZvci1hbmRyb2lkLWFkZG9uc1xuICAgICAgICBzb2NrZXQgPSBTZXJ2aWNlcy53bS5nZXRNb3N0UmVjZW50V2luZG93KCduYXZpZ2F0b3I6YnJvd3NlcicpLldlYlNvY2tldCh3c3NVUkkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuV2ViU29ja2V0KSB7XG4gICAgICAgIHNvY2tldCA9IHdpbmRvdy5XZWJTb2NrZXQod3NzVVJJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMaXZlIHVwZGF0ZSBkaXNhYmxlZCwgYXMgV2ViU29ja2V0IG5vdCBzdXBwb3J0ZWQgYnkgcGxhdGZvcm0gOi0oJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcgICAgd2Vic29ja2V0IG9wZW4nKTtcbiAgICAgICAgcmV0cnlUaW1lb3V0ID0gMTUwMDsgLy8gcmVzZXQgdGltZW91dCB0byBmYXN0IG9uIHN1Y2Nlc3NcbiAgICAgICAgdGhpcy5zZW5kKCdzdWIgJyArIGRvYy51cmkpO1xuICAgICAgICBpZiAocmV0cmllcykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdXZWIgc29ja2V0IGhhcyBiZWVuIGRvd24sIGJldHRlciBjaGVjayBmb3IgYW55IG5ld3MuJyk7XG4gICAgICAgICAgdXBkYXRlci5yZXF1ZXN0RG93bnN0cmVhbUFjdGlvbihkb2MsIHRoZUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNvbnRyb2wgPSBzZWxmLnBhdGNoQ29udHJvbEZvcihkb2MpO1xuICAgICAgY29udHJvbC51cHN0cmVhbUNvdW50ID0gMDtcblxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnRcbiAgICAgIC8vXG4gICAgICAvLyAxMDAwXHRDTE9TRV9OT1JNQUxcdE5vcm1hbCBjbG9zdXJlOyB0aGUgY29ubmVjdGlvbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHdoYXRldmVyIHB1cnBvc2UgZm9yIHdoaWNoIGl0IHdhcyBjcmVhdGVkLlxuICAgICAgLy8gMTAwMVx0Q0xPU0VfR09JTkdfQVdBWVx0VGhlIGVuZHBvaW50IGlzIGdvaW5nIGF3YXksIGVpdGhlclxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBvZiBhIHNlcnZlciBmYWlsdXJlIG9yIGJlY2F1c2UgdGhlIGJyb3dzZXIgaXMgbmF2aWdhdGluZyBhd2F5IGZyb20gdGhlIHBhZ2UgdGhhdCBvcGVuZWQgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAvLyAxMDAyXHRDTE9TRV9QUk9UT0NPTF9FUlJPUlx0VGhlIGVuZHBvaW50IGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGR1ZSB0byBhIHByb3RvY29sIGVycm9yLlxuICAgICAgLy8gMTAwM1x0Q0xPU0VfVU5TVVBQT1JURURcdFRoZSBjb25uZWN0aW9uIGlzIGJlaW5nIHRlcm1pbmF0ZWQgYmVjYXVzZSB0aGUgZW5kcG9pbnRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGRhdGEgb2YgYSB0eXBlIGl0IGNhbm5vdCBhY2NlcHQgKGZvciBleGFtcGxlLCBhIHRleHQtb25seSBlbmRwb2ludCByZWNlaXZlZCBiaW5hcnkgZGF0YSkuXG4gICAgICAvLyAxMDA0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXNlcnZlZC4gQSBtZWFuaW5nIG1pZ2h0IGJlIGRlZmluZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgIC8vIDEwMDVcdENMT1NFX05PX1NUQVRVU1x0UmVzZXJ2ZWQuICBJbmRpY2F0ZXMgdGhhdCBubyBzdGF0dXMgY29kZSB3YXMgcHJvdmlkZWQgZXZlbiB0aG91Z2ggb25lIHdhcyBleHBlY3RlZC5cbiAgICAgIC8vIDEwMDZcdENMT1NFX0FCTk9STUFMXHRSZXNlcnZlZC4gVXNlZCB0byBpbmRpY2F0ZSB0aGF0IGEgY29ubmVjdGlvbiB3YXMgY2xvc2VkIGFibm9ybWFsbHkgKFxuICAgICAgLy9cbiAgICAgIC8vXG4gICAgICBzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygnKioqIFdlYnNvY2tldCBjbG9zZWQgd2l0aCBjb2RlICcgKyBldmVudC5jb2RlICsgXCIsIHJlYXNvbiAnXCIgKyBldmVudC5yZWFzb24gKyBcIicgY2xlYW4gPSBcIiArIGV2ZW50LmNsZWFuKTtcbiAgICAgICAgcmV0cnlUaW1lb3V0ICo9IDI7XG4gICAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgICAgY29uc29sZS5sb2coJ1JldHJ5aW5nIGluICcgKyByZXRyeVRpbWVvdXQgKyAnbXMnKTsgLy8gKGFzayB1c2VyPylcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1RyeWluZyB3ZWJzb2NrZXQgYWdhaW4nKTtcbiAgICAgICAgICBvcGVuV2Vic29ja2V0KCk7XG4gICAgICAgIH0sIHJldHJ5VGltZW91dCk7XG4gICAgICB9O1xuICAgICAgc29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgaWYgKG1zZy5kYXRhICYmIG1zZy5kYXRhLnNsaWNlKDAsIDMpID09PSAncHViJykge1xuICAgICAgICAgIGlmICgndXBzdHJlYW1Db3VudCcgaW4gY29udHJvbCkge1xuICAgICAgICAgICAgY29udHJvbC51cHN0cmVhbUNvdW50IC09IDE7XG4gICAgICAgICAgICBpZiAoY29udHJvbC51cHN0cmVhbUNvdW50ID49IDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2p1c3QgYW4gZWNobzogJyArIGNvbnRyb2wudXBzdHJlYW1Db3VudCk7XG4gICAgICAgICAgICAgIHJldHVybjsgLy8gSnVzdCBhbiBlY2hvXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKCdBc3N1bWUgYSByZWFsIGRvd25zdHJlYW0gY2hhbmdlOiAnICsgY29udHJvbC51cHN0cmVhbUNvdW50ICsgJyAtPiAwJyk7XG4gICAgICAgICAgY29udHJvbC51cHN0cmVhbUNvdW50ID0gMDtcbiAgICAgICAgICBzZWxmLnJlcXVlc3REb3duc3RyZWFtQWN0aW9uKGRvYywgdGhlSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTsgLy8gb3BlbldlYnNvY2tldFxuICAgIG9wZW5XZWJzb2NrZXQoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFRoaXMgaGlnaC1sZXZlbCBmdW5jdGlvbiB1cGRhdGVzIHRoZSBsb2NhbCBzdG9yZSBpZmYgdGhlIHdlYiBpcyBjaGFuZ2VkIHN1Y2Nlc3NmdWxseS5cbiAgLy9cbiAgLy8gIC0gZGVsZXRpb25zLCBpbnNlcnRpb25zIG1heSBiZSB1bmRlZmluZWQgb3Igc2luZ2xlIHN0YXRlbWVudHMgb3IgbGlzdHMgb3IgZm9ybXVsYWUuXG4gIC8vICAgICAgKG1heSBjb250YWluIGJub2RlcyB3aGljaCBjYW4gYmUgaW5kaXJlY3RseSBpZGVudGlmaWVkIGJ5IGEgd2hlcmUgY2xhdXNlKVxuICAvL1xuICAvLyAgLSBjYWxsYmFjayBpcyBjYWxsZWQgYXMgY2FsbGJhY2sodXJpLCBzdWNjZXNzLCBlcnJvcmJvZHkpXG4gIC8vXG4gIHNwYXJxbC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlbGV0aW9ucywgaW5zZXJ0aW9ucywgY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGtiID0gdGhpcy5zdG9yZTtcbiAgICAgIHZhciBkcyA9ICFkZWxldGlvbnMgPyBbXSA6IGRlbGV0aW9ucyBpbnN0YW5jZW9mIF9pbmRleGVkRm9ybXVsYTIuZGVmYXVsdCA/IGRlbGV0aW9ucy5zdGF0ZW1lbnRzIDogZGVsZXRpb25zIGluc3RhbmNlb2YgQXJyYXkgPyBkZWxldGlvbnMgOiBbZGVsZXRpb25zXTtcbiAgICAgIHZhciBpcyA9ICFpbnNlcnRpb25zID8gW10gOiBpbnNlcnRpb25zIGluc3RhbmNlb2YgX2luZGV4ZWRGb3JtdWxhMi5kZWZhdWx0ID8gaW5zZXJ0aW9ucy5zdGF0ZW1lbnRzIDogaW5zZXJ0aW9ucyBpbnN0YW5jZW9mIEFycmF5ID8gaW5zZXJ0aW9ucyA6IFtpbnNlcnRpb25zXTtcbiAgICAgIGlmICghKGRzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVHlwZSBFcnJvciAnICsgKHR5cGVvZiBkcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZHMpKSArICc6ICcgKyBkcyk7XG4gICAgICB9XG4gICAgICBpZiAoIShpcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1R5cGUgRXJyb3IgJyArICh0eXBlb2YgaXMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlzKSkgKyAnOiAnICsgaXMpO1xuICAgICAgfVxuICAgICAgaWYgKGRzLmxlbmd0aCA9PT0gMCAmJiBpcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHRydWUpOyAvLyBzdWNjZXNzIC0tIG5vdGhpbmcgbmVlZGVkIHRvIGJlIGRvbmUuXG4gICAgICB9XG4gICAgICB2YXIgZG9jID0gZHMubGVuZ3RoID8gZHNbMF0ud2h5IDogaXNbMF0ud2h5O1xuICAgICAgdmFyIGNvbnRyb2wgPSB0aGlzLnBhdGNoQ29udHJvbEZvcihkb2MpO1xuICAgICAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIHZhciBwcm9wcyA9IFsnc3ViamVjdCcsICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgJ3doeSddO1xuICAgICAgdmFyIHZlcmJzID0gWydpbnNlcnQnLCAnZGVsZXRlJ107XG4gICAgICB2YXIgY2xhdXNlcyA9IHsgJ2RlbGV0ZSc6IGRzLCAnaW5zZXJ0JzogaXMgfTtcbiAgICAgIHZlcmJzLm1hcChmdW5jdGlvbiAodmVyYikge1xuICAgICAgICBjbGF1c2VzW3ZlcmJdLm1hcChmdW5jdGlvbiAoc3QpIHtcbiAgICAgICAgICBpZiAoIWRvYy5zYW1lVGVybShzdC53aHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZTogZGVzdGluYXRpb24gJyArIGRvYyArICcgaW5jb25zaXN0ZW50IHdpdGggZGVsZXRlIHF1YWQgJyArIHN0LndoeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdFtwcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1cGRhdGU6IHVuZGVmaW5lZCAnICsgcHJvcCArICcgb2Ygc3RhdGVtZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcHJvdG9jb2wgPSB0aGlzLmVkaXRhYmxlKGRvYy51cmksIGtiKTtcbiAgICAgIGlmICghcHJvdG9jb2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgbWFrZSBjaGFuZ2VzIGluIHVuZWRpdGFibGUgXCIgKyBkb2MpO1xuICAgICAgfVxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbmV3U3RzO1xuICAgICAgdmFyIGRvY3VtZW50U3RyaW5nO1xuICAgICAgdmFyIHN6O1xuICAgICAgaWYgKHByb3RvY29sLmluZGV4T2YoJ1NQQVJRTCcpID49IDApIHtcbiAgICAgICAgdmFyIGJub2RlcyA9IFtdO1xuICAgICAgICBpZiAoZHMubGVuZ3RoKSBibm9kZXMgPSB0aGlzLl9zdGF0ZW1lbnRfYXJyYXlfYm5vZGVzKGRzKTtcbiAgICAgICAgaWYgKGlzLmxlbmd0aCkgYm5vZGVzID0gYm5vZGVzLmNvbmNhdCh0aGlzLl9zdGF0ZW1lbnRfYXJyYXlfYm5vZGVzKGlzKSk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fYm5vZGVfY29udGV4dChibm9kZXMsIGRvYyk7XG4gICAgICAgIHZhciB3aGVyZUNsYXVzZSA9IHRoaXMuX2NvbnRleHRfd2hlcmUoY29udGV4dCk7XG4gICAgICAgIHZhciBxdWVyeSA9ICcnO1xuICAgICAgICBpZiAod2hlcmVDbGF1c2UubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gSXMgdGhlcmUgYSBXSEVSRSBjbGF1c2U/XG4gICAgICAgICAgaWYgKGRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcXVlcnkgKz0gJ0RFTEVURSB7ICc7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgcXVlcnkgKz0gdGhpcy5hbm9ueW1pemVOVChkc1tpXSkgKyAnXFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXJ5ICs9ICcgfVxcbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHF1ZXJ5ICs9ICdJTlNFUlQgeyAnO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5ICs9IHRoaXMuYW5vbnltaXplTlQoaXNbaV0pICsgJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSArPSAnIH1cXG4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxdWVyeSArPSB3aGVyZUNsYXVzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyB3aGVyZSBjbGF1c2VcbiAgICAgICAgICBpZiAoZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBxdWVyeSArPSAnREVMRVRFIERBVEEgeyAnO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5ICs9IHRoaXMuYW5vbnltaXplTlQoZHNbaV0pICsgJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSArPSAnIH0gXFxuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGRzLmxlbmd0aCkgcXVlcnkgKz0gJyA7ICc7XG4gICAgICAgICAgICBxdWVyeSArPSAnSU5TRVJUIERBVEEgeyAnO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5ICs9IHRoaXMuYW5vbnltaXplTlQoaXNbaV0pICsgJ1xcbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSArPSAnIH1cXG4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFjayBwZW5kaW5nIHVwc3RyZWFtIHBhdGNoZXMgdW50aWwgdGhleSBoYXZlIGZuaXNoZWQgdGhlaXIgY2FsbGJhY2tcbiAgICAgICAgY29udHJvbC5wZW5kaW5nVXBzdHJlYW0gPSBjb250cm9sLnBlbmRpbmdVcHN0cmVhbSA/IGNvbnRyb2wucGVuZGluZ1Vwc3RyZWFtICsgMSA6IDE7XG4gICAgICAgIGlmICgndXBzdHJlYW1Db3VudCcgaW4gY29udHJvbCkge1xuICAgICAgICAgIGNvbnRyb2wudXBzdHJlYW1Db3VudCArPSAxOyAvLyBjb3VudCBjaGFuZ2VzIHdlIG9yaWdpbmF0ZWQgb3Vyc2VsdmVzXG4gICAgICAgICAgY29uc29sZS5sb2coJ3Vwc3RyZWFtIGNvdW50IHVwIHRvIDogJyArIGNvbnRyb2wudXBzdHJlYW1Db3VudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9maXJlKGRvYy51cmksIHF1ZXJ5LCBmdW5jdGlvbiAodXJpLCBzdWNjZXNzLCBib2R5LCB4aHIpIHtcbiAgICAgICAgICB4aHIuZWxhcHNlZFRpbWVfbXMgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCcgICAgc3BhcnFsOiBSZXR1cm4gJyArIChzdWNjZXNzID8gJ3N1Y2Nlc3MnIDogJ0ZBSUxVUkUgJyArIHhoci5zdGF0dXMpICsgJyBlbGFwc2VkICcgKyB4aHIuZWxhcHNlZFRpbWVfbXMgKyAnbXMnKTtcbiAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAga2IucmVtb3ZlKGRzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICBib2R5ID0gJ1JlbW90ZSBPayBCVVQgZXJyb3IgZGVsZXRpbmcgJyArIGRzLmxlbmd0aCArICcgZnJvbSBzdG9yZSEhISAnICsgZTtcbiAgICAgICAgICAgIH0gLy8gQWRkIGluIGFueSBjYXNlIC0tIGhlbHAgcmVjb3ZlciBmcm9tIHdlaXJkbmVzcz8/XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtiLmFkZChpc1tpXS5zdWJqZWN0LCBpc1tpXS5wcmVkaWNhdGUsIGlzW2ldLm9iamVjdCwgZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWxsYmFjayh1cmksIHN1Y2Nlc3MsIGJvZHksIHhocik7XG4gICAgICAgICAgY29udHJvbC5wZW5kaW5nVXBzdHJlYW0gLT0gMTtcbiAgICAgICAgICAvLyBXaGVuIHVwc3RyZWFtIHBhdGNoZXMgaGF2ZSBiZWVuIHNlbnQsIHJlbG9hZCBzdGF0ZSBpZiBkb3duc3RyZWFtIHdhaXRpbmdcbiAgICAgICAgICBpZiAoY29udHJvbC5wZW5kaW5nVXBzdHJlYW0gPT09IDAgJiYgY29udHJvbC5kb3duc3RyZWFtQWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZG93bnN0cmVhbUFjdGlvbiA9IGNvbnRyb2wuZG93bnN0cmVhbUFjdGlvbjtcbiAgICAgICAgICAgIGRlbGV0ZSBjb250cm9sLmRvd25zdHJlYW1BY3Rpb247XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsYXllZCBkb3duc3RyZWFtIGFjdGlvbjonKTtcbiAgICAgICAgICAgIGRvd25zdHJlYW1BY3Rpb24oZG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwcm90b2NvbC5pbmRleE9mKCdEQVYnKSA+PSAwKSB7XG4gICAgICAgIC8vIFRoZSBjb2RlIGJlbG93IGlzIGRlcml2ZWQgZnJvbSBLZW5ueSdzIFVwZGF0ZUNlbnRlci5qc1xuICAgICAgICBkb2N1bWVudFN0cmluZztcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBrYi5hbnkoZG9jLCB0aGlzLm5zLmxpbmsoJ3JlcXVlc3QnKSk7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVjb3JkIG9mIG91ciBIVFRQIEdFVCByZXF1ZXN0IGZvciBkb2N1bWVudDogJyArIGRvYyk7XG4gICAgICAgIH0gLy8gc2hvdWxkIG5vdCBoYXBwZW5cbiAgICAgICAgdmFyIHJlc3BvbnNlID0ga2IuYW55KHJlcXVlc3QsIHRoaXMubnMubGluaygncmVzcG9uc2UnKSk7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhyb3cgXCJObyByZWNvcmQgSFRUUCBHRVQgcmVzcG9uc2UgZm9yIGRvY3VtZW50OiBcIitkb2NcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudF90eXBlID0ga2IudGhlKHJlc3BvbnNlLCB0aGlzLm5zLmh0dHBoKCdjb250ZW50LXR5cGUnKSkudmFsdWU7XG5cbiAgICAgICAgLy8gcHJlcGFyZSBjb250ZW50cyBvZiByZXZpc2VkIGRvY3VtZW50XG4gICAgICAgIG5ld1N0cyA9IGtiLnN0YXRlbWVudHNNYXRjaGluZyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkb2MpLnNsaWNlKCk7IC8vIGNvcHkhXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIFV0aWwuUkRGQXJyYXlSZW1vdmUobmV3U3RzLCBkc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbmV3U3RzLnB1c2goaXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VyaWFsaXplIHRvIHRlIGFwcHJvcHJpYXRlIGZvcm1hdFxuICAgICAgICBzeiA9IFNlcmlhbGl6ZXIoa2IpO1xuICAgICAgICBzei5zdWdnZXN0TmFtZXNwYWNlcyhrYi5uYW1lc3BhY2VzKTtcbiAgICAgICAgc3ouc2V0QmFzZShkb2MudXJpKTsgLy8gPz8gYmV3YXJlIG9mIHRoaXMgLSBrZW5ueSAod2h5PyB0aW0pXG4gICAgICAgIHN3aXRjaCAoY29udGVudF90eXBlKSB7XG4gICAgICAgICAgY2FzZSAnYXBwbGljYXRpb24vcmRmK3htbCc6XG4gICAgICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb1hNTChuZXdTdHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGV4dC9uMyc6XG4gICAgICAgICAgY2FzZSAndGV4dC90dXJ0bGUnOlxuICAgICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL3gtdHVydGxlJzogLy8gTGVnYWN5XG4gICAgICAgICAgY2FzZSAnYXBwbGljYXRpb24vbjMnOlxuICAgICAgICAgICAgLy8gTGVnYWN5XG4gICAgICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb04zKG5ld1N0cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250ZW50LXR5cGUgJyArIGNvbnRlbnRfdHlwZSArICcgbm90IHN1cHBvcnRlZCBmb3IgZGF0YSB3cml0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV3JpdGUgdGhlIG5ldyB2ZXJzaW9uIGJhY2tcblxuICAgICAgICB2YXIgY2FuZGlkYXRlVGFyZ2V0ID0ga2IudGhlKHJlc3BvbnNlLCB0aGlzLm5zLmh0dHBoKCdjb250ZW50LWxvY2F0aW9uJykpO1xuICAgICAgICB2YXIgdGFyZ2V0VVJJO1xuICAgICAgICBpZiAoY2FuZGlkYXRlVGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0VVJJID0gdXJpSm9pbihjYW5kaWRhdGVUYXJnZXQudmFsdWUsIHRhcmdldFVSSSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHhociA9IFV0aWwuWE1MSFRUUEZhY3RvcnkoKTtcbiAgICAgICAgeGhyLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIC8vIGZvcm11bGEgZnJvbSBzcGFycWxVcGRhdGUuanMsIHdoYXQgYWJvdXQgcmVkaXJlY3RzP1xuICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSAheGhyLnN0YXR1cyB8fCB4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwO1xuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGtiLnJlbW92ZShkc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAga2IuYWRkKGlzW2ldLnN1YmplY3QsIGlzW2ldLnByZWRpY2F0ZSwgaXNbaV0ub2JqZWN0LCBkb2MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhkb2MudXJpLCBzdWNjZXNzLCB4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vcGVuKCdQVVQnLCB0YXJnZXRVUkksIHRydWUpO1xuICAgICAgICAvLyBhc3N1bWUgdGhlIHNlcnZlciBkb2VzIFBVVCBjb250ZW50LW5lZ290aWF0aW9uLlxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgY29udGVudF90eXBlKTsgLy8gT0s/XG4gICAgICAgIHhoci5zZW5kKGRvY3VtZW50U3RyaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm90b2NvbC5pbmRleE9mKCdMT0NBTEZJTEUnKSA+PSAwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXcml0aW5nIGJhY2sgdG8gbG9jYWwgZmlsZVxcbicpO1xuICAgICAgICAgICAgLy8gU2VlIGh0dHA6Ly9zaW1vbi1qdW5nLmJsb2dzcG90LmNvbS8yMDA3LzEwL2ZpcmVmb3gtZXh0ZW5zaW9uLWZpbGUtaW8uaHRtbFxuICAgICAgICAgICAgLy8gcHJlcGFyZSBjb250ZW50cyBvZiByZXZpc2VkIGRvY3VtZW50XG4gICAgICAgICAgICBuZXdTdHMgPSBrYi5zdGF0ZW1lbnRzTWF0Y2hpbmcodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZG9jKS5zbGljZSgpOyAvLyBjb3B5IVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIFV0aWwuUkRGQXJyYXlSZW1vdmUobmV3U3RzLCBkc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbmV3U3RzLnB1c2goaXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2VyaWFsaXplIHRvIHRoZSBhcHByb3ByaWF0ZSBmb3JtYXRcbiAgICAgICAgICAgIGRvY3VtZW50U3RyaW5nO1xuICAgICAgICAgICAgc3ogPSBTZXJpYWxpemVyKGtiKTtcbiAgICAgICAgICAgIHN6LnN1Z2dlc3ROYW1lc3BhY2VzKGtiLm5hbWVzcGFjZXMpO1xuICAgICAgICAgICAgc3ouc2V0QmFzZShkb2MudXJpKTsgLy8gPz8gYmV3YXJlIG9mIHRoaXMgLSBrZW5ueSAod2h5PyB0aW0pXG4gICAgICAgICAgICB2YXIgZG90ID0gZG9jLnVyaS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgaWYgKGRvdCA8IDEpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXdyaXRpbmcgZmlsZTogTm8gZmlsZW5hbWUgZXh0ZW5zaW9uOiAnICsgZG9jLnVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXh0ID0gZG9jLnVyaS5zbGljZShkb3QgKyAxKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3JkZic6XG4gICAgICAgICAgICAgIGNhc2UgJ293bCc6IC8vIEp1c3QgbXkgZXhwZXJlbmNlICAgLi4uQEAgd2Ugc2hvdWxkIGtlZXAgdGhlIGZvcm1hdCBpbiB3aGljaCBpdCB3YXMgcGFyc2VkXG4gICAgICAgICAgICAgIGNhc2UgJ3htbCc6XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdHJpbmcgPSBzei5zdGF0ZW1lbnRzVG9YTUwobmV3U3RzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnbjMnOlxuICAgICAgICAgICAgICBjYXNlICdudCc6XG4gICAgICAgICAgICAgIGNhc2UgJ3R0bCc6XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdHJpbmcgPSBzei5zdGF0ZW1lbnRzVG9OMyhuZXdTdHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBleHRlbnNpb24gLicgKyBleHQgKyAnIG5vdCBzdXBwb3J0ZWQgZm9yIGRhdGEgd3JpdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdyaXRlIHRoZSBuZXcgdmVyc2lvbiBiYWNrXG4gICAgICAgICAgICAvLyBjcmVhdGUgY29tcG9uZW50IGZvciBmaWxlIHdyaXRpbmdcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXcml0aW5nIGJhY2s6IDw8PCcgKyBkb2N1bWVudFN0cmluZyArICc+Pj4nKTtcbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IGRvYy51cmkuc2xpY2UoNyk7IC8vIGNob3Agb2ZmICAgZmlsZTovLyAgbGVhdmluZyAvcGF0aFxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJXcml0ZWJhY2s6IEZpbGVuYW1lOiBcIitmaWxlbmFtZStcIlxcblwiKVxuICAgICAgICAgICAgdmFyIGZpbGUgPSBDb21wb25lbnRzLmNsYXNzZXNbJ0Btb3ppbGxhLm9yZy9maWxlL2xvY2FsOzEnXS5jcmVhdGVJbnN0YW5jZShDb21wb25lbnRzLmludGVyZmFjZXMubnNJTG9jYWxGaWxlKTtcbiAgICAgICAgICAgIGZpbGUuaW5pdFdpdGhQYXRoKGZpbGVuYW1lKTtcbiAgICAgICAgICAgIGlmICghZmlsZS5leGlzdHMoKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jld3JpdGluZyBmaWxlIDwnICsgZG9jLnVyaSArICc+IGJ1dCBpdCBkb2VzIG5vdCBleGlzdCEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vIGZpbGUuY3JlYXRlKCBDb21wb25lbnRzLmludGVyZmFjZXMubnNJRmlsZS5OT1JNQUxfRklMRV9UWVBFLCA0MjApXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyBjcmVhdGUgZmlsZSBvdXRwdXQgc3RyZWFtIGFuZCB1c2Ugd3JpdGUvY3JlYXRlL3RydW5jYXRlIG1vZGVcbiAgICAgICAgICAgIC8vIDB4MDIgd3JpdGluZywgMHgwOCBjcmVhdGUgZmlsZSwgMHgyMCB0cnVuY2F0ZSBsZW5ndGggaWYgZXhpc3RcbiAgICAgICAgICAgIHZhciBzdHJlYW0gPSBDb21wb25lbnRzLmNsYXNzZXNbJ0Btb3ppbGxhLm9yZy9uZXR3b3JrL2ZpbGUtb3V0cHV0LXN0cmVhbTsxJ10uY3JlYXRlSW5zdGFuY2UoQ29tcG9uZW50cy5pbnRlcmZhY2VzLm5zSUZpbGVPdXRwdXRTdHJlYW0pO1xuXG4gICAgICAgICAgICAvLyBWYXJpb3VzIEpTIHN5c3RlbXMgb2JqZWN0IHRvIDA2NjYgaW4gc3RydWN0IG1vZGUgYXMgZGFuZ2Vyb3VzXG4gICAgICAgICAgICBzdHJlYW0uaW5pdChmaWxlLCAweDAyIHwgMHgwOCB8IDB4MjAsIHBhcnNlSW50KCcwNjY2JywgOCksIDApO1xuXG4gICAgICAgICAgICAvLyB3cml0ZSBkYXRhIHRvIGZpbGUgdGhlbiBjbG9zZSBvdXRwdXQgc3RyZWFtXG4gICAgICAgICAgICBzdHJlYW0ud3JpdGUoZG9jdW1lbnRTdHJpbmcsIGRvY3VtZW50U3RyaW5nLmxlbmd0aCk7XG4gICAgICAgICAgICBzdHJlYW0uY2xvc2UoKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtiLnJlbW92ZShkc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2IuYWRkKGlzW2ldLnN1YmplY3QsIGlzW2ldLnByZWRpY2F0ZSwgaXNbaV0ub2JqZWN0LCBkb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soZG9jLnVyaSwgdHJ1ZSwgJycpOyAvLyBzdWNjZXNzIVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGRvYy51cmksIGZhbHNlLCAnRXhjZXB0aW9uIHRyeWluZyB0byB3cml0ZSBiYWNrIGZpbGUgPCcgKyBkb2MudXJpICsgJz5cXG4nXG4gICAgICAgICAgICAvLyArIHRhYnVsYXRvci5VdGlsLnN0YWNrU3RyaW5nKGUpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5oYW5kbGVkIGVkaXQgbWV0aG9kOiAnXCIgKyBwcm90b2NvbCArIFwiJyBmb3IgXCIgKyBkb2MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBmYWxzZSwgJ0V4Y2VwdGlvbiBpbiB1cGRhdGU6ICcgKyBlICsgJ1xcbicgKyAkcmRmLlV0aWwuc3RhY2tTdHJpbmcoZSkpO1xuICAgIH1cbiAgfTsgLy8gd25kIHVwZGF0ZVxuXG4gIC8vIFRoaXMgc3VpdGFibGUgZm9yIGFuIGluaXRhbCBjcmVhdGlvbiBvZiBhIGRvY3VtZW50XG4gIC8vXG4gIC8vIGRhdGE6ICAgIHN0cmluZywgb3IgYXJyYXkgb2Ygc3RhdGVtZW50c1xuICAvL1xuICBzcGFycWwucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChkb2MsIGRhdGEsIGNvbnRlbnRfdHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZG9jdW1lbnRTdHJpbmc7XG4gICAgdmFyIGtiID0gdGhpcy5zdG9yZTtcblxuICAgIGlmICgodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRhdGEpKSA9PT0gX3R5cGVvZignJykpIHtcbiAgICAgIGRvY3VtZW50U3RyaW5nID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2VyaWFsaXplIHRvIHRlIGFwcHJvcHJpYXRlIGZvcm1hdFxuICAgICAgdmFyIHN6ID0gU2VyaWFsaXplcihrYik7XG4gICAgICBzei5zdWdnZXN0TmFtZXNwYWNlcyhrYi5uYW1lc3BhY2VzKTtcbiAgICAgIHN6LnNldEJhc2UoZG9jLnVyaSk7XG4gICAgICBzd2l0Y2ggKGNvbnRlbnRfdHlwZSkge1xuICAgICAgICBjYXNlICdhcHBsaWNhdGlvbi9yZGYreG1sJzpcbiAgICAgICAgICBkb2N1bWVudFN0cmluZyA9IHN6LnN0YXRlbWVudHNUb1hNTChkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC9uMyc6XG4gICAgICAgIGNhc2UgJ3RleHQvdHVydGxlJzpcbiAgICAgICAgY2FzZSAnYXBwbGljYXRpb24veC10dXJ0bGUnOiAvLyBMZWdhY3lcbiAgICAgICAgY2FzZSAnYXBwbGljYXRpb24vbjMnOlxuICAgICAgICAgIC8vIExlZ2FjeVxuICAgICAgICAgIGRvY3VtZW50U3RyaW5nID0gc3ouc3RhdGVtZW50c1RvTjMoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250ZW50LXR5cGUgJyArIGNvbnRlbnRfdHlwZSArICcgbm90IHN1cHBvcnRlZCBmb3IgZGF0YSBQVVQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHhociA9IFV0aWwuWE1MSFRUUEZhY3RvcnkoKTtcbiAgICB4aHIub3B0aW9ucyA9IHt9O1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgLy8gZm9ybXVsYSBmcm9tIHNwYXJxbFVwZGF0ZS5qcywgd2hhdCBhYm91dCByZWRpcmVjdHM/XG4gICAgICAgIHZhciBzdWNjZXNzID0gIXhoci5zdGF0dXMgfHwgeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMDtcbiAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZGF0YS5tYXAoZnVuY3Rpb24gKHN0KSB7XG4gICAgICAgICAgICBrYi5hZGRTdGF0ZW1lbnQoc3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIGtiLmZldGNoZXIucmVxdWVzdGVkW2RvYy51cmldID0gdHJ1ZSAvLyBhcyB0aG91Z2ggZmV0Y2hlZFxuICAgICAgICB9XG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgZGVsZXRlIGtiLmZldGNoZXIubm9uZXhpc3RhbnRbZG9jLnVyaV07XG4gICAgICAgICAgZGVsZXRlIGtiLmZldGNoZXIucmVxdWVzdGVkW2RvYy51cmldO1xuICAgICAgICAgIC8vIEBAIGxhdGVyIHdlIGNhbiBmYWtlIGl0IGhhcyBiZWVuIHJlcXVlc3RkIGlmIHB1dCBnaXZlcyB1cyB0aGUgaGVhZGVyIHNhbmQgd2Ugc2F2ZSB0aGVtLlxuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGRvYy51cmksIHN1Y2Nlc3MsIHhoci5yZXNwb25zZVRleHQsIHhocik7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub3BlbignUFVUJywgZG9jLnVyaSwgdHJ1ZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsIGNvbnRlbnRfdHlwZSk7XG4gICAgeGhyLnNlbmQoZG9jdW1lbnRTdHJpbmcpO1xuICB9O1xuXG4gIC8vIFJlbG9hZCBhIGRvY3VtZW50LlxuICAvL1xuICAvLyBGYXN0IGFuZCBjaGVhcCwgbm8gbWV0YWF0YVxuICAvLyBNZWFzdXJlIHRpbWVzIGZvciB0aGUgZG9jdW1lbnRcbiAgLy8gTG9hZCBpdCBwcm92aXNpb25hbGx5XG4gIC8vIERvbid0IGRlbGV0ZSB0aGUgc3RhdGVtZW5zdCBiZWZvcmUgdGhlIGxvYWQsIG9yIGl0IHdpbGwgbGVhdmUgYSBicm9rZW4gZG9jdW1lbnRcbiAgLy8gaW4gdGhlIG1lYW50aW1lLlxuXG4gIHNwYXJxbC5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gKGtiLCBkb2MsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgLy8gZm9yY2Ugc2V0cyBuby1jYWNoZSBhbmRcbiAgICBrYi5mZXRjaGVyLm5vd09yV2hlbkZldGNoZWQoZG9jLnVyaSwgeyBmb3JjZTogdHJ1ZSwgbm9NZXRhOiB0cnVlLCBjbGVhclByZXZpb3VzRGF0YTogdHJ1ZSB9LCBmdW5jdGlvbiAob2ssIGJvZHksIHhocikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBjb25zb2xlLmxvZygnICAgIEVSUk9SIHJlbG9hZGluZyBkYXRhOiAnICsgYm9keSk7XG4gICAgICAgIGNhbGxiYWNrKGZhbHNlLCAnRXJyb3IgcmVsb2FkaW5nIGRhdGE6ICcgKyBib2R5LCB4aHIpO1xuICAgICAgfSBlbHNlIGlmICh4aHIub25FcnJvcldhc0NhbGxlZCB8fCB4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJyAgICBOb24tSFRUUCBlcnJvciByZWxvYWRpbmcgZGF0YSEgb25FcnJvcldhc0NhbGxlZD0nICsgeGhyLm9uRXJyb3JXYXNDYWxsZWQgKyAnIHN0YXR1czogJyArIHhoci5zdGF0dXMpO1xuICAgICAgICBjYWxsYmFjayhmYWxzZSwgJ05vbi1IVFRQIGVycm9yIHJlbG9hZGluZyBkYXRhOiAnICsgYm9keSwgeGhyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlbGFwc2VkVGltZV9tcyA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIGlmICghZG9jLnJlbG9hZFRpbWVfdG90YWwpIGRvYy5yZWxvYWRUaW1lX3RvdGFsID0gMDtcbiAgICAgICAgaWYgKCFkb2MucmVsb2FkVGltZV9jb3VudCkgZG9jLnJlbG9hZFRpbWVfY291bnQgPSAwO1xuICAgICAgICBkb2MucmVsb2FkVGltZV90b3RhbCArPSBlbGFwc2VkVGltZV9tcztcbiAgICAgICAgZG9jLnJlbG9hZFRpbWVfY291bnQgKz0gMTtcbiAgICAgICAgY29uc29sZS5sb2coJyAgICBGZXRjaCB0b29rICcgKyBlbGFwc2VkVGltZV9tcyArICdtcywgYXYuIG9mICcgKyBkb2MucmVsb2FkVGltZV9jb3VudCArICcgPSAnICsgZG9jLnJlbG9hZFRpbWVfdG90YWwgLyBkb2MucmVsb2FkVGltZV9jb3VudCArICdtcy4nKTtcbiAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgc3BhcnFsLnByb3RvdHlwZS5vbGRSZWxvYWQgPSBmdW5jdGlvbiAoa2IsIGRvYywgY2FsbGJhY2spIHtcbiAgICB2YXIgZzIgPSBncmFwaCgpOyAvLyBBIHNlcGFyYXRlIHN0b3JlIHRvIGhvbGQgdGhlIGRhdGEgYXMgd2UgbG9hZCBpdFxuICAgIHZhciBmMiA9IGZldGNoZXIoZzIpO1xuICAgIHZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIC8vIGZvcmNlIHNldHMgbm8tY2FjaGUgYW5kXG4gICAgZjIubm93T3JXaGVuRmV0Y2hlZChkb2MudXJpLCB7IGZvcmNlOiB0cnVlLCBub01ldGE6IHRydWUsIGNsZWFyUHJldmlvdXNEYXRhOiB0cnVlIH0sIGZ1bmN0aW9uIChvaywgYm9keSwgeGhyKSB7XG4gICAgICBpZiAoIW9rKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcgICAgRVJST1IgcmVsb2FkaW5nIGRhdGE6ICcgKyBib2R5KTtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UsICdFcnJvciByZWxvYWRpbmcgZGF0YTogJyArIGJvZHksIHhocik7XG4gICAgICB9IGVsc2UgaWYgKHhoci5vbkVycm9yV2FzQ2FsbGVkIHx8IHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICBjb25zb2xlLmxvZygnICAgIE5vbi1IVFRQIGVycm9yIHJlbG9hZGluZyBkYXRhISBvbkVycm9yV2FzQ2FsbGVkPScgKyB4aHIub25FcnJvcldhc0NhbGxlZCArICcgc3RhdHVzOiAnICsgeGhyLnN0YXR1cyk7XG4gICAgICAgIGNhbGxiYWNrKGZhbHNlLCAnTm9uLUhUVFAgZXJyb3IgcmVsb2FkaW5nIGRhdGE6ICcgKyBib2R5LCB4aHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHN0czEgPSBrYi5zdGF0ZW1lbnRzTWF0Y2hpbmcodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZG9jKS5zbGljZSgpOyAvLyBUYWtlIGEgY29weSEhXG4gICAgICAgIHZhciBzdHMyID0gZzIuc3RhdGVtZW50c01hdGNoaW5nKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGRvYykuc2xpY2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coJyAgICByZXBsYWNpbmcgJyArIHN0czEubGVuZ3RoICsgJyB3aXRoICcgKyBzdHMyLmxlbmd0aCArICcgb3V0IG9mIHRvdGFsIHN0YXRlbWVudHMgJyArIGtiLnN0YXRlbWVudHMubGVuZ3RoKTtcbiAgICAgICAga2IucmVtb3ZlKHN0czEpO1xuICAgICAgICBrYi5hZGQoc3RzMik7XG4gICAgICAgIHZhciBlbGFwc2VkVGltZV9tcyA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIGlmIChzdHMyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCc/Pz8/Pz8/Pz8/Pz8/Pz8/PyAwMDAwMDAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkb2MucmVsb2FkVGltZV90b3RhbCkgZG9jLnJlbG9hZFRpbWVfdG90YWwgPSAwO1xuICAgICAgICBpZiAoIWRvYy5yZWxvYWRUaW1lX2NvdW50KSBkb2MucmVsb2FkVGltZV9jb3VudCA9IDA7XG4gICAgICAgIGRvYy5yZWxvYWRUaW1lX3RvdGFsICs9IGVsYXBzZWRUaW1lX21zO1xuICAgICAgICBkb2MucmVsb2FkVGltZV9jb3VudCArPSAxO1xuICAgICAgICBjb25zb2xlLmxvZygnICAgIGZldGNoIHRvb2sgJyArIGVsYXBzZWRUaW1lX21zICsgJ21zLCBhdi4gb2YgJyArIGRvYy5yZWxvYWRUaW1lX2NvdW50ICsgJyA9ICcgKyBkb2MucmVsb2FkVGltZV90b3RhbCAvIGRvYy5yZWxvYWRUaW1lX2NvdW50ICsgJ21zLicpO1xuICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHNwYXJxbDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBVcGRhdGVNYW5hZ2VyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLypcbiAqIFVwZGF0ZXMtVmlhXG4gKi9cbnZhciBuYW1lZE5vZGUgPSByZXF1aXJlKCcuL2RhdGEtZmFjdG9yeScpLm5hbWVkTm9kZTtcblxudmFyIFVwZGF0ZXNTb2NrZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFVwZGF0ZXNTb2NrZXQocGFyZW50LCB2aWEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXBkYXRlc1NvY2tldCk7XG5cbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnZpYSA9IHZpYTtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZyA9IHt9O1xuICAgIHRoaXMuc3Vic2NyaWJlZCA9IHt9O1xuICAgIHRoaXMuc29ja2V0ID0ge307XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh2aWEpO1xuICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gdGhpcy5vbk9wZW47XG4gICAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gdGhpcy5vbkNsb3NlO1xuICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2U7XG4gICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gdGhpcy5vbkVycm9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVcGRhdGVzU29ja2V0LCBbe1xuICAgIGtleTogJ19kZWNvZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVjb2RlKHEpIHtcbiAgICAgIHZhciBlbHQ7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBrO1xuICAgICAgdmFyIHI7XG4gICAgICB2YXIgcmVmO1xuICAgICAgdmFyIHJlZjE7XG4gICAgICB2YXIgdjtcbiAgICAgIHIgPSB7fTtcbiAgICAgIHJlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSBxLnNwbGl0KCcmJyk7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgZWx0ID0gcmVmW2pdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChlbHQuc3BsaXQoJz0nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KCk7XG4gICAgICBmb3IgKGkgaW4gcmVmKSB7XG4gICAgICAgIGVsdCA9IHJlZltpXTtcbiAgICAgICAgcmVmMSA9IFtkZWNvZGVVUklDb21wb25lbnQoZWx0WzBdKSwgZGVjb2RlVVJJQ29tcG9uZW50KGVsdFsxXSldO1xuICAgICAgICBrID0gcmVmMVswXTtcbiAgICAgICAgdiA9IHJlZjFbMV07XG4gICAgICAgIGlmIChyW2tdID09IG51bGwpIHtcbiAgICAgICAgICByW2tdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcltrXS5wdXNoKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZChtZXRob2QsIHVyaSwgZGF0YSkge1xuICAgICAgdmFyIGJhc2UsIG1lc3NhZ2U7XG4gICAgICBtZXNzYWdlID0gW21ldGhvZCwgdXJpLCBkYXRhXS5qb2luKCcgJyk7XG4gICAgICByZXR1cm4gdHlwZW9mIChiYXNlID0gdGhpcy5zb2NrZXQpLnNlbmQgPT09ICdmdW5jdGlvbicgPyBiYXNlLnNlbmQobWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3N1YnNjcmliZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdWJzY3JpYmUodXJpKSB7XG4gICAgICB0aGlzLl9zZW5kKCdzdWInLCB1cmksICcnKTtcbiAgICAgIHRoaXMuc3Vic2NyaWJlZFt1cmldID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWRbdXJpXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvbkNsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZShlKSB7XG4gICAgICB2YXIgdXJpO1xuICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGZvciAodXJpIGluIHRoaXMuc3Vic2NyaWJlZCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdbdXJpXSA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnN1YnNjcmliZWQgPSB7fTtcbiAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25FcnJvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvbkVycm9yJyArIGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uTWVzc2FnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShlKSB7XG4gICAgICB2YXIgYmFzZSwgbWVzc2FnZTtcbiAgICAgIG1lc3NhZ2UgPSBlLmRhdGEuc3BsaXQoJyAnKTtcbiAgICAgIGlmIChtZXNzYWdlWzBdID09PSAncGluZycpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiAoYmFzZSA9IHRoaXMuc29ja2V0KS5zZW5kID09PSAnZnVuY3Rpb24nID8gYmFzZS5zZW5kKCdwb25nICcgKyBtZXNzYWdlLnNsaWNlKDEpLmpvaW4oJyAnKSkgOiB2b2lkIDA7XG4gICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VbMF0gPT09ICdwdWInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5vblVwZGF0ZShtZXNzYWdlWzFdLCB0aGlzLl9kZWNvZGUobWVzc2FnZVsyXSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uT3BlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihlKSB7XG4gICAgICB2YXIgcmVzdWx0cywgdXJpO1xuICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh1cmkgaW4gdGhpcy5wZW5kaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdbdXJpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuX3N1YnNjcmliZSh1cmkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N1YnNjcmliZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZSh1cmkpIHtcbiAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHVyaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlbmRpbmdbdXJpXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdbdXJpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVXBkYXRlc1NvY2tldDtcbn0oKTtcblxudmFyIFVwZGF0ZXNWaWEgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFVwZGF0ZXNWaWEoZmV0Y2hlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVcGRhdGVzVmlhKTtcblxuICAgIHRoaXMuZmV0Y2hlciA9IGZldGNoZXI7XG4gICAgdGhpcy5ncmFwaCA9IHt9O1xuICAgIHRoaXMudmlhID0ge307XG4gICAgdGhpcy5mZXRjaGVyLmFkZENhbGxiYWNrKCdoZWFkZXJzJywgdGhpcy5vbkhlYWRlcnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFVwZGF0ZXNWaWEsIFt7XG4gICAga2V5OiAnb25IZWFkZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25IZWFkZXJzKGQpIHtcbiAgICAgIHZhciBldGFnLCB1cmksIHZpYTtcbiAgICAgIGlmIChkLmhlYWRlcnMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgV2ViU29ja2V0ID09PSAndW5kZWZpbmVkJyB8fCBXZWJTb2NrZXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBldGFnID0gZC5oZWFkZXJzWydldGFnJ107XG4gICAgICB2aWEgPSBkLmhlYWRlcnNbJ3VwZGF0ZXMtdmlhJ107XG4gICAgICB1cmkgPSBkLnVyaTtcbiAgICAgIGlmIChldGFnICYmIHZpYSkge1xuICAgICAgICB0aGlzLmdyYXBoW3VyaV0gPSB7XG4gICAgICAgICAgZXRhZzogZXRhZyxcbiAgICAgICAgICB2aWE6IHZpYVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHZpYSwgdXJpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25VcGRhdGUodXJpLCBkKSB7XG4gICAgICByZXR1cm4gdGhpcy5mZXRjaGVyLnJlZnJlc2gobmFtZWROb2RlKHVyaSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIodmlhLCB1cmkpIHtcbiAgICAgIGlmICh0aGlzLnZpYVt2aWFdID09IG51bGwpIHtcbiAgICAgICAgdGhpcy52aWFbdmlhXSA9IG5ldyBVcGRhdGVzU29ja2V0KHRoaXMsIHZpYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy52aWFbdmlhXS5zdWJzY3JpYmUodXJpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVXBkYXRlc1ZpYTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMuVXBkYXRlc1NvY2tldCA9IFVwZGF0ZXNTb2NrZXQ7XG5tb2R1bGUuZXhwb3J0cy5VcGRhdGVzVmlhID0gVXBkYXRlc1ZpYTsiLCIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBJbXBsZW1lbnRzIFVSSS1zcGVjaWZpYyBmdW5jdGlvbnNcbiAqXG4gKiBTZWUgUkZDIDIzODZcbiAqXG4gKiBTZWUgYWxzbzpcbiAqICAgaHR0cDovL3d3dy53My5vcmcvMjAwNS8xMC9hamF3L3VyaS5qc1xuICogICBodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL3N3YXAvdXJpcGF0aC5weVxuICpcbiAqL1xudmFyIGFsZXJ0ID0gYWxlcnQgfHwgY29uc29sZS5sb2c7XG5cbm1vZHVsZS5leHBvcnRzLmRvY3BhcnQgPSBkb2NwYXJ0O1xubW9kdWxlLmV4cG9ydHMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzLmhvc3RwYXJ0ID0gaG9zdHBhcnQ7XG5tb2R1bGUuZXhwb3J0cy5qb2luID0gam9pbjtcbm1vZHVsZS5leHBvcnRzLnByb3RvY29sID0gcHJvdG9jb2w7XG5tb2R1bGUuZXhwb3J0cy5yZWZUbyA9IHJlZlRvO1xuXG52YXIgTmFtZWROb2RlID0gcmVxdWlyZSgnLi9uYW1lZC1ub2RlJyk7XG5cbmZ1bmN0aW9uIGRvY3BhcnQodXJpKSB7XG4gIHZhciBpO1xuICBpID0gdXJpLmluZGV4T2YoJyMnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdXJpLnNsaWNlKDAsIGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRvY3VtZW50KHgpIHtcbiAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoZG9jcGFydCh4LnVyaSkpO1xufVxuXG5mdW5jdGlvbiBob3N0cGFydCh1KSB7XG4gIHZhciBtID0gL1teXFwvXSpcXC9cXC8oW15cXC9dKilcXC8vLmV4ZWModSk7XG4gIGlmIChtKSB7XG4gICAgcmV0dXJuIG1bMV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpvaW4oZ2l2ZW4sIGJhc2UpIHtcbiAgdmFyIGJhc2VDb2xvbiwgYmFzZVNjaGVtZSwgYmFzZVNpbmdsZTtcbiAgdmFyIGNvbG9uLCBsYXN0U2xhc2gsIHBhdGg7XG4gIHZhciBiYXNlSGFzaCA9IGJhc2UuaW5kZXhPZignIycpO1xuICBpZiAoYmFzZUhhc2ggPiAwKSB7XG4gICAgYmFzZSA9IGJhc2Uuc2xpY2UoMCwgYmFzZUhhc2gpO1xuICB9XG4gIGlmIChnaXZlbi5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICBpZiAoZ2l2ZW4uaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGJhc2UgKyBnaXZlbjtcbiAgfVxuICBjb2xvbiA9IGdpdmVuLmluZGV4T2YoJzonKTtcbiAgaWYgKGNvbG9uID49IDApIHtcbiAgICByZXR1cm4gZ2l2ZW47XG4gIH1cbiAgYmFzZUNvbG9uID0gYmFzZS5pbmRleE9mKCc6Jyk7XG4gIGlmIChiYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBnaXZlbjtcbiAgfVxuICBpZiAoYmFzZUNvbG9uIDwgMCkge1xuICAgIGFsZXJ0KCdJbnZhbGlkIGJhc2U6ICcgKyBiYXNlICsgJyBpbiBqb2luIHdpdGggZ2l2ZW46ICcgKyBnaXZlbik7XG4gICAgcmV0dXJuIGdpdmVuO1xuICB9XG4gIGJhc2VTY2hlbWUgPSBiYXNlLnNsaWNlKDAsICtiYXNlQ29sb24gKyAxIHx8IDllOSk7XG4gIGlmIChnaXZlbi5pbmRleE9mKCcvLycpID09PSAwKSB7XG4gICAgcmV0dXJuIGJhc2VTY2hlbWUgKyBnaXZlbjtcbiAgfVxuICBpZiAoYmFzZS5pbmRleE9mKCcvLycsIGJhc2VDb2xvbikgPT09IGJhc2VDb2xvbiArIDEpIHtcbiAgICBiYXNlU2luZ2xlID0gYmFzZS5pbmRleE9mKCcvJywgYmFzZUNvbG9uICsgMyk7XG4gICAgaWYgKGJhc2VTaW5nbGUgPCAwKSB7XG4gICAgICBpZiAoYmFzZS5sZW5ndGggLSBiYXNlQ29sb24gLSAzID4gMCkge1xuICAgICAgICByZXR1cm4gYmFzZSArICcvJyArIGdpdmVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJhc2VTY2hlbWUgKyBnaXZlbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNpbmdsZSA9IGJhc2UuaW5kZXhPZignLycsIGJhc2VDb2xvbiArIDEpO1xuICAgIGlmIChiYXNlU2luZ2xlIDwgMCkge1xuICAgICAgaWYgKGJhc2UubGVuZ3RoIC0gYmFzZUNvbG9uIC0gMSA+IDApIHtcbiAgICAgICAgcmV0dXJuIGJhc2UgKyAnLycgKyBnaXZlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiYXNlU2NoZW1lICsgZ2l2ZW47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChnaXZlbi5pbmRleE9mKCcvJykgPT09IDApIHtcbiAgICByZXR1cm4gYmFzZS5zbGljZSgwLCBiYXNlU2luZ2xlKSArIGdpdmVuO1xuICB9XG4gIHBhdGggPSBiYXNlLnNsaWNlKGJhc2VTaW5nbGUpO1xuICBsYXN0U2xhc2ggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gIGlmIChsYXN0U2xhc2ggPCAwKSB7XG4gICAgcmV0dXJuIGJhc2VTY2hlbWUgKyBnaXZlbjtcbiAgfVxuICBpZiAobGFzdFNsYXNoID49IDAgJiYgbGFzdFNsYXNoIDwgcGF0aC5sZW5ndGggLSAxKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgK2xhc3RTbGFzaCArIDEgfHwgOWU5KTtcbiAgfVxuICBwYXRoICs9IGdpdmVuO1xuICB3aGlsZSAocGF0aC5tYXRjaCgvW15cXC9dKlxcL1xcLlxcLlxcLy8pKSB7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvW15cXC9dKlxcL1xcLlxcLlxcLy8sICcnKTtcbiAgfVxuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC5cXC8vZywgJycpO1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC9cXC4kLywgJy8nKTtcbiAgcmV0dXJuIGJhc2Uuc2xpY2UoMCwgYmFzZVNpbmdsZSkgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBwcm90b2NvbCh1cmkpIHtcbiAgdmFyIGk7XG4gIGkgPSB1cmkuaW5kZXhPZignOicpO1xuICBpZiAoaSA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdXJpLnNsaWNlKDAsIGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZlRvKGJhc2UsIHVyaSkge1xuICB2YXIgYywgaSwgaywgbCwgbGVuLCBsZW4xLCBuLCBvLCBwLCBxLCByZWYsIHJlZjEsIHM7XG4gIHZhciBjb21tb25Ib3N0ID0gbmV3IFJlZ0V4cCgnXlstX2EtekEtWjAtOS5dKzooLy9bXi9dKik/L1teL10qJCcpO1xuICBpZiAoIWJhc2UpIHtcbiAgICByZXR1cm4gdXJpO1xuICB9XG4gIGlmIChiYXNlID09PSB1cmkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgZm9yIChpID0gbyA9IDAsIGxlbiA9IHVyaS5sZW5ndGg7IG8gPCBsZW47IGkgPSArK28pIHtcbiAgICBjID0gdXJpW2ldO1xuICAgIGlmIChjICE9PSBiYXNlW2ldKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGJhc2Uuc2xpY2UoMCwgaSkubWF0Y2goY29tbW9uSG9zdCkpIHtcbiAgICBrID0gdXJpLmluZGV4T2YoJy8vJyk7XG4gICAgaWYgKGsgPCAwKSB7XG4gICAgICBrID0gLTI7XG4gICAgfVxuICAgIGwgPSB1cmkuaW5kZXhPZignLycsIGsgKyAyKTtcbiAgICBpZiAodXJpW2wgKyAxXSAhPT0gJy8nICYmIGJhc2VbbCArIDFdICE9PSAnLycgJiYgdXJpLnNsaWNlKDAsIGwpID09PSBiYXNlLnNsaWNlKDAsIGwpKSB7XG4gICAgICByZXR1cm4gdXJpLnNsaWNlKGwpO1xuICAgIH1cbiAgfVxuICBpZiAodXJpW2ldID09PSAnIycgJiYgYmFzZS5sZW5ndGggPT09IGkpIHtcbiAgICByZXR1cm4gdXJpLnNsaWNlKGkpO1xuICB9XG4gIHdoaWxlIChpID4gMCAmJiB1cmlbaSAtIDFdICE9PSAnLycpIHtcbiAgICBpLS07XG4gIH1cbiAgaWYgKGkgPCAzKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxuICBpZiAoYmFzZS5pbmRleE9mKCcvLycsIGkgLSAyKSA+IDAgfHwgdXJpLmluZGV4T2YoJy8vJywgaSAtIDIpID4gMCkge1xuICAgIHJldHVybiB1cmk7XG4gIH1cbiAgaWYgKGJhc2UuaW5kZXhPZignOicsIGkpID4gMCkge1xuICAgIHJldHVybiB1cmk7XG4gIH1cbiAgbiA9IDA7XG4gIHJlZiA9IGJhc2Uuc2xpY2UoaSk7XG4gIGZvciAocCA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBwIDwgbGVuMTsgcCsrKSB7XG4gICAgYyA9IHJlZltwXTtcbiAgICBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICBuKys7XG4gICAgfVxuICB9XG4gIGlmIChuID09PSAwICYmIGkgPCB1cmkubGVuZ3RoICYmIHVyaVtpXSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuICcuLycgKyB1cmkuc2xpY2UoaSk7XG4gIH1cbiAgaWYgKG4gPT09IDAgJiYgaSA9PT0gdXJpLmxlbmd0aCkge1xuICAgIHJldHVybiAnLi8nO1xuICB9XG4gIHMgPSAnJztcbiAgaWYgKG4gPiAwKSB7XG4gICAgZm9yIChxID0gMSwgcmVmMSA9IG47IHJlZjEgPj0gMSA/IHEgPD0gcmVmMSA6IHEgPj0gcmVmMTsgcmVmMSA+PSAxID8gKytxIDogLS1xKSB7XG4gICAgICBzICs9ICcuLi8nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcyArIHVyaS5zbGljZShpKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yICRyZGZcbiAqIEBtb2R1bGUgdXRpbFxuICovXG52YXIgZG9jcGFydCA9IHJlcXVpcmUoJy4vdXJpJykuZG9jcGFydDtcbnZhciBsb2cgPSByZXF1aXJlKCcuL2xvZycpO1xudmFyIE5hbWVkTm9kZSA9IHJlcXVpcmUoJy4vbmFtZWQtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cy5BSkFSX2hhbmRsZU5ld1Rlcm0gPSBhamFySGFuZGxlTmV3VGVybTtcbm1vZHVsZS5leHBvcnRzLkFycmF5SW5kZXhPZiA9IGFycmF5SW5kZXhPZjtcbm1vZHVsZS5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG5tb2R1bGUuZXhwb3J0cy5kdHN0YW1wID0gZHRzdGFtcDtcbm1vZHVsZS5leHBvcnRzLkRPTVBhcnNlckZhY3RvcnkgPSBkb21QYXJzZXI7XG5tb2R1bGUuZXhwb3J0cy5kb21Ub1N0cmluZyA9IGRvbVRvU3RyaW5nO1xubW9kdWxlLmV4cG9ydHMuZHVtcE5vZGUgPSBkdW1wTm9kZTtcbm1vZHVsZS5leHBvcnRzLmdldEhUVFBIZWFkZXJzID0gZ2V0SFRUUEhlYWRlcnM7XG5tb2R1bGUuZXhwb3J0cy5oZWF2eUNvbXBhcmUgPSBoZWF2eUNvbXBhcmU7XG5tb2R1bGUuZXhwb3J0cy5oZWF2eUNvbXBhcmVTUE8gPSBoZWF2eUNvbXBhcmVTUE87XG5tb2R1bGUuZXhwb3J0cy5vdXRwdXQgPSBvdXRwdXQ7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZVhNTCA9IHBhcnNlWE1MO1xubW9kdWxlLmV4cG9ydHMuUkRGQXJyYXlSZW1vdmUgPSByZGZBcnJheVJlbW92ZTtcbm1vZHVsZS5leHBvcnRzLnN0YWNrU3RyaW5nID0gc3RhY2tTdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5zdHJpbmdfc3RhcnRzd2l0aCA9IHN0cmluZ1N0YXJ0c1dpdGg7XG5tb2R1bGUuZXhwb3J0cy5zdHJpbmcgPSB7fTtcbm1vZHVsZS5leHBvcnRzLnN0cmluZy50ZW1wbGF0ZSA9IHN0cmluZ1RlbXBsYXRlO1xubW9kdWxlLmV4cG9ydHMudXJpID0gcmVxdWlyZSgnLi91cmknKTsgLy8gVE9ETzogUmVtb3ZlIHRoaXMgbWl4ZWQgdXNhZ2Vcbi8vIG1vZHVsZS5leHBvcnRzLnZhcmlhYmxlc0luID0gdmFyaWFibGVzSW5cbm1vZHVsZS5leHBvcnRzLlhNTEhUVFBGYWN0b3J5ID0geGhyO1xubW9kdWxlLmV4cG9ydHMubG9nID0gbG9nO1xuXG5tb2R1bGUuZXhwb3J0cy5tZWRpYVR5cGVDbGFzcyA9IGZ1bmN0aW9uIChtZWRpYVR5cGUpIHtcbiAgbWVkaWFUeXBlID0gbWVkaWFUeXBlLnNwbGl0KCc7JylbMF0udHJpbSgpOyAvLyByZW1vdmUgbWVkaWEgdHlwZSBwYXJhbWV0ZXJzXG4gIHJldHVybiBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy9ucy9pYW5hL21lZGlhLXR5cGVzLycgKyBtZWRpYVR5cGUgKyAnI1Jlc291cmNlJyk7XG59O1xuXG4vKipcbiAqIExvYWRzIG9udG9sb2dpZXMgb2YgdGhlIGRhdGEgd2UgbG9hZCAodGhpcyBpcyB0aGUgY2FsbGJhY2sgZnJvbSB0aGUga2IgdG9cbiAqIHRoZSBmZXRjaGVyKS4gRXhwb3J0cyBhcyBgQUpBUl9oYW5kbGVOZXdUZXJtYFxuICovXG5mdW5jdGlvbiBhamFySGFuZGxlTmV3VGVybShrYiwgcCwgcmVxdWVzdGVkQnkpIHtcbiAgdmFyIHNmID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBrYi5mZXRjaGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNmID0ga2IuZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHAudGVybVR5cGUgIT09ICdOYW1lZE5vZGUnKSByZXR1cm47XG4gIHZhciBkb2N1cmkgPSBkb2NwYXJ0KHAudXJpKTtcbiAgdmFyIGZpeHVyaTtcbiAgaWYgKHAudXJpLmluZGV4T2YoJyMnKSA8IDApIHtcbiAgICAvLyBObyBoYXNoXG4gICAgLy8gQEAgbWFqb3IgaGFjayBmb3IgZGJwZWRpYSBDYXRlZ29yaWVzLCB3aGljaCBzcHJlYWQgaW5kZWZpbml0ZWx5XG4gICAgaWYgKHN0cmluZ1N0YXJ0c1dpdGgocC51cmksICdodHRwOi8vZGJwZWRpYS5vcmcvcmVzb3VyY2UvQ2F0ZWdvcnk6JykpIHJldHVybjtcblxuICAgIC8qXG4gICAgICBpZiAoc3RyaW5nX3N0YXJ0c3dpdGgocC51cmksICdodHRwOi8veG1sbnMuY29tL2ZvYWYvMC4xLycpKSB7XG4gICAgICBmaXh1cmkgPSBcImh0dHA6Ly9kaWcuY3NhaWwubWl0LmVkdS8yMDA1L2FqYXIvYWphdy90ZXN0L2ZvYWZcIlxuICAgICAgLy8gc2hvdWxkIGdpdmUgSFRUUCAzMDMgdG8gb250b2xvZ3kgLS0gbm93IGlzIDotKVxuICAgICAgfSBlbHNlXG4gICAgKi9cbiAgICBpZiAoc3RyaW5nU3RhcnRzV2l0aChwLnVyaSwgJ2h0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvJykgfHwgc3RyaW5nU3RhcnRzV2l0aChwLnVyaSwgJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy8nKSkge1xuICAgICAgZml4dXJpID0gJ2h0dHA6Ly9kdWJsaW5jb3JlLm9yZy8yMDA1LzA2LzEzL2RjcSc7XG4gICAgICAvLyBkYyBmZXRjaGVkIG11bHRpcGxlIHRpbWVzXG4gICAgfSBlbHNlIGlmIChzdHJpbmdTdGFydHNXaXRoKHAudXJpLCAnaHR0cDovL3htbG5zLmNvbS93b3QvMC4xLycpKSB7XG4gICAgICBmaXh1cmkgPSAnaHR0cDovL3htbG5zLmNvbS93b3QvMC4xL2luZGV4LnJkZic7XG4gICAgfSBlbHNlIGlmIChzdHJpbmdTdGFydHNXaXRoKHAudXJpLCAnaHR0cDovL3dlYi5yZXNvdXJjZS5vcmcvY2MvJykpIHtcbiAgICAgIC8vICAgICAgICAgICAgbG9nLndhcm4oXCJjcmVhdGl2ZSBjb21tb25zIGxpbmtzIHRvIGh0bWwgaW5zdGVhZCBvZiByZGYuIGRvZXNuJ3Qgc2VlbSB0byBjb250ZW50LW5lZ290aWF0ZS5cIilcbiAgICAgIGZpeHVyaSA9ICdodHRwOi8vd2ViLnJlc291cmNlLm9yZy9jYy9zY2hlbWEucmRmJztcbiAgICB9XG4gIH1cbiAgaWYgKGZpeHVyaSkge1xuICAgIGRvY3VyaSA9IGZpeHVyaTtcbiAgfVxuICBpZiAoc2YgJiYgc2YuZ2V0U3RhdGUoZG9jdXJpKSAhPT0gJ3VucmVxdWVzdGVkJykgcmV0dXJuO1xuXG4gIGlmIChmaXh1cmkpIHtcbiAgICAvLyBvbmx5IGdpdmUgd2FybmluZyBvbmNlOiBlbHNlIGhhcHBlbnMgdG9vIG9mdGVuXG4gICAgbG9nLndhcm4oJ0Fzc3VtaW5nIHNlcnZlciBzdGlsbCBicm9rZW4sIGZha2luZyByZWRpcmVjdCBvZiA8JyArIHAudXJpICsgJz4gdG8gPCcgKyBkb2N1cmkgKyAnPicpO1xuICB9XG4gIHNmLnJlcXVlc3RVUkkoZG9jdXJpLCByZXF1ZXN0ZWRCeSk7XG59XG5cbi8qKlxuICogRXhwb3J0cyBhcyBgQXJyYXlJbmRleE9mYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmRleE9mKGFyciwgaXRlbSwgaSkge1xuICBpIHx8IChpID0gMCk7XG4gIHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICBpZiAoaSA8IDApIGkgPSBsZW5ndGggKyBpO1xuICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSA9PT0gaXRlbSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBBZGRzIGNhbGxiYWNrIGZ1bmN0aW9uYWxpdHkgdG8gYW4gb2JqZWN0LlxuICogQ2FsbGJhY2sgZnVuY3Rpb25zIGFyZSBpbmRleGVkIGJ5IGEgJ2hvb2snIHN0cmluZy5cbiAqIFRoZXkgcmV0dXJuIHRydWUgaWYgdGhleSB3YW50IHRvIGJlIGNhbGxlZCBhZ2Fpbi5cbiAqIEBtZXRob2QgY2FsbGJhY2tpZnlcbiAqIEBwYXJhbSBvYmoge09iamVjdH1cbiAqIEBwYXJhbSBjYWxsYmFja3Mge0FycmF5PEZ1bmN0aW9uPn1cbiAqL1xuZnVuY3Rpb24gY2FsbGJhY2tpZnkob2JqLCBjYWxsYmFja3MpIHtcbiAgb2JqLmNhbGxiYWNrcyA9IHt9O1xuICBmb3IgKHZhciB4ID0gY2FsbGJhY2tzLmxlbmd0aCAtIDE7IHggPj0gMDsgeC0tKSB7XG4gICAgb2JqLmNhbGxiYWNrc1tjYWxsYmFja3NbeF1dID0gW107XG4gIH1cblxuICBvYmouYWRkSG9vayA9IGZ1bmN0aW9uIChob29rKSB7XG4gICAgaWYgKCFvYmouY2FsbGJhY2tzW2hvb2tdKSB7XG4gICAgICBvYmouY2FsbGJhY2tzW2hvb2tdID0gW107XG4gICAgfVxuICB9O1xuXG4gIG9iai5hZGRDYWxsYmFjayA9IGZ1bmN0aW9uIChob29rLCBmdW5jKSB7XG4gICAgb2JqLmNhbGxiYWNrc1tob29rXS5wdXNoKGZ1bmMpO1xuICB9O1xuXG4gIG9iai5yZW1vdmVDYWxsYmFjayA9IGZ1bmN0aW9uIChob29rLCBmdW5jTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmNhbGxiYWNrc1tob29rXS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG9iai5jYWxsYmFja3NbaG9va11baV0ubmFtZSA9PT0gZnVuY05hbWUpIHtcbiAgICAgICAgb2JqLmNhbGxiYWNrc1tob29rXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgb2JqLmluc2VydENhbGxiYWNrID0gZnVuY3Rpb24gKGhvb2ssIGZ1bmMpIHtcbiAgICBvYmouY2FsbGJhY2tzW2hvb2tdLnVuc2hpZnQoZnVuYyk7XG4gIH07XG5cbiAgb2JqLmZpcmVDYWxsYmFja3MgPSBmdW5jdGlvbiAoaG9vaywgYXJncykge1xuICAgIHZhciBuZXdDYWxsYmFja3MgPSBbXTtcbiAgICB2YXIgcmVwbGFjZUNhbGxiYWNrcyA9IFtdO1xuICAgIHZhciBsZW4gPSBvYmouY2FsbGJhY2tzW2hvb2tdLmxlbmd0aDtcbiAgICB2YXIgeDtcbiAgICAvLyBsb2cuaW5mbygnIUAkIEZpcmluZyAnK2hvb2srJyBjYWxsIGJhY2sgd2l0aCBsZW5ndGgnK2xlbilcbiAgICBmb3IgKHggPSBsZW4gLSAxOyB4ID49IDA7IHgtLSkge1xuICAgICAgLy8gbG9nLmluZm8oJ0BAIEZpcmluZyAnK2hvb2srJyBjYWxsYmFjayAnKyBvYmouY2FsbGJhY2tzW2hvb2tdW3hdKVxuICAgICAgaWYgKG9iai5jYWxsYmFja3NbaG9va11beF0uYXBwbHkob2JqLCBhcmdzKSkge1xuICAgICAgICBuZXdDYWxsYmFja3MucHVzaChvYmouY2FsbGJhY2tzW2hvb2tdW3hdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHggPSBuZXdDYWxsYmFja3MubGVuZ3RoIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgIHJlcGxhY2VDYWxsYmFja3MucHVzaChuZXdDYWxsYmFja3NbeF0pO1xuICAgIH1cblxuICAgIGZvciAoeCA9IGxlbjsgeCA8IG9iai5jYWxsYmFja3NbaG9va10ubGVuZ3RoOyB4KyspIHtcbiAgICAgIHJlcGxhY2VDYWxsYmFja3MucHVzaChvYmouY2FsbGJhY2tzW2hvb2tdW3hdKTtcbiAgICB9XG5cbiAgICBvYmouY2FsbGJhY2tzW2hvb2tdID0gcmVwbGFjZUNhbGxiYWNrcztcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgRE9NIHBhcnNlciBiYXNlZCBvbiBjdXJyZW50IHJ1bnRpbWUgZW52aXJvbm1lbnQuXG4gKiBFeHBvcnRzIGFzIGBET01QYXJzZXJGYWN0b3J5YFxuICovXG5mdW5jdGlvbiBkb21QYXJzZXIoKSB7XG4gIGlmICh0YWJ1bGF0b3IgJiYgdGFidWxhdG9yLmlzRXh0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudHMuY2xhc3Nlc1snQG1vemlsbGEub3JnL3htbGV4dHJhcy9kb21wYXJzZXI7MSddLmdldFNlcnZpY2UoQ29tcG9uZW50cy5pbnRlcmZhY2VzLm5zSURPTVBhcnNlcik7XG4gIH0gZWxzZSBpZiAod2luZG93LkRPTVBhcnNlcikge1xuICAgIHJldHVybiBuZXcgRE9NUGFyc2VyKCk7XG4gIH0gZWxzZSBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHtcbiAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxET00nKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vbGlua2VkZGF0YS9kb2tpZWxpXG5mdW5jdGlvbiBkb21Ub1N0cmluZyhub2RlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgc2VsZkNsb3NpbmcgPSBbXTtcbiAgaWYgKCdzZWxmQ2xvc2luZycgaW4gb3B0aW9ucykge1xuICAgIG9wdGlvbnMuc2VsZkNsb3Npbmcuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICBzZWxmQ2xvc2luZ1tuXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgdmFyIHNraXBBdHRyaWJ1dGVzID0gW107XG4gIGlmICgnc2tpcEF0dHJpYnV0ZXMnIGluIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zLnNraXBBdHRyaWJ1dGVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgc2tpcEF0dHJpYnV0ZXNbbl0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBkdW1wTm9kZShub2RlLCBvcHRpb25zLCBzZWxmQ2xvc2luZywgc2tpcEF0dHJpYnV0ZXMpO1xufVxuXG5mdW5jdGlvbiBkdW1wTm9kZShub2RlLCBvcHRpb25zLCBzZWxmQ2xvc2luZywgc2tpcEF0dHJpYnV0ZXMpIHtcbiAgdmFyIGk7XG4gIHZhciBvdXQgPSAnJztcbiAgdmFyIG5vRXNjID0gW2ZhbHNlXTtcbiAgaWYgKHR5cGVvZiBub2RlLm5vZGVUeXBlID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG91dDtcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ2NsYXNzJykgJiYgJ2NsYXNzV2l0aENoaWxkVGV4dCcgaW4gb3B0aW9ucyAmJiBub2RlLm1hdGNoZXMob3B0aW9ucy5jbGFzc1dpdGhDaGlsZFRleHQuY2xhc3MpKSB7XG4gICAgICBvdXQgKz0gbm9kZS5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuY2xhc3NXaXRoQ2hpbGRUZXh0LmVsZW1lbnQpLnRleHRDb250ZW50O1xuICAgIH0gZWxzZSBpZiAoISgnc2tpcE5vZGVXaXRoQ2xhc3MnIGluIG9wdGlvbnMgJiYgbm9kZS5tYXRjaGVzKCcuJyArIG9wdGlvbnMuc2tpcE5vZGVXaXRoQ2xhc3MpKSkge1xuICAgICAgdmFyIGVuYW1lID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgb3V0ICs9ICc8JyArIGVuYW1lO1xuXG4gICAgICB2YXIgYXR0ckxpc3QgPSBbXTtcbiAgICAgIGZvciAoaSA9IG5vZGUuYXR0cmlidXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgYXRuID0gbm9kZS5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoc2tpcEF0dHJpYnV0ZXMubGVuZ3RoID4gMCAmJiBza2lwQXR0cmlidXRlc1thdG4ubmFtZV0pIGNvbnRpbnVlO1xuICAgICAgICBpZiAoL15cXGQrJC8udGVzdChhdG4ubmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoYXRuLm5hbWUgPT09ICdjbGFzcycgJiYgJ3JlcGxhY2VDbGFzc0l0ZW1XaXRoJyBpbiBvcHRpb25zICYmIGF0bi52YWx1ZS5zcGxpdCgnICcpLmluZGV4T2Yob3B0aW9ucy5yZXBsYWNlQ2xhc3NJdGVtV2l0aC5zb3VyY2UpID4gLTEpIHtcbiAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKG9wdGlvbnMucmVwbGFjZUNsYXNzSXRlbVdpdGguc291cmNlLCAnZycpO1xuICAgICAgICAgIGF0bi52YWx1ZSA9IGF0bi52YWx1ZS5yZXBsYWNlKHJlLCBvcHRpb25zLnJlcGxhY2VDbGFzc0l0ZW1XaXRoLnRhcmdldCkudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGF0bi5uYW1lID09PSAnY2xhc3MnICYmICdza2lwQ2xhc3NXaXRoVmFsdWUnIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5za2lwQ2xhc3NXaXRoVmFsdWUgPT09IGF0bi52YWx1ZSkpIHtcbiAgICAgICAgICBhdHRyTGlzdC5wdXNoKGF0bi5uYW1lICsgJz1cXCcnICsgYXRuLnZhbHVlLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKS5yZXBsYWNlKC8nL2csICcmcXVvdDsnKSArICdcXCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGF0dHJMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCdzb3J0QXR0cmlidXRlcycgaW4gb3B0aW9ucyAmJiBvcHRpb25zLnNvcnRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgYXR0ckxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgJyArIGF0dHJMaXN0LmpvaW4oJyAnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmQ2xvc2luZ1tlbmFtZV0pIHtcbiAgICAgICAgb3V0ICs9ICcgLz4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICc+JztcbiAgICAgICAgb3V0ICs9IGVuYW1lID09PSAnaHRtbCcgPyAnXFxuICAnIDogJyc7XG4gICAgICAgIG5vRXNjLnB1c2goZW5hbWUgPT09ICdzdHlsZScgfHwgZW5hbWUgPT09ICdzY3JpcHQnKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG91dCArPSBkdW1wTm9kZShub2RlLmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9bm9Fc2MucG9wKCk7XG4gICAgICAgIG91dCArPSBlbmFtZSA9PT0gJ2JvZHknID8gJzwvJyArIGVuYW1lICsgJz4nICsgJ1xcbicgOiAnPC8nICsgZW5hbWUgKyAnPic7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICAvLyBGSVhNRTogSWYgY29tbWVudHMgYXJlIG5vdCB0YWJiZWQgaW4gc291cmNlLCBhIG5ldyBsaW5lIGlzIG5vdCBwcmVwZW5kZWRcbiAgICBvdXQgKz0gJzwhLS0nICsgbm9kZS5ub2RlVmFsdWUgKyAnLS0+JztcbiAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzIHx8IG5vZGUubm9kZVR5cGUgPT09IDQpIHtcbiAgICAvLyBYWFg6IFJlbW92ZSBuZXcgbGluZXMgd2hpY2ggd2VyZSBhZGRlZCBhZnRlciBET00gcmVhZHlcbiAgICB2YXIgbmwgPSBub2RlLm5vZGVWYWx1ZS5yZXBsYWNlKC9cXG4rJC8sICcnKTtcbiAgICBvdXQgKz0gbm9Fc2Nbbm9Fc2MubGVuZ3RoIC0gMV0gPyBubCA6IG5sLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygnV2FybmluZzsgQ2Fubm90IGhhbmRsZSBzZXJpYWxpc2luZyBub2RlcyBvZiB0eXBlOiAnICsgbm9kZS5ub2RlVHlwZSk7XG4gICAgY29uc29sZS5sb2cobm9kZSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZHRzdGFtcCgpIHtcbiAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gIHZhciB5ZWFyID0gbm93LmdldFllYXIoKSArIDE5MDA7XG4gIHZhciBtb250aCA9IG5vdy5nZXRNb250aCgpICsgMTtcbiAgdmFyIGRheSA9IG5vdy5nZXREYXRlKCk7XG4gIHZhciBob3VyID0gbm93LmdldFVUQ0hvdXJzKCk7XG4gIHZhciBtaW51dGUgPSBub3cuZ2V0VVRDTWludXRlcygpO1xuICB2YXIgc2Vjb25kID0gbm93LmdldFNlY29uZHMoKTtcbiAgaWYgKG1vbnRoIDwgMTApIG1vbnRoID0gJzAnICsgbW9udGg7XG4gIGlmIChkYXkgPCAxMCkgZGF5ID0gJzAnICsgZGF5O1xuICBpZiAoaG91ciA8IDEwKSBob3VyID0gJzAnICsgaG91cjtcbiAgaWYgKG1pbnV0ZSA8IDEwKSBtaW51dGUgPSAnMCcgKyBtaW51dGU7XG4gIGlmIChzZWNvbmQgPCAxMCkgc2Vjb25kID0gJzAnICsgc2Vjb25kO1xuICByZXR1cm4geWVhciArICctJyArIG1vbnRoICsgJy0nICsgZGF5ICsgJ1QnICsgaG91ciArICc6JyArIG1pbnV0ZSArICc6JyArIHNlY29uZCArICdaJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgaGFzaG1hcCBvZiBIVFRQIGhlYWRlcnMgYW5kIHRoZWlyIHZhbHVlcy5cbiAqIEBAIEJ1ZzogQXNzdW1lcyB0aGF0IGVhY2ggaGVhZGVyIG9ubHkgb2NjdXJzIG9uY2UuXG4gKiBBbHNvIG5vdGUgdGhhdCBhICwgaW4gYSBoZWFkZXIgdmFsdWUgaXMganVzdCB0aGUgc2FtZSBhcyBoYXZpbmcgdHdvIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIGdldEhUVFBIZWFkZXJzKHhocikge1xuICB2YXIgbGluZXMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xcbicpO1xuICB2YXIgaGVhZGVycyA9IHt9O1xuICB2YXIgbGFzdDtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCBsaW5lcy5sZW5ndGg7IHgrKykge1xuICAgIGlmIChsaW5lc1t4XS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcGFpciA9IGxpbmVzW3hdLnNwbGl0KCc6ICcpO1xuICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBjb250aW51YXRpb25cbiAgICAgICAgaGVhZGVyc1tsYXN0XSArPSAnXFxuJyArIHBhaXJbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXN0ID0gcGFpclswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBoZWFkZXJzW2xhc3RdID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbi8qKlxuICogQ29tcGFyZXMgc3RhdGVtZW50cyAoaGVhdnkgY29tcGFyaXNvbiBmb3IgcmVwZWF0YWJsZSBjYW5vbmljYWwgb3JkZXJpbmcpXG4gKi9cbmZ1bmN0aW9uIGhlYXZ5Q29tcGFyZSh4LCB5LCBnLCB1cmlNYXApIHtcbiAgdmFyIG5vbkJsYW5rID0gZnVuY3Rpb24gbm9uQmxhbmsoeCkge1xuICAgIHJldHVybiB4LnRlcm1UeXBlID09PSAnQmxhbmtOb2RlJyA/IG51bGwgOiB4O1xuICB9O1xuICB2YXIgc2lnbmF0dXJlID0gZnVuY3Rpb24gc2lnbmF0dXJlKHgpIHtcbiAgICB2YXIgbGlzID0gZy5zdGF0ZW1lbnRzTWF0Y2hpbmcoeCkubWFwKGZ1bmN0aW9uIChzdCkge1xuICAgICAgcmV0dXJuICcnICsgbm9uQmxhbmsoc3Quc3ViamVjdCkgKyAnICcgKyBub25CbGFuayhzdC5wcmVkaWNhdGUpICsgJyAnICsgbm9uQmxhbmsoc3Qub2JqZWN0KTtcbiAgICB9KS5jb25jYXQoZy5zdGF0ZW1lbnRzTWF0Y2hpbmcodW5kZWZpbmVkLCB1bmRlZmluZWQsIHgpLm1hcChmdW5jdGlvbiAoc3QpIHtcbiAgICAgIHJldHVybiAnJyArIG5vbkJsYW5rKHN0LnN1YmplY3QpICsgJyAnICsgbm9uQmxhbmsoc3QucHJlZGljYXRlKSArICcgJyArIG5vbkJsYW5rKHN0Lm9iamVjdCk7XG4gICAgfSkpO1xuICAgIGxpcy5zb3J0KCk7XG4gICAgcmV0dXJuIGxpcy5qb2luKCdcXG4nKTtcbiAgfTtcbiAgaWYgKHgudGVybVR5cGUgPT09ICdCbGFua05vZGUnICYmIHkudGVybVR5cGUgPT09ICdCbGFua05vZGUnKSB7XG4gICAgaWYgKHguY29tcGFyZVRlcm0oeSkgPT09IDApIHJldHVybiAwOyAvLyBTYW1lXG4gICAgaWYgKHNpZ25hdHVyZSh4KSA+IHNpZ25hdHVyZSh5KSkgcmV0dXJuICsxO1xuICAgIGlmIChzaWduYXR1cmUoeCkgPCBzaWduYXR1cmUoeSkpIHJldHVybiAtMTtcbiAgICByZXR1cm4geC5jb21wYXJlVGVybSh5KTsgLy8gVG9vIGJhZCAtLSB0aGlzIG9yZGVyIG5vdCBjYW5vbmljYWwuXG4gICAgLy8gdGhyb3cgXCJkaWZmZXJlbnQgYm5vZGVzIGluZGlzdGlucXVpc2hhYmxlIGZvciBzb3J0aW5nXCJcbiAgfSBlbHNlIHtcbiAgICBpZiAodXJpTWFwICYmIHgudXJpICYmIHkudXJpKSB7XG4gICAgICByZXR1cm4gKHVyaU1hcFt4LnVyaV0gfHwgeC51cmkpLmxvY2FsZUNvbXBhcmUodXJpTWFwW3kudXJpXSB8fCB5LnVyaSk7XG4gICAgfVxuICAgIHJldHVybiB4LmNvbXBhcmVUZXJtKHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhlYXZ5Q29tcGFyZVNQTyh4LCB5LCBnLCB1cmlNYXApIHtcbiAgcmV0dXJuIGhlYXZ5Q29tcGFyZSh4LnN1YmplY3QsIHkuc3ViamVjdCwgZywgdXJpTWFwKSB8fCBoZWF2eUNvbXBhcmUoeC5wcmVkaWNhdGUsIHkucHJlZGljYXRlLCBnLCB1cmlNYXApIHx8IGhlYXZ5Q29tcGFyZSh4Lm9iamVjdCwgeS5vYmplY3QsIGcsIHVyaU1hcCk7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHNpbXBsZSBkZWJ1Z2dpbmcgZnVuY3Rpb25cbiAqIEBtZXRob2Qgb3V0cHV0XG4gKiBAcGFyYW0gbyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBvdXRwdXQobykge1xuICB2YXIgayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBrLnRleHRDb250ZW50ID0gbztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChrKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgRE9NIGZyb20gcGFyc2V4IFhNTC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VYTUwoc3RyLCBvcHRpb25zKSB7XG4gIHZhciBkcGFyc2VyO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKHR5cGVvZiB0YWJ1bGF0b3IgIT09ICd1bmRlZmluZWQnICYmIHRhYnVsYXRvci5pc0V4dGVuc2lvbikge1xuICAgIGRwYXJzZXIgPSBDb21wb25lbnRzLmNsYXNzZXNbJ0Btb3ppbGxhLm9yZy94bWxleHRyYXMvZG9tcGFyc2VyOzEnXS5nZXRTZXJ2aWNlKENvbXBvbmVudHMuaW50ZXJmYWNlcy5uc0lET01QYXJzZXIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIE5vZGUuanNcbiAgICAvLyB2YXIgbGlieG1sanMgPSByZXF1aXJlKCdsaWJ4bWxqcycpOyAvLyBXYXMganNkb20gYmVmb3JlIDIwMTItMDEgdGhlbiBsaWJ4bWxqcyBidXQgdGhhdCBub25zdGFuZGFyZFxuICAgIC8vIHJldHVybiBsaWJ4bWxqcy5wYXJzZVhtbFN0cmluZyhzdHIpXG5cbiAgICAvLyB2YXIganNkb20gPSByZXF1aXJlKCdqc2RvbScpOyAgIDIwMTItMDEgdGhvdWdoIDIwMTUtMDggbm8gd29ya3kgd2l0aCBuZXcgTm9kZVxuICAgIC8vIHZhciBkb20gPSBqc2RvbS5qc2RvbShzdHIsIHVuZGVmaW5lZCwge30gKTsvLyBodG1sLCBsZXZlbCwgb3B0aW9uc1xuXG4gICAgdmFyIERPTVBhcnNlciA9IHJlcXVpcmUoJ3htbGRvbScpLkRPTVBhcnNlcjsgLy8gMjAxNS0wOCBvbiBodHRwczovL2dpdGh1Yi5jb20vamluZHcveG1sZG9tXG4gICAgdmFyIGRvbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc3RyLCBvcHRpb25zLmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnKTtcbiAgICByZXR1cm4gZG9tO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuRE9NUGFyc2VyKSB7XG4gICAgICBkcGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTsgLy8gc2VlbXMgdG8gYWN0dWFsbHkgd29ya1xuICAgIH0gZWxzZSB7XG4gICAgICBkcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOyAvLyBEb2Mgc2F5cyB0aGlzIHdvcmtzXG4gICAgfVxuICB9XG4gIHJldHVybiBkcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzdHIsICdhcHBsaWNhdGlvbi94bWwnKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBzdGF0ZW1lbnRzIGVxdWFsIHRvIHggZnJvbSBhXG4gKiBFeHBvcnRzIGFzIGBSREZBcnJheVJlbW92ZWBcbiAqL1xuZnVuY3Rpb24gcmRmQXJyYXlSZW1vdmUoYSwgeCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBUT0RPOiBUaGlzIHVzZWQgdG8gYmUgdGhlIGZvbGxvd2luZywgd2hpY2ggZGlkbnQgYWx3YXlzIHdvcmsuLndoeVxuICAgIC8vIGlmKGFbaV0gPT09IHgpXG4gICAgaWYgKGFbaV0uc3ViamVjdC5zYW1lVGVybSh4LnN1YmplY3QpICYmIGFbaV0ucHJlZGljYXRlLnNhbWVUZXJtKHgucHJlZGljYXRlKSAmJiBhW2ldLm9iamVjdC5zYW1lVGVybSh4Lm9iamVjdCkgJiYgYVtpXS53aHkuc2FtZVRlcm0oeC53aHkpKSB7XG4gICAgICBhLnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdSREZBcnJheVJlbW92ZTogQXJyYXkgZGlkIG5vdCBjb250YWluICcgKyB4ICsgJyAnICsgeC53aHkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdTdGFydHNXaXRoKHN0ciwgcHJlZikge1xuICAvLyBtaXNzaW5nIGxpYnJhcnkgcm91dGluZXNcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBwcmVmLmxlbmd0aCkgPT09IHByZWY7XG59XG5cbi8qKlxuICogQysrLCBweXRob24gc3R5bGUgJXMgLT4gc3Vic1xuICovXG5mdW5jdGlvbiBzdHJpbmdUZW1wbGF0ZShiYXNlLCBzdWJzKSB7XG4gIHZhciBiYXNlQSA9IGJhc2Uuc3BsaXQoJyVzJyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3Vic1tpXSArPSAnJztcbiAgICByZXN1bHQgKz0gYmFzZUFbaV0gKyBzdWJzW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQgKyBiYXNlQS5zbGljZShzdWJzLmxlbmd0aCkuam9pbigpO1xufVxuXG4vLyBTdGFjayBkdW1wIG9uIGVycm9ycyAtIHRvIHBhc3MgZXJyb3JzIGJhY2tcblxuZnVuY3Rpb24gc3RhY2tTdHJpbmcoZSkge1xuICB2YXIgc3RyID0gJycgKyBlICsgJ1xcbic7XG4gIGlmICghZS5zdGFjaykge1xuICAgIHJldHVybiBzdHIgKyAnTm8gc3RhY2sgYXZhaWxhYmxlLlxcbic7XG4gIH1cbiAgdmFyIGxpbmVzID0gZS5zdGFjay50b1N0cmluZygpLnNwbGl0KCdcXG4nKTtcbiAgdmFyIHRvcHJpbnQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgaWYgKGxpbmUuaW5kZXhPZignZWNtYXVuaXQuanMnKSA+IC0xKSB7XG4gICAgICAvLyByZW1vdmUgdXNlbGVzcyBiaXQgb2YgdHJhY2ViYWNrXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGxpbmUuY2hhckF0KDApID09ICcoJykge1xuICAgICAgbGluZSA9ICdmdW5jdGlvbicgKyBsaW5lO1xuICAgIH1cbiAgICB2YXIgY2h1bmtzID0gbGluZS5zcGxpdCgnQCcpO1xuICAgIHRvcHJpbnQucHVzaChjaHVua3MpO1xuICB9XG4gIC8vIHRvcHJpbnQucmV2ZXJzZSgpOyAgTm8gLSBJIHByZWZlciB0aGUgbGF0ZXN0IGF0IHRoZSB0b3AgYnkgdGhlIGVycm9yIG1lc3NhZ2UgLXRibFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9wcmludC5sZW5ndGg7IGkrKykge1xuICAgIHN0ciArPSAnICAnICsgdG9wcmludFtpXVsxXSArICdcXG4gICAgJyArIHRvcHJpbnRbaV1bMF07XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgdmFyaWFibGVzIGluIGEgZ3JhcGggKHNoYWxsb3cpLlxuICogTm90ZTogVU5VU0VELlxuICovXG4vLyBmdW5jdGlvbiB2YXJpYWJsZXNJbiAoZykge1xuLy8gICBmb3IgKHZhciBpID0gMDsgaSA8IGcuc3RhdGVtZW50cy5sZW5ndGg7IGkrKykge1xuLy8gICAgIHZhciBzdCA9IGcuc3RhdGF0ZW1lbnRzW2ldXG4vLyAgICAgdmFyIHZhcnMgPSB7fVxuLy8gICAgIGlmIChzdC5zdWJqZWN0IGluc3RhbmNlb2YgJHJkZi5WYXJpYWJsZSkge1xuLy8gICAgICAgdmFyc1tzdC5zdWJqZWN0LnRvTlQoKV0gPSB0cnVlXG4vLyAgICAgfVxuLy8gICAgIGlmIChzdC5wcmVkaWNhdGUgaW5zdGFuY2VvZiAkcmRmLlZhcmlhYmxlKSB7XG4vLyAgICAgICB2YXJzW3N0LnByZWRpY2F0ZS50b05UKCldID0gdHJ1ZVxuLy8gICAgIH1cbi8vICAgICBpZiAoc3Qub2JqZWN0IGluc3RhbmNlb2YgJHJkZi5WYXJpYWJsZSkge1xuLy8gICAgICAgdmFyc1tzdC5vYmplY3QudG9OVCgpXSA9IHRydWVcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgcmV0dXJuIHZhcnNcbi8vIH1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBmb3IgdGhlIGFwcHJvcHJpYXRlIGN1cnJlbnQgcnVudGltZVxuICogZW52aXJvbm1lbnQuIEV4cG9ydHMgYXMgYFhNTEhUVFBGYWN0b3J5YFxuICovXG5mdW5jdGlvbiB4aHIoKSB7XG4gIHZhciBYTUxIdHRwUmVxdWVzdDtcbiAgLy8gUnVubmluZyBpbnNpZGUgdGhlIFRhYnVsYXRvciBGaXJlZm94IGV4dGVuc2lvblxuICBpZiAodHlwZW9mIHRhYnVsYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFidWxhdG9yLmlzRXh0ZW5zaW9uKSB7XG4gICAgLy8gQ2Fubm90IHVzZSBYTUxIdHRwUmVxdWVzdCBuYXRpdmVseSwgbXVzdCByZXF1ZXN0IGl0IHRocm91Z2ggU0RLXG4gICAgcmV0dXJuIENvbXBvbmVudHMuY2xhc3Nlc1snQG1vemlsbGEub3JnL3htbGV4dHJhcy94bWxodHRwcmVxdWVzdDsxJ10uY3JlYXRlSW5zdGFuY2UoKS5RdWVyeUludGVyZmFjZShDb21wb25lbnRzLmludGVyZmFjZXMubnNJWE1MSHR0cFJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdYTUxIdHRwUmVxdWVzdCcgaW4gd2luZG93KSB7XG4gICAgLy8gUnVubmluZyBpbnNpZGUgdGhlIGJyb3dzZXJcbiAgICBYTUxIdHRwUmVxdWVzdCA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcbiAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gUnVubmluZyBpbiBOb2RlLmpzXG4gICAgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdCcpLlhNTEh0dHBSZXF1ZXN0O1xuICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuQWN0aXZlWE9iamVjdCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENsYXNzT3JkZXIgPSByZXF1aXJlKCcuL2NsYXNzLW9yZGVyJyk7XG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpO1xudmFyIFVyaSA9IHJlcXVpcmUoJy4vdXJpJyk7XG5cbi8qKlxuICogVmFyaWFibGVzIGFyZSBwbGFjZWhvbGRlcnMgdXNlZCBpbiBwYXR0ZXJucyB0byBiZSBtYXRjaGVkLlxuICogSW4gY3dtIHRoZXkgYXJlIHN5bWJvbHMgd2hpY2ggYXJlIHRoZSBmb3JtdWxhJ3MgbGlzdCBvZiBxdWFudGlmaWVkIHZhcmlhYmxlcy5cbiAqIEluIHNwYXJxbCB0aGV5IGFyZSBub3QgdmlzaWJseSBVUklzLiAgSGVyZSB3ZSBjb21wcm9taXNlLCBieSBoYXZpbmdcbiAqIGEgY29tbW9uIHNwZWNpYWwgYmFzZSBVUkkgZm9yIHZhcmlhYmxlcy4gVGhlaXIgbmFtZXMgYXJlIHVyaXMsXG4gKiBidXQgdGhlID8gbm90YXRpb24gaGFzIGFuIGltcGxpY2l0IGJhc2UgdXJpIG9mICd2YXJpZDonXG4gKiBAY2xhc3MgVmFyaWFibGVcbiAqL1xuXG52YXIgVmFyaWFibGUgPSBmdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzKFZhcmlhYmxlLCBfTm9kZSk7XG5cbiAgZnVuY3Rpb24gVmFyaWFibGUoKSB7XG4gICAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhcmlhYmxlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChWYXJpYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZhcmlhYmxlKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy50ZXJtVHlwZSA9IFZhcmlhYmxlLnRlcm1UeXBlO1xuICAgIF90aGlzLnZhbHVlID0gbmFtZTtcbiAgICBfdGhpcy5iYXNlID0gJ3ZhcmlkOic7XG4gICAgX3RoaXMudXJpID0gVXJpLmpvaW4obmFtZSwgX3RoaXMuYmFzZSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhcmlhYmxlLCBbe1xuICAgIGtleTogJ2VxdWFscycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50ZXJtVHlwZSA9PT0gb3RoZXIudGVybVR5cGUgJiYgdGhpcy52YWx1ZSA9PT0gb3RoZXIudmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFzaFN0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc2hTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N1YnN0aXR1dGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzdGl0dXRlKGJpbmRpbmdzKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgcmV0dXJuIChyZWYgPSBiaW5kaW5nc1t0aGlzLnRvTlQoKV0pICE9IG51bGwgPyByZWYgOiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodGhpcy51cmkuc2xpY2UoMCwgdGhpcy5iYXNlLmxlbmd0aCkgPT09IHRoaXMuYmFzZSkge1xuICAgICAgICByZXR1cm4gJz8nICsgdGhpcy51cmkuc2xpY2UodGhpcy5iYXNlLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJz8nICsgdGhpcy51cmk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZhcmlhYmxlO1xufShOb2RlKTtcblxuVmFyaWFibGUudGVybVR5cGUgPSAnVmFyaWFibGUnO1xuVmFyaWFibGUucHJvdG90eXBlLmNsYXNzT3JkZXIgPSBDbGFzc09yZGVyWydWYXJpYWJsZSddO1xuVmFyaWFibGUucHJvdG90eXBlLmlzVmFyID0gMTtcblxubW9kdWxlLmV4cG9ydHMgPSBWYXJpYWJsZTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKTtcblxudmFyIFhTRCA9IGZ1bmN0aW9uIFhTRCgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFhTRCk7XG59O1xuXG5YU0QuYm9vbGVhbiA9IG5ldyBOYW1lZE5vZGUoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW4nKTtcblhTRC5kYXRlVGltZSA9IG5ldyBOYW1lZE5vZGUoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RhdGVUaW1lJyk7XG5YU0QuZGVjaW1hbCA9IG5ldyBOYW1lZE5vZGUoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RlY2ltYWwnKTtcblhTRC5kb3VibGUgPSBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkb3VibGUnKTtcblhTRC5pbnRlZ2VyID0gbmV3IE5hbWVkTm9kZSgnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjaW50ZWdlcicpO1xuWFNELmxhbmdTdHJpbmcgPSBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZycpO1xuWFNELnN0cmluZyA9IG5ldyBOYW1lZE5vZGUoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI3N0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhTRDsiLCIvLyAqKk4zTGV4ZXIqKiB0b2tlbml6ZXMgTjMgZG9jdW1lbnRzLlxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgaW1tZWRpYXRlbHkgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nID8gc2V0SW1tZWRpYXRlIDpcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmdW5jKSB7IHNldFRpbWVvdXQoZnVuYywgMCk7IH07XG5cbi8vIFJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgcmVwbGFjZW1lbnQgc3RyaW5nIHRvIGVzY2FwZSBOMyBzdHJpbmdzLlxuLy8gTm90ZSBob3cgd2UgY2F0Y2ggaW52YWxpZCB1bmljb2RlIHNlcXVlbmNlcyBzZXBhcmF0ZWx5ICh0aGV5IHdpbGwgdHJpZ2dlciBhbiBlcnJvcikuXG52YXIgZXNjYXBlU2VxdWVuY2UgPSAvXFxcXHUoW2EtZkEtRjAtOV17NH0pfFxcXFxVKFthLWZBLUYwLTldezh9KXxcXFxcW3VVXXxcXFxcKC4pL2c7XG52YXIgZXNjYXBlUmVwbGFjZW1lbnRzID0geyAnXFxcXCc6ICdcXFxcJywgXCInXCI6IFwiJ1wiLCAnXCInOiAnXCInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24nOiAnXFxuJywgJ3InOiAnXFxyJywgJ3QnOiAnXFx0JywgJ2YnOiAnXFxmJywgJ2InOiAnXFxiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdfJzogJ18nLCAnfic6ICd+JywgJy4nOiAnLicsICctJzogJy0nLCAnISc6ICchJywgJyQnOiAnJCcsICcmJzogJyYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJygnOiAnKCcsICcpJzogJyknLCAnKic6ICcqJywgJysnOiAnKycsICcsJzogJywnLCAnOyc6ICc7JywgJz0nOiAnPScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnLyc6ICcvJywgJz8nOiAnPycsICcjJzogJyMnLCAnQCc6ICdAJywgJyUnOiAnJScgfTtcbnZhciBpbGxlZ2FsSXJpQ2hhcnMgPSAvW1xceDAwLVxceDIwPD5cXFxcXCJcXHtcXH1cXHxcXF5cXGBdLztcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zTGV4ZXIob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNMZXhlcikpXG4gICAgcmV0dXJuIG5ldyBOM0xleGVyKG9wdGlvbnMpO1xuXG4gIC8vIEluIGxpbmUgbW9kZSAoTi1UcmlwbGVzIG9yIE4tUXVhZHMpLCBvbmx5IHNpbXBsZSBmZWF0dXJlcyBtYXkgYmUgcGFyc2VkXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGluZU1vZGUpIHtcbiAgICAvLyBEb24ndCB0b2tlbml6ZSBzcGVjaWFsIGxpdGVyYWxzXG4gICAgdGhpcy5fdHJpcGxlUXVvdGVkU3RyaW5nID0gdGhpcy5fbnVtYmVyID0gdGhpcy5fYm9vbGVhbiA9IC8kMF4vO1xuICAgIC8vIFN3YXAgdGhlIHRva2VuaXplIG1ldGhvZCBmb3IgYSByZXN0cmljdGVkIHZlcnNpb25cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5fdG9rZW5pemUgPSB0aGlzLnRva2VuaXplO1xuICAgIHRoaXMudG9rZW5pemUgPSBmdW5jdGlvbiAoaW5wdXQsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl90b2tlbml6ZShpbnB1dCwgZnVuY3Rpb24gKGVycm9yLCB0b2tlbikge1xuICAgICAgICBpZiAoIWVycm9yICYmIC9eKD86SVJJfHByZWZpeGVkfGxpdGVyYWx8bGFuZ2NvZGV8dHlwZXxcXC58ZW9mKSQvLnRlc3QodG9rZW4udHlwZSkpXG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZXJyb3IsIHRva2VuKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVycm9yIHx8IHNlbGYuX3N5bnRheEVycm9yKHRva2VuLnR5cGUsIGNhbGxiYWNrID0gbnVsbCkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufVxuXG5OM0xleGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gIyMgUmVndWxhciBleHByZXNzaW9uc1xuICAvLyBJdCdzIHNsaWdodGx5IGZhc3RlciB0byBoYXZlIHRoZXNlIGFzIHByb3BlcnRpZXMgdGhhbiBhcyBpbi1zY29wZSB2YXJpYWJsZXMuXG5cbiAgX2lyaTogL148KCg/OltePlxcXFxdfFxcXFxbdVVdKSspPi8sIC8vIElSSSB3aXRoIGVzY2FwZSBzZXF1ZW5jZXM7IG5lZWRzIHNhbml0eSBjaGVjayBhZnRlciB1bmVzY2FwaW5nXG4gIF91bmVzY2FwZWRJcmk6IC9ePChbXlxceDAwLVxceDIwPD5cXFxcXCJcXHtcXH1cXHxcXF5cXGBdKik+LywgLy8gSVJJIHdpdGhvdXQgZXNjYXBlIHNlcXVlbmNlczsgbm8gdW5lc2NhcGluZ1xuICBfdW5lc2NhcGVkU3RyaW5nOiAvXlwiW15cIlxcXFxdK1wiKD89W15cIlxcXFxdKS8sIC8vIG5vbi1lbXB0eSBzdHJpbmcgd2l0aG91dCBlc2NhcGUgc2VxdWVuY2VzXG4gIF9zaW5nbGVRdW90ZWRTdHJpbmc6IC9eXCJbXlwiXFxcXF0qKD86XFxcXC5bXlwiXFxcXF0qKSpcIig/PVteXCJcXFxcXSl8XidbXidcXFxcXSooPzpcXFxcLlteJ1xcXFxdKikqJyg/PVteJ1xcXFxdKS8sXG4gIF90cmlwbGVRdW90ZWRTdHJpbmc6IC9eXCJcIihcIlteXCJcXFxcXSooPzooPzpcXFxcLnxcIig/IVwiXCIpKVteXCJcXFxcXSopKlwiKVwiXCJ8XicnKCdbXidcXFxcXSooPzooPzpcXFxcLnwnKD8hJycpKVteJ1xcXFxdKikqJyknJy8sXG4gIF9sYW5nY29kZTogL15AKFthLXpdKyg/Oi1bYS16MC05XSspKikoPz1bXmEtejAtOVxcLV0pL2ksXG4gIF9wcmVmaXg6IC9eKCg/OltBLVphLXpcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSg/OlxcLj9bXFwtMC05QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSopPzooPz1bI1xcczxdKS8sXG4gIF9wcmVmaXhlZDogL14oKD86W0EtWmEtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKD86XFwuP1tcXC0wLTlBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKik/OigoPzooPzpbMC06QS1aX2EtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl18JVswLTlhLWZBLUZdezJ9fFxcXFxbISMtXFwvOz0/XFwtQF9+XSkoPzooPzpbXFwuXFwtMC06QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdfCVbMC05YS1mQS1GXXsyfXxcXFxcWyEjLVxcLzs9P1xcLUBffl0pKig/OltcXC0wLTpBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl18JVswLTlhLWZBLUZdezJ9fFxcXFxbISMtXFwvOz0/XFwtQF9+XSkpPyk/KSg/PVxcLj9bLDtcXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLFxuICBfYmxhbms6IC9eXzooKD86WzAtOUEtWl9hLXpcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSg/OlxcLj9bXFwtMC05QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSopKD89XFwuP1ssOzpcXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLFxuICBfbnVtYmVyOiAvXltcXC0rXT8oPzpcXGQrXFwuP1xcZCooW2VFXSg/OltcXC1cXCtdKT9cXGQrKXxcXGQqXFwuP1xcZCspKD89Wy4sOzpcXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLFxuICBfYm9vbGVhbjogL14oPzp0cnVlfGZhbHNlKSg/PVsuLDs6XFxzIygpXFxbXFxdXFx7XFx9XCInPF0pLyxcbiAgX2tleXdvcmQ6IC9eQFthLXpdKyg/PVtcXHMjPDpdKS8sXG4gIF9zcGFycWxLZXl3b3JkOiAvXig/OlBSRUZJWHxCQVNFfEdSQVBIKSg/PVtcXHMjPDpdKS9pLFxuICBfc2hvcnRQcmVkaWNhdGVzOiAvXmEoPz1cXHMrfDwpLyxcbiAgX25ld2xpbmU6IC9eWyBcXHRdKig/OiNbXlxcblxccl0qKT8oPzpcXHJcXG58XFxufFxccilbIFxcdF0qLyxcbiAgX3doaXRlc3BhY2U6IC9eWyBcXHRdKy8sXG4gIF9lbmRPZkZpbGU6IC9eKD86I1teXFxuXFxyXSopPyQvLFxuXG4gIC8vICMjIFByaXZhdGUgbWV0aG9kc1xuXG4gIC8vICMjIyBgX3Rva2VuaXplVG9FbmRgIHRva2VuaXplcyBhcyBmb3IgYXMgcG9zc2libGUsIGVtaXR0aW5nIHRva2VucyB0aHJvdWdoIHRoZSBjYWxsYmFjay5cbiAgX3Rva2VuaXplVG9FbmQ6IGZ1bmN0aW9uIChjYWxsYmFjaywgaW5wdXRGaW5pc2hlZCkge1xuICAgIC8vIENvbnRpbnVlIHBhcnNpbmcgYXMgZmFyIGFzIHBvc3NpYmxlOyB0aGUgbG9vcCB3aWxsIHJldHVybiBldmVudHVhbGx5LlxuICAgIHZhciBpbnB1dCA9IHRoaXMuX2lucHV0O1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyBDb3VudCBhbmQgc2tpcCB3aGl0ZXNwYWNlIGxpbmVzLlxuICAgICAgdmFyIHdoaXRlU3BhY2VNYXRjaDtcbiAgICAgIHdoaWxlICh3aGl0ZVNwYWNlTWF0Y2ggPSB0aGlzLl9uZXdsaW5lLmV4ZWMoaW5wdXQpKVxuICAgICAgICBpbnB1dCA9IGlucHV0LnN1YnN0cih3aGl0ZVNwYWNlTWF0Y2hbMF0ubGVuZ3RoLCBpbnB1dC5sZW5ndGgpLCB0aGlzLl9saW5lKys7XG4gICAgICAvLyBTa2lwIHdoaXRlc3BhY2Ugb24gY3VycmVudCBsaW5lLlxuICAgICAgaWYgKHdoaXRlU3BhY2VNYXRjaCA9IHRoaXMuX3doaXRlc3BhY2UuZXhlYyhpbnB1dCkpXG4gICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKHdoaXRlU3BhY2VNYXRjaFswXS5sZW5ndGgsIGlucHV0Lmxlbmd0aCk7XG5cbiAgICAgIC8vIFN0b3AgZm9yIG5vdyBpZiB3ZSdyZSBhdCB0aGUgZW5kLlxuICAgICAgaWYgKHRoaXMuX2VuZE9mRmlsZS50ZXN0KGlucHV0KSkge1xuICAgICAgICAvLyBJZiB0aGUgaW5wdXQgaXMgZmluaXNoZWQsIGVtaXQgRU9GLlxuICAgICAgICBpZiAoaW5wdXRGaW5pc2hlZClcbiAgICAgICAgICBjYWxsYmFjayhpbnB1dCA9IG51bGwsIHsgbGluZTogdGhpcy5fbGluZSwgdHlwZTogJ2VvZicsIHZhbHVlOiAnJywgcHJlZml4OiAnJyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIExvb2sgZm9yIHNwZWNpZmljIHRva2VuIHR5cGVzIGJhc2VkIG9uIHRoZSBmaXJzdCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgbGluZSA9IHRoaXMuX2xpbmUsIHR5cGUgPSAnJywgdmFsdWUgPSAnJywgcHJlZml4ID0gJycsXG4gICAgICAgICAgZmlyc3RDaGFyID0gaW5wdXRbMF0sIG1hdGNoID0gbnVsbCwgbWF0Y2hMZW5ndGggPSAwLCB1bmVzY2FwZWQsIGluY29uY2x1c2l2ZSA9IGZhbHNlO1xuICAgICAgc3dpdGNoIChmaXJzdENoYXIpIHtcbiAgICAgIGNhc2UgJ14nOlxuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggYSB0eXBlLlxuICAgICAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAxKSBicmVhaztcbiAgICAgICAgZWxzZSBpZiAoaW5wdXRbMV0gIT09ICdeJykgcmV0dXJuIHJlcG9ydFN5bnRheEVycm9yKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcmV2VG9rZW5UeXBlID0gJ14nO1xuICAgICAgICAvLyBNb3ZlIHRvIHR5cGUgSVJJIG9yIHByZWZpeGVkIG5hbWUuXG4gICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKDIpO1xuICAgICAgICBpZiAoaW5wdXRbMF0gIT09ICc8Jykge1xuICAgICAgICAgIGluY29uY2x1c2l2ZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmFsbCB0aHJvdWdoIGluIGNhc2UgdGhlIHR5cGUgaXMgYW4gSVJJLlxuXG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBmdWxsIElSSSB3aXRob3V0IGVzY2FwZSBzZXF1ZW5jZXMuXG4gICAgICAgIGlmIChtYXRjaCA9IHRoaXMuX3VuZXNjYXBlZElyaS5leGVjKGlucHV0KSlcbiAgICAgICAgICB0eXBlID0gJ0lSSScsIHZhbHVlID0gbWF0Y2hbMV07XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgZnVsbCBJUkkgd2l0aCBlc2NhcGUgc2VxdWVuY2VzLlxuICAgICAgICBlbHNlIGlmIChtYXRjaCA9IHRoaXMuX2lyaS5leGVjKGlucHV0KSkge1xuICAgICAgICAgIHVuZXNjYXBlZCA9IHRoaXMuX3VuZXNjYXBlKG1hdGNoWzFdKTtcbiAgICAgICAgICBpZiAodW5lc2NhcGVkID09PSBudWxsIHx8IGlsbGVnYWxJcmlDaGFycy50ZXN0KHVuZXNjYXBlZCkpXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0U3ludGF4RXJyb3IodGhpcyk7XG4gICAgICAgICAgdHlwZSA9ICdJUkknLCB2YWx1ZSA9IHVuZXNjYXBlZDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnXyc6XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgYmxhbmsgbm9kZS4gU2luY2UgaXQgY2FuIGNvbnRhaW4gKGJ1dCBub3QgZW5kIHdpdGgpIGEgZG90LFxuICAgICAgICAvLyB3ZSBhbHdheXMgbmVlZCBhIG5vbi1kb3QgY2hhcmFjdGVyIGJlZm9yZSBkZWNpZGluZyBpdCBpcyBhIHByZWZpeGVkIG5hbWUuXG4gICAgICAgIC8vIFRoZXJlZm9yZSwgdHJ5IGluc2VydGluZyBhIHNwYWNlIGlmIHdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgICBpZiAoKG1hdGNoID0gdGhpcy5fYmxhbmsuZXhlYyhpbnB1dCkpIHx8XG4gICAgICAgICAgICBpbnB1dEZpbmlzaGVkICYmIChtYXRjaCA9IHRoaXMuX2JsYW5rLmV4ZWMoaW5wdXQgKyAnICcpKSlcbiAgICAgICAgICB0eXBlID0gJ3ByZWZpeGVkJywgcHJlZml4ID0gJ18nLCB2YWx1ZSA9IG1hdGNoWzFdO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnXCInOlxuICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBub24tZW1wdHkgZG91YmxlLXF1b3RlZCBsaXRlcmFsIHdpdGhvdXQgZXNjYXBlIHNlcXVlbmNlcy5cbiAgICAgICAgaWYgKG1hdGNoID0gdGhpcy5fdW5lc2NhcGVkU3RyaW5nLmV4ZWMoaW5wdXQpKVxuICAgICAgICAgIHR5cGUgPSAnbGl0ZXJhbCcsIHZhbHVlID0gbWF0Y2hbMF07XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGFueSBvdGhlciBsaXRlcmFsIHdyYXBwZWQgaW4gYSBwYWlyIG9mIHNpbmdsZSBvciBkb3VibGUgcXVvdGVzLlxuICAgICAgICBlbHNlIGlmIChtYXRjaCA9IHRoaXMuX3NpbmdsZVF1b3RlZFN0cmluZy5leGVjKGlucHV0KSkge1xuICAgICAgICAgIHVuZXNjYXBlZCA9IHRoaXMuX3VuZXNjYXBlKG1hdGNoWzBdKTtcbiAgICAgICAgICBpZiAodW5lc2NhcGVkID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHJlcG9ydFN5bnRheEVycm9yKHRoaXMpO1xuICAgICAgICAgIHR5cGUgPSAnbGl0ZXJhbCcsIHZhbHVlID0gdW5lc2NhcGVkLnJlcGxhY2UoL14nfCckL2csICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgbGl0ZXJhbCB3cmFwcGVkIGluIHRocmVlIHBhaXJzIG9mIHNpbmdsZSBvciBkb3VibGUgcXVvdGVzLlxuICAgICAgICBlbHNlIGlmIChtYXRjaCA9IHRoaXMuX3RyaXBsZVF1b3RlZFN0cmluZy5leGVjKGlucHV0KSkge1xuICAgICAgICAgIHVuZXNjYXBlZCA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdO1xuICAgICAgICAgIC8vIENvdW50IHRoZSBuZXdsaW5lcyBhbmQgYWR2YW5jZSBsaW5lIGNvdW50ZXIuXG4gICAgICAgICAgdGhpcy5fbGluZSArPSB1bmVzY2FwZWQuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLykubGVuZ3RoIC0gMTtcbiAgICAgICAgICB1bmVzY2FwZWQgPSB0aGlzLl91bmVzY2FwZSh1bmVzY2FwZWQpO1xuICAgICAgICAgIGlmICh1bmVzY2FwZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0U3ludGF4RXJyb3IodGhpcyk7XG4gICAgICAgICAgdHlwZSA9ICdsaXRlcmFsJywgdmFsdWUgPSB1bmVzY2FwZWQucmVwbGFjZSgvXid8JyQvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGxhbmd1YWdlIGNvZGUuXG4gICAgICAgIGlmICh0aGlzLl9wcmV2VG9rZW5UeXBlID09PSAnbGl0ZXJhbCcgJiYgKG1hdGNoID0gdGhpcy5fbGFuZ2NvZGUuZXhlYyhpbnB1dCkpKVxuICAgICAgICAgIHR5cGUgPSAnbGFuZ2NvZGUnLCB2YWx1ZSA9IG1hdGNoWzFdO1xuICAgICAgICAvLyBUcnkgdG8gZmluZCBhIGtleXdvcmQuXG4gICAgICAgIGVsc2UgaWYgKG1hdGNoID0gdGhpcy5fa2V5d29yZC5leGVjKGlucHV0KSlcbiAgICAgICAgICB0eXBlID0gbWF0Y2hbMF07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBkb3QgYXMgcHVuY3R1YXRpb24uXG4gICAgICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDEgPyBpbnB1dEZpbmlzaGVkIDogKGlucHV0WzFdIDwgJzAnIHx8IGlucHV0WzFdID4gJzknKSkge1xuICAgICAgICAgIHR5cGUgPSAnLic7XG4gICAgICAgICAgbWF0Y2hMZW5ndGggPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhbGwgdGhyb3VnaCB0byBudW1lcmljYWwgY2FzZSAoY291bGQgYmUgYSBkZWNpbWFsIGRvdCkuXG5cbiAgICAgIGNhc2UgJzAnOlxuICAgICAgY2FzZSAnMSc6XG4gICAgICBjYXNlICcyJzpcbiAgICAgIGNhc2UgJzMnOlxuICAgICAgY2FzZSAnNCc6XG4gICAgICBjYXNlICc1JzpcbiAgICAgIGNhc2UgJzYnOlxuICAgICAgY2FzZSAnNyc6XG4gICAgICBjYXNlICc4JzpcbiAgICAgIGNhc2UgJzknOlxuICAgICAgY2FzZSAnKyc6XG4gICAgICBjYXNlICctJzpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBudW1iZXIuXG4gICAgICAgIGlmIChtYXRjaCA9IHRoaXMuX251bWJlci5leGVjKGlucHV0KSkge1xuICAgICAgICAgIHR5cGUgPSAnbGl0ZXJhbCc7XG4gICAgICAgICAgdmFsdWUgPSAnXCInICsgbWF0Y2hbMF0gKyAnXCJeXmh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIycgK1xuICAgICAgICAgICAgICAgICAgKG1hdGNoWzFdID8gJ2RvdWJsZScgOiAoL15bK1xcLV0/XFxkKyQvLnRlc3QobWF0Y2hbMF0pID8gJ2ludGVnZXInIDogJ2RlY2ltYWwnKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdwJzpcbiAgICAgIGNhc2UgJ1AnOlxuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdnJzpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBTUEFSUUwtc3R5bGUga2V5d29yZC5cbiAgICAgICAgaWYgKG1hdGNoID0gdGhpcy5fc3BhcnFsS2V5d29yZC5leGVjKGlucHV0KSlcbiAgICAgICAgICB0eXBlID0gbWF0Y2hbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluY29uY2x1c2l2ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmJzpcbiAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggYSBib29sZWFuLlxuICAgICAgICBpZiAobWF0Y2ggPSB0aGlzLl9ib29sZWFuLmV4ZWMoaW5wdXQpKVxuICAgICAgICAgIHR5cGUgPSAnbGl0ZXJhbCcsIHZhbHVlID0gJ1wiJyArIG1hdGNoWzBdICsgJ1wiXl5odHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNib29sZWFuJztcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluY29uY2x1c2l2ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdhJzpcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW4gYWJicmV2aWF0ZWQgcHJlZGljYXRlLlxuICAgICAgICBpZiAobWF0Y2ggPSB0aGlzLl9zaG9ydFByZWRpY2F0ZXMuZXhlYyhpbnB1dCkpXG4gICAgICAgICAgdHlwZSA9ICdhYmJyZXZpYXRpb24nLCB2YWx1ZSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjdHlwZSc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBpbmNvbmNsdXNpdmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLCc6XG4gICAgICBjYXNlICc7JzpcbiAgICAgIGNhc2UgJ1snOlxuICAgICAgY2FzZSAnXSc6XG4gICAgICBjYXNlICcoJzpcbiAgICAgIGNhc2UgJyknOlxuICAgICAgY2FzZSAneyc6XG4gICAgICBjYXNlICd9JzpcbiAgICAgICAgLy8gVGhlIG5leHQgdG9rZW4gaXMgcHVuY3R1YXRpb25cbiAgICAgICAgbWF0Y2hMZW5ndGggPSAxO1xuICAgICAgICB0eXBlID0gZmlyc3RDaGFyO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW5jb25jbHVzaXZlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gU29tZSBmaXJzdCBjaGFyYWN0ZXJzIGRvIG5vdCBhbGxvdyBhbiBpbW1lZGlhdGUgZGVjaXNpb24sIHNvIGluc3BlY3QgbW9yZS5cbiAgICAgIGlmIChpbmNvbmNsdXNpdmUpIHtcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYSBwcmVmaXguXG4gICAgICAgIGlmICgodGhpcy5fcHJldlRva2VuVHlwZSA9PT0gJ0BwcmVmaXgnIHx8IHRoaXMuX3ByZXZUb2tlblR5cGUgPT09ICdQUkVGSVgnKSAmJlxuICAgICAgICAgICAgKG1hdGNoID0gdGhpcy5fcHJlZml4LmV4ZWMoaW5wdXQpKSlcbiAgICAgICAgICB0eXBlID0gJ3ByZWZpeCcsIHZhbHVlID0gbWF0Y2hbMV0gfHwgJyc7XG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGEgcHJlZml4ZWQgbmFtZS4gU2luY2UgaXQgY2FuIGNvbnRhaW4gKGJ1dCBub3QgZW5kIHdpdGgpIGEgZG90LFxuICAgICAgICAvLyB3ZSBhbHdheXMgbmVlZCBhIG5vbi1kb3QgY2hhcmFjdGVyIGJlZm9yZSBkZWNpZGluZyBpdCBpcyBhIHByZWZpeGVkIG5hbWUuXG4gICAgICAgIC8vIFRoZXJlZm9yZSwgdHJ5IGluc2VydGluZyBhIHNwYWNlIGlmIHdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSB0aGlzLl9wcmVmaXhlZC5leGVjKGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAgaW5wdXRGaW5pc2hlZCAmJiAobWF0Y2ggPSB0aGlzLl9wcmVmaXhlZC5leGVjKGlucHV0ICsgJyAnKSkpXG4gICAgICAgICAgdHlwZSA9ICdwcmVmaXhlZCcsIHByZWZpeCA9IG1hdGNoWzFdIHx8ICcnLCB2YWx1ZSA9IHRoaXMuX3VuZXNjYXBlKG1hdGNoWzJdKTtcbiAgICAgIH1cblxuICAgICAgLy8gQSB0eXBlIHRva2VuIGlzIHNwZWNpYWw6IGl0IGNhbiBvbmx5IGJlIGVtaXR0ZWQgYWZ0ZXIgYW4gSVJJIG9yIHByZWZpeGVkIG5hbWUgaXMgcmVhZC5cbiAgICAgIGlmICh0aGlzLl9wcmV2VG9rZW5UeXBlID09PSAnXicpXG4gICAgICAgIHR5cGUgPSAodHlwZSA9PT0gJ0lSSScgfHwgdHlwZSA9PT0gJ3ByZWZpeGVkJykgPyAndHlwZScgOiAnJztcblxuICAgICAgLy8gV2hhdCBpZiBub3RoaW5nIG9mIHRoZSBhYm92ZSB3YXMgZm91bmQ/XG4gICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgLy8gV2UgY291bGQgYmUgaW4gc3RyZWFtaW5nIG1vZGUsIGFuZCB0aGVuIHdlIGp1c3Qgd2FpdCBmb3IgbW9yZSBpbnB1dCB0byBhcnJpdmUuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgYSBzeW50YXggZXJyb3IgaGFzIG9jY3VycmVkIGluIHRoZSBpbnB1dC5cbiAgICAgICAgLy8gT25lIGV4Y2VwdGlvbjogZXJyb3Igb24gYW4gdW5hY2NvdW50ZWQgbGluZWJyZWFrICg9IG5vdCBpbnNpZGUgYSB0cmlwbGUtcXVvdGVkIGxpdGVyYWwpLlxuICAgICAgICBpZiAoaW5wdXRGaW5pc2hlZCB8fCAoIS9eJycnfF5cIlwiXCIvLnRlc3QoaW5wdXQpICYmIC9cXG58XFxyLy50ZXN0KGlucHV0KSkpXG4gICAgICAgICAgcmV0dXJuIHJlcG9ydFN5bnRheEVycm9yKHRoaXMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIEVtaXQgdGhlIHBhcnNlZCB0b2tlbi5cbiAgICAgIGNhbGxiYWNrKG51bGwsIHsgbGluZTogbGluZSwgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlLCBwcmVmaXg6IHByZWZpeCB9KTtcbiAgICAgIHRoaXMuX3ByZXZUb2tlblR5cGUgPSB0eXBlO1xuXG4gICAgICAvLyBBZHZhbmNlIHRvIG5leHQgcGFydCB0byB0b2tlbml6ZS5cbiAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKG1hdGNoTGVuZ3RoIHx8IG1hdGNoWzBdLmxlbmd0aCwgaW5wdXQubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBTaWduYWxzIHRoZSBzeW50YXggZXJyb3IgdGhyb3VnaCB0aGUgY2FsbGJhY2tcbiAgICBmdW5jdGlvbiByZXBvcnRTeW50YXhFcnJvcihzZWxmKSB7IGNhbGxiYWNrKHNlbGYuX3N5bnRheEVycm9yKC9eXFxTKi8uZXhlYyhpbnB1dClbMF0pKTsgfVxuICB9LFxuXG4gIC8vICMjIyBgX3VuZXNjYXBlYCByZXBsYWNlcyBOMyBlc2NhcGUgY29kZXMgYnkgdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICBfdW5lc2NhcGU6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBpdGVtLnJlcGxhY2UoZXNjYXBlU2VxdWVuY2UsIGZ1bmN0aW9uIChzZXF1ZW5jZSwgdW5pY29kZTQsIHVuaWNvZGU4LCBlc2NhcGVkQ2hhcikge1xuICAgICAgICB2YXIgY2hhckNvZGU7XG4gICAgICAgIGlmICh1bmljb2RlNCkge1xuICAgICAgICAgIGNoYXJDb2RlID0gcGFyc2VJbnQodW5pY29kZTQsIDE2KTtcbiAgICAgICAgICBpZiAoaXNOYU4oY2hhckNvZGUpKSB0aHJvdyBuZXcgRXJyb3IoKTsgLy8gY2FuIG5ldmVyIGhhcHBlbiAocmVnZXgpLCBidXQgaGVscHMgcGVyZm9ybWFuY2VcbiAgICAgICAgICByZXR1cm4gZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bmljb2RlOCkge1xuICAgICAgICAgIGNoYXJDb2RlID0gcGFyc2VJbnQodW5pY29kZTgsIDE2KTtcbiAgICAgICAgICBpZiAoaXNOYU4oY2hhckNvZGUpKSB0aHJvdyBuZXcgRXJyb3IoKTsgLy8gY2FuIG5ldmVyIGhhcHBlbiAocmVnZXgpLCBidXQgaGVscHMgcGVyZm9ybWFuY2VcbiAgICAgICAgICBpZiAoY2hhckNvZGUgPD0gMHhGRkZGKSByZXR1cm4gZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICAgICAgICByZXR1cm4gZnJvbUNoYXJDb2RlKDB4RDgwMCArICgoY2hhckNvZGUgLT0gMHgxMDAwMCkgLyAweDQwMCksIDB4REMwMCArIChjaGFyQ29kZSAmIDB4M0ZGKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gZXNjYXBlUmVwbGFjZW1lbnRzW2VzY2FwZWRDaGFyXTtcbiAgICAgICAgICBpZiAoIXJlcGxhY2VtZW50KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IHJldHVybiBudWxsOyB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfc3ludGF4RXJyb3JgIGNyZWF0ZXMgYSBzeW50YXggZXJyb3IgZm9yIHRoZSBnaXZlbiBpc3N1ZVxuICBfc3ludGF4RXJyb3I6IGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdTeW50YXggZXJyb3I6IHVuZXhwZWN0ZWQgXCInICsgaXNzdWUgKyAnXCIgb24gbGluZSAnICsgdGhpcy5fbGluZSArICcuJyk7XG4gIH0sXG5cblxuICAvLyAjIyBQdWJsaWMgbWV0aG9kc1xuXG4gIC8vICMjIyBgdG9rZW5pemVgIHN0YXJ0cyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgYW4gTjMgZG9jdW1lbnQgaW50byBhbiBhcnJheSBvZiB0b2tlbnMuXG4gIC8vIFRoZSBpbnB1dCBjYW4gYmUgYSBzdHJpbmcgb3IgYSBzdHJlYW0uXG4gIHRva2VuaXplOiBmdW5jdGlvbiAoaW5wdXQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX2xpbmUgPSAxO1xuXG4gICAgLy8gSWYgdGhlIGlucHV0IGlzIGEgc3RyaW5nLCBjb250aW51b3VzbHkgZW1pdCB0b2tlbnMgdGhyb3VnaCB0aGUgY2FsbGJhY2sgdW50aWwgdGhlIGVuZC5cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgIGltbWVkaWF0ZWx5KGZ1bmN0aW9uICgpIHsgc2VsZi5fdG9rZW5pemVUb0VuZChjYWxsYmFjaywgdHJ1ZSk7IH0pO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIHRoZSBpbnB1dCB3aWxsIGJlIHN0cmVhbWVkLlxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5faW5wdXQgPSAnJztcblxuICAgICAgLy8gSWYgbm8gaW5wdXQgd2FzIGdpdmVuLCBpdCB3aWxsIGJlIHN0cmVhbWVkIHRocm91Z2ggYGFkZENodW5rYCBhbmQgZW5kZWQgd2l0aCBgZW5kYFxuICAgICAgaWYgKCFpbnB1dCB8fCB0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5hZGRDaHVuayA9IGFkZENodW5rO1xuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgICBjYWxsYmFjayA9IGlucHV0O1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgaW5wdXQgaXRzZWxmIG11c3QgYmUgYSBzdHJlYW1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0LnNldEVuY29kaW5nID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIGlucHV0LnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICAgIGlucHV0Lm9uKCdkYXRhJywgYWRkQ2h1bmspO1xuICAgICAgICBpbnB1dC5vbignZW5kJywgZW5kKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGRzIHRoZSBkYXRhIGNodW5rIHRvIHRoZSBidWZmZXIgYW5kIHBhcnNlcyBhcyBmYXIgYXMgcG9zc2libGVcbiAgICBmdW5jdGlvbiBhZGRDaHVuayhkYXRhKSB7XG4gICAgICBpZiAoc2VsZi5faW5wdXQgIT09IG51bGwpIHtcbiAgICAgICAgc2VsZi5faW5wdXQgKz0gZGF0YTtcbiAgICAgICAgc2VsZi5fdG9rZW5pemVUb0VuZChjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhcnNlcyB1bnRpbCB0aGUgZW5kXG4gICAgZnVuY3Rpb24gZW5kKCkge1xuICAgICAgaWYgKHNlbGYuX2lucHV0ICE9PSBudWxsKVxuICAgICAgICBzZWxmLl90b2tlbml6ZVRvRW5kKGNhbGxiYWNrLCB0cnVlKTtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyAjIyBFeHBvcnRzXG5cbi8vIEV4cG9ydCB0aGUgYE4zTGV4ZXJgIGNsYXNzIGFzIGEgd2hvbGUuXG5tb2R1bGUuZXhwb3J0cyA9IE4zTGV4ZXI7XG4iLCIvLyAqKk4zUGFyc2VyKiogcGFyc2VzIE4zIGRvY3VtZW50cy5cbnZhciBOM0xleGVyID0gcmVxdWlyZSgnLi9OM0xleGVyJyk7XG5cbnZhciBSREZfUFJFRklYID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnLFxuICAgIFJERl9OSUwgICAgPSBSREZfUFJFRklYICsgJ25pbCcsXG4gICAgUkRGX0ZJUlNUICA9IFJERl9QUkVGSVggKyAnZmlyc3QnLFxuICAgIFJERl9SRVNUICAgPSBSREZfUFJFRklYICsgJ3Jlc3QnO1xuXG52YXIgYWJzb2x1dGVJUkkgPSAvXlthLXpdW2EtejAtOSsuLV0qOi9pLFxuICAgIHNjaGVtZUF1dGhvcml0eSA9IC9eKD86KFthLXpdW2EtejAtOSsuLV0qOikpPyg/OlxcL1xcL1teXFwvXSopPy9pLFxuICAgIGRvdFNlZ21lbnRzID0gLyg/Ol58XFwvKVxcLlxcLj8oPzokfFtcXC8jP10pLztcblxuLy8gVGhlIG5leHQgSUQgZm9yIG5ldyBibGFuayBub2Rlc1xudmFyIGJsYW5rTm9kZVByZWZpeCA9IDAsIGJsYW5rTm9kZUNvdW50ID0gMDtcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zUGFyc2VyKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE4zUGFyc2VyKSlcbiAgICByZXR1cm4gbmV3IE4zUGFyc2VyKG9wdGlvbnMpO1xuICB0aGlzLl90cmlwbGVTdGFjayA9IFtdO1xuICB0aGlzLl9ncmFwaCA9IG51bGw7XG5cbiAgLy8gU2V0IHRoZSBkb2N1bWVudCBJUkkuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLl9zZXRCYXNlKG9wdGlvbnMuZG9jdW1lbnRJUkkpO1xuXG4gIC8vIFNldCBzdXBwb3J0ZWQgZmVhdHVyZXMgZGVwZW5kaW5nIG9uIHRoZSBmb3JtYXQuXG4gIHZhciBmb3JtYXQgPSAodHlwZW9mIG9wdGlvbnMuZm9ybWF0ID09PSAnc3RyaW5nJykgJiYgb3B0aW9ucy5mb3JtYXQubWF0Y2goL1xcdyokLylbMF0udG9Mb3dlckNhc2UoKSxcbiAgICAgIGlzVHVydGxlID0gZm9ybWF0ID09PSAndHVydGxlJywgaXNUcmlHID0gZm9ybWF0ID09PSAndHJpZycsXG4gICAgICBpc05UcmlwbGVzID0gL3RyaXBsZS8udGVzdChmb3JtYXQpLCBpc05RdWFkcyA9IC9xdWFkLy50ZXN0KGZvcm1hdCksXG4gICAgICBpc0xpbmVNb2RlID0gaXNOVHJpcGxlcyB8fCBpc05RdWFkcztcbiAgaWYgKCEodGhpcy5fc3VwcG9ydHNOYW1lZEdyYXBocyA9ICFpc1R1cnRsZSkpXG4gICAgdGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaCA9IHRoaXMuX3JlYWRQcmVkaWNhdGU7XG4gIHRoaXMuX3N1cHBvcnRzUXVhZHMgPSAhKGlzVHVydGxlIHx8IGlzVHJpRyB8fCBpc05UcmlwbGVzKTtcbiAgLy8gRGlzYWJsZSByZWxhdGl2ZSBJUklzIGluIE4tVHJpcGxlcyBvciBOLVF1YWRzIG1vZGVcbiAgaWYgKGlzTGluZU1vZGUpIHtcbiAgICB0aGlzLl9iYXNlID0gJyc7XG4gICAgdGhpcy5fcmVzb2x2ZUlSSSA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgdGhpcy5fZXJyb3IoJ0Rpc2FsbG93ZWQgcmVsYXRpdmUgSVJJJywgdG9rZW4pO1xuICAgICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrID0gbm9vcCwgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuICB0aGlzLl9ibGFua05vZGVQcmVmaXggPSB0eXBlb2Ygb3B0aW9ucy5ibGFua05vZGVQcmVmaXggIT09ICdzdHJpbmcnID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfOicgKyBvcHRpb25zLmJsYW5rTm9kZVByZWZpeC5yZXBsYWNlKC9eXzovLCAnJyk7XG4gIHRoaXMuX2xleGVyID0gb3B0aW9ucy5sZXhlciB8fCBuZXcgTjNMZXhlcih7IGxpbmVNb2RlOiBpc0xpbmVNb2RlIH0pO1xufVxuXG4vLyAjIyBQcml2YXRlIGNsYXNzIG1ldGhvZHNcblxuLy8gIyMjIGBfcmVzZXRCbGFua05vZGVJZHNgIHJlc3RhcnRzIGJsYW5rIG5vZGUgaWRlbnRpZmljYXRpb24uXG5OM1BhcnNlci5fcmVzZXRCbGFua05vZGVJZHMgPSBmdW5jdGlvbiAoKSB7XG4gIGJsYW5rTm9kZVByZWZpeCA9IGJsYW5rTm9kZUNvdW50ID0gMDtcbn07XG5cbk4zUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgLy8gIyMgUHJpdmF0ZSBtZXRob2RzXG5cbiAgLy8gIyMjIGBfc2V0QmFzZWAgc2V0cyB0aGUgYmFzZSBJUkkgdG8gcmVzb2x2ZSByZWxhdGl2ZSBJUklzLlxuICBfc2V0QmFzZTogZnVuY3Rpb24gKGJhc2VJUkkpIHtcbiAgICBpZiAoIWJhc2VJUkkpXG4gICAgICBiYXNlSVJJID0gbnVsbDtcbiAgICBlbHNlIGlmIChiYXNlSVJJLmluZGV4T2YoJyMnKSA+PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJhc2UgSVJJICcgKyBiYXNlSVJJKTtcbiAgICAvLyBTZXQgYmFzZSBJUkkgYW5kIGl0cyBjb21wb25lbnRzXG4gICAgaWYgKHRoaXMuX2Jhc2UgPSBiYXNlSVJJKSB7XG4gICAgICB0aGlzLl9iYXNlUGF0aCAgID0gYmFzZUlSSS5yZXBsYWNlKC9bXlxcLz9dKig/OlxcPy4qKT8kLywgJycpO1xuICAgICAgYmFzZUlSSSA9IGJhc2VJUkkubWF0Y2goc2NoZW1lQXV0aG9yaXR5KTtcbiAgICAgIHRoaXMuX2Jhc2VSb290ICAgPSBiYXNlSVJJWzBdO1xuICAgICAgdGhpcy5fYmFzZVNjaGVtZSA9IGJhc2VJUklbMV07XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRJblRvcENvbnRleHRgIHJlYWRzIGEgdG9rZW4gd2hlbiBpbiB0aGUgdG9wIGNvbnRleHQuXG4gIF9yZWFkSW5Ub3BDb250ZXh0OiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAvLyBJZiBhbiBFT0YgdG9rZW4gYXJyaXZlcyBpbiB0aGUgdG9wIGNvbnRleHQsIHNpZ25hbCB0aGF0IHdlJ3JlIGRvbmUuXG4gICAgY2FzZSAnZW9mJzpcbiAgICAgIGlmICh0aGlzLl9ncmFwaCAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmNsb3NlZCBncmFwaCcsIHRva2VuKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9wcmVmaXhlcy5fO1xuICAgICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrKG51bGwsIG51bGwsIHRoaXMuX3ByZWZpeGVzKTtcbiAgICAvLyBJdCBjb3VsZCBiZSBhIHByZWZpeCBkZWNsYXJhdGlvbi5cbiAgICBjYXNlICdAcHJlZml4JzpcbiAgICAgIHRoaXMuX3NwYXJxbFN0eWxlID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFByZWZpeDtcbiAgICBjYXNlICdQUkVGSVgnOlxuICAgICAgdGhpcy5fc3BhcnFsU3R5bGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRQcmVmaXg7XG4gICAgLy8gSXQgY291bGQgYmUgYSBiYXNlIGRlY2xhcmF0aW9uLlxuICAgIGNhc2UgJ0BiYXNlJzpcbiAgICAgIHRoaXMuX3NwYXJxbFN0eWxlID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJhc2VJUkk7XG4gICAgY2FzZSAnQkFTRSc6XG4gICAgICB0aGlzLl9zcGFycWxTdHlsZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJhc2VJUkk7XG4gICAgLy8gSXQgY291bGQgYmUgYSBncmFwaC5cbiAgICBjYXNlICd7JzpcbiAgICAgIGlmICh0aGlzLl9zdXBwb3J0c05hbWVkR3JhcGhzKSB7XG4gICAgICAgIHRoaXMuX2dyYXBoID0gJyc7XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZFN1YmplY3Q7XG4gICAgICB9XG4gICAgY2FzZSAnR1JBUEgnOlxuICAgICAgaWYgKHRoaXMuX3N1cHBvcnRzTmFtZWRHcmFwaHMpXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkTmFtZWRHcmFwaExhYmVsO1xuICAgIC8vIE90aGVyd2lzZSwgdGhlIG5leHQgdG9rZW4gbXVzdCBiZSBhIHN1YmplY3QuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkU3ViamVjdCh0b2tlbik7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRTdWJqZWN0YCByZWFkcyBhIHRyaXBsZSdzIHN1YmplY3QuXG4gIF9yZWFkU3ViamVjdDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gbnVsbDtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdJUkknOlxuICAgICAgaWYgKHRoaXMuX2Jhc2UgPT09IG51bGwgfHwgYWJzb2x1dGVJUkkudGVzdCh0b2tlbi52YWx1ZSkpXG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IHRoaXMuX3Jlc29sdmVJUkkodG9rZW4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHJlZml4ZWQnOlxuICAgICAgdmFyIHByZWZpeCA9IHRoaXMuX3ByZWZpeGVzW3Rva2VuLnByZWZpeF07XG4gICAgICBpZiAocHJlZml4ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5kZWZpbmVkIHByZWZpeCBcIicgKyB0b2tlbi5wcmVmaXggKyAnOlwiJywgdG9rZW4pO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IHByZWZpeCArIHRva2VuLnZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnWyc6XG4gICAgICAvLyBTdGFydCBhIG5ldyB0cmlwbGUgd2l0aCBhIG5ldyBibGFuayBub2RlIGFzIHN1YmplY3QuXG4gICAgICB0aGlzLl9zdWJqZWN0ID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuICAgICAgdGhpcy5fdHJpcGxlU3RhY2sucHVzaCh7IHN1YmplY3Q6IHRoaXMuX3N1YmplY3QsIHByZWRpY2F0ZTogbnVsbCwgb2JqZWN0OiBudWxsLCB0eXBlOiAnYmxhbmsnIH0pO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRCbGFua05vZGVIZWFkO1xuICAgIGNhc2UgJygnOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgbGlzdFxuICAgICAgdGhpcy5fdHJpcGxlU3RhY2sucHVzaCh7IHN1YmplY3Q6IFJERl9OSUwsIHByZWRpY2F0ZTogbnVsbCwgb2JqZWN0OiBudWxsLCB0eXBlOiAnbGlzdCcgfSk7XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkTGlzdEl0ZW07XG4gICAgY2FzZSAnfSc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFB1bmN0dWF0aW9uKHRva2VuKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBzdWJqZWN0IGJ1dCBnb3QgJyArIHRva2VuLnR5cGUsIHRva2VuKTtcbiAgICB9XG4gICAgLy8gVGhlIG5leHQgdG9rZW4gbXVzdCBiZSBhIHByZWRpY2F0ZSxcbiAgICAvLyBvciwgaWYgdGhlIHN1YmplY3Qgd2FzIGFjdHVhbGx5IGEgZ3JhcGggSVJJLCBhIG5hbWVkIGdyYXBoLlxuICAgIHJldHVybiB0aGlzLl9yZWFkUHJlZGljYXRlT3JOYW1lZEdyYXBoO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRQcmVkaWNhdGVgIHJlYWRzIGEgdHJpcGxlJ3MgcHJlZGljYXRlLlxuICBfcmVhZFByZWRpY2F0ZTogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdmFyIHR5cGUgPSB0b2tlbi50eXBlO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0lSSSc6XG4gICAgY2FzZSAnYWJicmV2aWF0aW9uJzpcbiAgICAgIGlmICh0aGlzLl9iYXNlID09PSBudWxsIHx8IGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpKVxuICAgICAgICB0aGlzLl9wcmVkaWNhdGUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5fcHJlZGljYXRlID0gdGhpcy5fcmVzb2x2ZUlSSSh0b2tlbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwcmVmaXhlZCc6XG4gICAgICBpZiAodG9rZW4ucHJlZml4ID09PSAnXycpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignRGlzYWxsb3dlZCBibGFuayBub2RlIGFzIHByZWRpY2F0ZScsIHRva2VuKTtcbiAgICAgIHZhciBwcmVmaXggPSB0aGlzLl9wcmVmaXhlc1t0b2tlbi5wcmVmaXhdO1xuICAgICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ1VuZGVmaW5lZCBwcmVmaXggXCInICsgdG9rZW4ucHJlZml4ICsgJzpcIicsIHRva2VuKTtcbiAgICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWZpeCArIHRva2VuLnZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnLic6XG4gICAgY2FzZSAnXSc6XG4gICAgY2FzZSAnfSc6XG4gICAgICAvLyBFeHBlY3RlZCBwcmVkaWNhdGUgZGlkbid0IGNvbWUsIG11c3QgaGF2ZSBiZWVuIHRyYWlsaW5nIHNlbWljb2xvbi5cbiAgICAgIGlmICh0aGlzLl9wcmVkaWNhdGUgPT09IG51bGwpXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcignVW5leHBlY3RlZCAnICsgdHlwZSwgdG9rZW4pO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ10nID8gdGhpcy5fcmVhZEJsYW5rTm9kZVRhaWwodG9rZW4pIDogdGhpcy5fcmVhZFB1bmN0dWF0aW9uKHRva2VuKTtcbiAgICBjYXNlICc7JzpcbiAgICAgIC8vIEV4dHJhIHNlbWljb2xvbnMgY2FuIGJlIHNhZmVseSBpZ25vcmVkXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFByZWRpY2F0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBwcmVkaWNhdGUgdG8gZm9sbG93IFwiJyArIHRoaXMuX3N1YmplY3QgKyAnXCInLCB0b2tlbik7XG4gICAgfVxuICAgIC8vIFRoZSBuZXh0IHRva2VuIG11c3QgYmUgYW4gb2JqZWN0LlxuICAgIHJldHVybiB0aGlzLl9yZWFkT2JqZWN0O1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRPYmplY3RgIHJlYWRzIGEgdHJpcGxlJ3Mgb2JqZWN0LlxuICBfcmVhZE9iamVjdDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgY2FzZSAnSVJJJzpcbiAgICAgIGlmICh0aGlzLl9iYXNlID09PSBudWxsIHx8IGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpKVxuICAgICAgICB0aGlzLl9vYmplY3QgPSB0b2tlbi52YWx1ZTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gdGhpcy5fcmVzb2x2ZUlSSSh0b2tlbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwcmVmaXhlZCc6XG4gICAgICB2YXIgcHJlZml4ID0gdGhpcy5fcHJlZml4ZXNbdG9rZW4ucHJlZml4XTtcbiAgICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmRlZmluZWQgcHJlZml4IFwiJyArIHRva2VuLnByZWZpeCArICc6XCInLCB0b2tlbik7XG4gICAgICB0aGlzLl9vYmplY3QgPSBwcmVmaXggKyB0b2tlbi52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xpdGVyYWwnOlxuICAgICAgdGhpcy5fb2JqZWN0ID0gdG9rZW4udmFsdWU7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZERhdGFUeXBlT3JMYW5nO1xuICAgIGNhc2UgJ1snOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgdHJpcGxlIHdpdGggYSBuZXcgYmxhbmsgbm9kZSBhcyBzdWJqZWN0LlxuICAgICAgdmFyIGJsYW5rID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuICAgICAgdGhpcy5fdHJpcGxlU3RhY2sucHVzaCh7IHN1YmplY3Q6IHRoaXMuX3N1YmplY3QsIHByZWRpY2F0ZTogdGhpcy5fcHJlZGljYXRlLCBvYmplY3Q6IGJsYW5rLCB0eXBlOiAnYmxhbmsnIH0pO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IGJsYW5rO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRCbGFua05vZGVIZWFkO1xuICAgIGNhc2UgJygnOlxuICAgICAgLy8gU3RhcnQgYSBuZXcgbGlzdFxuICAgICAgdGhpcy5fdHJpcGxlU3RhY2sucHVzaCh7IHN1YmplY3Q6IHRoaXMuX3N1YmplY3QsIHByZWRpY2F0ZTogdGhpcy5fcHJlZGljYXRlLCBvYmplY3Q6IFJERl9OSUwsIHR5cGU6ICdsaXN0JyB9KTtcbiAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRMaXN0SXRlbTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBvYmplY3QgdG8gZm9sbG93IFwiJyArIHRoaXMuX3ByZWRpY2F0ZSArICdcIicsIHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldFRyaXBsZUVuZFJlYWRlcigpO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRQcmVkaWNhdGVPck5hbWVkR3JhcGhgIHJlYWRzIGEgdHJpcGxlJ3MgcHJlZGljYXRlLCBvciBhIG5hbWVkIGdyYXBoLlxuICBfcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuLnR5cGUgPT09ICd7JyA/IHRoaXMuX3JlYWRHcmFwaCh0b2tlbikgOiB0aGlzLl9yZWFkUHJlZGljYXRlKHRva2VuKTtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkR3JhcGhgIHJlYWRzIGEgZ3JhcGguXG4gIF9yZWFkR3JhcGg6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAneycpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGdyYXBoIGJ1dCBnb3QgJyArIHRva2VuLnR5cGUsIHRva2VuKTtcbiAgICAvLyBUaGUgXCJzdWJqZWN0XCIgd2UgcmVhZCBpcyBhY3R1YWxseSB0aGUgR1JBUEgncyBsYWJlbFxuICAgIHRoaXMuX2dyYXBoID0gdGhpcy5fc3ViamVjdCwgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRTdWJqZWN0O1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRCbGFua05vZGVIZWFkYCByZWFkcyB0aGUgaGVhZCBvZiBhIGJsYW5rIG5vZGUuXG4gIF9yZWFkQmxhbmtOb2RlSGVhZDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICddJykge1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJsYW5rTm9kZVRhaWwodG9rZW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3ByZWRpY2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZFByZWRpY2F0ZSh0b2tlbik7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRCbGFua05vZGVUYWlsYCByZWFkcyB0aGUgZW5kIG9mIGEgYmxhbmsgbm9kZS5cbiAgX3JlYWRCbGFua05vZGVUYWlsOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ10nKVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRCbGFua05vZGVQdW5jdHVhdGlvbih0b2tlbik7XG5cbiAgICAvLyBTdG9yZSBibGFuayBub2RlIHRyaXBsZS5cbiAgICBpZiAodGhpcy5fc3ViamVjdCAhPT0gbnVsbClcbiAgICAgIHRoaXMuX2NhbGxiYWNrKG51bGwsIHsgc3ViamVjdDogICB0aGlzLl9zdWJqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHRoaXMuX3ByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICB0aGlzLl9vYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoOiAgICAgdGhpcy5fZ3JhcGggfHwgJycgfSk7XG5cbiAgICAvLyBSZXN0b3JlIHBhcmVudCB0cmlwbGUgdGhhdCBjb250YWlucyB0aGUgYmxhbmsgbm9kZS5cbiAgICB2YXIgdHJpcGxlID0gdGhpcy5fdHJpcGxlU3RhY2sucG9wKCk7XG4gICAgdGhpcy5fc3ViamVjdCA9IHRyaXBsZS5zdWJqZWN0O1xuICAgIC8vIFdhcyB0aGUgYmxhbmsgbm9kZSB0aGUgb2JqZWN0P1xuICAgIGlmICh0cmlwbGUub2JqZWN0ICE9PSBudWxsKSB7XG4gICAgICAvLyBSZXN0b3JlIHByZWRpY2F0ZSBhbmQgb2JqZWN0IGFzIHdlbGwsIGFuZCBjb250aW51ZSBieSByZWFkaW5nIHB1bmN0dWF0aW9uLlxuICAgICAgdGhpcy5fcHJlZGljYXRlID0gdHJpcGxlLnByZWRpY2F0ZTtcbiAgICAgIHRoaXMuX29iamVjdCA9IHRyaXBsZS5vYmplY3Q7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0VHJpcGxlRW5kUmVhZGVyKCk7XG4gICAgfVxuICAgIC8vIFRoZSBibGFuayBub2RlIHdhcyB0aGUgc3ViamVjdCwgc28gY29udGludWUgcmVhZGluZyB0aGUgcHJlZGljYXRlLlxuICAgIC8vIElmIHRoZSBibGFuayBub2RlIGRpZG4ndCBjb250YWluIGFueSBwcmVkaWNhdGVzLCBpdCBjb3VsZCBhbHNvIGJlIHRoZSBsYWJlbCBvZiBhIG5hbWVkIGdyYXBoLlxuICAgIHJldHVybiB0aGlzLl9wcmVkaWNhdGUgIT09IG51bGwgPyB0aGlzLl9yZWFkUHJlZGljYXRlIDogdGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkRGF0YVR5cGVPckxhbmdgIHJlYWRzIGFuIF9vcHRpb25hbF8gZGF0YSB0eXBlIG9yIGxhbmd1YWdlLlxuICBfcmVhZERhdGFUeXBlT3JMYW5nOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICd0eXBlJzpcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIGlmICh0b2tlbi5wcmVmaXggPT09ICcnKSB7XG4gICAgICAgIGlmICh0aGlzLl9iYXNlID09PSBudWxsIHx8IGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpKVxuICAgICAgICAgIHZhbHVlID0gdG9rZW4udmFsdWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3Jlc29sdmVJUkkodG9rZW4pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBwcmVmaXggPSB0aGlzLl9wcmVmaXhlc1t0b2tlbi5wcmVmaXhdO1xuICAgICAgICBpZiAocHJlZml4ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmRlZmluZWQgcHJlZml4IFwiJyArIHRva2VuLnByZWZpeCArICc6XCInLCB0b2tlbik7XG4gICAgICAgIHZhbHVlID0gcHJlZml4ICsgdG9rZW4udmFsdWU7XG4gICAgICB9XG4gICAgICB0aGlzLl9vYmplY3QgKz0gJ15eJyArIHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuX2dldFRyaXBsZUVuZFJlYWRlcigpO1xuICAgIGNhc2UgJ2xhbmdjb2RlJzpcbiAgICAgIHRoaXMuX29iamVjdCArPSAnQCcgKyB0b2tlbi52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuX2dldFRyaXBsZUVuZFJlYWRlcigpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0VHJpcGxlRW5kUmVhZGVyKCkuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRMaXN0SXRlbWAgcmVhZHMgaXRlbXMgZnJvbSBhIGxpc3QuXG4gIF9yZWFkTGlzdEl0ZW06IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciBpdGVtID0gbnVsbCwgICAgICAgICAgICAgICAgICAvLyBUaGUgYWN0dWFsIGxpc3QgaXRlbS5cbiAgICAgICAgaXRlbUhlYWQgPSBudWxsLCAgICAgICAgICAgICAgLy8gVGhlIGhlYWQgb2YgdGhlIHJkZjpmaXJzdCBwcmVkaWNhdGUuXG4gICAgICAgIHByZXZJdGVtSGVhZCA9IHRoaXMuX3N1YmplY3QsIC8vIFRoZSBoZWFkIG9mIHRoZSBwcmV2aW91cyByZGY6Zmlyc3QgcHJlZGljYXRlLlxuICAgICAgICBzdGFjayA9IHRoaXMuX3RyaXBsZVN0YWNrLCAgICAvLyBUaGUgc3RhY2sgb2YgdHJpcGxlcyBwYXJ0IG9mIHJlY3Vyc2lvbiAobGlzdHMsIGJsYW5rcywgZXRjLikuXG4gICAgICAgIHBhcmVudFRyaXBsZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLCAvLyBUaGUgdHJpcGxlIGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgbGlzdC5cbiAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRMaXN0SXRlbTsgICAgLy8gVGhlIG5leHQgZnVuY3Rpb24gdG8gZXhlY3V0ZS5cblxuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgIGNhc2UgJ0lSSSc6XG4gICAgICBpZiAodGhpcy5fYmFzZSA9PT0gbnVsbCB8fCBhYnNvbHV0ZUlSSS50ZXN0KHRva2VuLnZhbHVlKSlcbiAgICAgICAgaXRlbSA9IHRva2VuLnZhbHVlO1xuICAgICAgZWxzZVxuICAgICAgICBpdGVtID0gdGhpcy5fcmVzb2x2ZUlSSSh0b2tlbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwcmVmaXhlZCc6XG4gICAgICB2YXIgcHJlZml4ID0gdGhpcy5fcHJlZml4ZXNbdG9rZW4ucHJlZml4XTtcbiAgICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdVbmRlZmluZWQgcHJlZml4IFwiJyArIHRva2VuLnByZWZpeCArICc6XCInLCB0b2tlbik7XG4gICAgICBpdGVtID0gcHJlZml4ICsgdG9rZW4udmFsdWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsaXRlcmFsJzpcbiAgICAgIGl0ZW0gPSB0b2tlbi52YWx1ZTtcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkRGF0YVR5cGVPckxhbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdbJzpcbiAgICAgIC8vIFN0YWNrIHRoZSBjdXJyZW50IGxpc3QgdHJpcGxlIGFuZCBzdGFydCBhIG5ldyB0cmlwbGUgd2l0aCBhIGJsYW5rIG5vZGUgYXMgc3ViamVjdC5cbiAgICAgIGl0ZW1IZWFkID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuICAgICAgaXRlbSAgICAgPSAnXzpiJyArIGJsYW5rTm9kZUNvdW50Kys7XG4gICAgICBzdGFjay5wdXNoKHsgc3ViamVjdDogaXRlbUhlYWQsIHByZWRpY2F0ZTogUkRGX0ZJUlNULCBvYmplY3Q6IGl0ZW0sIHR5cGU6ICdibGFuaycgfSk7XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gaXRlbTtcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkQmxhbmtOb2RlSGVhZDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJygnOlxuICAgICAgLy8gU3RhY2sgdGhlIGN1cnJlbnQgbGlzdCB0cmlwbGUgYW5kIHN0YXJ0IGEgbmV3IGxpc3RcbiAgICAgIGl0ZW1IZWFkID0gJ186YicgKyBibGFua05vZGVDb3VudCsrO1xuICAgICAgc3RhY2sucHVzaCh7IHN1YmplY3Q6IGl0ZW1IZWFkLCBwcmVkaWNhdGU6IFJERl9GSVJTVCwgb2JqZWN0OiBSREZfTklMLCB0eXBlOiAnbGlzdCcgfSk7XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkTGlzdEl0ZW07XG4gICAgICBicmVhaztcbiAgICBjYXNlICcpJzpcbiAgICAgIC8vIFJlc3RvcmUgdGhlIHBhcmVudCB0cmlwbGUuXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICAgIC8vIElmIHRoaXMgbGlzdCBpcyBjb250YWluZWQgd2l0aGluIGEgcGFyZW50IGxpc3QsIHJldHVybiB0aGUgbWVtYmVyc2hpcCB0cmlwbGUgaGVyZS5cbiAgICAgIC8vIFRoaXMgd2lsbCBiZSBgPHBhcmVudCBsaXN0IGVsZW1lbnQ+IHJkZjpmaXJzdCA8dGhpcyBsaXN0Pi5gLlxuICAgICAgaWYgKHN0YWNrLmxlbmd0aCAhPT0gMCAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXS50eXBlID09PSAnbGlzdCcpXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKG51bGwsIHsgc3ViamVjdDogICBwYXJlbnRUcmlwbGUuc3ViamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHBhcmVudFRyaXBsZS5wcmVkaWNhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICBwYXJlbnRUcmlwbGUub2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoOiAgICAgdGhpcy5fZ3JhcGggfHwgJycgfSk7XG4gICAgICAvLyBSZXN0b3JlIHRoZSBwYXJlbnQgdHJpcGxlJ3Mgc3ViamVjdC5cbiAgICAgIHRoaXMuX3N1YmplY3QgPSBwYXJlbnRUcmlwbGUuc3ViamVjdDtcbiAgICAgIC8vIFdhcyB0aGlzIGxpc3QgaW4gdGhlIHBhcmVudCB0cmlwbGUncyBzdWJqZWN0P1xuICAgICAgaWYgKHBhcmVudFRyaXBsZS5wcmVkaWNhdGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVGhlIG5leHQgdG9rZW4gaXMgdGhlIHByZWRpY2F0ZS5cbiAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRQcmVkaWNhdGU7XG4gICAgICAgIC8vIFNraXAgd3JpdGluZyB0aGUgbGlzdCB0YWlsIGlmIHRoaXMgd2FzIGFuIGVtcHR5IGxpc3QuXG4gICAgICAgIGlmIChwYXJlbnRUcmlwbGUuc3ViamVjdCA9PT0gUkRGX05JTClcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBsaXN0IHdhcyBpbiB0aGUgcGFyZW50IHRyaXBsZSdzIG9iamVjdC5cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBwYXJlbnQgdHJpcGxlJ3MgcHJlZGljYXRlIGFuZCBvYmplY3QgYXMgd2VsbC5cbiAgICAgICAgdGhpcy5fcHJlZGljYXRlID0gcGFyZW50VHJpcGxlLnByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gcGFyZW50VHJpcGxlLm9iamVjdDtcbiAgICAgICAgbmV4dCA9IHRoaXMuX2dldFRyaXBsZUVuZFJlYWRlcigpO1xuICAgICAgICAvLyBTa2lwIHdyaXRpbmcgdGhlIGxpc3QgdGFpbCBpZiB0aGlzIHdhcyBhbiBlbXB0eSBsaXN0LlxuICAgICAgICBpZiAocGFyZW50VHJpcGxlLm9iamVjdCA9PT0gUkRGX05JTClcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH1cbiAgICAgIC8vIENsb3NlIHRoZSBsaXN0IGJ5IG1ha2luZyB0aGUgaXRlbSBoZWFkIG5pbC5cbiAgICAgIGl0ZW1IZWFkID0gUkRGX05JTDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGxpc3QgaXRlbSBpbnN0ZWFkIG9mIFwiJyArIHRva2VuLnR5cGUgKyAnXCInLCB0b2tlbik7XG4gICAgfVxuXG4gICAgIC8vIENyZWF0ZSBhIG5ldyBibGFuayBub2RlIGlmIG5vIGl0ZW0gaGVhZCB3YXMgYXNzaWduZWQgeWV0LlxuICAgIGlmIChpdGVtSGVhZCA9PT0gbnVsbClcbiAgICAgIHRoaXMuX3N1YmplY3QgPSBpdGVtSGVhZCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKztcblxuICAgIC8vIElzIHRoaXMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGxpc3Q/XG4gICAgaWYgKHByZXZJdGVtSGVhZCA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBsaXN0IGlzIGVpdGhlciB0aGUgb2JqZWN0IG9yIHRoZSBzdWJqZWN0LlxuICAgICAgaWYgKHBhcmVudFRyaXBsZS5vYmplY3QgPT09IFJERl9OSUwpXG4gICAgICAgIHBhcmVudFRyaXBsZS5vYmplY3QgPSBpdGVtSGVhZDtcbiAgICAgIGVsc2VcbiAgICAgICAgcGFyZW50VHJpcGxlLnN1YmplY3QgPSBpdGVtSGVhZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgbGlzdCBpcyBpbiB0aGUgY3VycmVudCBoZWFkLlxuICAgICAgdGhpcy5fY2FsbGJhY2sobnVsbCwgeyBzdWJqZWN0OiAgIHByZXZJdGVtSGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZGljYXRlOiBSREZfUkVTVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICBpdGVtSGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGg6ICAgICB0aGlzLl9ncmFwaCB8fCAnJyB9KTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBpdGVtJ3MgdmFsdWUuXG4gICAgaWYgKGl0ZW0gIT09IG51bGwpXG4gICAgICB0aGlzLl9jYWxsYmFjayhudWxsLCB7IHN1YmplY3Q6ICAgaXRlbUhlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogUkRGX0ZJUlNULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6ICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoOiAgICAgdGhpcy5fZ3JhcGggfHwgJycgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZFB1bmN0dWF0aW9uYCByZWFkcyBwdW5jdHVhdGlvbiBiZXR3ZWVuIHRyaXBsZXMgb3IgdHJpcGxlIHBhcnRzLlxuICBfcmVhZFB1bmN0dWF0aW9uOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgbmV4dCwgc3ViamVjdCA9IHRoaXMuX3N1YmplY3QsIGdyYXBoID0gdGhpcy5fZ3JhcGg7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgLy8gQSBjbG9zaW5nIGJyYWNlIGVuZHMgYSBncmFwaFxuICAgIGNhc2UgJ30nOlxuICAgICAgaWYgKHRoaXMuX2dyYXBoID09PSBudWxsKVxuICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ1VuZXhwZWN0ZWQgZ3JhcGggY2xvc2luZycsIHRva2VuKTtcbiAgICAgIHRoaXMuX2dyYXBoID0gbnVsbDtcbiAgICAvLyBBIGRvdCBqdXN0IGVuZHMgdGhlIHN0YXRlbWVudCwgd2l0aG91dCBzaGFyaW5nIGFueXRoaW5nIHdpdGggdGhlIG5leHQuXG4gICAgY2FzZSAnLic6XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkSW5Ub3BDb250ZXh0O1xuICAgICAgYnJlYWs7XG4gICAgLy8gU2VtaWNvbG9uIG1lYW5zIHRoZSBzdWJqZWN0IGlzIHNoYXJlZDsgcHJlZGljYXRlIGFuZCBvYmplY3QgYXJlIGRpZmZlcmVudC5cbiAgICBjYXNlICc7JzpcbiAgICAgIG5leHQgPSB0aGlzLl9yZWFkUHJlZGljYXRlO1xuICAgICAgYnJlYWs7XG4gICAgLy8gQ29tbWEgbWVhbnMgYm90aCB0aGUgc3ViamVjdCBhbmQgcHJlZGljYXRlIGFyZSBzaGFyZWQ7IHRoZSBvYmplY3QgaXMgZGlmZmVyZW50LlxuICAgIGNhc2UgJywnOlxuICAgICAgbmV4dCA9IHRoaXMuX3JlYWRPYmplY3Q7XG4gICAgICBicmVhaztcbiAgICAvLyBBbiBJUkkgbWVhbnMgdGhpcyBpcyBhIHF1YWQgKG9ubHkgYWxsb3dlZCBpZiBub3QgYWxyZWFkeSBpbnNpZGUgYSBncmFwaCkuXG4gICAgY2FzZSAnSVJJJzpcbiAgICAgIGlmICh0aGlzLl9zdXBwb3J0c1F1YWRzICYmIHRoaXMuX2dyYXBoID09PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLl9iYXNlID09PSBudWxsIHx8IGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpKVxuICAgICAgICAgIGdyYXBoID0gdG9rZW4udmFsdWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBncmFwaCA9IHRoaXMuX3Jlc29sdmVJUkkodG9rZW4pO1xuICAgICAgICBzdWJqZWN0ID0gdGhpcy5fc3ViamVjdDtcbiAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRRdWFkUHVuY3R1YXRpb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIC8vIEFuIHByZWZpeGVkIG5hbWUgbWVhbnMgdGhpcyBpcyBhIHF1YWQgKG9ubHkgYWxsb3dlZCBpZiBub3QgYWxyZWFkeSBpbnNpZGUgYSBncmFwaCkuXG4gICAgY2FzZSAncHJlZml4ZWQnOlxuICAgICAgaWYgKHRoaXMuX3N1cHBvcnRzUXVhZHMgJiYgdGhpcy5fZ3JhcGggPT09IG51bGwpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IHRoaXMuX3ByZWZpeGVzW3Rva2VuLnByZWZpeF07XG4gICAgICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ1VuZGVmaW5lZCBwcmVmaXggXCInICsgdG9rZW4ucHJlZml4ICsgJzpcIicsIHRva2VuKTtcbiAgICAgICAgZ3JhcGggPSBwcmVmaXggKyB0b2tlbi52YWx1ZTtcbiAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRRdWFkUHVuY3R1YXRpb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIHB1bmN0dWF0aW9uIHRvIGZvbGxvdyBcIicgKyB0aGlzLl9vYmplY3QgKyAnXCInLCB0b2tlbik7XG4gICAgfVxuICAgIC8vIEEgdHJpcGxlIGhhcyBiZWVuIGNvbXBsZXRlZCBub3csIHNvIHJldHVybiBpdC5cbiAgICBpZiAoc3ViamVjdCAhPT0gbnVsbClcbiAgICAgIHRoaXMuX2NhbGxiYWNrKG51bGwsIHsgc3ViamVjdDogICBzdWJqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHRoaXMuX3ByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICB0aGlzLl9vYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoOiAgICAgZ3JhcGggfHwgJycgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG5cbiAgICAvLyAjIyMgYF9yZWFkQmxhbmtOb2RlUHVuY3R1YXRpb25gIHJlYWRzIHB1bmN0dWF0aW9uIGluIGEgYmxhbmsgbm9kZVxuICBfcmVhZEJsYW5rTm9kZVB1bmN0dWF0aW9uOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgbmV4dDtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAvLyBTZW1pY29sb24gbWVhbnMgdGhlIHN1YmplY3QgaXMgc2hhcmVkOyBwcmVkaWNhdGUgYW5kIG9iamVjdCBhcmUgZGlmZmVyZW50LlxuICAgIGNhc2UgJzsnOlxuICAgICAgbmV4dCA9IHRoaXMuX3JlYWRQcmVkaWNhdGU7XG4gICAgICBicmVhaztcbiAgICAvLyBDb21tYSBtZWFucyBib3RoIHRoZSBzdWJqZWN0IGFuZCBwcmVkaWNhdGUgYXJlIHNoYXJlZDsgdGhlIG9iamVjdCBpcyBkaWZmZXJlbnQuXG4gICAgY2FzZSAnLCc6XG4gICAgICBuZXh0ID0gdGhpcy5fcmVhZE9iamVjdDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIHB1bmN0dWF0aW9uIHRvIGZvbGxvdyBcIicgKyB0aGlzLl9vYmplY3QgKyAnXCInLCB0b2tlbik7XG4gICAgfVxuICAgIC8vIEEgdHJpcGxlIGhhcyBiZWVuIGNvbXBsZXRlZCBub3csIHNvIHJldHVybiBpdC5cbiAgICB0aGlzLl9jYWxsYmFjayhudWxsLCB7IHN1YmplY3Q6ICAgdGhpcy5fc3ViamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogdGhpcy5fcHJlZGljYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICB0aGlzLl9vYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBncmFwaDogICAgIHRoaXMuX2dyYXBoIHx8ICcnIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRRdWFkUHVuY3R1YXRpb25gIHJlYWRzIHB1bmN0dWF0aW9uIGFmdGVyIGEgcXVhZC5cbiAgX3JlYWRRdWFkUHVuY3R1YXRpb246IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnLicpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIGRvdCB0byBmb2xsb3cgcXVhZCcsIHRva2VuKTtcbiAgICByZXR1cm4gdGhpcy5fcmVhZEluVG9wQ29udGV4dDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZWFkUHJlZml4YCByZWFkcyB0aGUgcHJlZml4IG9mIGEgcHJlZml4IGRlY2xhcmF0aW9uLlxuICBfcmVhZFByZWZpeDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgIT09ICdwcmVmaXgnKVxuICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBwcmVmaXggdG8gZm9sbG93IEBwcmVmaXgnLCB0b2tlbik7XG4gICAgdGhpcy5fcHJlZml4ID0gdG9rZW4udmFsdWU7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRQcmVmaXhJUkk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZFByZWZpeElSSWAgcmVhZHMgdGhlIElSSSBvZiBhIHByZWZpeCBkZWNsYXJhdGlvbi5cbiAgX3JlYWRQcmVmaXhJUkk6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnSVJJJylcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcignRXhwZWN0ZWQgSVJJIHRvIGZvbGxvdyBwcmVmaXggXCInICsgdGhpcy5fcHJlZml4ICsgJzpcIicsIHRva2VuKTtcbiAgICB2YXIgcHJlZml4SVJJO1xuICAgIGlmICh0aGlzLl9iYXNlID09PSBudWxsIHx8IGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpKVxuICAgICAgcHJlZml4SVJJID0gdG9rZW4udmFsdWU7XG4gICAgZWxzZVxuICAgICAgcHJlZml4SVJJID0gdGhpcy5fcmVzb2x2ZUlSSSh0b2tlbik7XG4gICAgdGhpcy5fcHJlZml4ZXNbdGhpcy5fcHJlZml4XSA9IHByZWZpeElSSTtcbiAgICB0aGlzLl9wcmVmaXhDYWxsYmFjayh0aGlzLl9wcmVmaXgsIHByZWZpeElSSSk7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWREZWNsYXJhdGlvblB1bmN0dWF0aW9uO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWRCYXNlSVJJYCByZWFkcyB0aGUgSVJJIG9mIGEgYmFzZSBkZWNsYXJhdGlvbi5cbiAgX3JlYWRCYXNlSVJJOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSAhPT0gJ0lSSScpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIElSSSB0byBmb2xsb3cgYmFzZSBkZWNsYXJhdGlvbicsIHRva2VuKTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5fc2V0QmFzZSh0aGlzLl9iYXNlID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGFic29sdXRlSVJJLnRlc3QodG9rZW4udmFsdWUpID8gdG9rZW4udmFsdWUgOiB0aGlzLl9yZXNvbHZlSVJJKHRva2VuKSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB0aGlzLl9lcnJvcihlcnJvci5tZXNzYWdlLCB0b2tlbik7IH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZERlY2xhcmF0aW9uUHVuY3R1YXRpb247XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZE5hbWVkR3JhcGhMYWJlbGAgcmVhZHMgdGhlIGxhYmVsIG9mIGEgbmFtZWQgZ3JhcGguXG4gIF9yZWFkTmFtZWRHcmFwaExhYmVsOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdJUkknOlxuICAgIGNhc2UgJ3ByZWZpeGVkJzpcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkU3ViamVjdCh0b2tlbiksIHRoaXMuX3JlYWRHcmFwaDtcbiAgICBjYXNlICdbJzpcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkTmFtZWRHcmFwaEJsYW5rTGFiZWw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcignSW52YWxpZCBncmFwaCBsYWJlbCcsIHRva2VuKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVhZE5hbWVkR3JhcGhMYWJlbGAgcmVhZHMgYSBibGFuayBub2RlIGxhYmVsIG9mIGEgbmFtZWQgZ3JhcGguXG4gIF9yZWFkTmFtZWRHcmFwaEJsYW5rTGFiZWw6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlICE9PSAnXScpXG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3IoJ0ludmFsaWQgZ3JhcGggbGFiZWwnLCB0b2tlbik7XG4gICAgdGhpcy5fc3ViamVjdCA9ICdfOmInICsgYmxhbmtOb2RlQ291bnQrKztcbiAgICByZXR1cm4gdGhpcy5fcmVhZEdyYXBoO1xuICB9LFxuXG4gIC8vICMjIyBgX3JlYWREZWNsYXJhdGlvblB1bmN0dWF0aW9uYCByZWFkcyB0aGUgcHVuY3R1YXRpb24gb2YgYSBkZWNsYXJhdGlvbi5cbiAgX3JlYWREZWNsYXJhdGlvblB1bmN0dWF0aW9uOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAvLyBTUEFSUUwtc3R5bGUgZGVjbGFyYXRpb25zIGRvbid0IGhhdmUgcHVuY3R1YXRpb24uXG4gICAgaWYgKHRoaXMuX3NwYXJxbFN0eWxlKVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRJblRvcENvbnRleHQodG9rZW4pO1xuXG4gICAgaWYgKHRva2VuLnR5cGUgIT09ICcuJylcbiAgICAgIHJldHVybiB0aGlzLl9lcnJvcignRXhwZWN0ZWQgZGVjbGFyYXRpb24gdG8gZW5kIHdpdGggYSBkb3QnLCB0b2tlbik7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRJblRvcENvbnRleHQ7XG4gIH0sXG5cbiAgLy8gIyMjIGBfZ2V0VHJpcGxlRW5kUmVhZGVyYCBnZXRzIHRoZSBuZXh0IHJlYWRlciBmdW5jdGlvbiBhdCB0aGUgZW5kIG9mIGEgdHJpcGxlLlxuICBfZ2V0VHJpcGxlRW5kUmVhZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YWNrID0gdGhpcy5fdHJpcGxlU3RhY2s7XG4gICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkUHVuY3R1YXRpb247XG5cbiAgICBzd2l0Y2ggKHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLnR5cGUpIHtcbiAgICBjYXNlICdibGFuayc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZEJsYW5rTm9kZVRhaWw7XG4gICAgY2FzZSAnbGlzdCc6XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZExpc3RJdGVtO1xuICAgIH1cbiAgfSxcblxuICAvLyAjIyMgYF9lcnJvcmAgZW1pdHMgYW4gZXJyb3IgbWVzc2FnZSB0aHJvdWdoIHRoZSBjYWxsYmFjay5cbiAgX2Vycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgdG9rZW4pIHtcbiAgICB0aGlzLl9jYWxsYmFjayhuZXcgRXJyb3IobWVzc2FnZSArICcgYXQgbGluZSAnICsgdG9rZW4ubGluZSArICcuJykpO1xuICB9LFxuXG4gIC8vICMjIyBgX3Jlc29sdmVJUklgIHJlc29sdmVzIGEgcmVsYXRpdmUgSVJJIHRva2VuIGFnYWluc3QgdGhlIGJhc2UgcGF0aCxcbiAgLy8gYXNzdW1pbmcgdGhhdCBhIGJhc2UgcGF0aCBoYXMgYmVlbiBzZXQgYW5kIHRoYXQgdGhlIElSSSBpcyBpbmRlZWQgcmVsYXRpdmUuXG4gIF9yZXNvbHZlSVJJOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgaXJpID0gdG9rZW4udmFsdWU7XG4gICAgc3dpdGNoIChpcmlbMF0pIHtcbiAgICAvLyBBbiBlbXB0eSByZWxhdGl2ZSBJUkkgaW5kaWNhdGVzIHRoZSBiYXNlIElSSVxuICAgIGNhc2UgdW5kZWZpbmVkOiByZXR1cm4gdGhpcy5fYmFzZTtcbiAgICAvLyBSZXNvbHZlIHJlbGF0aXZlIGZyYWdtZW50IElSSXMgYWdhaW5zdCB0aGUgYmFzZSBJUklcbiAgICBjYXNlICcjJzogcmV0dXJuIHRoaXMuX2Jhc2UgKyBpcmk7XG4gICAgLy8gUmVzb2x2ZSByZWxhdGl2ZSBxdWVyeSBzdHJpbmcgSVJJcyBieSByZXBsYWNpbmcgdGhlIHF1ZXJ5IHN0cmluZ1xuICAgIGNhc2UgJz8nOiByZXR1cm4gdGhpcy5fYmFzZS5yZXBsYWNlKC8oPzpcXD8uKik/JC8sIGlyaSk7XG4gICAgLy8gUmVzb2x2ZSByb290LXJlbGF0aXZlIElSSXMgYXQgdGhlIHJvb3Qgb2YgdGhlIGJhc2UgSVJJXG4gICAgY2FzZSAnLyc6XG4gICAgICAvLyBSZXNvbHZlIHNjaGVtZS1yZWxhdGl2ZSBJUklzIHRvIHRoZSBzY2hlbWVcbiAgICAgIHJldHVybiAoaXJpWzFdID09PSAnLycgPyB0aGlzLl9iYXNlU2NoZW1lIDogdGhpcy5fYmFzZVJvb3QpICsgdGhpcy5fcmVtb3ZlRG90U2VnbWVudHMoaXJpKTtcbiAgICAvLyBSZXNvbHZlIGFsbCBvdGhlciBJUklzIGF0IHRoZSBiYXNlIElSSSdzIHBhdGhcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZURvdFNlZ21lbnRzKHRoaXMuX2Jhc2VQYXRoICsgaXJpKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfcmVtb3ZlRG90U2VnbWVudHNgIHJlc29sdmVzICcuLycgYW5kICcuLi8nIHBhdGggc2VnbWVudHMgaW4gYW4gSVJJIGFzIHBlciBSRkMzOTg2LlxuICBfcmVtb3ZlRG90U2VnbWVudHM6IGZ1bmN0aW9uIChpcmkpIHtcbiAgICAvLyBEb24ndCBtb2RpZnkgdGhlIElSSSBpZiBpdCBkb2VzIG5vdCBjb250YWluIGFueSBkb3Qgc2VnbWVudHNcbiAgICBpZiAoIWRvdFNlZ21lbnRzLnRlc3QoaXJpKSlcbiAgICAgIHJldHVybiBpcmk7XG5cbiAgICAvLyBTdGFydCB3aXRoIGFuIGltYWdpbmFyeSBzbGFzaCBiZWZvcmUgdGhlIElSSSBpbiBvcmRlciB0byByZXNvbHZlIHRyYWlsaW5nICcuLycgYW5kICcuLi8nXG4gICAgdmFyIHJlc3VsdCA9ICcnLCBsZW5ndGggPSBpcmkubGVuZ3RoLCBpID0gLTEsIHBhdGhTdGFydCA9IC0xLCBzZWdtZW50U3RhcnQgPSAwLCBuZXh0ID0gJy8nO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHN3aXRjaCAobmV4dCkge1xuICAgICAgLy8gVGhlIHBhdGggc3RhcnRzIHdpdGggdGhlIGZpcnN0IHNsYXNoIGFmdGVyIHRoZSBhdXRob3JpdHlcbiAgICAgIGNhc2UgJzonOlxuICAgICAgICBpZiAocGF0aFN0YXJ0IDwgMCkge1xuICAgICAgICAgIC8vIFNraXAgdHdvIHNsYXNoZXMgYmVmb3JlIHRoZSBhdXRob3JpdHlcbiAgICAgICAgICBpZiAoaXJpWysraV0gPT09ICcvJyAmJiBpcmlbKytpXSA9PT0gJy8nKVxuICAgICAgICAgICAgLy8gU2tpcCB0byBzbGFzaCBhZnRlciB0aGUgYXV0aG9yaXR5XG4gICAgICAgICAgICB3aGlsZSAoKHBhdGhTdGFydCA9IGkgKyAxKSA8IGxlbmd0aCAmJiBpcmlbcGF0aFN0YXJ0XSAhPT0gJy8nKVxuICAgICAgICAgICAgICBpID0gcGF0aFN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gRG9uJ3QgbW9kaWZ5IGEgcXVlcnkgc3RyaW5nIG9yIGZyYWdtZW50XG4gICAgICBjYXNlICc/JzpcbiAgICAgIGNhc2UgJyMnOlxuICAgICAgICBpID0gbGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIEhhbmRsZSAnLy4nIG9yICcvLi4nIHBhdGggc2VnbWVudHNcbiAgICAgIGNhc2UgJy8nOlxuICAgICAgICBpZiAoaXJpW2kgKyAxXSA9PT0gJy4nKSB7XG4gICAgICAgICAgbmV4dCA9IGlyaVsrK2kgKyAxXTtcbiAgICAgICAgICBzd2l0Y2ggKG5leHQpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgYSAnLy4nIHNlZ21lbnRcbiAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgIHJlc3VsdCArPSBpcmkuc3Vic3RyaW5nKHNlZ21lbnRTdGFydCwgaSAtIDEpO1xuICAgICAgICAgICAgc2VnbWVudFN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBSZW1vdmUgYSB0cmFpbGluZyAnLy4nIHNlZ21lbnRcbiAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyBpcmkuc3Vic3RyaW5nKHNlZ21lbnRTdGFydCwgaSkgKyBpcmkuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgICAvLyBSZW1vdmUgYSAnLy4uJyBzZWdtZW50XG4gICAgICAgICAgY2FzZSAnLic6XG4gICAgICAgICAgICBuZXh0ID0gaXJpWysraSArIDFdO1xuICAgICAgICAgICAgaWYgKG5leHQgPT09IHVuZGVmaW5lZCB8fCBuZXh0ID09PSAnLycgfHwgbmV4dCA9PT0gJz8nIHx8IG5leHQgPT09ICcjJykge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gaXJpLnN1YnN0cmluZyhzZWdtZW50U3RhcnQsIGkgLSAyKTtcbiAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJlbW92ZSB0aGUgcGFyZW50IHBhdGggZnJvbSByZXN1bHRcbiAgICAgICAgICAgICAgaWYgKChzZWdtZW50U3RhcnQgPSByZXN1bHQubGFzdEluZGV4T2YoJy8nKSkgPj0gcGF0aFN0YXJ0KVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zdWJzdHIoMCwgc2VnbWVudFN0YXJ0KTtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIGEgdHJhaWxpbmcgJy8uLicgc2VnbWVudFxuICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gJy8nKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnLycgKyBpcmkuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgICAgICAgc2VnbWVudFN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0ID0gaXJpWysraV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgKyBpcmkuc3Vic3RyaW5nKHNlZ21lbnRTdGFydCk7XG4gIH0sXG5cbiAgLy8gIyMgUHVibGljIG1ldGhvZHNcblxuICAvLyAjIyMgYHBhcnNlYCBwYXJzZXMgdGhlIE4zIGlucHV0IGFuZCBlbWl0cyBlYWNoIHBhcnNlZCB0cmlwbGUgdGhyb3VnaCB0aGUgY2FsbGJhY2suXG4gIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIHRyaXBsZUNhbGxiYWNrLCBwcmVmaXhDYWxsYmFjaykge1xuICAgIC8vIFRoZSByZWFkIGNhbGxiYWNrIGlzIHRoZSBuZXh0IGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gYSB0b2tlbiBhcnJpdmVzLlxuICAgIC8vIFdlIHN0YXJ0IHJlYWRpbmcgaW4gdGhlIHRvcCBjb250ZXh0LlxuICAgIHRoaXMuX3JlYWRDYWxsYmFjayA9IHRoaXMuX3JlYWRJblRvcENvbnRleHQ7XG4gICAgdGhpcy5fcHJlZml4ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3ByZWZpeGVzLl8gPSB0aGlzLl9ibGFua05vZGVQcmVmaXggfHwgJ186YicgKyBibGFua05vZGVQcmVmaXgrKyArICdfJztcblxuICAgIC8vIElmIHRoZSBpbnB1dCBhcmd1bWVudCBpcyBub3QgZ2l2ZW4sIHNoaWZ0IHBhcmFtZXRlcnNcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKVxuICAgICAgcHJlZml4Q2FsbGJhY2sgPSB0cmlwbGVDYWxsYmFjaywgdHJpcGxlQ2FsbGJhY2sgPSBpbnB1dCwgaW5wdXQgPSBudWxsO1xuXG4gICAgLy8gU2V0IHRoZSB0cmlwbGUgYW5kIHByZWZpeCBjYWxsYmFja3MuXG4gICAgdGhpcy5fY2FsbGJhY2sgPSB0cmlwbGVDYWxsYmFjayB8fCBub29wO1xuICAgIHRoaXMuX3ByZWZpeENhbGxiYWNrID0gcHJlZml4Q2FsbGJhY2sgfHwgbm9vcDtcblxuICAgIC8vIEV4ZWN1dGUgdGhlIHJlYWQgY2FsbGJhY2sgd2hlbiBhIHRva2VuIGFycml2ZXMuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX2xleGVyLnRva2VuaXplKGlucHV0LCBmdW5jdGlvbiAoZXJyb3IsIHRva2VuKSB7XG4gICAgICBpZiAoZXJyb3IgIT09IG51bGwpXG4gICAgICAgIHNlbGYuX2NhbGxiYWNrKGVycm9yKSwgc2VsZi5fY2FsbGJhY2sgPSBub29wO1xuICAgICAgZWxzZSBpZiAoc2VsZi5fcmVhZENhbGxiYWNrICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHNlbGYuX3JlYWRDYWxsYmFjayA9IHNlbGYuX3JlYWRDYWxsYmFjayh0b2tlbik7XG4gICAgfSk7XG5cbiAgICAvLyBJZiBubyBpbnB1dCB3YXMgZ2l2ZW4sIGl0IGNhbiBiZSBhZGRlZCB3aXRoIGBhZGRDaHVua2AgYW5kIGVuZGVkIHdpdGggYGVuZGBcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICB0aGlzLmFkZENodW5rID0gdGhpcy5fbGV4ZXIuYWRkQ2h1bms7XG4gICAgICB0aGlzLmVuZCA9IHRoaXMuX2xleGVyLmVuZDtcbiAgICB9XG4gIH0sXG59O1xuXG4vLyBUaGUgZW1wdHkgZnVuY3Rpb25cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vLyAjIyBFeHBvcnRzXG5cbi8vIEV4cG9ydCB0aGUgYE4zUGFyc2VyYCBjbGFzcyBhcyBhIHdob2xlLlxubW9kdWxlLmV4cG9ydHMgPSBOM1BhcnNlcjtcbiIsIi8vICoqTjNTdG9yZSoqIG9iamVjdHMgc3RvcmUgTjMgdHJpcGxlcyBieSBncmFwaCBpbiBtZW1vcnkuXG5cbnZhciBleHBhbmRQcmVmaXhlZE5hbWUgPSByZXF1aXJlKCcuL04zVXRpbCcpLmV4cGFuZFByZWZpeGVkTmFtZTtcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zU3RvcmUodHJpcGxlcywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNTdG9yZSkpXG4gICAgcmV0dXJuIG5ldyBOM1N0b3JlKHRyaXBsZXMsIG9wdGlvbnMpO1xuXG4gIC8vIFRoZSBudW1iZXIgb2YgdHJpcGxlcyBpcyBpbml0aWFsbHkgemVyby5cbiAgdGhpcy5fc2l6ZSA9IDA7XG4gIC8vIGBfZ3JhcGhzYCBjb250YWlucyBzdWJqZWN0LCBwcmVkaWNhdGUsIGFuZCBvYmplY3QgaW5kZXhlcyBwZXIgZ3JhcGguXG4gIHRoaXMuX2dyYXBocyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGBfZW50aXRpZXNgIG1hcHMgZW50aXRpZXMgc3VjaCBhcyBgaHR0cDovL3htbG5zLmNvbS9mb2FmLzAuMS9uYW1lYCB0byBudW1iZXJzLlxuICAvLyBUaGlzIHNhdmVzIG1lbW9yeSwgc2luY2Ugb25seSB0aGUgbnVtYmVycyBoYXZlIHRvIGJlIHN0b3JlZCBpbiBgX2dyYXBoc2AuXG4gIHRoaXMuX2VudGl0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZW50aXRpZXNbJz48J10gPSAwOyAvLyBEdW1teSBlbnRyeSwgc28gdGhlIGZpcnN0IGFjdHVhbCBrZXkgaXMgbm9uLXplcm9cbiAgdGhpcy5fZW50aXR5Q291bnQgPSAwO1xuICAvLyBgX2JsYW5rTm9kZUluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY3JlYXRlZCBibGFuayBub2RlIHRoYXQgd2FzIGF1dG9tYXRpY2FsbHkgbmFtZWRcbiAgdGhpcy5fYmxhbmtOb2RlSW5kZXggPSAwO1xuXG4gIC8vIFNoaWZ0IHBhcmFtZXRlcnMgaWYgYHRyaXBsZXNgIGlzIG5vdCBnaXZlblxuICBpZiAoIW9wdGlvbnMgJiYgdHJpcGxlcyAmJiAhdHJpcGxlc1swXSlcbiAgICBvcHRpb25zID0gdHJpcGxlcywgdHJpcGxlcyA9IG51bGw7XG5cbiAgLy8gQWRkIHRyaXBsZXMgYW5kIHByZWZpeGVzIGlmIHBhc3NlZFxuICB0aGlzLl9wcmVmaXhlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucHJlZml4ZXMpXG4gICAgdGhpcy5hZGRQcmVmaXhlcyhvcHRpb25zLnByZWZpeGVzKTtcbiAgaWYgKHRyaXBsZXMpXG4gICAgdGhpcy5hZGRUcmlwbGVzKHRyaXBsZXMpO1xufVxuXG5OM1N0b3JlLnByb3RvdHlwZSA9IHtcbiAgLy8gIyMgUHVibGljIHByb3BlcnRpZXNcblxuICAvLyAjIyMgYHNpemVgIHJldHVybnMgdGhlIG51bWJlciBvZiB0cmlwbGVzIGluIHRoZSBzdG9yZS5cbiAgZ2V0IHNpemUoKSB7XG4gICAgLy8gUmV0dXJuIHRoZSB0cmlwbGUgY291bnQgaWYgaWYgd2FzIGNhY2hlZC5cbiAgICB2YXIgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgaWYgKHNpemUgIT09IG51bGwpXG4gICAgICByZXR1cm4gc2l6ZTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIHRyaXBsZXMgYnkgY291bnRpbmcgdG8gdGhlIGRlZXBlc3QgbGV2ZWwuXG4gICAgdmFyIGdyYXBocyA9IHRoaXMuX2dyYXBocywgc3ViamVjdHMsIHN1YmplY3Q7XG4gICAgZm9yICh2YXIgZ3JhcGhLZXkgaW4gZ3JhcGhzKVxuICAgICAgZm9yICh2YXIgc3ViamVjdEtleSBpbiAoc3ViamVjdHMgPSBncmFwaHNbZ3JhcGhLZXldLnN1YmplY3RzKSlcbiAgICAgICAgZm9yICh2YXIgcHJlZGljYXRlS2V5IGluIChzdWJqZWN0ID0gc3ViamVjdHNbc3ViamVjdEtleV0pKVxuICAgICAgICAgIHNpemUgKz0gT2JqZWN0LmtleXMoc3ViamVjdFtwcmVkaWNhdGVLZXldKS5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX3NpemUgPSBzaXplO1xuICB9LFxuXG4gIC8vICMjIFByaXZhdGUgbWV0aG9kc1xuXG4gIC8vICMjIyBgX2FkZFRvSW5kZXhgIGFkZHMgYSB0cmlwbGUgdG8gYSB0aHJlZS1sYXllcmVkIGluZGV4LlxuICBfYWRkVG9JbmRleDogZnVuY3Rpb24gKGluZGV4MCwga2V5MCwga2V5MSwga2V5Mikge1xuICAgIC8vIENyZWF0ZSBsYXllcnMgYXMgbmVjZXNzYXJ5LlxuICAgIHZhciBpbmRleDEgPSBpbmRleDBba2V5MF0gfHwgKGluZGV4MFtrZXkwXSA9IHt9KTtcbiAgICB2YXIgaW5kZXgyID0gaW5kZXgxW2tleTFdIHx8IChpbmRleDFba2V5MV0gPSB7fSk7XG4gICAgLy8gU2V0dGluZyB0aGUga2V5IHRvIF9hbnlfIHZhbHVlIHNpZ25hbGl6ZXMgdGhlIHByZXNlbmNlIG9mIHRoZSB0cmlwbGUuXG4gICAgaW5kZXgyW2tleTJdID0gbnVsbDtcbiAgfSxcblxuICAvLyAjIyMgYF9yZW1vdmVGcm9tSW5kZXhgIHJlbW92ZXMgYSB0cmlwbGUgZnJvbSBhIHRocmVlLWxheWVyZWQgaW5kZXguXG4gIF9yZW1vdmVGcm9tSW5kZXg6IGZ1bmN0aW9uIChpbmRleDAsIGtleTAsIGtleTEsIGtleTIpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHRyaXBsZSBmcm9tIHRoZSBpbmRleC5cbiAgICB2YXIgaW5kZXgxID0gaW5kZXgwW2tleTBdLCBpbmRleDIgPSBpbmRleDFba2V5MV0sIGtleTtcbiAgICBkZWxldGUgaW5kZXgyW2tleTJdO1xuXG4gICAgLy8gUmVtb3ZlIGludGVybWVkaWFyeSBpbmRleCBsYXllcnMgaWYgdGhleSBhcmUgZW1wdHkuXG4gICAgZm9yIChrZXkgaW4gaW5kZXgyKSByZXR1cm47XG4gICAgZGVsZXRlIGluZGV4MVtrZXkxXTtcbiAgICBmb3IgKGtleSBpbiBpbmRleDEpIHJldHVybjtcbiAgICBkZWxldGUgaW5kZXgwW2tleTBdO1xuICB9LFxuXG4gIC8vICMjIyBgX2ZpbmRJbkluZGV4YCBmaW5kcyBhIHNldCBvZiB0cmlwbGVzIGluIGEgdGhyZWUtbGF5ZXJlZCBpbmRleC5cbiAgLy8gVGhlIGluZGV4IGJhc2UgaXMgYGluZGV4MGAgYW5kIHRoZSBrZXlzIGF0IGVhY2ggbGV2ZWwgYXJlIGBrZXkwYCwgYGtleTFgLCBhbmQgYGtleTJgLlxuICAvLyBBbnkgb2YgdGhlc2Uga2V5cyBjYW4gYmUgYG51bGxgLCB3aGljaCBpcyBpbnRlcnByZXRlZCBhcyBhIHdpbGRjYXJkLlxuICAvLyBgbmFtZTBgLCBgbmFtZTFgLCBhbmQgYG5hbWUyYCBhcmUgdGhlIG5hbWVzIG9mIHRoZSBrZXlzIGF0IGVhY2ggbGV2ZWwsXG4gIC8vIHVzZWQgd2hlbiByZWNvbnN0cnVjdGluZyB0aGUgcmVzdWx0aW5nIHRyaXBsZVxuICAvLyAoZm9yIGluc3RhbmNlOiBfc3ViamVjdF8sIF9wcmVkaWNhdGVfLCBhbmQgX29iamVjdF8pLlxuICAvLyBGaW5hbGx5LCBgZ3JhcGhgIHdpbGwgYmUgdGhlIGdyYXBoIG9mIHRoZSBjcmVhdGVkIHRyaXBsZXMuXG4gIF9maW5kSW5JbmRleDogZnVuY3Rpb24gKGluZGV4MCwga2V5MCwga2V5MSwga2V5MiwgbmFtZTAsIG5hbWUxLCBuYW1lMiwgZ3JhcGgpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdLCBlbnRpdHlLZXlzID0gT2JqZWN0LmtleXModGhpcy5fZW50aXRpZXMpLCB0bXAsIGluZGV4MSwgaW5kZXgyO1xuXG4gICAgLy8gSWYgYSBrZXkgaXMgc3BlY2lmaWVkLCB1c2Ugb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMC5cbiAgICBpZiAoa2V5MCkgKHRtcCA9IGluZGV4MCwgaW5kZXgwID0ge30pW2tleTBdID0gdG1wW2tleTBdO1xuICAgIGZvciAodmFyIHZhbHVlMCBpbiBpbmRleDApIHtcbiAgICAgIHZhciBlbnRpdHkwID0gZW50aXR5S2V5c1t2YWx1ZTBdO1xuXG4gICAgICBpZiAoaW5kZXgxID0gaW5kZXgwW3ZhbHVlMF0pIHtcbiAgICAgICAgLy8gSWYgYSBrZXkgaXMgc3BlY2lmaWVkLCB1c2Ugb25seSB0aGF0IHBhcnQgb2YgaW5kZXggMS5cbiAgICAgICAgaWYgKGtleTEpICh0bXAgPSBpbmRleDEsIGluZGV4MSA9IHt9KVtrZXkxXSA9IHRtcFtrZXkxXTtcbiAgICAgICAgZm9yICh2YXIgdmFsdWUxIGluIGluZGV4MSkge1xuICAgICAgICAgIHZhciBlbnRpdHkxID0gZW50aXR5S2V5c1t2YWx1ZTFdO1xuXG4gICAgICAgICAgaWYgKGluZGV4MiA9IGluZGV4MVt2YWx1ZTFdKSB7XG4gICAgICAgICAgICAvLyBJZiBhIGtleSBpcyBzcGVjaWZpZWQsIHVzZSBvbmx5IHRoYXQgcGFydCBvZiBpbmRleCAyLCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0ga2V5MiA/IChrZXkyIGluIGluZGV4MiA/IFtrZXkyXSA6IFtdKSA6IE9iamVjdC5rZXlzKGluZGV4Mik7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdHJpcGxlcyBmb3IgYWxsIGl0ZW1zIGZvdW5kIGluIGluZGV4IDIuXG4gICAgICAgICAgICBmb3IgKHZhciBsID0gdmFsdWVzLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7IHN1YmplY3Q6ICcnLCBwcmVkaWNhdGU6ICcnLCBvYmplY3Q6ICcnLCBncmFwaDogZ3JhcGggfTtcbiAgICAgICAgICAgICAgcmVzdWx0W25hbWUwXSA9IGVudGl0eTA7XG4gICAgICAgICAgICAgIHJlc3VsdFtuYW1lMV0gPSBlbnRpdHkxO1xuICAgICAgICAgICAgICByZXN1bHRbbmFtZTJdID0gZW50aXR5S2V5c1t2YWx1ZXNbbF1dO1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0sXG5cbiAgLy8gIyMjIGBfY291bnRJbkluZGV4YCBjb3VudHMgbWF0Y2hpbmcgdHJpcGxlcyBpbiBhIHRocmVlLWxheWVyZWQgaW5kZXguXG4gIC8vIFRoZSBpbmRleCBiYXNlIGlzIGBpbmRleDBgIGFuZCB0aGUga2V5cyBhdCBlYWNoIGxldmVsIGFyZSBga2V5MGAsIGBrZXkxYCwgYW5kIGBrZXkyYC5cbiAgLy8gQW55IG9mIHRoZXNlIGtleXMgY2FuIGJlIGBudWxsYCwgd2hpY2ggaXMgaW50ZXJwcmV0ZWQgYXMgYSB3aWxkY2FyZC5cbiAgX2NvdW50SW5JbmRleDogZnVuY3Rpb24gKGluZGV4MCwga2V5MCwga2V5MSwga2V5Mikge1xuICAgIHZhciBjb3VudCA9IDAsIHRtcCwgaW5kZXgxLCBpbmRleDI7XG5cbiAgICAvLyBJZiBhIGtleSBpcyBzcGVjaWZpZWQsIGNvdW50IG9ubHkgdGhhdCBwYXJ0IG9mIGluZGV4IDAuXG4gICAgaWYgKGtleTApICh0bXAgPSBpbmRleDAsIGluZGV4MCA9IHt9KVtrZXkwXSA9IHRtcFtrZXkwXTtcbiAgICBmb3IgKHZhciB2YWx1ZTAgaW4gaW5kZXgwKSB7XG4gICAgICBpZiAoaW5kZXgxID0gaW5kZXgwW3ZhbHVlMF0pIHtcbiAgICAgICAgLy8gSWYgYSBrZXkgaXMgc3BlY2lmaWVkLCBjb3VudCBvbmx5IHRoYXQgcGFydCBvZiBpbmRleCAxLlxuICAgICAgICBpZiAoa2V5MSkgKHRtcCA9IGluZGV4MSwgaW5kZXgxID0ge30pW2tleTFdID0gdG1wW2tleTFdO1xuICAgICAgICBmb3IgKHZhciB2YWx1ZTEgaW4gaW5kZXgxKSB7XG4gICAgICAgICAgaWYgKGluZGV4MiA9IGluZGV4MVt2YWx1ZTFdKSB7XG4gICAgICAgICAgICAvLyBJZiBhIGtleSBpcyBzcGVjaWZpZWQsIGNvdW50IHRoZSB0cmlwbGUgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgaWYgKGtleTIpIChrZXkyIGluIGluZGV4MikgJiYgY291bnQrKztcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY291bnQgYWxsIHRyaXBsZXMuXG4gICAgICAgICAgICBlbHNlIGNvdW50ICs9IE9iamVjdC5rZXlzKGluZGV4MikubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG4gIH0sXG5cbiAgLy8gIyMgUHVibGljIG1ldGhvZHNcblxuICAvLyAjIyMgYGFkZFRyaXBsZWAgYWRkcyBhIG5ldyBOMyB0cmlwbGUgdG8gdGhlIHN0b3JlLlxuICBhZGRUcmlwbGU6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICAvLyBTaGlmdCBhcmd1bWVudHMgaWYgYSB0cmlwbGUgb2JqZWN0IGlzIGdpdmVuIGluc3RlYWQgb2YgY29tcG9uZW50c1xuICAgIGlmICghcHJlZGljYXRlKVxuICAgICAgZ3JhcGggPSBzdWJqZWN0LmdyYXBoLCBvYmplY3QgPSBzdWJqZWN0Lm9iamVjdCxcbiAgICAgICAgcHJlZGljYXRlID0gc3ViamVjdC5wcmVkaWNhdGUsIHN1YmplY3QgPSBzdWJqZWN0LnN1YmplY3Q7XG5cbiAgICAvLyBGaW5kIHRoZSBncmFwaCB0aGF0IHdpbGwgY29udGFpbiB0aGUgdHJpcGxlLlxuICAgIGdyYXBoID0gZ3JhcGggfHwgJyc7XG4gICAgdmFyIGdyYXBoSXRlbSA9IHRoaXMuX2dyYXBoc1tncmFwaF07XG4gICAgLy8gQ3JlYXRlIHRoZSBncmFwaCBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldC5cbiAgICBpZiAoIWdyYXBoSXRlbSkge1xuICAgICAgZ3JhcGhJdGVtID0gdGhpcy5fZ3JhcGhzW2dyYXBoXSA9IHsgc3ViamVjdHM6IHt9LCBwcmVkaWNhdGVzOiB7fSwgb2JqZWN0czoge30gfTtcbiAgICAgIC8vIEZyZWV6aW5nIGEgZ3JhcGggaGVscHMgc3Vic2VxdWVudCBgYWRkYCBwZXJmb3JtYW5jZSxcbiAgICAgIC8vIGFuZCBwcm9wZXJ0aWVzIHdpbGwgbmV2ZXIgYmUgbW9kaWZpZWQgYW55d2F5LlxuICAgICAgT2JqZWN0LmZyZWV6ZShncmFwaEl0ZW0pO1xuICAgIH1cblxuICAgIC8vIFNpbmNlIGVudGl0aWVzIGNhbiBvZnRlbiBiZSBsb25nIElSSXMsIHdlIGF2b2lkIHN0b3JpbmcgdGhlbSBpbiBldmVyeSBpbmRleC5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBoYXZlIGEgc2VwYXJhdGUgaW5kZXggdGhhdCBtYXBzIGVudGl0aWVzIHRvIG51bWJlcnMsXG4gICAgLy8gd2hpY2ggYXJlIHRoZW4gdXNlZCBhcyBrZXlzIGluIHRoZSBvdGhlciBpbmRleGVzLlxuICAgIHZhciBlbnRpdGllcyA9IHRoaXMuX2VudGl0aWVzO1xuICAgIHN1YmplY3QgICA9IGVudGl0aWVzW3N1YmplY3RdICAgfHwgKGVudGl0aWVzW3N1YmplY3RdICAgPSArK3RoaXMuX2VudGl0eUNvdW50KTtcbiAgICBwcmVkaWNhdGUgPSBlbnRpdGllc1twcmVkaWNhdGVdIHx8IChlbnRpdGllc1twcmVkaWNhdGVdID0gKyt0aGlzLl9lbnRpdHlDb3VudCk7XG4gICAgb2JqZWN0ICAgID0gZW50aXRpZXNbb2JqZWN0XSAgICB8fCAoZW50aXRpZXNbb2JqZWN0XSAgICA9ICsrdGhpcy5fZW50aXR5Q291bnQpO1xuXG4gICAgdGhpcy5fYWRkVG9JbmRleChncmFwaEl0ZW0uc3ViamVjdHMsICAgc3ViamVjdCwgICBwcmVkaWNhdGUsIG9iamVjdCk7XG4gICAgdGhpcy5fYWRkVG9JbmRleChncmFwaEl0ZW0ucHJlZGljYXRlcywgcHJlZGljYXRlLCBvYmplY3QsICAgIHN1YmplY3QpO1xuICAgIHRoaXMuX2FkZFRvSW5kZXgoZ3JhcGhJdGVtLm9iamVjdHMsICAgIG9iamVjdCwgICAgc3ViamVjdCwgICBwcmVkaWNhdGUpO1xuXG4gICAgLy8gVGhlIGNhY2hlZCB0cmlwbGUgY291bnQgaXMgbm93IGludmFsaWQuXG4gICAgdGhpcy5fc2l6ZSA9IG51bGw7XG4gIH0sXG5cbiAgLy8gIyMjIGBhZGRUcmlwbGVzYCBhZGRzIG11bHRpcGxlIE4zIHRyaXBsZXMgdG8gdGhlIHN0b3JlLlxuICBhZGRUcmlwbGVzOiBmdW5jdGlvbiAodHJpcGxlcykge1xuICAgIGZvciAodmFyIGkgPSB0cmlwbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgdGhpcy5hZGRUcmlwbGUodHJpcGxlc1tpXSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBhZGRQcmVmaXhgIGFkZHMgc3VwcG9ydCBmb3IgcXVlcnlpbmcgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4XG4gIGFkZFByZWZpeDogZnVuY3Rpb24gKHByZWZpeCwgaXJpKSB7XG4gICAgdGhpcy5fcHJlZml4ZXNbcHJlZml4XSA9IGlyaTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFByZWZpeGVzYCBhZGRzIHN1cHBvcnQgZm9yIHF1ZXJ5aW5nIHdpdGggdGhlIGdpdmVuIHByZWZpeGVzXG4gIGFkZFByZWZpeGVzOiBmdW5jdGlvbiAocHJlZml4ZXMpIHtcbiAgICBmb3IgKHZhciBwcmVmaXggaW4gcHJlZml4ZXMpXG4gICAgICB0aGlzLmFkZFByZWZpeChwcmVmaXgsIHByZWZpeGVzW3ByZWZpeF0pO1xuICB9LFxuXG4gIC8vICMjIyBgcmVtb3ZlVHJpcGxlYCByZW1vdmVzIGFuIE4zIHRyaXBsZSBmcm9tIHRoZSBzdG9yZSBpZiBpdCBleGlzdHMuXG4gIHJlbW92ZVRyaXBsZTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBhIHRyaXBsZSBvYmplY3QgaXMgZ2l2ZW4gaW5zdGVhZCBvZiBjb21wb25lbnRzLlxuICAgIGlmICghcHJlZGljYXRlKVxuICAgICAgZ3JhcGggPSBzdWJqZWN0LmdyYXBoLCBvYmplY3QgPSBzdWJqZWN0Lm9iamVjdCxcbiAgICAgICAgcHJlZGljYXRlID0gc3ViamVjdC5wcmVkaWNhdGUsIHN1YmplY3QgPSBzdWJqZWN0LnN1YmplY3Q7XG4gICAgZ3JhcGggPSBncmFwaCB8fCAnJztcblxuICAgIC8vIEZpbmQgaW50ZXJuYWwgaWRlbnRpZmllcnMgZm9yIGFsbCBjb21wb25lbnRzLlxuICAgIHZhciBncmFwaEl0ZW0sIGVudGl0aWVzID0gdGhpcy5fZW50aXRpZXMsIGdyYXBocyA9IHRoaXMuX2dyYXBocztcbiAgICBpZiAoIShzdWJqZWN0ICAgICA9IGVudGl0aWVzW3N1YmplY3RdKSkgICByZXR1cm47XG4gICAgaWYgKCEocHJlZGljYXRlICAgPSBlbnRpdGllc1twcmVkaWNhdGVdKSkgcmV0dXJuO1xuICAgIGlmICghKG9iamVjdCAgICAgID0gZW50aXRpZXNbb2JqZWN0XSkpICAgIHJldHVybjtcbiAgICBpZiAoIShncmFwaEl0ZW0gICA9IGdyYXBoc1tncmFwaF0pKSAgICAgICByZXR1cm47XG5cbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgdHJpcGxlIGV4aXN0cy5cbiAgICB2YXIgc3ViamVjdHMsIHByZWRpY2F0ZXM7XG4gICAgaWYgKCEoc3ViamVjdHMgICA9IGdyYXBoSXRlbS5zdWJqZWN0c1tzdWJqZWN0XSkpIHJldHVybjtcbiAgICBpZiAoIShwcmVkaWNhdGVzID0gc3ViamVjdHNbcHJlZGljYXRlXSkpIHJldHVybjtcbiAgICBpZiAoIShvYmplY3QgaW4gcHJlZGljYXRlcykpIHJldHVybjtcblxuICAgIC8vIFJlbW92ZSBpdCBmcm9tIGFsbCBpbmRleGVzLlxuICAgIHRoaXMuX3JlbW92ZUZyb21JbmRleChncmFwaEl0ZW0uc3ViamVjdHMsICAgc3ViamVjdCwgICBwcmVkaWNhdGUsIG9iamVjdCk7XG4gICAgdGhpcy5fcmVtb3ZlRnJvbUluZGV4KGdyYXBoSXRlbS5wcmVkaWNhdGVzLCBwcmVkaWNhdGUsIG9iamVjdCwgICAgc3ViamVjdCk7XG4gICAgdGhpcy5fcmVtb3ZlRnJvbUluZGV4KGdyYXBoSXRlbS5vYmplY3RzLCAgICBvYmplY3QsICAgIHN1YmplY3QsICAgcHJlZGljYXRlKTtcbiAgICBpZiAodGhpcy5fc2l6ZSAhPT0gbnVsbCkgdGhpcy5fc2l6ZS0tO1xuXG4gICAgLy8gUmVtb3ZlIHRoZSBncmFwaCBpZiBpdCBpcyBlbXB0eS5cbiAgICBmb3IgKHN1YmplY3QgaW4gZ3JhcGhJdGVtLnN1YmplY3RzKSByZXR1cm47XG4gICAgZGVsZXRlIGdyYXBoc1tncmFwaF07XG4gIH0sXG5cbiAgLy8gIyMjIGByZW1vdmVUcmlwbGVzYCByZW1vdmVzIG11bHRpcGxlIE4zIHRyaXBsZXMgZnJvbSB0aGUgc3RvcmUuXG4gIHJlbW92ZVRyaXBsZXM6IGZ1bmN0aW9uICh0cmlwbGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IHRyaXBsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICB0aGlzLnJlbW92ZVRyaXBsZSh0cmlwbGVzW2ldKTtcbiAgfSxcblxuICAvLyAjIyMgYGZpbmRgIGZpbmRzIGEgc2V0IG9mIHRyaXBsZXMgbWF0Y2hpbmcgYSBwYXR0ZXJuLCBleHBhbmRpbmcgcHJlZml4ZXMgYXMgbmVjZXNzYXJ5LlxuICAvLyBTZXR0aW5nIGBzdWJqZWN0YCwgYHByZWRpY2F0ZWAsIG9yIGBvYmplY3RgIHRvIGBudWxsYCBtZWFucyBhbiBfYW55dGhpbmdfIHdpbGRjYXJkLlxuICAvLyBTZXR0aW5nIGBncmFwaGAgdG8gYG51bGxgIG1lYW5zIHRoZSBkZWZhdWx0IGdyYXBoLlxuICBmaW5kOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgdmFyIHByZWZpeGVzID0gdGhpcy5fcHJlZml4ZXM7XG4gICAgcmV0dXJuIHRoaXMuZmluZEJ5SVJJKFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHN1YmplY3QsICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHByZWRpY2F0ZSwgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKG9iamVjdCwgICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgICAgcHJlZml4ZXMpXG4gICAgKTtcbiAgfSxcblxuICAvLyAjIyMgYGZpbmRCeUlSSWAgZmluZHMgYSBzZXQgb2YgdHJpcGxlcyBtYXRjaGluZyBhIHBhdHRlcm4uXG4gIC8vIFNldHRpbmcgYHN1YmplY3RgLCBgcHJlZGljYXRlYCwgb3IgYG9iamVjdGAgdG8gYSBmYWxzeSB2YWx1ZSBtZWFucyBhbiBfYW55dGhpbmdfIHdpbGRjYXJkLlxuICAvLyBTZXR0aW5nIGBncmFwaGAgdG8gYSBmYWxzeSB2YWx1ZSBtZWFucyB0aGUgZGVmYXVsdCBncmFwaC5cbiAgZmluZEJ5SVJJOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gICAgZ3JhcGggPSBncmFwaCB8fCAnJztcbiAgICB2YXIgZ3JhcGhJdGVtID0gdGhpcy5fZ3JhcGhzW2dyYXBoXSwgZW50aXRpZXMgPSB0aGlzLl9lbnRpdGllcztcblxuICAgIC8vIElmIHRoZSBzcGVjaWZpZWQgZ3JhcGggY29udGFpbiBubyB0cmlwbGVzLCB0aGVyZSBhcmUgbm8gcmVzdWx0cy5cbiAgICBpZiAoIWdyYXBoSXRlbSkgcmV0dXJuIFtdO1xuXG4gICAgLy8gVHJhbnNsYXRlIElSSXMgdG8gaW50ZXJuYWwgaW5kZXgga2V5cy5cbiAgICAvLyBPcHRpbWl6YXRpb246IGlmIHRoZSBlbnRpdHkgZG9lc24ndCBleGlzdCwgbm8gdHJpcGxlcyB3aXRoIGl0IGV4aXN0LlxuICAgIGlmIChzdWJqZWN0ICAgJiYgIShzdWJqZWN0ICAgPSBlbnRpdGllc1tzdWJqZWN0XSkpICAgcmV0dXJuIFtdO1xuICAgIGlmIChwcmVkaWNhdGUgJiYgIShwcmVkaWNhdGUgPSBlbnRpdGllc1twcmVkaWNhdGVdKSkgcmV0dXJuIFtdO1xuICAgIGlmIChvYmplY3QgICAgJiYgIShvYmplY3QgICAgPSBlbnRpdGllc1tvYmplY3RdKSkgICAgcmV0dXJuIFtdO1xuXG4gICAgLy8gQ2hvb3NlIHRoZSBvcHRpbWFsIGluZGV4LCBiYXNlZCBvbiB3aGF0IGZpZWxkcyBhcmUgcHJlc2VudFxuICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0KVxuICAgICAgICAvLyBJZiBzdWJqZWN0IGFuZCBvYmplY3QgYXJlIGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3QuXG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kSW5JbmRleChncmFwaEl0ZW0ub2JqZWN0cywgb2JqZWN0LCBzdWJqZWN0LCBwcmVkaWNhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JywgJ3N1YmplY3QnLCAncHJlZGljYXRlJywgZ3JhcGgpO1xuICAgICAgZWxzZVxuICAgICAgICAvLyBJZiBvbmx5IHN1YmplY3QgYW5kIHBvc3NpYmx5IHByZWRpY2F0ZSBhcmUgZ2l2ZW4sIHRoZSBzdWJqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3QuXG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kSW5JbmRleChncmFwaEl0ZW0uc3ViamVjdHMsIHN1YmplY3QsIHByZWRpY2F0ZSwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJqZWN0JywgJ3ByZWRpY2F0ZScsICdvYmplY3QnLCBncmFwaCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZSlcbiAgICAgIC8vIElmIG9ubHkgcHJlZGljYXRlIGFuZCBwb3NzaWJseSBvYmplY3QgYXJlIGdpdmVuLCB0aGUgcHJlZGljYXRlIGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3QuXG4gICAgICByZXR1cm4gdGhpcy5fZmluZEluSW5kZXgoZ3JhcGhJdGVtLnByZWRpY2F0ZXMsIHByZWRpY2F0ZSwgb2JqZWN0LCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgJ3N1YmplY3QnLCBncmFwaCk7XG4gICAgZWxzZSBpZiAob2JqZWN0KVxuICAgICAgLy8gSWYgb25seSBvYmplY3QgaXMgZ2l2ZW4sIHRoZSBvYmplY3QgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdC5cbiAgICAgIHJldHVybiB0aGlzLl9maW5kSW5JbmRleChncmFwaEl0ZW0ub2JqZWN0cywgb2JqZWN0LCBudWxsLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvYmplY3QnLCAnc3ViamVjdCcsICdwcmVkaWNhdGUnLCBncmFwaCk7XG4gICAgZWxzZVxuICAgICAgLy8gSWYgbm90aGluZyBpcyBnaXZlbiwgaXRlcmF0ZSBzdWJqZWN0cyBhbmQgcHJlZGljYXRlcyBmaXJzdFxuICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRJbkluZGV4KGdyYXBoSXRlbS5zdWJqZWN0cywgbnVsbCwgbnVsbCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViamVjdCcsICdwcmVkaWNhdGUnLCAnb2JqZWN0JywgZ3JhcGgpO1xuICB9LFxuXG4gIC8vICMjIyBgY291bnRgIHJldHVybnMgdGhlIG51bWJlciBvZiB0cmlwbGVzIG1hdGNoaW5nIGEgcGF0dGVybiwgZXhwYW5kaW5nIHByZWZpeGVzIGFzIG5lY2Vzc2FyeS5cbiAgLy8gU2V0dGluZyBgc3ViamVjdGAsIGBwcmVkaWNhdGVgLCBvciBgb2JqZWN0YCB0byBgbnVsbGAgbWVhbnMgYW4gX2FueXRoaW5nXyB3aWxkY2FyZC5cbiAgLy8gU2V0dGluZyBgZ3JhcGhgIHRvIGBudWxsYCBtZWFucyB0aGUgZGVmYXVsdCBncmFwaC5cbiAgY291bnQ6IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB0aGlzLl9wcmVmaXhlcztcbiAgICByZXR1cm4gdGhpcy5jb3VudEJ5SVJJKFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHN1YmplY3QsICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKHByZWRpY2F0ZSwgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKG9iamVjdCwgICAgcHJlZml4ZXMpLFxuICAgICAgZXhwYW5kUHJlZml4ZWROYW1lKGdyYXBoLCAgICAgcHJlZml4ZXMpXG4gICAgKTtcbiAgfSxcblxuICAvLyAjIyMgYGNvdW50QnlJUklgIHJldHVybnMgdGhlIG51bWJlciBvZiB0cmlwbGVzIG1hdGNoaW5nIGEgcGF0dGVybi5cbiAgLy8gU2V0dGluZyBgc3ViamVjdGAsIGBwcmVkaWNhdGVgLCBvciBgb2JqZWN0YCB0byBgbnVsbGAgbWVhbnMgYW4gX2FueXRoaW5nXyB3aWxkY2FyZC5cbiAgLy8gU2V0dGluZyBgZ3JhcGhgIHRvIGBudWxsYCBtZWFucyB0aGUgZGVmYXVsdCBncmFwaC5cbiAgY291bnRCeUlSSTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIGdyYXBoID0gZ3JhcGggfHwgJyc7XG4gICAgdmFyIGdyYXBoSXRlbSA9IHRoaXMuX2dyYXBoc1tncmFwaF0sIGVudGl0aWVzID0gdGhpcy5fZW50aXRpZXM7XG5cbiAgICAvLyBJZiB0aGUgc3BlY2lmaWVkIGdyYXBoIGNvbnRhaW4gbm8gdHJpcGxlcywgdGhlcmUgYXJlIG5vIHJlc3VsdHMuXG4gICAgaWYgKCFncmFwaEl0ZW0pIHJldHVybiAwO1xuXG4gICAgLy8gVHJhbnNsYXRlIElSSXMgdG8gaW50ZXJuYWwgaW5kZXgga2V5cy5cbiAgICAvLyBPcHRpbWl6YXRpb246IGlmIHRoZSBlbnRpdHkgZG9lc24ndCBleGlzdCwgbm8gdHJpcGxlcyB3aXRoIGl0IGV4aXN0LlxuICAgIGlmIChzdWJqZWN0ICAgJiYgIShzdWJqZWN0ICAgPSBlbnRpdGllc1tzdWJqZWN0XSkpICAgcmV0dXJuIDA7XG4gICAgaWYgKHByZWRpY2F0ZSAmJiAhKHByZWRpY2F0ZSA9IGVudGl0aWVzW3ByZWRpY2F0ZV0pKSByZXR1cm4gMDtcbiAgICBpZiAob2JqZWN0ICAgICYmICEob2JqZWN0ICAgID0gZW50aXRpZXNbb2JqZWN0XSkpICAgIHJldHVybiAwO1xuXG4gICAgLy8gQ2hvb3NlIHRoZSBvcHRpbWFsIGluZGV4LCBiYXNlZCBvbiB3aGF0IGZpZWxkcyBhcmUgcHJlc2VudFxuICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0KVxuICAgICAgICAvLyBJZiBzdWJqZWN0IGFuZCBvYmplY3QgYXJlIGdpdmVuLCB0aGUgb2JqZWN0IGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3QuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb3VudEluSW5kZXgoZ3JhcGhJdGVtLm9iamVjdHMsIG9iamVjdCwgc3ViamVjdCwgcHJlZGljYXRlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgLy8gSWYgb25seSBzdWJqZWN0IGFuZCBwb3NzaWJseSBwcmVkaWNhdGUgYXJlIGdpdmVuLCB0aGUgc3ViamVjdCBpbmRleCB3aWxsIGJlIHRoZSBmYXN0ZXN0LlxuICAgICAgICByZXR1cm4gdGhpcy5fY291bnRJbkluZGV4KGdyYXBoSXRlbS5zdWJqZWN0cywgc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcmVkaWNhdGUpIHtcbiAgICAgIC8vIElmIG9ubHkgcHJlZGljYXRlIGFuZCBwb3NzaWJseSBvYmplY3QgYXJlIGdpdmVuLCB0aGUgcHJlZGljYXRlIGluZGV4IHdpbGwgYmUgdGhlIGZhc3Rlc3QuXG4gICAgICByZXR1cm4gdGhpcy5fY291bnRJbkluZGV4KGdyYXBoSXRlbS5wcmVkaWNhdGVzLCBwcmVkaWNhdGUsIG9iamVjdCwgc3ViamVjdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gSWYgb25seSBvYmplY3QgaXMgcG9zc2libHkgZ2l2ZW4sIHRoZSBvYmplY3QgaW5kZXggd2lsbCBiZSB0aGUgZmFzdGVzdC5cbiAgICAgIHJldHVybiB0aGlzLl9jb3VudEluSW5kZXgoZ3JhcGhJdGVtLm9iamVjdHMsIG9iamVjdCwgc3ViamVjdCwgcHJlZGljYXRlKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gIyMjIGBjcmVhdGVCbGFua05vZGVgIGNyZWF0ZXMgYSBuZXcgYmxhbmsgbm9kZSwgcmV0dXJuaW5nIGl0cyBuYW1lLlxuICBjcmVhdGVCbGFua05vZGU6IGZ1bmN0aW9uIChzdWdnZXN0ZWROYW1lKSB7XG4gICAgdmFyIG5hbWUsIGluZGV4O1xuICAgIC8vIEdlbmVyYXRlIGEgbmFtZSBiYXNlZCBvbiB0aGUgc3VnZ2VzdGVkIG5hbWVcbiAgICBpZiAoc3VnZ2VzdGVkTmFtZSkge1xuICAgICAgbmFtZSA9IHN1Z2dlc3RlZE5hbWUgPSAnXzonICsgc3VnZ2VzdGVkTmFtZSwgaW5kZXggPSAxO1xuICAgICAgd2hpbGUgKHRoaXMuX2VudGl0aWVzW25hbWVdKVxuICAgICAgICBuYW1lID0gc3VnZ2VzdGVkTmFtZSArIGluZGV4Kys7XG4gICAgfVxuICAgIC8vIEdlbmVyYXRlIGEgZ2VuZXJpYyBibGFuayBub2RlIG5hbWVcbiAgICBlbHNlIHtcbiAgICAgIGRvIHsgbmFtZSA9ICdfOmInICsgdGhpcy5fYmxhbmtOb2RlSW5kZXgrKzsgfVxuICAgICAgd2hpbGUgKHRoaXMuX2VudGl0aWVzW25hbWVdKTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBibGFuayBub2RlIHRvIHRoZSBlbnRpdGllcywgYXZvaWRpbmcgdGhlIGdlbmVyYXRpb24gb2YgZHVwbGljYXRlc1xuICAgIHRoaXMuX2VudGl0aWVzW25hbWVdID0gKyt0aGlzLl9lbnRpdHlDb3VudDtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSxcbn07XG5cbi8vICMjIEV4cG9ydHNcblxuLy8gRXhwb3J0IHRoZSBgTjNTdG9yZWAgY2xhc3MgYXMgYSB3aG9sZS5cbm1vZHVsZS5leHBvcnRzID0gTjNTdG9yZTtcbiIsIi8vICoqTjNTdHJlYW1QYXJzZXIqKiBwYXJzZXMgYW4gTjMgc3RyZWFtIGludG8gYSB0cmlwbGUgc3RyZWFtXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtLFxuICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgTjNQYXJzZXIgPSByZXF1aXJlKCcuL04zUGFyc2VyLmpzJyk7XG5cbi8vICMjIENvbnN0cnVjdG9yXG5mdW5jdGlvbiBOM1N0cmVhbVBhcnNlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOM1N0cmVhbVBhcnNlcikpXG4gICAgcmV0dXJuIG5ldyBOM1N0cmVhbVBhcnNlcihvcHRpb25zKTtcblxuICAvLyBJbml0aWFsaXplIFRyYW5zZm9ybSBiYXNlIGNsYXNzXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIHsgZGVjb2RlU3RyaW5nczogdHJ1ZSB9KTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5vYmplY3RNb2RlID0gdHJ1ZTtcblxuICAvLyBTZXQgdXAgcGFyc2VyXG4gIHZhciBzZWxmID0gdGhpcywgcGFyc2VyID0gbmV3IE4zUGFyc2VyKG9wdGlvbnMpO1xuICBwYXJzZXIucGFyc2UoXG4gICAgLy8gSGFuZGxlIHRyaXBsZXMgYnkgcHVzaGluZyB0aGVtIGRvd24gdGhlIHBpcGVsaW5lXG4gICAgZnVuY3Rpb24gKGVycm9yLCB0cmlwbGUpIHtcbiAgICAgIHRyaXBsZSAmJiBzZWxmLnB1c2godHJpcGxlKSB8fFxuICAgICAgZXJyb3IgICYmIHNlbGYuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgfSxcbiAgICAvLyBFbWl0IHByZWZpeGVzIHRocm91Z2ggdGhlIGBwcmVmaXhgIGV2ZW50XG4gICAgdGhpcy5lbWl0LmJpbmQodGhpcywgJ3ByZWZpeCcpKTtcblxuICAvLyBJbXBsZW1lbnQgVHJhbnNmb3JtIG1ldGhvZHMgb24gdG9wIG9mIHBhcnNlclxuICB0aGlzLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBkb25lKSB7IHBhcnNlci5hZGRDaHVuayhjaHVuayk7IGRvbmUoKTsgfTtcbiAgdGhpcy5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkgeyBwYXJzZXIuZW5kKCk7IGRvbmUoKTsgfTtcbn1cbnV0aWwuaW5oZXJpdHMoTjNTdHJlYW1QYXJzZXIsIFRyYW5zZm9ybSk7XG5cbi8vICMjIEV4cG9ydHNcbi8vIEV4cG9ydCB0aGUgYE4zU3RyZWFtUGFyc2VyYCBjbGFzcyBhcyBhIHdob2xlLlxubW9kdWxlLmV4cG9ydHMgPSBOM1N0cmVhbVBhcnNlcjtcbiIsIi8vICoqTjNTdHJlYW1Xcml0ZXIqKiBzZXJpYWxpemVzIGEgdHJpcGxlIHN0cmVhbSBpbnRvIGFuIE4zIHN0cmVhbVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybSxcbiAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIE4zV3JpdGVyID0gcmVxdWlyZSgnLi9OM1dyaXRlci5qcycpO1xuXG4vLyAjIyBDb25zdHJ1Y3RvclxuZnVuY3Rpb24gTjNTdHJlYW1Xcml0ZXIob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNTdHJlYW1Xcml0ZXIpKVxuICAgIHJldHVybiBuZXcgTjNTdHJlYW1Xcml0ZXIob3B0aW9ucyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBUcmFuc2Zvcm0gYmFzZSBjbGFzc1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUub2JqZWN0TW9kZSA9IHRydWU7XG5cbiAgLy8gU2V0IHVwIHdyaXRlciB3aXRoIGEgZHVtbXkgc3RyZWFtIG9iamVjdFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB3cml0ZXIgPSBuZXcgTjNXcml0ZXIoe1xuICAgIHdyaXRlOiBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykgeyBzZWxmLnB1c2goY2h1bmspOyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9LFxuICAgIGVuZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHNlbGYucHVzaChudWxsKTsgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsgfSxcbiAgfSwgb3B0aW9ucyk7XG5cbiAgLy8gSW1wbGVtZW50IFRyYW5zZm9ybSBtZXRob2RzIG9uIHRvcCBvZiB3cml0ZXJcbiAgdGhpcy5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKHRyaXBsZSwgZW5jb2RpbmcsIGRvbmUpIHsgd3JpdGVyLmFkZFRyaXBsZSh0cmlwbGUsIGRvbmUpOyB9O1xuICB0aGlzLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7IHdyaXRlci5lbmQoZG9uZSk7IH07XG59XG51dGlsLmluaGVyaXRzKE4zU3RyZWFtV3JpdGVyLCBUcmFuc2Zvcm0pO1xuXG4vLyAjIyBFeHBvcnRzXG4vLyBFeHBvcnQgdGhlIGBOM1N0cmVhbVdyaXRlcmAgY2xhc3MgYXMgYSB3aG9sZS5cbm1vZHVsZS5leHBvcnRzID0gTjNTdHJlYW1Xcml0ZXI7XG4iLCIvLyAqKk4zVXRpbCoqIHByb3ZpZGVzIE4zIHV0aWxpdHkgZnVuY3Rpb25zXG5cbnZhciBYc2QgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjJztcbnZhciBYc2RTdHJpbmcgID0gWHNkICsgJ3N0cmluZyc7XG52YXIgWHNkSW50ZWdlciA9IFhzZCArICdpbnRlZ2VyJztcbnZhciBYc2REZWNpbWFsID0gWHNkICsgJ2RlY2ltYWwnO1xudmFyIFhzZEJvb2xlYW4gPSBYc2QgKyAnYm9vbGVhbic7XG52YXIgUmRmTGFuZ1N0cmluZyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZyc7XG5cbnZhciBOM1V0aWwgPSB7XG4gIC8vIFRlc3RzIHdoZXRoZXIgdGhlIGdpdmVuIGVudGl0eSAodHJpcGxlIG9iamVjdCkgcmVwcmVzZW50cyBhbiBJUkkgaW4gdGhlIE4zIGxpYnJhcnlcbiAgaXNJUkk6IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eSlcbiAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgdmFyIGZpcnN0Q2hhciA9IGVudGl0eVswXTtcbiAgICByZXR1cm4gZmlyc3RDaGFyICE9PSAnXCInICYmIGZpcnN0Q2hhciAhPT0gJ18nO1xuICB9LFxuXG4gIC8vIFRlc3RzIHdoZXRoZXIgdGhlIGdpdmVuIGVudGl0eSAodHJpcGxlIG9iamVjdCkgcmVwcmVzZW50cyBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgaXNMaXRlcmFsOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIGVudGl0eSAmJiBlbnRpdHlbMF0gPT09ICdcIic7XG4gIH0sXG5cbiAgLy8gVGVzdHMgd2hldGhlciB0aGUgZ2l2ZW4gZW50aXR5ICh0cmlwbGUgb2JqZWN0KSByZXByZXNlbnRzIGEgYmxhbmsgbm9kZSBpbiB0aGUgTjMgbGlicmFyeVxuICBpc0JsYW5rOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIGVudGl0eSAmJiBlbnRpdHkuc3Vic3RyKDAsIDIpID09PSAnXzonO1xuICB9LFxuXG4gIC8vIEdldHMgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgZ2V0TGl0ZXJhbFZhbHVlOiBmdW5jdGlvbiAobGl0ZXJhbCkge1xuICAgIHZhciBtYXRjaCA9IC9eXCIoW15dKilcIi8uZXhlYyhsaXRlcmFsKTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGxpdGVyYWwgKyAnIGlzIG5vdCBhIGxpdGVyYWwnKTtcbiAgICByZXR1cm4gbWF0Y2hbMV07XG4gIH0sXG5cbiAgLy8gR2V0cyB0aGUgdHlwZSBvZiBhIGxpdGVyYWwgaW4gdGhlIE4zIGxpYnJhcnlcbiAgZ2V0TGl0ZXJhbFR5cGU6IGZ1bmN0aW9uIChsaXRlcmFsKSB7XG4gICAgdmFyIG1hdGNoID0gL15cIlteXSpcIig/OlxcXlxcXihbXlwiXSspfChAKVteQFwiXSspPyQvLmV4ZWMobGl0ZXJhbCk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHRocm93IG5ldyBFcnJvcihsaXRlcmFsICsgJyBpcyBub3QgYSBsaXRlcmFsJyk7XG4gICAgcmV0dXJuIG1hdGNoWzFdIHx8IChtYXRjaFsyXSA/IFJkZkxhbmdTdHJpbmcgOiBYc2RTdHJpbmcpO1xuICB9LFxuXG4gIC8vIEdldHMgdGhlIGxhbmd1YWdlIG9mIGEgbGl0ZXJhbCBpbiB0aGUgTjMgbGlicmFyeVxuICBnZXRMaXRlcmFsTGFuZ3VhZ2U6IGZ1bmN0aW9uIChsaXRlcmFsKSB7XG4gICAgdmFyIG1hdGNoID0gL15cIlteXSpcIig/OkAoW15AXCJdKyl8XFxeXFxeW15cIl0rKT8kLy5leGVjKGxpdGVyYWwpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobGl0ZXJhbCArICcgaXMgbm90IGEgbGl0ZXJhbCcpO1xuICAgIHJldHVybiBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgfSxcblxuICAvLyBUZXN0cyB3aGV0aGVyIHRoZSBnaXZlbiBlbnRpdHkgKHRyaXBsZSBvYmplY3QpIHJlcHJlc2VudHMgYSBwcmVmaXhlZCBuYW1lXG4gIGlzUHJlZml4ZWROYW1lOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIGVudGl0eSAmJiAvXlteOlxcL1wiJ10qOlteOlxcL1wiJ10rJC8udGVzdChlbnRpdHkpO1xuICB9LFxuXG4gIC8vIEV4cGFuZHMgdGhlIHByZWZpeGVkIG5hbWUgdG8gYSBmdWxsIElSSSAoYWxzbyB3aGVuIGl0IG9jY3VycyBhcyBhIGxpdGVyYWwncyB0eXBlKVxuICBleHBhbmRQcmVmaXhlZE5hbWU6IGZ1bmN0aW9uIChwcmVmaXhlZE5hbWUsIHByZWZpeGVzKSB7XG4gICAgdmFyIG1hdGNoID0gLyg/Ol58XCJcXF5cXF4pKFteOlxcLyNcIidcXF5fXSopOlteXFwvXSokLy5leGVjKHByZWZpeGVkTmFtZSksIHByZWZpeCwgYmFzZSwgaW5kZXg7XG4gICAgaWYgKG1hdGNoKVxuICAgICAgcHJlZml4ID0gbWF0Y2hbMV0sIGJhc2UgPSBwcmVmaXhlc1twcmVmaXhdLCBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIGlmIChiYXNlID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gcHJlZml4ZWROYW1lO1xuXG4gICAgLy8gVGhlIG1hdGNoIGluZGV4IGlzIG5vbi16ZXJvIHdoZW4gZXhwYW5kaW5nIGEgbGl0ZXJhbCdzIHR5cGUuXG4gICAgcmV0dXJuIGluZGV4ID09PSAwID8gYmFzZSArIHByZWZpeGVkTmFtZS5zdWJzdHIocHJlZml4Lmxlbmd0aCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgIDogcHJlZml4ZWROYW1lLnN1YnN0cigwLCBpbmRleCArIDMpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlICsgcHJlZml4ZWROYW1lLnN1YnN0cihpbmRleCArIHByZWZpeC5sZW5ndGggKyA0KTtcbiAgfSxcblxuICAvLyBDcmVhdGVzIGFuIElSSSBpbiBOMy5qcyByZXByZXNlbnRhdGlvblxuICBjcmVhdGVJUkk6IGZ1bmN0aW9uIChpcmkpIHtcbiAgICByZXR1cm4gaXJpICYmIGlyaVswXSA9PT0gJ1wiJyA/IE4zVXRpbC5nZXRMaXRlcmFsVmFsdWUoaXJpKSA6IGlyaTtcbiAgfSxcblxuICAvLyBDcmVhdGVzIGEgbGl0ZXJhbCBpbiBOMy5qcyByZXByZXNlbnRhdGlvblxuICBjcmVhdGVMaXRlcmFsOiBmdW5jdGlvbiAodmFsdWUsIG1vZGlmaWVyKSB7XG4gICAgaWYgKCFtb2RpZmllcikge1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBtb2RpZmllciA9IFhzZEJvb2xlYW47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaWYgKGlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgIG1vZGlmaWVyID0gdmFsdWUgJSAxID09PSAwID8gWHNkSW50ZWdlciA6IFhzZERlY2ltYWw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnXCInICsgdmFsdWUgKyAnXCInO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ1wiJyArIHZhbHVlICtcbiAgICAgICAgICAgKC9eW2Etel0rKC1bYS16MC05XSspKiQvaS50ZXN0KG1vZGlmaWVyKSA/ICdcIkAnICArIG1vZGlmaWVyLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdcIl5eJyArIG1vZGlmaWVyKTtcbiAgfSxcbn07XG5cbi8vIEFkZCB0aGUgTjNVdGlsIGZ1bmN0aW9ucyB0byB0aGUgZ2l2ZW4gb2JqZWN0IG9yIGl0cyBwcm90b3R5cGVcbmZ1bmN0aW9uIGFkZE4zVXRpbChwYXJlbnQsIHRvUHJvdG90eXBlKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gTjNVdGlsKVxuICAgIGlmICghdG9Qcm90b3R5cGUpXG4gICAgICBwYXJlbnRbbmFtZV0gPSBOM1V0aWxbbmFtZV07XG4gICAgZWxzZVxuICAgICAgcGFyZW50LnByb3RvdHlwZVtuYW1lXSA9IGFwcGx5VG9UaGlzKE4zVXRpbFtuYW1lXSk7XG5cbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYXBwbGllcyBgZmAgdG8gdGhlIGB0aGlzYCBvYmplY3RcbmZ1bmN0aW9uIGFwcGx5VG9UaGlzKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7IHJldHVybiBmKHRoaXMsIGEpOyB9O1xufVxuXG4vLyBFeHBvc2UgTjNVdGlsLCBhdHRhY2hpbmcgYWxsIGZ1bmN0aW9ucyB0byBpdFxubW9kdWxlLmV4cG9ydHMgPSBhZGROM1V0aWwoYWRkTjNVdGlsKTtcbiIsIi8vICoqTjNXcml0ZXIqKiB3cml0ZXMgTjMgZG9jdW1lbnRzLlxuXG4vLyBNYXRjaGVzIGEgbGl0ZXJhbCBhcyByZXByZXNlbnRlZCBpbiBtZW1vcnkgYnkgdGhlIE4zIGxpYnJhcnlcbnZhciBOM0xpdGVyYWxNYXRjaGVyID0gL15cIihbXl0qKVwiKD86XFxeXFxeKC4rKXxAKFtcXC1hLXpdKykpPyQvaTtcblxuLy8gcmRmOnR5cGUgcHJlZGljYXRlIChmb3IgJ2EnIGFiYnJldmlhdGlvbilcbnZhciBSREZfUFJFRklYID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMnLFxuICAgIFJERl9UWVBFICAgPSBSREZfUFJFRklYICsgJ3R5cGUnO1xuXG4vLyBDaGFyYWN0ZXJzIGluIGxpdGVyYWxzIHRoYXQgcmVxdWlyZSBlc2NhcGluZ1xudmFyIGVzY2FwZSAgICA9IC9bXCJcXFxcXFx0XFxuXFxyXFxiXFxmXFx1MDAwMC1cXHUwMDE5XFx1ZDgwMC1cXHVkYmZmXS8sXG4gICAgZXNjYXBlQWxsID0gL1tcIlxcXFxcXHRcXG5cXHJcXGJcXGZcXHUwMDAwLVxcdTAwMTldfFtcXHVkODAwLVxcdWRiZmZdW1xcdWRjMDAtXFx1ZGZmZl0vZyxcbiAgICBlc2NhcGVSZXBsYWNlbWVudHMgPSB7ICdcXFxcJzogJ1xcXFxcXFxcJywgJ1wiJzogJ1xcXFxcIicsICdcXHQnOiAnXFxcXHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbic6ICdcXFxcbicsICdcXHInOiAnXFxcXHInLCAnXFxiJzogJ1xcXFxiJywgJ1xcZic6ICdcXFxcZicgfTtcblxuLy8gIyMgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIE4zV3JpdGVyKG91dHB1dFN0cmVhbSwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTjNXcml0ZXIpKVxuICAgIHJldHVybiBuZXcgTjNXcml0ZXIob3V0cHV0U3RyZWFtLCBvcHRpb25zKTtcblxuICAvLyBTaGlmdCBhcmd1bWVudHMgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIHN0cmVhbVxuICBpZiAob3V0cHV0U3RyZWFtICYmIHR5cGVvZiBvdXRwdXRTdHJlYW0ud3JpdGUgIT09ICdmdW5jdGlvbicpXG4gICAgb3B0aW9ucyA9IG91dHB1dFN0cmVhbSwgb3V0cHV0U3RyZWFtID0gbnVsbDtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gSWYgbm8gb3V0cHV0IHN0cmVhbSBnaXZlbiwgc2VuZCB0aGUgb3V0cHV0IGFzIHN0cmluZyB0aHJvdWdoIHRoZSBlbmQgY2FsbGJhY2tcbiAgaWYgKCFvdXRwdXRTdHJlYW0pIHtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgdGhpcy5fb3V0cHV0U3RyZWFtID0ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHsgb3V0cHV0ICs9IGNodW5rOyBkb25lICYmIGRvbmUoKTsgfSxcbiAgICAgIGVuZDogICBmdW5jdGlvbiAoZG9uZSkgeyBkb25lICYmIGRvbmUobnVsbCwgb3V0cHV0KTsgfSxcbiAgICB9O1xuICAgIHRoaXMuX2VuZFN0cmVhbSA9IHRydWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fb3V0cHV0U3RyZWFtID0gb3V0cHV0U3RyZWFtO1xuICAgIHRoaXMuX2VuZFN0cmVhbSA9IG9wdGlvbnMuZW5kID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRpb25zLmVuZDtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemUgd3JpdGVyLCBkZXBlbmRpbmcgb24gdGhlIGZvcm1hdFxuICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgaWYgKCEoL3RyaXBsZXxxdWFkL2kpLnRlc3Qob3B0aW9ucy5mb3JtYXQpKSB7XG4gICAgdGhpcy5fZ3JhcGggPSAnJztcbiAgICB0aGlzLl9wcmVmaXhJUklzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBvcHRpb25zLnByZWZpeGVzICYmIHRoaXMuYWRkUHJlZml4ZXMob3B0aW9ucy5wcmVmaXhlcyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fd3JpdGVUcmlwbGUgPSB0aGlzLl93cml0ZVRyaXBsZUxpbmU7XG4gIH1cbn1cblxuTjNXcml0ZXIucHJvdG90eXBlID0ge1xuICAvLyAjIyBQcml2YXRlIG1ldGhvZHNcblxuICAvLyAjIyMgYF93cml0ZWAgd3JpdGVzIHRoZSBhcmd1bWVudCB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBfd3JpdGU6IGZ1bmN0aW9uIChzdHJpbmcsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb3V0cHV0U3RyZWFtLndyaXRlKHN0cmluZywgJ3V0ZjgnLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgICAvLyAjIyMgYF93cml0ZVRyaXBsZWAgd3JpdGVzIHRoZSB0cmlwbGUgdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgX3dyaXRlVHJpcGxlOiBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoLCBkb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdyaXRlIHRoZSBncmFwaCdzIGxhYmVsIGlmIGl0IGhhcyBjaGFuZ2VkXG4gICAgICBpZiAodGhpcy5fZ3JhcGggIT09IGdyYXBoKSB7XG4gICAgICAgIC8vIENsb3NlIHRoZSBwcmV2aW91cyBncmFwaCBhbmQgc3RhcnQgdGhlIG5ldyBvbmVcbiAgICAgICAgdGhpcy5fd3JpdGUoKHRoaXMuX3N1YmplY3QgPT09IG51bGwgPyAnJyA6ICh0aGlzLl9ncmFwaCA/ICdcXG59XFxuJyA6ICcuXFxuJykpICtcbiAgICAgICAgICAgICAgICAgICAgKGdyYXBoID8gdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUoZ3JhcGgpICsgJyB7XFxuJyA6ICcnKSk7XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgICAvLyBEb24ndCB0cmVhdCBpZGVudGljYWwgYmxhbmsgbm9kZXMgYXMgcmVwZWF0aW5nIGdyYXBoc1xuICAgICAgICB0aGlzLl9ncmFwaCA9IGdyYXBoWzBdICE9PSAnWycgPyBncmFwaCA6ICddJztcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHJlcGVhdCB0aGUgc3ViamVjdCBpZiBpdCdzIHRoZSBzYW1lXG4gICAgICBpZiAodGhpcy5fc3ViamVjdCA9PT0gc3ViamVjdCkge1xuICAgICAgICAvLyBEb24ndCByZXBlYXQgdGhlIHByZWRpY2F0ZSBpZiBpdCdzIHRoZSBzYW1lXG4gICAgICAgIGlmICh0aGlzLl9wcmVkaWNhdGUgPT09IHByZWRpY2F0ZSlcbiAgICAgICAgICB0aGlzLl93cml0ZSgnLCAnICsgdGhpcy5fZW5jb2RlT2JqZWN0KG9iamVjdCksIGRvbmUpO1xuICAgICAgICAvLyBTYW1lIHN1YmplY3QsIGRpZmZlcmVudCBwcmVkaWNhdGVcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX3dyaXRlKCc7XFxuICAgICcgK1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZVByZWRpY2F0ZSh0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSwgZG9uZSk7XG4gICAgICB9XG4gICAgICAvLyBEaWZmZXJlbnQgc3ViamVjdDsgd3JpdGUgdGhlIHdob2xlIHRyaXBsZVxuICAgICAgZWxzZVxuICAgICAgICB0aGlzLl93cml0ZSgodGhpcy5fc3ViamVjdCA9PT0gbnVsbCA/ICcnIDogJy5cXG4nKSArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZVN1YmplY3QodGhpcy5fc3ViamVjdCA9IHN1YmplY3QpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlUHJlZGljYXRlKHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZSkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSwgZG9uZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBkb25lICYmIGRvbmUoZXJyb3IpOyB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfd3JpdGVUcmlwbGVMaW5lYCB3cml0ZXMgdGhlIHRyaXBsZSBvciBxdWFkIHRvIHRoZSBvdXRwdXQgc3RyZWFtIGFzIGEgc2luZ2xlIGxpbmVcbiAgX3dyaXRlVHJpcGxlTGluZTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCwgZG9uZSkge1xuICAgIC8vIERvbid0IHVzZSBwcmVmaXhlc1xuICAgIGRlbGV0ZSB0aGlzLl9wcmVmaXhNYXRjaDtcbiAgICAvLyBXcml0ZSB0aGUgdHJpcGxlXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX3dyaXRlKHRoaXMuX2VuY29kZUlyaU9yQmxhbmtOb2RlKHN1YmplY3QpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZUlyaU9yQmxhbmtOb2RlKHByZWRpY2F0ZSkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlT2JqZWN0KG9iamVjdCkgK1xuICAgICAgICAgICAgICAgICAgKGdyYXBoID8gJyAnICsgdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUoZ3JhcGgpICsgJy5cXG4nIDogJy5cXG4nKSwgZG9uZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBkb25lICYmIGRvbmUoZXJyb3IpOyB9XG4gIH0sXG5cbiAgLy8gIyMjIGBfZW5jb2RlSXJpT3JCbGFua05vZGVgIHJlcHJlc2VudHMgYW4gSVJJIG9yIGJsYW5rIG5vZGVcbiAgX2VuY29kZUlyaU9yQmxhbmtOb2RlOiBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgLy8gQSBibGFuayBub2RlIG9yIGxpc3QgaXMgcmVwcmVzZW50ZWQgYXMtaXNcbiAgICB2YXIgZmlyc3RDaGFyID0gZW50aXR5WzBdO1xuICAgIGlmIChmaXJzdENoYXIgPT09ICdbJyB8fCBmaXJzdENoYXIgPT09ICcoJyB8fCBmaXJzdENoYXIgPT09ICdfJyAmJiBlbnRpdHlbMV0gPT09ICc6JylcbiAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgLy8gRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgIGlmIChlc2NhcGUudGVzdChlbnRpdHkpKVxuICAgICAgZW50aXR5ID0gZW50aXR5LnJlcGxhY2UoZXNjYXBlQWxsLCBjaGFyYWN0ZXJSZXBsYWNlcik7XG4gICAgLy8gVHJ5IHRvIHJlcHJlc2VudCB0aGUgSVJJIGFzIHByZWZpeGVkIG5hbWVcbiAgICB2YXIgcHJlZml4TWF0Y2ggPSB0aGlzLl9wcmVmaXhSZWdleC5leGVjKGVudGl0eSk7XG4gICAgcmV0dXJuICFwcmVmaXhNYXRjaCA/ICc8JyArIGVudGl0eSArICc+JyA6XG4gICAgICAgICAgICghcHJlZml4TWF0Y2hbMV0gPyBlbnRpdHkgOiB0aGlzLl9wcmVmaXhJUklzW3ByZWZpeE1hdGNoWzFdXSArIHByZWZpeE1hdGNoWzJdKTtcbiAgfSxcblxuICAvLyAjIyMgYF9lbmNvZGVMaXRlcmFsYCByZXByZXNlbnRzIGEgbGl0ZXJhbFxuICBfZW5jb2RlTGl0ZXJhbDogZnVuY3Rpb24gKHZhbHVlLCB0eXBlLCBsYW5ndWFnZSkge1xuICAgIC8vIEVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICBpZiAoZXNjYXBlLnRlc3QodmFsdWUpKVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKGVzY2FwZUFsbCwgY2hhcmFjdGVyUmVwbGFjZXIpO1xuICAgIC8vIFdyaXRlIHRoZSBsaXRlcmFsLCBwb3NzaWJseSB3aXRoIHR5cGUgb3IgbGFuZ3VhZ2VcbiAgICBpZiAobGFuZ3VhZ2UpXG4gICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiQCcgKyBsYW5ndWFnZTtcbiAgICBlbHNlIGlmICh0eXBlKVxuICAgICAgcmV0dXJuICdcIicgKyB2YWx1ZSArICdcIl5eJyArIHRoaXMuX2VuY29kZUlyaU9yQmxhbmtOb2RlKHR5cGUpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAnXCInICsgdmFsdWUgKyAnXCInO1xuICB9LFxuXG4gIC8vICMjIyBgX2VuY29kZVN1YmplY3RgIHJlcHJlc2VudHMgYSBzdWJqZWN0XG4gIF9lbmNvZGVTdWJqZWN0OiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIGlmIChzdWJqZWN0WzBdID09PSAnXCInKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGxpdGVyYWwgYXMgc3ViamVjdCBpcyBub3QgYWxsb3dlZDogJyArIHN1YmplY3QpO1xuICAgIC8vIERvbid0IHRyZWF0IGlkZW50aWNhbCBibGFuayBub2RlcyBhcyByZXBlYXRpbmcgc3ViamVjdHNcbiAgICBpZiAoc3ViamVjdFswXSA9PT0gJ1snKVxuICAgICAgdGhpcy5fc3ViamVjdCA9ICddJztcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUoc3ViamVjdCk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfZW5jb2RlUHJlZGljYXRlYCByZXByZXNlbnRzIGEgcHJlZGljYXRlXG4gIF9lbmNvZGVQcmVkaWNhdGU6IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICBpZiAocHJlZGljYXRlWzBdID09PSAnXCInKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGxpdGVyYWwgYXMgcHJlZGljYXRlIGlzIG5vdCBhbGxvd2VkOiAnICsgcHJlZGljYXRlKTtcbiAgICByZXR1cm4gcHJlZGljYXRlID09PSBSREZfVFlQRSA/ICdhJyA6IHRoaXMuX2VuY29kZUlyaU9yQmxhbmtOb2RlKHByZWRpY2F0ZSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfZW5jb2RlT2JqZWN0YCByZXByZXNlbnRzIGFuIG9iamVjdFxuICBfZW5jb2RlT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgLy8gUmVwcmVzZW50IGFuIElSSSBvciBibGFuayBub2RlXG4gICAgaWYgKG9iamVjdFswXSAhPT0gJ1wiJylcbiAgICAgIHJldHVybiB0aGlzLl9lbmNvZGVJcmlPckJsYW5rTm9kZShvYmplY3QpO1xuICAgIC8vIFJlcHJlc2VudCBhIGxpdGVyYWxcbiAgICB2YXIgbWF0Y2ggPSBOM0xpdGVyYWxNYXRjaGVyLmV4ZWMob2JqZWN0KTtcbiAgICBpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGl0ZXJhbDogJyArIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUxpdGVyYWwobWF0Y2hbMV0sIG1hdGNoWzJdLCBtYXRjaFszXSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBfYmxvY2tlZFdyaXRlYCByZXBsYWNlcyBgX3dyaXRlYCBhZnRlciB0aGUgd3JpdGVyIGhhcyBiZWVuIGNsb3NlZFxuICBfYmxvY2tlZFdyaXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgd3JpdGUgYmVjYXVzZSB0aGUgd3JpdGVyIGhhcyBiZWVuIGNsb3NlZC4nKTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFRyaXBsZWAgYWRkcyB0aGUgdHJpcGxlIHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFRyaXBsZTogZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCwgZG9uZSkge1xuICAgIC8vIFRoZSB0cmlwbGUgd2FzIGdpdmVuIGFzIGEgdHJpcGxlIG9iamVjdCwgc28gc2hpZnQgcGFyYW1ldGVyc1xuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZClcbiAgICAgIHRoaXMuX3dyaXRlVHJpcGxlKHN1YmplY3Quc3ViamVjdCwgc3ViamVjdC5wcmVkaWNhdGUsIHN1YmplY3Qub2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5ncmFwaCB8fCAnJywgcHJlZGljYXRlKTtcbiAgICAvLyBUaGUgb3B0aW9uYWwgYGdyYXBoYCBwYXJhbWV0ZXIgd2FzIG5vdCBwcm92aWRlZFxuICAgIGVsc2UgaWYgKHR5cGVvZiBncmFwaCAhPT0gJ3N0cmluZycpXG4gICAgICB0aGlzLl93cml0ZVRyaXBsZShzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgJycsIGdyYXBoKTtcbiAgICAvLyBUaGUgYGdyYXBoYCBwYXJhbWV0ZXIgd2FzIHByb3ZpZGVkXG4gICAgZWxzZVxuICAgICAgdGhpcy5fd3JpdGVUcmlwbGUoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoLCBkb25lKTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFRyaXBsZXNgIGFkZHMgdGhlIHRyaXBsZXMgdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgYWRkVHJpcGxlczogZnVuY3Rpb24gKHRyaXBsZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaXBsZXMubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLmFkZFRyaXBsZSh0cmlwbGVzW2ldKTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFByZWZpeGAgYWRkcyB0aGUgcHJlZml4IHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFByZWZpeDogZnVuY3Rpb24gKHByZWZpeCwgaXJpLCBkb25lKSB7XG4gICAgdmFyIHByZWZpeGVzID0ge307XG4gICAgcHJlZml4ZXNbcHJlZml4XSA9IGlyaTtcbiAgICB0aGlzLmFkZFByZWZpeGVzKHByZWZpeGVzLCBkb25lKTtcbiAgfSxcblxuICAvLyAjIyMgYGFkZFByZWZpeGVzYCBhZGRzIHRoZSBwcmVmaXhlcyB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBhZGRQcmVmaXhlczogZnVuY3Rpb24gKHByZWZpeGVzLCBkb25lKSB7XG4gICAgLy8gQWRkIGFsbCB1c2VmdWwgcHJlZml4ZXNcbiAgICB2YXIgcHJlZml4SVJJcyA9IHRoaXMuX3ByZWZpeElSSXMsIGhhc1ByZWZpeGVzID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcHJlZml4IGluIHByZWZpeGVzKSB7XG4gICAgICAvLyBWZXJpZnkgd2hldGhlciB0aGUgcHJlZml4IGNhbiBiZSB1c2VkIGFuZCBkb2VzIG5vdCBleGlzdCB5ZXRcbiAgICAgIHZhciBpcmkgPSBwcmVmaXhlc1twcmVmaXhdO1xuICAgICAgaWYgKC9bI1xcL10kLy50ZXN0KGlyaSkgJiYgcHJlZml4SVJJc1tpcmldICE9PSAocHJlZml4ICs9ICc6JykpIHtcbiAgICAgICAgaGFzUHJlZml4ZXMgPSB0cnVlO1xuICAgICAgICBwcmVmaXhJUklzW2lyaV0gPSBwcmVmaXg7XG4gICAgICAgIC8vIEZpbmlzaCBhIHBvc3NpYmxlIHBlbmRpbmcgdHJpcGxlXG4gICAgICAgIGlmICh0aGlzLl9zdWJqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fd3JpdGUodGhpcy5fZ3JhcGggPyAnXFxufVxcbicgOiAnLlxcbicpO1xuICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsLCB0aGlzLl9ncmFwaCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdyaXRlIHByZWZpeFxuICAgICAgICB0aGlzLl93cml0ZSgnQHByZWZpeCAnICsgcHJlZml4ICsgJyA8JyArIGlyaSArICc+LlxcbicpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZWNyZWF0ZSB0aGUgcHJlZml4IG1hdGNoZXJcbiAgICBpZiAoaGFzUHJlZml4ZXMpIHtcbiAgICAgIHZhciBJUklsaXN0ID0gJycsIHByZWZpeExpc3QgPSAnJztcbiAgICAgIGZvciAodmFyIHByZWZpeElSSSBpbiBwcmVmaXhJUklzKSB7XG4gICAgICAgIElSSWxpc3QgKz0gSVJJbGlzdCA/ICd8JyArIHByZWZpeElSSSA6IHByZWZpeElSSTtcbiAgICAgICAgcHJlZml4TGlzdCArPSAocHJlZml4TGlzdCA/ICd8JyA6ICcnKSArIHByZWZpeElSSXNbcHJlZml4SVJJXTtcbiAgICAgIH1cbiAgICAgIElSSWxpc3QgPSBJUklsaXN0LnJlcGxhY2UoL1tcXF1cXC9cXChcXClcXCpcXCtcXD9cXC5cXFxcXFwkXS9nLCAnXFxcXCQmJyk7XG4gICAgICB0aGlzLl9wcmVmaXhSZWdleCA9IG5ldyBSZWdFeHAoJ14oPzonICsgcHJlZml4TGlzdCArICcpW15cXC9dKiR8JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ14oJyArIElSSWxpc3QgKyAnKShbYS16QS1aXVtcXFxcLV9hLXpBLVowLTldKikkJyk7XG4gICAgfVxuICAgIC8vIEVuZCBhIHByZWZpeCBibG9jayB3aXRoIGEgbmV3bGluZVxuICAgIHRoaXMuX3dyaXRlKGhhc1ByZWZpeGVzID8gJ1xcbicgOiAnJywgZG9uZSk7XG4gIH0sXG5cbiAgLy8gIyMjIGBibGFua2AgY3JlYXRlcyBhIGJsYW5rIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gY29udGVudFxuICBibGFuazogZnVuY3Rpb24gKHByZWRpY2F0ZSwgb2JqZWN0KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcHJlZGljYXRlLCBjaGlsZCwgbGVuZ3RoO1xuICAgIC8vIEVtcHR5IGJsYW5rIG5vZGVcbiAgICBpZiAocHJlZGljYXRlID09PSB1bmRlZmluZWQpXG4gICAgICBjaGlsZHJlbiA9IFtdO1xuICAgIC8vIEJsYW5rIG5vZGUgcGFzc2VkIGFzIGJsYW5rKFwicHJlZGljYXRlXCIsIFwib2JqZWN0XCIpXG4gICAgZWxzZSBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gJ3N0cmluZycpXG4gICAgICBjaGlsZHJlbiA9IFt7IHByZWRpY2F0ZTogcHJlZGljYXRlLCBvYmplY3Q6IG9iamVjdCB9XTtcbiAgICAvLyBCbGFuayBub2RlIHBhc3NlZCBhcyBibGFuayh7IHByZWRpY2F0ZTogcHJlZGljYXRlLCBvYmplY3Q6IG9iamVjdCB9KVxuICAgIGVsc2UgaWYgKCEoJ2xlbmd0aCcgaW4gcHJlZGljYXRlKSlcbiAgICAgIGNoaWxkcmVuID0gW3ByZWRpY2F0ZV07XG5cbiAgICBzd2l0Y2ggKGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIC8vIEdlbmVyYXRlIGFuIGVtcHR5IGJsYW5rIG5vZGVcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gJ1tdJztcbiAgICAvLyBHZW5lcmF0ZSBhIG5vbi1uZXN0ZWQgb25lLXRyaXBsZSBibGFuayBub2RlXG4gICAgY2FzZSAxOlxuICAgICAgY2hpbGQgPSBjaGlsZHJlblswXTtcbiAgICAgIGlmIChjaGlsZC5vYmplY3RbMF0gIT09ICdbJylcbiAgICAgICAgcmV0dXJuICdbICcgKyB0aGlzLl9lbmNvZGVQcmVkaWNhdGUoY2hpbGQucHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlT2JqZWN0KGNoaWxkLm9iamVjdCkgKyAnIF0nO1xuICAgIC8vIEdlbmVyYXRlIGEgbXVsdGktdHJpcGxlIG9yIG5lc3RlZCBibGFuayBub2RlXG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBjb250ZW50cyA9ICdbJztcbiAgICAgIC8vIFdyaXRlIGFsbCB0cmlwbGVzIGluIG9yZGVyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIC8vIFdyaXRlIG9ubHkgdGhlIG9iamVjdCBpcyB0aGUgcHJlZGljYXRlIGlzIHRoZSBzYW1lIGFzIHRoZSBwcmV2aW91c1xuICAgICAgICBpZiAoY2hpbGQucHJlZGljYXRlID09PSBwcmVkaWNhdGUpXG4gICAgICAgICAgY29udGVudHMgKz0gJywgJyArIHRoaXMuX2VuY29kZU9iamVjdChjaGlsZC5vYmplY3QpO1xuICAgICAgICAvLyBPdGhlcndpc2UsIHdyaXRlIHRoZSBwcmVkaWNhdGUgYW5kIHRoZSBvYmplY3RcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGVudHMgKz0gKGkgPyAnO1xcbiAgJyA6ICdcXG4gICcpICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVQcmVkaWNhdGUoY2hpbGQucHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlT2JqZWN0KGNoaWxkLm9iamVjdCk7XG4gICAgICAgICAgcHJlZGljYXRlID0gY2hpbGQucHJlZGljYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudHMgKyAnXFxuXSc7XG4gICAgfVxuICB9LFxuXG4gIC8vICMjIyBgbGlzdGAgY3JlYXRlcyBhIGxpc3Qgbm9kZSB3aXRoIHRoZSBnaXZlbiBjb250ZW50XG4gIGxpc3Q6IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHZhciBsZW5ndGggPSBlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggfHwgMCwgY29udGVudHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgY29udGVudHNbaV0gPSB0aGlzLl9lbmNvZGVPYmplY3QoZWxlbWVudHNbaV0pO1xuICAgIHJldHVybiAnKCcgKyBjb250ZW50cy5qb2luKCcgJykgKyAnKSc7XG4gIH0sXG5cbiAgLy8gIyMjIGBfcHJlZml4UmVnZXhgIG1hdGNoZXMgYSBwcmVmaXhlZCBuYW1lIG9yIElSSSB0aGF0IGJlZ2lucyB3aXRoIG9uZSBvZiB0aGUgYWRkZWQgcHJlZml4ZXNcbiAgX3ByZWZpeFJlZ2V4OiAvJDBeLyxcblxuICAvLyAjIyMgYGVuZGAgc2lnbmFscyB0aGUgZW5kIG9mIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGVuZDogZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAvLyBGaW5pc2ggYSBwb3NzaWJsZSBwZW5kaW5nIHRyaXBsZVxuICAgIGlmICh0aGlzLl9zdWJqZWN0ICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl93cml0ZSh0aGlzLl9ncmFwaCA/ICdcXG59XFxuJyA6ICcuXFxuJyk7XG4gICAgICB0aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICB9XG4gICAgLy8gRGlzYWxsb3cgZnVydGhlciB3cml0aW5nXG4gICAgdGhpcy5fd3JpdGUgPSB0aGlzLl9ibG9ja2VkV3JpdGU7XG5cbiAgICAvLyBUcnkgdG8gZW5kIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSwgZW5zdXJpbmcgZG9uZSBpcyBjYWxsZWQgZXhhY3RseSBvbmUgdGltZVxuICAgIHZhciBzaW5nbGVEb25lID0gZG9uZSAmJiBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkgeyBzaW5nbGVEb25lID0gbnVsbCwgZG9uZShlcnJvciwgcmVzdWx0KTsgfTtcbiAgICBpZiAodGhpcy5fZW5kU3RyZWFtKSB7XG4gICAgICB0cnkgeyByZXR1cm4gdGhpcy5fb3V0cHV0U3RyZWFtLmVuZChzaW5nbGVEb25lKTsgfVxuICAgICAgY2F0Y2ggKGVycm9yKSB7IC8qIGVycm9yIGNsb3Npbmcgc3RyZWFtICovIH1cbiAgICB9XG4gICAgc2luZ2xlRG9uZSAmJiBzaW5nbGVEb25lKCk7XG4gIH0sXG59O1xuXG4vLyBSZXBsYWNlcyBhIGNoYXJhY3RlciBieSBpdHMgZXNjYXBlZCB2ZXJzaW9uXG5mdW5jdGlvbiBjaGFyYWN0ZXJSZXBsYWNlcihjaGFyYWN0ZXIpIHtcbiAgLy8gUmVwbGFjZSBhIHNpbmdsZSBjaGFyYWN0ZXIgYnkgaXRzIGVzY2FwZWQgdmVyc2lvblxuICB2YXIgcmVzdWx0ID0gZXNjYXBlUmVwbGFjZW1lbnRzW2NoYXJhY3Rlcl07XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFJlcGxhY2UgYSBzaW5nbGUgY2hhcmFjdGVyIHdpdGggaXRzIDQtYml0IHVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlXG4gICAgaWYgKGNoYXJhY3Rlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJlc3VsdCA9IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJlc3VsdCA9ICdcXFxcdTAwMDAnLnN1YnN0cigwLCA2IC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFJlcGxhY2UgYSBzdXJyb2dhdGUgcGFpciB3aXRoIGl0cyA4LWJpdCB1bmljb2RlIGVzY2FwZSBzZXF1ZW5jZVxuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0ID0gKChjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSAtIDB4RDgwMCkgKiAweDQwMCArXG4gICAgICAgICAgICAgICAgIGNoYXJhY3Rlci5jaGFyQ29kZUF0KDEpICsgMHgyNDAwKS50b1N0cmluZygxNik7XG4gICAgICByZXN1bHQgPSAnXFxcXFUwMDAwMDAwMCcuc3Vic3RyKDAsIDEwIC0gcmVzdWx0Lmxlbmd0aCkgKyByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vICMjIEV4cG9ydHNcblxuLy8gRXhwb3J0IHRoZSBgTjNXcml0ZXJgIGNsYXNzIGFzIGEgd2hvbGUuXG5tb2R1bGUuZXhwb3J0cyA9IE4zV3JpdGVyO1xuIiwiZnVuY3Rpb24gRE9NUGFyc2VyKG9wdGlvbnMpe1xyXG5cdHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHx7bG9jYXRvcjp7fX07XHJcblx0XHJcbn1cclxuRE9NUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZyb21TdHJpbmcgPSBmdW5jdGlvbihzb3VyY2UsbWltZVR5cGUpe1xyXG5cdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG5cdHZhciBzYXggPSAgbmV3IFhNTFJlYWRlcigpO1xyXG5cdHZhciBkb21CdWlsZGVyID0gb3B0aW9ucy5kb21CdWlsZGVyIHx8IG5ldyBET01IYW5kbGVyKCk7Ly9jb250ZW50SGFuZGxlciBhbmQgTGV4aWNhbEhhbmRsZXJcclxuXHR2YXIgZXJyb3JIYW5kbGVyID0gb3B0aW9ucy5lcnJvckhhbmRsZXI7XHJcblx0dmFyIGxvY2F0b3IgPSBvcHRpb25zLmxvY2F0b3I7XHJcblx0dmFyIGRlZmF1bHROU01hcCA9IG9wdGlvbnMueG1sbnN8fHt9O1xyXG5cdHZhciBpc0hUTUwgPSAvXFwveD9odG1sPyQvLnRlc3QobWltZVR5cGUpOy8vbWltZVR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdodG1sJykgPiAtMTtcclxuICBcdHZhciBlbnRpdHlNYXAgPSBpc0hUTUw/cmVxdWlyZSgnLi9lbnRpdGllcycpLmVudGl0eU1hcDp7J2x0JzonPCcsJ2d0JzonPicsJ2FtcCc6JyYnLCdxdW90JzonXCInLCdhcG9zJzpcIidcIn07XHJcblx0aWYobG9jYXRvcil7XHJcblx0XHRkb21CdWlsZGVyLnNldERvY3VtZW50TG9jYXRvcihsb2NhdG9yKVxyXG5cdH1cclxuXHRcclxuXHRzYXguZXJyb3JIYW5kbGVyID0gYnVpbGRFcnJvckhhbmRsZXIoZXJyb3JIYW5kbGVyLGRvbUJ1aWxkZXIsbG9jYXRvcik7XHJcblx0c2F4LmRvbUJ1aWxkZXIgPSBvcHRpb25zLmRvbUJ1aWxkZXIgfHwgZG9tQnVpbGRlcjtcclxuXHRpZihpc0hUTUwpe1xyXG5cdFx0ZGVmYXVsdE5TTWFwWycnXT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xyXG5cdH1cclxuXHRkZWZhdWx0TlNNYXAueG1sID0gZGVmYXVsdE5TTWFwLnhtbCB8fCAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcclxuXHRpZihzb3VyY2Upe1xyXG5cdFx0c2F4LnBhcnNlKHNvdXJjZSxkZWZhdWx0TlNNYXAsZW50aXR5TWFwKTtcclxuXHR9ZWxzZXtcclxuXHRcdHNheC5lcnJvckhhbmRsZXIuZXJyb3IoXCJpbnZhbGlkIGRvYyBzb3VyY2VcIik7XHJcblx0fVxyXG5cdHJldHVybiBkb21CdWlsZGVyLmRvYztcclxufVxyXG5mdW5jdGlvbiBidWlsZEVycm9ySGFuZGxlcihlcnJvckltcGwsZG9tQnVpbGRlcixsb2NhdG9yKXtcclxuXHRpZighZXJyb3JJbXBsKXtcclxuXHRcdGlmKGRvbUJ1aWxkZXIgaW5zdGFuY2VvZiBET01IYW5kbGVyKXtcclxuXHRcdFx0cmV0dXJuIGRvbUJ1aWxkZXI7XHJcblx0XHR9XHJcblx0XHRlcnJvckltcGwgPSBkb21CdWlsZGVyIDtcclxuXHR9XHJcblx0dmFyIGVycm9ySGFuZGxlciA9IHt9XHJcblx0dmFyIGlzQ2FsbGJhY2sgPSBlcnJvckltcGwgaW5zdGFuY2VvZiBGdW5jdGlvbjtcclxuXHRsb2NhdG9yID0gbG9jYXRvcnx8e31cclxuXHRmdW5jdGlvbiBidWlsZChrZXkpe1xyXG5cdFx0dmFyIGZuID0gZXJyb3JJbXBsW2tleV07XHJcblx0XHRpZighZm4gJiYgaXNDYWxsYmFjayl7XHJcblx0XHRcdGZuID0gZXJyb3JJbXBsLmxlbmd0aCA9PSAyP2Z1bmN0aW9uKG1zZyl7ZXJyb3JJbXBsKGtleSxtc2cpfTplcnJvckltcGw7XHJcblx0XHR9XHJcblx0XHRlcnJvckhhbmRsZXJba2V5XSA9IGZuICYmIGZ1bmN0aW9uKG1zZyl7XHJcblx0XHRcdGZuKCdbeG1sZG9tICcra2V5KyddXFx0Jyttc2crX2xvY2F0b3IobG9jYXRvcikpO1xyXG5cdFx0fXx8ZnVuY3Rpb24oKXt9O1xyXG5cdH1cclxuXHRidWlsZCgnd2FybmluZycpO1xyXG5cdGJ1aWxkKCdlcnJvcicpO1xyXG5cdGJ1aWxkKCdmYXRhbEVycm9yJyk7XHJcblx0cmV0dXJuIGVycm9ySGFuZGxlcjtcclxufVxyXG5cclxuLy9jb25zb2xlLmxvZygnI1xcblxcblxcblxcblxcblxcblxcbiMjIyMnKVxyXG4vKipcclxuICogK0NvbnRlbnRIYW5kbGVyK0Vycm9ySGFuZGxlclxyXG4gKiArTGV4aWNhbEhhbmRsZXIrRW50aXR5UmVzb2x2ZXIyXHJcbiAqIC1EZWNsSGFuZGxlci1EVERIYW5kbGVyIFxyXG4gKiBcclxuICogRGVmYXVsdEhhbmRsZXI6RW50aXR5UmVzb2x2ZXIsIERUREhhbmRsZXIsIENvbnRlbnRIYW5kbGVyLCBFcnJvckhhbmRsZXJcclxuICogRGVmYXVsdEhhbmRsZXIyOkRlZmF1bHRIYW5kbGVyLExleGljYWxIYW5kbGVyLCBEZWNsSGFuZGxlciwgRW50aXR5UmVzb2x2ZXIyXHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L2hlbHBlcnMvRGVmYXVsdEhhbmRsZXIuaHRtbFxyXG4gKi9cclxuZnVuY3Rpb24gRE9NSGFuZGxlcigpIHtcclxuICAgIHRoaXMuY2RhdGEgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBwb3NpdGlvbihsb2NhdG9yLG5vZGUpe1xyXG5cdG5vZGUubGluZU51bWJlciA9IGxvY2F0b3IubGluZU51bWJlcjtcclxuXHRub2RlLmNvbHVtbk51bWJlciA9IGxvY2F0b3IuY29sdW1uTnVtYmVyO1xyXG59XHJcbi8qKlxyXG4gKiBAc2VlIG9yZy54bWwuc2F4LkNvbnRlbnRIYW5kbGVyI3N0YXJ0RG9jdW1lbnRcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvQ29udGVudEhhbmRsZXIuaHRtbFxyXG4gKi8gXHJcbkRPTUhhbmRsZXIucHJvdG90eXBlID0ge1xyXG5cdHN0YXJ0RG9jdW1lbnQgOiBmdW5jdGlvbigpIHtcclxuICAgIFx0dGhpcy5kb2MgPSBuZXcgRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudChudWxsLCBudWxsLCBudWxsKTtcclxuICAgIFx0aWYgKHRoaXMubG9jYXRvcikge1xyXG4gICAgICAgIFx0dGhpcy5kb2MuZG9jdW1lbnRVUkkgPSB0aGlzLmxvY2F0b3Iuc3lzdGVtSWQ7XHJcbiAgICBcdH1cclxuXHR9LFxyXG5cdHN0YXJ0RWxlbWVudDpmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSwgcU5hbWUsIGF0dHJzKSB7XHJcblx0XHR2YXIgZG9jID0gdGhpcy5kb2M7XHJcblx0ICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBxTmFtZXx8bG9jYWxOYW1lKTtcclxuXHQgICAgdmFyIGxlbiA9IGF0dHJzLmxlbmd0aDtcclxuXHQgICAgYXBwZW5kRWxlbWVudCh0aGlzLCBlbCk7XHJcblx0ICAgIHRoaXMuY3VycmVudEVsZW1lbnQgPSBlbDtcclxuXHQgICAgXHJcblx0XHR0aGlzLmxvY2F0b3IgJiYgcG9zaXRpb24odGhpcy5sb2NhdG9yLGVsKVxyXG5cdCAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgICAgdmFyIG5hbWVzcGFjZVVSSSA9IGF0dHJzLmdldFVSSShpKTtcclxuXHQgICAgICAgIHZhciB2YWx1ZSA9IGF0dHJzLmdldFZhbHVlKGkpO1xyXG5cdCAgICAgICAgdmFyIHFOYW1lID0gYXR0cnMuZ2V0UU5hbWUoaSk7XHJcblx0XHRcdHZhciBhdHRyID0gZG9jLmNyZWF0ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgcU5hbWUpO1xyXG5cdFx0XHR0aGlzLmxvY2F0b3IgJiZwb3NpdGlvbihhdHRycy5nZXRMb2NhdG9yKGkpLGF0dHIpO1xyXG5cdFx0XHRhdHRyLnZhbHVlID0gYXR0ci5ub2RlVmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0ZWwuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxyXG5cdCAgICB9XHJcblx0fSxcclxuXHRlbmRFbGVtZW50OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lLCBxTmFtZSkge1xyXG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnRFbGVtZW50XHJcblx0XHR2YXIgdGFnTmFtZSA9IGN1cnJlbnQudGFnTmFtZTtcclxuXHRcdHRoaXMuY3VycmVudEVsZW1lbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XHJcblx0fSxcclxuXHRzdGFydFByZWZpeE1hcHBpbmc6ZnVuY3Rpb24ocHJlZml4LCB1cmkpIHtcclxuXHR9LFxyXG5cdGVuZFByZWZpeE1hcHBpbmc6ZnVuY3Rpb24ocHJlZml4KSB7XHJcblx0fSxcclxuXHRwcm9jZXNzaW5nSW5zdHJ1Y3Rpb246ZnVuY3Rpb24odGFyZ2V0LCBkYXRhKSB7XHJcblx0ICAgIHZhciBpbnMgPSB0aGlzLmRvYy5jcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGFyZ2V0LCBkYXRhKTtcclxuXHQgICAgdGhpcy5sb2NhdG9yICYmIHBvc2l0aW9uKHRoaXMubG9jYXRvcixpbnMpXHJcblx0ICAgIGFwcGVuZEVsZW1lbnQodGhpcywgaW5zKTtcclxuXHR9LFxyXG5cdGlnbm9yYWJsZVdoaXRlc3BhY2U6ZnVuY3Rpb24oY2gsIHN0YXJ0LCBsZW5ndGgpIHtcclxuXHR9LFxyXG5cdGNoYXJhY3RlcnM6ZnVuY3Rpb24oY2hhcnMsIHN0YXJ0LCBsZW5ndGgpIHtcclxuXHRcdGNoYXJzID0gX3RvU3RyaW5nLmFwcGx5KHRoaXMsYXJndW1lbnRzKVxyXG5cdFx0Ly9jb25zb2xlLmxvZyhjaGFycylcclxuXHRcdGlmKGNoYXJzKXtcclxuXHRcdFx0aWYgKHRoaXMuY2RhdGEpIHtcclxuXHRcdFx0XHR2YXIgY2hhck5vZGUgPSB0aGlzLmRvYy5jcmVhdGVDREFUQVNlY3Rpb24oY2hhcnMpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBjaGFyTm9kZSA9IHRoaXMuZG9jLmNyZWF0ZVRleHROb2RlKGNoYXJzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0aGlzLmN1cnJlbnRFbGVtZW50KXtcclxuXHRcdFx0XHR0aGlzLmN1cnJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNoYXJOb2RlKTtcclxuXHRcdFx0fWVsc2UgaWYoL15cXHMqJC8udGVzdChjaGFycykpe1xyXG5cdFx0XHRcdHRoaXMuZG9jLmFwcGVuZENoaWxkKGNoYXJOb2RlKTtcclxuXHRcdFx0XHQvL3Byb2Nlc3MgeG1sXHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5sb2NhdG9yICYmIHBvc2l0aW9uKHRoaXMubG9jYXRvcixjaGFyTm9kZSlcclxuXHRcdH1cclxuXHR9LFxyXG5cdHNraXBwZWRFbnRpdHk6ZnVuY3Rpb24obmFtZSkge1xyXG5cdH0sXHJcblx0ZW5kRG9jdW1lbnQ6ZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmRvYy5ub3JtYWxpemUoKTtcclxuXHR9LFxyXG5cdHNldERvY3VtZW50TG9jYXRvcjpmdW5jdGlvbiAobG9jYXRvcikge1xyXG5cdCAgICBpZih0aGlzLmxvY2F0b3IgPSBsb2NhdG9yKXsvLyAmJiAhKCdsaW5lTnVtYmVyJyBpbiBsb2NhdG9yKSl7XHJcblx0ICAgIFx0bG9jYXRvci5saW5lTnVtYmVyID0gMDtcclxuXHQgICAgfVxyXG5cdH0sXHJcblx0Ly9MZXhpY2FsSGFuZGxlclxyXG5cdGNvbW1lbnQ6ZnVuY3Rpb24oY2hhcnMsIHN0YXJ0LCBsZW5ndGgpIHtcclxuXHRcdGNoYXJzID0gX3RvU3RyaW5nLmFwcGx5KHRoaXMsYXJndW1lbnRzKVxyXG5cdCAgICB2YXIgY29tbSA9IHRoaXMuZG9jLmNyZWF0ZUNvbW1lbnQoY2hhcnMpO1xyXG5cdCAgICB0aGlzLmxvY2F0b3IgJiYgcG9zaXRpb24odGhpcy5sb2NhdG9yLGNvbW0pXHJcblx0ICAgIGFwcGVuZEVsZW1lbnQodGhpcywgY29tbSk7XHJcblx0fSxcclxuXHRcclxuXHRzdGFydENEQVRBOmZ1bmN0aW9uKCkge1xyXG5cdCAgICAvL3VzZWQgaW4gY2hhcmFjdGVycygpIG1ldGhvZHNcclxuXHQgICAgdGhpcy5jZGF0YSA9IHRydWU7XHJcblx0fSxcclxuXHRlbmRDREFUQTpmdW5jdGlvbigpIHtcclxuXHQgICAgdGhpcy5jZGF0YSA9IGZhbHNlO1xyXG5cdH0sXHJcblx0XHJcblx0c3RhcnREVEQ6ZnVuY3Rpb24obmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XHJcblx0XHR2YXIgaW1wbCA9IHRoaXMuZG9jLmltcGxlbWVudGF0aW9uO1xyXG5cdCAgICBpZiAoaW1wbCAmJiBpbXBsLmNyZWF0ZURvY3VtZW50VHlwZSkge1xyXG5cdCAgICAgICAgdmFyIGR0ID0gaW1wbC5jcmVhdGVEb2N1bWVudFR5cGUobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKTtcclxuXHQgICAgICAgIHRoaXMubG9jYXRvciAmJiBwb3NpdGlvbih0aGlzLmxvY2F0b3IsZHQpXHJcblx0ICAgICAgICBhcHBlbmRFbGVtZW50KHRoaXMsIGR0KTtcclxuXHQgICAgfVxyXG5cdH0sXHJcblx0LyoqXHJcblx0ICogQHNlZSBvcmcueG1sLnNheC5FcnJvckhhbmRsZXJcclxuXHQgKiBAbGluayBodHRwOi8vd3d3LnNheHByb2plY3Qub3JnL2FwaWRvYy9vcmcveG1sL3NheC9FcnJvckhhbmRsZXIuaHRtbFxyXG5cdCAqL1xyXG5cdHdhcm5pbmc6ZnVuY3Rpb24oZXJyb3IpIHtcclxuXHRcdGNvbnNvbGUud2FybignW3htbGRvbSB3YXJuaW5nXVxcdCcrZXJyb3IsX2xvY2F0b3IodGhpcy5sb2NhdG9yKSk7XHJcblx0fSxcclxuXHRlcnJvcjpmdW5jdGlvbihlcnJvcikge1xyXG5cdFx0Y29uc29sZS5lcnJvcignW3htbGRvbSBlcnJvcl1cXHQnK2Vycm9yLF9sb2NhdG9yKHRoaXMubG9jYXRvcikpO1xyXG5cdH0sXHJcblx0ZmF0YWxFcnJvcjpmdW5jdGlvbihlcnJvcikge1xyXG5cdFx0Y29uc29sZS5lcnJvcignW3htbGRvbSBmYXRhbEVycm9yXVxcdCcrZXJyb3IsX2xvY2F0b3IodGhpcy5sb2NhdG9yKSk7XHJcblx0ICAgIHRocm93IGVycm9yO1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBfbG9jYXRvcihsKXtcclxuXHRpZihsKXtcclxuXHRcdHJldHVybiAnXFxuQCcrKGwuc3lzdGVtSWQgfHwnJykrJyNbbGluZTonK2wubGluZU51bWJlcisnLGNvbDonK2wuY29sdW1uTnVtYmVyKyddJ1xyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBfdG9TdHJpbmcoY2hhcnMsc3RhcnQsbGVuZ3RoKXtcclxuXHRpZih0eXBlb2YgY2hhcnMgPT0gJ3N0cmluZycpe1xyXG5cdFx0cmV0dXJuIGNoYXJzLnN1YnN0cihzdGFydCxsZW5ndGgpXHJcblx0fWVsc2V7Ly9qYXZhIHNheCBjb25uZWN0IHdpZHRoIHhtbGRvbSBvbiByaGlubyh3aGF0IGFib3V0OiBcIj8gJiYgIShjaGFycyBpbnN0YW5jZW9mIFN0cmluZylcIilcclxuXHRcdGlmKGNoYXJzLmxlbmd0aCA+PSBzdGFydCtsZW5ndGggfHwgc3RhcnQpe1xyXG5cdFx0XHRyZXR1cm4gbmV3IGphdmEubGFuZy5TdHJpbmcoY2hhcnMsc3RhcnQsbGVuZ3RoKSsnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiBjaGFycztcclxuXHR9XHJcbn1cclxuXHJcbi8qXHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L2V4dC9MZXhpY2FsSGFuZGxlci5odG1sXHJcbiAqIHVzZWQgbWV0aG9kIG9mIG9yZy54bWwuc2F4LmV4dC5MZXhpY2FsSGFuZGxlcjpcclxuICogICNjb21tZW50KGNoYXJzLCBzdGFydCwgbGVuZ3RoKVxyXG4gKiAgI3N0YXJ0Q0RBVEEoKVxyXG4gKiAgI2VuZENEQVRBKClcclxuICogICNzdGFydERURChuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpXHJcbiAqXHJcbiAqXHJcbiAqIElHTk9SRUQgbWV0aG9kIG9mIG9yZy54bWwuc2F4LmV4dC5MZXhpY2FsSGFuZGxlcjpcclxuICogICNlbmREVEQoKVxyXG4gKiAgI3N0YXJ0RW50aXR5KG5hbWUpXHJcbiAqICAjZW5kRW50aXR5KG5hbWUpXHJcbiAqXHJcbiAqXHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L2V4dC9EZWNsSGFuZGxlci5odG1sXHJcbiAqIElHTk9SRUQgbWV0aG9kIG9mIG9yZy54bWwuc2F4LmV4dC5EZWNsSGFuZGxlclxyXG4gKiBcdCNhdHRyaWJ1dGVEZWNsKGVOYW1lLCBhTmFtZSwgdHlwZSwgbW9kZSwgdmFsdWUpXHJcbiAqICAjZWxlbWVudERlY2wobmFtZSwgbW9kZWwpXHJcbiAqICAjZXh0ZXJuYWxFbnRpdHlEZWNsKG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZClcclxuICogICNpbnRlcm5hbEVudGl0eURlY2wobmFtZSwgdmFsdWUpXHJcbiAqIEBsaW5rIGh0dHA6Ly93d3cuc2F4cHJvamVjdC5vcmcvYXBpZG9jL29yZy94bWwvc2F4L2V4dC9FbnRpdHlSZXNvbHZlcjIuaHRtbFxyXG4gKiBJR05PUkVEIG1ldGhvZCBvZiBvcmcueG1sLnNheC5FbnRpdHlSZXNvbHZlcjJcclxuICogICNyZXNvbHZlRW50aXR5KFN0cmluZyBuYW1lLFN0cmluZyBwdWJsaWNJZCxTdHJpbmcgYmFzZVVSSSxTdHJpbmcgc3lzdGVtSWQpXHJcbiAqICAjcmVzb2x2ZUVudGl0eShwdWJsaWNJZCwgc3lzdGVtSWQpXHJcbiAqICAjZ2V0RXh0ZXJuYWxTdWJzZXQobmFtZSwgYmFzZVVSSSlcclxuICogQGxpbmsgaHR0cDovL3d3dy5zYXhwcm9qZWN0Lm9yZy9hcGlkb2Mvb3JnL3htbC9zYXgvRFRESGFuZGxlci5odG1sXHJcbiAqIElHTk9SRUQgbWV0aG9kIG9mIG9yZy54bWwuc2F4LkRUREhhbmRsZXJcclxuICogICNub3RhdGlvbkRlY2wobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7fTtcclxuICogICN1bnBhcnNlZEVudGl0eURlY2wobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkLCBub3RhdGlvbk5hbWUpIHt9O1xyXG4gKi9cclxuXCJlbmREVEQsc3RhcnRFbnRpdHksZW5kRW50aXR5LGF0dHJpYnV0ZURlY2wsZWxlbWVudERlY2wsZXh0ZXJuYWxFbnRpdHlEZWNsLGludGVybmFsRW50aXR5RGVjbCxyZXNvbHZlRW50aXR5LGdldEV4dGVybmFsU3Vic2V0LG5vdGF0aW9uRGVjbCx1bnBhcnNlZEVudGl0eURlY2xcIi5yZXBsYWNlKC9cXHcrL2csZnVuY3Rpb24oa2V5KXtcclxuXHRET01IYW5kbGVyLnByb3RvdHlwZVtrZXldID0gZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH1cclxufSlcclxuXHJcbi8qIFByaXZhdGUgc3RhdGljIGhlbHBlcnMgdHJlYXRlZCBiZWxvdyBhcyBwcml2YXRlIGluc3RhbmNlIG1ldGhvZHMsIHNvIGRvbid0IG5lZWQgdG8gYWRkIHRoZXNlIHRvIHRoZSBwdWJsaWMgQVBJOyB3ZSBtaWdodCB1c2UgYSBSZWxhdG9yIHRvIGFsc28gZ2V0IHJpZCBvZiBub24tc3RhbmRhcmQgcHVibGljIHByb3BlcnRpZXMgKi9cclxuZnVuY3Rpb24gYXBwZW5kRWxlbWVudCAoaGFuZGVyLG5vZGUpIHtcclxuICAgIGlmICghaGFuZGVyLmN1cnJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgaGFuZGVyLmRvYy5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGFuZGVyLmN1cnJlbnRFbGVtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgfVxyXG59Ly9hcHBlbmRDaGlsZCBhbmQgc2V0QXR0cmlidXRlTlMgYXJlIHByZWZvcm1hbmNlIGtleVxyXG5cclxuLy9pZih0eXBlb2YgcmVxdWlyZSA9PSAnZnVuY3Rpb24nKXtcclxuXHR2YXIgWE1MUmVhZGVyID0gcmVxdWlyZSgnLi9zYXgnKS5YTUxSZWFkZXI7XHJcblx0dmFyIERPTUltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5ET01JbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vZG9tJykuRE9NSW1wbGVtZW50YXRpb247XHJcblx0ZXhwb3J0cy5YTUxTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9kb20nKS5YTUxTZXJpYWxpemVyIDtcclxuXHRleHBvcnRzLkRPTVBhcnNlciA9IERPTVBhcnNlcjtcclxuLy99XHJcbiIsIi8qXG4gKiBET00gTGV2ZWwgMlxuICogT2JqZWN0IERPTUV4Y2VwdGlvblxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvZWNtYS1zY3JpcHQtbGFuZ3VhZ2UtYmluZGluZy5odG1sXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG4gKi9cblxuZnVuY3Rpb24gY29weShzcmMsZGVzdCl7XG5cdGZvcih2YXIgcCBpbiBzcmMpe1xuXHRcdGRlc3RbcF0gPSBzcmNbcF07XG5cdH1cbn1cbi8qKlxuXlxcdytcXC5wcm90b3R5cGVcXC4oW19cXHddKylcXHMqPVxccyooKD86LipcXHtcXHMqP1tcXHJcXG5dW1xcc1xcU10qP159KXxcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG5eXFx3K1xcLnByb3RvdHlwZVxcLihbX1xcd10rKVxccyo9XFxzKihcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKENsYXNzLFN1cGVyKXtcblx0dmFyIHB0ID0gQ2xhc3MucHJvdG90eXBlO1xuXHRpZihPYmplY3QuY3JlYXRlKXtcblx0XHR2YXIgcHB0ID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpXG5cdFx0cHQuX19wcm90b19fID0gcHB0O1xuXHR9XG5cdGlmKCEocHQgaW5zdGFuY2VvZiBTdXBlcikpe1xuXHRcdGZ1bmN0aW9uIHQoKXt9O1xuXHRcdHQucHJvdG90eXBlID0gU3VwZXIucHJvdG90eXBlO1xuXHRcdHQgPSBuZXcgdCgpO1xuXHRcdGNvcHkocHQsdCk7XG5cdFx0Q2xhc3MucHJvdG90eXBlID0gcHQgPSB0O1xuXHR9XG5cdGlmKHB0LmNvbnN0cnVjdG9yICE9IENsYXNzKXtcblx0XHRpZih0eXBlb2YgQ2xhc3MgIT0gJ2Z1bmN0aW9uJyl7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwidW5rbm93IENsYXNzOlwiK0NsYXNzKVxuXHRcdH1cblx0XHRwdC5jb25zdHJ1Y3RvciA9IENsYXNzXG5cdH1cbn1cbnZhciBodG1sbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcgO1xuLy8gTm9kZSBUeXBlc1xudmFyIE5vZGVUeXBlID0ge31cbnZhciBFTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSAxO1xudmFyIEFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IE5vZGVUeXBlLkFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IDI7XG52YXIgVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gMztcbnZhciBDREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5DREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSA0O1xudmFyIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IE5vZGVUeXBlLkVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IDU7XG52YXIgRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gNjtcbnZhciBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSBOb2RlVHlwZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSA3O1xudmFyIENPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkNPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gOTtcbnZhciBET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSAxMDtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSAxMTtcbnZhciBOT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5OT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSAxMjtcblxuLy8gRXhjZXB0aW9uQ29kZVxudmFyIEV4Y2VwdGlvbkNvZGUgPSB7fVxudmFyIEV4Y2VwdGlvbk1lc3NhZ2UgPSB7fTtcbnZhciBJTkRFWF9TSVpFX0VSUiAgICAgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxXT1cIkluZGV4IHNpemUgZXJyb3JcIiksMSk7XG52YXIgRE9NU1RSSU5HX1NJWkVfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5ET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMl09XCJET01TdHJpbmcgc2l6ZSBlcnJvclwiKSwyKTtcbnZhciBISUVSQVJDSFlfUkVRVUVTVF9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLkhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVszXT1cIkhpZXJhcmNoeSByZXF1ZXN0IGVycm9yXCIpLDMpO1xudmFyIFdST05HX0RPQ1VNRU5UX0VSUiAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzRdPVwiV3JvbmcgZG9jdW1lbnRcIiksNCk7XG52YXIgSU5WQUxJRF9DSEFSQUNURVJfRVJSICAgICAgID0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNV09XCJJbnZhbGlkIGNoYXJhY3RlclwiKSw1KTtcbnZhciBOT19EQVRBX0FMTE9XRURfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLk5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs2XT1cIk5vIGRhdGEgYWxsb3dlZFwiKSw2KTtcbnZhciBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIgPSBFeGNlcHRpb25Db2RlLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9ICgoRXhjZXB0aW9uTWVzc2FnZVs3XT1cIk5vIG1vZGlmaWNhdGlvbiBhbGxvd2VkXCIpLDcpO1xudmFyIE5PVF9GT1VORF9FUlIgICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzhdPVwiTm90IGZvdW5kXCIpLDgpO1xudmFyIE5PVF9TVVBQT1JURURfRVJSICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzldPVwiTm90IHN1cHBvcnRlZFwiKSw5KTtcbnZhciBJTlVTRV9BVFRSSUJVVEVfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMF09XCJBdHRyaWJ1dGUgaW4gdXNlXCIpLDEwKTtcbi8vbGV2ZWwyXG52YXIgSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfU1RBVEVfRVJSICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzExXT1cIkludmFsaWQgc3RhdGVcIiksMTEpO1xudmFyIFNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5TWU5UQVhfRVJSICAgICAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMl09XCJTeW50YXggZXJyb3JcIiksMTIpO1xudmFyIElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX01PRElGSUNBVElPTl9FUlIgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxM109XCJJbnZhbGlkIG1vZGlmaWNhdGlvblwiKSwxMyk7XG52YXIgTkFNRVNQQUNFX0VSUiAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLk5BTUVTUEFDRV9FUlIgICAgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTRdPVwiSW52YWxpZCBuYW1lc3BhY2VcIiksMTQpO1xudmFyIElOVkFMSURfQUNDRVNTX0VSUiAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0FDQ0VTU19FUlIgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzE1XT1cIkludmFsaWQgYWNjZXNzXCIpLDE1KTtcblxuXG5mdW5jdGlvbiBET01FeGNlcHRpb24oY29kZSwgbWVzc2FnZSkge1xuXHRpZihtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3Ipe1xuXHRcdHZhciBlcnJvciA9IG1lc3NhZ2U7XG5cdH1lbHNle1xuXHRcdGVycm9yID0gdGhpcztcblx0XHRFcnJvci5jYWxsKHRoaXMsIEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV0pO1xuXHRcdHRoaXMubWVzc2FnZSA9IEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV07XG5cdFx0aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIERPTUV4Y2VwdGlvbik7XG5cdH1cblx0ZXJyb3IuY29kZSA9IGNvZGU7XG5cdGlmKG1lc3NhZ2UpIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSArIFwiOiBcIiArIG1lc3NhZ2U7XG5cdHJldHVybiBlcnJvcjtcbn07XG5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuY29weShFeGNlcHRpb25Db2RlLERPTUV4Y2VwdGlvbilcbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC01MzYyOTcxNzdcbiAqIFRoZSBOb2RlTGlzdCBpbnRlcmZhY2UgcHJvdmlkZXMgdGhlIGFic3RyYWN0aW9uIG9mIGFuIG9yZGVyZWQgY29sbGVjdGlvbiBvZiBub2Rlcywgd2l0aG91dCBkZWZpbmluZyBvciBjb25zdHJhaW5pbmcgaG93IHRoaXMgY29sbGVjdGlvbiBpcyBpbXBsZW1lbnRlZC4gTm9kZUxpc3Qgb2JqZWN0cyBpbiB0aGUgRE9NIGFyZSBsaXZlLlxuICogVGhlIGl0ZW1zIGluIHRoZSBOb2RlTGlzdCBhcmUgYWNjZXNzaWJsZSB2aWEgYW4gaW50ZWdyYWwgaW5kZXgsIHN0YXJ0aW5nIGZyb20gMC5cbiAqL1xuZnVuY3Rpb24gTm9kZUxpc3QoKSB7XG59O1xuTm9kZUxpc3QucHJvdG90eXBlID0ge1xuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdC4gVGhlIHJhbmdlIG9mIHZhbGlkIGNoaWxkIG5vZGUgaW5kaWNlcyBpcyAwIHRvIGxlbmd0aC0xIGluY2x1c2l2ZS5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKi9cblx0bGVuZ3RoOjAsIFxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kZXh0aCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLiBJZiBpbmRleCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdCwgdGhpcyByZXR1cm5zIG51bGwuXG5cdCAqIEBzdGFuZGFyZCBsZXZlbDFcblx0ICogQHBhcmFtIGluZGV4ICB1bnNpZ25lZCBsb25nIFxuXHQgKiAgIEluZGV4IGludG8gdGhlIGNvbGxlY3Rpb24uXG5cdCAqIEByZXR1cm4gTm9kZVxuXHQgKiBcdFRoZSBub2RlIGF0IHRoZSBpbmRleHRoIHBvc2l0aW9uIGluIHRoZSBOb2RlTGlzdCwgb3IgbnVsbCBpZiB0aGF0IGlzIG5vdCBhIHZhbGlkIGluZGV4LiBcblx0ICovXG5cdGl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXNbaW5kZXhdIHx8IG51bGw7XG5cdH0sXG5cdHRvU3RyaW5nOmZ1bmN0aW9uKGlzSFRNTCxub2RlRmlsdGVyKXtcblx0XHRmb3IodmFyIGJ1ZiA9IFtdLCBpID0gMDtpPHRoaXMubGVuZ3RoO2krKyl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyh0aGlzW2ldLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcik7XG5cdFx0fVxuXHRcdHJldHVybiBidWYuam9pbignJyk7XG5cdH1cbn07XG5mdW5jdGlvbiBMaXZlTm9kZUxpc3Qobm9kZSxyZWZyZXNoKXtcblx0dGhpcy5fbm9kZSA9IG5vZGU7XG5cdHRoaXMuX3JlZnJlc2ggPSByZWZyZXNoXG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcbn1cbmZ1bmN0aW9uIF91cGRhdGVMaXZlTGlzdChsaXN0KXtcblx0dmFyIGluYyA9IGxpc3QuX25vZGUuX2luYyB8fCBsaXN0Ll9ub2RlLm93bmVyRG9jdW1lbnQuX2luYztcblx0aWYobGlzdC5faW5jICE9IGluYyl7XG5cdFx0dmFyIGxzID0gbGlzdC5fcmVmcmVzaChsaXN0Ll9ub2RlKTtcblx0XHQvL2NvbnNvbGUubG9nKGxzLmxlbmd0aClcblx0XHRfX3NldF9fKGxpc3QsJ2xlbmd0aCcsbHMubGVuZ3RoKTtcblx0XHRjb3B5KGxzLGxpc3QpO1xuXHRcdGxpc3QuX2luYyA9IGluYztcblx0fVxufVxuTGl2ZU5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaSl7XG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0cmV0dXJuIHRoaXNbaV07XG59XG5cbl9leHRlbmRzKExpdmVOb2RlTGlzdCxOb2RlTGlzdCk7XG4vKipcbiAqIFxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhlIE5hbWVkTm9kZU1hcCBpbnRlcmZhY2UgYXJlIHVzZWQgdG8gcmVwcmVzZW50IGNvbGxlY3Rpb25zIG9mIG5vZGVzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG5hbWUuIE5vdGUgdGhhdCBOYW1lZE5vZGVNYXAgZG9lcyBub3QgaW5oZXJpdCBmcm9tIE5vZGVMaXN0OyBOYW1lZE5vZGVNYXBzIGFyZSBub3QgbWFpbnRhaW5lZCBpbiBhbnkgcGFydGljdWxhciBvcmRlci4gT2JqZWN0cyBjb250YWluZWQgaW4gYW4gb2JqZWN0IGltcGxlbWVudGluZyBOYW1lZE5vZGVNYXAgbWF5IGFsc28gYmUgYWNjZXNzZWQgYnkgYW4gb3JkaW5hbCBpbmRleCwgYnV0IHRoaXMgaXMgc2ltcGx5IHRvIGFsbG93IGNvbnZlbmllbnQgZW51bWVyYXRpb24gb2YgdGhlIGNvbnRlbnRzIG9mIGEgTmFtZWROb2RlTWFwLCBhbmQgZG9lcyBub3QgaW1wbHkgdGhhdCB0aGUgRE9NIHNwZWNpZmllcyBhbiBvcmRlciB0byB0aGVzZSBOb2Rlcy5cbiAqIE5hbWVkTm9kZU1hcCBvYmplY3RzIGluIHRoZSBET00gYXJlIGxpdmUuXG4gKiB1c2VkIGZvciBhdHRyaWJ1dGVzIG9yIERvY3VtZW50VHlwZSBlbnRpdGllcyBcbiAqL1xuZnVuY3Rpb24gTmFtZWROb2RlTWFwKCkge1xufTtcblxuZnVuY3Rpb24gX2ZpbmROb2RlSW5kZXgobGlzdCxub2RlKXtcblx0dmFyIGkgPSBsaXN0Lmxlbmd0aDtcblx0d2hpbGUoaS0tKXtcblx0XHRpZihsaXN0W2ldID09PSBub2RlKXtyZXR1cm4gaX1cblx0fVxufVxuXG5mdW5jdGlvbiBfYWRkTmFtZWROb2RlKGVsLGxpc3QsbmV3QXR0cixvbGRBdHRyKXtcblx0aWYob2xkQXR0cil7XG5cdFx0bGlzdFtfZmluZE5vZGVJbmRleChsaXN0LG9sZEF0dHIpXSA9IG5ld0F0dHI7XG5cdH1lbHNle1xuXHRcdGxpc3RbbGlzdC5sZW5ndGgrK10gPSBuZXdBdHRyO1xuXHR9XG5cdGlmKGVsKXtcblx0XHRuZXdBdHRyLm93bmVyRWxlbWVudCA9IGVsO1xuXHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdGlmKGRvYyl7XG5cdFx0XHRvbGRBdHRyICYmIF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsb2xkQXR0cik7XG5cdFx0XHRfb25BZGRBdHRyaWJ1dGUoZG9jLGVsLG5ld0F0dHIpO1xuXHRcdH1cblx0fVxufVxuZnVuY3Rpb24gX3JlbW92ZU5hbWVkTm9kZShlbCxsaXN0LGF0dHIpe1xuXHQvL2NvbnNvbGUubG9nKCdyZW1vdmUgYXR0cjonK2F0dHIpXG5cdHZhciBpID0gX2ZpbmROb2RlSW5kZXgobGlzdCxhdHRyKTtcblx0aWYoaT49MCl7XG5cdFx0dmFyIGxhc3RJbmRleCA9IGxpc3QubGVuZ3RoLTFcblx0XHR3aGlsZShpPGxhc3RJbmRleCl7XG5cdFx0XHRsaXN0W2ldID0gbGlzdFsrK2ldXG5cdFx0fVxuXHRcdGxpc3QubGVuZ3RoID0gbGFzdEluZGV4O1xuXHRcdGlmKGVsKXtcblx0XHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdFx0aWYoZG9jKXtcblx0XHRcdFx0X29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxhdHRyKTtcblx0XHRcdFx0YXR0ci5vd25lckVsZW1lbnQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2V7XG5cdFx0dGhyb3cgRE9NRXhjZXB0aW9uKE5PVF9GT1VORF9FUlIsbmV3IEVycm9yKGVsLnRhZ05hbWUrJ0AnK2F0dHIpKVxuXHR9XG59XG5OYW1lZE5vZGVNYXAucHJvdG90eXBlID0ge1xuXHRsZW5ndGg6MCxcblx0aXRlbTpOb2RlTGlzdC5wcm90b3R5cGUuaXRlbSxcblx0Z2V0TmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcbi8vXHRcdGlmKGtleS5pbmRleE9mKCc6Jyk+MCB8fCBrZXkgPT0gJ3htbG5zJyl7XG4vL1x0XHRcdHJldHVybiBudWxsO1xuLy9cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coKVxuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBhdHRyID0gdGhpc1tpXTtcblx0XHRcdC8vY29uc29sZS5sb2coYXR0ci5ub2RlTmFtZSxrZXkpXG5cdFx0XHRpZihhdHRyLm5vZGVOYW1lID09IGtleSl7XG5cdFx0XHRcdHJldHVybiBhdHRyO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0c2V0TmFtZWRJdGVtOiBmdW5jdGlvbihhdHRyKSB7XG5cdFx0dmFyIGVsID0gYXR0ci5vd25lckVsZW1lbnQ7XG5cdFx0aWYoZWwgJiYgZWwhPXRoaXMuX293bmVyRWxlbWVudCl7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKElOVVNFX0FUVFJJQlVURV9FUlIpO1xuXHRcdH1cblx0XHR2YXIgb2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGF0dHIubm9kZU5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblx0LyogcmV0dXJucyBOb2RlICovXG5cdHNldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihhdHRyKSB7Ly8gcmFpc2VzOiBXUk9OR19ET0NVTUVOVF9FUlIsTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSLElOVVNFX0FUVFJJQlVURV9FUlJcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudCwgb2xkQXR0cjtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdG9sZEF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKGF0dHIubmFtZXNwYWNlVVJJLGF0dHIubG9jYWxOYW1lKTtcblx0XHRfYWRkTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIsb2xkQXR0cik7XG5cdFx0cmV0dXJuIG9sZEF0dHI7XG5cdH0sXG5cblx0LyogcmV0dXJucyBOb2RlICovXG5cdHJlbW92ZU5hbWVkSXRlbTogZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbShrZXkpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cdFx0XG5cdFx0XG5cdH0sLy8gcmFpc2VzOiBOT1RfRk9VTkRfRVJSLE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUlxuXHRcblx0Ly9mb3IgbGV2ZWwyXG5cdHJlbW92ZU5hbWVkSXRlbU5TOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxsb2NhbE5hbWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksbG9jYWxOYW1lKTtcblx0XHRfcmVtb3ZlTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIpO1xuXHRcdHJldHVybiBhdHRyO1xuXHR9LFxuXHRnZXROYW1lZEl0ZW1OUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcblx0XHR2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXHRcdHdoaWxlKGktLSl7XG5cdFx0XHR2YXIgbm9kZSA9IHRoaXNbaV07XG5cdFx0XHRpZihub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUgJiYgbm9kZS5uYW1lc3BhY2VVUkkgPT0gbmFtZXNwYWNlVVJJKXtcblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG59O1xuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9sZXZlbC1vbmUtY29yZS5odG1sI0lELTEwMjE2MTQ5MFxuICovXG5mdW5jdGlvbiBET01JbXBsZW1lbnRhdGlvbigvKiBPYmplY3QgKi8gZmVhdHVyZXMpIHtcblx0dGhpcy5fZmVhdHVyZXMgPSB7fTtcblx0aWYgKGZlYXR1cmVzKSB7XG5cdFx0Zm9yICh2YXIgZmVhdHVyZSBpbiBmZWF0dXJlcykge1xuXHRcdFx0IHRoaXMuX2ZlYXR1cmVzID0gZmVhdHVyZXNbZmVhdHVyZV07XG5cdFx0fVxuXHR9XG59O1xuXG5ET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUgPSB7XG5cdGhhc0ZlYXR1cmU6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLyBmZWF0dXJlLCAvKiBzdHJpbmcgKi8gdmVyc2lvbikge1xuXHRcdHZhciB2ZXJzaW9ucyA9IHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmUudG9Mb3dlckNhc2UoKV07XG5cdFx0aWYgKHZlcnNpb25zICYmICghdmVyc2lvbiB8fCB2ZXJzaW9uIGluIHZlcnNpb25zKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGNyZWF0ZURvY3VtZW50OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpey8vIHJhaXNlczpJTlZBTElEX0NIQVJBQ1RFUl9FUlIsTkFNRVNQQUNFX0VSUixXUk9OR19ET0NVTUVOVF9FUlJcblx0XHR2YXIgZG9jID0gbmV3IERvY3VtZW50KCk7XG5cdFx0ZG9jLmltcGxlbWVudGF0aW9uID0gdGhpcztcblx0XHRkb2MuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdGRvYy5kb2N0eXBlID0gZG9jdHlwZTtcblx0XHRpZihkb2N0eXBlKXtcblx0XHRcdGRvYy5hcHBlbmRDaGlsZChkb2N0eXBlKTtcblx0XHR9XG5cdFx0aWYocXVhbGlmaWVkTmFtZSl7XG5cdFx0XHR2YXIgcm9vdCA9IGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpO1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKHJvb3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gZG9jO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVEb2N1bWVudFR5cGU6ZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKXsvLyByYWlzZXM6SU5WQUxJRF9DSEFSQUNURVJfRVJSLE5BTUVTUEFDRV9FUlJcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudFR5cGUoKTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUucHVibGljSWQgPSBwdWJsaWNJZDtcblx0XHRub2RlLnN5c3RlbUlkID0gc3lzdGVtSWQ7XG5cdFx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0XHQvL3JlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgICAgICAgIGludGVybmFsU3Vic2V0O1xuXHRcdFxuXHRcdC8vVE9ETzouLlxuXHRcdC8vICByZWFkb25seSBhdHRyaWJ1dGUgTmFtZWROb2RlTWFwICAgICBlbnRpdGllcztcblx0XHQvLyAgcmVhZG9ubHkgYXR0cmlidXRlIE5hbWVkTm9kZU1hcCAgICAgbm90YXRpb25zO1xuXHRcdHJldHVybiBub2RlO1xuXHR9XG59O1xuXG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC0xOTUwNjQxMjQ3XG4gKi9cblxuZnVuY3Rpb24gTm9kZSgpIHtcbn07XG5cbk5vZGUucHJvdG90eXBlID0ge1xuXHRmaXJzdENoaWxkIDogbnVsbCxcblx0bGFzdENoaWxkIDogbnVsbCxcblx0cHJldmlvdXNTaWJsaW5nIDogbnVsbCxcblx0bmV4dFNpYmxpbmcgOiBudWxsLFxuXHRhdHRyaWJ1dGVzIDogbnVsbCxcblx0cGFyZW50Tm9kZSA6IG51bGwsXG5cdGNoaWxkTm9kZXMgOiBudWxsLFxuXHRvd25lckRvY3VtZW50IDogbnVsbCxcblx0bm9kZVZhbHVlIDogbnVsbCxcblx0bmFtZXNwYWNlVVJJIDogbnVsbCxcblx0cHJlZml4IDogbnVsbCxcblx0bG9jYWxOYW1lIDogbnVsbCxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdGluc2VydEJlZm9yZTpmdW5jdGlvbihuZXdDaGlsZCwgcmVmQ2hpbGQpey8vcmFpc2VzIFxuXHRcdHJldHVybiBfaW5zZXJ0QmVmb3JlKHRoaXMsbmV3Q2hpbGQscmVmQ2hpbGQpO1xuXHR9LFxuXHRyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKXsvL3JhaXNlcyBcblx0XHR0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxvbGRDaGlsZCk7XG5cdFx0aWYob2xkQ2hpbGQpe1xuXHRcdFx0dGhpcy5yZW1vdmVDaGlsZChvbGRDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmVDaGlsZDpmdW5jdGlvbihvbGRDaGlsZCl7XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0fSxcblx0aGFzQ2hpbGROb2RlczpmdW5jdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLmZpcnN0Q2hpbGQgIT0gbnVsbDtcblx0fSxcblx0Y2xvbmVOb2RlOmZ1bmN0aW9uKGRlZXApe1xuXHRcdHJldHVybiBjbG9uZU5vZGUodGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHRoaXMsZGVlcCk7XG5cdH0sXG5cdC8vIE1vZGlmaWVkIGluIERPTSBMZXZlbCAyOlxuXHRub3JtYWxpemU6ZnVuY3Rpb24oKXtcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0dmFyIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHRcdGlmKG5leHQgJiYgbmV4dC5ub2RlVHlwZSA9PSBURVhUX05PREUgJiYgY2hpbGQubm9kZVR5cGUgPT0gVEVYVF9OT0RFKXtcblx0XHRcdFx0dGhpcy5yZW1vdmVDaGlsZChuZXh0KTtcblx0XHRcdFx0Y2hpbGQuYXBwZW5kRGF0YShuZXh0LmRhdGEpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGNoaWxkLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRjaGlsZCA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuICBcdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGlzU3VwcG9ydGVkOmZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pe1xuXHRcdHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShmZWF0dXJlLHZlcnNpb24pO1xuXHR9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG4gICAgaGFzQXR0cmlidXRlczpmdW5jdGlvbigpe1xuICAgIFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGg+MDtcbiAgICB9LFxuICAgIGxvb2t1cFByZWZpeDpmdW5jdGlvbihuYW1lc3BhY2VVUkkpe1xuICAgIFx0dmFyIGVsID0gdGhpcztcbiAgICBcdHdoaWxlKGVsKXtcbiAgICBcdFx0dmFyIG1hcCA9IGVsLl9uc01hcDtcbiAgICBcdFx0Ly9jb25zb2xlLmRpcihtYXApXG4gICAgXHRcdGlmKG1hcCl7XG4gICAgXHRcdFx0Zm9yKHZhciBuIGluIG1hcCl7XG4gICAgXHRcdFx0XHRpZihtYXBbbl0gPT0gbmFtZXNwYWNlVVJJKXtcbiAgICBcdFx0XHRcdFx0cmV0dXJuIG47XG4gICAgXHRcdFx0XHR9XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgbG9va3VwTmFtZXNwYWNlVVJJOmZ1bmN0aW9uKHByZWZpeCl7XG4gICAgXHR2YXIgZWwgPSB0aGlzO1xuICAgIFx0d2hpbGUoZWwpe1xuICAgIFx0XHR2YXIgbWFwID0gZWwuX25zTWFwO1xuICAgIFx0XHQvL2NvbnNvbGUuZGlyKG1hcClcbiAgICBcdFx0aWYobWFwKXtcbiAgICBcdFx0XHRpZihwcmVmaXggaW4gbWFwKXtcbiAgICBcdFx0XHRcdHJldHVybiBtYXBbcHJlZml4XSA7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgaXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSl7XG4gICAgXHR2YXIgcHJlZml4ID0gdGhpcy5sb29rdXBQcmVmaXgobmFtZXNwYWNlVVJJKTtcbiAgICBcdHJldHVybiBwcmVmaXggPT0gbnVsbDtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIF94bWxFbmNvZGVyKGMpe1xuXHRyZXR1cm4gYyA9PSAnPCcgJiYgJyZsdDsnIHx8XG4gICAgICAgICBjID09ICc+JyAmJiAnJmd0OycgfHxcbiAgICAgICAgIGMgPT0gJyYnICYmICcmYW1wOycgfHxcbiAgICAgICAgIGMgPT0gJ1wiJyAmJiAnJnF1b3Q7JyB8fFxuICAgICAgICAgYyA9PSAnXFxuJyAmJiAnJiMxMDsnIHx8IC8vIGVuY29kZSBuZXdsaW5lIGNvcnJlY3RseVxuICAgICAgICAgYyA9PSAnJiMxMDsnICYmICcmIzEwOycgfHwgLy8gYWxyZWFkeSBjb3JyZWN0bHkgZW5jb2RlZCwgbGVhdmUgaXQgdW50b3VjaGVkXG4gICAgICAgICAnJiMnK2MuY2hhckNvZGVBdCgpKyc7J1xufVxuXG5cbmNvcHkoTm9kZVR5cGUsTm9kZSk7XG5jb3B5KE5vZGVUeXBlLE5vZGUucHJvdG90eXBlKTtcblxuLyoqXG4gKiBAcGFyYW0gY2FsbGJhY2sgcmV0dXJuIHRydWUgZm9yIGNvbnRpbnVlLGZhbHNlIGZvciBicmVha1xuICogQHJldHVybiBib29sZWFuIHRydWU6IGJyZWFrIHZpc2l0O1xuICovXG5mdW5jdGlvbiBfdmlzaXROb2RlKG5vZGUsY2FsbGJhY2spe1xuXHRpZihjYWxsYmFjayhub2RlKSl7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYobm9kZSA9IG5vZGUuZmlyc3RDaGlsZCl7XG5cdFx0ZG97XG5cdFx0XHRpZihfdmlzaXROb2RlKG5vZGUsY2FsbGJhY2spKXtyZXR1cm4gdHJ1ZX1cbiAgICAgICAgfXdoaWxlKG5vZGU9bm9kZS5uZXh0U2libGluZylcbiAgICB9XG59XG5cblxuXG5mdW5jdGlvbiBEb2N1bWVudCgpe1xufVxuZnVuY3Rpb24gX29uQWRkQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyKXtcblx0ZG9jICYmIGRvYy5faW5jKys7XG5cdHZhciBucyA9IG5ld0F0dHIubmFtZXNwYWNlVVJJIDtcblx0aWYobnMgPT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJyl7XG5cdFx0Ly91cGRhdGUgbmFtZXNwYWNlXG5cdFx0ZWwuX25zTWFwW25ld0F0dHIucHJlZml4P25ld0F0dHIubG9jYWxOYW1lOicnXSA9IG5ld0F0dHIudmFsdWVcblx0fVxufVxuZnVuY3Rpb24gX29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyLHJlbW92ZSl7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGRlbGV0ZSBlbC5fbnNNYXBbbmV3QXR0ci5wcmVmaXg/bmV3QXR0ci5sb2NhbE5hbWU6JyddXG5cdH1cbn1cbmZ1bmN0aW9uIF9vblVwZGF0ZUNoaWxkKGRvYyxlbCxuZXdDaGlsZCl7XG5cdGlmKGRvYyAmJiBkb2MuX2luYyl7XG5cdFx0ZG9jLl9pbmMrKztcblx0XHQvL3VwZGF0ZSBjaGlsZE5vZGVzXG5cdFx0dmFyIGNzID0gZWwuY2hpbGROb2Rlcztcblx0XHRpZihuZXdDaGlsZCl7XG5cdFx0XHRjc1tjcy5sZW5ndGgrK10gPSBuZXdDaGlsZDtcblx0XHR9ZWxzZXtcblx0XHRcdC8vY29uc29sZS5sb2coMSlcblx0XHRcdHZhciBjaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdGNzW2krK10gPSBjaGlsZDtcblx0XHRcdFx0Y2hpbGQgPWNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0fVxuXHRcdFx0Y3MubGVuZ3RoID0gaTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBhdHRyaWJ1dGVzO1xuICogY2hpbGRyZW47XG4gKiBcbiAqIHdyaXRlYWJsZSBwcm9wZXJ0aWVzOlxuICogbm9kZVZhbHVlLEF0dHI6dmFsdWUsQ2hhcmFjdGVyRGF0YTpkYXRhXG4gKiBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gX3JlbW92ZUNoaWxkKHBhcmVudE5vZGUsY2hpbGQpe1xuXHR2YXIgcHJldmlvdXMgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmc7XG5cdHZhciBuZXh0ID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdGlmKHByZXZpb3VzKXtcblx0XHRwcmV2aW91cy5uZXh0U2libGluZyA9IG5leHQ7XG5cdH1lbHNle1xuXHRcdHBhcmVudE5vZGUuZmlyc3RDaGlsZCA9IG5leHRcblx0fVxuXHRpZihuZXh0KXtcblx0XHRuZXh0LnByZXZpb3VzU2libGluZyA9IHByZXZpb3VzO1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmxhc3RDaGlsZCA9IHByZXZpb3VzO1xuXHR9XG5cdF9vblVwZGF0ZUNoaWxkKHBhcmVudE5vZGUub3duZXJEb2N1bWVudCxwYXJlbnROb2RlKTtcblx0cmV0dXJuIGNoaWxkO1xufVxuLyoqXG4gKiBwcmVmb3JtYW5jZSBrZXkocmVmQ2hpbGQgPT0gbnVsbClcbiAqL1xuZnVuY3Rpb24gX2luc2VydEJlZm9yZShwYXJlbnROb2RlLG5ld0NoaWxkLG5leHRDaGlsZCl7XG5cdHZhciBjcCA9IG5ld0NoaWxkLnBhcmVudE5vZGU7XG5cdGlmKGNwKXtcblx0XHRjcC5yZW1vdmVDaGlsZChuZXdDaGlsZCk7Ly9yZW1vdmUgYW5kIHVwZGF0ZVxuXHR9XG5cdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHR2YXIgbmV3Rmlyc3QgPSBuZXdDaGlsZC5maXJzdENoaWxkO1xuXHRcdGlmIChuZXdGaXJzdCA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbmV3Q2hpbGQ7XG5cdFx0fVxuXHRcdHZhciBuZXdMYXN0ID0gbmV3Q2hpbGQubGFzdENoaWxkO1xuXHR9ZWxzZXtcblx0XHRuZXdGaXJzdCA9IG5ld0xhc3QgPSBuZXdDaGlsZDtcblx0fVxuXHR2YXIgcHJlID0gbmV4dENoaWxkID8gbmV4dENoaWxkLnByZXZpb3VzU2libGluZyA6IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXG5cdG5ld0ZpcnN0LnByZXZpb3VzU2libGluZyA9IHByZTtcblx0bmV3TGFzdC5uZXh0U2libGluZyA9IG5leHRDaGlsZDtcblx0XG5cdFxuXHRpZihwcmUpe1xuXHRcdHByZS5uZXh0U2libGluZyA9IG5ld0ZpcnN0O1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXdGaXJzdDtcblx0fVxuXHRpZihuZXh0Q2hpbGQgPT0gbnVsbCl7XG5cdFx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBuZXdMYXN0O1xuXHR9ZWxzZXtcblx0XHRuZXh0Q2hpbGQucHJldmlvdXNTaWJsaW5nID0gbmV3TGFzdDtcblx0fVxuXHRkb3tcblx0XHRuZXdGaXJzdC5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcblx0fXdoaWxlKG5ld0ZpcnN0ICE9PSBuZXdMYXN0ICYmIChuZXdGaXJzdD0gbmV3Rmlyc3QubmV4dFNpYmxpbmcpKVxuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnR8fHBhcmVudE5vZGUscGFyZW50Tm9kZSk7XG5cdC8vY29uc29sZS5sb2cocGFyZW50Tm9kZS5sYXN0Q2hpbGQubmV4dFNpYmxpbmcgPT0gbnVsbClcblx0aWYgKG5ld0NoaWxkLm5vZGVUeXBlID09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcblx0XHRuZXdDaGlsZC5maXJzdENoaWxkID0gbmV3Q2hpbGQubGFzdENoaWxkID0gbnVsbDtcblx0fVxuXHRyZXR1cm4gbmV3Q2hpbGQ7XG59XG5mdW5jdGlvbiBfYXBwZW5kU2luZ2xlQ2hpbGQocGFyZW50Tm9kZSxuZXdDaGlsZCl7XG5cdHZhciBjcCA9IG5ld0NoaWxkLnBhcmVudE5vZGU7XG5cdGlmKGNwKXtcblx0XHR2YXIgcHJlID0gcGFyZW50Tm9kZS5sYXN0Q2hpbGQ7XG5cdFx0Y3AucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpOy8vcmVtb3ZlIGFuZCB1cGRhdGVcblx0XHR2YXIgcHJlID0gcGFyZW50Tm9kZS5sYXN0Q2hpbGQ7XG5cdH1cblx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRuZXdDaGlsZC5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcblx0bmV3Q2hpbGQucHJldmlvdXNTaWJsaW5nID0gcHJlO1xuXHRuZXdDaGlsZC5uZXh0U2libGluZyA9IG51bGw7XG5cdGlmKHByZSl7XG5cdFx0cHJlLm5leHRTaWJsaW5nID0gbmV3Q2hpbGQ7XG5cdH1lbHNle1xuXHRcdHBhcmVudE5vZGUuZmlyc3RDaGlsZCA9IG5ld0NoaWxkO1xuXHR9XG5cdHBhcmVudE5vZGUubGFzdENoaWxkID0gbmV3Q2hpbGQ7XG5cdF9vblVwZGF0ZUNoaWxkKHBhcmVudE5vZGUub3duZXJEb2N1bWVudCxwYXJlbnROb2RlLG5ld0NoaWxkKTtcblx0cmV0dXJuIG5ld0NoaWxkO1xuXHQvL2NvbnNvbGUubG9nKFwiX19hYVwiLHBhcmVudE5vZGUubGFzdENoaWxkLm5leHRTaWJsaW5nID09IG51bGwpXG59XG5Eb2N1bWVudC5wcm90b3R5cGUgPSB7XG5cdC8vaW1wbGVtZW50YXRpb24gOiBudWxsLFxuXHRub2RlTmFtZSA6ICAnI2RvY3VtZW50Jyxcblx0bm9kZVR5cGUgOiAgRE9DVU1FTlRfTk9ERSxcblx0ZG9jdHlwZSA6ICBudWxsLFxuXHRkb2N1bWVudEVsZW1lbnQgOiAgbnVsbCxcblx0X2luYyA6IDEsXG5cdFxuXHRpbnNlcnRCZWZvcmUgOiAgZnVuY3Rpb24obmV3Q2hpbGQsIHJlZkNoaWxkKXsvL3JhaXNlcyBcblx0XHRpZihuZXdDaGlsZC5ub2RlVHlwZSA9PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHRcdHZhciBjaGlsZCA9IG5ld0NoaWxkLmZpcnN0Q2hpbGQ7XG5cdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdHZhciBuZXh0ID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0QmVmb3JlKGNoaWxkLHJlZkNoaWxkKTtcblx0XHRcdFx0Y2hpbGQgPSBuZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ld0NoaWxkO1xuXHRcdH1cblx0XHRpZih0aGlzLmRvY3VtZW50RWxlbWVudCA9PSBudWxsICYmIG5ld0NoaWxkLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSl7XG5cdFx0XHR0aGlzLmRvY3VtZW50RWxlbWVudCA9IG5ld0NoaWxkO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gX2luc2VydEJlZm9yZSh0aGlzLG5ld0NoaWxkLHJlZkNoaWxkKSwobmV3Q2hpbGQub3duZXJEb2N1bWVudCA9IHRoaXMpLG5ld0NoaWxkO1xuXHR9LFxuXHRyZW1vdmVDaGlsZCA6ICBmdW5jdGlvbihvbGRDaGlsZCl7XG5cdFx0aWYodGhpcy5kb2N1bWVudEVsZW1lbnQgPT0gb2xkQ2hpbGQpe1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gX3JlbW92ZUNoaWxkKHRoaXMsb2xkQ2hpbGQpO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRpbXBvcnROb2RlIDogZnVuY3Rpb24oaW1wb3J0ZWROb2RlLGRlZXApe1xuXHRcdHJldHVybiBpbXBvcnROb2RlKHRoaXMsaW1wb3J0ZWROb2RlLGRlZXApO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRnZXRFbGVtZW50QnlJZCA6XHRmdW5jdGlvbihpZCl7XG5cdFx0dmFyIHJ0diA9IG51bGw7XG5cdFx0X3Zpc2l0Tm9kZSh0aGlzLmRvY3VtZW50RWxlbWVudCxmdW5jdGlvbihub2RlKXtcblx0XHRcdGlmKG5vZGUubm9kZVR5cGUgPT0gRUxFTUVOVF9OT0RFKXtcblx0XHRcdFx0aWYobm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykgPT0gaWQpe1xuXHRcdFx0XHRcdHJ0diA9IG5vZGU7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdHJldHVybiBydHY7XG5cdH0sXG5cdFxuXHQvL2RvY3VtZW50IGZhY3RvcnkgbWV0aG9kOlxuXHRjcmVhdGVFbGVtZW50IDpcdGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHRhZ05hbWU7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcyA9IG5ldyBOYW1lZE5vZGVNYXAoKTtcblx0XHRhdHRycy5fb3duZXJFbGVtZW50ID0gbm9kZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlRG9jdW1lbnRGcmFnbWVudCA6XHRmdW5jdGlvbigpe1xuXHRcdHZhciBub2RlID0gbmV3IERvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVUZXh0Tm9kZSA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBUZXh0KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmFwcGVuZERhdGEoZGF0YSlcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQ29tbWVudCA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBDb21tZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmFwcGVuZERhdGEoZGF0YSlcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQ0RBVEFTZWN0aW9uIDpcdGZ1bmN0aW9uKGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IENEQVRBU2VjdGlvbigpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiA6XHRmdW5jdGlvbih0YXJnZXQsZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgUHJvY2Vzc2luZ0luc3RydWN0aW9uKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLnRhZ05hbWUgPSBub2RlLnRhcmdldCA9IHRhcmdldDtcblx0XHRub2RlLm5vZGVWYWx1ZT0gbm9kZS5kYXRhID0gZGF0YTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQXR0cmlidXRlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnRcdD0gdGhpcztcblx0XHRub2RlLm5hbWUgPSBuYW1lO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRub2RlLmxvY2FsTmFtZSA9IG5hbWU7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVFbnRpdHlSZWZlcmVuY2UgOlx0ZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgRW50aXR5UmVmZXJlbmNlKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5ub2RlTmFtZVx0PSBuYW1lO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVFbGVtZW50TlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcyA9IG5ldyBOYW1lZE5vZGVNYXAoKTtcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0aWYocGwubGVuZ3RoID09IDIpe1xuXHRcdFx0bm9kZS5wcmVmaXggPSBwbFswXTtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcGxbMV07XG5cdFx0fWVsc2V7XG5cdFx0XHQvL2VsLnByZWZpeCA9IG51bGw7XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0fVxuXHRcdGF0dHJzLl9vd25lckVsZW1lbnQgPSBub2RlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVBdHRyaWJ1dGVOUyA6XHRmdW5jdGlvbihuYW1lc3BhY2VVUkkscXVhbGlmaWVkTmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQXR0cigpO1xuXHRcdHZhciBwbCA9IHF1YWxpZmllZE5hbWUuc3BsaXQoJzonKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gbm9kZTtcblx0fVxufTtcbl9leHRlbmRzKERvY3VtZW50LE5vZGUpO1xuXG5cbmZ1bmN0aW9uIEVsZW1lbnQoKSB7XG5cdHRoaXMuX25zTWFwID0ge307XG59O1xuRWxlbWVudC5wcm90b3R5cGUgPSB7XG5cdG5vZGVUeXBlIDogRUxFTUVOVF9OT0RFLFxuXHRoYXNBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSk7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZSA6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRyZW1vdmVBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKVxuXHRcdGF0dHIgJiYgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuXHR9LFxuXHRcblx0Ly9mb3VyIHJlYWwgb3BlYXJ0aW9uIG1ldGhvZFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0aWYobmV3Q2hpbGQubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpe1xuXHRcdFx0cmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLG51bGwpO1xuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuIF9hcHBlbmRTaW5nbGVDaGlsZCh0aGlzLG5ld0NoaWxkKTtcblx0XHR9XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5vZGUgOiBmdW5jdGlvbihuZXdBdHRyKXtcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbShuZXdBdHRyKTtcblx0fSxcblx0c2V0QXR0cmlidXRlTm9kZU5TIDogZnVuY3Rpb24obmV3QXR0cil7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW1OUyhuZXdBdHRyKTtcblx0fSxcblx0cmVtb3ZlQXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG9sZEF0dHIpe1xuXHRcdC8vY29uc29sZS5sb2codGhpcyA9PSBvbGRBdHRyLm93bmVyRWxlbWVudClcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnJlbW92ZU5hbWVkSXRlbShvbGRBdHRyLm5vZGVOYW1lKTtcblx0fSxcblx0Ly9nZXQgcmVhbCBhdHRyaWJ1dGUgbmFtZSxhbmQgcmVtb3ZlIGl0IGJ5IHJlbW92ZUF0dHJpYnV0ZU5vZGVcblx0cmVtb3ZlQXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0dmFyIG9sZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0XHRvbGQgJiYgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKG9sZCk7XG5cdH0sXG5cdFxuXHRoYXNBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdH0sXG5cdFxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZSA6IGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSAmJiAodGFnTmFtZSA9PT0gJyonIHx8IG5vZGUudGFnTmFtZSA9PSB0YWdOYW1lKSl7XG5cdFx0XHRcdFx0bHMucHVzaChub2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbHM7XG5cdFx0fSk7XG5cdH0sXG5cdGdldEVsZW1lbnRzQnlUYWdOYW1lTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIG5ldyBMaXZlTm9kZUxpc3QodGhpcyxmdW5jdGlvbihiYXNlKXtcblx0XHRcdHZhciBscyA9IFtdO1xuXHRcdFx0X3Zpc2l0Tm9kZShiYXNlLGZ1bmN0aW9uKG5vZGUpe1xuXHRcdFx0XHRpZihub2RlICE9PSBiYXNlICYmIG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiAobmFtZXNwYWNlVVJJID09PSAnKicgfHwgbm9kZS5uYW1lc3BhY2VVUkkgPT09IG5hbWVzcGFjZVVSSSkgJiYgKGxvY2FsTmFtZSA9PT0gJyonIHx8IG5vZGUubG9jYWxOYW1lID09IGxvY2FsTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXHRcdFx0XG5cdFx0fSk7XG5cdH1cbn07XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZTtcbkRvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUztcblxuXG5fZXh0ZW5kcyhFbGVtZW50LE5vZGUpO1xuZnVuY3Rpb24gQXR0cigpIHtcbn07XG5BdHRyLnByb3RvdHlwZS5ub2RlVHlwZSA9IEFUVFJJQlVURV9OT0RFO1xuX2V4dGVuZHMoQXR0cixOb2RlKTtcblxuXG5mdW5jdGlvbiBDaGFyYWN0ZXJEYXRhKCkge1xufTtcbkNoYXJhY3RlckRhdGEucHJvdG90eXBlID0ge1xuXHRkYXRhIDogJycsXG5cdHN1YnN0cmluZ0RhdGEgOiBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQrY291bnQpO1xuXHR9LFxuXHRhcHBlbmREYXRhOiBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0dGV4dCA9IHRoaXMuZGF0YSt0ZXh0O1xuXHRcdHRoaXMubm9kZVZhbHVlID0gdGhpcy5kYXRhID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHR9LFxuXHRpbnNlcnREYXRhOiBmdW5jdGlvbihvZmZzZXQsdGV4dCkge1xuXHRcdHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LDAsdGV4dCk7XG5cdFxuXHR9LFxuXHRhcHBlbmRDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEV4Y2VwdGlvbk1lc3NhZ2VbSElFUkFSQ0hZX1JFUVVFU1RfRVJSXSlcblx0fSxcblx0ZGVsZXRlRGF0YTogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuXHRcdHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LGNvdW50LFwiXCIpO1xuXHR9LFxuXHRyZXBsYWNlRGF0YTogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCwgdGV4dCkge1xuXHRcdHZhciBzdGFydCA9IHRoaXMuZGF0YS5zdWJzdHJpbmcoMCxvZmZzZXQpO1xuXHRcdHZhciBlbmQgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCtjb3VudCk7XG5cdFx0dGV4dCA9IHN0YXJ0ICsgdGV4dCArIGVuZDtcblx0XHR0aGlzLm5vZGVWYWx1ZSA9IHRoaXMuZGF0YSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0fVxufVxuX2V4dGVuZHMoQ2hhcmFjdGVyRGF0YSxOb2RlKTtcbmZ1bmN0aW9uIFRleHQoKSB7XG59O1xuVGV4dC5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjdGV4dFwiLFxuXHRub2RlVHlwZSA6IFRFWFRfTk9ERSxcblx0c3BsaXRUZXh0IDogZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdFx0dmFyIHRleHQgPSB0aGlzLmRhdGE7XG5cdFx0dmFyIG5ld1RleHQgPSB0ZXh0LnN1YnN0cmluZyhvZmZzZXQpO1xuXHRcdHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBvZmZzZXQpO1xuXHRcdHRoaXMuZGF0YSA9IHRoaXMubm9kZVZhbHVlID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHRcdHZhciBuZXdOb2RlID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld1RleHQpO1xuXHRcdGlmKHRoaXMucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHRoaXMubmV4dFNpYmxpbmcpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3Tm9kZTtcblx0fVxufVxuX2V4dGVuZHMoVGV4dCxDaGFyYWN0ZXJEYXRhKTtcbmZ1bmN0aW9uIENvbW1lbnQoKSB7XG59O1xuQ29tbWVudC5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjY29tbWVudFwiLFxuXHRub2RlVHlwZSA6IENPTU1FTlRfTk9ERVxufVxuX2V4dGVuZHMoQ29tbWVudCxDaGFyYWN0ZXJEYXRhKTtcblxuZnVuY3Rpb24gQ0RBVEFTZWN0aW9uKCkge1xufTtcbkNEQVRBU2VjdGlvbi5wcm90b3R5cGUgPSB7XG5cdG5vZGVOYW1lIDogXCIjY2RhdGEtc2VjdGlvblwiLFxuXHRub2RlVHlwZSA6IENEQVRBX1NFQ1RJT05fTk9ERVxufVxuX2V4dGVuZHMoQ0RBVEFTZWN0aW9uLENoYXJhY3RlckRhdGEpO1xuXG5cbmZ1bmN0aW9uIERvY3VtZW50VHlwZSgpIHtcbn07XG5Eb2N1bWVudFR5cGUucHJvdG90eXBlLm5vZGVUeXBlID0gRE9DVU1FTlRfVFlQRV9OT0RFO1xuX2V4dGVuZHMoRG9jdW1lbnRUeXBlLE5vZGUpO1xuXG5mdW5jdGlvbiBOb3RhdGlvbigpIHtcbn07XG5Ob3RhdGlvbi5wcm90b3R5cGUubm9kZVR5cGUgPSBOT1RBVElPTl9OT0RFO1xuX2V4dGVuZHMoTm90YXRpb24sTm9kZSk7XG5cbmZ1bmN0aW9uIEVudGl0eSgpIHtcbn07XG5FbnRpdHkucHJvdG90eXBlLm5vZGVUeXBlID0gRU5USVRZX05PREU7XG5fZXh0ZW5kcyhFbnRpdHksTm9kZSk7XG5cbmZ1bmN0aW9uIEVudGl0eVJlZmVyZW5jZSgpIHtcbn07XG5FbnRpdHlSZWZlcmVuY2UucHJvdG90eXBlLm5vZGVUeXBlID0gRU5USVRZX1JFRkVSRU5DRV9OT0RFO1xuX2V4dGVuZHMoRW50aXR5UmVmZXJlbmNlLE5vZGUpO1xuXG5mdW5jdGlvbiBEb2N1bWVudEZyYWdtZW50KCkge1xufTtcbkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLm5vZGVOYW1lID1cdFwiI2RvY3VtZW50LWZyYWdtZW50XCI7XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5ub2RlVHlwZSA9XHRET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuX2V4dGVuZHMoRG9jdW1lbnRGcmFnbWVudCxOb2RlKTtcblxuXG5mdW5jdGlvbiBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oKSB7XG59XG5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLm5vZGVUeXBlID0gUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFO1xuX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLE5vZGUpO1xuZnVuY3Rpb24gWE1MU2VyaWFsaXplcigpe31cblhNTFNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZVRvU3RyaW5nID0gZnVuY3Rpb24obm9kZSxpc0h0bWwsbm9kZUZpbHRlcil7XG5cdHJldHVybiBub2RlU2VyaWFsaXplVG9TdHJpbmcuY2FsbChub2RlLGlzSHRtbCxub2RlRmlsdGVyKTtcbn1cbk5vZGUucHJvdG90eXBlLnRvU3RyaW5nID0gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nO1xuZnVuY3Rpb24gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nKGlzSHRtbCxub2RlRmlsdGVyKXtcblx0dmFyIGJ1ZiA9IFtdO1xuXHR2YXIgcmVmTm9kZSA9IHRoaXMubm9kZVR5cGUgPT0gOSAmJiB0aGlzLmRvY3VtZW50RWxlbWVudCB8fCB0aGlzO1xuXHR2YXIgcHJlZml4ID0gcmVmTm9kZS5wcmVmaXg7XG5cdHZhciB1cmkgPSByZWZOb2RlLm5hbWVzcGFjZVVSSTtcblx0XG5cdGlmKHVyaSAmJiBwcmVmaXggPT0gbnVsbCl7XG5cdFx0Ly9jb25zb2xlLmxvZyhwcmVmaXgpXG5cdFx0dmFyIHByZWZpeCA9IHJlZk5vZGUubG9va3VwUHJlZml4KHVyaSk7XG5cdFx0aWYocHJlZml4ID09IG51bGwpe1xuXHRcdFx0Ly9pc0hUTUwgPSB0cnVlO1xuXHRcdFx0dmFyIHZpc2libGVOYW1lc3BhY2VzPVtcblx0XHRcdHtuYW1lc3BhY2U6dXJpLHByZWZpeDpudWxsfVxuXHRcdFx0Ly97bmFtZXNwYWNlOnVyaSxwcmVmaXg6Jyd9XG5cdFx0XHRdXG5cdFx0fVxuXHR9XG5cdHNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMsYnVmLGlzSHRtbCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0Ly9jb25zb2xlLmxvZygnIyMjJyx0aGlzLm5vZGVUeXBlLHVyaSxwcmVmaXgsYnVmLmpvaW4oJycpKVxuXHRyZXR1cm4gYnVmLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gbmVlZE5hbWVzcGFjZURlZmluZShub2RlLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpIHtcblx0dmFyIHByZWZpeCA9IG5vZGUucHJlZml4fHwnJztcblx0dmFyIHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xuXHRpZiAoIXByZWZpeCAmJiAhdXJpKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHByZWZpeCA9PT0gXCJ4bWxcIiAmJiB1cmkgPT09IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIgXG5cdFx0fHwgdXJpID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0dmFyIGkgPSB2aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggXG5cdC8vY29uc29sZS5sb2coJ0BAQEAnLG5vZGUudGFnTmFtZSxwcmVmaXgsdXJpLHZpc2libGVOYW1lc3BhY2VzKVxuXHR3aGlsZSAoaS0tKSB7XG5cdFx0dmFyIG5zID0gdmlzaWJsZU5hbWVzcGFjZXNbaV07XG5cdFx0Ly8gZ2V0IG5hbWVzcGFjZSBwcmVmaXhcblx0XHQvL2NvbnNvbGUubG9nKG5vZGUubm9kZVR5cGUsbm9kZS50YWdOYW1lLG5zLnByZWZpeCxwcmVmaXgpXG5cdFx0aWYgKG5zLnByZWZpeCA9PSBwcmVmaXgpe1xuXHRcdFx0cmV0dXJuIG5zLm5hbWVzcGFjZSAhPSB1cmk7XG5cdFx0fVxuXHR9XG5cdC8vY29uc29sZS5sb2coaXNIVE1MLHVyaSxwcmVmaXg9PScnKVxuXHQvL2lmKGlzSFRNTCAmJiBwcmVmaXggPT1udWxsICYmIHVyaSA9PSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpe1xuXHQvL1x0cmV0dXJuIGZhbHNlO1xuXHQvL31cblx0Ly9ub2RlLmZsYWcgPSAnMTExMTEnXG5cdC8vY29uc29sZS5lcnJvcigzLHRydWUsbm9kZS5mbGFnLG5vZGUucHJlZml4LG5vZGUubmFtZXNwYWNlVVJJKVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKXtcblx0aWYobm9kZUZpbHRlcil7XG5cdFx0bm9kZSA9IG5vZGVGaWx0ZXIobm9kZSk7XG5cdFx0aWYobm9kZSl7XG5cdFx0XHRpZih0eXBlb2Ygbm9kZSA9PSAnc3RyaW5nJyl7XG5cdFx0XHRcdGJ1Zi5wdXNoKG5vZGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fWVsc2V7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vYnVmLnNvcnQuYXBwbHkoYXR0cnMsIGF0dHJpYnV0ZVNvcnRlcik7XG5cdH1cblx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRpZiAoIXZpc2libGVOYW1lc3BhY2VzKSB2aXNpYmxlTmFtZXNwYWNlcyA9IFtdO1xuXHRcdHZhciBzdGFydFZpc2libGVOYW1lc3BhY2VzID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoO1xuXHRcdHZhciBhdHRycyA9IG5vZGUuYXR0cmlidXRlcztcblx0XHR2YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR2YXIgbm9kZU5hbWUgPSBub2RlLnRhZ05hbWU7XG5cdFx0XG5cdFx0aXNIVE1MID0gIChodG1sbnMgPT09IG5vZGUubmFtZXNwYWNlVVJJKSB8fGlzSFRNTCBcblx0XHRidWYucHVzaCgnPCcsbm9kZU5hbWUpO1xuXHRcdFxuXHRcdFxuXHRcdFxuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHQvLyBhZGQgbmFtZXNwYWNlcyBmb3IgYXR0cmlidXRlc1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKGF0dHIucHJlZml4ID09ICd4bWxucycpIHtcblx0XHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogYXR0ci5sb2NhbE5hbWUsIG5hbWVzcGFjZTogYXR0ci52YWx1ZSB9KTtcblx0XHRcdH1lbHNlIGlmKGF0dHIubm9kZU5hbWUgPT0gJ3htbG5zJyl7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6ICcnLCBuYW1lc3BhY2U6IGF0dHIudmFsdWUgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHR2YXIgYXR0ciA9IGF0dHJzLml0ZW0oaSk7XG5cdFx0XHRpZiAobmVlZE5hbWVzcGFjZURlZmluZShhdHRyLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpKSB7XG5cdFx0XHRcdHZhciBwcmVmaXggPSBhdHRyLnByZWZpeHx8Jyc7XG5cdFx0XHRcdHZhciB1cmkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcblx0XHRcdFx0dmFyIG5zID0gcHJlZml4ID8gJyB4bWxuczonICsgcHJlZml4IDogXCIgeG1sbnNcIjtcblx0XHRcdFx0YnVmLnB1c2gobnMsICc9XCInICwgdXJpICwgJ1wiJyk7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IHByZWZpeCwgbmFtZXNwYWNlOnVyaSB9KTtcblx0XHRcdH1cblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGF0dHIsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0XHR9XG5cdFx0Ly8gYWRkIG5hbWVzcGFjZSBmb3IgY3VycmVudCBub2RlXHRcdFxuXHRcdGlmIChuZWVkTmFtZXNwYWNlRGVmaW5lKG5vZGUsaXNIVE1MLCB2aXNpYmxlTmFtZXNwYWNlcykpIHtcblx0XHRcdHZhciBwcmVmaXggPSBub2RlLnByZWZpeHx8Jyc7XG5cdFx0XHR2YXIgdXJpID0gbm9kZS5uYW1lc3BhY2VVUkk7XG5cdFx0XHR2YXIgbnMgPSBwcmVmaXggPyAnIHhtbG5zOicgKyBwcmVmaXggOiBcIiB4bWxuc1wiO1xuXHRcdFx0YnVmLnB1c2gobnMsICc9XCInICwgdXJpICwgJ1wiJyk7XG5cdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTp1cmkgfSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoaWxkIHx8IGlzSFRNTCAmJiAhL14oPzptZXRhfGxpbmt8aW1nfGJyfGhyfGlucHV0KSQvaS50ZXN0KG5vZGVOYW1lKSl7XG5cdFx0XHRidWYucHVzaCgnPicpO1xuXHRcdFx0Ly9pZiBpcyBjZGF0YSBjaGlsZCBub2RlXG5cdFx0XHRpZihpc0hUTUwgJiYgL15zY3JpcHQkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0aWYoY2hpbGQuZGF0YSl7XG5cdFx0XHRcdFx0XHRidWYucHVzaChjaGlsZC5kYXRhKTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCc8Lycsbm9kZU5hbWUsJz4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdGJ1Zi5wdXNoKCcvPicpO1xuXHRcdH1cblx0XHQvLyByZW1vdmUgYWRkZWQgdmlzaWJsZSBuYW1lc3BhY2VzXG5cdFx0Ly92aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggPSBzdGFydFZpc2libGVOYW1lc3BhY2VzO1xuXHRcdHJldHVybjtcblx0Y2FzZSBET0NVTUVOVF9OT0RFOlxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0Ly8gJiMxMDsgYWRkZWQgYmVmb3JlIHRoZSBvdGhlciBjaGFyYWN0ZXJzIHRvIGF2b2lkIGl0cyAmIGJlaW5nIHJlcGxhY2VkXG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCcgJyxub2RlLm5hbWUsJz1cIicsbm9kZS52YWx1ZS5yZXBsYWNlKC8mIzEwO3xbPCZcIlxcbl0vZyxfeG1sRW5jb2RlciksJ1wiJyk7XG5cdGNhc2UgVEVYVF9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaChub2RlLmRhdGEucmVwbGFjZSgvWzwmXS9nLF94bWxFbmNvZGVyKSk7XG5cdGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJzwhW0NEQVRBWycsbm9kZS5kYXRhLCddXT4nKTtcblx0Y2FzZSBDT01NRU5UX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjwhLS1cIixub2RlLmRhdGEsXCItLT5cIik7XG5cdGNhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHRcdHZhciBwdWJpZCA9IG5vZGUucHVibGljSWQ7XG5cdFx0dmFyIHN5c2lkID0gbm9kZS5zeXN0ZW1JZDtcblx0XHRidWYucHVzaCgnPCFET0NUWVBFICcsbm9kZS5uYW1lKTtcblx0XHRpZihwdWJpZCl7XG5cdFx0XHRidWYucHVzaCgnIFBVQkxJQyBcIicscHViaWQpO1xuXHRcdFx0aWYgKHN5c2lkICYmIHN5c2lkIT0nLicpIHtcblx0XHRcdFx0YnVmLnB1c2goICdcIiBcIicsc3lzaWQpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLnB1c2goJ1wiPicpO1xuXHRcdH1lbHNlIGlmKHN5c2lkICYmIHN5c2lkIT0nLicpe1xuXHRcdFx0YnVmLnB1c2goJyBTWVNURU0gXCInLHN5c2lkLCdcIj4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzdWIgPSBub2RlLmludGVybmFsU3Vic2V0O1xuXHRcdFx0aWYoc3ViKXtcblx0XHRcdFx0YnVmLnB1c2goXCIgW1wiLHN1YixcIl1cIik7XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaChcIj5cIik7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0Y2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjw/XCIsbm9kZS50YXJnZXQsXCIgXCIsbm9kZS5kYXRhLFwiPz5cIik7XG5cdGNhc2UgRU5USVRZX1JFRkVSRU5DRV9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJyYnLG5vZGUubm9kZU5hbWUsJzsnKTtcblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERTpcblx0ZGVmYXVsdDpcblx0XHRidWYucHVzaCgnPz8nLG5vZGUubm9kZU5hbWUpO1xuXHR9XG59XG5mdW5jdGlvbiBpbXBvcnROb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTI7XG5cdHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcblx0XHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRcdC8vdmFyIGF0dHJzID0gbm9kZTIuYXR0cmlidXRlcztcblx0XHQvL3ZhciBsZW4gPSBhdHRycy5sZW5ndGg7XG5cdFx0Ly9mb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0Ly9ub2RlMi5zZXRBdHRyaWJ1dGVOb2RlTlMoaW1wb3J0Tm9kZShkb2MsYXR0cnMuaXRlbShpKSxkZWVwKSk7XG5cdFx0Ly99XG5cdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRicmVhaztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0XHRicmVhaztcblx0Ly9jYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0Ly9jYXNlIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTpcblx0Ly8vL2Nhc2UgVEVYVF9OT0RFOlxuXHQvL2Nhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHQvL2Nhc2UgQ09NTUVOVF9OT0RFOlxuXHQvL1x0ZGVlcCA9IGZhbHNlO1xuXHQvL1x0YnJlYWs7XG5cdC8vY2FzZSBET0NVTUVOVF9OT0RFOlxuXHQvL2Nhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHQvL2Nhbm5vdCBiZSBpbXBvcnRlZC5cblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERe+8mlxuXHQvL2NhbiBub3QgaGl0IGluIGxldmVsM1xuXHQvL2RlZmF1bHQ6dGhyb3cgZTtcblx0fVxuXHRpZighbm9kZTIpe1xuXHRcdG5vZGUyID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOy8vZmFsc2Vcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRub2RlMi5wYXJlbnROb2RlID0gbnVsbDtcblx0aWYoZGVlcCl7XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdG5vZGUyLmFwcGVuZENoaWxkKGltcG9ydE5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cbi8vXG4vL3ZhciBfcmVsYXRpb25NYXAgPSB7Zmlyc3RDaGlsZDoxLGxhc3RDaGlsZDoxLHByZXZpb3VzU2libGluZzoxLG5leHRTaWJsaW5nOjEsXG4vL1x0XHRcdFx0XHRhdHRyaWJ1dGVzOjEsY2hpbGROb2RlczoxLHBhcmVudE5vZGU6MSxkb2N1bWVudEVsZW1lbnQ6MSxkb2N0eXBlLH07XG5mdW5jdGlvbiBjbG9uZU5vZGUoZG9jLG5vZGUsZGVlcCl7XG5cdHZhciBub2RlMiA9IG5ldyBub2RlLmNvbnN0cnVjdG9yKCk7XG5cdGZvcih2YXIgbiBpbiBub2RlKXtcblx0XHR2YXIgdiA9IG5vZGVbbl07XG5cdFx0aWYodHlwZW9mIHYgIT0gJ29iamVjdCcgKXtcblx0XHRcdGlmKHYgIT0gbm9kZTJbbl0pe1xuXHRcdFx0XHRub2RlMltuXSA9IHY7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmKG5vZGUuY2hpbGROb2Rlcyl7XG5cdFx0bm9kZTIuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHR9XG5cdG5vZGUyLm93bmVyRG9jdW1lbnQgPSBkb2M7XG5cdHN3aXRjaCAobm9kZTIubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcztcblx0XHR2YXIgYXR0cnMyXHQ9IG5vZGUyLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aFxuXHRcdGF0dHJzMi5fb3duZXJFbGVtZW50ID0gbm9kZTI7XG5cdFx0Zm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdG5vZGUyLnNldEF0dHJpYnV0ZU5vZGUoY2xvbmVOb2RlKGRvYyxhdHRycy5pdGVtKGkpLHRydWUpKTtcblx0XHR9XG5cdFx0YnJlYWs7O1xuXHRjYXNlIEFUVFJJQlVURV9OT0RFOlxuXHRcdGRlZXAgPSB0cnVlO1xuXHR9XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChjbG9uZU5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cblxuZnVuY3Rpb24gX19zZXRfXyhvYmplY3Qsa2V5LHZhbHVlKXtcblx0b2JqZWN0W2tleV0gPSB2YWx1ZVxufVxuLy9kbyBkeW5hbWljXG50cnl7XG5cdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSl7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KExpdmVOb2RlTGlzdC5wcm90b3R5cGUsJ2xlbmd0aCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJCRsZW5ndGg7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCd0ZXh0Q29udGVudCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJldHVybiBnZXRUZXh0Q29udGVudCh0aGlzKTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdHN3aXRjaCh0aGlzLm5vZGVUeXBlKXtcblx0XHRcdFx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0XHRcdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRcdFx0XHR3aGlsZSh0aGlzLmZpcnN0Q2hpbGQpe1xuXHRcdFx0XHRcdFx0dGhpcy5yZW1vdmVDaGlsZCh0aGlzLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihkYXRhIHx8IFN0cmluZyhkYXRhKSl7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcGVuZENoaWxkKHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vVE9ETzpcblx0XHRcdFx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSBkYXRhO1xuXHRcdFx0XHRcdHRoaXMubm9kZVZhbHVlID0gZGF0YTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0XG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSl7XG5cdFx0XHRzd2l0Y2gobm9kZS5ub2RlVHlwZSl7XG5cdFx0XHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRcdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRcdFx0dmFyIGJ1ZiA9IFtdO1xuXHRcdFx0XHRub2RlID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdFx0XHR3aGlsZShub2RlKXtcblx0XHRcdFx0XHRpZihub2RlLm5vZGVUeXBlIT09NyAmJiBub2RlLm5vZGVUeXBlICE9PTgpe1xuXHRcdFx0XHRcdFx0YnVmLnB1c2goZ2V0VGV4dENvbnRlbnQobm9kZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRub2RlID0gbm9kZS5uZXh0U2libGluZztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYnVmLmpvaW4oJycpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIG5vZGUubm9kZVZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRfX3NldF9fID0gZnVuY3Rpb24ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHZhbHVlKVxuXHRcdFx0b2JqZWN0WyckJCcra2V5XSA9IHZhbHVlXG5cdFx0fVxuXHR9XG59Y2F0Y2goZSl7Ly9pZThcbn1cblxuLy9pZih0eXBlb2YgcmVxdWlyZSA9PSAnZnVuY3Rpb24nKXtcblx0ZXhwb3J0cy5ET01JbXBsZW1lbnRhdGlvbiA9IERPTUltcGxlbWVudGF0aW9uO1xuXHRleHBvcnRzLlhNTFNlcmlhbGl6ZXIgPSBYTUxTZXJpYWxpemVyO1xuLy99XG4iLCJleHBvcnRzLmVudGl0eU1hcCA9IHtcbiAgICAgICBsdDogJzwnLFxuICAgICAgIGd0OiAnPicsXG4gICAgICAgYW1wOiAnJicsXG4gICAgICAgcXVvdDogJ1wiJyxcbiAgICAgICBhcG9zOiBcIidcIixcbiAgICAgICBBZ3JhdmU6IFwiw4BcIixcbiAgICAgICBBYWN1dGU6IFwiw4FcIixcbiAgICAgICBBY2lyYzogXCLDglwiLFxuICAgICAgIEF0aWxkZTogXCLDg1wiLFxuICAgICAgIEF1bWw6IFwiw4RcIixcbiAgICAgICBBcmluZzogXCLDhVwiLFxuICAgICAgIEFFbGlnOiBcIsOGXCIsXG4gICAgICAgQ2NlZGlsOiBcIsOHXCIsXG4gICAgICAgRWdyYXZlOiBcIsOIXCIsXG4gICAgICAgRWFjdXRlOiBcIsOJXCIsXG4gICAgICAgRWNpcmM6IFwiw4pcIixcbiAgICAgICBFdW1sOiBcIsOLXCIsXG4gICAgICAgSWdyYXZlOiBcIsOMXCIsXG4gICAgICAgSWFjdXRlOiBcIsONXCIsXG4gICAgICAgSWNpcmM6IFwiw45cIixcbiAgICAgICBJdW1sOiBcIsOPXCIsXG4gICAgICAgRVRIOiBcIsOQXCIsXG4gICAgICAgTnRpbGRlOiBcIsORXCIsXG4gICAgICAgT2dyYXZlOiBcIsOSXCIsXG4gICAgICAgT2FjdXRlOiBcIsOTXCIsXG4gICAgICAgT2NpcmM6IFwiw5RcIixcbiAgICAgICBPdGlsZGU6IFwiw5VcIixcbiAgICAgICBPdW1sOiBcIsOWXCIsXG4gICAgICAgT3NsYXNoOiBcIsOYXCIsXG4gICAgICAgVWdyYXZlOiBcIsOZXCIsXG4gICAgICAgVWFjdXRlOiBcIsOaXCIsXG4gICAgICAgVWNpcmM6IFwiw5tcIixcbiAgICAgICBVdW1sOiBcIsOcXCIsXG4gICAgICAgWWFjdXRlOiBcIsOdXCIsXG4gICAgICAgVEhPUk46IFwiw55cIixcbiAgICAgICBzemxpZzogXCLDn1wiLFxuICAgICAgIGFncmF2ZTogXCLDoFwiLFxuICAgICAgIGFhY3V0ZTogXCLDoVwiLFxuICAgICAgIGFjaXJjOiBcIsOiXCIsXG4gICAgICAgYXRpbGRlOiBcIsOjXCIsXG4gICAgICAgYXVtbDogXCLDpFwiLFxuICAgICAgIGFyaW5nOiBcIsOlXCIsXG4gICAgICAgYWVsaWc6IFwiw6ZcIixcbiAgICAgICBjY2VkaWw6IFwiw6dcIixcbiAgICAgICBlZ3JhdmU6IFwiw6hcIixcbiAgICAgICBlYWN1dGU6IFwiw6lcIixcbiAgICAgICBlY2lyYzogXCLDqlwiLFxuICAgICAgIGV1bWw6IFwiw6tcIixcbiAgICAgICBpZ3JhdmU6IFwiw6xcIixcbiAgICAgICBpYWN1dGU6IFwiw61cIixcbiAgICAgICBpY2lyYzogXCLDrlwiLFxuICAgICAgIGl1bWw6IFwiw69cIixcbiAgICAgICBldGg6IFwiw7BcIixcbiAgICAgICBudGlsZGU6IFwiw7FcIixcbiAgICAgICBvZ3JhdmU6IFwiw7JcIixcbiAgICAgICBvYWN1dGU6IFwiw7NcIixcbiAgICAgICBvY2lyYzogXCLDtFwiLFxuICAgICAgIG90aWxkZTogXCLDtVwiLFxuICAgICAgIG91bWw6IFwiw7ZcIixcbiAgICAgICBvc2xhc2g6IFwiw7hcIixcbiAgICAgICB1Z3JhdmU6IFwiw7lcIixcbiAgICAgICB1YWN1dGU6IFwiw7pcIixcbiAgICAgICB1Y2lyYzogXCLDu1wiLFxuICAgICAgIHV1bWw6IFwiw7xcIixcbiAgICAgICB5YWN1dGU6IFwiw71cIixcbiAgICAgICB0aG9ybjogXCLDvlwiLFxuICAgICAgIHl1bWw6IFwiw79cIixcbiAgICAgICBuYnNwOiBcIiBcIixcbiAgICAgICBpZXhjbDogXCLCoVwiLFxuICAgICAgIGNlbnQ6IFwiwqJcIixcbiAgICAgICBwb3VuZDogXCLCo1wiLFxuICAgICAgIGN1cnJlbjogXCLCpFwiLFxuICAgICAgIHllbjogXCLCpVwiLFxuICAgICAgIGJydmJhcjogXCLCplwiLFxuICAgICAgIHNlY3Q6IFwiwqdcIixcbiAgICAgICB1bWw6IFwiwqhcIixcbiAgICAgICBjb3B5OiBcIsKpXCIsXG4gICAgICAgb3JkZjogXCLCqlwiLFxuICAgICAgIGxhcXVvOiBcIsKrXCIsXG4gICAgICAgbm90OiBcIsKsXCIsXG4gICAgICAgc2h5OiBcIsKtwq1cIixcbiAgICAgICByZWc6IFwiwq5cIixcbiAgICAgICBtYWNyOiBcIsKvXCIsXG4gICAgICAgZGVnOiBcIsKwXCIsXG4gICAgICAgcGx1c21uOiBcIsKxXCIsXG4gICAgICAgc3VwMjogXCLCslwiLFxuICAgICAgIHN1cDM6IFwiwrNcIixcbiAgICAgICBhY3V0ZTogXCLCtFwiLFxuICAgICAgIG1pY3JvOiBcIsK1XCIsXG4gICAgICAgcGFyYTogXCLCtlwiLFxuICAgICAgIG1pZGRvdDogXCLCt1wiLFxuICAgICAgIGNlZGlsOiBcIsK4XCIsXG4gICAgICAgc3VwMTogXCLCuVwiLFxuICAgICAgIG9yZG06IFwiwrpcIixcbiAgICAgICByYXF1bzogXCLCu1wiLFxuICAgICAgIGZyYWMxNDogXCLCvFwiLFxuICAgICAgIGZyYWMxMjogXCLCvVwiLFxuICAgICAgIGZyYWMzNDogXCLCvlwiLFxuICAgICAgIGlxdWVzdDogXCLCv1wiLFxuICAgICAgIHRpbWVzOiBcIsOXXCIsXG4gICAgICAgZGl2aWRlOiBcIsO3XCIsXG4gICAgICAgZm9yYWxsOiBcIuKIgFwiLFxuICAgICAgIHBhcnQ6IFwi4oiCXCIsXG4gICAgICAgZXhpc3Q6IFwi4oiDXCIsXG4gICAgICAgZW1wdHk6IFwi4oiFXCIsXG4gICAgICAgbmFibGE6IFwi4oiHXCIsXG4gICAgICAgaXNpbjogXCLiiIhcIixcbiAgICAgICBub3RpbjogXCLiiIlcIixcbiAgICAgICBuaTogXCLiiItcIixcbiAgICAgICBwcm9kOiBcIuKIj1wiLFxuICAgICAgIHN1bTogXCLiiJFcIixcbiAgICAgICBtaW51czogXCLiiJJcIixcbiAgICAgICBsb3dhc3Q6IFwi4oiXXCIsXG4gICAgICAgcmFkaWM6IFwi4oiaXCIsXG4gICAgICAgcHJvcDogXCLiiJ1cIixcbiAgICAgICBpbmZpbjogXCLiiJ5cIixcbiAgICAgICBhbmc6IFwi4oigXCIsXG4gICAgICAgYW5kOiBcIuKIp1wiLFxuICAgICAgIG9yOiBcIuKIqFwiLFxuICAgICAgIGNhcDogXCLiiKlcIixcbiAgICAgICBjdXA6IFwi4oiqXCIsXG4gICAgICAgJ2ludCc6IFwi4oirXCIsXG4gICAgICAgdGhlcmU0OiBcIuKItFwiLFxuICAgICAgIHNpbTogXCLiiLxcIixcbiAgICAgICBjb25nOiBcIuKJhVwiLFxuICAgICAgIGFzeW1wOiBcIuKJiFwiLFxuICAgICAgIG5lOiBcIuKJoFwiLFxuICAgICAgIGVxdWl2OiBcIuKJoVwiLFxuICAgICAgIGxlOiBcIuKJpFwiLFxuICAgICAgIGdlOiBcIuKJpVwiLFxuICAgICAgIHN1YjogXCLiioJcIixcbiAgICAgICBzdXA6IFwi4oqDXCIsXG4gICAgICAgbnN1YjogXCLiioRcIixcbiAgICAgICBzdWJlOiBcIuKKhlwiLFxuICAgICAgIHN1cGU6IFwi4oqHXCIsXG4gICAgICAgb3BsdXM6IFwi4oqVXCIsXG4gICAgICAgb3RpbWVzOiBcIuKKl1wiLFxuICAgICAgIHBlcnA6IFwi4oqlXCIsXG4gICAgICAgc2RvdDogXCLii4VcIixcbiAgICAgICBBbHBoYTogXCLOkVwiLFxuICAgICAgIEJldGE6IFwizpJcIixcbiAgICAgICBHYW1tYTogXCLOk1wiLFxuICAgICAgIERlbHRhOiBcIs6UXCIsXG4gICAgICAgRXBzaWxvbjogXCLOlVwiLFxuICAgICAgIFpldGE6IFwizpZcIixcbiAgICAgICBFdGE6IFwizpdcIixcbiAgICAgICBUaGV0YTogXCLOmFwiLFxuICAgICAgIElvdGE6IFwizplcIixcbiAgICAgICBLYXBwYTogXCLOmlwiLFxuICAgICAgIExhbWJkYTogXCLOm1wiLFxuICAgICAgIE11OiBcIs6cXCIsXG4gICAgICAgTnU6IFwizp1cIixcbiAgICAgICBYaTogXCLOnlwiLFxuICAgICAgIE9taWNyb246IFwizp9cIixcbiAgICAgICBQaTogXCLOoFwiLFxuICAgICAgIFJobzogXCLOoVwiLFxuICAgICAgIFNpZ21hOiBcIs6jXCIsXG4gICAgICAgVGF1OiBcIs6kXCIsXG4gICAgICAgVXBzaWxvbjogXCLOpVwiLFxuICAgICAgIFBoaTogXCLOplwiLFxuICAgICAgIENoaTogXCLOp1wiLFxuICAgICAgIFBzaTogXCLOqFwiLFxuICAgICAgIE9tZWdhOiBcIs6pXCIsXG4gICAgICAgYWxwaGE6IFwizrFcIixcbiAgICAgICBiZXRhOiBcIs6yXCIsXG4gICAgICAgZ2FtbWE6IFwizrNcIixcbiAgICAgICBkZWx0YTogXCLOtFwiLFxuICAgICAgIGVwc2lsb246IFwizrVcIixcbiAgICAgICB6ZXRhOiBcIs62XCIsXG4gICAgICAgZXRhOiBcIs63XCIsXG4gICAgICAgdGhldGE6IFwizrhcIixcbiAgICAgICBpb3RhOiBcIs65XCIsXG4gICAgICAga2FwcGE6IFwizrpcIixcbiAgICAgICBsYW1iZGE6IFwizrtcIixcbiAgICAgICBtdTogXCLOvFwiLFxuICAgICAgIG51OiBcIs69XCIsXG4gICAgICAgeGk6IFwizr5cIixcbiAgICAgICBvbWljcm9uOiBcIs6/XCIsXG4gICAgICAgcGk6IFwiz4BcIixcbiAgICAgICByaG86IFwiz4FcIixcbiAgICAgICBzaWdtYWY6IFwiz4JcIixcbiAgICAgICBzaWdtYTogXCLPg1wiLFxuICAgICAgIHRhdTogXCLPhFwiLFxuICAgICAgIHVwc2lsb246IFwiz4VcIixcbiAgICAgICBwaGk6IFwiz4ZcIixcbiAgICAgICBjaGk6IFwiz4dcIixcbiAgICAgICBwc2k6IFwiz4hcIixcbiAgICAgICBvbWVnYTogXCLPiVwiLFxuICAgICAgIHRoZXRhc3ltOiBcIs+RXCIsXG4gICAgICAgdXBzaWg6IFwiz5JcIixcbiAgICAgICBwaXY6IFwiz5ZcIixcbiAgICAgICBPRWxpZzogXCLFklwiLFxuICAgICAgIG9lbGlnOiBcIsWTXCIsXG4gICAgICAgU2Nhcm9uOiBcIsWgXCIsXG4gICAgICAgc2Nhcm9uOiBcIsWhXCIsXG4gICAgICAgWXVtbDogXCLFuFwiLFxuICAgICAgIGZub2Y6IFwixpJcIixcbiAgICAgICBjaXJjOiBcIsuGXCIsXG4gICAgICAgdGlsZGU6IFwiy5xcIixcbiAgICAgICBlbnNwOiBcIuKAglwiLFxuICAgICAgIGVtc3A6IFwi4oCDXCIsXG4gICAgICAgdGhpbnNwOiBcIuKAiVwiLFxuICAgICAgIHp3bmo6IFwi4oCMXCIsXG4gICAgICAgendqOiBcIuKAjVwiLFxuICAgICAgIGxybTogXCLigI5cIixcbiAgICAgICBybG06IFwi4oCPXCIsXG4gICAgICAgbmRhc2g6IFwi4oCTXCIsXG4gICAgICAgbWRhc2g6IFwi4oCUXCIsXG4gICAgICAgbHNxdW86IFwi4oCYXCIsXG4gICAgICAgcnNxdW86IFwi4oCZXCIsXG4gICAgICAgc2JxdW86IFwi4oCaXCIsXG4gICAgICAgbGRxdW86IFwi4oCcXCIsXG4gICAgICAgcmRxdW86IFwi4oCdXCIsXG4gICAgICAgYmRxdW86IFwi4oCeXCIsXG4gICAgICAgZGFnZ2VyOiBcIuKAoFwiLFxuICAgICAgIERhZ2dlcjogXCLigKFcIixcbiAgICAgICBidWxsOiBcIuKAolwiLFxuICAgICAgIGhlbGxpcDogXCLigKZcIixcbiAgICAgICBwZXJtaWw6IFwi4oCwXCIsXG4gICAgICAgcHJpbWU6IFwi4oCyXCIsXG4gICAgICAgUHJpbWU6IFwi4oCzXCIsXG4gICAgICAgbHNhcXVvOiBcIuKAuVwiLFxuICAgICAgIHJzYXF1bzogXCLigLpcIixcbiAgICAgICBvbGluZTogXCLigL5cIixcbiAgICAgICBldXJvOiBcIuKCrFwiLFxuICAgICAgIHRyYWRlOiBcIuKEolwiLFxuICAgICAgIGxhcnI6IFwi4oaQXCIsXG4gICAgICAgdWFycjogXCLihpFcIixcbiAgICAgICByYXJyOiBcIuKGklwiLFxuICAgICAgIGRhcnI6IFwi4oaTXCIsXG4gICAgICAgaGFycjogXCLihpRcIixcbiAgICAgICBjcmFycjogXCLihrVcIixcbiAgICAgICBsY2VpbDogXCLijIhcIixcbiAgICAgICByY2VpbDogXCLijIlcIixcbiAgICAgICBsZmxvb3I6IFwi4oyKXCIsXG4gICAgICAgcmZsb29yOiBcIuKMi1wiLFxuICAgICAgIGxvejogXCLil4pcIixcbiAgICAgICBzcGFkZXM6IFwi4pmgXCIsXG4gICAgICAgY2x1YnM6IFwi4pmjXCIsXG4gICAgICAgaGVhcnRzOiBcIuKZpVwiLFxuICAgICAgIGRpYW1zOiBcIuKZplwiXG59O1xuLy9mb3IodmFyICBuIGluIGV4cG9ydHMuZW50aXR5TWFwKXtjb25zb2xlLmxvZyhleHBvcnRzLmVudGl0eU1hcFtuXS5jaGFyQ29kZUF0KCkpfSIsIi8vWzRdICAgXHROYW1lU3RhcnRDaGFyXHQgICA6Oj0gICBcdFwiOlwiIHwgW0EtWl0gfCBcIl9cIiB8IFthLXpdIHwgWyN4QzAtI3hENl0gfCBbI3hEOC0jeEY2XSB8IFsjeEY4LSN4MkZGXSB8IFsjeDM3MC0jeDM3RF0gfCBbI3gzN0YtI3gxRkZGXSB8IFsjeDIwMEMtI3gyMDBEXSB8IFsjeDIwNzAtI3gyMThGXSB8IFsjeDJDMDAtI3gyRkVGXSB8IFsjeDMwMDEtI3hEN0ZGXSB8IFsjeEY5MDAtI3hGRENGXSB8IFsjeEZERjAtI3hGRkZEXSB8IFsjeDEwMDAwLSN4RUZGRkZdXHJcbi8vWzRhXSAgIFx0TmFtZUNoYXJcdCAgIDo6PSAgIFx0TmFtZVN0YXJ0Q2hhciB8IFwiLVwiIHwgXCIuXCIgfCBbMC05XSB8ICN4QjcgfCBbI3gwMzAwLSN4MDM2Rl0gfCBbI3gyMDNGLSN4MjA0MF1cclxuLy9bNV0gICBcdE5hbWVcdCAgIDo6PSAgIFx0TmFtZVN0YXJ0Q2hhciAoTmFtZUNoYXIpKlxyXG52YXIgbmFtZVN0YXJ0Q2hhciA9IC9bQS1aX2EtelxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdLy8vXFx1MTAwMDAtXFx1RUZGRkZcclxudmFyIG5hbWVDaGFyID0gbmV3IFJlZ0V4cChcIltcXFxcLVxcXFwuMC05XCIrbmFtZVN0YXJ0Q2hhci5zb3VyY2Uuc2xpY2UoMSwtMSkrXCJcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MF1cIik7XHJcbnZhciB0YWdOYW1lUGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nK25hbWVTdGFydENoYXIuc291cmNlK25hbWVDaGFyLnNvdXJjZSsnKig/OlxcOicrbmFtZVN0YXJ0Q2hhci5zb3VyY2UrbmFtZUNoYXIuc291cmNlKycqKT8kJyk7XHJcbi8vdmFyIHRhZ05hbWVQYXR0ZXJuID0gL15bYS16QS1aX11bXFx3XFwtXFwuXSooPzpcXDpbYS16QS1aX11bXFx3XFwtXFwuXSopPyQvXHJcbi8vdmFyIGhhbmRsZXJzID0gJ3Jlc29sdmVFbnRpdHksZ2V0RXh0ZXJuYWxTdWJzZXQsY2hhcmFjdGVycyxlbmREb2N1bWVudCxlbmRFbGVtZW50LGVuZFByZWZpeE1hcHBpbmcsaWdub3JhYmxlV2hpdGVzcGFjZSxwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sc2V0RG9jdW1lbnRMb2NhdG9yLHNraXBwZWRFbnRpdHksc3RhcnREb2N1bWVudCxzdGFydEVsZW1lbnQsc3RhcnRQcmVmaXhNYXBwaW5nLG5vdGF0aW9uRGVjbCx1bnBhcnNlZEVudGl0eURlY2wsZXJyb3IsZmF0YWxFcnJvcix3YXJuaW5nLGF0dHJpYnV0ZURlY2wsZWxlbWVudERlY2wsZXh0ZXJuYWxFbnRpdHlEZWNsLGludGVybmFsRW50aXR5RGVjbCxjb21tZW50LGVuZENEQVRBLGVuZERURCxlbmRFbnRpdHksc3RhcnRDREFUQSxzdGFydERURCxzdGFydEVudGl0eScuc3BsaXQoJywnKVxyXG5cclxuLy9TX1RBRyxcdFNfQVRUUixcdFNfRVEsXHRTX0FUVFJfTk9RVU9UX1ZBTFVFXHJcbi8vU19BVFRSX1NQQUNFLFx0U19BVFRSX0VORCxcdFNfVEFHX1NQQUNFLCBTX1RBR19DTE9TRVxyXG52YXIgU19UQUcgPSAwOy8vdGFnIG5hbWUgb2ZmZXJyaW5nXHJcbnZhciBTX0FUVFIgPSAxOy8vYXR0ciBuYW1lIG9mZmVycmluZyBcclxudmFyIFNfQVRUUl9TUEFDRT0yOy8vYXR0ciBuYW1lIGVuZCBhbmQgc3BhY2Ugb2ZmZXJcclxudmFyIFNfRVEgPSAzOy8vPXNwYWNlP1xyXG52YXIgU19BVFRSX05PUVVPVF9WQUxVRSA9IDQ7Ly9hdHRyIHZhbHVlKG5vIHF1b3QgdmFsdWUgb25seSlcclxudmFyIFNfQVRUUl9FTkQgPSA1Oy8vYXR0ciB2YWx1ZSBlbmQgYW5kIG5vIHNwYWNlKHF1b3QgZW5kKVxyXG52YXIgU19UQUdfU1BBQ0UgPSA2Oy8vKGF0dHIgdmFsdWUgZW5kIHx8IHRhZyBlbmQgKSAmJiAoc3BhY2Ugb2ZmZXIpXHJcbnZhciBTX1RBR19DTE9TRSA9IDc7Ly9jbG9zZWQgZWw8ZWwgLz5cclxuXHJcbmZ1bmN0aW9uIFhNTFJlYWRlcigpe1xyXG5cdFxyXG59XHJcblxyXG5YTUxSZWFkZXIucHJvdG90eXBlID0ge1xyXG5cdHBhcnNlOmZ1bmN0aW9uKHNvdXJjZSxkZWZhdWx0TlNNYXAsZW50aXR5TWFwKXtcclxuXHRcdHZhciBkb21CdWlsZGVyID0gdGhpcy5kb21CdWlsZGVyO1xyXG5cdFx0ZG9tQnVpbGRlci5zdGFydERvY3VtZW50KCk7XHJcblx0XHRfY29weShkZWZhdWx0TlNNYXAgLGRlZmF1bHROU01hcCA9IHt9KVxyXG5cdFx0cGFyc2Uoc291cmNlLGRlZmF1bHROU01hcCxlbnRpdHlNYXAsXHJcblx0XHRcdFx0ZG9tQnVpbGRlcix0aGlzLmVycm9ySGFuZGxlcik7XHJcblx0XHRkb21CdWlsZGVyLmVuZERvY3VtZW50KCk7XHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIHBhcnNlKHNvdXJjZSxkZWZhdWx0TlNNYXBDb3B5LGVudGl0eU1hcCxkb21CdWlsZGVyLGVycm9ySGFuZGxlcil7XHJcblx0ZnVuY3Rpb24gZml4ZWRGcm9tQ2hhckNvZGUoY29kZSkge1xyXG5cdFx0Ly8gU3RyaW5nLnByb3RvdHlwZS5mcm9tQ2hhckNvZGUgZG9lcyBub3Qgc3VwcG9ydHNcclxuXHRcdC8vID4gMiBieXRlcyB1bmljb2RlIGNoYXJzIGRpcmVjdGx5XHJcblx0XHRpZiAoY29kZSA+IDB4ZmZmZikge1xyXG5cdFx0XHRjb2RlIC09IDB4MTAwMDA7XHJcblx0XHRcdHZhciBzdXJyb2dhdGUxID0gMHhkODAwICsgKGNvZGUgPj4gMTApXHJcblx0XHRcdFx0LCBzdXJyb2dhdGUyID0gMHhkYzAwICsgKGNvZGUgJiAweDNmZik7XHJcblxyXG5cdFx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShzdXJyb2dhdGUxLCBzdXJyb2dhdGUyKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRmdW5jdGlvbiBlbnRpdHlSZXBsYWNlcihhKXtcclxuXHRcdHZhciBrID0gYS5zbGljZSgxLC0xKTtcclxuXHRcdGlmKGsgaW4gZW50aXR5TWFwKXtcclxuXHRcdFx0cmV0dXJuIGVudGl0eU1hcFtrXTsgXHJcblx0XHR9ZWxzZSBpZihrLmNoYXJBdCgwKSA9PT0gJyMnKXtcclxuXHRcdFx0cmV0dXJuIGZpeGVkRnJvbUNoYXJDb2RlKHBhcnNlSW50KGsuc3Vic3RyKDEpLnJlcGxhY2UoJ3gnLCcweCcpKSlcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoJ2VudGl0eSBub3QgZm91bmQ6JythKTtcclxuXHRcdFx0cmV0dXJuIGE7XHJcblx0XHR9XHJcblx0fVxyXG5cdGZ1bmN0aW9uIGFwcGVuZFRleHQoZW5kKXsvL2hhcyBzb21lIGJ1Z3NcclxuXHRcdGlmKGVuZD5zdGFydCl7XHJcblx0XHRcdHZhciB4dCA9IHNvdXJjZS5zdWJzdHJpbmcoc3RhcnQsZW5kKS5yZXBsYWNlKC8mIz9cXHcrOy9nLGVudGl0eVJlcGxhY2VyKTtcclxuXHRcdFx0bG9jYXRvciYmcG9zaXRpb24oc3RhcnQpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmNoYXJhY3RlcnMoeHQsMCxlbmQtc3RhcnQpO1xyXG5cdFx0XHRzdGFydCA9IGVuZFxyXG5cdFx0fVxyXG5cdH1cclxuXHRmdW5jdGlvbiBwb3NpdGlvbihwLG0pe1xyXG5cdFx0d2hpbGUocD49bGluZUVuZCAmJiAobSA9IGxpbmVQYXR0ZXJuLmV4ZWMoc291cmNlKSkpe1xyXG5cdFx0XHRsaW5lU3RhcnQgPSBtLmluZGV4O1xyXG5cdFx0XHRsaW5lRW5kID0gbGluZVN0YXJ0ICsgbVswXS5sZW5ndGg7XHJcblx0XHRcdGxvY2F0b3IubGluZU51bWJlcisrO1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdsaW5lKys6Jyxsb2NhdG9yLHN0YXJ0UG9zLGVuZFBvcylcclxuXHRcdH1cclxuXHRcdGxvY2F0b3IuY29sdW1uTnVtYmVyID0gcC1saW5lU3RhcnQrMTtcclxuXHR9XHJcblx0dmFyIGxpbmVTdGFydCA9IDA7XHJcblx0dmFyIGxpbmVFbmQgPSAwO1xyXG5cdHZhciBsaW5lUGF0dGVybiA9IC8uKig/Olxcclxcbj98XFxuKXwuKiQvZ1xyXG5cdHZhciBsb2NhdG9yID0gZG9tQnVpbGRlci5sb2NhdG9yO1xyXG5cdFxyXG5cdHZhciBwYXJzZVN0YWNrID0gW3tjdXJyZW50TlNNYXA6ZGVmYXVsdE5TTWFwQ29weX1dXHJcblx0dmFyIGNsb3NlTWFwID0ge307XHJcblx0dmFyIHN0YXJ0ID0gMDtcclxuXHR3aGlsZSh0cnVlKXtcclxuXHRcdHRyeXtcclxuXHRcdFx0dmFyIHRhZ1N0YXJ0ID0gc291cmNlLmluZGV4T2YoJzwnLHN0YXJ0KTtcclxuXHRcdFx0aWYodGFnU3RhcnQ8MCl7XHJcblx0XHRcdFx0aWYoIXNvdXJjZS5zdWJzdHIoc3RhcnQpLm1hdGNoKC9eXFxzKiQvKSl7XHJcblx0XHRcdFx0XHR2YXIgZG9jID0gZG9tQnVpbGRlci5kb2M7XHJcblx0ICAgIFx0XHRcdHZhciB0ZXh0ID0gZG9jLmNyZWF0ZVRleHROb2RlKHNvdXJjZS5zdWJzdHIoc3RhcnQpKTtcclxuXHQgICAgXHRcdFx0ZG9jLmFwcGVuZENoaWxkKHRleHQpO1xyXG5cdCAgICBcdFx0XHRkb21CdWlsZGVyLmN1cnJlbnRFbGVtZW50ID0gdGV4dDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHRhZ1N0YXJ0PnN0YXJ0KXtcclxuXHRcdFx0XHRhcHBlbmRUZXh0KHRhZ1N0YXJ0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzd2l0Y2goc291cmNlLmNoYXJBdCh0YWdTdGFydCsxKSl7XHJcblx0XHRcdGNhc2UgJy8nOlxyXG5cdFx0XHRcdHZhciBlbmQgPSBzb3VyY2UuaW5kZXhPZignPicsdGFnU3RhcnQrMyk7XHJcblx0XHRcdFx0dmFyIHRhZ05hbWUgPSBzb3VyY2Uuc3Vic3RyaW5nKHRhZ1N0YXJ0KzIsZW5kKTtcclxuXHRcdFx0XHR2YXIgY29uZmlnID0gcGFyc2VTdGFjay5wb3AoKTtcclxuXHRcdFx0XHRpZihlbmQ8MCl7XHJcblx0XHRcdFx0XHRcclxuXHQgICAgICAgIFx0XHR0YWdOYW1lID0gc291cmNlLnN1YnN0cmluZyh0YWdTdGFydCsyKS5yZXBsYWNlKC9bXFxzPF0uKi8sJycpO1xyXG5cdCAgICAgICAgXHRcdC8vY29uc29sZS5lcnJvcignI0BAQEBAQCcrdGFnTmFtZSlcclxuXHQgICAgICAgIFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoXCJlbmQgdGFnIG5hbWU6IFwiK3RhZ05hbWUrJyBpcyBub3QgY29tcGxldGU6Jytjb25maWcudGFnTmFtZSk7XHJcblx0ICAgICAgICBcdFx0ZW5kID0gdGFnU3RhcnQrMSt0YWdOYW1lLmxlbmd0aDtcclxuXHQgICAgICAgIFx0fWVsc2UgaWYodGFnTmFtZS5tYXRjaCgvXFxzPC8pKXtcclxuXHQgICAgICAgIFx0XHR0YWdOYW1lID0gdGFnTmFtZS5yZXBsYWNlKC9bXFxzPF0uKi8sJycpO1xyXG5cdCAgICAgICAgXHRcdGVycm9ySGFuZGxlci5lcnJvcihcImVuZCB0YWcgbmFtZTogXCIrdGFnTmFtZSsnIG1heWJlIG5vdCBjb21wbGV0ZScpO1xyXG5cdCAgICAgICAgXHRcdGVuZCA9IHRhZ1N0YXJ0KzErdGFnTmFtZS5sZW5ndGg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vY29uc29sZS5lcnJvcihwYXJzZVN0YWNrLmxlbmd0aCxwYXJzZVN0YWNrKVxyXG5cdFx0XHRcdC8vY29uc29sZS5lcnJvcihjb25maWcpO1xyXG5cdFx0XHRcdHZhciBsb2NhbE5TTWFwID0gY29uZmlnLmxvY2FsTlNNYXA7XHJcblx0XHRcdFx0dmFyIGVuZE1hdGNoID0gY29uZmlnLnRhZ05hbWUgPT0gdGFnTmFtZTtcclxuXHRcdFx0XHR2YXIgZW5kSWdub3JlQ2FzZU1hY2ggPSBlbmRNYXRjaCB8fCBjb25maWcudGFnTmFtZSYmY29uZmlnLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0YWdOYW1lLnRvTG93ZXJDYXNlKClcclxuXHRcdCAgICAgICAgaWYoZW5kSWdub3JlQ2FzZU1hY2gpe1xyXG5cdFx0ICAgICAgICBcdGRvbUJ1aWxkZXIuZW5kRWxlbWVudChjb25maWcudXJpLGNvbmZpZy5sb2NhbE5hbWUsdGFnTmFtZSk7XHJcblx0XHRcdFx0XHRpZihsb2NhbE5TTWFwKXtcclxuXHRcdFx0XHRcdFx0Zm9yKHZhciBwcmVmaXggaW4gbG9jYWxOU01hcCl7XHJcblx0XHRcdFx0XHRcdFx0ZG9tQnVpbGRlci5lbmRQcmVmaXhNYXBwaW5nKHByZWZpeCkgO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZighZW5kTWF0Y2gpe1xyXG5cdFx0ICAgICAgICAgICAgXHRlcnJvckhhbmRsZXIuZmF0YWxFcnJvcihcImVuZCB0YWcgbmFtZTogXCIrdGFnTmFtZSsnIGlzIG5vdCBtYXRjaCB0aGUgY3VycmVudCBzdGFydCB0YWdOYW1lOicrY29uZmlnLnRhZ05hbWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdCAgICAgICAgfWVsc2V7XHJcblx0XHQgICAgICAgIFx0cGFyc2VTdGFjay5wdXNoKGNvbmZpZylcclxuXHRcdCAgICAgICAgfVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGVuZCsrO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdC8vIGVuZCBlbG1lbnRcclxuXHRcdFx0Y2FzZSAnPyc6Ly8gPD8uLi4/PlxyXG5cdFx0XHRcdGxvY2F0b3ImJnBvc2l0aW9uKHRhZ1N0YXJ0KTtcclxuXHRcdFx0XHRlbmQgPSBwYXJzZUluc3RydWN0aW9uKHNvdXJjZSx0YWdTdGFydCxkb21CdWlsZGVyKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnISc6Ly8gPCFkb2N0eXBlLDwhW0NEQVRBLDwhLS1cclxuXHRcdFx0XHRsb2NhdG9yJiZwb3NpdGlvbih0YWdTdGFydCk7XHJcblx0XHRcdFx0ZW5kID0gcGFyc2VEQ0Moc291cmNlLHRhZ1N0YXJ0LGRvbUJ1aWxkZXIsZXJyb3JIYW5kbGVyKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRsb2NhdG9yJiZwb3NpdGlvbih0YWdTdGFydCk7XHJcblx0XHRcdFx0dmFyIGVsID0gbmV3IEVsZW1lbnRBdHRyaWJ1dGVzKCk7XHJcblx0XHRcdFx0dmFyIGN1cnJlbnROU01hcCA9IHBhcnNlU3RhY2tbcGFyc2VTdGFjay5sZW5ndGgtMV0uY3VycmVudE5TTWFwO1xyXG5cdFx0XHRcdC8vZWxTdGFydEVuZFxyXG5cdFx0XHRcdHZhciBlbmQgPSBwYXJzZUVsZW1lbnRTdGFydFBhcnQoc291cmNlLHRhZ1N0YXJ0LGVsLGN1cnJlbnROU01hcCxlbnRpdHlSZXBsYWNlcixlcnJvckhhbmRsZXIpO1xyXG5cdFx0XHRcdHZhciBsZW4gPSBlbC5sZW5ndGg7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoIWVsLmNsb3NlZCAmJiBmaXhTZWxmQ2xvc2VkKHNvdXJjZSxlbmQsZWwudGFnTmFtZSxjbG9zZU1hcCkpe1xyXG5cdFx0XHRcdFx0ZWwuY2xvc2VkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGlmKCFlbnRpdHlNYXAubmJzcCl7XHJcblx0XHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCd1bmNsb3NlZCB4bWwgYXR0cmlidXRlJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGxvY2F0b3IgJiYgbGVuKXtcclxuXHRcdFx0XHRcdHZhciBsb2NhdG9yMiA9IGNvcHlMb2NhdG9yKGxvY2F0b3Ise30pO1xyXG5cdFx0XHRcdFx0Ly90cnl7Ly9hdHRyaWJ1dGUgcG9zaXRpb24gZml4ZWRcclxuXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7aTxsZW47aSsrKXtcclxuXHRcdFx0XHRcdFx0dmFyIGEgPSBlbFtpXTtcclxuXHRcdFx0XHRcdFx0cG9zaXRpb24oYS5vZmZzZXQpO1xyXG5cdFx0XHRcdFx0XHRhLmxvY2F0b3IgPSBjb3B5TG9jYXRvcihsb2NhdG9yLHt9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoJ0BAQEBAJytlKX1cclxuXHRcdFx0XHRcdGRvbUJ1aWxkZXIubG9jYXRvciA9IGxvY2F0b3IyXHJcblx0XHRcdFx0XHRpZihhcHBlbmRFbGVtZW50KGVsLGRvbUJ1aWxkZXIsY3VycmVudE5TTWFwKSl7XHJcblx0XHRcdFx0XHRcdHBhcnNlU3RhY2sucHVzaChlbClcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRvbUJ1aWxkZXIubG9jYXRvciA9IGxvY2F0b3I7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRpZihhcHBlbmRFbGVtZW50KGVsLGRvbUJ1aWxkZXIsY3VycmVudE5TTWFwKSl7XHJcblx0XHRcdFx0XHRcdHBhcnNlU3RhY2sucHVzaChlbClcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoZWwudXJpID09PSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcgJiYgIWVsLmNsb3NlZCl7XHJcblx0XHRcdFx0XHRlbmQgPSBwYXJzZUh0bWxTcGVjaWFsQ29udGVudChzb3VyY2UsZW5kLGVsLnRhZ05hbWUsZW50aXR5UmVwbGFjZXIsZG9tQnVpbGRlcilcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdGVuZCsrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fWNhdGNoKGUpe1xyXG5cdFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoJ2VsZW1lbnQgcGFyc2UgZXJyb3I6ICcrZSlcclxuXHRcdFx0Ly9lcnJvckhhbmRsZXIuZXJyb3IoJ2VsZW1lbnQgcGFyc2UgZXJyb3I6ICcrZSk7XHJcblx0XHRcdGVuZCA9IC0xO1xyXG5cdFx0XHQvL3Rocm93IGU7XHJcblx0XHR9XHJcblx0XHRpZihlbmQ+c3RhcnQpe1xyXG5cdFx0XHRzdGFydCA9IGVuZDtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHQvL1RPRE86IOi/memHjOacieWPr+iDvXNheOWbnumAgO+8jOacieS9jee9rumUmeivr+mjjumZqVxyXG5cdFx0XHRhcHBlbmRUZXh0KE1hdGgubWF4KHRhZ1N0YXJ0LHN0YXJ0KSsxKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gY29weUxvY2F0b3IoZix0KXtcclxuXHR0LmxpbmVOdW1iZXIgPSBmLmxpbmVOdW1iZXI7XHJcblx0dC5jb2x1bW5OdW1iZXIgPSBmLmNvbHVtbk51bWJlcjtcclxuXHRyZXR1cm4gdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBzZWUgI2FwcGVuZEVsZW1lbnQoc291cmNlLGVsU3RhcnRFbmQsZWwsc2VsZkNsb3NlZCxlbnRpdHlSZXBsYWNlcixkb21CdWlsZGVyLHBhcnNlU3RhY2spO1xyXG4gKiBAcmV0dXJuIGVuZCBvZiB0aGUgZWxlbWVudFN0YXJ0UGFydChlbmQgb2YgZWxlbWVudEVuZFBhcnQgZm9yIHNlbGZDbG9zZWQgZWwpXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUVsZW1lbnRTdGFydFBhcnQoc291cmNlLHN0YXJ0LGVsLGN1cnJlbnROU01hcCxlbnRpdHlSZXBsYWNlcixlcnJvckhhbmRsZXIpe1xyXG5cdHZhciBhdHRyTmFtZTtcclxuXHR2YXIgdmFsdWU7XHJcblx0dmFyIHAgPSArK3N0YXJ0O1xyXG5cdHZhciBzID0gU19UQUc7Ly9zdGF0dXNcclxuXHR3aGlsZSh0cnVlKXtcclxuXHRcdHZhciBjID0gc291cmNlLmNoYXJBdChwKTtcclxuXHRcdHN3aXRjaChjKXtcclxuXHRcdGNhc2UgJz0nOlxyXG5cdFx0XHRpZihzID09PSBTX0FUVFIpey8vYXR0ck5hbWVcclxuXHRcdFx0XHRhdHRyTmFtZSA9IHNvdXJjZS5zbGljZShzdGFydCxwKTtcclxuXHRcdFx0XHRzID0gU19FUTtcclxuXHRcdFx0fWVsc2UgaWYocyA9PT0gU19BVFRSX1NQQUNFKXtcclxuXHRcdFx0XHRzID0gU19FUTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Ly9mYXRhbEVycm9yOiBlcXVhbCBtdXN0IGFmdGVyIGF0dHJOYW1lIG9yIHNwYWNlIGFmdGVyIGF0dHJOYW1lXHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdhdHRyaWJ1dGUgZXF1YWwgbXVzdCBhZnRlciBhdHRyTmFtZScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnXFwnJzpcclxuXHRcdGNhc2UgJ1wiJzpcclxuXHRcdFx0aWYocyA9PT0gU19FUSB8fCBzID09PSBTX0FUVFIgLy98fCBzID09IFNfQVRUUl9TUEFDRVxyXG5cdFx0XHRcdCl7Ly9lcXVhbFxyXG5cdFx0XHRcdGlmKHMgPT09IFNfQVRUUil7XHJcblx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIHZhbHVlIG11c3QgYWZ0ZXIgXCI9XCInKVxyXG5cdFx0XHRcdFx0YXR0ck5hbWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscClcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RhcnQgPSBwKzE7XHJcblx0XHRcdFx0cCA9IHNvdXJjZS5pbmRleE9mKGMsc3RhcnQpXHJcblx0XHRcdFx0aWYocD4wKXtcclxuXHRcdFx0XHRcdHZhbHVlID0gc291cmNlLnNsaWNlKHN0YXJ0LHApLnJlcGxhY2UoLyYjP1xcdys7L2csZW50aXR5UmVwbGFjZXIpO1xyXG5cdFx0XHRcdFx0ZWwuYWRkKGF0dHJOYW1lLHZhbHVlLHN0YXJ0LTEpO1xyXG5cdFx0XHRcdFx0cyA9IFNfQVRUUl9FTkQ7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHQvL2ZhdGFsRXJyb3I6IG5vIGVuZCBxdW90IG1hdGNoXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2F0dHJpYnV0ZSB2YWx1ZSBubyBlbmQgXFwnJytjKydcXCcgbWF0Y2gnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1lbHNlIGlmKHMgPT0gU19BVFRSX05PUVVPVF9WQUxVRSl7XHJcblx0XHRcdFx0dmFsdWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCkucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlcik7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhhdHRyTmFtZSx2YWx1ZSxzdGFydCxwKVxyXG5cdFx0XHRcdGVsLmFkZChhdHRyTmFtZSx2YWx1ZSxzdGFydCk7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmRpcihlbClcclxuXHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIFwiJythdHRyTmFtZSsnXCIgbWlzc2VkIHN0YXJ0IHF1b3QoJytjKycpISEnKTtcclxuXHRcdFx0XHRzdGFydCA9IHArMTtcclxuXHRcdFx0XHRzID0gU19BVFRSX0VORFxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHQvL2ZhdGFsRXJyb3I6IG5vIGVxdWFsIGJlZm9yZVxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignYXR0cmlidXRlIHZhbHVlIG11c3QgYWZ0ZXIgXCI9XCInKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJy8nOlxyXG5cdFx0XHRzd2l0Y2gocyl7XHJcblx0XHRcdGNhc2UgU19UQUc6XHJcblx0XHRcdFx0ZWwuc2V0VGFnTmFtZShzb3VyY2Uuc2xpY2Uoc3RhcnQscCkpO1xyXG5cdFx0XHRjYXNlIFNfQVRUUl9FTkQ6XHJcblx0XHRcdGNhc2UgU19UQUdfU1BBQ0U6XHJcblx0XHRcdGNhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0cyA9U19UQUdfQ0xPU0U7XHJcblx0XHRcdFx0ZWwuY2xvc2VkID0gdHJ1ZTtcclxuXHRcdFx0Y2FzZSBTX0FUVFJfTk9RVU9UX1ZBTFVFOlxyXG5cdFx0XHRjYXNlIFNfQVRUUjpcclxuXHRcdFx0Y2FzZSBTX0FUVFJfU1BBQ0U6XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdC8vY2FzZSBTX0VROlxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImF0dHJpYnV0ZSBpbnZhbGlkIGNsb3NlIGNoYXIoJy8nKVwiKVxyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnJzovL2VuZCBkb2N1bWVudFxyXG5cdFx0XHQvL3Rocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKVxyXG5cdFx0XHRlcnJvckhhbmRsZXIuZXJyb3IoJ3VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0Jyk7XHJcblx0XHRcdGlmKHMgPT0gU19UQUcpe1xyXG5cdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcDtcclxuXHRcdGNhc2UgJz4nOlxyXG5cdFx0XHRzd2l0Y2gocyl7XHJcblx0XHRcdGNhc2UgU19UQUc6XHJcblx0XHRcdFx0ZWwuc2V0VGFnTmFtZShzb3VyY2Uuc2xpY2Uoc3RhcnQscCkpO1xyXG5cdFx0XHRjYXNlIFNfQVRUUl9FTkQ6XHJcblx0XHRcdGNhc2UgU19UQUdfU1BBQ0U6XHJcblx0XHRcdGNhc2UgU19UQUdfQ0xPU0U6XHJcblx0XHRcdFx0YnJlYWs7Ly9ub3JtYWxcclxuXHRcdFx0Y2FzZSBTX0FUVFJfTk9RVU9UX1ZBTFVFOi8vQ29tcGF0aWJsZSBzdGF0ZVxyXG5cdFx0XHRjYXNlIFNfQVRUUjpcclxuXHRcdFx0XHR2YWx1ZSA9IHNvdXJjZS5zbGljZShzdGFydCxwKTtcclxuXHRcdFx0XHRpZih2YWx1ZS5zbGljZSgtMSkgPT09ICcvJyl7XHJcblx0XHRcdFx0XHRlbC5jbG9zZWQgID0gdHJ1ZTtcclxuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc2xpY2UoMCwtMSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdGNhc2UgU19BVFRSX1NQQUNFOlxyXG5cdFx0XHRcdGlmKHMgPT09IFNfQVRUUl9TUEFDRSl7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGF0dHJOYW1lO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihzID09IFNfQVRUUl9OT1FVT1RfVkFMVUUpe1xyXG5cdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrdmFsdWUrJ1wiIG1pc3NlZCBxdW90KFwiKSEhJyk7XHJcblx0XHRcdFx0XHRlbC5hZGQoYXR0ck5hbWUsdmFsdWUucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlciksc3RhcnQpXHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRpZihjdXJyZW50TlNNYXBbJyddICE9PSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcgfHwgIXZhbHVlLm1hdGNoKC9eKD86ZGlzYWJsZWR8Y2hlY2tlZHxzZWxlY3RlZCkkL2kpKXtcclxuXHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyLndhcm5pbmcoJ2F0dHJpYnV0ZSBcIicrdmFsdWUrJ1wiIG1pc3NlZCB2YWx1ZSEhIFwiJyt2YWx1ZSsnXCIgaW5zdGVhZCEhJylcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsLmFkZCh2YWx1ZSx2YWx1ZSxzdGFydClcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgU19FUTpcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2F0dHJpYnV0ZSB2YWx1ZSBtaXNzZWQhIScpO1xyXG5cdFx0XHR9XHJcbi8vXHRcdFx0Y29uc29sZS5sb2codGFnTmFtZSx0YWdOYW1lUGF0dGVybix0YWdOYW1lUGF0dGVybi50ZXN0KHRhZ05hbWUpKVxyXG5cdFx0XHRyZXR1cm4gcDtcclxuXHRcdC8qeG1sIHNwYWNlICdcXHgyMCcgfCAjeDkgfCAjeEQgfCAjeEE7ICovXHJcblx0XHRjYXNlICdcXHUwMDgwJzpcclxuXHRcdFx0YyA9ICcgJztcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdGlmKGM8PSAnICcpey8vc3BhY2VcclxuXHRcdFx0XHRzd2l0Y2gocyl7XHJcblx0XHRcdFx0Y2FzZSBTX1RBRzpcclxuXHRcdFx0XHRcdGVsLnNldFRhZ05hbWUoc291cmNlLnNsaWNlKHN0YXJ0LHApKTsvL3RhZ05hbWVcclxuXHRcdFx0XHRcdHMgPSBTX1RBR19TUEFDRTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19BVFRSOlxyXG5cdFx0XHRcdFx0YXR0ck5hbWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscClcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFJfU1BBQ0U7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfQVRUUl9OT1FVT1RfVkFMVUU6XHJcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBzb3VyY2Uuc2xpY2Uoc3RhcnQscCkucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlcik7XHJcblx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIFwiJyt2YWx1ZSsnXCIgbWlzc2VkIHF1b3QoXCIpISEnKTtcclxuXHRcdFx0XHRcdGVsLmFkZChhdHRyTmFtZSx2YWx1ZSxzdGFydClcclxuXHRcdFx0XHRjYXNlIFNfQVRUUl9FTkQ6XHJcblx0XHRcdFx0XHRzID0gU19UQUdfU1BBQ0U7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHQvL2Nhc2UgU19UQUdfU1BBQ0U6XHJcblx0XHRcdFx0Ly9jYXNlIFNfRVE6XHJcblx0XHRcdFx0Ly9jYXNlIFNfQVRUUl9TUEFDRTpcclxuXHRcdFx0XHQvL1x0dm9pZCgpO2JyZWFrO1xyXG5cdFx0XHRcdC8vY2FzZSBTX1RBR19DTE9TRTpcclxuXHRcdFx0XHRcdC8vaWdub3JlIHdhcm5pbmdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1lbHNley8vbm90IHNwYWNlXHJcbi8vU19UQUcsXHRTX0FUVFIsXHRTX0VRLFx0U19BVFRSX05PUVVPVF9WQUxVRVxyXG4vL1NfQVRUUl9TUEFDRSxcdFNfQVRUUl9FTkQsXHRTX1RBR19TUEFDRSwgU19UQUdfQ0xPU0VcclxuXHRcdFx0XHRzd2l0Y2gocyl7XHJcblx0XHRcdFx0Ly9jYXNlIFNfVEFHOnZvaWQoKTticmVhaztcclxuXHRcdFx0XHQvL2Nhc2UgU19BVFRSOnZvaWQoKTticmVhaztcclxuXHRcdFx0XHQvL2Nhc2UgU19BVFRSX05PUVVPVF9WQUxVRTp2b2lkKCk7YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX0FUVFJfU1BBQ0U6XHJcblx0XHRcdFx0XHR2YXIgdGFnTmFtZSA9ICBlbC50YWdOYW1lO1xyXG5cdFx0XHRcdFx0aWYoY3VycmVudE5TTWFwWycnXSAhPT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnIHx8ICFhdHRyTmFtZS5tYXRjaCgvXig/OmRpc2FibGVkfGNoZWNrZWR8c2VsZWN0ZWQpJC9pKSl7XHJcblx0XHRcdFx0XHRcdGVycm9ySGFuZGxlci53YXJuaW5nKCdhdHRyaWJ1dGUgXCInK2F0dHJOYW1lKydcIiBtaXNzZWQgdmFsdWUhISBcIicrYXR0ck5hbWUrJ1wiIGluc3RlYWQyISEnKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWwuYWRkKGF0dHJOYW1lLGF0dHJOYW1lLHN0YXJ0KTtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gcDtcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFNfQVRUUl9FTkQ6XHJcblx0XHRcdFx0XHRlcnJvckhhbmRsZXIud2FybmluZygnYXR0cmlidXRlIHNwYWNlIGlzIHJlcXVpcmVkXCInK2F0dHJOYW1lKydcIiEhJylcclxuXHRcdFx0XHRjYXNlIFNfVEFHX1NQQUNFOlxyXG5cdFx0XHRcdFx0cyA9IFNfQVRUUjtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gcDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgU19FUTpcclxuXHRcdFx0XHRcdHMgPSBTX0FUVFJfTk9RVU9UX1ZBTFVFO1xyXG5cdFx0XHRcdFx0c3RhcnQgPSBwO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBTX1RBR19DTE9TRTpcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImVsZW1lbnRzIGNsb3NlZCBjaGFyYWN0ZXIgJy8nIGFuZCAnPicgbXVzdCBiZSBjb25uZWN0ZWQgdG9cIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9Ly9lbmQgb3V0ZXIgc3dpdGNoXHJcblx0XHQvL2NvbnNvbGUubG9nKCdwKysnLHApXHJcblx0XHRwKys7XHJcblx0fVxyXG59XHJcbi8qKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaGFzIG5ldyBuYW1lc3BhY2UgZGVmaW5lXHJcbiAqL1xyXG5mdW5jdGlvbiBhcHBlbmRFbGVtZW50KGVsLGRvbUJ1aWxkZXIsY3VycmVudE5TTWFwKXtcclxuXHR2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWU7XHJcblx0dmFyIGxvY2FsTlNNYXAgPSBudWxsO1xyXG5cdC8vdmFyIGN1cnJlbnROU01hcCA9IHBhcnNlU3RhY2tbcGFyc2VTdGFjay5sZW5ndGgtMV0uY3VycmVudE5TTWFwO1xyXG5cdHZhciBpID0gZWwubGVuZ3RoO1xyXG5cdHdoaWxlKGktLSl7XHJcblx0XHR2YXIgYSA9IGVsW2ldO1xyXG5cdFx0dmFyIHFOYW1lID0gYS5xTmFtZTtcclxuXHRcdHZhciB2YWx1ZSA9IGEudmFsdWU7XHJcblx0XHR2YXIgbnNwID0gcU5hbWUuaW5kZXhPZignOicpO1xyXG5cdFx0aWYobnNwPjApe1xyXG5cdFx0XHR2YXIgcHJlZml4ID0gYS5wcmVmaXggPSBxTmFtZS5zbGljZSgwLG5zcCk7XHJcblx0XHRcdHZhciBsb2NhbE5hbWUgPSBxTmFtZS5zbGljZShuc3ArMSk7XHJcblx0XHRcdHZhciBuc1ByZWZpeCA9IHByZWZpeCA9PT0gJ3htbG5zJyAmJiBsb2NhbE5hbWVcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRsb2NhbE5hbWUgPSBxTmFtZTtcclxuXHRcdFx0cHJlZml4ID0gbnVsbFxyXG5cdFx0XHRuc1ByZWZpeCA9IHFOYW1lID09PSAneG1sbnMnICYmICcnXHJcblx0XHR9XHJcblx0XHQvL2NhbiBub3Qgc2V0IHByZWZpeCxiZWNhdXNlIHByZWZpeCAhPT0gJydcclxuXHRcdGEubG9jYWxOYW1lID0gbG9jYWxOYW1lIDtcclxuXHRcdC8vcHJlZml4ID09IG51bGwgZm9yIG5vIG5zIHByZWZpeCBhdHRyaWJ1dGUgXHJcblx0XHRpZihuc1ByZWZpeCAhPT0gZmFsc2Upey8vaGFjayEhXHJcblx0XHRcdGlmKGxvY2FsTlNNYXAgPT0gbnVsbCl7XHJcblx0XHRcdFx0bG9jYWxOU01hcCA9IHt9XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhjdXJyZW50TlNNYXAsMClcclxuXHRcdFx0XHRfY29weShjdXJyZW50TlNNYXAsY3VycmVudE5TTWFwPXt9KVxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coY3VycmVudE5TTWFwLDEpXHJcblx0XHRcdH1cclxuXHRcdFx0Y3VycmVudE5TTWFwW25zUHJlZml4XSA9IGxvY2FsTlNNYXBbbnNQcmVmaXhdID0gdmFsdWU7XHJcblx0XHRcdGEudXJpID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJ1xyXG5cdFx0XHRkb21CdWlsZGVyLnN0YXJ0UHJlZml4TWFwcGluZyhuc1ByZWZpeCwgdmFsdWUpIFxyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgaSA9IGVsLmxlbmd0aDtcclxuXHR3aGlsZShpLS0pe1xyXG5cdFx0YSA9IGVsW2ldO1xyXG5cdFx0dmFyIHByZWZpeCA9IGEucHJlZml4O1xyXG5cdFx0aWYocHJlZml4KXsvL25vIHByZWZpeCBhdHRyaWJ1dGUgaGFzIG5vIG5hbWVzcGFjZVxyXG5cdFx0XHRpZihwcmVmaXggPT09ICd4bWwnKXtcclxuXHRcdFx0XHRhLnVyaSA9ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnO1xyXG5cdFx0XHR9aWYocHJlZml4ICE9PSAneG1sbnMnKXtcclxuXHRcdFx0XHRhLnVyaSA9IGN1cnJlbnROU01hcFtwcmVmaXggfHwgJyddXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly97Y29uc29sZS5sb2coJyMjIycrYS5xTmFtZSxkb21CdWlsZGVyLmxvY2F0b3Iuc3lzdGVtSWQrJycsY3VycmVudE5TTWFwLGEudXJpKX1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgbnNwID0gdGFnTmFtZS5pbmRleE9mKCc6Jyk7XHJcblx0aWYobnNwPjApe1xyXG5cdFx0cHJlZml4ID0gZWwucHJlZml4ID0gdGFnTmFtZS5zbGljZSgwLG5zcCk7XHJcblx0XHRsb2NhbE5hbWUgPSBlbC5sb2NhbE5hbWUgPSB0YWdOYW1lLnNsaWNlKG5zcCsxKTtcclxuXHR9ZWxzZXtcclxuXHRcdHByZWZpeCA9IG51bGw7Ly9pbXBvcnRhbnQhIVxyXG5cdFx0bG9jYWxOYW1lID0gZWwubG9jYWxOYW1lID0gdGFnTmFtZTtcclxuXHR9XHJcblx0Ly9ubyBwcmVmaXggZWxlbWVudCBoYXMgZGVmYXVsdCBuYW1lc3BhY2VcclxuXHR2YXIgbnMgPSBlbC51cmkgPSBjdXJyZW50TlNNYXBbcHJlZml4IHx8ICcnXTtcclxuXHRkb21CdWlsZGVyLnN0YXJ0RWxlbWVudChucyxsb2NhbE5hbWUsdGFnTmFtZSxlbCk7XHJcblx0Ly9lbmRQcmVmaXhNYXBwaW5nIGFuZCBzdGFydFByZWZpeE1hcHBpbmcgaGF2ZSBub3QgYW55IGhlbHAgZm9yIGRvbSBidWlsZGVyXHJcblx0Ly9sb2NhbE5TTWFwID0gbnVsbFxyXG5cdGlmKGVsLmNsb3NlZCl7XHJcblx0XHRkb21CdWlsZGVyLmVuZEVsZW1lbnQobnMsbG9jYWxOYW1lLHRhZ05hbWUpO1xyXG5cdFx0aWYobG9jYWxOU01hcCl7XHJcblx0XHRcdGZvcihwcmVmaXggaW4gbG9jYWxOU01hcCl7XHJcblx0XHRcdFx0ZG9tQnVpbGRlci5lbmRQcmVmaXhNYXBwaW5nKHByZWZpeCkgXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9ZWxzZXtcclxuXHRcdGVsLmN1cnJlbnROU01hcCA9IGN1cnJlbnROU01hcDtcclxuXHRcdGVsLmxvY2FsTlNNYXAgPSBsb2NhbE5TTWFwO1xyXG5cdFx0Ly9wYXJzZVN0YWNrLnB1c2goZWwpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG59XHJcbmZ1bmN0aW9uIHBhcnNlSHRtbFNwZWNpYWxDb250ZW50KHNvdXJjZSxlbFN0YXJ0RW5kLHRhZ05hbWUsZW50aXR5UmVwbGFjZXIsZG9tQnVpbGRlcil7XHJcblx0aWYoL14oPzpzY3JpcHR8dGV4dGFyZWEpJC9pLnRlc3QodGFnTmFtZSkpe1xyXG5cdFx0dmFyIGVsRW5kU3RhcnQgPSAgc291cmNlLmluZGV4T2YoJzwvJyt0YWdOYW1lKyc+JyxlbFN0YXJ0RW5kKTtcclxuXHRcdHZhciB0ZXh0ID0gc291cmNlLnN1YnN0cmluZyhlbFN0YXJ0RW5kKzEsZWxFbmRTdGFydCk7XHJcblx0XHRpZigvWyY8XS8udGVzdCh0ZXh0KSl7XHJcblx0XHRcdGlmKC9ec2NyaXB0JC9pLnRlc3QodGFnTmFtZSkpe1xyXG5cdFx0XHRcdC8vaWYoIS9cXF1cXF0+Ly50ZXN0KHRleHQpKXtcclxuXHRcdFx0XHRcdC8vbGV4SGFuZGxlci5zdGFydENEQVRBKCk7XHJcblx0XHRcdFx0XHRkb21CdWlsZGVyLmNoYXJhY3RlcnModGV4dCwwLHRleHQubGVuZ3RoKTtcclxuXHRcdFx0XHRcdC8vbGV4SGFuZGxlci5lbmRDREFUQSgpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsRW5kU3RhcnQ7XHJcblx0XHRcdFx0Ly99XHJcblx0XHRcdH0vL31lbHNley8vdGV4dCBhcmVhXHJcblx0XHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSgvJiM/XFx3KzsvZyxlbnRpdHlSZXBsYWNlcik7XHJcblx0XHRcdFx0ZG9tQnVpbGRlci5jaGFyYWN0ZXJzKHRleHQsMCx0ZXh0Lmxlbmd0aCk7XHJcblx0XHRcdFx0cmV0dXJuIGVsRW5kU3RhcnQ7XHJcblx0XHRcdC8vfVxyXG5cdFx0XHRcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGVsU3RhcnRFbmQrMTtcclxufVxyXG5mdW5jdGlvbiBmaXhTZWxmQ2xvc2VkKHNvdXJjZSxlbFN0YXJ0RW5kLHRhZ05hbWUsY2xvc2VNYXApe1xyXG5cdC8vaWYodGFnTmFtZSBpbiBjbG9zZU1hcCl7XHJcblx0dmFyIHBvcyA9IGNsb3NlTWFwW3RhZ05hbWVdO1xyXG5cdGlmKHBvcyA9PSBudWxsKXtcclxuXHRcdC8vY29uc29sZS5sb2codGFnTmFtZSlcclxuXHRcdHBvcyA9ICBzb3VyY2UubGFzdEluZGV4T2YoJzwvJyt0YWdOYW1lKyc+JylcclxuXHRcdGlmKHBvczxlbFN0YXJ0RW5kKXsvL+W/mOiusOmXreWQiFxyXG5cdFx0XHRwb3MgPSBzb3VyY2UubGFzdEluZGV4T2YoJzwvJyt0YWdOYW1lKVxyXG5cdFx0fVxyXG5cdFx0Y2xvc2VNYXBbdGFnTmFtZV0gPXBvc1xyXG5cdH1cclxuXHRyZXR1cm4gcG9zPGVsU3RhcnRFbmQ7XHJcblx0Ly99IFxyXG59XHJcbmZ1bmN0aW9uIF9jb3B5KHNvdXJjZSx0YXJnZXQpe1xyXG5cdGZvcih2YXIgbiBpbiBzb3VyY2Upe3RhcmdldFtuXSA9IHNvdXJjZVtuXX1cclxufVxyXG5mdW5jdGlvbiBwYXJzZURDQyhzb3VyY2Usc3RhcnQsZG9tQnVpbGRlcixlcnJvckhhbmRsZXIpey8vc3VyZSBzdGFydCB3aXRoICc8ISdcclxuXHR2YXIgbmV4dD0gc291cmNlLmNoYXJBdChzdGFydCsyKVxyXG5cdHN3aXRjaChuZXh0KXtcclxuXHRjYXNlICctJzpcclxuXHRcdGlmKHNvdXJjZS5jaGFyQXQoc3RhcnQgKyAzKSA9PT0gJy0nKXtcclxuXHRcdFx0dmFyIGVuZCA9IHNvdXJjZS5pbmRleE9mKCctLT4nLHN0YXJ0KzQpO1xyXG5cdFx0XHQvL2FwcGVuZCBjb21tZW50IHNvdXJjZS5zdWJzdHJpbmcoNCxlbmQpLy88IS0tXHJcblx0XHRcdGlmKGVuZD5zdGFydCl7XHJcblx0XHRcdFx0ZG9tQnVpbGRlci5jb21tZW50KHNvdXJjZSxzdGFydCs0LGVuZC1zdGFydC00KTtcclxuXHRcdFx0XHRyZXR1cm4gZW5kKzM7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGVycm9ySGFuZGxlci5lcnJvcihcIlVuY2xvc2VkIGNvbW1lbnRcIik7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Ly9lcnJvclxyXG5cdFx0XHRyZXR1cm4gLTE7XHJcblx0XHR9XHJcblx0ZGVmYXVsdDpcclxuXHRcdGlmKHNvdXJjZS5zdWJzdHIoc3RhcnQrMyw2KSA9PSAnQ0RBVEFbJyl7XHJcblx0XHRcdHZhciBlbmQgPSBzb3VyY2UuaW5kZXhPZignXV0+JyxzdGFydCs5KTtcclxuXHRcdFx0ZG9tQnVpbGRlci5zdGFydENEQVRBKCk7XHJcblx0XHRcdGRvbUJ1aWxkZXIuY2hhcmFjdGVycyhzb3VyY2Usc3RhcnQrOSxlbmQtc3RhcnQtOSk7XHJcblx0XHRcdGRvbUJ1aWxkZXIuZW5kQ0RBVEEoKSBcclxuXHRcdFx0cmV0dXJuIGVuZCszO1xyXG5cdFx0fVxyXG5cdFx0Ly88IURPQ1RZUEVcclxuXHRcdC8vc3RhcnREVEQoamF2YS5sYW5nLlN0cmluZyBuYW1lLCBqYXZhLmxhbmcuU3RyaW5nIHB1YmxpY0lkLCBqYXZhLmxhbmcuU3RyaW5nIHN5c3RlbUlkKSBcclxuXHRcdHZhciBtYXRjaHMgPSBzcGxpdChzb3VyY2Usc3RhcnQpO1xyXG5cdFx0dmFyIGxlbiA9IG1hdGNocy5sZW5ndGg7XHJcblx0XHRpZihsZW4+MSAmJiAvIWRvY3R5cGUvaS50ZXN0KG1hdGNoc1swXVswXSkpe1xyXG5cdFx0XHR2YXIgbmFtZSA9IG1hdGNoc1sxXVswXTtcclxuXHRcdFx0dmFyIHB1YmlkID0gbGVuPjMgJiYgL15wdWJsaWMkL2kudGVzdChtYXRjaHNbMl1bMF0pICYmIG1hdGNoc1szXVswXVxyXG5cdFx0XHR2YXIgc3lzaWQgPSBsZW4+NCAmJiBtYXRjaHNbNF1bMF07XHJcblx0XHRcdHZhciBsYXN0TWF0Y2ggPSBtYXRjaHNbbGVuLTFdXHJcblx0XHRcdGRvbUJ1aWxkZXIuc3RhcnREVEQobmFtZSxwdWJpZCAmJiBwdWJpZC5yZXBsYWNlKC9eKFsnXCJdKSguKj8pXFwxJC8sJyQyJyksXHJcblx0XHRcdFx0XHRzeXNpZCAmJiBzeXNpZC5yZXBsYWNlKC9eKFsnXCJdKSguKj8pXFwxJC8sJyQyJykpO1xyXG5cdFx0XHRkb21CdWlsZGVyLmVuZERURCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIGxhc3RNYXRjaC5pbmRleCtsYXN0TWF0Y2hbMF0ubGVuZ3RoXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiAtMTtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBwYXJzZUluc3RydWN0aW9uKHNvdXJjZSxzdGFydCxkb21CdWlsZGVyKXtcclxuXHR2YXIgZW5kID0gc291cmNlLmluZGV4T2YoJz8+JyxzdGFydCk7XHJcblx0aWYoZW5kKXtcclxuXHRcdHZhciBtYXRjaCA9IHNvdXJjZS5zdWJzdHJpbmcoc3RhcnQsZW5kKS5tYXRjaCgvXjxcXD8oXFxTKilcXHMqKFtcXHNcXFNdKj8pXFxzKiQvKTtcclxuXHRcdGlmKG1hdGNoKXtcclxuXHRcdFx0dmFyIGxlbiA9IG1hdGNoWzBdLmxlbmd0aDtcclxuXHRcdFx0ZG9tQnVpbGRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obWF0Y2hbMV0sIG1hdGNoWzJdKSA7XHJcblx0XHRcdHJldHVybiBlbmQrMjtcclxuXHRcdH1lbHNley8vZXJyb3JcclxuXHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gLTE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gc291cmNlXHJcbiAqL1xyXG5mdW5jdGlvbiBFbGVtZW50QXR0cmlidXRlcyhzb3VyY2Upe1xyXG5cdFxyXG59XHJcbkVsZW1lbnRBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHtcclxuXHRzZXRUYWdOYW1lOmZ1bmN0aW9uKHRhZ05hbWUpe1xyXG5cdFx0aWYoIXRhZ05hbWVQYXR0ZXJuLnRlc3QodGFnTmFtZSkpe1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdGFnTmFtZTonK3RhZ05hbWUpXHJcblx0XHR9XHJcblx0XHR0aGlzLnRhZ05hbWUgPSB0YWdOYW1lXHJcblx0fSxcclxuXHRhZGQ6ZnVuY3Rpb24ocU5hbWUsdmFsdWUsb2Zmc2V0KXtcclxuXHRcdGlmKCF0YWdOYW1lUGF0dGVybi50ZXN0KHFOYW1lKSl7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhdHRyaWJ1dGU6JytxTmFtZSlcclxuXHRcdH1cclxuXHRcdHRoaXNbdGhpcy5sZW5ndGgrK10gPSB7cU5hbWU6cU5hbWUsdmFsdWU6dmFsdWUsb2Zmc2V0Om9mZnNldH1cclxuXHR9LFxyXG5cdGxlbmd0aDowLFxyXG5cdGdldExvY2FsTmFtZTpmdW5jdGlvbihpKXtyZXR1cm4gdGhpc1tpXS5sb2NhbE5hbWV9LFxyXG5cdGdldExvY2F0b3I6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0ubG9jYXRvcn0sXHJcblx0Z2V0UU5hbWU6ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXNbaV0ucU5hbWV9LFxyXG5cdGdldFVSSTpmdW5jdGlvbihpKXtyZXR1cm4gdGhpc1tpXS51cml9LFxyXG5cdGdldFZhbHVlOmZ1bmN0aW9uKGkpe3JldHVybiB0aGlzW2ldLnZhbHVlfVxyXG4vL1x0LGdldEluZGV4OmZ1bmN0aW9uKHVyaSwgbG9jYWxOYW1lKSl7XHJcbi8vXHRcdGlmKGxvY2FsTmFtZSl7XHJcbi8vXHRcdFx0XHJcbi8vXHRcdH1lbHNle1xyXG4vL1x0XHRcdHZhciBxTmFtZSA9IHVyaVxyXG4vL1x0XHR9XHJcbi8vXHR9LFxyXG4vL1x0Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRWYWx1ZSh0aGlzLmdldEluZGV4LmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LFxyXG4vL1x0Z2V0VHlwZTpmdW5jdGlvbih1cmksbG9jYWxOYW1lKXt9XHJcbi8vXHRnZXRUeXBlOmZ1bmN0aW9uKGkpe30sXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIF9zZXRfcHJvdG9fKHRoaXoscGFyZW50KXtcclxuXHR0aGl6Ll9fcHJvdG9fXyA9IHBhcmVudDtcclxuXHRyZXR1cm4gdGhpejtcclxufVxyXG5pZighKF9zZXRfcHJvdG9fKHt9LF9zZXRfcHJvdG9fLnByb3RvdHlwZSkgaW5zdGFuY2VvZiBfc2V0X3Byb3RvXykpe1xyXG5cdF9zZXRfcHJvdG9fID0gZnVuY3Rpb24odGhpeixwYXJlbnQpe1xyXG5cdFx0ZnVuY3Rpb24gcCgpe307XHJcblx0XHRwLnByb3RvdHlwZSA9IHBhcmVudDtcclxuXHRcdHAgPSBuZXcgcCgpO1xyXG5cdFx0Zm9yKHBhcmVudCBpbiB0aGl6KXtcclxuXHRcdFx0cFtwYXJlbnRdID0gdGhpeltwYXJlbnRdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHA7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdChzb3VyY2Usc3RhcnQpe1xyXG5cdHZhciBtYXRjaDtcclxuXHR2YXIgYnVmID0gW107XHJcblx0dmFyIHJlZyA9IC8nW14nXSsnfFwiW15cIl0rXCJ8W15cXHM8PlxcLz1dKz0/fChcXC8/XFxzKj58PCkvZztcclxuXHRyZWcubGFzdEluZGV4ID0gc3RhcnQ7XHJcblx0cmVnLmV4ZWMoc291cmNlKTsvL3NraXAgPFxyXG5cdHdoaWxlKG1hdGNoID0gcmVnLmV4ZWMoc291cmNlKSl7XHJcblx0XHRidWYucHVzaChtYXRjaCk7XHJcblx0XHRpZihtYXRjaFsxXSlyZXR1cm4gYnVmO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0cy5YTUxSZWFkZXIgPSBYTUxSZWFkZXI7XHJcblxyXG4iLCIvKipcbiAqIFdyYXBwZXIgZm9yIGJ1aWx0LWluIGh0dHAuanMgdG8gZW11bGF0ZSB0aGUgYnJvd3NlciBYTUxIdHRwUmVxdWVzdCBvYmplY3QuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCB3aXRoIEpTIGRlc2lnbmVkIGZvciBicm93c2VycyB0byBpbXByb3ZlIHJldXNlIG9mIGNvZGUgYW5kXG4gKiBhbGxvdyB0aGUgdXNlIG9mIGV4aXN0aW5nIGxpYnJhcmllcy5cbiAqXG4gKiBVc2FnZTogaW5jbHVkZShcIlhNTEh0dHBSZXF1ZXN0LmpzXCIpIGFuZCB1c2UgWE1MSHR0cFJlcXVlc3QgcGVyIFczQyBzcGVjcy5cbiAqXG4gKiBAYXV0aG9yIERhbiBEZUZlbGlwcGkgPGRhbkBkcml2ZXJkYW4uY29tPlxuICogQGNvbnRyaWJ1dG9yIERhdmlkIEVsbGlzIDxkLmYuZWxsaXNAaWVlZS5vcmc+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG52YXIgVXJsID0gcmVxdWlyZShcInVybFwiKTtcbnZhciBzcGF3biA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpLnNwYXduO1xudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG5leHBvcnRzLlhNTEh0dHBSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8qKlxuICAgKiBQcml2YXRlIHZhcmlhYmxlc1xuICAgKi9cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xuICB2YXIgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbiAgLy8gSG9sZHMgaHR0cC5qcyBvYmplY3RzXG4gIHZhciByZXF1ZXN0O1xuICB2YXIgcmVzcG9uc2U7XG5cbiAgLy8gUmVxdWVzdCBzZXR0aW5nc1xuICB2YXIgc2V0dGluZ3MgPSB7fTtcblxuICAvLyBEaXNhYmxlIGhlYWRlciBibGFja2xpc3QuXG4gIC8vIE5vdCBwYXJ0IG9mIFhIUiBzcGVjcy5cbiAgdmFyIGRpc2FibGVIZWFkZXJDaGVjayA9IGZhbHNlO1xuXG4gIC8vIFNldCBzb21lIGRlZmF1bHQgaGVhZGVyc1xuICB2YXIgZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgXCJVc2VyLUFnZW50XCI6IFwibm9kZS1YTUxIdHRwUmVxdWVzdFwiLFxuICAgIFwiQWNjZXB0XCI6IFwiKi8qXCIsXG4gIH07XG5cbiAgdmFyIGhlYWRlcnMgPSB7fTtcbiAgdmFyIGhlYWRlcnNDYXNlID0ge307XG5cbiAgLy8gVGhlc2UgaGVhZGVycyBhcmUgbm90IHVzZXIgc2V0YWJsZS5cbiAgLy8gVGhlIGZvbGxvd2luZyBhcmUgYWxsb3dlZCBidXQgYmFubmVkIGluIHRoZSBzcGVjOlxuICAvLyAqIHVzZXItYWdlbnRcbiAgdmFyIGZvcmJpZGRlblJlcXVlc3RIZWFkZXJzID0gW1xuICAgIFwiYWNjZXB0LWNoYXJzZXRcIixcbiAgICBcImFjY2VwdC1lbmNvZGluZ1wiLFxuICAgIFwiYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1oZWFkZXJzXCIsXG4gICAgXCJhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZFwiLFxuICAgIFwiY29ubmVjdGlvblwiLFxuICAgIFwiY29udGVudC1sZW5ndGhcIixcbiAgICBcImNvbnRlbnQtdHJhbnNmZXItZW5jb2RpbmdcIixcbiAgICBcImNvb2tpZVwiLFxuICAgIFwiY29va2llMlwiLFxuICAgIFwiZGF0ZVwiLFxuICAgIFwiZXhwZWN0XCIsXG4gICAgXCJob3N0XCIsXG4gICAgXCJrZWVwLWFsaXZlXCIsXG4gICAgXCJvcmlnaW5cIixcbiAgICBcInJlZmVyZXJcIixcbiAgICBcInRlXCIsXG4gICAgXCJ0cmFpbGVyXCIsXG4gICAgXCJ0cmFuc2Zlci1lbmNvZGluZ1wiLFxuICAgIFwidXBncmFkZVwiLFxuICAgIFwidmlhXCJcbiAgXTtcblxuICAvLyBUaGVzZSByZXF1ZXN0IG1ldGhvZHMgYXJlIG5vdCBhbGxvd2VkXG4gIHZhciBmb3JiaWRkZW5SZXF1ZXN0TWV0aG9kcyA9IFtcbiAgICBcIlRSQUNFXCIsXG4gICAgXCJUUkFDS1wiLFxuICAgIFwiQ09OTkVDVFwiXG4gIF07XG5cbiAgLy8gU2VuZCBmbGFnXG4gIHZhciBzZW5kRmxhZyA9IGZhbHNlO1xuICAvLyBFcnJvciBmbGFnLCB1c2VkIHdoZW4gZXJyb3JzIG9jY3VyIG9yIGFib3J0IGlzIGNhbGxlZFxuICB2YXIgZXJyb3JGbGFnID0gZmFsc2U7XG5cbiAgLy8gRXZlbnQgbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSB7fTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHRoaXMuVU5TRU5UID0gMDtcbiAgdGhpcy5PUEVORUQgPSAxO1xuICB0aGlzLkhFQURFUlNfUkVDRUlWRUQgPSAyO1xuICB0aGlzLkxPQURJTkcgPSAzO1xuICB0aGlzLkRPTkUgPSA0O1xuXG4gIC8qKlxuICAgKiBQdWJsaWMgdmFyc1xuICAgKi9cblxuICAvLyBDdXJyZW50IHN0YXRlXG4gIHRoaXMucmVhZHlTdGF0ZSA9IHRoaXMuVU5TRU5UO1xuXG4gIC8vIGRlZmF1bHQgcmVhZHkgc3RhdGUgY2hhbmdlIGhhbmRsZXIgaW4gY2FzZSBvbmUgaXMgbm90IHNldCBvciBpcyBzZXQgbGF0ZVxuICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cbiAgLy8gUmVzdWx0ICYgcmVzcG9uc2VcbiAgdGhpcy5yZXNwb25zZVRleHQgPSBcIlwiO1xuICB0aGlzLnJlc3BvbnNlWE1MID0gXCJcIjtcbiAgdGhpcy5zdGF0dXMgPSBudWxsO1xuICB0aGlzLnN0YXR1c1RleHQgPSBudWxsO1xuICBcbiAgLy8gV2hldGhlciBjcm9zcy1zaXRlIEFjY2Vzcy1Db250cm9sIHJlcXVlc3RzIHNob3VsZCBiZSBtYWRlIHVzaW5nXG4gIC8vIGNyZWRlbnRpYWxzIHN1Y2ggYXMgY29va2llcyBvciBhdXRob3JpemF0aW9uIGhlYWRlcnNcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogUHJpdmF0ZSBtZXRob2RzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgc3BlY2lmaWVkIGhlYWRlciBpcyBhbGxvd2VkLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIGhlYWRlciBIZWFkZXIgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybiBib29sZWFuIEZhbHNlIGlmIG5vdCBhbGxvd2VkLCBvdGhlcndpc2UgdHJ1ZVxuICAgKi9cbiAgdmFyIGlzQWxsb3dlZEh0dHBIZWFkZXIgPSBmdW5jdGlvbihoZWFkZXIpIHtcbiAgICByZXR1cm4gZGlzYWJsZUhlYWRlckNoZWNrIHx8IChoZWFkZXIgJiYgZm9yYmlkZGVuUmVxdWVzdEhlYWRlcnMuaW5kZXhPZihoZWFkZXIudG9Mb3dlckNhc2UoKSkgPT09IC0xKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHNwZWNpZmllZCBtZXRob2QgaXMgYWxsb3dlZC5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyBtZXRob2QgUmVxdWVzdCBtZXRob2QgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybiBib29sZWFuIEZhbHNlIGlmIG5vdCBhbGxvd2VkLCBvdGhlcndpc2UgdHJ1ZVxuICAgKi9cbiAgdmFyIGlzQWxsb3dlZEh0dHBNZXRob2QgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICByZXR1cm4gKG1ldGhvZCAmJiBmb3JiaWRkZW5SZXF1ZXN0TWV0aG9kcy5pbmRleE9mKG1ldGhvZCkgPT09IC0xKTtcbiAgfTtcblxuICAvKipcbiAgICogUHVibGljIG1ldGhvZHNcbiAgICovXG5cbiAgLyoqXG4gICAqIE9wZW4gdGhlIGNvbm5lY3Rpb24uIEN1cnJlbnRseSBzdXBwb3J0cyBsb2NhbCBzZXJ2ZXIgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgbWV0aG9kIENvbm5lY3Rpb24gbWV0aG9kIChlZyBHRVQsIFBPU1QpXG4gICAqIEBwYXJhbSBzdHJpbmcgdXJsIFVSTCBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAqIEBwYXJhbSBib29sZWFuIGFzeW5jIEFzeW5jaHJvbm91cyBjb25uZWN0aW9uLiBEZWZhdWx0IGlzIHRydWUuXG4gICAqIEBwYXJhbSBzdHJpbmcgdXNlciBVc2VybmFtZSBmb3IgYmFzaWMgYXV0aGVudGljYXRpb24gKG9wdGlvbmFsKVxuICAgKiBAcGFyYW0gc3RyaW5nIHBhc3N3b3JkIFBhc3N3b3JkIGZvciBiYXNpYyBhdXRoZW50aWNhdGlvbiAob3B0aW9uYWwpXG4gICAqL1xuICB0aGlzLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIHBhc3N3b3JkKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICAgIGVycm9yRmxhZyA9IGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgZm9yIHZhbGlkIHJlcXVlc3QgbWV0aG9kXG4gICAgaWYgKCFpc0FsbG93ZWRIdHRwTWV0aG9kKG1ldGhvZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY3VyaXR5RXJyb3I6IFJlcXVlc3QgbWV0aG9kIG5vdCBhbGxvd2VkXCIpO1xuICAgIH1cblxuICAgIHNldHRpbmdzID0ge1xuICAgICAgXCJtZXRob2RcIjogbWV0aG9kLFxuICAgICAgXCJ1cmxcIjogdXJsLnRvU3RyaW5nKCksXG4gICAgICBcImFzeW5jXCI6ICh0eXBlb2YgYXN5bmMgIT09IFwiYm9vbGVhblwiID8gdHJ1ZSA6IGFzeW5jKSxcbiAgICAgIFwidXNlclwiOiB1c2VyIHx8IG51bGwsXG4gICAgICBcInBhc3N3b3JkXCI6IHBhc3N3b3JkIHx8IG51bGxcbiAgICB9O1xuXG4gICAgc2V0U3RhdGUodGhpcy5PUEVORUQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBvciBlbmFibGVzIGlzQWxsb3dlZEh0dHBIZWFkZXIoKSBjaGVjayB0aGUgcmVxdWVzdC4gRW5hYmxlZCBieSBkZWZhdWx0LlxuICAgKiBUaGlzIGRvZXMgbm90IGNvbmZvcm0gdG8gdGhlIFczQyBzcGVjLlxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiBzdGF0ZSBFbmFibGUgb3IgZGlzYWJsZSBoZWFkZXIgY2hlY2tpbmcuXG4gICAqL1xuICB0aGlzLnNldERpc2FibGVIZWFkZXJDaGVjayA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgZGlzYWJsZUhlYWRlckNoZWNrID0gc3RhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYSBoZWFkZXIgZm9yIHRoZSByZXF1ZXN0IG9yIGFwcGVuZHMgdGhlIHZhbHVlIGlmIG9uZSBpcyBhbHJlYWR5IHNldC5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyBoZWFkZXIgSGVhZGVyIG5hbWVcbiAgICogQHBhcmFtIHN0cmluZyB2YWx1ZSBIZWFkZXIgdmFsdWVcbiAgICovXG4gIHRoaXMuc2V0UmVxdWVzdEhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlciwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLk9QRU5FRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRF9TVEFURV9FUlI6IHNldFJlcXVlc3RIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gc3RhdGUgaXMgT1BFTlwiKTtcbiAgICB9XG4gICAgaWYgKCFpc0FsbG93ZWRIdHRwSGVhZGVyKGhlYWRlcikpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlJlZnVzZWQgdG8gc2V0IHVuc2FmZSBoZWFkZXIgXFxcIlwiICsgaGVhZGVyICsgXCJcXFwiXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2VuZEZsYWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklOVkFMSURfU1RBVEVfRVJSOiBzZW5kIGZsYWcgaXMgdHJ1ZVwiKTtcbiAgICB9XG4gICAgaGVhZGVyID0gaGVhZGVyc0Nhc2VbaGVhZGVyLnRvTG93ZXJDYXNlKCldIHx8IGhlYWRlcjtcbiAgICBoZWFkZXJzQ2FzZVtoZWFkZXIudG9Mb3dlckNhc2UoKV0gPSBoZWFkZXI7XG4gICAgaGVhZGVyc1toZWFkZXJdID0gaGVhZGVyc1toZWFkZXJdID8gaGVhZGVyc1toZWFkZXJdICsgJywgJyArIHZhbHVlIDogdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYSBoZWFkZXIgZnJvbSB0aGUgc2VydmVyIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIGhlYWRlciBOYW1lIG9mIGhlYWRlciB0byBnZXQuXG4gICAqIEByZXR1cm4gc3RyaW5nIFRleHQgb2YgdGhlIGhlYWRlciBvciBudWxsIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICB0aGlzLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgaWYgKHR5cGVvZiBoZWFkZXIgPT09IFwic3RyaW5nXCJcbiAgICAgICYmIHRoaXMucmVhZHlTdGF0ZSA+IHRoaXMuT1BFTkVEXG4gICAgICAmJiByZXNwb25zZVxuICAgICAgJiYgcmVzcG9uc2UuaGVhZGVyc1xuICAgICAgJiYgcmVzcG9uc2UuaGVhZGVyc1toZWFkZXIudG9Mb3dlckNhc2UoKV1cbiAgICAgICYmICFlcnJvckZsYWdcbiAgICApIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5oZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyBhbGwgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqXG4gICAqIEByZXR1cm4gc3RyaW5nIEEgc3RyaW5nIHdpdGggYWxsIHJlc3BvbnNlIGhlYWRlcnMgc2VwYXJhdGVkIGJ5IENSK0xGXG4gICAqL1xuICB0aGlzLmdldEFsbFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPCB0aGlzLkhFQURFUlNfUkVDRUlWRUQgfHwgZXJyb3JGbGFnKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBpIGluIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgIC8vIENvb2tpZSBoZWFkZXJzIGFyZSBleGNsdWRlZFxuICAgICAgaWYgKGkgIT09IFwic2V0LWNvb2tpZVwiICYmIGkgIT09IFwic2V0LWNvb2tpZTJcIikge1xuICAgICAgICByZXN1bHQgKz0gaSArIFwiOiBcIiArIHJlc3BvbnNlLmhlYWRlcnNbaV0gKyBcIlxcclxcblwiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnN1YnN0cigwLCByZXN1bHQubGVuZ3RoIC0gMik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYSByZXF1ZXN0IGhlYWRlclxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIG5hbWUgTmFtZSBvZiBoZWFkZXIgdG8gZ2V0XG4gICAqIEByZXR1cm4gc3RyaW5nIFJldHVybnMgdGhlIHJlcXVlc3QgaGVhZGVyIG9yIGVtcHR5IHN0cmluZyBpZiBub3Qgc2V0XG4gICAqL1xuICB0aGlzLmdldFJlcXVlc3RIZWFkZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmIGhlYWRlcnNDYXNlW25hbWUudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgIHJldHVybiBoZWFkZXJzW2hlYWRlcnNDYXNlW25hbWUudG9Mb3dlckNhc2UoKV1dO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIGRhdGEgT3B0aW9uYWwgZGF0YSB0byBzZW5kIGFzIHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHRoaXMuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLk9QRU5FRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRF9TVEFURV9FUlI6IGNvbm5lY3Rpb24gbXVzdCBiZSBvcGVuZWQgYmVmb3JlIHNlbmQoKSBpcyBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgaWYgKHNlbmRGbGFnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJTlZBTElEX1NUQVRFX0VSUjogc2VuZCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgc3NsID0gZmFsc2UsIGxvY2FsID0gZmFsc2U7XG4gICAgdmFyIHVybCA9IFVybC5wYXJzZShzZXR0aW5ncy51cmwpO1xuICAgIHZhciBob3N0O1xuICAgIC8vIERldGVybWluZSB0aGUgc2VydmVyXG4gICAgc3dpdGNoICh1cmwucHJvdG9jb2wpIHtcbiAgICAgIGNhc2UgXCJodHRwczpcIjpcbiAgICAgICAgc3NsID0gdHJ1ZTtcbiAgICAgICAgLy8gU1NMICYgbm9uLVNTTCBib3RoIG5lZWQgaG9zdCwgbm8gYnJlYWsgaGVyZS5cbiAgICAgIGNhc2UgXCJodHRwOlwiOlxuICAgICAgICBob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImZpbGU6XCI6XG4gICAgICAgIGxvY2FsID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgY2FzZSBcIlwiOlxuICAgICAgICBob3N0ID0gXCJsb2NhbGhvc3RcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3RvY29sIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgIH1cblxuICAgIC8vIExvYWQgZmlsZXMgb2ZmIHRoZSBsb2NhbCBmaWxlc3lzdGVtIChmaWxlOi8vKVxuICAgIGlmIChsb2NhbCkge1xuICAgICAgaWYgKHNldHRpbmdzLm1ldGhvZCAhPT0gXCJHRVRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYTUxIdHRwUmVxdWVzdDogT25seSBHRVQgbWV0aG9kIGlzIHN1cHBvcnRlZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNldHRpbmdzLmFzeW5jKSB7XG4gICAgICAgIGZzLnJlYWRGaWxlKHVybC5wYXRobmFtZSwgXCJ1dGY4XCIsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5zdGF0dXMgPSAyMDA7XG4gICAgICAgICAgICBzZWxmLnJlc3BvbnNlVGV4dCA9IGRhdGE7XG4gICAgICAgICAgICBzZXRTdGF0ZShzZWxmLkRPTkUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gZnMucmVhZEZpbGVTeW5jKHVybC5wYXRobmFtZSwgXCJ1dGY4XCIpO1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gMjAwO1xuICAgICAgICAgIHNldFN0YXRlKHNlbGYuRE9ORSk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gcG9ydCA4MC4gSWYgYWNjZXNzaW5nIGxvY2FsaG9zdCBvbiBhbm90aGVyIHBvcnQgYmUgc3VyZVxuICAgIC8vIHRvIHVzZSBodHRwOi8vbG9jYWxob3N0OnBvcnQvcGF0aFxuICAgIHZhciBwb3J0ID0gdXJsLnBvcnQgfHwgKHNzbCA/IDQ0MyA6IDgwKTtcbiAgICAvLyBBZGQgcXVlcnkgc3RyaW5nIGlmIG9uZSBpcyB1c2VkXG4gICAgdmFyIHVyaSA9IHVybC5wYXRobmFtZSArICh1cmwuc2VhcmNoID8gdXJsLnNlYXJjaCA6IFwiXCIpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBpZiB0aGV5IGhhdmVuJ3QgYmVlbiBzZXRcbiAgICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRIZWFkZXJzKSB7XG4gICAgICBpZiAoIWhlYWRlcnNDYXNlW25hbWUudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgaGVhZGVyc1tuYW1lXSA9IGRlZmF1bHRIZWFkZXJzW25hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB0aGUgSG9zdCBoZWFkZXIgb3IgdGhlIHNlcnZlciBtYXkgcmVqZWN0IHRoZSByZXF1ZXN0XG4gICAgaGVhZGVycy5Ib3N0ID0gaG9zdDtcbiAgICBpZiAoISgoc3NsICYmIHBvcnQgPT09IDQ0MykgfHwgcG9ydCA9PT0gODApKSB7XG4gICAgICBoZWFkZXJzLkhvc3QgKz0gXCI6XCIgKyB1cmwucG9ydDtcbiAgICB9XG5cbiAgICAvLyBTZXQgQmFzaWMgQXV0aCBpZiBuZWNlc3NhcnlcbiAgICBpZiAoc2V0dGluZ3MudXNlcikge1xuICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5wYXNzd29yZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBzZXR0aW5ncy5wYXNzd29yZCA9IFwiXCI7XG4gICAgICB9XG4gICAgICB2YXIgYXV0aEJ1ZiA9IG5ldyBCdWZmZXIoc2V0dGluZ3MudXNlciArIFwiOlwiICsgc2V0dGluZ3MucGFzc3dvcmQpO1xuICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gXCJCYXNpYyBcIiArIGF1dGhCdWYudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbnRlbnQgbGVuZ3RoIGhlYWRlclxuICAgIGlmIChzZXR0aW5ncy5tZXRob2QgPT09IFwiR0VUXCIgfHwgc2V0dGluZ3MubWV0aG9kID09PSBcIkhFQURcIikge1xuICAgICAgZGF0YSA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChkYXRhKSB7XG4gICAgICBoZWFkZXJzW1wiQ29udGVudC1MZW5ndGhcIl0gPSBCdWZmZXIuaXNCdWZmZXIoZGF0YSkgPyBkYXRhLmxlbmd0aCA6IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpO1xuXG4gICAgICBpZiAoIWhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0pIHtcbiAgICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZXR0aW5ncy5tZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgICAvLyBGb3IgYSBwb3N0IHdpdGggbm8gZGF0YSBzZXQgQ29udGVudC1MZW5ndGg6IDAuXG4gICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGJ5IGJ1Z2d5IHNlcnZlcnMgdGhhdCBkb24ndCBtZWV0IHRoZSBzcGVjcy5cbiAgICAgIGhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBob3N0OiBob3N0LFxuICAgICAgcG9ydDogcG9ydCxcbiAgICAgIHBhdGg6IHVyaSxcbiAgICAgIG1ldGhvZDogc2V0dGluZ3MubWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIGFnZW50OiBmYWxzZSxcbiAgICAgIHdpdGhDcmVkZW50aWFsczogc2VsZi53aXRoQ3JlZGVudGlhbHNcbiAgICB9O1xuXG4gICAgLy8gUmVzZXQgZXJyb3IgZmxhZ1xuICAgIGVycm9yRmxhZyA9IGZhbHNlO1xuXG4gICAgLy8gSGFuZGxlIGFzeW5jIHJlcXVlc3RzXG4gICAgaWYgKHNldHRpbmdzLmFzeW5jKSB7XG4gICAgICAvLyBVc2UgdGhlIHByb3BlciBwcm90b2NvbFxuICAgICAgdmFyIGRvUmVxdWVzdCA9IHNzbCA/IGh0dHBzLnJlcXVlc3QgOiBodHRwLnJlcXVlc3Q7XG5cbiAgICAgIC8vIFJlcXVlc3QgaXMgYmVpbmcgc2VudCwgc2V0IHNlbmQgZmxhZ1xuICAgICAgc2VuZEZsYWcgPSB0cnVlO1xuXG4gICAgICAvLyBBcyBwZXIgc3BlYywgdGhpcyBpcyBjYWxsZWQgaGVyZSBmb3IgaGlzdG9yaWNhbCByZWFzb25zLlxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KFwicmVhZHlzdGF0ZWNoYW5nZVwiKTtcblxuICAgICAgLy8gSGFuZGxlciBmb3IgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIYW5kbGVyID0gZnVuY3Rpb24gcmVzcG9uc2VIYW5kbGVyKHJlc3ApIHtcbiAgICAgICAgLy8gU2V0IHJlc3BvbnNlIHZhciB0byB0aGUgcmVzcG9uc2Ugd2UgZ290IGJhY2tcbiAgICAgICAgLy8gVGhpcyBpcyBzbyBpdCByZW1haW5zIGFjY2Vzc2FibGUgb3V0c2lkZSB0aGlzIHNjb3BlXG4gICAgICAgIHJlc3BvbnNlID0gcmVzcDtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZGlyZWN0XG4gICAgICAgIC8vIEBUT0RPIFByZXZlbnQgbG9vcGVkIHJlZGlyZWN0c1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMzAxIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMiB8fCByZXNwb25zZS5zdGF0dXNDb2RlID09PSAzMDMgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMzA3KSB7XG4gICAgICAgICAgLy8gQ2hhbmdlIFVSTCB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb25cbiAgICAgICAgICBzZXR0aW5ncy51cmwgPSByZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uO1xuICAgICAgICAgIHZhciB1cmwgPSBVcmwucGFyc2Uoc2V0dGluZ3MudXJsKTtcbiAgICAgICAgICAvLyBTZXQgaG9zdCB2YXIgaW4gY2FzZSBpdCdzIHVzZWQgbGF0ZXJcbiAgICAgICAgICBob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICAgIC8vIE9wdGlvbnMgZm9yIHRoZSBuZXcgcmVxdWVzdFxuICAgICAgICAgIHZhciBuZXdPcHRpb25zID0ge1xuICAgICAgICAgICAgaG9zdG5hbWU6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgICAgIHBvcnQ6IHVybC5wb3J0LFxuICAgICAgICAgICAgcGF0aDogdXJsLnBhdGgsXG4gICAgICAgICAgICBtZXRob2Q6IHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMyA/IFwiR0VUXCIgOiBzZXR0aW5ncy5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBzZWxmLndpdGhDcmVkZW50aWFsc1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBJc3N1ZSB0aGUgbmV3IHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0ID0gZG9SZXF1ZXN0KG5ld09wdGlvbnMsIHJlc3BvbnNlSGFuZGxlcikub24oXCJlcnJvclwiLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICAgIHJlcXVlc3QuZW5kKCk7XG4gICAgICAgICAgLy8gQFRPRE8gQ2hlY2sgaWYgYW4gWEhSIGV2ZW50IG5lZWRzIHRvIGJlIGZpcmVkIGhlcmVcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZyhcInV0ZjhcIik7XG5cbiAgICAgICAgc2V0U3RhdGUoc2VsZi5IRUFERVJTX1JFQ0VJVkVEKTtcbiAgICAgICAgc2VsZi5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuXG4gICAgICAgIHJlc3BvbnNlLm9uKFwiZGF0YVwiLCBmdW5jdGlvbihjaHVuaykge1xuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSdzIHNvbWUgZGF0YVxuICAgICAgICAgIGlmIChjaHVuaykge1xuICAgICAgICAgICAgc2VsZi5yZXNwb25zZVRleHQgKz0gY2h1bms7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERvbid0IGVtaXQgc3RhdGUgY2hhbmdlcyBpZiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICAgICAgICAgIGlmIChzZW5kRmxhZykge1xuICAgICAgICAgICAgc2V0U3RhdGUoc2VsZi5MT0FESU5HKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc3BvbnNlLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChzZW5kRmxhZykge1xuICAgICAgICAgICAgLy8gRGlzY2FyZCB0aGUgZW5kIGV2ZW50IGlmIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGFib3J0ZWRcbiAgICAgICAgICAgIHNldFN0YXRlKHNlbGYuRE9ORSk7XG4gICAgICAgICAgICBzZW5kRmxhZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzcG9uc2Uub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIHNlbGYuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEVycm9yIGhhbmRsZXIgZm9yIHRoZSByZXF1ZXN0XG4gICAgICB2YXIgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycm9yKSB7XG4gICAgICAgIHNlbGYuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgfTtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gZG9SZXF1ZXN0KG9wdGlvbnMsIHJlc3BvbnNlSGFuZGxlcikub24oXCJlcnJvclwiLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAvLyBOb2RlIDAuNCBhbmQgbGF0ZXIgd29uJ3QgYWNjZXB0IGVtcHR5IGRhdGEuIE1ha2Ugc3VyZSBpdCdzIG5lZWRlZC5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJlcXVlc3Qud3JpdGUoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuZW5kKCk7XG5cbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChcImxvYWRzdGFydFwiKTtcbiAgICB9IGVsc2UgeyAvLyBTeW5jaHJvbm91c1xuICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IGZpbGUgZm9yIGNvbW11bmljYXRpb24gd2l0aCB0aGUgb3RoZXIgTm9kZSBwcm9jZXNzXG4gICAgICB2YXIgY29udGVudEZpbGUgPSBcIi5ub2RlLXhtbGh0dHByZXF1ZXN0LWNvbnRlbnQtXCIgKyBwcm9jZXNzLnBpZDtcbiAgICAgIHZhciBzeW5jRmlsZSA9IFwiLm5vZGUteG1saHR0cHJlcXVlc3Qtc3luYy1cIiArIHByb2Nlc3MucGlkO1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhzeW5jRmlsZSwgXCJcIiwgXCJ1dGY4XCIpO1xuICAgICAgLy8gVGhlIGFzeW5jIHJlcXVlc3QgdGhlIG90aGVyIE5vZGUgcHJvY2VzcyBleGVjdXRlc1xuICAgICAgdmFyIGV4ZWNTdHJpbmcgPSBcInZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpLCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyksIGZzID0gcmVxdWlyZSgnZnMnKTtcIlxuICAgICAgICArIFwidmFyIGRvUmVxdWVzdCA9IGh0dHBcIiArIChzc2wgPyBcInNcIiA6IFwiXCIpICsgXCIucmVxdWVzdDtcIlxuICAgICAgICArIFwidmFyIG9wdGlvbnMgPSBcIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpICsgXCI7XCJcbiAgICAgICAgKyBcInZhciByZXNwb25zZVRleHQgPSAnJztcIlxuICAgICAgICArIFwidmFyIHJlcSA9IGRvUmVxdWVzdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1wiXG4gICAgICAgICsgXCJyZXNwb25zZS5zZXRFbmNvZGluZygndXRmOCcpO1wiXG4gICAgICAgICsgXCJyZXNwb25zZS5vbignZGF0YScsIGZ1bmN0aW9uKGNodW5rKSB7XCJcbiAgICAgICAgKyBcIiAgcmVzcG9uc2VUZXh0ICs9IGNodW5rO1wiXG4gICAgICAgICsgXCJ9KTtcIlxuICAgICAgICArIFwicmVzcG9uc2Uub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1wiXG4gICAgICAgICsgXCJmcy53cml0ZUZpbGVTeW5jKCdcIiArIGNvbnRlbnRGaWxlICsgXCInLCBKU09OLnN0cmluZ2lmeSh7ZXJyOiBudWxsLCBkYXRhOiB7c3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSwgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycywgdGV4dDogcmVzcG9uc2VUZXh0fX0pLCAndXRmOCcpO1wiXG4gICAgICAgICsgXCJmcy51bmxpbmtTeW5jKCdcIiArIHN5bmNGaWxlICsgXCInKTtcIlxuICAgICAgICArIFwifSk7XCJcbiAgICAgICAgKyBcInJlc3BvbnNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycm9yKSB7XCJcbiAgICAgICAgKyBcImZzLndyaXRlRmlsZVN5bmMoJ1wiICsgY29udGVudEZpbGUgKyBcIicsIEpTT04uc3RyaW5naWZ5KHtlcnI6IGVycm9yfSksICd1dGY4Jyk7XCJcbiAgICAgICAgKyBcImZzLnVubGlua1N5bmMoJ1wiICsgc3luY0ZpbGUgKyBcIicpO1wiXG4gICAgICAgICsgXCJ9KTtcIlxuICAgICAgICArIFwifSkub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcIlxuICAgICAgICArIFwiZnMud3JpdGVGaWxlU3luYygnXCIgKyBjb250ZW50RmlsZSArIFwiJywgSlNPTi5zdHJpbmdpZnkoe2VycjogZXJyb3J9KSwgJ3V0ZjgnKTtcIlxuICAgICAgICArIFwiZnMudW5saW5rU3luYygnXCIgKyBzeW5jRmlsZSArIFwiJyk7XCJcbiAgICAgICAgKyBcIn0pO1wiXG4gICAgICAgICsgKGRhdGEgPyBcInJlcS53cml0ZSgnXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKS5zbGljZSgxLC0xKS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIikgKyBcIicpO1wiOlwiXCIpXG4gICAgICAgICsgXCJyZXEuZW5kKCk7XCI7XG4gICAgICAvLyBTdGFydCB0aGUgb3RoZXIgTm9kZSBQcm9jZXNzLCBleGVjdXRpbmcgdGhpcyBzdHJpbmdcbiAgICAgIHZhciBzeW5jUHJvYyA9IHNwYXduKHByb2Nlc3MuYXJndlswXSwgW1wiLWVcIiwgZXhlY1N0cmluZ10pO1xuICAgICAgd2hpbGUoZnMuZXhpc3RzU3luYyhzeW5jRmlsZSkpIHtcbiAgICAgICAgLy8gV2FpdCB3aGlsZSB0aGUgc3luYyBmaWxlIGlzIGVtcHR5XG4gICAgICB9XG4gICAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGNvbnRlbnRGaWxlLCAndXRmOCcpKTtcbiAgICAgIC8vIEtpbGwgdGhlIGNoaWxkIHByb2Nlc3Mgb25jZSB0aGUgZmlsZSBoYXMgZGF0YVxuICAgICAgc3luY1Byb2Muc3RkaW4uZW5kKCk7XG4gICAgICAvLyBSZW1vdmUgdGhlIHRlbXBvcmFyeSBmaWxlXG4gICAgICBmcy51bmxpbmtTeW5jKGNvbnRlbnRGaWxlKTtcblxuICAgICAgaWYgKHJlc3AuZXJyKSB7XG4gICAgICAgIHNlbGYuaGFuZGxlRXJyb3IocmVzcC5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcG9uc2UgPSByZXNwLmRhdGE7XG4gICAgICAgIHNlbGYuc3RhdHVzID0gcmVzcC5kYXRhLnN0YXR1c0NvZGU7XG4gICAgICAgIHNlbGYucmVzcG9uc2VUZXh0ID0gcmVzcC5kYXRhLnRleHQ7XG4gICAgICAgIHNldFN0YXRlKHNlbGYuRE9ORSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBlcnJvciBpcyBlbmNvdW50ZXJlZCB0byBkZWFsIHdpdGggaXQuXG4gICAqL1xuICB0aGlzLmhhbmRsZUVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICB0aGlzLnN0YXR1cyA9IDA7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gZXJyb3I7XG4gICAgdGhpcy5yZXNwb25zZVRleHQgPSBlcnJvci5zdGFjaztcbiAgICBlcnJvckZsYWcgPSB0cnVlO1xuICAgIHNldFN0YXRlKHRoaXMuRE9ORSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdlcnJvcicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBYm9ydHMgYSByZXF1ZXN0LlxuICAgKi9cbiAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBoZWFkZXJzID0gZGVmYXVsdEhlYWRlcnM7XG4gICAgdGhpcy5zdGF0dXMgPSAwO1xuICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gXCJcIjtcbiAgICB0aGlzLnJlc3BvbnNlWE1MID0gXCJcIjtcblxuICAgIGVycm9yRmxhZyA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLlVOU0VOVFxuICAgICAgICAmJiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLk9QRU5FRCB8fCBzZW5kRmxhZylcbiAgICAgICAgJiYgdGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLkRPTkUpIHtcbiAgICAgIHNlbmRGbGFnID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSh0aGlzLkRPTkUpO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSB0aGlzLlVOU0VOVDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2Fib3J0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIuIFByZWZlcnJlZCBtZXRob2Qgb2YgYmluZGluZyB0byBldmVudHMuXG4gICAqL1xuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIShldmVudCBpbiBsaXN0ZW5lcnMpKSB7XG4gICAgICBsaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgfVxuICAgIC8vIEN1cnJlbnRseSBhbGxvd3MgZHVwbGljYXRlIGNhbGxiYWNrcy4gU2hvdWxkIGl0P1xuICAgIGxpc3RlbmVyc1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBjYWxsYmFjayB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gYm91bmQuXG4gICAqIE9ubHkgd29ya3Mgb24gdGhlIG1hdGNoaW5nIGZ1bmNpdG9uLCBjYW5ub3QgYmUgYSBjb3B5LlxuICAgKi9cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGV2ZW50IGluIGxpc3RlbmVycykge1xuICAgICAgLy8gRmlsdGVyIHdpbGwgcmV0dXJuIGEgbmV3IGFycmF5IHdpdGggdGhlIGNhbGxiYWNrIHJlbW92ZWRcbiAgICAgIGxpc3RlbmVyc1tldmVudF0gPSBsaXN0ZW5lcnNbZXZlbnRdLmZpbHRlcihmdW5jdGlvbihldikge1xuICAgICAgICByZXR1cm4gZXYgIT09IGNhbGxiYWNrO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhbnkgZXZlbnRzLCBpbmNsdWRpbmcgYm90aCBcIm9uXCIgbWV0aG9kcyBhbmQgZXZlbnRzIGF0dGFjaGVkIHVzaW5nIGFkZEV2ZW50TGlzdGVuZXIuXG4gICAqL1xuICB0aGlzLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZltcIm9uXCIgKyBldmVudF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgc2VsZltcIm9uXCIgKyBldmVudF0oKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50IGluIGxpc3RlbmVycykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpc3RlbmVyc1tldmVudF0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2V2ZW50XVtpXS5jYWxsKHNlbGYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2hhbmdlcyByZWFkeVN0YXRlIGFuZCBjYWxscyBvbnJlYWR5c3RhdGVjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBpbnQgc3RhdGUgTmV3IHN0YXRlXG4gICAqL1xuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PSBzZWxmLkxPQURJTkcgfHwgc2VsZi5yZWFkeVN0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgc2VsZi5yZWFkeVN0YXRlID0gc3RhdGU7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5hc3luYyB8fCBzZWxmLnJlYWR5U3RhdGUgPCBzZWxmLk9QRU5FRCB8fCBzZWxmLnJlYWR5U3RhdGUgPT09IHNlbGYuRE9ORSkge1xuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5yZWFkeVN0YXRlID09PSBzZWxmLkRPTkUgJiYgIWVycm9yRmxhZykge1xuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoXCJsb2FkXCIpO1xuICAgICAgICAvLyBAVE9ETyBmaWd1cmUgb3V0IEluc3BlY3Rvckluc3RydW1lbnRhdGlvbjo6ZGlkTG9hZFhIUihjb29raWUpXG4gICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChcImxvYWRlbmRcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbiIsInZhciBOMyA9IHJlcXVpcmUoJ24zJyk7XG5cbnZhciBucyA9IHt9O1xuXG5ucy5wcmVmaXhlcyA9IHtcdHJkZjogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjXCIsXG5cdFx0XHQgICAgYnFtb2RlbDogXCJodHRwOi8vYmlvbW9kZWxzLm5ldC9tb2RlbC1xdWFsaWZpZXJzL1wiLFxuXHRcdFx0ICAgIGJxYmlvbDogXCJodHRwOi8vYmlvbW9kZWxzLm5ldC9iaW9sb2d5LXF1YWxpZmllcnMvXCIsXG5cdFx0XHQgICAgc2lvOiBcImh0dHA6Ly9zZW1hbnRpY3NjaWVuY2Uub3JnL3Jlc291cmNlL1wiLFxuXHRcdFx0ICAgIGVpc2JtOiBcImh0dHA6Ly93d3cuZWlzYm0ub3JnL1wifTtcblxuLy8gcHVyZSBzaG9ydGN1dCBmdW5jdGlvblxubnMuZXhwYW5kUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG5cdHJldHVybiBOMy5VdGlsLmV4cGFuZFByZWZpeGVkTmFtZShwcmVmaXgsIG5zLnByZWZpeGVzKVxufTtcblxuLy8gY29tbW9ubHkgdXNlZCBzdHJpbmdzXG5zdHJfc2lvMjIzID0gXCJzaW86U0lPXzAwMDIyM1wiO1xuc3RyX3NpbzIyM2V4cCA9IG5zLmV4cGFuZFByZWZpeChzdHJfc2lvMjIzKTtcbnN0cl9zaW8xMTYgPSBcInNpbzpTSU9fMDAwMTE2XCI7XG5zdHJfc2lvMTE2ZXhwID0gbnMuZXhwYW5kUHJlZml4KHN0cl9zaW8xMTYpO1xuc3RyX3JkZnZhbHVlID0gXCJyZGY6dmFsdWVcIjtcbnN0cl9yZGZ2YWx1ZWV4cCA9IG5zLmV4cGFuZFByZWZpeChzdHJfcmRmdmFsdWUpO1xuc3RyX3JkZnR5cGUgPSBcInJkZjp0eXBlXCI7XG5zdHJfcmRmdHlwZWV4cCA9IG5zLmV4cGFuZFByZWZpeChzdHJfcmRmdHlwZSk7XG5zdHJfcmRmYmFnID0gXCJyZGY6QmFnXCI7XG5zdHJfcmRmYmFnZXhwID0gbnMuZXhwYW5kUHJlZml4KHN0cl9yZGZiYWcpO1xuXG5jb250cm9sbGVkVm9jYWJ1bGFyeUxpc3QgPSBbXG5cdFwiYnFtb2RlbDppc1wiLFxuXHRcImJxbW9kZWw6aXNEZXJpdmVkRnJvbVwiLFxuXHRcImJxbW9kZWw6aXNEZXNjcmliZWRCeVwiLFxuXHRcImJxbW9kZWw6aXNJbnN0YW5jZU9mXCIsXG5cdFwiYnFtb2RlbDpoYXNJbnN0YW5jZVwiLFxuXG5cdFwiYnFiaW9sOmlzXCIsXG5cdFwiYnFiaW9sOmVuY29kZXNcIixcblx0XCJicWJpb2w6aGFzUGFydFwiLFxuXHRcImJxYmlvbDpoYXNQcm9wZXJ0eVwiLFxuXHRcImJxYmlvbDpoYXNWZXJzaW9uXCIsXG5cdFwiYnFiaW9sOmlzRGVzY3JpYmVkQnlcIixcblx0XCJicWJpb2w6aXNFbmNvZGVkQnlcIixcblx0XCJicWJpb2w6aXNIb21vbG9nVG9cIixcblx0XCJicWJpb2w6aXNQYXJ0T2ZcIixcblx0XCJicWJpb2w6aXNQcm9wZXJ0eU9mXCIsXG5cdFwiYnFiaW9sOmlzVmVyc2lvbk9mXCIsXG5cdFwiYnFiaW9sOm9jY3Vyc0luXCIsXG5cdFwiYnFiaW9sOmhhc1RheG9uXCIsXG5cblx0XCJzaW86U0lPXzAwMDIyM1wiXG5dO1xuXG5ucy5pc0NvbnRyb2xsZWRWb2NhYnVsYXJ5ID0ge307XG5mb3IodmFyIGk9MDsgaTxjb250cm9sbGVkVm9jYWJ1bGFyeUxpc3QubGVuZ3RoOyBpKyspIHtcblx0dmFyIHRlcm0gPSBjb250cm9sbGVkVm9jYWJ1bGFyeUxpc3RbaV07XG5cdG5zLmlzQ29udHJvbGxlZFZvY2FidWxhcnlbbnMuZXhwYW5kUHJlZml4KHRlcm0pXSA9IHRydWU7XG59XG5cbm5zLnJlZHVjZVByZWZpeCA9IGZ1bmN0aW9uIChleHBhbmRlZFN0cmluZykge1xuXHRmb3IgKHZhciBrZXkgaW4gbnMucHJlZml4ZXMpIHtcblx0XHR2YXIgY29tcGxldGVQcmVmaXggPSBucy5wcmVmaXhlc1trZXldO1xuXHRcdGlmIChleHBhbmRlZFN0cmluZy5zdGFydHNXaXRoKGNvbXBsZXRlUHJlZml4KSkge1xuXHRcdFx0cmV0dXJuIGV4cGFuZGVkU3RyaW5nLnJlcGxhY2UoY29tcGxldGVQcmVmaXgsIGtleSsnOicpO1xuXHRcdH1cblx0fVxuXHQvLyBubyBwcmVmaXggY291bGQgYmUgcmVjb2duaXplZFxuXHRyZXR1cm4gZXhwYW5kZWRTdHJpbmc7XG59O1xuXG5ucy5nZXRDdXN0b21Qcm9wZXJ0aWVzT2ZJZCA9IGZ1bmN0aW9uIChncmFwaCwgaWQpIHtcblx0dmFyIGt2cmVzdWx0ID0ge307XG5cdC8vY29uc29sZS5sb2coZ3JhcGguZ2V0VHJpcGxlcygpKTtcblx0dmFyIHByb3BCYWdzID0gZ3JhcGguZ2V0VHJpcGxlcyhpZCwgc3RyX3NpbzIyMywgbnVsbCk7XG5cdC8vY29uc29sZS5sb2cocHJvcEJhZ3MpO1xuXHRmb3IodmFyIGk9MDsgaTxwcm9wQmFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwcm9wQmFnID0gcHJvcEJhZ3NbaV0ub2JqZWN0O1xuXHRcdC8vY29uc29sZS5sb2cocHJvcEJhZyk7XG5cdFx0dmFyIHByb3BlcnR5Q29udGFpbmVycyA9IGdyYXBoLmdldFRyaXBsZXMocHJvcEJhZywgbnVsbCwgbnVsbCk7XG5cdFx0Ly9jb25zb2xlLmxvZyhwcm9wZXJ0eUNvbnRhaW5lcnMpO1xuXHRcdGZvcih2YXIgaj0wOyBqPHByb3BlcnR5Q29udGFpbmVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0dmFyIHByb3BlcnR5Q29udGFpbmVyID0gcHJvcGVydHlDb250YWluZXJzW2pdLm9iamVjdDtcblx0XHRcdGlmKHByb3BlcnR5Q29udGFpbmVyID09IHN0cl9yZGZiYWdleHApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiY29udGFpbmVyXCIsIHByb3BlcnR5Q29udGFpbmVyKTtcblx0XHRcdHZhciB2YWx1ZSA9IGdyYXBoLmdldE9iamVjdHMocHJvcGVydHlDb250YWluZXIsIHN0cl9yZGZ2YWx1ZWV4cCwgbnVsbClbMF07XG5cdFx0XHR2YWx1ZSA9IE4zLlV0aWwuZ2V0TGl0ZXJhbFZhbHVlKHZhbHVlKTtcblx0XHRcdHZhciBrZXkgPSBncmFwaC5nZXRPYmplY3RzKHByb3BlcnR5Q29udGFpbmVyLCBzdHJfc2lvMTE2ZXhwLCBudWxsKVswXTtcblx0XHRcdGtleSA9IE4zLlV0aWwuZ2V0TGl0ZXJhbFZhbHVlKGtleSk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGtleSwgdmFsdWUpO1xuXHRcdFx0a3ZyZXN1bHRba2V5XSA9IHZhbHVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4ga3ZyZXN1bHQ7XG59O1xuXG5ucy5nZXRBbGxJZHMgPSBmdW5jdGlvbiAoZ3JhcGgpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgYWxsID0gZ3JhcGguZ2V0U3ViamVjdHMoKTtcblx0Ly9jb25zb2xlLmxvZyhncmFwaC5nZXRUcmlwbGVzKCkpO1xuXHQvL2NvbnNvbGUubG9nKGFsbCk7XG5cdGZvcih2YXIgaT0wOyBpPGFsbC5sZW5ndGg7IGkrKykge1xuXHRcdGlmKCEgTjMuVXRpbC5pc0JsYW5rKGFsbFtpXSkpIHtcblx0XHRcdHZhciBzdWJqZWN0ID0gYWxsW2ldOyAvLyBwb3RlbnRpYWwgSURzXG5cdFx0XHQvLyBub3cgY2hlY2sgaWYgdGhleSBhcmVuJ3QgdXNlZCBhcyBvYmplY3Qgb2Ygb3RoZXIgdHJpcGxlc1xuXHRcdFx0dmFyIGlkQXNPYmplY3QgPSBncmFwaC5jb3VudFRyaXBsZXMobnVsbCwgbnVsbCwgc3ViamVjdCk7XG5cdFx0XHRpZiAoaWRBc09iamVjdCA9PSAwKSB7IC8vIG5vdGhpbmcgaXMgb3ZlciB0aGlzIGlkLCB0cnVlIGlkXG5cdFx0XHRcdHJlc3VsdC5wdXNoKHN1YmplY3QpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiB3aWxsIGFkZCB0cmlwbGVzIHRvIHJlcHJlc2VudCBrZXkvdmFsdWUgcHJvcGVydGllcyBhdHRhY2hlZCB0byB0aGUgaWRcbiAqIGt2T2JqZWN0IGNhbiBoYXZlIG9uZSBvciBtdWx0aXBsZSBwcm9wZXJ0aWVzXG4gKi9cbm5zLmFkZEN1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gKGdyYXBoLCBpZCwga3ZPYmplY3QpIHtcblx0dmFyIHNpbzIyM0VsZW1lbnQgPSBucy5nZXRSZWxhdGlvbnNoaXAoZ3JhcGgsIGlkLCBzdHJfc2lvMjIzKVswXTsgLy8gZG9lc24ndCBtYXR0ZXIgaWYgbW9yZSB0aGFuIG9uZVxuXHQvL2NvbnNvbGUubG9nKFwiYWRkIGt2IHRvXCIsIGhhc1Byb3BFbGVtZW50KTtcblx0Zm9yKHZhciBrZXkgaW4ga3ZPYmplY3QpIHtcblx0XHQvLyB1c2luZyBlbGVtbnQgY291bnQgYXMgaW5kZXggbWF5IGJlIGRhbmdlcm91cyBpZiBwcmV2aW91cyBtYW5pcHVsYXRpb24gb2Zcblx0XHQvLyB0aGUgZWxlbWVudHMgaGFzIGhhcHBlbmVkLiBMaWtlIHJlbW92aW5nIG9uZS4gXG5cdFx0dmFyIHByb3BJbmRleCA9IG5zLmNvdW50QmFnRWxlbWVudHMoZ3JhcGgsIHNpbzIyM0VsZW1lbnQpICsgMTtcblx0XHQvL2NvbnNvbGUubG9nKFwiZWxlbWVudHMgaW4gYmFnOlwiLCBwcm9wSW5kZXgpO1xuXHRcdHZhciBuZXdCbGFuayA9IGdyYXBoLmNyZWF0ZUJsYW5rTm9kZSgpO1xuXHRcdC8vY29uc29sZS5sb2coXCJleHBhbmQgbGlzdCBlbGVtZW50XCIsIG5zLmV4cGFuZFByZWZpeChcInJkZjpfXCIrcHJvcEluZGV4KSk7XG5cdFx0Z3JhcGguYWRkVHJpcGxlKHNpbzIyM0VsZW1lbnQsIG5zLmV4cGFuZFByZWZpeChcInJkZjpfXCIrcHJvcEluZGV4KSwgbmV3QmxhbmspO1xuXHRcdGdyYXBoLmFkZFRyaXBsZShuZXdCbGFuaywgc3RyX3NpbzExNmV4cCwgTjMuVXRpbC5jcmVhdGVMaXRlcmFsKGtleSkpO1xuXHRcdGdyYXBoLmFkZFRyaXBsZShuZXdCbGFuaywgc3RyX3JkZnZhbHVlZXhwLCBOMy5VdGlsLmNyZWF0ZUxpdGVyYWwoa3ZPYmplY3Rba2V5XSkpO1xuXHRcdC8vY29uc29sZS5sb2coXCJhZGRlZFwiLCBrZXksIGt2T2JqZWN0W2tleV0pO1xuXHR9XG59O1xuXG5ucy5oYXNSZWxhdGlvbnNoaXAgPSBmdW5jdGlvbiAoZ3JhcGgsIGlkLCByZWxhdGlvbnNoaXApIHtcblx0dmFyIGNvdW50UHJvcCA9IGdyYXBoLmNvdW50VHJpcGxlcyhpZCwgcmVsYXRpb25zaGlwLCBudWxsKTtcblx0cmV0dXJuIGNvdW50UHJvcCA+IDA7XG59O1xuXG5ucy5jb3VudEJhZ0VsZW1lbnRzID0gZnVuY3Rpb24oZ3JhcGgsIHN1YmplY3QpIHtcblx0cmV0dXJuIGdyYXBoLmNvdW50VHJpcGxlcyhzdWJqZWN0LCBudWxsLCBudWxsKSAtIDE7XG59O1xuXG5ucy5nZXRSZXNvdXJjZXNPZklkID0gZnVuY3Rpb24oZ3JhcGgsIGlkKSB7XG5cdHZhciByZXN1bHQgPSB7fTtcblx0Z3JhcGguZm9yRWFjaChmdW5jdGlvbihpbml0X3RyaXBsZSl7IC8vIGl0ZXJhdGUgb3ZlciBhbGwgaWQgcmVsYXRpb25zaGlwc1xuXHRcdC8vIHdlIHdhbnQgZXZlcnl0aGluZyB0aGF0IGlzIG5vdCBhIHNpbXBlbCBrZXkvdmFsdWUgcHJvcGVydHlcblx0XHRpZihpbml0X3RyaXBsZS5wcmVkaWNhdGUgIT0gc3RyX3NpbzIyM2V4cCkge1xuXHRcdFx0dmFyIHJlbGF0aW9uID0gaW5pdF90cmlwbGUucHJlZGljYXRlO1xuXHRcdFx0Ly8gaW5pdGlhbGl6ZSByZWxhdGlvbiBhcnJheSBpZiBuZXZlciBlbmNvdW50ZXJlZCBiZWZvcmVcblx0XHRcdGlmKCFyZXN1bHQuaGFzT3duUHJvcGVydHkocmVsYXRpb24pKSB7XG5cdFx0XHRcdHJlc3VsdFtyZWxhdGlvbl0gPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgbXVsdGlwbGUgcmVzb3VyY2VzIHNwZWNpZmllZCwgb3IgYSBzaW5nbGUgZWxlbWVudCB3aXRoIHNldmVyYWwgYXR0cmlidXRlcyxcblx0XHRcdC8vIGJsYW5rIG5vZGUgaXMgaW52b2x2ZWQsIHBvc3NpYmx5IHdpdGggYSBiYWcgYXR0cmlidXRlXG5cdFx0XHRpZihOMy5VdGlsLmlzQmxhbmsoaW5pdF90cmlwbGUub2JqZWN0KSkge1xuXHRcdFx0XHR2YXIgcmVzb3VyY2VDb250YWluZXIgPSBpbml0X3RyaXBsZS5vYmplY3Q7XG5cdFx0XHRcdGdyYXBoLmZvckVhY2goZnVuY3Rpb24odHJpcGxlKXsgLy8gaXRlcmF0ZSBvdmVyIHRoZSBlbGVtZW50cyBvZiB0aGUgcmVsYXRpb25zaGlwXG5cdFx0XHRcdFx0Ly8gcmVsYXRpb25zaGlwIG1heSBiZSBhIGJhZywgYW5kIHRodXMgY29udGFpbnMgdW5kZXNpcmFibGUgcmRmOnR5cGUgYmFnIGxpbmVcblx0XHRcdFx0XHRpZih0cmlwbGUub2JqZWN0ICE9IHN0cl9yZGZiYWdleHApIHtcblx0XHRcdFx0XHRcdHZhciByZXNvdXJjZSA9IHRyaXBsZS5vYmplY3Q7XG5cdFx0XHRcdFx0XHRyZXN1bHRbcmVsYXRpb25dLnB1c2gocmVzb3VyY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgcmVzb3VyY2VDb250YWluZXIsIG51bGwsIG51bGwpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7IFxuXHRcdFx0XHQvLyBzaW1wbGUgY2FzZSwgbm8gYmFnLCBvbmx5IDEgcmVzb3VyY2UgaXMgbGlua2VkIHdpdGggMSBhdHRyaWJ1dGVcblx0XHRcdFx0dmFyIHJlc291cmNlID0gaW5pdF90cmlwbGUub2JqZWN0O1xuXHRcdFx0XHRyZXN1bHRbcmVsYXRpb25dLnB1c2gocmVzb3VyY2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwgaWQsIG51bGwsIG51bGwpO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBpZCBvZiBhIG5ld2x5IGNyZWF0ZWQgYmxhbmsgbm9kZSByZXByZXNlbnRpbmcgdGhlIEhhc1Byb3BlcnR5IHByZWRpY2F0ZVxuICogaWYgb25lIGFscmVhZHkgZXhpc3RzLCByZXR1cm5zIGl0cyBpZFxuICogcmV0dXJucyBhcnJheSwgcG90ZW50aWFsbHkgc2V2ZXJhbCBTSU8yMjMgcHJlc2VudFxuICovXG5ucy5nZXRSZWxhdGlvbnNoaXAgPSBmdW5jdGlvbiAoZ3JhcGgsIGlkLCByZWxhdGlvbnNoaXApIHtcblx0aWYgKG5zLmhhc1JlbGF0aW9uc2hpcChncmFwaCwgaWQsIHJlbGF0aW9uc2hpcCkpIHtcblx0XHR2YXIgb2JqZWN0ID0gZ3JhcGguZ2V0T2JqZWN0cyhpZCwgcmVsYXRpb25zaGlwLCBudWxsKVswXTsgLy8gY2FyZWZ1bCBoZXJlXG5cdFx0aWYgKCFOMy5VdGlsLmlzQmxhbmsob2JqZWN0KSl7XG5cdFx0XHQvLyBvYmplY3Qgb2YgcmVsYXRpb25zaGlwIGlzbid0IGEgYmFnLiBOZWVkIHRvIHR1cm4gaXQgaW50byBhIGJhZy5cblx0XHRcdHZhciBuZXdCYWcgPSBucy5jcmVhdGVCYWcoZ3JhcGgsIGlkLCByZWxhdGlvbnNoaXApO1xuXHRcdFx0Z3JhcGguYWRkVHJpcGxlKGlkLCByZWxhdGlvbnNoaXAsIG5ld0JhZyk7XG5cdFx0XHRncmFwaC5hZGRUcmlwbGUobmV3QmFnLCBucy5leHBhbmRQcmVmaXgoXCJyZGY6XzFcIiksIG9iamVjdCk7XG5cdFx0XHRyZXR1cm4gW25ld0JhZ107XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0cmV0dXJuIGdyYXBoLmdldE9iamVjdHMoaWQsIHJlbGF0aW9uc2hpcCwgbnVsbCk7XG5cdFx0fVxuXHR9XG5cdGVsc2Uge1xuXHRcdHJldHVybiBbbnMuY3JlYXRlQmFnKGdyYXBoLCBpZCwgcmVsYXRpb25zaGlwKV07XG5cdH1cbn07XG5cbm5zLmNyZWF0ZUJhZyA9IGZ1bmN0aW9uIChncmFwaCwgaWQsIHJlbGF0aW9uc2hpcCkge1xuXHR2YXIgbmV3QmxhbmsgPSBncmFwaC5jcmVhdGVCbGFua05vZGUoKTtcblx0Z3JhcGguYWRkVHJpcGxlKGlkLCBucy5leHBhbmRQcmVmaXgocmVsYXRpb25zaGlwKSwgbmV3QmxhbmspO1xuXHRncmFwaC5hZGRUcmlwbGUobmV3QmxhbmssIHN0cl9yZGZ0eXBlZXhwLCBzdHJfcmRmYmFnZXhwKTtcblx0cmV0dXJuIG5ld0JsYW5rO1xufTtcblxuLyoqXG4gKiBrdm9iamVjdCBjb250YWlucyBiaW9sb2d5IHF1YWxpZmllciBhcyBrZXkgYW5kIG1pcmlhbSByZXNvdXJjZSBhcyB2YWx1ZVxuICovXG5ucy5hZGRSZXNvdXJjZSA9IGZ1bmN0aW9uIChncmFwaCwgaWQsIGt2T2JqZWN0KSB7XG5cdGZvcih2YXIgcmVsYXRpb24gaW4ga3ZPYmplY3QpIHtcblx0XHQvL2NvbnNvbGUubG9nKFwicmVsYXRpb25cIiwgcmVsYXRpb24pO1xuXHRcdHZhciByZWxhdGlvbkVsZW1lbnQgPSBucy5nZXRSZWxhdGlvbnNoaXAoZ3JhcGgsIGlkLCByZWxhdGlvbilbMF07IC8vIGRvZXNuJ3QgbWF0dGVyIGlmIG1vcmUgdGhhbiBvbmVcblx0XHQvL2NvbnNvbGUubG9nKFwiYWZ0ZXIgZ2V0IHJlbGF0aW9uXCIscmVsYXRpb25FbGVtZW50LCBncmFwaC5nZXRUcmlwbGVzKGlkLCByZWxhdGlvbikpO1xuXHRcdC8vY29uc29sZS5sb2coXCJhZnRlciBnZXQgcmVhbHRpb25cIiwgZ3JhcGguZ2V0VHJpcGxlcygpKTtcblx0XHQvLyB1c2luZyBlbGVtbnQgY291bnQgYXMgaW5kZXggbWF5IGJlIGRhbmdlcm91cyBpZiBwcmV2aW91cyBtYW5pcHVsYXRpb24gb2Zcblx0XHQvLyB0aGUgZWxlbWVudHMgaGFzIGhhcHBlbmVkLiBMaWtlIHJlbW92aW5nIG9uZS4gXG5cdFx0dmFyIHByb3BJbmRleCA9IG5zLmNvdW50QmFnRWxlbWVudHMoZ3JhcGgsIHJlbGF0aW9uRWxlbWVudCkgKyAxO1xuXHRcdC8vY29uc29sZS5sb2coXCJlbGVtZW50cyBpbiBiYWc6XCIsIHByb3BJbmRleCk7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIm5ldyBibGFuayBub2RlXCIsIGdyYXBoLmdldFRyaXBsZXMoKSk7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIldpbGwgYWRkXCIsIHJlbGF0aW9uRWxlbWVudCwgbnMuZXhwYW5kUHJlZml4KFwicmRmOl9cIitwcm9wSW5kZXgpLCBrdk9iamVjdFtyZWxhdGlvbl0pO1xuXHRcdGdyYXBoLmFkZFRyaXBsZShyZWxhdGlvbkVsZW1lbnQsIG5zLmV4cGFuZFByZWZpeChcInJkZjpfXCIrcHJvcEluZGV4KSwga3ZPYmplY3RbcmVsYXRpb25dKTtcblx0XHQvL2NvbnNvbGUubG9nKFwiZW5kIHJlc3VsdFwiLCBncmFwaC5nZXRUcmlwbGVzKCkpO1xuXHRcdC8vY29uc29sZS5sb2coXCJhZGRlZFwiLCByZWxhdGlvbiwga3ZPYmplY3RbcmVsYXRpb25dKTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuczsiLCIvKipcbiAqIEBtb2R1bGUgbGlic2Jnbi1hbm5vdGF0aW9uc1xuICogQG5hbWVzcGFjZSBsaWJzYmduLmFubm90XG4qL1xuXG52YXIgY2hlY2tQYXJhbXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcycpLmNoZWNrUGFyYW1zO1xudmFyICRyZGYgPSByZXF1aXJlKCdyZGZsaWInKTtcbnZhciB4bWxkb20gPSByZXF1aXJlKCd4bWxkb20nKTtcbnZhciBOMyA9IHJlcXVpcmUoJ24zJyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4vYW5ub3RhdGlvbi11dGlscycpO1xuXG52YXIgbnMgPSB7fTtcblxuLypcblx0RVhBTVBMRTpcblxuXHQ8cmRmOlJERiBcblx0XHR4bWxuczpyZGY9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjXCJcblx0ICAgIHhtbG5zOmJxbW9kZWw9XCJodHRwOi8vYmlvbW9kZWxzLm5ldC9tb2RlbC1xdWFsaWZpZXJzL1wiXG5cdCAgICB4bWxuczpicWJpb2w9XCJodHRwOi8vYmlvbW9kZWxzLm5ldC9iaW9sb2d5LXF1YWxpZmllcnMvXCJcblx0ICAgIHhtbG5zOmVpc2JtPVwiaHR0cDovL3d3dy5laXNibS5vcmcvcmRmLWFubm90YXRpb24tbmV3dC9cIj5cblx0XHQ8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD1cIiNfMDAwMDAxXCI+XG5cdFx0XHQ8YnFtb2RlbDppcz5cblx0XHRcdFx0PHJkZjpCYWc+XG5cdFx0XHRcdFx0PHJkZjpsaSByZGY6cmVzb3VyY2U9XCJodHRwOi8vaWRlbnRpZmllcnMub3JnL2Jpb21vZGVscy5kYi9CSU9NRDAwMDAwMDAwMDRcIiAvPlxuXHRcdFx0XHQ8L3JkZjpCYWc+XG5cdFx0XHQ8L2JxbW9kZWw6aXM+XG5cblx0XHRcdDxicW1vZGVsOmlzRGVzY3JpYmVkQnk+XG5cdFx0XHRcdDxyZGY6QmFnPlxuXHRcdFx0XHRcdDxyZGY6bGkgcmRmOnJlc291cmNlPVwiaHR0cDovL2lkZW50aWZpZXJzLm9yZy9wdWJtZWQvMTgzMzc3NFwiIC8+XG5cdFx0XHRcdDwvcmRmOkJhZz5cblx0XHRcdDwvYnFtb2RlbDppc0Rlc2NyaWJlZEJ5PlxuXG5cdFx0XHQ8ZWlzYm06aGFzUHJvcGVydHk+XG5cdFx0XHRcdDxyZGY6QmFnPlxuXHRcdFx0XHRcdDxlaXNibTppdGVtIGVpc2JtOmtleT1cImRhdGFcIiBlaXNibTp2YWx1ZT1cIjQyXCIgLz5cblx0XHRcdFx0XHQ8ZWlzYm06aXRlbSBlaXNibTprZXk9XCJkYXRhMlwiIGVpc2JtOnZhbHVlPVwiMS4yM1wiIC8+XG5cdFx0XHRcdDwvcmRmOkJhZz5cblx0XHRcdDwvZWlzYm06aGFzUHJvcGVydHk+XG5cblx0XHQ8L3JkZjpEZXNjcmlwdGlvbj5cblx0PC9yZGY6UkRGPiBcblxuXG4qL1xuXG4vL25zLnhtbG5zID0gXCJodHRwOi8vd3d3LnNibWwub3JnL3NibWwvbGV2ZWwzL3ZlcnNpb24xL3JlbmRlci92ZXJzaW9uMVwiO1xuXG4vLyAtLS0tLS0tIEFOTk9UQVRJT04gLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7YW5ub3RhdGlvbiZndDs8L2NvZGU+IGVsZW1lbnQuXG4gKiBAY2xhc3NcbiAqL1xudmFyIEFubm90YXRpb24gPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsncmRmRWxlbWVudCddKTtcblx0dGhpcy5yZGZFbGVtZW50ID0gcGFyYW1zLnJkZkVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UmRmRWxlbWVudH0gcmRmRWxlbWVudFxuICovXG5Bbm5vdGF0aW9uLnByb3RvdHlwZS5zZXRSZGZFbGVtZW50ID0gZnVuY3Rpb24ocmRmRWxlbWVudCkge1xuXHR0aGlzLnJkZkVsZW1lbnQgPSByZGZFbGVtZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5Bbm5vdGF0aW9uLnByb3RvdHlwZS5idWlsZFhtbE9iaiA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGFubm90YXRpb24gPSBuZXcgeG1sZG9tLkRPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdhbm5vdGF0aW9uJyk7XG5cdGlmICh0aGlzLnJkZkVsZW1lbnQgIT0gbnVsbCkge1xuXHRcdHZhciByZGYgPSB0aGlzLnJkZkVsZW1lbnQ7XG5cdFx0Ly8gbmVlZCB0byBwYXJzZSB0aGUgc3RyaW5nIHJldHVybmVkIGJ5IHNlcmlhbGl6aW5nIHRoZSByZGYgaW50byBhIGRvbSBlbGVtZW50XG5cdFx0dmFyIHhtbERvYyA9IG5ldyB4bWxkb20uRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJkZi50b1hNTCgpLCBcInRleHQveG1sXCIpO1xuXHRcdHZhciByZGZET01FbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyZGY6UkRGJylbMF07XG5cdFx0YW5ub3RhdGlvbi5hcHBlbmRDaGlsZChyZGZET01FbGVtZW50KTtcblx0fVxuXHRyZXR1cm4gYW5ub3RhdGlvbjtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5Bbm5vdGF0aW9uLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxcbiAqIEByZXR1cm4ge0Fubm90YXRpb259XG4gKi9cbkFubm90YXRpb24uZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWwpIHtcblx0aWYgKHhtbC50YWdOYW1lICE9ICdhbm5vdGF0aW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgYW5ub3RhdGlvbiwgZ290OiBcIiArIHhtbC50YWdOYW1lKTtcblx0fVxuXHR2YXIgYW5ub3RhdGlvbiA9IG5ldyBucy5Bbm5vdGF0aW9uKCk7XG5cblx0LyoqIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncmRmOlJERicpIGRvZXNuJ3Qgd29yayBmb3IgQ2hyb21lICovXG5cdHZhciByZGZYTUwgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3JkZjpSREYnKVswXSB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1JERicpWzBdO1xuXHRpZiAocmRmWE1MICE9IG51bGwpIHtcblx0XHR2YXIgcmRmID0gbnMuUmRmRWxlbWVudC5mcm9tWE1MKHJkZlhNTCk7XG5cdFx0YW5ub3RhdGlvbi5zZXRSZGZFbGVtZW50KHJkZik7XG5cdH1cblxuXHRyZXR1cm4gYW5ub3RhdGlvbjtcbn07XG5ucy5Bbm5vdGF0aW9uID0gQW5ub3RhdGlvbjtcbi8vIC0tLS0tLS0gRU5EIEFOTk9UQVRJT04gLS0tLS0tLVxuXG4vLyAtLS0tLS0tIEdMT0JBTFNUT1JFIC0tLS0tLS1cbnZhciBHbG9iYWxSZGZTdG9yZSA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5zdG9yZSA9IE4zLlN0b3JlKCk7XG59O1xuXG5HbG9iYWxSZGZTdG9yZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChhbm5vdGF0aW9ucykge1xuXHRmb3IodmFyIGk9MDsgaTxhbm5vdGF0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBhbm5vdCA9IGFubm90YXRpb25zW2ldO1xuXHRcdGlmKGFubm90LnJkZkVsZW1lbnQgIT0gbnVsbCkge1xuXHRcdFx0dmFyIHJkZkVsZW1lbnQgPSBhbm5vdC5yZGZFbGVtZW50cztcblx0XHRcdHRoaXMuc3RvcmUuYWRkVHJpcGxlcyhyZGZFbGVtZW50LnN0b3JlLmdldFRyaXBsZXMoKSk7XG5cdFx0fVxuXHR9XG5cdHRoaXMuc3RvcmUuYWRkUHJlZml4ZXMoVXRpbC5wcmVmaXhlcyk7XG59O1xuXG5HbG9iYWxSZGZTdG9yZS5wcm90b3R5cGUuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQgPSBmdW5jdGlvbiAoaWQpIHtcblx0cmV0dXJuIFV0aWwuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQodGhpcy5zdG9yZSwgaWQpO1xufTtcblxuR2xvYmFsUmRmU3RvcmUucHJvdG90eXBlLmdldEFsbElkcyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIFV0aWwuZ2V0QWxsSWRzKHRoaXMuc3RvcmUpO1xufTtcblxuR2xvYmFsUmRmU3RvcmUucHJvdG90eXBlLmFkZEN1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gKGlkLCBrdk9iamVjdCkge1xuXHRyZXR1cm4gVXRpbC5hZGRDdXN0b21Qcm9wZXJ0eSh0aGlzLnN0b3JlLCBpZCwga3ZPYmplY3QpO1xufTtcblxuR2xvYmFsUmRmU3RvcmUucHJvdG90eXBlLmdldFJlc291cmNlc09mSWQgPSBmdW5jdGlvbihpZCkge1xuXHRyZXR1cm4gVXRpbC5nZXRSZXNvdXJjZXNPZklkKHRoaXMuc3RvcmUsIGlkKTtcbn07XG5cbkdsb2JhbFJkZlN0b3JlLnByb3RvdHlwZS5hZGRSZXNvdXJjZSA9IGZ1bmN0aW9uIChpZCwga3ZPYmplY3QpIHtcblx0cmV0dXJuIFV0aWwuYWRkUmVzb3VyY2UodGhpcy5zdG9yZSwgaWQsIGt2T2JqZWN0KTtcbn07XG5cbkdsb2JhbFJkZlN0b3JlLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gKCkge1xuXHRjb25zb2xlLmxvZyhcImdsb2JhbHN0b3JlIHRlc3RcIik7XG5cdHZhciBpZDIgPSBcImh0dHA6Ly9sb2NhbC9hbklEMDAwMDAyXCI7XG5cdHZhciBpZDEgPSBcImh0dHA6Ly9sb2NhbC9hbklEMDAwMDAxXCI7XG5cdGNvbnNvbGUubG9nKFwiYWxsIHByb3BlcnRpZXMgb2YgaWQyXCIsIHRoaXMuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQoaWQyKSk7XG5cdGNvbnNvbGUubG9nKFwiYWxsIGlkc1wiLCB0aGlzLmdldEFsbElkcygpKTtcblx0Y29uc29sZS5sb2coXCJoYXNTSU9cIiwgVXRpbC5oYXNSZWxhdGlvbnNoaXAodGhpcy5zdG9yZSwgaWQyLCBcInNpbzpTSU9fMDAwMjIzXCIpKTtcblx0Y29uc29sZS5sb2coXCJhZGQgaGFzcHJvcFwiLCBVdGlsLmdldFJlbGF0aW9uc2hpcCh0aGlzLnN0b3JlLCBpZDEsIFwic2lvOlNJT18wMDAyMjNcIikpO1xuXHRjb25zb2xlLmxvZyhcImFkZCBoYXNwcm9wMlwiLCBVdGlsLmdldFJlbGF0aW9uc2hpcCh0aGlzLnN0b3JlLCBpZDIsIFwic2lvOlNJT18wMDAyMjNcIikpO1xuXHRjb25zb2xlLmxvZyhcImhhc1NJTzJcIiwgVXRpbC5oYXNSZWxhdGlvbnNoaXAodGhpcy5zdG9yZSwgaWQyLCBcInNpbzpTSU9fMDAwMjIzXCIpKTtcblx0Y29uc29sZS5sb2coXCJhZGQga3Zwcm9wXCIsIFV0aWwuYWRkQ3VzdG9tUHJvcGVydHkodGhpcy5zdG9yZSwgaWQyLCB7dGVzdDogXCJ0ZXN0dmFsdWVcIn0pKTtcblx0Y29uc29sZS5sb2coXCJhbGwgcHJvcGVydGllcyBvZiBpZDJcIiwgdGhpcy5nZXRDdXN0b21Qcm9wZXJ0aWVzT2ZJZChpZDIpKTtcblx0Y29uc29sZS5sb2coXCItLS0tLS0tXCIpO1xuXHRjb25zb2xlLmxvZyhcImFsbCBwcm9wZXJ0aWVzIG9mIGlkXCIsIHRoaXMuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQoaWQxKSk7XG5cdGNvbnNvbGUubG9nKFwiYWRkIGt2cHJvcFwiLCBVdGlsLmFkZEN1c3RvbVByb3BlcnR5KHRoaXMuc3RvcmUsIGlkMSwge3Rlc3Q6IFwidGVzdHZhbHVlXCJ9KSk7XG5cdGNvbnNvbGUubG9nKFwiYWxsIHByb3BlcnRpZXMgb2YgaWRcIiwgdGhpcy5nZXRDdXN0b21Qcm9wZXJ0aWVzT2ZJZChpZDEpKTtcblx0Y29uc29sZS5sb2coXCIqKioqKioqKioqXCIpO1xuXHRjb25zb2xlLmxvZyhcImdldCBhbGwgcmVzb3VyY2VzXCIsIFV0aWwuZ2V0UmVzb3VyY2VzT2ZJZCh0aGlzLnN0b3JlLCBpZDEpKTtcblx0Y29uc29sZS5sb2coXCJnZXQgYWxsIHJlc291cmNlcyBmb3IgaWQyXCIsIFV0aWwuZ2V0UmVzb3VyY2VzT2ZJZCh0aGlzLnN0b3JlLCBpZDIpKTtcblx0Y29uc29sZS5sb2coXCIqKioqKioqKioqXCIpO1xuXHRjb25zb2xlLmxvZyhcImFkZCByZXNvdXJjZSBmb3IgaWQyXCIsIFV0aWwuYWRkUmVzb3VyY2UodGhpcy5zdG9yZSwgaWQyLCB7XCJicWJpb2w6aXNcIjogXCJodHRwOi8vYVVSTFwifSkpO1xuXHRjb25zb2xlLmxvZyhcImdldCBhbGwgcmVzb3VyY2VzIGZvciBpZDJcIiwgVXRpbC5nZXRSZXNvdXJjZXNPZklkKHRoaXMuc3RvcmUsIGlkMikpO1xuXHRjb25zb2xlLmxvZyhcImFkZCByZXNvdXJjZSBmb3IgaWQyXCIsIFV0aWwuYWRkUmVzb3VyY2UodGhpcy5zdG9yZSwgaWQyLCB7XCJicW1vZGVsOmlzXCI6IFwiaHR0cDovL2FVUkxaWlpcIn0pKTtcblx0Y29uc29sZS5sb2coXCJnZXQgYWxsIHJlc291cmNlcyBmb3IgaWQyXCIsIFV0aWwuZ2V0UmVzb3VyY2VzT2ZJZCh0aGlzLnN0b3JlLCBpZDIpKTtcblx0Lyp2YXIgc2VsZiA9IHRoaXM7XG5cdHRoaXMuZ2V0QWxsSWRzKCkuZm9yRWFjaChmdW5jdGlvbihlKXtcblx0XHRjb25zb2xlLmxvZyhlLCBzZWxmLmdldEN1c3RvbVByb3BlcnRpZXNPZklkKGUpKTtcblx0fSk7Ki9cbn07XG5cbm5zLkdsb2JhbFJkZlN0b3JlID0gR2xvYmFsUmRmU3RvcmU7XG4vLyAtLS0tLS0tIEVORCBHTE9CQUxTVE9SRSAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gUkRGRUxFTUVOVCAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtyZDpSREZmJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICovXG52YXIgUmRmRWxlbWVudCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWydzdG9yZSddKTtcblx0aWYgKHBhcmFtcy5zdG9yZSkge1xuXHRcdHRoaXMuc3RvcmUgPSBwYXJhbXMuc3RvcmU7XG5cdH1cblx0ZWxzZSB7XG5cdFx0dmFyIHN0b3JlID0gTjMuU3RvcmUoKTtcblx0XHRzdG9yZS5hZGRQcmVmaXhlcyhVdGlsLnByZWZpeGVzKTtcblx0XHR0aGlzLnN0b3JlID0gc3RvcmU7XG5cdH1cbn07XG5cblJkZkVsZW1lbnQudXJpID0gJ2h0dHA6Ly93d3cuZWlzYm0ub3JnLyc7XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5SZGZFbGVtZW50LnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uKCkge1xuXHQvKlxuXHRcdEFkZCBzb21lIGZ1bmN0aW9ucyB0byB0aGUgd3JpdGVyIG9iamVjdCBvZiBOM1xuXHRcdFRob3NlIGZ1bmN0aW9ucyB3aWxsIGFsbG93IHVzIHRvIHNlcmlhbGl6ZSB0cmlwbGVzIHN5bmNocm9ub3VzbHkuXG5cdFx0V2l0aG91dCBpdCwgd2Ugd291bGQgYmUgZm9yY2VkIHRvIHVzZSB0aGUgYXN5bmNocm9ub3VzIGZ1bmN0aW9ucy5cblx0Ki9cblx0ZnVuY3Rpb24gYWRkU2ltcGxlV3JpdGUgKHdyaXRlcikge1xuXHRcdC8vIHJlcGxpY2F0ZXMgdGhlIHdyaXRlci5fd3JpdGUgZnVuY3Rpb24gYnV0IHJldHVybnMgYSBzdHJpbmdcblx0XHR3cml0ZXIuc2ltcGxlV3JpdGVUcmlwbGUgPSBmdW5jdGlvbiAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUoc3ViamVjdCkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlSXJpT3JCbGFua05vZGUocHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSArXG5cdFx0XHQoZ3JhcGggPyAnICcgKyB0aGlzLl9lbmNvZGVJcmlPckJsYW5rTm9kZShncmFwaCkgKyAnLlxcbicgOiAnLlxcbicpXG5cdFx0fTtcblx0XHQvLyBhbGxvd3MgdG8gcHJvdmlkZSBhbiBhcnJheSBvZiB0cmlwbGVzIGFuZCBjb25jYXRlbmF0ZSB0aGVpciBzZXJpYWxpemVkIHN0cmluZ3Ncblx0XHR3cml0ZXIuc2ltcGxlV3JpdGVUcmlwbGVzID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cdFx0XHR2YXIgc3RyaW5nTjMgPSAnJztcblx0XHRcdGZvciAodmFyIGk9MDsgaTxhcnJheS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgdHJpcGxlID0gYXJyYXlbaV07XG5cdFx0XHRcdHN0cmluZ04zICs9IHRoaXMuc2ltcGxlV3JpdGVUcmlwbGUodHJpcGxlLnN1YmplY3QsIHRyaXBsZS5wcmVkaWNhdGUsIHRyaXBsZS5vYmplY3QsIHRyaXBsZS5ncmFwaCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc3RyaW5nTjM7XG5cdFx0fTtcblx0fVxuXG5cdC8vIHNlcmlhbGl6ZSB0aGUgc3RvcmVkIGdyYXBoIHRvIE4zXG5cdHZhciB3cml0ZXIgPSBOMy5Xcml0ZXIoeyBwcmVmaXhlczogVXRpbC5wcmVmaXhlcywgZm9ybWF0OiAnTi1UcmlwbGVzJyB9KTtcblx0YWRkU2ltcGxlV3JpdGUod3JpdGVyKTsgLy8gYWRkIG91ciBjdXN0b20gbWV0aG9kcyB0byB0aGUgd3JpdGVyXG5cdHZhciBzdHJpbmdOMyA9IHdyaXRlci5zaW1wbGVXcml0ZVRyaXBsZXModGhpcy5zdG9yZS5nZXRUcmlwbGVzKCkpOyAvLyB1c2UgY3VzdG9tIG1ldGhvZCB0byBzZXJpYWxpemUgdHJpcGxlc1xuXG5cdC8vIHJlYWQgTjMgZm9ybWF0XG5cdHZhciBncmFwaCA9ICRyZGYuZ3JhcGgoKTtcblx0dHJ5IHtcblx0ICAgICRyZGYucGFyc2Uoc3RyaW5nTjMsIGdyYXBoLCBSZGZFbGVtZW50LnVyaSwgJ3RleHQvbjMnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdCAgICBjb25zb2xlLmxvZyhlcnIpO1xuXHR9XG5cdC8qXG5cdFx0VGhlIG5hbWVzcGFjZSBwcmVmaXhlcyBhcmUgbG9zdCBpbiB0aGUgbjMgZm9ybWF0LCBzbyByZGZsaWIgd2lsbCBndWVzcyB0aGVtIG9uIGl0cyBvd24uXG5cdFx0VGhlIHJlc3VsdCBnaXZlcyB3ZWlyZCB3cm9uZyBwcmVmaXhlcy4gSGVyZSB3ZSBwcm92aWRlIHRoZSBvcmlnaW5hbCBuYW1lcy4gQWVzdGhldGljIHB1cnBvc2Ugb25seS5cblx0Ki9cblx0Z3JhcGgubmFtZXNwYWNlcyA9IFV0aWwucHJlZml4ZXM7XG5cblx0Lypcblx0XHRzZXJpYWxpemUgdG8gUkRGK1hNTCBcblx0XHRwcm9ibGVtLCB0aGUgb3V0cHV0IGRpZmZlcnMgZnJvbSB0aGUgb3JpZ2luYWwgWE1MLiByZGZsaWIgZXhwYW5kcyBjb2xsZWN0aW9ucyBsaWtlIEJhZywgYW5kIFxuXHRcdGVsZW1lbnRzIHdpdGggb25seSBhdHJpYnV0ZXMuIEl0IGFsc28gbWFrZXMgdGhpbmdzIGxlc3MgcmVhZGFibGUuXG5cdFx0V2UgbmVlZCB0byByZXBsYWNlIHNldmVyYWwgdGhpbmdzIHRvIGtlZXAgb3V0cHV0IHRoZSBzYW1lIGFzIGlucHV0LiBcblx0Ki9cblx0dmFyIHNlcmlhbGl6ZSA9ICRyZGYuc2VyaWFsaXplKCRyZGYuc3ltKFJkZkVsZW1lbnQudXJpKSwgZ3JhcGgsIHVuZGVmaW5lZCwgJ2FwcGxpY2F0aW9uL3JkZit4bWwnKTtcblxuXHRmdW5jdGlvbiByZXBsYWNlTGkoc3RyaW5nKSB7XG5cdFx0dmFyIHJlZ2V4cExpID0gLzxyZGY6bGkoIHJkZjpwYXJzZVR5cGU9XCJSZXNvdXJjZVwiKT8+W1xcc1xcU10qPzwoXFx3Kyk6U0lPXzAwMDExNj4oW1xcc1xcU10qPyk8XFwvXFwyOlNJT18wMDAxMTY+W1xcc1xcU10qPzxyZGY6dmFsdWU+KFtcXHNcXFNdKj8pPFxcL3JkZjp2YWx1ZT5bXFxzXFxTXSo/PFxcL3JkZjpsaT4vZztcblx0XHR2YXIgcmVzdWx0ID0gc3RyaW5nLnJlcGxhY2UocmVnZXhwTGksICc8cmRmOmxpICQyOlNJT18wMDAxMTY9XCIkM1wiIHJkZjp2YWx1ZT1cIiQ0XCIvPicpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiByZXBsYWNlQmFnKHN0cmluZykge1xuXHRcdC8vIHJlZ2V4cCB3aWxsIHNwb3QgYSB0cmFuc2Zvcm1lZCBiYWcgYW5kIGNhcHR1cmUgaXRzIGNvbnRlbnRcblx0XHR2YXIgcmVnZXhwQmFnID0gLyg8cmRmOkRlc2NyaXB0aW9uPihbXFxzXFxTXSo/KTxyZGY6dHlwZSByZGY6cmVzb3VyY2U9XCJodHRwOlxcL1xcL3d3d1xcLnczXFwub3JnXFwvMTk5OVxcLzAyXFwvMjItcmRmLXN5bnRheC1ucyNCYWdcIlxcLz5bXFxzXFxTXSo/PFxcL3JkZjpEZXNjcmlwdGlvbj4pL2c7XG5cdFx0dmFyIHJlc3VsdDEgPSBzdHJpbmcucmVwbGFjZShyZWdleHBCYWcsICc8cmRmOkJhZz4kMjwvcmRmOkJhZz4nKTtcblx0XHR2YXIgcmVzdWx0MiA9IHJlc3VsdDEucmVwbGFjZSgvICAgIDxcXC9yZGY6QmFnPi9nLCAnPC9yZGY6QmFnPicpO1xuXHRcdHJldHVybiByZXN1bHQyO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVwbGFjZVBhcnNlVHlwZShzdHJpbmcpIHtcblx0XHR2YXIgcmVnZXhwID0gLyByZGY6cGFyc2VUeXBlPVwiUmVzb3VyY2VcIi9nO1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZShyZWdleHAsICcnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlcGxhY2VTbGFzaEluSUQoc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAoL3JkZjphYm91dD1cIlxcLy9nKSwgJ3JkZjphYm91dD1cIicpO1xuXHR9XG5cdFxuXHR2YXIgcmVzdWx0ID0gcmVwbGFjZVNsYXNoSW5JRChyZXBsYWNlUGFyc2VUeXBlKHJlcGxhY2VMaShyZXBsYWNlQmFnKHNlcmlhbGl6ZSkpKSk7XG5cdFxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbFxuICogQHJldHVybiB7UmRmRWxlbWVudH1cbiAqL1xuUmRmRWxlbWVudC5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbCkge1xuXHRpZiAoeG1sLnRhZ05hbWUgIT0gJ3JkZjpSREYnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSByZGY6UkRGLCBnb3Q6IFwiICsgeG1sLnRhZ05hbWUpO1xuXHR9XG5cdHZhciByZGZFbGVtZW50ID0gbmV3IFJkZkVsZW1lbnQoKTtcblx0dmFyIGdyYXBoID0gJHJkZi5ncmFwaCgpO1xuXG5cdC8vIHJkZmxpYiBvbmx5IGFjY2VwdHMgc3RyaW5nIGFzIGlucHV0LCBub3QgeG1sIGVsZW1lbnRzXG5cdHZhciBzdHJpbmdYbWwgPSBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh4bWwpO1xuXHR0cnkge1xuXHQgICAgJHJkZi5wYXJzZShzdHJpbmdYbWwsIGdyYXBoLCBSZGZFbGVtZW50LnVyaSwgJ2FwcGxpY2F0aW9uL3JkZit4bWwnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdCAgICBjb25zb2xlLmxvZyhlcnIpO1xuXHR9XG5cdFxuXHQvLyBjb252ZXJ0IHRvIHR1cnRsZSB0byBmZWVkIHRvIE4zXG5cdHZhciB0dXJ0bGUgPSAkcmRmLnNlcmlhbGl6ZSgkcmRmLnN5bShSZGZFbGVtZW50LnVyaSksIGdyYXBoLCB1bmRlZmluZWQsICd0ZXh0L3R1cnRsZScpO1xuXG5cdHZhciBwYXJzZXIgPSBOMy5QYXJzZXIoKTtcblx0dmFyIHN0b3JlID0gTjMuU3RvcmUoKTtcblx0c3RvcmUuYWRkUHJlZml4ZXMoVXRpbC5wcmVmaXhlcyk7XG5cdHN0b3JlLmFkZFRyaXBsZXMocGFyc2VyLnBhcnNlKHR1cnRsZSkpO1xuXHRcblx0cmRmRWxlbWVudC5zdG9yZSA9IHN0b3JlO1xuXG5cdHJldHVybiByZGZFbGVtZW50O1xufTtcblxuUmRmRWxlbWVudC5wcm90b3R5cGUuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQgPSBmdW5jdGlvbiAoaWQpIHtcblx0cmV0dXJuIFV0aWwuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQodGhpcy5zdG9yZSwgaWQpO1xufTtcblxuUmRmRWxlbWVudC5wcm90b3R5cGUuZ2V0QWxsSWRzID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gVXRpbC5nZXRBbGxJZHModGhpcy5zdG9yZSk7XG59O1xuXG5SZGZFbGVtZW50LnByb3RvdHlwZS5hZGRDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChpZCwga3ZPYmplY3QpIHtcblx0cmV0dXJuIFV0aWwuYWRkQ3VzdG9tUHJvcGVydHkodGhpcy5zdG9yZSwgaWQsIGt2T2JqZWN0KTtcbn07XG5cblJkZkVsZW1lbnQucHJvdG90eXBlLmdldFJlc291cmNlc09mSWQgPSBmdW5jdGlvbihpZCkge1xuXHRyZXR1cm4gVXRpbC5nZXRSZXNvdXJjZXNPZklkKHRoaXMuc3RvcmUsIGlkKTtcbn07XG5cblJkZkVsZW1lbnQucHJvdG90eXBlLmFkZFJlc291cmNlID0gZnVuY3Rpb24gKGlkLCBrdk9iamVjdCkge1xuXHRyZXR1cm4gVXRpbC5hZGRSZXNvdXJjZSh0aGlzLnN0b3JlLCBpZCwga3ZPYmplY3QpO1xufTtcblxuUmRmRWxlbWVudC5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uKCkge1xuXHQvL2NvbnNvbGUubG9nKHRoaXMuc3RvcmUpO1xuXHQvL2NvbnNvbGUubG9nKHRoaXMuc3RvcmUuZ2V0VHJpcGxlcyhcImh0dHA6Ly9sb2NhbC9hbklEMDAwMDAxXCIsIG51bGwsIG51bGwpKTtcblx0Y29uc29sZS5sb2coXCJleHBhbmQgcHJlZml4IHNob3J0Y3V0XCIsIFV0aWwuZXhwYW5kUHJlZml4KFwic2lvOlNJT18wMDAxMTZcIikpO1xuXHRjb25zb2xlLmxvZyhcImFsbCBwcm9wZXJ0aWVzIG9mIGlkXCIsIHRoaXMuZ2V0Q3VzdG9tUHJvcGVydGllc09mSWQoXCJodHRwOi8vbG9jYWwvYW5JRDAwMDAwMVwiKSk7XG5cdGNvbnNvbGUubG9nKFwiYWxsIGlkc1wiLCB0aGlzLmdldEFsbElkcygpKTtcbn07XG5cbm5zLlJkZkVsZW1lbnQgPSBSZGZFbGVtZW50O1xuLy8gLS0tLS0tLSBFTkQgUkRGRUxFTUVOVCAtLS0tLS0tXG5cblxubnMucmRmbGliID0gJHJkZjtcbm5zLlV0aWwgPSBVdGlsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5zO1xuIiwiLyoqXG4gKiBUaGlzIHN1Ym1vZHVsZSBjb250YWlucyB0aGUgY2xhc3NlcyB0byBtYW5hZ2UgdGhlIHJlbmRlciBleHRlbnNpb24ncyB4bWwgYW5kIHNvbWUgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBJdCBhZGRzIHRoZSBhYmlsaXR5IHRvIHNhdmUgdGhlIHN0eWxlcyBhbmQgY29sb3JzIHVzZWQgaW4gYW4gU0JHTiBtYXAsIGFzIGZlYXR1cmVzIGxpa2UgYmFja2dyb3VuZC1jb2xvcixcbiAqIGJvcmRlciB0aGlja25lc3Mgb3IgZm9udCBwcm9wZXJ0aWVzIGFyZSBub3QgcGFydCBvZiB0aGUgU0JHTiBzdGFuZGFyZC5cbiAqXG4gKiBJdCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZSB7QGxpbmsgaHR0cDovL3NibWwub3JnL0RvY3VtZW50cy9TcGVjaWZpY2F0aW9ucy9TQk1MX0xldmVsXzMvUGFja2FnZXMvcmVuZGVyfHJlbmRlciBleHRlbnNpb24gb2YgdGhlIFNCTUwgZm9ybWF0fS5cbiAqIEEgc3Vic2V0IG9mIHRoaXMgc3BlY2lmaWNhdGlvbiBoYXMgYmVlbiBhZGFwdGVkIGZvciBTQkdOLU1MIGludGVncmF0aW9uLlxuICpcbiAqIFNlZSB7QGxpbmsgRXh0ZW5zaW9ufSBmb3IgbW9yZSBnZW5lcmFsIGluZm9ybWF0aW9uIG9uIGV4dGVuc2lvbnMgaW4gdGhlIFNCR04tTUwgZm9ybWF0LlxuICpcbiAqIFlvdSBjYW4gYWNjZXNzIHRoZSBmb2xsb3dpbmcgY2xhc3NlcyBsaWtlIHRoaXM6IDxjb2RlPmxpYnNiZ24ucmVuZGVyLkNvbG9yRGVmaW5pdGlvbjxjb2RlPlxuICpcbiAqIEBtb2R1bGUgbGlic2Jnbi1yZW5kZXJcbiAqIEBuYW1lc3BhY2UgbGlic2Jnbi5yZW5kZXJcbiovXG5cbnZhciBjaGVja1BhcmFtcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzJykuY2hlY2tQYXJhbXM7XG52YXIgeG1sZG9tID0gcmVxdWlyZSgneG1sZG9tJyk7XG5cbnZhciBucyA9IHt9O1xuXG5ucy54bWxucyA9IFwiaHR0cDovL3d3dy5zYm1sLm9yZy9zYm1sL2xldmVsMy92ZXJzaW9uMS9yZW5kZXIvdmVyc2lvbjFcIjtcblxuLy8gLS0tLS0tLSBDT0xPUkRFRklOSVRJT04gLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7Y29sb3JEZWZpbml0aW9uJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuaWRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnZhbHVlXG4gKi9cbnZhciBDb2xvckRlZmluaXRpb24gPSBmdW5jdGlvbihwYXJhbXMpIHtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWydpZCcsICd2YWx1ZSddKTtcblx0dGhpcy5pZCBcdD0gcGFyYW1zLmlkO1xuXHR0aGlzLnZhbHVlIFx0PSBwYXJhbXMudmFsdWU7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbkNvbG9yRGVmaW5pdGlvbi5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBjb2xvckRlZmluaXRpb24gPSBuZXcgeG1sZG9tLkRPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdjb2xvckRlZmluaXRpb24nKTtcblx0aWYgKHRoaXMuaWQgIT0gbnVsbCkge1xuXHRcdGNvbG9yRGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5pZCk7XG5cdH1cblx0aWYgKHRoaXMudmFsdWUgIT0gbnVsbCkge1xuXHRcdGNvbG9yRGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdGhpcy52YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNvbG9yRGVmaW5pdGlvbjtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5Db2xvckRlZmluaXRpb24ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxcbiAqIEByZXR1cm4ge0NvbG9yRGVmaW5pdGlvbn1cbiAqL1xuQ29sb3JEZWZpbml0aW9uLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sKSB7XG5cdGlmICh4bWwudGFnTmFtZSAhPSAnY29sb3JEZWZpbml0aW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgY29sb3JEZWZpbml0aW9uLCBnb3Q6IFwiICsgeG1sLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBjb2xvckRlZmluaXRpb24gPSBuZXcgbnMuQ29sb3JEZWZpbml0aW9uKCk7XG5cdGNvbG9yRGVmaW5pdGlvbi5pZCBcdFx0PSB4bWwuZ2V0QXR0cmlidXRlKCdpZCcpIHx8IG51bGw7XG5cdGNvbG9yRGVmaW5pdGlvbi52YWx1ZSBcdD0geG1sLmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCBudWxsO1xuXHRyZXR1cm4gY29sb3JEZWZpbml0aW9uO1xufTtcbm5zLkNvbG9yRGVmaW5pdGlvbiA9IENvbG9yRGVmaW5pdGlvbjtcbi8vIC0tLS0tLS0gRU5EIENPTE9SREVGSU5JVElPTiAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gTElTVE9GQ09MT1JERUZJTklUSU9OUyAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtsaXN0T2ZDb2xvckRlZmluaXRpb25zJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICovXG52YXIgTGlzdE9mQ29sb3JEZWZpbml0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5jb2xvckRlZmluaXRpb25zID0gW107XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Q29sb3JEZWZpbml0aW9ufSBjb2xvckRlZmluaXRpb25cbiAqL1xuTGlzdE9mQ29sb3JEZWZpbml0aW9ucy5wcm90b3R5cGUuYWRkQ29sb3JEZWZpbml0aW9uID0gZnVuY3Rpb24gKGNvbG9yRGVmaW5pdGlvbikge1xuXHR0aGlzLmNvbG9yRGVmaW5pdGlvbnMucHVzaChjb2xvckRlZmluaXRpb24pO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5MaXN0T2ZDb2xvckRlZmluaXRpb25zLnByb3RvdHlwZS5idWlsZFhtbE9iaiA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGxpc3RPZkNvbG9yRGVmaW5pdGlvbnMgPSBuZXcgeG1sZG9tLkRPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdsaXN0T2ZDb2xvckRlZmluaXRpb25zJyk7XG5cdGZvcih2YXIgaT0wOyBpPHRoaXMuY29sb3JEZWZpbml0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdGxpc3RPZkNvbG9yRGVmaW5pdGlvbnMuYXBwZW5kQ2hpbGQodGhpcy5jb2xvckRlZmluaXRpb25zW2ldLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdHJldHVybiBsaXN0T2ZDb2xvckRlZmluaXRpb25zO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbkxpc3RPZkNvbG9yRGVmaW5pdGlvbnMucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxcbiAqIEByZXR1cm4ge0xpc3RPZkNvbG9yRGVmaW5pdGlvbnN9XG4gKi9cbkxpc3RPZkNvbG9yRGVmaW5pdGlvbnMuZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWwpIHtcblx0aWYgKHhtbC50YWdOYW1lICE9ICdsaXN0T2ZDb2xvckRlZmluaXRpb25zJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgbGlzdE9mQ29sb3JEZWZpbml0aW9ucywgZ290OiBcIiArIHhtbC50YWdOYW1lKTtcblx0fVxuXHR2YXIgbGlzdE9mQ29sb3JEZWZpbml0aW9ucyA9IG5ldyBucy5MaXN0T2ZDb2xvckRlZmluaXRpb25zKCk7XG5cblx0dmFyIGNvbG9yRGVmaW5pdGlvbnMgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NvbG9yRGVmaW5pdGlvbicpO1xuXHRmb3IgKHZhciBpPTA7IGk8Y29sb3JEZWZpbml0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBjb2xvckRlZmluaXRpb25YTUwgPSBjb2xvckRlZmluaXRpb25zW2ldO1xuXHRcdHZhciBjb2xvckRlZmluaXRpb24gPSBucy5Db2xvckRlZmluaXRpb24uZnJvbVhNTChjb2xvckRlZmluaXRpb25YTUwpO1xuXHRcdGxpc3RPZkNvbG9yRGVmaW5pdGlvbnMuYWRkQ29sb3JEZWZpbml0aW9uKGNvbG9yRGVmaW5pdGlvbik7XG5cdH1cblx0cmV0dXJuIGxpc3RPZkNvbG9yRGVmaW5pdGlvbnM7XG59O1xubnMuTGlzdE9mQ29sb3JEZWZpbml0aW9ucyA9IExpc3RPZkNvbG9yRGVmaW5pdGlvbnM7XG4vLyAtLS0tLS0tIEVORCBMSVNUT0ZDT0xPUkRFRklOSVRJT05TIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBSRU5ERVJHUk9VUCAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtnJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuaWRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLmZvbnRTaXplXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5mb250RmFtaWx5XG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5mb250V2VpZ2h0XG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5mb250U3R5bGVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnRleHRBbmNob3JcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnZ0ZXh0QW5jaG9yXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5maWxsIFRoZSBlbGVtZW50J3MgYmFja2dyb3VuZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuc3Ryb2tlIEJvcmRlciBjb2xvciBmb3IgZ2x5cGhzLCBsaW5lIGNvbG9yIGZvciBhcmNzLlxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuc3Ryb2tlV2lkdGhcbiAqL1xudmFyIFJlbmRlckdyb3VwID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHQvLyBlYWNoIG9mIHRob3NlIGFyZSBvcHRpb25hbCwgc28gdGVzdCBpZiBpdCBpcyBkZWZpbmVkIGlzIG1hbmRhdG9yeVxuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ2ZvbnRTaXplJywgJ2ZvbnRGYW1pbHknLCAnZm9udFdlaWdodCcsIFxuXHRcdCdmb250U3R5bGUnLCAndGV4dEFuY2hvcicsICd2dGV4dEFuY2hvcicsICdmaWxsJywgJ2lkJywgJ3N0cm9rZScsICdzdHJva2VXaWR0aCddKTtcblx0Ly8gc3BlY2lmaWMgdG8gcmVuZGVyR3JvdXBcblx0dGhpcy5mb250U2l6ZSBcdFx0PSBwYXJhbXMuZm9udFNpemU7XG5cdHRoaXMuZm9udEZhbWlseSBcdD0gcGFyYW1zLmZvbnRGYW1pbHk7XG5cdHRoaXMuZm9udFdlaWdodCBcdD0gcGFyYW1zLmZvbnRXZWlnaHQ7XG5cdHRoaXMuZm9udFN0eWxlIFx0XHQ9IHBhcmFtcy5mb250U3R5bGU7XG5cdHRoaXMudGV4dEFuY2hvciBcdD0gcGFyYW1zLnRleHRBbmNob3I7IC8vIHByb2JhYmx5IHVzZWxlc3Ncblx0dGhpcy52dGV4dEFuY2hvciBcdD0gcGFyYW1zLnZ0ZXh0QW5jaG9yOyAvLyBwcm9iYWJseSB1c2VsZXNzXG5cdC8vIGZyb20gR3JhcGhpY2FsUHJpbWl0aXZlMkRcblx0dGhpcy5maWxsIFx0XHRcdD0gcGFyYW1zLmZpbGw7IC8vIGZpbGwgY29sb3Jcblx0Ly8gZnJvbSBHcmFwaGljYWxQcmltaXRpdmUxRFxuXHR0aGlzLmlkIFx0XHRcdD0gcGFyYW1zLmlkO1xuXHR0aGlzLnN0cm9rZSBcdFx0PSBwYXJhbXMuc3Ryb2tlOyAvLyBzdHJva2UgY29sb3Jcblx0dGhpcy5zdHJva2VXaWR0aCBcdD0gcGFyYW1zLnN0cm9rZVdpZHRoO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5SZW5kZXJHcm91cC5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZW5kZXJHcm91cCA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2cnKTtcblx0aWYgKHRoaXMuaWQgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcblx0fVxuXHRpZiAodGhpcy5mb250U2l6ZSAhPSBudWxsKSB7XG5cdFx0cmVuZGVyR3JvdXAuc2V0QXR0cmlidXRlKCdmb250U2l6ZScsIHRoaXMuZm9udFNpemUpO1xuXHR9XG5cdGlmICh0aGlzLmZvbnRGYW1pbHkgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgnZm9udEZhbWlseScsIHRoaXMuZm9udEZhbWlseSk7XG5cdH1cblx0aWYgKHRoaXMuZm9udFdlaWdodCAhPSBudWxsKSB7XG5cdFx0cmVuZGVyR3JvdXAuc2V0QXR0cmlidXRlKCdmb250V2VpZ2h0JywgdGhpcy5mb250V2VpZ2h0KTtcblx0fVxuXHRpZiAodGhpcy5mb250U3R5bGUgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgnZm9udFN0eWxlJywgdGhpcy5mb250U3R5bGUpO1xuXHR9XG5cdGlmICh0aGlzLnRleHRBbmNob3IgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgndGV4dEFuY2hvcicsIHRoaXMudGV4dEFuY2hvcik7XG5cdH1cblx0aWYgKHRoaXMudnRleHRBbmNob3IgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgndnRleHRBbmNob3InLCB0aGlzLnZ0ZXh0QW5jaG9yKTtcblx0fVxuXHRpZiAodGhpcy5zdHJva2UgIT0gbnVsbCkge1xuXHRcdHJlbmRlckdyb3VwLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdGhpcy5zdHJva2UpO1xuXHR9XG5cdGlmICh0aGlzLnN0cm9rZVdpZHRoICE9IG51bGwpIHtcblx0XHRyZW5kZXJHcm91cC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZVdpZHRoJywgdGhpcy5zdHJva2VXaWR0aCk7XG5cdH1cblx0aWYgKHRoaXMuZmlsbCAhPSBudWxsKSB7XG5cdFx0cmVuZGVyR3JvdXAuc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5maWxsKTtcblx0fVxuXHRyZXR1cm4gcmVuZGVyR3JvdXA7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuUmVuZGVyR3JvdXAucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxcbiAqIEByZXR1cm4ge1JlbmRlckdyb3VwfVxuICovXG5SZW5kZXJHcm91cC5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbCkge1xuXHRpZiAoeG1sLnRhZ05hbWUgIT0gJ2cnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBnLCBnb3Q6IFwiICsgeG1sLnRhZ05hbWUpO1xuXHR9XG5cdHZhciByZW5kZXJHcm91cCA9IG5ldyBucy5SZW5kZXJHcm91cCh7fSk7XG5cdHJlbmRlckdyb3VwLmlkIFx0XHRcdD0geG1sLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBudWxsO1xuXHRyZW5kZXJHcm91cC5mb250U2l6ZSBcdD0geG1sLmdldEF0dHJpYnV0ZSgnZm9udFNpemUnKSB8fCBudWxsO1xuXHRyZW5kZXJHcm91cC5mb250RmFtaWx5IFx0PSB4bWwuZ2V0QXR0cmlidXRlKCdmb250RmFtaWx5JykgfHwgbnVsbDtcblx0cmVuZGVyR3JvdXAuZm9udFdlaWdodCBcdD0geG1sLmdldEF0dHJpYnV0ZSgnZm9udFdlaWdodCcpIHx8IG51bGw7XG5cdHJlbmRlckdyb3VwLmZvbnRTdHlsZSBcdD0geG1sLmdldEF0dHJpYnV0ZSgnZm9udFN0eWxlJykgfHwgbnVsbDtcblx0cmVuZGVyR3JvdXAudGV4dEFuY2hvciBcdD0geG1sLmdldEF0dHJpYnV0ZSgndGV4dEFuY2hvcicpIHx8IG51bGw7XG5cdHJlbmRlckdyb3VwLnZ0ZXh0QW5jaG9yID0geG1sLmdldEF0dHJpYnV0ZSgndnRleHRBbmNob3InKSB8fCBudWxsO1xuXHRyZW5kZXJHcm91cC5zdHJva2UgXHRcdD0geG1sLmdldEF0dHJpYnV0ZSgnc3Ryb2tlJykgfHwgbnVsbDtcblx0cmVuZGVyR3JvdXAuc3Ryb2tlV2lkdGggPSB4bWwuZ2V0QXR0cmlidXRlKCdzdHJva2VXaWR0aCcpIHx8IG51bGw7XG5cdHJlbmRlckdyb3VwLmZpbGwgXHRcdD0geG1sLmdldEF0dHJpYnV0ZSgnZmlsbCcpIHx8IG51bGw7XG5cdHJldHVybiByZW5kZXJHcm91cDtcbn07XG5ucy5SZW5kZXJHcm91cCA9IFJlbmRlckdyb3VwO1xuLy8gLS0tLS0tLSBFTkQgUkVOREVSR1JPVVAgLS0tLS0tLVxuXG4vLyAtLS0tLS0tIFNUWUxFIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O3N0eWxlJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuaWRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLm5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLmlkTGlzdFxuICogQHBhcmFtIHtSZW5kZXJHcm91cD19IHBhcmFtcy5yZW5kZXJHcm91cFxuICovXG52YXIgU3R5bGUgPSBmdW5jdGlvbihwYXJhbXMpIHtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWydpZCcsICduYW1lJywgJ2lkTGlzdCcsICdyZW5kZXJHcm91cCddKTtcblx0dGhpcy5pZCBcdFx0XHQ9IHBhcmFtcy5pZDtcblx0dGhpcy5uYW1lIFx0XHRcdD0gcGFyYW1zLm5hbWU7XG5cdHRoaXMuaWRMaXN0IFx0XHQ9IHBhcmFtcy5pZExpc3Q7IC8vIFRPRE8gYWRkIHV0aWxpdHkgZnVuY3Rpb25zIHRvIG1hbmFnZSB0aGlzIChzaG91bGQgYmUgYXJyYXkpXG5cdHRoaXMucmVuZGVyR3JvdXAgXHQ9IHBhcmFtcy5yZW5kZXJHcm91cDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSZW5kZXJHcm91cH0gcmVuZGVyR3JvdXBcbiAqL1xuU3R5bGUucHJvdG90eXBlLnNldFJlbmRlckdyb3VwID0gZnVuY3Rpb24gKHJlbmRlckdyb3VwKSB7XG5cdHRoaXMucmVuZGVyR3JvdXAgPSByZW5kZXJHcm91cDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cblN0eWxlLnByb3RvdHlwZS5nZXRJZExpc3RBc0FycmF5ID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5pZExpc3Quc3BsaXQoJyAnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBpZEFycmF5XG4gKi9cblN0eWxlLnByb3RvdHlwZS5zZXRJZExpc3RGcm9tQXJyYXkgPSBmdW5jdGlvbiAoaWRBcnJheSkge1xuXHR0aGlzLmlkTGlzdCA9IGlkQXJyYXkuam9pbignICcpO1xufVxuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblN0eWxlLnByb3RvdHlwZS5idWlsZFhtbE9iaiA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHN0eWxlID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0aWYgKHRoaXMuaWQgIT0gbnVsbCkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcblx0fVxuXHRpZiAodGhpcy5uYW1lICE9IG51bGwpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB0aGlzLm5hbWUpO1xuXHR9XG5cdGlmICh0aGlzLmlkTGlzdCAhPSBudWxsKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKCdpZExpc3QnLCB0aGlzLmlkTGlzdCk7XG5cdH1cblxuXHRpZiAodGhpcy5yZW5kZXJHcm91cCkge1xuXHRcdHN0eWxlLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyR3JvdXAuYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0cmV0dXJuIHN0eWxlO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblN0eWxlLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyB4bWxkb20uWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMuYnVpbGRYbWxPYmooKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0geG1sXG4gKiBAcmV0dXJuIHtTdHlsZX1cbiAqL1xuU3R5bGUuZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWwpIHtcblx0aWYgKHhtbC50YWdOYW1lICE9ICdzdHlsZScpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIHN0eWxlLCBnb3Q6IFwiICsgeG1sLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBzdHlsZSA9IG5ldyBucy5TdHlsZSgpO1xuXHRzdHlsZS5pZCBcdFx0PSB4bWwuZ2V0QXR0cmlidXRlKCdpZCcpIHx8IG51bGw7XG5cdHN0eWxlLm5hbWUgXHRcdD0geG1sLmdldEF0dHJpYnV0ZSgnbmFtZScpIHx8IG51bGw7XG5cdHN0eWxlLmlkTGlzdCBcdD0geG1sLmdldEF0dHJpYnV0ZSgnaWRMaXN0JykgfHwgbnVsbDtcblxuXHR2YXIgcmVuZGVyR3JvdXBYTUwgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2cnKVswXTtcblx0aWYgKHJlbmRlckdyb3VwWE1MICE9IG51bGwpIHtcblx0XHRzdHlsZS5yZW5kZXJHcm91cCA9IG5zLlJlbmRlckdyb3VwLmZyb21YTUwocmVuZGVyR3JvdXBYTUwpO1xuXHR9XG5cdHJldHVybiBzdHlsZTtcbn07XG5ucy5TdHlsZSA9IFN0eWxlO1xuLy8gLS0tLS0tLSBFTkQgU1RZTEUgLS0tLS0tLVxuXG4vLyAtLS0tLS0tIExJU1RPRlNUWUxFUyAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtsaXN0T2ZTdHlsZXMmZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzXG4gKi9cbnZhciBMaXN0T2ZTdHlsZXMgPSBmdW5jdGlvbigpIHtcblx0dGhpcy5zdHlsZXMgPSBbXTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTdHlsZX0gc3R5bGVcbiAqL1xuTGlzdE9mU3R5bGVzLnByb3RvdHlwZS5hZGRTdHlsZSA9IGZ1bmN0aW9uKHN0eWxlKSB7XG5cdHRoaXMuc3R5bGVzLnB1c2goc3R5bGUpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5MaXN0T2ZTdHlsZXMucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbGlzdE9mU3R5bGVzID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnbGlzdE9mU3R5bGVzJyk7XG5cdGZvcih2YXIgaT0wOyBpPHRoaXMuc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGlzdE9mU3R5bGVzLmFwcGVuZENoaWxkKHRoaXMuc3R5bGVzW2ldLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdHJldHVybiBsaXN0T2ZTdHlsZXM7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuTGlzdE9mU3R5bGVzLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyB4bWxkb20uWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMuYnVpbGRYbWxPYmooKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0geG1sXG4gKiBAcmV0dXJuIHtMaXN0T2ZTdHlsZXN9XG4gKi9cbkxpc3RPZlN0eWxlcy5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbCkge1xuXHRpZiAoeG1sLnRhZ05hbWUgIT0gJ2xpc3RPZlN0eWxlcycpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIGxpc3RPZlN0eWxlcywgZ290OiBcIiArIHhtbC50YWdOYW1lKTtcblx0fVxuXHR2YXIgbGlzdE9mU3R5bGVzID0gbmV3IG5zLkxpc3RPZlN0eWxlcygpO1xuXG5cdHZhciBzdHlsZXMgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3N0eWxlJyk7XG5cdGZvciAodmFyIGk9MDsgaTxzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgc3R5bGVYTUwgPSBzdHlsZXNbaV07XG5cdFx0dmFyIHN0eWxlID0gbnMuU3R5bGUuZnJvbVhNTChzdHlsZVhNTCk7XG5cdFx0bGlzdE9mU3R5bGVzLmFkZFN0eWxlKHN0eWxlKTtcblx0fVxuXHRyZXR1cm4gbGlzdE9mU3R5bGVzO1xufTtcbm5zLkxpc3RPZlN0eWxlcyA9IExpc3RPZlN0eWxlcztcbi8vIC0tLS0tLS0gRU5EIExJU1RPRlNUWUxFUyAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gUkVOREVSSU5GT1JNQVRJT04gLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7cmVuZGVySW5mb3JtYXRpb24mZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5pZFxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMubmFtZVxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMucHJvZ3JhbU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnByb2dyYW1WZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5iYWNrZ3JvdW5kQ29sb3JcbiAqIEBwYXJhbSB7TGlzdE9mQ29sb3JEZWZpbml0aW9ucz19IHBhcmFtcy5saXN0T2ZDb2xvckRlZmluaXRpb25zXG4gKiBAcGFyYW0ge0xpc3RPZlN0eWxlcz19IHBhcmFtcy5saXN0T2ZTdHlsZXNcbiAqL1xudmFyIFJlbmRlckluZm9ybWF0aW9uID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ2lkJywgJ25hbWUnLCAncHJvZ3JhbU5hbWUnLCBcblx0XHQncHJvZ3JhbVZlcnNpb24nLCAnYmFja2dyb3VuZENvbG9yJywgJ2xpc3RPZkNvbG9yRGVmaW5pdGlvbnMnLCAnbGlzdE9mU3R5bGVzJ10pO1xuXHR0aGlzLmlkIFx0XHRcdFx0XHQ9IHBhcmFtcy5pZDsgLy8gcmVxdWlyZWQsIHJlc3QgaXMgb3B0aW9uYWxcblx0dGhpcy5uYW1lIFx0XHRcdFx0XHQ9IHBhcmFtcy5uYW1lO1xuXHR0aGlzLnByb2dyYW1OYW1lIFx0XHRcdD0gcGFyYW1zLnByb2dyYW1OYW1lO1xuXHR0aGlzLnByb2dyYW1WZXJzaW9uIFx0XHQ9IHBhcmFtcy5wcm9ncmFtVmVyc2lvbjtcblx0dGhpcy5iYWNrZ3JvdW5kQ29sb3IgXHRcdD0gcGFyYW1zLmJhY2tncm91bmRDb2xvcjtcblx0dGhpcy5saXN0T2ZDb2xvckRlZmluaXRpb25zID0gcGFyYW1zLmxpc3RPZkNvbG9yRGVmaW5pdGlvbnM7XG5cdHRoaXMubGlzdE9mU3R5bGVzIFx0XHRcdD0gcGFyYW1zLmxpc3RPZlN0eWxlcztcblx0Lyp0aGlzLmxpc3RPZkNvbG9yRGVmaW5pdGlvbnMgPSBuZXcgcmVuZGVyRXh0ZW5zaW9uLkxpc3RPZkNvbG9yRGVmaW5pdGlvbnMocmVuZGVySW5mby5jb2xvckRlZi5jb2xvckxpc3QpO1xuXHR0aGlzLmxpc3RPZlN0eWxlcyA9IG5ldyByZW5kZXJFeHRlbnNpb24uTGlzdE9mU3R5bGVzKHJlbmRlckluZm8uc3R5bGVEZWYpO1xuXHQqL1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0xpc3RPZkNvbG9yRGVmaW5pdGlvbnN9IGxpc3RPZkNvbG9yRGVmaW5pdGlvbnNcbiAqL1xuUmVuZGVySW5mb3JtYXRpb24ucHJvdG90eXBlLnNldExpc3RPZkNvbG9yRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihsaXN0T2ZDb2xvckRlZmluaXRpb25zKSB7XG5cdHRoaXMubGlzdE9mQ29sb3JEZWZpbml0aW9ucyA9IGxpc3RPZkNvbG9yRGVmaW5pdGlvbnM7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TGlzdE9mU3R5bGVzfSBsaXN0T2ZTdHlsZXNcbiAqL1xuUmVuZGVySW5mb3JtYXRpb24ucHJvdG90eXBlLnNldExpc3RPZlN0eWxlcyA9IGZ1bmN0aW9uKGxpc3RPZlN0eWxlcykge1xuXHR0aGlzLmxpc3RPZlN0eWxlcyA9IGxpc3RPZlN0eWxlcztcbn07XG5cbi8qKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuUmVuZGVySW5mb3JtYXRpb24ucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgcmVuZGVySW5mb3JtYXRpb24gPSBuZXcgeG1sZG9tLkRPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdyZW5kZXJJbmZvcm1hdGlvbicpO1xuXHRyZW5kZXJJbmZvcm1hdGlvbi5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgbnMueG1sbnMpO1xuXHRpZiAodGhpcy5pZCAhPSBudWxsKSB7XG5cdFx0cmVuZGVySW5mb3JtYXRpb24uc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuaWQpO1xuXHR9XG5cdGlmICh0aGlzLm5hbWUgIT0gbnVsbCkge1xuXHRcdHJlbmRlckluZm9ybWF0aW9uLnNldEF0dHJpYnV0ZSgnbmFtZScsIHRoaXMubmFtZSk7XG5cdH1cblx0aWYgKHRoaXMucHJvZ3JhbU5hbWUgIT0gbnVsbCkge1xuXHRcdHJlbmRlckluZm9ybWF0aW9uLnNldEF0dHJpYnV0ZSgncHJvZ3JhbU5hbWUnLCB0aGlzLnByb2dyYW1OYW1lKTtcblx0fVxuXHRpZiAodGhpcy5wcm9ncmFtVmVyc2lvbiAhPSBudWxsKSB7XG5cdFx0cmVuZGVySW5mb3JtYXRpb24uc2V0QXR0cmlidXRlKCdwcm9ncmFtVmVyc2lvbicsIHRoaXMucHJvZ3JhbVZlcnNpb24pO1xuXHR9XG5cdGlmICh0aGlzLmJhY2tncm91bmRDb2xvciAhPSBudWxsKSB7XG5cdFx0cmVuZGVySW5mb3JtYXRpb24uc2V0QXR0cmlidXRlKCdiYWNrZ3JvdW5kQ29sb3InLCB0aGlzLmJhY2tncm91bmRDb2xvcik7XG5cdH1cblxuXHRpZiAodGhpcy5saXN0T2ZDb2xvckRlZmluaXRpb25zKSB7XG5cdFx0cmVuZGVySW5mb3JtYXRpb24uYXBwZW5kQ2hpbGQodGhpcy5saXN0T2ZDb2xvckRlZmluaXRpb25zLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdGlmICh0aGlzLmxpc3RPZlN0eWxlcykge1xuXHRcdHJlbmRlckluZm9ybWF0aW9uLmFwcGVuZENoaWxkKHRoaXMubGlzdE9mU3R5bGVzLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdHJldHVybiByZW5kZXJJbmZvcm1hdGlvbjtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5SZW5kZXJJbmZvcm1hdGlvbi5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIG5ldyB4bWxkb20uWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMuYnVpbGRYbWxPYmooKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0geG1sXG4gKiBAcmV0dXJuIHtSZW5kZXJJbmZvcm1hdGlvbn1cbiAqL1xuUmVuZGVySW5mb3JtYXRpb24uZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWwpIHtcblx0aWYgKHhtbC50YWdOYW1lICE9ICdyZW5kZXJJbmZvcm1hdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIHJlbmRlckluZm9ybWF0aW9uLCBnb3Q6IFwiICsgeG1sLnRhZ05hbWUpO1xuXHR9XG5cdHZhciByZW5kZXJJbmZvcm1hdGlvbiA9IG5ldyBucy5SZW5kZXJJbmZvcm1hdGlvbigpO1xuXHRyZW5kZXJJbmZvcm1hdGlvbi5pZCBcdFx0XHRcdD0geG1sLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBudWxsO1xuXHRyZW5kZXJJbmZvcm1hdGlvbi5uYW1lIFx0XHRcdFx0PSB4bWwuZ2V0QXR0cmlidXRlKCduYW1lJykgfHwgbnVsbDtcblx0cmVuZGVySW5mb3JtYXRpb24ucHJvZ3JhbU5hbWUgXHRcdD0geG1sLmdldEF0dHJpYnV0ZSgncHJvZ3JhbU5hbWUnKSB8fCBudWxsO1xuXHRyZW5kZXJJbmZvcm1hdGlvbi5wcm9ncmFtVmVyc2lvbiBcdD0geG1sLmdldEF0dHJpYnV0ZSgncHJvZ3JhbVZlcnNpb24nKSB8fCBudWxsO1xuXHRyZW5kZXJJbmZvcm1hdGlvbi5iYWNrZ3JvdW5kQ29sb3IgXHQ9IHhtbC5nZXRBdHRyaWJ1dGUoJ2JhY2tncm91bmRDb2xvcicpIHx8IG51bGw7XG5cblx0dmFyIGxpc3RPZkNvbG9yRGVmaW5pdGlvbnNYTUwgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpc3RPZkNvbG9yRGVmaW5pdGlvbnMnKVswXTtcblx0dmFyIGxpc3RPZlN0eWxlc1hNTCA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGlzdE9mU3R5bGVzJylbMF07XG5cdGlmIChsaXN0T2ZDb2xvckRlZmluaXRpb25zWE1MICE9IG51bGwpIHtcblx0XHRyZW5kZXJJbmZvcm1hdGlvbi5saXN0T2ZDb2xvckRlZmluaXRpb25zID0gbnMuTGlzdE9mQ29sb3JEZWZpbml0aW9ucy5mcm9tWE1MKGxpc3RPZkNvbG9yRGVmaW5pdGlvbnNYTUwpO1xuXHR9XG5cdGlmIChsaXN0T2ZTdHlsZXNYTUwgIT0gbnVsbCkge1xuXHRcdHJlbmRlckluZm9ybWF0aW9uLmxpc3RPZlN0eWxlcyA9IG5zLkxpc3RPZlN0eWxlcy5mcm9tWE1MKGxpc3RPZlN0eWxlc1hNTCk7XG5cdH1cblxuXHRyZXR1cm4gcmVuZGVySW5mb3JtYXRpb247XG59O1xubnMuUmVuZGVySW5mb3JtYXRpb24gPSBSZW5kZXJJbmZvcm1hdGlvbjtcbi8vIC0tLS0tLS0gRU5EIFJFTkRFUklORk9STUFUSU9OIC0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBuczsiLCIvKipcbiAqIFRoZSBBUEkgY29udGFpbnMgdHdvIG90aGVyIHN1Ym1vZHVsZXM6IHtAbGluayBsaWJzYmduLnJlbmRlcn0gYW5kIHtAbGluayBsaWJzYmduLmFubm90fVxuICogQG1vZHVsZSBsaWJzYmduXG4gKiBAbmFtZXNwYWNlIGxpYnNiZ25cbiovXG5cbnZhciByZW5kZXJFeHQgPSByZXF1aXJlKCcuL2xpYnNiZ24tcmVuZGVyJyk7XG52YXIgYW5ub3RFeHQgPSByZXF1aXJlKCcuL2xpYnNiZ24tYW5ub3RhdGlvbnMnKTtcbnZhciBjaGVja1BhcmFtcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzJykuY2hlY2tQYXJhbXM7XG52YXIgZ2V0Rmlyc3RMZXZlbEJ5TmFtZSA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzJykuZ2V0Rmlyc3RMZXZlbEJ5TmFtZTtcbnZhciB4bWxkb20gPSByZXF1aXJlKCd4bWxkb20nKTtcblxudmFyIG5zID0ge307XG5cbm5zLnhtbG5zID0gXCJodHRwOi8vc2Jnbi5vcmcvbGlic2Jnbi8wLjNcIjtcblxuLy8gLS0tLS0tLSBTQkdOQmFzZSAtLS0tLS0tXG4vKipcbiAqIFBhcmVudCBjbGFzcyBmb3Igc2V2ZXJhbCBzYmduIGVsZW1lbnRzLiBVc2VkIHRvIHByb3ZpZGUgZXh0ZW5zaW9uIGVsZW1lbnQuXG4gKiBFbmQgdXNlcnMgZG9uJ3QgbmVlZCB0byBpbnRlcmFjdCB3aXRoIGl0LiBJdCBjYW4gYmUgc2FmZWx5IGlnbm9yZWQuXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7RXh0ZW5zaW9uPX0gcGFyYW1zLmV4dGVuc2lvblxuICovXG52YXIgU0JHTkJhc2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsnZXh0ZW5zaW9uJ10pO1xuXHR0aGlzLmV4dGVuc2lvbiBcdD0gcGFyYW1zLmV4dGVuc2lvbjtcbn07XG5cbi8qKlxuICogQWxsb3dzIGluaGVyaXRpbmcgb2JqZWN0cyB0byBnZXQgYW4gZXh0ZW5zaW9uIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0V4dGVuc2lvbn0gZXh0ZW5zaW9uXG4gKi9cblNCR05CYXNlLnByb3RvdHlwZS5zZXRFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG5cdHRoaXMuZXh0ZW5zaW9uID0gZXh0ZW5zaW9uO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9iaiB0aGUgeG1sIG9iamVjdCBiZWluZyBidWlsdCBmcm9tICd0aGlzJ1xuICovXG5TQkdOQmFzZS5wcm90b3R5cGUuYmFzZVRvWG1sT2JqID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHRpZih0aGlzLmV4dGVuc2lvbiAhPSBudWxsKSB7XG5cdFx0eG1sT2JqLmFwcGVuZENoaWxkKHRoaXMuZXh0ZW5zaW9uLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG59O1xuXG4vKipcbiAqIHBhcnNlIHRoaW5ncyBzcGVjaWZpYyB0byBTQkdOQmFzZSB0eXBlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9iaiB0aGUgeG1sIG9iamVjdCBiZWluZyBwYXJzZWRcbiAqL1xuU0JHTkJhc2UucHJvdG90eXBlLmJhc2VGcm9tWE1MID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHQvLyBjaGlsZHJlblxuXHR2YXIgZXh0ZW5zaW9uWE1MID0gZ2V0Rmlyc3RMZXZlbEJ5TmFtZSh4bWxPYmosICdleHRlbnNpb24nKVswXTtcblx0aWYgKGV4dGVuc2lvblhNTCAhPSBudWxsKSB7XG5cdFx0dmFyIGV4dGVuc2lvbiA9IG5zLkV4dGVuc2lvbi5mcm9tWE1MKGV4dGVuc2lvblhNTCk7XG5cdFx0dGhpcy5zZXRFeHRlbnNpb24oZXh0ZW5zaW9uKTtcblx0fVxufTtcbm5zLlNCR05CYXNlID0gU0JHTkJhc2U7XG4vLyAtLS0tLS0tIEVORCBTQkdOQmFzZSAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gU0JHTiAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtzYmduJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgU0JHTkJhc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnhtbG5zXG4gKiBAcGFyYW0ge01hcD19IHBhcmFtcy5tYXBcbiAqL1xudmFyIFNiZ24gPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdG5zLlNCR05CYXNlLmNhbGwodGhpcywgcGFyYW1zKTtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWyd4bWxucycsICdtYXAnXSk7XG5cdHRoaXMueG1sbnMgXHQ9IHBhcmFtcy54bWxucztcblx0dGhpcy5tYXAgXHQ9IHBhcmFtcy5tYXA7XG5cblx0dGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbJ21hcCddO1xuXHR0aGlzLnRhZ05hbWUgPSAnc2Jnbic7XG59O1xuXG5TYmduLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnMuU0JHTkJhc2UucHJvdG90eXBlKTtcblNiZ24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2JnbjtcblxuLyoqXG4gKiBAcGFyYW0ge01hcH0gbWFwXG4gKi9cblNiZ24ucHJvdG90eXBlLnNldE1hcCA9IGZ1bmN0aW9uIChtYXApIHtcblx0dGhpcy5tYXAgPSBtYXA7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblNiZ24ucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2JnbiA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ3NiZ24nKTtcblx0Ly8gYXR0cmlidXRlc1xuXHRpZih0aGlzLnhtbG5zICE9IG51bGwpIHtcblx0XHRzYmduLnNldEF0dHJpYnV0ZSgneG1sbnMnLCB0aGlzLnhtbG5zKTtcblx0fVxuXHRpZih0aGlzLmxhbmd1YWdlICE9IG51bGwpIHtcblx0XHRzYmduLnNldEF0dHJpYnV0ZSgnbGFuZ3VhZ2UnLCB0aGlzLmxhbmd1YWdlKTtcblx0fVxuXHQvLyBjaGlsZHJlblxuXHR0aGlzLmJhc2VUb1htbE9iaihzYmduKTtcblx0aWYgKHRoaXMubWFwICE9IG51bGwpIHtcblx0XHRzYmduLmFwcGVuZENoaWxkKHRoaXMubWFwLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdHJldHVybiBzYmduO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNiZ24ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxPYmpcbiAqIEByZXR1cm4ge1NiZ259XG4gKi9cblNiZ24uZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWxPYmopIHtcblx0aWYgKHhtbE9iai50YWdOYW1lICE9ICdzYmduJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgc2JnbiwgZ290OiBcIiArIHhtbE9iai50YWdOYW1lKTtcblx0fVxuXHR2YXIgc2JnbiA9IG5ldyBucy5TYmduKCk7XG5cdHNiZ24ueG1sbnMgPSB4bWxPYmouZ2V0QXR0cmlidXRlKCd4bWxucycpIHx8IG51bGw7XG5cblx0Ly8gZ2V0IGNoaWxkcmVuXG5cdHZhciBtYXBYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21hcCcpWzBdO1xuXHRpZiAobWFwWE1MICE9IG51bGwpIHtcblx0XHR2YXIgbWFwID0gbnMuTWFwLmZyb21YTUwobWFwWE1MKTtcblx0XHRzYmduLnNldE1hcChtYXApO1xuXHR9XG5cdHNiZ24uYmFzZUZyb21YTUwoeG1sT2JqKTsgLy8gY2FsbCB0byBwYXJlbnQgY2xhc3Ncblx0cmV0dXJuIHNiZ247XG59O1xubnMuU2JnbiA9IFNiZ247XG4vLyAtLS0tLS0tIEVORCBTQkdOIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBNQVAgLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7bWFwJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgU0JHTkJhc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLmlkXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5sYW5ndWFnZVxuICogQHBhcmFtIHtHbHlwaFtdPX0gcGFyYW1zLmdseXBoc1xuICogQHBhcmFtIHtBcmNbXT19IHBhcmFtcy5hcmNzXG4gKi9cbnZhciBNYXAgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdG5zLlNCR05CYXNlLmNhbGwodGhpcywgcGFyYW1zKTtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWydpZCcsICdsYW5ndWFnZScsICdnbHlwaHMnLCAnYXJjcyddKTtcblx0dGhpcy5pZCBcdFx0PSBwYXJhbXMuaWQ7XG5cdHRoaXMubGFuZ3VhZ2UgXHQ9IHBhcmFtcy5sYW5ndWFnZTtcblx0dGhpcy5nbHlwaHMgXHQ9IHBhcmFtcy5nbHlwaHMgfHwgW107XG5cdHRoaXMuYXJjcyBcdFx0PSBwYXJhbXMuYXJjcyB8fCBbXTtcblxuXHR0aGlzLmFsbG93ZWRDaGlsZHJlbiA9IFsnZ2x5cGhzJywgJ2FyY3MnXTtcblx0dGhpcy50YWdOYW1lID0gJ21hcCc7XG59O1xuXG5NYXAucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShucy5TQkdOQmFzZS5wcm90b3R5cGUpO1xuTWFwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1hcDtcblxuLyoqXG4gKiBAcGFyYW0ge0dseXBofSBnbHlwaFxuICovXG5NYXAucHJvdG90eXBlLmFkZEdseXBoID0gZnVuY3Rpb24gKGdseXBoKSB7XG5cdHRoaXMuZ2x5cGhzLnB1c2goZ2x5cGgpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FyY30gYXJjXG4gKi9cbk1hcC5wcm90b3R5cGUuYWRkQXJjID0gZnVuY3Rpb24gKGFyYykge1xuXHR0aGlzLmFyY3MucHVzaChhcmMpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5NYXAucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbWFwID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnbWFwJyk7XG5cdC8vIGF0dHJpYnV0ZXNcblx0aWYodGhpcy5pZCAhPSBudWxsKSB7XG5cdFx0bWFwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcblx0fVxuXHRpZih0aGlzLmxhbmd1YWdlICE9IG51bGwpIHtcblx0XHRtYXAuc2V0QXR0cmlidXRlKCdsYW5ndWFnZScsIHRoaXMubGFuZ3VhZ2UpO1xuXHR9XG5cdC8vIGNoaWxkcmVuXG5cdHRoaXMuYmFzZVRvWG1sT2JqKG1hcCk7XG5cdGZvcih2YXIgaT0wOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspIHtcblx0XHRtYXAuYXBwZW5kQ2hpbGQodGhpcy5nbHlwaHNbaV0uYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0Zm9yKHZhciBpPTA7IGkgPCB0aGlzLmFyY3MubGVuZ3RoOyBpKyspIHtcblx0XHRtYXAuYXBwZW5kQ2hpbGQodGhpcy5hcmNzW2ldLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdHJldHVybiBtYXA7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuTWFwLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyB4bWxkb20uWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMuYnVpbGRYbWxPYmooKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0geG1sT2JqXG4gKiBAcmV0dXJuIHtNYXB9XG4gKi9cbk1hcC5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHRpZiAoeG1sT2JqLnRhZ05hbWUgIT0gJ21hcCcpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIG1hcCwgZ290OiBcIiArIHhtbE9iai50YWdOYW1lKTtcblx0fVxuXHR2YXIgbWFwID0gbmV3IE1hcCgpO1xuXHRtYXAuaWQgPSB4bWxPYmouZ2V0QXR0cmlidXRlKCdpZCcpIHx8IG51bGw7XG5cdG1hcC5sYW5ndWFnZSA9IHhtbE9iai5nZXRBdHRyaWJ1dGUoJ2xhbmd1YWdlJykgfHwgbnVsbDtcblxuXHQvLyBuZWVkIHRvIGJlIGNhcmVmdWwgaGVyZSwgYXMgdGhlcmUgY2FuIGJlIGdseXBoIGluIGFyY3Ncblx0Ly92YXIgZ2x5cGhzWE1MID0geG1sT2JqLnF1ZXJ5U2VsZWN0b3JBbGwoJ21hcCA+IGdseXBoJyk7XG5cdHZhciBnbHlwaHNYTUwgPSBnZXRGaXJzdExldmVsQnlOYW1lKHhtbE9iaiwgXCJnbHlwaFwiKTtcblx0Zm9yICh2YXIgaT0wOyBpIDwgZ2x5cGhzWE1MLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGdseXBoID0gbnMuR2x5cGguZnJvbVhNTChnbHlwaHNYTUxbaV0pO1xuXHRcdG1hcC5hZGRHbHlwaChnbHlwaCk7XG5cdH1cblx0dmFyIGFyY3NYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FyYycpIHx8IG51bGw7XG5cdGZvciAodmFyIGk9MDsgaSA8IGFyY3NYTUwubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgYXJjID0gbnMuQXJjLmZyb21YTUwoYXJjc1hNTFtpXSk7XG5cdFx0bWFwLmFkZEFyYyhhcmMpO1xuXHR9XG5cblx0bWFwLmJhc2VGcm9tWE1MKHhtbE9iaik7XG5cdHJldHVybiBtYXA7XG59O1xubnMuTWFwID0gTWFwO1xuLy8gLS0tLS0tLSBFTkQgTUFQIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBFWFRFTlNJT05TIC0tLS0tLS1cbi8qKlxuICAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtleHRlbnNpb24mZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzXG4gKi9cbnZhciBFeHRlbnNpb24gPSBmdW5jdGlvbiAoKSB7XG5cdC8vIGNvbnNpZGVyIGZpcnN0IG9yZGVyIGNoaWxkcmVuLCBhZGQgdGhlbSB3aXRoIHRoZWlyIHRhZ25hbWUgYXMgcHJvcGVydHkgb2YgdGhpcyBvYmplY3Rcblx0Ly8gc3RvcmUgeG1sT2JqZWN0IGlmIG5vIHN1cHBvcnRlZCBwYXJzaW5nICh1bnJlY29nbml6ZWQgZXh0ZW5zaW9ucylcblx0Ly8gZWxzZSBzdG9yZSBpbnN0YW5jZSBvZiB0aGUgZXh0ZW5zaW9uXG5cdHRoaXMubGlzdCA9IHt9O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR8cmVuZGVyLlJlbmRlckluZm9ybWF0aW9ufSBleHRlbnNpb25cbiAqL1xuRXh0ZW5zaW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG5cdGlmIChleHRlbnNpb24gaW5zdGFuY2VvZiByZW5kZXJFeHQuUmVuZGVySW5mb3JtYXRpb24pIHtcblx0XHR0aGlzLmxpc3RbJ3JlbmRlckluZm9ybWF0aW9uJ10gPSBleHRlbnNpb247XG5cdH1cblx0ZWxzZSBpZiAoZXh0ZW5zaW9uIGluc3RhbmNlb2YgYW5ub3RFeHQuQW5ub3RhdGlvbikge1xuXHRcdHRoaXMubGlzdFsnYW5ub3RhdGlvbiddID0gZXh0ZW5zaW9uO1xuXHR9XG5cdGVsc2UgaWYgKGV4dGVuc2lvbi5ub2RlVHlwZSA9PSAnMScpIHsgLy8gTm9kZS5FTEVNRU5UX05PREUgPT0gMVxuXHRcdC8vIGNhc2Ugd2hlcmUgcmVuZGVySW5mb3JtYXRpb24gaXMgcGFzc2VkIHVucGFyc2VkXG5cdFx0aWYgKGV4dGVuc2lvbi50YWdOYW1lID09ICdyZW5kZXJJbmZvcm1hdGlvbicpIHtcblx0XHRcdHZhciByZW5kZXJJbmZvcm1hdGlvbiA9IHJlbmRlckV4dC5SZW5kZXJJbmZvcm1hdGlvbi5mcm9tWE1MKGV4dGVuc2lvbik7XG5cdFx0XHR0aGlzLmxpc3RbJ3JlbmRlckluZm9ybWF0aW9uJ10gPSByZW5kZXJJbmZvcm1hdGlvbjtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZXh0ZW5zaW9uLnRhZ05hbWUgPT0gJ2Fubm90YXRpb24nKSB7XG5cdFx0XHR2YXIgYW5ub3RhdGlvbiA9IGFubm90RXh0LkFubm90YXRpb24uZnJvbVhNTChleHRlbnNpb24pO1xuXHRcdFx0dGhpcy5saXN0Wydhbm5vdGF0aW9uJ10gPSByZW5kZXJJbmZvcm1hdGlvbjtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHR0aGlzLmxpc3RbZXh0ZW5zaW9uLnRhZ05hbWVdID0gZXh0ZW5zaW9uO1xuXHRcdH1cblx0fVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXh0ZW5zaW9uTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuRXh0ZW5zaW9uLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoZXh0ZW5zaW9uTmFtZSkge1xuXHRyZXR1cm4gdGhpcy5saXN0Lmhhc093blByb3BlcnR5KGV4dGVuc2lvbk5hbWUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXh0ZW5zaW9uTmFtZVxuICogQHJldHVybiB7RWxlbWVudHxyZW5kZXIuUmVuZGVySW5mb3JtYXRpb259XG4gKi9cbkV4dGVuc2lvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGV4dGVuc2lvbk5hbWUpIHtcblx0aWYgKHRoaXMuaGFzKGV4dGVuc2lvbk5hbWUpKSB7XG5cdFx0cmV0dXJuIHRoaXMubGlzdFtleHRlbnNpb25OYW1lXTtcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5FeHRlbnNpb24ucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgZXh0ZW5zaW9uID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnZXh0ZW5zaW9uJyk7XG5cdGZvciAodmFyIGV4dEluc3RhbmNlIGluIHRoaXMubGlzdCkge1xuXHRcdGlmIChleHRJbnN0YW5jZSA9PSBcInJlbmRlckluZm9ybWF0aW9uXCIgfHwgZXh0SW5zdGFuY2UgPT0gXCJhbm5vdGF0aW9uXCIpIHtcblx0XHRcdGV4dGVuc2lvbi5hcHBlbmRDaGlsZCh0aGlzLmdldChleHRJbnN0YW5jZSkuYnVpbGRYbWxPYmooKSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gd2VpcmQgaGFjayBuZWVkZWQgaGVyZVxuXHRcdFx0Ly8geG1sZG9tIGRvZXNuJ3Qgc2VyaWFsaXplIGV4dGVuc2lvbiBjb3JyZWN0bHkgaWYgdGhlIGV4dGVuc2lvbiBoYXMgbW9yZSB0aGFuIG9uZSB1bnN1cHBvcnRlZCBleHRlbnNpb25cblx0XHRcdC8vIHdlIG5lZWQgdG8gc2VyaWFsaXplIGFuZCB1bnNlcmlhbGl6ZSBpdCB3aGVuIGFwcGVuZGluZyBpdCBoZXJlXG5cdFx0XHR2YXIgc2VyaWFsaXplRXh0ID0gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5nZXQoZXh0SW5zdGFuY2UpKTtcblx0XHRcdHZhciB1bnNlcmlhbGl6ZUV4dCA9IG5ldyB4bWxkb20uRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHNlcmlhbGl6ZUV4dCk7IC8vIGZyZXNoIG5ldyBkb20gZWxlbWVudFxuXHRcdFx0ZXh0ZW5zaW9uLmFwcGVuZENoaWxkKHVuc2VyaWFsaXplRXh0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGV4dGVuc2lvbjtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5FeHRlbnNpb24ucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxPYmpcbiAqIEByZXR1cm4ge0V4dGVuc2lvbn1cbiAqL1xuRXh0ZW5zaW9uLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnZXh0ZW5zaW9uJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgZXh0ZW5zaW9uLCBnb3Q6IFwiICsgeG1sT2JqLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBleHRlbnNpb24gPSBuZXcgRXh0ZW5zaW9uKCk7XG5cdHZhciBjaGlsZHJlbiA9IHhtbE9iai5jaGlsZE5vZGVzO1xuXHRmb3IgKHZhciBpPTA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGlmKCFjaGlsZHJlbltpXS50YWdOYW1lKSB7IC8vIGlmIHRhZ25hbWUgaXMgaGVyZSwgcmVhbCBlbGVtZW50IGZvdW5kXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0dmFyIGV4dFhtbE9iaiA9IGNoaWxkcmVuW2ldO1xuXHRcdHZhciBleHROYW1lID0gZXh0WG1sT2JqLnRhZ05hbWU7XG5cdFx0Ly9leHRlbnNpb24uYWRkKGV4dEluc3RhbmNlKTtcblx0XHRpZiAoZXh0TmFtZSA9PSAncmVuZGVySW5mb3JtYXRpb24nKSB7XG5cdFx0XHR2YXIgcmVuZGVySW5mb3JtYXRpb24gPSByZW5kZXJFeHQuUmVuZGVySW5mb3JtYXRpb24uZnJvbVhNTChleHRYbWxPYmopO1xuXHRcdFx0ZXh0ZW5zaW9uLmFkZChyZW5kZXJJbmZvcm1hdGlvbik7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGV4dE5hbWUgPT0gJ2Fubm90YXRpb24nKSB7XG5cdFx0XHR2YXIgYW5ub3RhdGlvbiA9IGFubm90RXh0LkFubm90YXRpb24uZnJvbVhNTChleHRYbWxPYmopO1xuXHRcdFx0ZXh0ZW5zaW9uLmFkZChhbm5vdGF0aW9uKTtcblx0XHR9XG5cdFx0ZWxzZSB7IC8vIHVuc3VwcG9ydGVkIGV4dGVuc2lvbiwgd2Ugc3RpbGwgc3RvcmUgdGhlIGRhdGEgYXMgaXNcblx0XHRcdGV4dGVuc2lvbi5hZGQoZXh0WG1sT2JqKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGV4dGVuc2lvbjtcbn07XG5ucy5FeHRlbnNpb24gPSBFeHRlbnNpb247XG4vLyAtLS0tLS0tIEVORCBFWFRFTlNJT05TIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBHTFlQSCAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtnbHlwaCZndDs8L2NvZGU+IGVsZW1lbnQuXG4gKiBAY2xhc3MgR2x5cGhcbiAqIEBleHRlbmRzIFNCR05CYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5pZFxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuY2xhc3NfXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5jb21wYXJ0bWVudFJlZlxuICogQHBhcmFtIHtMYWJlbD19IHBhcmFtcy5sYWJlbFxuICogQHBhcmFtIHtCYm94PX0gcGFyYW1zLmJib3hcbiAqIEBwYXJhbSB7U3RhdGVUeXBlPX0gcGFyYW1zLnN0YXRlXG4gKiBAcGFyYW0ge0Nsb25lVHlwZT19IHBhcmFtcy5jbG9uZVxuICogQHBhcmFtIHtHbHlwaFtdPX0gcGFyYW1zLmdseXBoTWVtYmVyc1xuICogQHBhcmFtIHtQb3J0W109fSBwYXJhbXMucG9ydHNcbiAqL1xudmFyIEdseXBoID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHRucy5TQkdOQmFzZS5jYWxsKHRoaXMsIHBhcmFtcyk7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsnaWQnLCAnY2xhc3NfJywgJ2NvbXBhcnRtZW50UmVmJywgJ2xhYmVsJywgJ2Jib3gnLCAnZ2x5cGhNZW1iZXJzJywgJ3BvcnRzJywgJ3N0YXRlJywgJ2Nsb25lJ10pO1xuXHR0aGlzLmlkIFx0XHRcdD0gcGFyYW1zLmlkO1xuXHR0aGlzLmNsYXNzXyBcdFx0PSBwYXJhbXMuY2xhc3NfO1xuXHR0aGlzLmNvbXBhcnRtZW50UmVmID0gcGFyYW1zLmNvbXBhcnRtZW50UmVmO1xuXG5cdC8vIGNoaWxkcmVuXG5cdHRoaXMubGFiZWwgXHRcdFx0PSBwYXJhbXMubGFiZWw7XG5cdHRoaXMuc3RhdGUgXHRcdFx0PSBwYXJhbXMuc3RhdGU7XG5cdHRoaXMuYmJveCBcdFx0XHQ9IHBhcmFtcy5iYm94O1xuXHR0aGlzLmNsb25lIFx0XHRcdD0gcGFyYW1zLmNsb25lO1xuXHR0aGlzLmdseXBoTWVtYmVycyBcdD0gcGFyYW1zLmdseXBoTWVtYmVycyB8fCBbXTsgLy8gY2FzZSBvZiBjb21wbGV4LCBjYW4gaGF2ZSBhcmJpdHJhcnkgbGlzdCBvZiBuZXN0ZWQgZ2x5cGhzXG5cdHRoaXMucG9ydHMgXHRcdFx0PSBwYXJhbXMucG9ydHMgfHwgW107XG5cblx0dGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbJ2xhYmVsJywgJ3N0YXRlJywgJ2Jib3gnLCAnY2xvbmUnLCAnZ2x5cGhNZW1iZXJzJywgJ3BvcnRzJ107XG5cdHRoaXMudGFnTmFtZSA9ICdnbHlwaCc7XG59O1xuXG5HbHlwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG5zLlNCR05CYXNlLnByb3RvdHlwZSk7XG5HbHlwaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBHbHlwaDtcblxuLyoqXG4gKiBAcGFyYW0ge0xhYmVsfSBsYWJlbFxuICovXG5HbHlwaC5wcm90b3R5cGUuc2V0TGFiZWwgPSBmdW5jdGlvbiAobGFiZWwpIHtcblx0dGhpcy5sYWJlbCA9IGxhYmVsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0YXRlVHlwZX0gc3RhdGVcbiAqL1xuR2x5cGgucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtCYm94fSBiYm94XG4gKi9cbkdseXBoLnByb3RvdHlwZS5zZXRCYm94ID0gZnVuY3Rpb24gKGJib3gpIHtcblx0dGhpcy5iYm94ID0gYmJveDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtDbG9uZVR5cGV9IGNsb25lXG4gKi9cbkdseXBoLnByb3RvdHlwZS5zZXRDbG9uZSA9IGZ1bmN0aW9uIChjbG9uZSkge1xuXHR0aGlzLmNsb25lID0gY2xvbmU7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7R2x5cGh9IGdseXBoTWVtYmVyXG4gKi9cbkdseXBoLnByb3RvdHlwZS5hZGRHbHlwaE1lbWJlciA9IGZ1bmN0aW9uIChnbHlwaE1lbWJlcikge1xuXHR0aGlzLmdseXBoTWVtYmVycy5wdXNoKGdseXBoTWVtYmVyKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtQb3J0fSBwb3J0XG4gKi9cbkdseXBoLnByb3RvdHlwZS5hZGRQb3J0ID0gZnVuY3Rpb24gKHBvcnQpIHtcblx0dGhpcy5wb3J0cy5wdXNoKHBvcnQpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5HbHlwaC5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBnbHlwaCA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2dseXBoJyk7XG5cdC8vIGF0dHJpYnV0ZXNcblx0aWYodGhpcy5pZCAhPSBudWxsKSB7XG5cdFx0Z2x5cGguc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuaWQpO1xuXHR9XG5cdGlmKHRoaXMuY2xhc3NfICE9IG51bGwpIHtcblx0XHRnbHlwaC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5jbGFzc18pO1xuXHR9XG5cdGlmKHRoaXMuY29tcGFydG1lbnRSZWYgIT0gbnVsbCkge1xuXHRcdGdseXBoLnNldEF0dHJpYnV0ZSgnY29tcGFydG1lbnRSZWYnLCB0aGlzLmNvbXBhcnRtZW50UmVmKTtcblx0fVxuXHQvLyBjaGlsZHJlblxuXHRpZih0aGlzLmxhYmVsICE9IG51bGwpIHtcblx0XHRnbHlwaC5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdGlmKHRoaXMuc3RhdGUgIT0gbnVsbCkge1xuXHRcdGdseXBoLmFwcGVuZENoaWxkKHRoaXMuc3RhdGUuYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0aWYodGhpcy5iYm94ICE9IG51bGwpIHtcblx0XHRnbHlwaC5hcHBlbmRDaGlsZCh0aGlzLmJib3guYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0aWYodGhpcy5jbG9uZSAhPSBudWxsKSB7XG5cdFx0Z2x5cGguYXBwZW5kQ2hpbGQodGhpcy5jbG9uZS5idWlsZFhtbE9iaigpKTtcblx0fVxuXHRmb3IodmFyIGk9MDsgaSA8IHRoaXMuZ2x5cGhNZW1iZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Z2x5cGguYXBwZW5kQ2hpbGQodGhpcy5nbHlwaE1lbWJlcnNbaV0uYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0Zm9yKHZhciBpPTA7IGkgPCB0aGlzLnBvcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Z2x5cGguYXBwZW5kQ2hpbGQodGhpcy5wb3J0c1tpXS5idWlsZFhtbE9iaigpKTtcblx0fVxuXHR0aGlzLmJhc2VUb1htbE9iaihnbHlwaCk7XG5cdHJldHVybiBnbHlwaDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5HbHlwaC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7R2x5cGh9XG4gKi9cbkdseXBoLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnZ2x5cGgnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBnbHlwaCwgZ290OiBcIiArIHhtbE9iai50YWdOYW1lKTtcblx0fVxuXHR2YXIgZ2x5cGggPSBuZXcgR2x5cGgoKTtcblx0Z2x5cGguaWQgXHRcdFx0XHQ9IHhtbE9iai5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgbnVsbDtcblx0Z2x5cGguY2xhc3NfIFx0XHRcdD0geG1sT2JqLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCBudWxsO1xuXHRnbHlwaC5jb21wYXJ0bWVudFJlZiBcdD0geG1sT2JqLmdldEF0dHJpYnV0ZSgnY29tcGFydG1lbnRSZWYnKSB8fCBudWxsO1xuXG5cdHZhciBsYWJlbFhNTCA9IHhtbE9iai5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGFiZWwnKVswXTtcblx0aWYgKGxhYmVsWE1MICE9IG51bGwpIHtcblx0XHR2YXIgbGFiZWwgPSBucy5MYWJlbC5mcm9tWE1MKGxhYmVsWE1MKTtcblx0XHRnbHlwaC5zZXRMYWJlbChsYWJlbCk7XG5cdH1cblx0dmFyIHN0YXRlWE1MID0geG1sT2JqLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdGF0ZScpWzBdO1xuXHRpZiAoc3RhdGVYTUwgIT0gbnVsbCkge1xuXHRcdHZhciBzdGF0ZSA9IG5zLlN0YXRlVHlwZS5mcm9tWE1MKHN0YXRlWE1MKTtcblx0XHRnbHlwaC5zZXRTdGF0ZShzdGF0ZSk7XG5cdH1cblx0dmFyIGJib3hYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jib3gnKVswXTtcblx0aWYgKGJib3hYTUwgIT0gbnVsbCkge1xuXHRcdHZhciBiYm94ID0gbnMuQmJveC5mcm9tWE1MKGJib3hYTUwpO1xuXHRcdGdseXBoLnNldEJib3goYmJveCk7XG5cdH1cblx0dmFyIGNsb25lWE1sID0geG1sT2JqLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjbG9uZScpWzBdO1xuXHRpZiAoY2xvbmVYTWwgIT0gbnVsbCkge1xuXHRcdHZhciBjbG9uZSA9IG5zLkNsb25lVHlwZS5mcm9tWE1MKGNsb25lWE1sKTtcblx0XHRnbHlwaC5zZXRDbG9uZShjbG9uZSk7XG5cdH1cblx0Ly8gbmVlZCBzcGVjaWFsIGNhcmUgYmVjYXVzZSBvZiByZWN1cnNpb24gb2YgbmVzdGVkIGdseXBoIG5vZGVzXG5cdC8vIHRha2Ugb25seSBmaXJzdCBsZXZlbCBnbHlwaHNcblx0dmFyIGNoaWxkcmVuID0geG1sT2JqLmNoaWxkTm9kZXM7XG5cdGZvciAodmFyIGo9MDsgaiA8IGNoaWxkcmVuLmxlbmd0aDsgaisrKSB7IC8vIGxvb3AgdGhyb3VnaCBhbGwgZmlyc3QgbGV2ZWwgY2hpbGRyZW5cblx0XHR2YXIgY2hpbGQgPSBjaGlsZHJlbltqXTtcblx0XHRpZiAoY2hpbGQudGFnTmFtZSAmJiBjaGlsZC50YWdOYW1lID09IFwiZ2x5cGhcIikgeyAvLyBoZXJlIHdlIG9ubHkgd2FudCB0aGUgZ2x5aCBjaGlsZHJlblxuXHRcdFx0dmFyIGdseXBoTWVtYmVyID0gR2x5cGguZnJvbVhNTChjaGlsZCk7IC8vIHJlY3Vyc2l2ZSBjYWxsIG9uIG5lc3RlZCBnbHlwaFxuXHRcdFx0Z2x5cGguYWRkR2x5cGhNZW1iZXIoZ2x5cGhNZW1iZXIpO1xuXHRcdH1cblx0fVxuXHR2YXIgcG9ydHNYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BvcnQnKTtcblx0Zm9yICh2YXIgaT0wOyBpIDwgcG9ydHNYTUwubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgcG9ydCA9IG5zLlBvcnQuZnJvbVhNTChwb3J0c1hNTFtpXSk7XG5cdFx0Z2x5cGguYWRkUG9ydChwb3J0KTtcblx0fVxuXHRnbHlwaC5iYXNlRnJvbVhNTCh4bWxPYmopO1xuXHRyZXR1cm4gZ2x5cGg7XG59O1xubnMuR2x5cGggPSBHbHlwaDtcbi8vIC0tLS0tLS0gRU5EIEdMWVBIIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBMQUJFTCAtLS0tLS0tXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDxjb2RlPiZsdDtsYWJlbCZndDs8L2NvZGU+IGVsZW1lbnQuXG4gKiBAY2xhc3MgTGFiZWxcbiAqIEBleHRlbmRzIFNCR05CYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy50ZXh0XG4gKi9cbnZhciBMYWJlbCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0bnMuU0JHTkJhc2UuY2FsbCh0aGlzLCBwYXJhbXMpO1xuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ3RleHQnXSk7XG5cdHRoaXMudGV4dCA9IHBhcmFtcy50ZXh0O1xuXG5cdHRoaXMuYWxsb3dlZENoaWxkcmVuID0gW107XG5cdHRoaXMudGFnTmFtZSA9ICdsYWJlbCc7XG59O1xuXG5MYWJlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG5zLlNCR05CYXNlLnByb3RvdHlwZSk7XG5MYWJlbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBucy5MYWJlbDtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5MYWJlbC5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBsYWJlbCA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG5cdGlmKHRoaXMudGV4dCAhPSBudWxsKSB7XG5cdFx0bGFiZWwuc2V0QXR0cmlidXRlKCd0ZXh0JywgdGhpcy50ZXh0KTtcblx0fVxuXHR0aGlzLmJhc2VUb1htbE9iaihsYWJlbCk7XG5cdHJldHVybiBsYWJlbDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5MYWJlbC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7TGFiZWx9XG4gKi9cbkxhYmVsLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnbGFiZWwnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBsYWJlbCwgZ290OiBcIiArIHhtbE9iai50YWdOYW1lKTtcblx0fVxuXHR2YXIgbGFiZWwgPSBuZXcgbnMuTGFiZWwoKTtcblx0bGFiZWwudGV4dCA9IHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3RleHQnKSB8fCBudWxsO1xuXHRsYWJlbC5iYXNlRnJvbVhNTCh4bWxPYmopO1xuXHRyZXR1cm4gbGFiZWw7XG59O1xubnMuTGFiZWwgPSBMYWJlbDtcbi8vIC0tLS0tLS0gRU5EIExBQkVMIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBCQk9YIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O2Jib3gmZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzIEJib3hcbiAqIEBleHRlbmRzIFNCR05CYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMueFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gcGFyYW1zLnlcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcj19IHBhcmFtcy53XG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMuaFxuICovXG52YXIgQmJveCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0bnMuU0JHTkJhc2UuY2FsbCh0aGlzLCBwYXJhbXMpO1xuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ3gnLCAneScsICd3JywgJ2gnXSk7XG5cdHRoaXMueCA9IHBhcnNlRmxvYXQocGFyYW1zLngpO1xuXHR0aGlzLnkgPSBwYXJzZUZsb2F0KHBhcmFtcy55KTtcblx0dGhpcy53ID0gcGFyc2VGbG9hdChwYXJhbXMudyk7XG5cdHRoaXMuaCA9IHBhcnNlRmxvYXQocGFyYW1zLmgpO1xuXG5cdHRoaXMuYWxsb3dlZENoaWxkcmVuID0gW107XG5cdHRoaXMudGFnTmFtZSA9ICdiYm94Jztcbn07XG5cbkJib3gucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShucy5TQkdOQmFzZS5wcm90b3R5cGUpO1xuQmJveC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBucy5CYm94O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbkJib3gucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgYmJveCA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2Jib3gnKTtcblx0aWYoIWlzTmFOKHRoaXMueCkpIHtcblx0XHRiYm94LnNldEF0dHJpYnV0ZSgneCcsIHRoaXMueCk7XG5cdH1cblx0aWYoIWlzTmFOKHRoaXMueSkpIHtcblx0XHRiYm94LnNldEF0dHJpYnV0ZSgneScsIHRoaXMueSk7XG5cdH1cblx0aWYoIWlzTmFOKHRoaXMudykpIHtcblx0XHRiYm94LnNldEF0dHJpYnV0ZSgndycsIHRoaXMudyk7XG5cdH1cblx0aWYoIWlzTmFOKHRoaXMuaCkpIHtcblx0XHRiYm94LnNldEF0dHJpYnV0ZSgnaCcsIHRoaXMuaCk7XG5cdH1cblx0dGhpcy5iYXNlVG9YbWxPYmooYmJveCk7XG5cdHJldHVybiBiYm94O1xufVxuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuQmJveC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7QmJveH1cbiAqL1xuQmJveC5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHRpZiAoeG1sT2JqLnRhZ05hbWUgIT0gJ2Jib3gnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBiYm94LCBnb3Q6IFwiICsgeG1sT2JqLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBiYm94ID0gbmV3IG5zLkJib3goKTtcblx0YmJveC54ID0gcGFyc2VGbG9hdCh4bWxPYmouZ2V0QXR0cmlidXRlKCd4JykpO1xuXHRiYm94LnkgPSBwYXJzZUZsb2F0KHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3knKSk7XG5cdGJib3gudyA9IHBhcnNlRmxvYXQoeG1sT2JqLmdldEF0dHJpYnV0ZSgndycpKTtcblx0YmJveC5oID0gcGFyc2VGbG9hdCh4bWxPYmouZ2V0QXR0cmlidXRlKCdoJykpO1xuXHRiYm94LmJhc2VGcm9tWE1MKHhtbE9iaik7XG5cdHJldHVybiBiYm94O1xufTtcbm5zLkJib3ggPSBCYm94O1xuLy8gLS0tLS0tLSBFTkQgQkJPWCAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gU1RBVEUgLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7c3RhdGUmZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzIFN0YXRlVHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMudmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnZhcmlhYmxlXG4gKi9cbnZhciBTdGF0ZVR5cGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsndmFsdWUnLCAndmFyaWFibGUnXSk7XG5cdHRoaXMudmFsdWUgPSBwYXJhbXMudmFsdWU7XG5cdHRoaXMudmFyaWFibGUgPSBwYXJhbXMudmFyaWFibGU7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblN0YXRlVHlwZS5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzdGF0ZSA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ3N0YXRlJyk7XG5cdGlmKHRoaXMudmFsdWUgIT0gbnVsbCkge1xuXHRcdHN0YXRlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0aGlzLnZhbHVlKTtcblx0fVxuXHRpZih0aGlzLnZhcmlhYmxlICE9IG51bGwpIHtcblx0XHRzdGF0ZS5zZXRBdHRyaWJ1dGUoJ3ZhcmlhYmxlJywgdGhpcy52YXJpYWJsZSk7XG5cdH1cblx0cmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblN0YXRlVHlwZS5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7U3RhdGVUeXBlfVxuICovXG5TdGF0ZVR5cGUuZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWxPYmopIHtcblx0aWYgKHhtbE9iai50YWdOYW1lICE9ICdzdGF0ZScpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIHN0YXRlLCBnb3Q6IFwiICsgeG1sT2JqLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBzdGF0ZSA9IG5ldyBucy5TdGF0ZVR5cGUoKTtcblx0c3RhdGUudmFsdWUgPSB4bWxPYmouZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8IG51bGw7XG5cdHN0YXRlLnZhcmlhYmxlID0geG1sT2JqLmdldEF0dHJpYnV0ZSgndmFyaWFibGUnKSB8fCBudWxsO1xuXHRyZXR1cm4gc3RhdGU7XG59O1xubnMuU3RhdGVUeXBlID0gU3RhdGVUeXBlO1xuLy8gLS0tLS0tLSBFTkQgU1RBVEUgLS0tLS0tLVxuXG4vLyAtLS0tLS0tIENMT05FIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O2Nsb25lJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzcyBDbG9uZVR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLmxhYmVsXG4gKi9cbnZhciBDbG9uZVR5cGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsnbGFiZWwnXSk7XG5cdHRoaXMubGFiZWwgPSBwYXJhbXMubGFiZWw7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbkNsb25lVHlwZS5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBjbG9uZSA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2Nsb25lJyk7XG5cdGlmKHRoaXMubGFiZWwgIT0gbnVsbCkge1xuXHRcdGNsb25lLnNldEF0dHJpYnV0ZSgnbGFiZWwnLCB0aGlzLmxhYmVsKTtcblx0fVxuXHRyZXR1cm4gY2xvbmU7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuQ2xvbmVUeXBlLnByb3RvdHlwZS50b1hNTCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyB4bWxkb20uWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKHRoaXMuYnVpbGRYbWxPYmooKSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0geG1sT2JqXG4gKiBAcmV0dXJuIHtDbG9uZVR5cGV9XG4gKi9cbkNsb25lVHlwZS5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHRpZiAoeG1sT2JqLnRhZ05hbWUgIT0gJ2Nsb25lJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgY2xvbmUsIGdvdDogXCIgKyB4bWxPYmoudGFnTmFtZSk7XG5cdH1cblx0dmFyIGNsb25lID0gbmV3IG5zLkNsb25lVHlwZSgpO1xuXHRjbG9uZS5sYWJlbCA9IHhtbE9iai5nZXRBdHRyaWJ1dGUoJ2xhYmVsJykgfHwgbnVsbDtcblx0cmV0dXJuIGNsb25lO1xufTtcbm5zLkNsb25lVHlwZSA9IENsb25lVHlwZTtcbi8vIC0tLS0tLS0gRU5EIENMT05FIC0tLS0tLS1cblxuLy8gLS0tLS0tLSBQT1JUIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O3BvcnQmZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzIFBvcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLmlkXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMueFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gcGFyYW1zLnlcbiAqL1xudmFyIFBvcnQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdG5zLlNCR05CYXNlLmNhbGwodGhpcywgcGFyYW1zKTtcblx0dmFyIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcywgWydpZCcsICd4JywgJ3knXSk7XG5cdHRoaXMuaWQgPSBwYXJhbXMuaWQ7XG5cdHRoaXMueCBcdD0gcGFyc2VGbG9hdChwYXJhbXMueCk7XG5cdHRoaXMueSBcdD0gcGFyc2VGbG9hdChwYXJhbXMueSk7XG5cblx0dGhpcy5hbGxvd2VkQ2hpbGRyZW4gPSBbXTtcblx0dGhpcy50YWdOYW1lID0gJ3BvcnQnO1xufTtcblxuUG9ydC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG5zLlNCR05CYXNlLnByb3RvdHlwZSk7XG5Qb3J0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG5zLlBvcnQ7XG5cbi8qKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuUG9ydC5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBwb3J0ID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgncG9ydCcpO1xuXHRpZih0aGlzLmlkICE9IG51bGwpIHtcblx0XHRwb3J0LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcblx0fVxuXHRpZighaXNOYU4odGhpcy54KSkge1xuXHRcdHBvcnQuc2V0QXR0cmlidXRlKCd4JywgdGhpcy54KTtcblx0fVxuXHRpZighaXNOYU4odGhpcy55KSkge1xuXHRcdHBvcnQuc2V0QXR0cmlidXRlKCd5JywgdGhpcy55KTtcblx0fVxuXHR0aGlzLmJhc2VUb1htbE9iaihwb3J0KTtcblx0cmV0dXJuIHBvcnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuUG9ydC5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7UG9ydH1cbiAqL1xuUG9ydC5mcm9tWE1MID0gZnVuY3Rpb24gKHhtbE9iaikge1xuXHRpZiAoeG1sT2JqLnRhZ05hbWUgIT0gJ3BvcnQnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBwb3J0LCBnb3Q6IFwiICsgeG1sT2JqLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBwb3J0ID0gbmV3IG5zLlBvcnQoKTtcblx0cG9ydC54IFx0PSBwYXJzZUZsb2F0KHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3gnKSk7XG5cdHBvcnQueSBcdD0gcGFyc2VGbG9hdCh4bWxPYmouZ2V0QXR0cmlidXRlKCd5JykpO1xuXHRwb3J0LmlkID0geG1sT2JqLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBudWxsO1xuXHRwb3J0LmJhc2VGcm9tWE1MKHhtbE9iaik7XG5cdHJldHVybiBwb3J0O1xufTtcbm5zLlBvcnQgPSBQb3J0O1xuLy8gLS0tLS0tLSBFTkQgUE9SVCAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gQVJDIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O2FyYyZndDs8L2NvZGU+IGVsZW1lbnQuXG4gKiBAY2xhc3MgQXJjXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5pZFxuICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbXMuY2xhc3NfXG4gKiBAcGFyYW0ge3N0cmluZz19IHBhcmFtcy5zb3VyY2VcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGFyYW1zLnRhcmdldFxuICogQHBhcmFtIHtTdGFydFR5cGU9fSBwYXJhbXMuc3RhcnRcbiAqIEBwYXJhbSB7RW5kVHlwZT19IHBhcmFtcy5lbmRcbiAqIEBwYXJhbSB7TmV4dFR5cGU9fSBwYXJhbXMubmV4dHNcbiAqIEBwYXJhbSB7R2x5cGhbXT19IHBhcmFtcy5nbHlwaHMgVGhlIGFyYydzIGNhcmRpbmFsaXR5LiBQb3NzaWJpbGl0eSB0byBoYXZlIG1vcmUgdGhhbiBvbmUgZ2x5cGggaXMgbGVmdCBvcGVuLlxuICovXG52YXIgQXJjID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHRucy5TQkdOQmFzZS5jYWxsKHRoaXMsIHBhcmFtcyk7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsnaWQnLCAnY2xhc3NfJywgJ3NvdXJjZScsICd0YXJnZXQnLCAnc3RhcnQnLCAnZW5kJywgJ25leHRzJywgJ2dseXBocyddKTtcblx0dGhpcy5pZCBcdD0gcGFyYW1zLmlkO1xuXHR0aGlzLmNsYXNzXyA9IHBhcmFtcy5jbGFzc187XG5cdHRoaXMuc291cmNlID0gcGFyYW1zLnNvdXJjZTtcblx0dGhpcy50YXJnZXQgPSBwYXJhbXMudGFyZ2V0O1xuXG5cdHRoaXMuc3RhcnQgXHQ9IHBhcmFtcy5zdGFydDtcblx0dGhpcy5lbmQgXHQ9IHBhcmFtcy5lbmQ7XG5cdHRoaXMubmV4dHMgXHQ9IHBhcmFtcy5uZXh0cyB8fCBbXTtcblx0dGhpcy5nbHlwaHMgPSBwYXJhbXMuZ2x5cGhzIHx8wqBbXTtcblxuXHR0aGlzLmFsbG93ZWRDaGlsZHJlbiA9IFsnc3RhcnQnLCAnbmV4dHMnLCAnZW5kJywgJ2dseXBocyddO1xuXHR0aGlzLnRhZ05hbWUgPSAnYXJjJztcbn07XG5cbkFyYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG5zLlNCR05CYXNlLnByb3RvdHlwZSk7XG5BcmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnMuQXJjO1xuXG4vKipcbiAqIEBwYXJhbSB7U3RhcnRUeXBlfSBzdGFydFxuICovXG5BcmMucHJvdG90eXBlLnNldFN0YXJ0ID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG5cdHRoaXMuc3RhcnQgPSBzdGFydDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbmRUeXBlfSBlbmRcbiAqL1xuQXJjLnByb3RvdHlwZS5zZXRFbmQgPSBmdW5jdGlvbiAoZW5kKSB7XG5cdHRoaXMuZW5kID0gZW5kO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05leHRUeXBlfSBuZXh0XG4gKi9cbkFyYy5wcm90b3R5cGUuYWRkTmV4dCA9IGZ1bmN0aW9uIChuZXh0KSB7XG5cdHRoaXMubmV4dHMucHVzaChuZXh0KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtHbHlwaH0gZ2x5cGhcbiAqL1xuQXJjLnByb3RvdHlwZS5hZGRHbHlwaCA9IGZ1bmN0aW9uIChnbHlwaCkge1xuXHR0aGlzLmdseXBocy5wdXNoKGdseXBoKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuQXJjLnByb3RvdHlwZS5idWlsZFhtbE9iaiA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGFyYyA9IG5ldyB4bWxkb20uRE9NSW1wbGVtZW50YXRpb24oKS5jcmVhdGVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ2FyYycpO1xuXHQvLyBhdHRyaWJ1dGVzXG5cdGlmKHRoaXMuaWQgIT0gbnVsbCkge1xuXHRcdGFyYy5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5pZCk7XG5cdH1cblx0aWYodGhpcy5jbGFzc18gIT0gbnVsbCkge1xuXHRcdGFyYy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5jbGFzc18pO1xuXHR9XG5cdGlmKHRoaXMuc291cmNlICE9IG51bGwpIHtcblx0XHRhcmMuc2V0QXR0cmlidXRlKCdzb3VyY2UnLCB0aGlzLnNvdXJjZSk7XG5cdH1cblx0aWYodGhpcy50YXJnZXQgIT0gbnVsbCkge1xuXHRcdGFyYy5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsIHRoaXMudGFyZ2V0KTtcblx0fVxuXHQvLyBjaGlsZHJlblxuXHRmb3IodmFyIGk9MDsgaSA8IHRoaXMuZ2x5cGhzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJjLmFwcGVuZENoaWxkKHRoaXMuZ2x5cGhzW2ldLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdGlmKHRoaXMuc3RhcnQgIT0gbnVsbCkge1xuXHRcdGFyYy5hcHBlbmRDaGlsZCh0aGlzLnN0YXJ0LmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdGZvcih2YXIgaT0wOyBpIDwgdGhpcy5uZXh0cy5sZW5ndGg7IGkrKykge1xuXHRcdGFyYy5hcHBlbmRDaGlsZCh0aGlzLm5leHRzW2ldLmJ1aWxkWG1sT2JqKCkpO1xuXHR9XG5cdGlmKHRoaXMuZW5kICE9IG51bGwpIHtcblx0XHRhcmMuYXBwZW5kQ2hpbGQodGhpcy5lbmQuYnVpbGRYbWxPYmooKSk7XG5cdH1cblx0dGhpcy5iYXNlVG9YbWxPYmooYXJjKTtcblx0cmV0dXJuIGFyYztcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5BcmMucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxPYmpcbiAqIEByZXR1cm4ge0FyY31cbiAqL1xuQXJjLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnYXJjJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBYTUwgcHJvdmlkZWQsIGV4cGVjdGVkIHRhZ05hbWUgYXJjLCBnb3Q6IFwiICsgeG1sT2JqLnRhZ05hbWUpO1xuXHR9XG5cdHZhciBhcmMgPSBuZXcgbnMuQXJjKCk7XG5cdGFyYy5pZCBcdFx0PSB4bWxPYmouZ2V0QXR0cmlidXRlKCdpZCcpIHx8IG51bGw7XG5cdGFyYy5jbGFzc18gXHQ9IHhtbE9iai5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgbnVsbDtcblx0YXJjLnNvdXJjZSBcdD0geG1sT2JqLmdldEF0dHJpYnV0ZSgnc291cmNlJykgfHwgbnVsbDtcblx0YXJjLnRhcmdldCBcdD0geG1sT2JqLmdldEF0dHJpYnV0ZSgndGFyZ2V0JykgfHwgbnVsbDtcblxuXHR2YXIgc3RhcnRYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3N0YXJ0JylbMF07XG5cdGlmIChzdGFydFhNTCAhPSBudWxsKSB7XG5cdFx0dmFyIHN0YXJ0ID0gbnMuU3RhcnRUeXBlLmZyb21YTUwoc3RhcnRYTUwpO1xuXHRcdGFyYy5zZXRTdGFydChzdGFydCk7XG5cdH1cblx0dmFyIG5leHRYTUwgPSB4bWxPYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ25leHQnKTtcblx0Zm9yICh2YXIgaT0wOyBpIDwgbmV4dFhNTC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBuZXh0ID0gbnMuTmV4dFR5cGUuZnJvbVhNTChuZXh0WE1MW2ldKTtcblx0XHRhcmMuYWRkTmV4dChuZXh0KTtcblx0fVxuXHR2YXIgZW5kWE1MID0geG1sT2JqLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdlbmQnKVswXTtcblx0aWYgKGVuZFhNTCAhPSBudWxsKSB7XG5cdFx0dmFyIGVuZCA9IG5zLkVuZFR5cGUuZnJvbVhNTChlbmRYTUwpO1xuXHRcdGFyYy5zZXRFbmQoZW5kKTtcblx0fVxuXHR2YXIgZ2x5cGhzWE1MID0geG1sT2JqLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdnbHlwaCcpO1xuXHRmb3IgKHZhciBpPTA7IGkgPCBnbHlwaHNYTUwubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgZ2x5cGggPSBucy5HbHlwaC5mcm9tWE1MKGdseXBoc1hNTFtpXSk7XG5cdFx0YXJjLmFkZEdseXBoKGdseXBoKTtcblx0fVxuXG5cdGFyYy5iYXNlRnJvbVhNTCh4bWxPYmopO1xuXHRyZXR1cm4gYXJjO1xufTtcbm5zLkFyYyA9IEFyYztcbi8vIC0tLS0tLS0gRU5EIEFSQyAtLS0tLS0tXG5cbi8vIC0tLS0tLS0gU1RBUlRUWVBFIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O3N0YXJ0Jmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzcyBTdGFydFR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcj19IHBhcmFtcy54XG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMueVxuICovXG52YXIgU3RhcnRUeXBlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ3gnLCAneSddKTtcblx0dGhpcy54ID0gcGFyc2VGbG9hdChwYXJhbXMueCk7XG5cdHRoaXMueSA9IHBhcnNlRmxvYXQocGFyYW1zLnkpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5TdGFydFR5cGUucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc3RhcnQgPSBuZXcgeG1sZG9tLkRPTUltcGxlbWVudGF0aW9uKCkuY3JlYXRlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdzdGFydCcpO1xuXHRpZighaXNOYU4odGhpcy54KSkge1xuXHRcdHN0YXJ0LnNldEF0dHJpYnV0ZSgneCcsIHRoaXMueCk7XG5cdH1cblx0aWYoIWlzTmFOKHRoaXMueSkpIHtcblx0XHRzdGFydC5zZXRBdHRyaWJ1dGUoJ3knLCB0aGlzLnkpO1xuXHR9XG5cdHJldHVybiBzdGFydDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TdGFydFR5cGUucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxPYmpcbiAqIEByZXR1cm4ge1N0YXJ0VHlwZX1cbiAqL1xuU3RhcnRUeXBlLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnc3RhcnQnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBzdGFydCwgZ290OiBcIiArIHhtbE9iai50YWdOYW1lKTtcblx0fVxuXHR2YXIgc3RhcnQgPSBuZXcgbnMuU3RhcnRUeXBlKCk7XG5cdHN0YXJ0LnggPSBwYXJzZUZsb2F0KHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3gnKSk7XG5cdHN0YXJ0LnkgPSBwYXJzZUZsb2F0KHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3knKSk7XG5cdHJldHVybiBzdGFydDtcbn07XG5ucy5TdGFydFR5cGUgPSBTdGFydFR5cGU7XG4vLyAtLS0tLS0tIEVORCBTVEFSVFRZUEUgLS0tLS0tLVxuXG4vLyAtLS0tLS0tIEVORFRZUEUgLS0tLS0tLVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSA8Y29kZT4mbHQ7ZW5kJmd0OzwvY29kZT4gZWxlbWVudC5cbiAqIEBjbGFzcyBFbmRUeXBlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMueFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gcGFyYW1zLnlcbiAqL1xudmFyIEVuZFR5cGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBwYXJhbXMgPSBjaGVja1BhcmFtcyhwYXJhbXMsIFsneCcsICd5J10pO1xuXHR0aGlzLnggPSBwYXJzZUZsb2F0KHBhcmFtcy54KTtcblx0dGhpcy55ID0gcGFyc2VGbG9hdChwYXJhbXMueSk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbkVuZFR5cGUucHJvdG90eXBlLmJ1aWxkWG1sT2JqID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgZW5kID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnZW5kJyk7XG5cdGlmKCFpc05hTih0aGlzLngpKSB7XG5cdFx0ZW5kLnNldEF0dHJpYnV0ZSgneCcsIHRoaXMueCk7XG5cdH1cblx0aWYoIWlzTmFOKHRoaXMueSkpIHtcblx0XHRlbmQuc2V0QXR0cmlidXRlKCd5JywgdGhpcy55KTtcblx0fVxuXHRyZXR1cm4gZW5kO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbkVuZFR5cGUucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IHhtbGRvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5idWlsZFhtbE9iaigpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSB4bWxPYmpcbiAqIEByZXR1cm4ge0VuZFR5cGV9XG4gKi9cbkVuZFR5cGUuZnJvbVhNTCA9IGZ1bmN0aW9uICh4bWxPYmopIHtcblx0aWYgKHhtbE9iai50YWdOYW1lICE9ICdlbmQnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIFhNTCBwcm92aWRlZCwgZXhwZWN0ZWQgdGFnTmFtZSBlbmQsIGdvdDogXCIgKyB4bWxPYmoudGFnTmFtZSk7XG5cdH1cblx0dmFyIGVuZCA9IG5ldyBucy5FbmRUeXBlKCk7XG5cdGVuZC54ID0gcGFyc2VGbG9hdCh4bWxPYmouZ2V0QXR0cmlidXRlKCd4JykpO1xuXHRlbmQueSA9IHBhcnNlRmxvYXQoeG1sT2JqLmdldEF0dHJpYnV0ZSgneScpKTtcblx0cmV0dXJuIGVuZDtcbn07XG5ucy5FbmRUeXBlID0gRW5kVHlwZTtcbi8vIC0tLS0tLS0gRU5EIEVORFRZUEUgLS0tLS0tLVxuXG4vLyAtLS0tLS0tIE5FWFRUWVBFIC0tLS0tLS1cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgPGNvZGU+Jmx0O25leHQmZ3Q7PC9jb2RlPiBlbGVtZW50LlxuICogQGNsYXNzIE5leHRUeXBlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBwYXJhbXMueFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gcGFyYW1zLnlcbiAqL1xudmFyIE5leHRUeXBlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHR2YXIgcGFyYW1zID0gY2hlY2tQYXJhbXMocGFyYW1zLCBbJ3gnLCAneSddKTtcblx0dGhpcy54ID0gcGFyc2VGbG9hdChwYXJhbXMueCk7XG5cdHRoaXMueSA9IHBhcnNlRmxvYXQocGFyYW1zLnkpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5OZXh0VHlwZS5wcm90b3R5cGUuYnVpbGRYbWxPYmogPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBuZXh0ID0gbmV3IHhtbGRvbS5ET01JbXBsZW1lbnRhdGlvbigpLmNyZWF0ZURvY3VtZW50KCkuY3JlYXRlRWxlbWVudCgnbmV4dCcpO1xuXHRpZighaXNOYU4odGhpcy54KSkge1xuXHRcdG5leHQuc2V0QXR0cmlidXRlKCd4JywgdGhpcy54KTtcblx0fVxuXHRpZighaXNOYU4odGhpcy55KSkge1xuXHRcdG5leHQuc2V0QXR0cmlidXRlKCd5JywgdGhpcy55KTtcblx0fVxuXHRyZXR1cm4gbmV4dDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5OZXh0VHlwZS5wcm90b3R5cGUudG9YTUwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJ1aWxkWG1sT2JqKCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHhtbE9ialxuICogQHJldHVybiB7TmV4dFR5cGV9XG4gKi9cbk5leHRUeXBlLmZyb21YTUwgPSBmdW5jdGlvbiAoeG1sT2JqKSB7XG5cdGlmICh4bWxPYmoudGFnTmFtZSAhPSAnbmV4dCcpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgWE1MIHByb3ZpZGVkLCBleHBlY3RlZCB0YWdOYW1lIG5leHQsIGdvdDogXCIgKyB4bWxPYmoudGFnTmFtZSk7XG5cdH1cblx0dmFyIG5leHQgPSBuZXcgbnMuTmV4dFR5cGUoKTtcblx0bmV4dC54ID0gcGFyc2VGbG9hdCh4bWxPYmouZ2V0QXR0cmlidXRlKCd4JykpO1xuXHRuZXh0LnkgPSBwYXJzZUZsb2F0KHhtbE9iai5nZXRBdHRyaWJ1dGUoJ3knKSk7XG5cdHJldHVybiBuZXh0O1xufTtcbm5zLk5leHRUeXBlID0gTmV4dFR5cGU7XG4vLyAtLS0tLS0tIEVORCBORVhUVFlQRSAtLS0tLS0tXG5cbm5zLnJlbmRlciA9IHJlbmRlckV4dDtcbm5zLmFubm90ID0gYW5ub3RFeHQ7XG5tb2R1bGUuZXhwb3J0cyA9IG5zOyIsInZhciBucyA9IHt9O1xuXG4vKlxuXHRndWFyYW50ZWVzIHRvIHJldHVybiBhbiBvYmplY3Qgd2l0aCBnaXZlbiBhcmdzIGJlaW5nIHNldCB0byBudWxsIGlmIG5vdCBwcmVzZW50LCBvdGhlciBhcmdzIHJldHVybmVkIGFzIGlzXG4qL1xubnMuY2hlY2tQYXJhbXMgPSBmdW5jdGlvbiAocGFyYW1zLCBuYW1lcykge1xuXHRpZiAodHlwZW9mIHBhcmFtcyA9PSBcInVuZGVmaW5lZFwiIHx8IHBhcmFtcyA9PSBudWxsKSB7XG5cdFx0cGFyYW1zID0ge307XG5cdH1cblx0aWYgKHR5cGVvZiBwYXJhbXMgIT0gJ29iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcGFyYW1zLiBPYmplY3Qgd2l0aCBuYW1lZCBwYXJhbWV0ZXJzIG11c3QgYmUgcGFzc2VkLlwiKTtcblx0fVxuXHRmb3IodmFyIGk9MDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGFyZ05hbWUgPSBuYW1lc1tpXTtcblx0XHRpZiAodHlwZW9mIHBhcmFtc1thcmdOYW1lXSA9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cGFyYW1zW2FyZ05hbWVdID0gbnVsbDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHBhcmFtcztcbn1cblxubnMuZ2V0Rmlyc3RMZXZlbEJ5TmFtZSA9IGZ1bmN0aW9uICh4bWxPYmosIHRhZ05hbWUpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHRmb3IodmFyIGk9MDsgaTx4bWxPYmouY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBjaGlsZCA9IHhtbE9iai5jaGlsZE5vZGVzW2ldO1xuXHRcdGlmIChjaGlsZC50YWdOYW1lICYmIGNoaWxkLnRhZ05hbWUgPT0gdGFnTmFtZSkge1xuXHRcdFx0cmVzdWx0LnB1c2goY2hpbGQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuczsiXX0=
